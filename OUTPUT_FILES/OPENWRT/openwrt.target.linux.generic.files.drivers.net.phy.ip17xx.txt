
 * ip17xx.c: Swconfig configuration for IC+ IP17xx switch family
 *
 * Copyright (C) 2008 Patrick Horn <patrick.horn@gmail.com>
 * Copyright (C) 2008, 2010 Martin Mares <mj@ucw.cz>
 * Copyright (C) 2009 Felix Fietkau <nbd@nbd.name>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
 * GNU General Public License for more details.
  phy mii********** CONSTANTS ********** Compare to bits 4-9 of MII register 0,3. The default VLAN for each port.
	 Default: 0x0001 for Ports 0,1,2,3
		  0x0002 for Ports 4,5  These ports are tagged.
	 Default: 0x00  These ports are untagged.
	 Default: 0x00 (i.e. do not alter any VLAN tags...)
	 Maybe set to 0 if user disables VLANs.  Port M and Port N are on the same VLAN.
	 Default: All ports on all VLANs.  Use register {29, 19+N/2} Port 5 uses register {30, 18} but same as odd bits. in a different register on IP175C. This VLAN corresponds to which ports.
	 Default: 0x2f,0x30,0x3f,0x3f...  General flags  set to 1 for 178C, 0 for 175C. 175C has two vlans per register but 178C has only one. Pointers to functions which manipulate hardware state +N not used with SIMPLE_VLAN_REGISTERS +N {0-2} +N/2 +N/2 {0-2} Only programmable via EEPROM +N/2 +N/2, {0-2} The IP175D has a completely different interface, so we leave most of the registers undefined and switch to different code paths. ROUTER_EN TAG_VLAN_EN VLAN tag (IP175D only) phy/reg for the low level register access via swconfig*
 * These two macros are to simplify the mapping of logical bits to the bits in hardware.
 * NOTE: these macros will return if there is an error!
  No other oui_id should have reached us anyway
		 *  Several models share the same model_no:
		 *  178C has more PHYs, so we try whether the device responds to a read from PHY5
		 *  175D has a new chip ID register
		 *  175C has neither
		 ** Low-level functions for the older models *** Only set vlan and router flags in the switch ** Set all VLAN and port state.  Usually you should call "correct_vlan_state" first. * shouldn't get here, but...printf("shareports for %d is %02X\n",j,state->ports[j].shareports);*
 *  Uses only the VLAN port mask and the add tag mask to generate the other fields:
 *  which ports are part of the same VLAN, removing vlan tags, and VLAN tag ids.
  Hack -- we need to store the "set" vlans somewhere... Share with everybody!** Low-level functions for IP175D ** default tags Reset the filter tag Port masks, tag adds and removals Default VLAN tag for each port VLAN classification rules: tag-based VLANs, use VID to classify, drop packets that cannot be classified. Ingress rules: CFI=1 dropped, null VID is untagged, VID=1 passed, VID=0xfff discarded, admin both tagged and untagged, ingress filters enabled. Egress rules: IGMP processing off, keep VLAN header off VLAN classification rules: everything off & clear table Ingress and egress rules: set to defaults Reset default VLAN for each port to 0 Disable the special tagging mode Set 802.1q protocol type** High-level functions ** Do not change any state. Otherwise, if we are switching state, set fields to a known default.
		 *  Data sheet specifies reset period to be 2 msec.
		 *  (I don't see any mention of the 2ms delay in the IP178C spec, only
		 *  in IP175C, but it can't hurt.)
		  reset switch ports  shouldn't ever happen.* Get the current phy address * Set a new phy address for low level access to registers * Get the current register number * Set a new register address for low level access to registers * Get the register content of state->proc_mii * Write a value to the register defined by phy/reg above  Just a const pointer, won't be freed by swconfig. Can't set speed for cpu port  fixed-length at 80. jal: added for low level debugging etc.  We only attach to PHY 0, but use all available PHYs  Return any positive value 
 * ip17xx.c: Swconfig configuration for IC+ IP17xx switch family
 *
 * Copyright (C) 2008 Patrick Horn <patrick.horn@gmail.com>
 * Copyright (C) 2008, 2010 Martin Mares <mj@ucw.cz>
 * Copyright (C) 2009 Felix Fietkau <nbd@nbd.name>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
 * GNU General Public License for more details.
  phy mii********** CONSTANTS ********** Compare to bits 4-9 of MII register 0,3. The default VLAN for each port.
	 Default: 0x0001 for Ports 0,1,2,3
		  0x0002 for Ports 4,5  These ports are tagged.
	 Default: 0x00  These ports are untagged.
	 Default: 0x00 (i.e. do not alter any VLAN tags...)
	 Maybe set to 0 if user disables VLANs.  Port M and Port N are on the same VLAN.
	 Default: All ports on all VLANs.  Use register {29, 19+N/2} Port 5 uses register {30, 18} but same as odd bits. in a different register on IP175C. This VLAN corresponds to which ports.
	 Default: 0x2f,0x30,0x3f,0x3f...  General flags  set to 1 for 178C, 0 for 175C. 175C has two vlans per register but 178C has only one. Pointers to functions which manipulate hardware state +N not used with SIMPLE_VLAN_REGISTERS +N {0-2} +N/2 +N/2 {0-2} Only programmable via EEPROM +N/2 +N/2, {0-2} The IP175D has a completely different interface, so we leave most of the registers undefined and switch to different code paths. ROUTER_EN TAG_VLAN_EN VLAN tag (IP175D only) phy/reg for the low level register access via swconfig*
 * These two macros are to simplify the mapping of logical bits to the bits in hardware.
 * NOTE: these macros will return if there is an error!
  No other oui_id should have reached us anyway
		 *  Several models share the same model_no:
		 *  178C has more PHYs, so we try whether the device responds to a read from PHY5
		 *  175D has a new chip ID register
		 *  175C has neither
		 ** Low-level functions for the older models *** Only set vlan and router flags in the switch ** Set all VLAN and port state.  Usually you should call "correct_vlan_state" first. * shouldn't get here, but...printf("shareports for %d is %02X\n",j,state->ports[j].shareports);*
 *  Uses only the VLAN port mask and the add tag mask to generate the other fields:
 *  which ports are part of the same VLAN, removing vlan tags, and VLAN tag ids.
  Hack -- we need to store the "set" vlans somewhere... Share with everybody!** Low-level functions for IP175D ** default tags Reset the filter tag Port masks, tag adds and removals Default VLAN tag for each port VLAN classification rules: tag-based VLANs, use VID to classify, drop packets that cannot be classified. Ingress rules: CFI=1 dropped, null VID is untagged, VID=1 passed, VID=0xfff discarded, admin both tagged and untagged, ingress filters enabled. Egress rules: IGMP processing off, keep VLAN header off VLAN classification rules: everything off & clear table Ingress and egress rules: set to defaults Reset default VLAN for each port to 0 Disable the special tagging mode Set 802.1q protocol type** High-level functions ** Do not change any state. Otherwise, if we are switching state, set fields to a known default.
		 *  Data sheet specifies reset period to be 2 msec.
		 *  (I don't see any mention of the 2ms delay in the IP178C spec, only
		 *  in IP175C, but it can't hurt.)
		  reset switch ports  shouldn't ever happen.* Get the current phy address * Set a new phy address for low level access to registers * Get the current register number * Set a new register address for low level access to registers * Get the register content of state->proc_mii * Write a value to the register defined by phy/reg above  Just a const pointer, won't be freed by swconfig. Can't set speed for cpu port  fixed-length at 80. jal: added for low level debugging etc.  We only attach to PHY 0, but use all available PHYs  Return any positive value 