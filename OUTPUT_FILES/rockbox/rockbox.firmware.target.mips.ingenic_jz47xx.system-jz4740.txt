**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Maurus Cuelenaere
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Depends on crt0.S !  PLL output clock = EXTAL * NF / (NR * NO)
 *
 * NF = FD + 2, NR = RD + 2
 * NO = 1 (if OD = 0), NO = 2 (if OD = 1 or 2), NO = 4 (if OD = 3)
  divisors of I:S:P:L:M  Perform clock divisions immediately  Init USB Host clock, pllout2 must be n*48MHz  FD  RD=0, NR=2  OD=0, NO=1  PLL stable time  enable PLL  init PLL  SDRAM paramters Data bus width: 0-32bit, 1-16bit  Banks each chip: 0-2bank, 1-4bank  Row address: 11 to 13  Column address: 8 to 12  CAS latency: 2 or 3  SDRAM Timings, unit: ns RAS# Active Time  RAS# to CAS# Delay  RAS# Precharge Time  Write Latency Time  Refresh period: 8192 refresh cycles/64ms 
 * Init SDRAM memory.
  CAS latency is 2  CAS latency is 3 REG_EMC_BCR = 0;      /* Disable bus release */ Disable clock for counting  Fault DMCR value for mode register setting  Basic DMCR value  SDRAM timimg  SDRAM mode value  Stage 1. Precharge all banks by writing SDMR with DMCR.MRSET=0  Wait for precharge, > 200us  Stage 2. Enable auto-refresh  Divisor is 64, CKO/64  Wait for number of auto-refresh cycles  Stage 3. Mode Register Set  Set back to basic DMCR value  everything is ok now  Gets called *before* main  Enable CP | Mask interrupt 2  Disable all interrupts  Disable unneeded clocks, clocks are enabled when needed  Enable interrupts at core level  reset after 4ms  enable wdt clock  wdt start  check for power button without including any .h file  Enable RTC clock  Put system into hibernate mode  __rtc_set_scratch_pattern(0x12345678); **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Maurus Cuelenaere
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Depends on crt0.S !  PLL output clock = EXTAL * NF / (NR * NO)
 *
 * NF = FD + 2, NR = RD + 2
 * NO = 1 (if OD = 0), NO = 2 (if OD = 1 or 2), NO = 4 (if OD = 3)
  divisors of I:S:P:L:M  Perform clock divisions immediately  Init USB Host clock, pllout2 must be n*48MHz  FD  RD=0, NR=2  OD=0, NO=1  PLL stable time  enable PLL  init PLL  SDRAM paramters Data bus width: 0-32bit, 1-16bit  Banks each chip: 0-2bank, 1-4bank  Row address: 11 to 13  Column address: 8 to 12  CAS latency: 2 or 3  SDRAM Timings, unit: ns RAS# Active Time  RAS# to CAS# Delay  RAS# Precharge Time  Write Latency Time  Refresh period: 8192 refresh cycles/64ms 
 * Init SDRAM memory.
  CAS latency is 2  CAS latency is 3 REG_EMC_BCR = 0;      /* Disable bus release */ Disable clock for counting  Fault DMCR value for mode register setting  Basic DMCR value  SDRAM timimg  SDRAM mode value  Stage 1. Precharge all banks by writing SDMR with DMCR.MRSET=0  Wait for precharge, > 200us  Stage 2. Enable auto-refresh  Divisor is 64, CKO/64  Wait for number of auto-refresh cycles  Stage 3. Mode Register Set  Set back to basic DMCR value  everything is ok now  Gets called *before* main  Enable CP | Mask interrupt 2  Disable all interrupts  Disable unneeded clocks, clocks are enabled when needed  Enable interrupts at core level  reset after 4ms  enable wdt clock  wdt start  check for power button without including any .h file  Enable RTC clock  Put system into hibernate mode  __rtc_set_scratch_pattern(0x12345678); **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Maurus Cuelenaere
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Depends on crt0.S !  PLL output clock = EXTAL * NF / (NR * NO)
 *
 * NF = FD + 2, NR = RD + 2
 * NO = 1 (if OD = 0), NO = 2 (if OD = 1 or 2), NO = 4 (if OD = 3)
  divisors of I:S:P:L:M  Perform clock divisions immediately  Init USB Host clock, pllout2 must be n*48MHz  FD  RD=0, NR=2  OD=0, NO=1  PLL stable time  enable PLL  init PLL  SDRAM paramters Data bus width: 0-32bit, 1-16bit  Banks each chip: 0-2bank, 1-4bank  Row address: 11 to 13  Column address: 8 to 12  CAS latency: 2 or 3  SDRAM Timings, unit: ns RAS# Active Time  RAS# to CAS# Delay  RAS# Precharge Time  Write Latency Time  Refresh period: 8192 refresh cycles/64ms 
 * Init SDRAM memory.
  CAS latency is 2  CAS latency is 3 REG_EMC_BCR = 0;      /* Disable bus release */ Disable clock for counting  Fault DMCR value for mode register setting  Basic DMCR value  SDRAM timimg  SDRAM mode value  Stage 1. Precharge all banks by writing SDMR with DMCR.MRSET=0  Wait for precharge, > 200us  Stage 2. Enable auto-refresh  Divisor is 64, CKO/64  Wait for number of auto-refresh cycles  Stage 3. Mode Register Set  Set back to basic DMCR value  everything is ok now  Gets called *before* main  Enable CP | Mask interrupt 2  Disable all interrupts  Disable unneeded clocks, clocks are enabled when needed  Enable interrupts at core level  reset after 4ms  enable wdt clock  wdt start  check for power button without including any .h file  Enable RTC clock  Put system into hibernate mode  __rtc_set_scratch_pattern(0x12345678); 