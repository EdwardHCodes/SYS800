**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 Marcin Bukat
 * Copyright (C) 2011 Andrew Ryabinin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Mask the DMA interrupt  mask HDMA interrupt  Unmask the DMA interrupt if enabled  unmask HDMA interrupt  enable HDMA clock  source address  i2s tx fifo  number of dma transactions
                                                * of transfer size bytes
                                                * (zero based)
                                                 mask ch1 accumulation overflow irq  mask ch0 accumulation overflow irq  mask ch1 page count down irq  UNMASK ch0 page count down irq  mask ch0 transfer irq  mask ch1 transfer irq  clear ch1 accumulation overflow flag  clear ch0 accumulation overflow flag  clear ch1 count down to zero flag  clear ch0 count down to zero flag  clear ch1 active flag  clear ch0 active flag  slice size in transfer size units (zero base)  page count  page mode  slice mode  DMA enable  generate interrupt  on-the-fly is not supported by rk27xx  transfer mode inc8  external hdreq from i2s tx  increment source address  fixed destination address  transfer size = 32bits word  command of software DMA (not relevant)  hardware trigger DMA mode  Stop any DMA in progress  kick in DMA transfer  pause DMA transfer by disabling clock to DMA module  iomux I2S internal  i2s external bit  i2s_mclk  i2s_sdo  i2s_sdi  i2s_lrck  i2s_bck  iomux I2S external  i2s external bit  i2s_mclk  i2s_sdo  i2s_sdi  i2s_lrck  i2s_bck  enable i2s clocks  configure I2S module  disable all i2s interrupts  LRCK/SCLK = 64  MCLK/SCLK = 4  16bit samples  stereo  I2S IF  master mode  slave mode  the fifo is 16x32bits according to my tests
     * while the docs state 32x32bits
      Tx trigger level half full  Rx trigger level half full  reset Tx  reset Rx  HDMA Req1 enable  HDMA Req2 disable  Req1 for Tx fifo  Req2 for Rx fifo  normal operation  start Tx (master mode)  do not start Rx (master mode)  setting Rx bit to 1 result in choppy audio  not used in slave mode  not used in slave mode  When codec is slave we need to setup i2s MCLK clock using codec pll.
 * The MCLK frequency is 256*codec frequency as i2s setup is:
 * LRCK/SCLK = 64 and MCLK/SCLK = 4 (see i2s_init() for reference)
 *
 * PLL output frequency:
 * Fout = ((Fref / (CLKR+1)) * (CLKF+1)) / (CLKOD+1)
 * Fref = 24 MHz
  {CLKR, CLKF, CLKOD, CODECPLL_DIV}  select divider output from codec pll  Codec PLL power up  Saturation behavior enable  Enable fast locking circuit  CLKR factor  CLKF factor  CLKOD factor  wait for CODEC PLL lock with 10 ms timeout
 * datasheet states that pll lock should take approx. 0.3 ms
  unmask HDMA interrupt in INTC  current terminate count is in transfer size units (4bytes here)  audio DMA ISR called when chunk from callers buffer has been transfered ***************************************************************************
 ** Recording DMA transfer
 * TODO **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 Marcin Bukat
 * Copyright (C) 2011 Andrew Ryabinin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Mask the DMA interrupt  mask HDMA interrupt  Unmask the DMA interrupt if enabled  unmask HDMA interrupt  enable HDMA clock  source address  i2s tx fifo  number of dma transactions
                                                * of transfer size bytes
                                                * (zero based)
                                                 mask ch1 accumulation overflow irq  mask ch0 accumulation overflow irq  mask ch1 page count down irq  UNMASK ch0 page count down irq  mask ch0 transfer irq  mask ch1 transfer irq  clear ch1 accumulation overflow flag  clear ch0 accumulation overflow flag  clear ch1 count down to zero flag  clear ch0 count down to zero flag  clear ch1 active flag  clear ch0 active flag  slice size in transfer size units (zero base)  page count  page mode  slice mode  DMA enable  generate interrupt  on-the-fly is not supported by rk27xx  transfer mode inc8  external hdreq from i2s tx  increment source address  fixed destination address  transfer size = 32bits word  command of software DMA (not relevant)  hardware trigger DMA mode  Stop any DMA in progress  kick in DMA transfer  pause DMA transfer by disabling clock to DMA module  iomux I2S internal  i2s external bit  i2s_mclk  i2s_sdo  i2s_sdi  i2s_lrck  i2s_bck  iomux I2S external  i2s external bit  i2s_mclk  i2s_sdo  i2s_sdi  i2s_lrck  i2s_bck  enable i2s clocks  configure I2S module  disable all i2s interrupts  LRCK/SCLK = 64  MCLK/SCLK = 4  16bit samples  stereo  I2S IF  master mode  slave mode  the fifo is 16x32bits according to my tests
     * while the docs state 32x32bits
      Tx trigger level half full  Rx trigger level half full  reset Tx  reset Rx  HDMA Req1 enable  HDMA Req2 disable  Req1 for Tx fifo  Req2 for Rx fifo  normal operation  start Tx (master mode)  do not start Rx (master mode)  setting Rx bit to 1 result in choppy audio  not used in slave mode  not used in slave mode  When codec is slave we need to setup i2s MCLK clock using codec pll.
 * The MCLK frequency is 256*codec frequency as i2s setup is:
 * LRCK/SCLK = 64 and MCLK/SCLK = 4 (see i2s_init() for reference)
 *
 * PLL output frequency:
 * Fout = ((Fref / (CLKR+1)) * (CLKF+1)) / (CLKOD+1)
 * Fref = 24 MHz
  {CLKR, CLKF, CLKOD, CODECPLL_DIV}  select divider output from codec pll  Codec PLL power up  Saturation behavior enable  Enable fast locking circuit  CLKR factor  CLKF factor  CLKOD factor  wait for CODEC PLL lock with 10 ms timeout
 * datasheet states that pll lock should take approx. 0.3 ms
  unmask HDMA interrupt in INTC  current terminate count is in transfer size units (4bytes here)  audio DMA ISR called when chunk from callers buffer has been transfered ***************************************************************************
 ** Recording DMA transfer
 * TODO **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 Marcin Bukat
 * Copyright (C) 2011 Andrew Ryabinin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Mask the DMA interrupt  mask HDMA interrupt  Unmask the DMA interrupt if enabled  unmask HDMA interrupt  enable HDMA clock  source address  i2s tx fifo  number of dma transactions
                                                * of transfer size bytes
                                                * (zero based)
                                                 mask ch1 accumulation overflow irq  mask ch0 accumulation overflow irq  mask ch1 page count down irq  UNMASK ch0 page count down irq  mask ch0 transfer irq  mask ch1 transfer irq  clear ch1 accumulation overflow flag  clear ch0 accumulation overflow flag  clear ch1 count down to zero flag  clear ch0 count down to zero flag  clear ch1 active flag  clear ch0 active flag  slice size in transfer size units (zero base)  page count  page mode  slice mode  DMA enable  generate interrupt  on-the-fly is not supported by rk27xx  transfer mode inc8  external hdreq from i2s tx  increment source address  fixed destination address  transfer size = 32bits word  command of software DMA (not relevant)  hardware trigger DMA mode  Stop any DMA in progress  kick in DMA transfer  pause DMA transfer by disabling clock to DMA module  iomux I2S internal  i2s external bit  i2s_mclk  i2s_sdo  i2s_sdi  i2s_lrck  i2s_bck  iomux I2S external  i2s external bit  i2s_mclk  i2s_sdo  i2s_sdi  i2s_lrck  i2s_bck  enable i2s clocks  configure I2S module  disable all i2s interrupts  LRCK/SCLK = 64  MCLK/SCLK = 4  16bit samples  stereo  I2S IF  master mode  slave mode  the fifo is 16x32bits according to my tests
     * while the docs state 32x32bits
      Tx trigger level half full  Rx trigger level half full  reset Tx  reset Rx  HDMA Req1 enable  HDMA Req2 disable  Req1 for Tx fifo  Req2 for Rx fifo  normal operation  start Tx (master mode)  do not start Rx (master mode)  setting Rx bit to 1 result in choppy audio  not used in slave mode  not used in slave mode  When codec is slave we need to setup i2s MCLK clock using codec pll.
 * The MCLK frequency is 256*codec frequency as i2s setup is:
 * LRCK/SCLK = 64 and MCLK/SCLK = 4 (see i2s_init() for reference)
 *
 * PLL output frequency:
 * Fout = ((Fref / (CLKR+1)) * (CLKF+1)) / (CLKOD+1)
 * Fref = 24 MHz
  {CLKR, CLKF, CLKOD, CODECPLL_DIV}  select divider output from codec pll  Codec PLL power up  Saturation behavior enable  Enable fast locking circuit  CLKR factor  CLKF factor  CLKOD factor  wait for CODEC PLL lock with 10 ms timeout
 * datasheet states that pll lock should take approx. 0.3 ms
  unmask HDMA interrupt in INTC  current terminate count is in transfer size units (4bytes here)  audio DMA ISR called when chunk from callers buffer has been transfered ***************************************************************************
 ** Recording DMA transfer
 * TODO 