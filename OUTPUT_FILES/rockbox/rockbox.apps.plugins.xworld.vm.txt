**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 Franklin Wei, Benjamin Brown
 * Copyright (C) 2004 Gregory Montoir
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ************************************************************************** rawgl has these, but they don't seem to do anything m->vmVariables[0xBC] = 0x10;m->vmVariables[0xC6] = 0x80;m->vmVariables[0xF2] = 4000;m->vmVariables[0xDC] = 33;warning("vm_op_addConst() hack for non-stop looping gun sound bug"); the script 0x27 slot 0x17 doesn't stop the gun sound from looping, I don't really know why ; for now, let's play the 'stopping sound' like the other scripts do  (0x6D43) jmp(0x6CE5)  (0x6D46) break  (0x6D47) VAR(6) += -50debug(DBG_VM, "Jump : %X \n",m->_scriptPtr.pc-m->res->segBytecode);FCS Whoever wrote this is patching the bytecode on the fly. This is ballzy !! (0x0CB8) condJmp(0x80, VAR(41), VAR(30), 0xCD3) (0x0D4E) condJmp(0x4, VAR(50), 6, 0xDBC)warning("bypassing protection");vm_bypassProtection(m); Check if the conditional value is met. jz always succeed in code wheel verification  counterswarning("Script::op_condJmp() bypassing protection"); jnz jg jge jl jle FCS: WTF, this is cryptic as hell !! int8_t n = (i & 0x3F) - threadId;  //0x3F = 0011 1111 The following is so much clearerMake sure i is within [0-VM_NUM_THREADS-1] Nasty hack....was this present in the original assembly  ??!!  The bytecode will set m->vmVariables[VM_VARIABLE_PAUSE_SLICES] from 1 to 5  The virtual machine hence indicates how long the image should be displayed.  WTF ?  WTF is that ?  Set all thread to inactive (pc at 0xFFFF or 0xFFFE ) 
  This is called every frames in the infinite loop.
 Check if a part switch has been requested.  Check if a state update has been requested for any thread during the previous VM execution:       - Pause       - Jump  JUMP:  Note: If a jump has been requested, the jump destination is stored  in m->threadsData[REQUESTED_PC_OFFSET]. Otherwise m->threadsData[REQUESTED_PC_OFFSET] == 0xFFFF  PAUSE:  Note: If a pause has been requested it is stored in  m->vmIsChannelActive[REQUESTED_STATE][i]  Run the Virtual Machine for every active threads (one vm frame).  Inactive threads are marked with a thread instruction pointer set to 0xFFFF (VM_INACTIVE_THREAD).  A thread must feature a break opcode so the interpreter can move to the next thread.  Set the script pointer to the right location.  script pc is used in executeThread in order  to get the next opcode.  Since .pc is going to be modified by this next loop iteration, we need to save it.  1000 0000 is set  This switch the polygon database to "cinematic" and probably draws a black polygon  over all the screen.  0100 0000 is set  0001 0000 is set  0001 0000 is set  0000 1000 is set  0000 0100 is set  0000 0010 is set  0000 0001 is set  0000 0001 is set c == 0xD | inpJump  User has inputted a bad code, the "ERROR" screen is showing  skip header **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 Franklin Wei, Benjamin Brown
 * Copyright (C) 2004 Gregory Montoir
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ************************************************************************** rawgl has these, but they don't seem to do anything m->vmVariables[0xBC] = 0x10;m->vmVariables[0xC6] = 0x80;m->vmVariables[0xF2] = 4000;m->vmVariables[0xDC] = 33;warning("vm_op_addConst() hack for non-stop looping gun sound bug"); the script 0x27 slot 0x17 doesn't stop the gun sound from looping, I don't really know why ; for now, let's play the 'stopping sound' like the other scripts do  (0x6D43) jmp(0x6CE5)  (0x6D46) break  (0x6D47) VAR(6) += -50debug(DBG_VM, "Jump : %X \n",m->_scriptPtr.pc-m->res->segBytecode);FCS Whoever wrote this is patching the bytecode on the fly. This is ballzy !! (0x0CB8) condJmp(0x80, VAR(41), VAR(30), 0xCD3) (0x0D4E) condJmp(0x4, VAR(50), 6, 0xDBC)warning("bypassing protection");vm_bypassProtection(m); Check if the conditional value is met. jz always succeed in code wheel verification  counterswarning("Script::op_condJmp() bypassing protection"); jnz jg jge jl jle FCS: WTF, this is cryptic as hell !! int8_t n = (i & 0x3F) - threadId;  //0x3F = 0011 1111 The following is so much clearerMake sure i is within [0-VM_NUM_THREADS-1] Nasty hack....was this present in the original assembly  ??!!  The bytecode will set m->vmVariables[VM_VARIABLE_PAUSE_SLICES] from 1 to 5  The virtual machine hence indicates how long the image should be displayed.  WTF ?  WTF is that ?  Set all thread to inactive (pc at 0xFFFF or 0xFFFE ) 
  This is called every frames in the infinite loop.
 Check if a part switch has been requested.  Check if a state update has been requested for any thread during the previous VM execution:       - Pause       - Jump  JUMP:  Note: If a jump has been requested, the jump destination is stored  in m->threadsData[REQUESTED_PC_OFFSET]. Otherwise m->threadsData[REQUESTED_PC_OFFSET] == 0xFFFF  PAUSE:  Note: If a pause has been requested it is stored in  m->vmIsChannelActive[REQUESTED_STATE][i]  Run the Virtual Machine for every active threads (one vm frame).  Inactive threads are marked with a thread instruction pointer set to 0xFFFF (VM_INACTIVE_THREAD).  A thread must feature a break opcode so the interpreter can move to the next thread.  Set the script pointer to the right location.  script pc is used in executeThread in order  to get the next opcode.  Since .pc is going to be modified by this next loop iteration, we need to save it.  1000 0000 is set  This switch the polygon database to "cinematic" and probably draws a black polygon  over all the screen.  0100 0000 is set  0001 0000 is set  0001 0000 is set  0000 1000 is set  0000 0100 is set  0000 0010 is set  0000 0001 is set  0000 0001 is set c == 0xD | inpJump  User has inputted a bad code, the "ERROR" screen is showing  skip header **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 Franklin Wei, Benjamin Brown
 * Copyright (C) 2004 Gregory Montoir
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ************************************************************************** rawgl has these, but they don't seem to do anything m->vmVariables[0xBC] = 0x10;m->vmVariables[0xC6] = 0x80;m->vmVariables[0xF2] = 4000;m->vmVariables[0xDC] = 33;warning("vm_op_addConst() hack for non-stop looping gun sound bug"); the script 0x27 slot 0x17 doesn't stop the gun sound from looping, I don't really know why ; for now, let's play the 'stopping sound' like the other scripts do  (0x6D43) jmp(0x6CE5)  (0x6D46) break  (0x6D47) VAR(6) += -50debug(DBG_VM, "Jump : %X \n",m->_scriptPtr.pc-m->res->segBytecode);FCS Whoever wrote this is patching the bytecode on the fly. This is ballzy !! (0x0CB8) condJmp(0x80, VAR(41), VAR(30), 0xCD3) (0x0D4E) condJmp(0x4, VAR(50), 6, 0xDBC)warning("bypassing protection");vm_bypassProtection(m); Check if the conditional value is met. jz always succeed in code wheel verification  counterswarning("Script::op_condJmp() bypassing protection"); jnz jg jge jl jle FCS: WTF, this is cryptic as hell !! int8_t n = (i & 0x3F) - threadId;  //0x3F = 0011 1111 The following is so much clearerMake sure i is within [0-VM_NUM_THREADS-1] Nasty hack....was this present in the original assembly  ??!!  The bytecode will set m->vmVariables[VM_VARIABLE_PAUSE_SLICES] from 1 to 5  The virtual machine hence indicates how long the image should be displayed.  WTF ?  WTF is that ?  Set all thread to inactive (pc at 0xFFFF or 0xFFFE ) 
  This is called every frames in the infinite loop.
 Check if a part switch has been requested.  Check if a state update has been requested for any thread during the previous VM execution:       - Pause       - Jump  JUMP:  Note: If a jump has been requested, the jump destination is stored  in m->threadsData[REQUESTED_PC_OFFSET]. Otherwise m->threadsData[REQUESTED_PC_OFFSET] == 0xFFFF  PAUSE:  Note: If a pause has been requested it is stored in  m->vmIsChannelActive[REQUESTED_STATE][i]  Run the Virtual Machine for every active threads (one vm frame).  Inactive threads are marked with a thread instruction pointer set to 0xFFFF (VM_INACTIVE_THREAD).  A thread must feature a break opcode so the interpreter can move to the next thread.  Set the script pointer to the right location.  script pc is used in executeThread in order  to get the next opcode.  Since .pc is going to be modified by this next loop iteration, we need to save it.  1000 0000 is set  This switch the polygon database to "cinematic" and probably draws a black polygon  over all the screen.  0100 0000 is set  0001 0000 is set  0001 0000 is set  0000 1000 is set  0000 0100 is set  0000 0010 is set  0000 0001 is set  0000 0001 is set c == 0xD | inpJump  User has inputted a bad code, the "ERROR" screen is showing  skip header 