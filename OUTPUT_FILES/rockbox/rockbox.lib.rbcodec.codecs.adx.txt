**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2006-2008 Adam Gashlin (hcs)
 * Copyright (C) 2006 Jens Arnold
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Maximum number of bytes to process in one iteration  Number of times to loop looped tracks when repeat is disabled  Length of fade-out for looped tracks (milliseconds)  Default high pass filter cutoff frequency is 500 Hz.
 * Others can be set, but the default is nearly always used,
 * and there is no way to determine if another was used, anyway.
  this is the codec entry point  Generic codec initialisation  we only render 16 bits  this is called for each file to process  ADPCM history  end of stream flag  looping flag  number of loops done so far   countdown for fadeout  length of fade in frames  loop points long coef1=0x7298L,coef2=-0x3350L; init history  Get header  Get file header for starting offset, channel count  useful for seeking and reporting current playback position  calculate filter coefficients *
     * A simple table of these coefficients would be nice, but
     * some very odd frequencies are used and if I'm going to
     * interpolate I might as well just go all the way and
     * calclate them precisely.
     * Speed is not an issue as this only needs to be done once per file.
     *
         * In the long passed to fsqrt there are only 4 nonfractional bits,
         * which is sufficient here, but this is the only reason why I don't
         * use 32 fractional bits everywhere.
          Get loop data  Soul Calibur 2 style (type 03)  check if header is too small for loop data  Standard (type 04)  check if header is too small for loop data  is file using encryption  advance to first frame  get in position  setup pcm buffer format  disable fade  The main decoder loop  do we need to loop?  check for endless looping  disable fade  otherwise start fade after LOOP_TIMES loops  frames to fade over  volume relative to fade_frames  do we need to seek?  disable fade  End of stream  Is there data left in the file?  Is there space in the output buffer?  Should we be looping?  decode first/only channel  fetch a frame  decode second channel  go back to first channel's next sample  make samples/channel **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2006-2008 Adam Gashlin (hcs)
 * Copyright (C) 2006 Jens Arnold
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Maximum number of bytes to process in one iteration  Number of times to loop looped tracks when repeat is disabled  Length of fade-out for looped tracks (milliseconds)  Default high pass filter cutoff frequency is 500 Hz.
 * Others can be set, but the default is nearly always used,
 * and there is no way to determine if another was used, anyway.
  this is the codec entry point  Generic codec initialisation  we only render 16 bits  this is called for each file to process  ADPCM history  end of stream flag  looping flag  number of loops done so far   countdown for fadeout  length of fade in frames  loop points long coef1=0x7298L,coef2=-0x3350L; init history  Get header  Get file header for starting offset, channel count  useful for seeking and reporting current playback position  calculate filter coefficients *
     * A simple table of these coefficients would be nice, but
     * some very odd frequencies are used and if I'm going to
     * interpolate I might as well just go all the way and
     * calclate them precisely.
     * Speed is not an issue as this only needs to be done once per file.
     *
         * In the long passed to fsqrt there are only 4 nonfractional bits,
         * which is sufficient here, but this is the only reason why I don't
         * use 32 fractional bits everywhere.
          Get loop data  Soul Calibur 2 style (type 03)  check if header is too small for loop data  Standard (type 04)  check if header is too small for loop data  is file using encryption  advance to first frame  get in position  setup pcm buffer format  disable fade  The main decoder loop  do we need to loop?  check for endless looping  disable fade  otherwise start fade after LOOP_TIMES loops  frames to fade over  volume relative to fade_frames  do we need to seek?  disable fade  End of stream  Is there data left in the file?  Is there space in the output buffer?  Should we be looping?  decode first/only channel  fetch a frame  decode second channel  go back to first channel's next sample  make samples/channel **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2006-2008 Adam Gashlin (hcs)
 * Copyright (C) 2006 Jens Arnold
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Maximum number of bytes to process in one iteration  Number of times to loop looped tracks when repeat is disabled  Length of fade-out for looped tracks (milliseconds)  Default high pass filter cutoff frequency is 500 Hz.
 * Others can be set, but the default is nearly always used,
 * and there is no way to determine if another was used, anyway.
  this is the codec entry point  Generic codec initialisation  we only render 16 bits  this is called for each file to process  ADPCM history  end of stream flag  looping flag  number of loops done so far   countdown for fadeout  length of fade in frames  loop points long coef1=0x7298L,coef2=-0x3350L; init history  Get header  Get file header for starting offset, channel count  useful for seeking and reporting current playback position  calculate filter coefficients *
     * A simple table of these coefficients would be nice, but
     * some very odd frequencies are used and if I'm going to
     * interpolate I might as well just go all the way and
     * calclate them precisely.
     * Speed is not an issue as this only needs to be done once per file.
     *
         * In the long passed to fsqrt there are only 4 nonfractional bits,
         * which is sufficient here, but this is the only reason why I don't
         * use 32 fractional bits everywhere.
          Get loop data  Soul Calibur 2 style (type 03)  check if header is too small for loop data  Standard (type 04)  check if header is too small for loop data  is file using encryption  advance to first frame  get in position  setup pcm buffer format  disable fade  The main decoder loop  do we need to loop?  check for endless looping  disable fade  otherwise start fade after LOOP_TIMES loops  frames to fade over  volume relative to fade_frames  do we need to seek?  disable fade  End of stream  Is there data left in the file?  Is there space in the output buffer?  Should we be looping?  decode first/only channel  fetch a frame  decode second channel  go back to first channel's next sample  make samples/channel 