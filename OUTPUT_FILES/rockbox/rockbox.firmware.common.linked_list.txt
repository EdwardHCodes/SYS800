**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** (L)inked (L)ist **
 * Helper to find the node previous to 'find'
 *
 * returns: NULL if 'find' is the first node
 *          last node if the 'find' isn't found in the list
 *
 * Initializes the singly-linked list
 *
 * Adds a node to s singly-linked list using "insert next"
 *
 * Adds a node to a singly-linked list using "insert first"
 *
 * Adds a node to a singly-linked list using "insert last"
 *
 * Removes the node after "node"; if there is none, nothing is changed
 *
 * Removes the first node in the list
 *
 * Removes the node from the list
 * (L)inked (L)ist (D)ouble **
 * Initializes the doubly-linked list
  tail could be stored in first item's prev pointer but this simplifies
       the routines and maintains the non-circularity *
 * Adds a node to a doubly-linked list using "insert first"
 *
 * Adds a node to a doubly-linked list using "insert last"
 *
 * Removes a node from a doubly-linked list
 * (L)inked (L)ist (D)ouble (C)ircular **
 * Helper that inserts a node into a doubly-link circular list; does not
 * affect list->head, just returns its state
 *
 * Initializes the doubly-linked circular list
 *
 * Adds a node to a doubly-linked circular list using "insert first"
 *
 * Adds a node to a doubly-linked circular list using "insert last"
 *
 * Removes a node from a doubly-linked circular list
 **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** (L)inked (L)ist **
 * Helper to find the node previous to 'find'
 *
 * returns: NULL if 'find' is the first node
 *          last node if the 'find' isn't found in the list
 *
 * Initializes the singly-linked list
 *
 * Adds a node to s singly-linked list using "insert next"
 *
 * Adds a node to a singly-linked list using "insert first"
 *
 * Adds a node to a singly-linked list using "insert last"
 *
 * Removes the node after "node"; if there is none, nothing is changed
 *
 * Removes the first node in the list
 *
 * Removes the node from the list
 * (L)inked (L)ist (D)ouble **
 * Initializes the doubly-linked list
  tail could be stored in first item's prev pointer but this simplifies
       the routines and maintains the non-circularity *
 * Adds a node to a doubly-linked list using "insert first"
 *
 * Adds a node to a doubly-linked list using "insert last"
 *
 * Removes a node from a doubly-linked list
 * (L)inked (L)ist (D)ouble (C)ircular **
 * Helper that inserts a node into a doubly-link circular list; does not
 * affect list->head, just returns its state
 *
 * Initializes the doubly-linked circular list
 *
 * Adds a node to a doubly-linked circular list using "insert first"
 *
 * Adds a node to a doubly-linked circular list using "insert last"
 *
 * Removes a node from a doubly-linked circular list
 **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** (L)inked (L)ist **
 * Helper to find the node previous to 'find'
 *
 * returns: NULL if 'find' is the first node
 *          last node if the 'find' isn't found in the list
 *
 * Initializes the singly-linked list
 *
 * Adds a node to s singly-linked list using "insert next"
 *
 * Adds a node to a singly-linked list using "insert first"
 *
 * Adds a node to a singly-linked list using "insert last"
 *
 * Removes the node after "node"; if there is none, nothing is changed
 *
 * Removes the first node in the list
 *
 * Removes the node from the list
 * (L)inked (L)ist (D)ouble **
 * Initializes the doubly-linked list
  tail could be stored in first item's prev pointer but this simplifies
       the routines and maintains the non-circularity *
 * Adds a node to a doubly-linked list using "insert first"
 *
 * Adds a node to a doubly-linked list using "insert last"
 *
 * Removes a node from a doubly-linked list
 * (L)inked (L)ist (D)ouble (C)ircular **
 * Helper that inserts a node into a doubly-link circular list; does not
 * affect list->head, just returns its state
 *
 * Initializes the doubly-linked circular list
 *
 * Adds a node to a doubly-linked circular list using "insert first"
 *
 * Adds a node to a doubly-linked circular list using "insert last"
 *
 * Removes a node from a doubly-linked circular list
 