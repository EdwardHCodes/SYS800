**************************************************************************
*             __________               __   ___.
*   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
*   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
*   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
*   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
*                     \/            \/     \/    \/            \/
* $Id$
*
* Floating on-screen display
*
* Copyright (C) 2012 Michael Sevakis
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
* KIND, either express or implied.
*
*************************************************************************** Sim isn't using --ffunction-sections thus greylib references will happen
   here even if not using this with greylib on a grayscale display, which
   demands that a struct _grey_info exist.  _WIN32  defined(SIMULATOR) && LCD_DEPTH < 4  At this time: assumes use of the default viewport for normal drawing  If multiple OSD's are wanted, could convert to caller-allocated  Disabled entirely  Hidden from view  Visible on screen  Erased in preparation for regular drawing  View status  Clipping viewport  Stride of LCD bitmap  Backbuffer framebuffer data  Stride of backbuffer bitmap  LCD framebuffer data  How wide may it be at most?  How high may it be at most?  Current popup stay duration  Tick when it should be hidden  Draw update callback  Functions to factilitate interface compatibility of OSD types  Framebuffer allocation macros  LCD_PIXELFORMAT  LCD_PIXELFORMAT  !defined(LCD_STRIDEFORMAT) || LCD_STRIDEFORMAT != VERTICAL_STRIDE  end stride type selection  other LCD depth  LCD_DEPTH  Set defaults if not defined differently * Native LCD routines * Create a bitmap framebuffer from a buffer  Used as dest, the LCD functions cannot deal with alternate
       strides as of now - the stride guides the calulations. If
       that is no longer the case, then width or height can be
       used instead (and less memory needed for a small surface!).
       IOW: crappiness means one dimension is non-negotiable.
      not enough buffer  OSD_INIT_MAJOR_WIDTH implied  not enough buffer  !defined(LCD_STRIDEFORMAT) || LCD_STRIDEFORMAT != VERTICAL_STRIDE  OSD_INIT_MAJOR_WIDTH implied  end stride type selection  Set viewport coordinates * Greylib LCD routines * Create a greylib bitmap framebuffer from a buffer  OSD_INIT_MAJOR_WIDTH implied  Have to peek into _grey_info a bit  LCD_DEPTH < 4* Common LCD routines * Draw the OSD image portion using the callback  Draw the OSD image using the callback  Sync the backbuffer to the framebuffer image  Assume it's starting with default viewport for now  LCD_DEPTH < 4  Assume it was on default framebuffer for now  Erase the OSD to restore the framebuffer image  Initialized the OSD and set its backbuffer  Save in case of ptr advance  Store requested sizes in max(width|height)  Set the default position to the whole thing  Ready when you are  Set to essential defaults  Redraw the entire OSD  Show/Hide the OSD on screen  No change  Fall-through  Fall-through  Redraw part of the OSD (viewport-relative coordinates)  Set a new screen location and size (screen coordinates)  No change  Not visible - just update pos  Visible area has changed  Update the smallest rectangle that encloses both the old and new
       regions to make the change free of flicker (they may overlap)  Call periodically to have the OSD timeout and hide itself  Already hidden/disabled  Set the OSD timeout value. <= 0 = never timeout  Use the OSD viewport context  Get the maximum dimensions calculated by osd_init()  Is the OSD enabled? * LCD update substitutes * Prepare LCD framebuffer for regular drawing  Update the whole screen  Save the screen image underneath and restore the OSD image  Update a part of the screen  Save the screen image underneath and restore the OSD image  Native LCD, public  LCD_DEPTH < 4  Greylib LCD, public  LCD_DEPTH < 4 **************************************************************************
*             __________               __   ___.
*   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
*   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
*   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
*   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
*                     \/            \/     \/    \/            \/
* $Id$
*
* Floating on-screen display
*
* Copyright (C) 2012 Michael Sevakis
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
* KIND, either express or implied.
*
*************************************************************************** Sim isn't using --ffunction-sections thus greylib references will happen
   here even if not using this with greylib on a grayscale display, which
   demands that a struct _grey_info exist.  _WIN32  defined(SIMULATOR) && LCD_DEPTH < 4  At this time: assumes use of the default viewport for normal drawing  If multiple OSD's are wanted, could convert to caller-allocated  Disabled entirely  Hidden from view  Visible on screen  Erased in preparation for regular drawing  View status  Clipping viewport  Stride of LCD bitmap  Backbuffer framebuffer data  Stride of backbuffer bitmap  LCD framebuffer data  How wide may it be at most?  How high may it be at most?  Current popup stay duration  Tick when it should be hidden  Draw update callback  Functions to factilitate interface compatibility of OSD types  Framebuffer allocation macros  LCD_PIXELFORMAT  LCD_PIXELFORMAT  !defined(LCD_STRIDEFORMAT) || LCD_STRIDEFORMAT != VERTICAL_STRIDE  end stride type selection  other LCD depth  LCD_DEPTH  Set defaults if not defined differently * Native LCD routines * Create a bitmap framebuffer from a buffer  Used as dest, the LCD functions cannot deal with alternate
       strides as of now - the stride guides the calulations. If
       that is no longer the case, then width or height can be
       used instead (and less memory needed for a small surface!).
       IOW: crappiness means one dimension is non-negotiable.
      not enough buffer  OSD_INIT_MAJOR_WIDTH implied  not enough buffer  !defined(LCD_STRIDEFORMAT) || LCD_STRIDEFORMAT != VERTICAL_STRIDE  OSD_INIT_MAJOR_WIDTH implied  end stride type selection  Set viewport coordinates * Greylib LCD routines * Create a greylib bitmap framebuffer from a buffer  OSD_INIT_MAJOR_WIDTH implied  Have to peek into _grey_info a bit  LCD_DEPTH < 4* Common LCD routines * Draw the OSD image portion using the callback  Draw the OSD image using the callback  Sync the backbuffer to the framebuffer image  Assume it's starting with default viewport for now  LCD_DEPTH < 4  Assume it was on default framebuffer for now  Erase the OSD to restore the framebuffer image  Initialized the OSD and set its backbuffer  Save in case of ptr advance  Store requested sizes in max(width|height)  Set the default position to the whole thing  Ready when you are  Set to essential defaults  Redraw the entire OSD  Show/Hide the OSD on screen  No change  Fall-through  Fall-through  Redraw part of the OSD (viewport-relative coordinates)  Set a new screen location and size (screen coordinates)  No change  Not visible - just update pos  Visible area has changed  Update the smallest rectangle that encloses both the old and new
       regions to make the change free of flicker (they may overlap)  Call periodically to have the OSD timeout and hide itself  Already hidden/disabled  Set the OSD timeout value. <= 0 = never timeout  Use the OSD viewport context  Get the maximum dimensions calculated by osd_init()  Is the OSD enabled? * LCD update substitutes * Prepare LCD framebuffer for regular drawing  Update the whole screen  Save the screen image underneath and restore the OSD image  Update a part of the screen  Save the screen image underneath and restore the OSD image  Native LCD, public  LCD_DEPTH < 4  Greylib LCD, public  LCD_DEPTH < 4 **************************************************************************
*             __________               __   ___.
*   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
*   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
*   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
*   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
*                     \/            \/     \/    \/            \/
* $Id$
*
* Floating on-screen display
*
* Copyright (C) 2012 Michael Sevakis
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
* KIND, either express or implied.
*
*************************************************************************** Sim isn't using --ffunction-sections thus greylib references will happen
   here even if not using this with greylib on a grayscale display, which
   demands that a struct _grey_info exist.  _WIN32  defined(SIMULATOR) && LCD_DEPTH < 4  At this time: assumes use of the default viewport for normal drawing  If multiple OSD's are wanted, could convert to caller-allocated  Disabled entirely  Hidden from view  Visible on screen  Erased in preparation for regular drawing  View status  Clipping viewport  Stride of LCD bitmap  Backbuffer framebuffer data  Stride of backbuffer bitmap  LCD framebuffer data  How wide may it be at most?  How high may it be at most?  Current popup stay duration  Tick when it should be hidden  Draw update callback  Functions to factilitate interface compatibility of OSD types  Framebuffer allocation macros  LCD_PIXELFORMAT  LCD_PIXELFORMAT  !defined(LCD_STRIDEFORMAT) || LCD_STRIDEFORMAT != VERTICAL_STRIDE  end stride type selection  other LCD depth  LCD_DEPTH  Set defaults if not defined differently * Native LCD routines * Create a bitmap framebuffer from a buffer  Used as dest, the LCD functions cannot deal with alternate
       strides as of now - the stride guides the calulations. If
       that is no longer the case, then width or height can be
       used instead (and less memory needed for a small surface!).
       IOW: crappiness means one dimension is non-negotiable.
      not enough buffer  OSD_INIT_MAJOR_WIDTH implied  not enough buffer  !defined(LCD_STRIDEFORMAT) || LCD_STRIDEFORMAT != VERTICAL_STRIDE  OSD_INIT_MAJOR_WIDTH implied  end stride type selection  Set viewport coordinates * Greylib LCD routines * Create a greylib bitmap framebuffer from a buffer  OSD_INIT_MAJOR_WIDTH implied  Have to peek into _grey_info a bit  LCD_DEPTH < 4* Common LCD routines * Draw the OSD image portion using the callback  Draw the OSD image using the callback  Sync the backbuffer to the framebuffer image  Assume it's starting with default viewport for now  LCD_DEPTH < 4  Assume it was on default framebuffer for now  Erase the OSD to restore the framebuffer image  Initialized the OSD and set its backbuffer  Save in case of ptr advance  Store requested sizes in max(width|height)  Set the default position to the whole thing  Ready when you are  Set to essential defaults  Redraw the entire OSD  Show/Hide the OSD on screen  No change  Fall-through  Fall-through  Redraw part of the OSD (viewport-relative coordinates)  Set a new screen location and size (screen coordinates)  No change  Not visible - just update pos  Visible area has changed  Update the smallest rectangle that encloses both the old and new
       regions to make the change free of flicker (they may overlap)  Call periodically to have the OSD timeout and hide itself  Already hidden/disabled  Set the OSD timeout value. <= 0 = never timeout  Use the OSD viewport context  Get the maximum dimensions calculated by osd_init()  Is the OSD enabled? * LCD update substitutes * Prepare LCD framebuffer for regular drawing  Update the whole screen  Save the screen image underneath and restore the OSD image  Update a part of the screen  Save the screen image underneath and restore the OSD image  Native LCD, public  LCD_DEPTH < 4  Greylib LCD, public  LCD_DEPTH < 4 