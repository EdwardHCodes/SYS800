
** FAAD2 - Freeware Advanced Audio (AAC) Decoder including SBR decoding
** Copyright (C) 2003-2004 M. Bakker, Ahead Software AG, http://www.nero.com
**  
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
** 
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
** 
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software 
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** Any non-GPL usage of this software or parts of this software is strictly
** forbidden.
**
** Commercial non-GPL licensing of this software is possible.
** For more info contact Ahead Software through Mpeg4AAClicense@nero.com.
**
** $Id$
* RVLC scalefactor decoding
 *
 * RVLC works like this:
 *  1. Only symmetric huffman codewords are used
 *  2. Total length of the scalefactor data is stored in the bitsream
 *  3. Scalefactors are DPCM coded
 *  4. Next to the starting value for DPCM the ending value is also stored
 *
 * With all this it is possible to read the scalefactor data from 2 sides.
 * If there is a bit error in the scalefactor data it is possible to start
 * decoding from the other end of the data, to find all but 1 scalefactor.
 #define PRINT_RVLC static function declarations  the number of bits used for the huffman codewords     bitfile ld_rvlc_sf_rev, ld_rvlc_esc_rev; We read length_of_rvlc_sf bits here to put it in a
           seperate bitfile.
                faad_initbits_rev(&ld_rvlc_sf_rev, (void*)rvlc_sf_buffer,            ics->length_of_rvlc_sf); We read length_of_rvlc_escapes bits here to put it in a
           seperate bitfile.
                faad_initbits_rev(&ld_rvlc_esc_rev, (void*)rvlc_esc_buffer,            ics->length_of_rvlc_escapes); decode the rvlc scale factors and escapes     result = rvlc_decode_sf_reverse(ics, &ld_rvlc_sf_rev,        &ld_rvlc_esc_rev, intensity_used); zero book  intensity books  decode intensity position  noise books  decode noise energy  spectral books  decode scale factor  not used right now, doesn't work correctly yet zero book  intensity books  noise books  decode noise energy  spectral books  decode scale factor  index == 99 means not allowed codeword index  length  codeword          0        101        111       1001      10001      11011     100001     110010     110011     110100    1000001    1100000    1100010    1100011    1101011   10000001   11000010   11000011   11010100  100000000  100000001  110101010  110101011  Shouldn't come this far index  length  codeword  Shouldn't come this far 
** FAAD2 - Freeware Advanced Audio (AAC) Decoder including SBR decoding
** Copyright (C) 2003-2004 M. Bakker, Ahead Software AG, http://www.nero.com
**  
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
** 
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
** 
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software 
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** Any non-GPL usage of this software or parts of this software is strictly
** forbidden.
**
** Commercial non-GPL licensing of this software is possible.
** For more info contact Ahead Software through Mpeg4AAClicense@nero.com.
**
** $Id$
* RVLC scalefactor decoding
 *
 * RVLC works like this:
 *  1. Only symmetric huffman codewords are used
 *  2. Total length of the scalefactor data is stored in the bitsream
 *  3. Scalefactors are DPCM coded
 *  4. Next to the starting value for DPCM the ending value is also stored
 *
 * With all this it is possible to read the scalefactor data from 2 sides.
 * If there is a bit error in the scalefactor data it is possible to start
 * decoding from the other end of the data, to find all but 1 scalefactor.
 #define PRINT_RVLC static function declarations  the number of bits used for the huffman codewords     bitfile ld_rvlc_sf_rev, ld_rvlc_esc_rev; We read length_of_rvlc_sf bits here to put it in a
           seperate bitfile.
                faad_initbits_rev(&ld_rvlc_sf_rev, (void*)rvlc_sf_buffer,            ics->length_of_rvlc_sf); We read length_of_rvlc_escapes bits here to put it in a
           seperate bitfile.
                faad_initbits_rev(&ld_rvlc_esc_rev, (void*)rvlc_esc_buffer,            ics->length_of_rvlc_escapes); decode the rvlc scale factors and escapes     result = rvlc_decode_sf_reverse(ics, &ld_rvlc_sf_rev,        &ld_rvlc_esc_rev, intensity_used); zero book  intensity books  decode intensity position  noise books  decode noise energy  spectral books  decode scale factor  not used right now, doesn't work correctly yet zero book  intensity books  noise books  decode noise energy  spectral books  decode scale factor  index == 99 means not allowed codeword index  length  codeword          0        101        111       1001      10001      11011     100001     110010     110011     110100    1000001    1100000    1100010    1100011    1101011   10000001   11000010   11000011   11010100  100000000  100000001  110101010  110101011  Shouldn't come this far index  length  codeword  Shouldn't come this far 
** FAAD2 - Freeware Advanced Audio (AAC) Decoder including SBR decoding
** Copyright (C) 2003-2004 M. Bakker, Ahead Software AG, http://www.nero.com
**  
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
** 
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
** 
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software 
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** Any non-GPL usage of this software or parts of this software is strictly
** forbidden.
**
** Commercial non-GPL licensing of this software is possible.
** For more info contact Ahead Software through Mpeg4AAClicense@nero.com.
**
** $Id$
* RVLC scalefactor decoding
 *
 * RVLC works like this:
 *  1. Only symmetric huffman codewords are used
 *  2. Total length of the scalefactor data is stored in the bitsream
 *  3. Scalefactors are DPCM coded
 *  4. Next to the starting value for DPCM the ending value is also stored
 *
 * With all this it is possible to read the scalefactor data from 2 sides.
 * If there is a bit error in the scalefactor data it is possible to start
 * decoding from the other end of the data, to find all but 1 scalefactor.
 #define PRINT_RVLC static function declarations  the number of bits used for the huffman codewords     bitfile ld_rvlc_sf_rev, ld_rvlc_esc_rev; We read length_of_rvlc_sf bits here to put it in a
           seperate bitfile.
                faad_initbits_rev(&ld_rvlc_sf_rev, (void*)rvlc_sf_buffer,            ics->length_of_rvlc_sf); We read length_of_rvlc_escapes bits here to put it in a
           seperate bitfile.
                faad_initbits_rev(&ld_rvlc_esc_rev, (void*)rvlc_esc_buffer,            ics->length_of_rvlc_escapes); decode the rvlc scale factors and escapes     result = rvlc_decode_sf_reverse(ics, &ld_rvlc_sf_rev,        &ld_rvlc_esc_rev, intensity_used); zero book  intensity books  decode intensity position  noise books  decode noise energy  spectral books  decode scale factor  not used right now, doesn't work correctly yet zero book  intensity books  noise books  decode noise energy  spectral books  decode scale factor  index == 99 means not allowed codeword index  length  codeword          0        101        111       1001      10001      11011     100001     110010     110011     110100    1000001    1100000    1100010    1100011    1101011   10000001   11000010   11000011   11010100  100000000  100000001  110101010  110101011  Shouldn't come this far index  length  codeword  Shouldn't come this far 