
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org
 Public routines 
 * Create an empty RGB surface of the appropriate depth
  Make sure the size requested doesn't overflow our datatypes  Next time I write a library like SDL, I'll use int for size. :)  Check to see if we desire the surface in video memory  Allocate the surface  Get the pixels  This is important for bitmaps  Allocate an empty mapping  The surface is ready to go 
 * Create an RGB surface from an existing memory buffer
 
 * Set the color key in a blittable surface
  Sanity check the flag as it gets passed in  Optimize away operations that don't change anything  UnRLE surfaces before we change the colorkey  This function sets the alpha channel of a surface  Sanity check the flag as it gets passed in  Optimize away operations that don't change anything 
	 * The representation for software surfaces is independent of
	 * per-surface alpha, so no need to invalidate the blit mapping
	 * if just the alpha value was changed. (If either is 255, we still
	 * need to invalidate.)
	  Byte ordering  Quickly set the alpha channel of an RGBA or ARGB surface 
 * A function to calculate the intersection of two rectangles:
 * return true if the rectangles intersect, false otherwise
  Horizontal intersection  Vertical intersection 
 * Set the clipping rectangle for a blittable surface
  Don't do anything if there's no surface to act on  Set up the full surface rectangle  Set the clipping rectangle  
 * Set up a blit between two surfaces -- split into three parts:
 * The upper part, SDL_UpperBlit(), performs clipping and rectangle 
 * verification.  The lower part is a pointer to a low level
 * accelerated blitting function.
 *
 * These parts are separated out and each used internally by this 
 * library in the optimimum places.  They are exported so that if
 * you know exactly what you are doing, you can optimize your code
 * by calling the one(s) you need.
  Check to make sure the blit mapping is valid  Figure out which blitter to use  Make sure the surfaces aren't locked  If the destination rectangle is NULL, use the entire dest surface  clip the source rectangle to the source surface  clip the destination rectangle against the clip rectangle  FIXME: We have to worry about packing order.. *sigh*  FIXME: We have to worry about packing order.. *sigh*  
 * This function performs a fast fill of the given rectangle with 'color'
  This function doesn't work on surfaces < 8 bpp  If 'dstrect' == NULL, then fill the whole surface  Perform clipping  Check for hardware acceleration  Perform software fill 
			 * SDL_memset() on PPC (both glibc and codewarrior) uses
			 * the dcbz (Data Cache Block Zero) instruction, which
			 * causes an alignment exception if the destination is
			 * uncachable, so only use it on software surfaces
			 
					 * 64-bit stores are probably most
					 * efficient to uncached video memory
					  narrow boxes  __powerpc__  We're done! 
 * Lock a surface to directly access the pixels
  Perform the lock  save accel'd state  This needs to be done here in case pixels changes value  Increment the surface lock count, for recursive locks  Ready to go.. 
 * Unlock a previously locked surface
  Only perform an unlock if we are locked  Perform the unlock  Unlock hardware or accelerated surfaces  Update RLE encoded surface with new data  stop lying  
 * Convert a surface into the specified pixel format.
  Check for empty destination palette! (results in empty image)  Only create hw surfaces with alpha channel if hw alpha blits
	   are supported  Create a new surface with the desired format  Copy the palette if any  Save the original surface color key and alpha  Convert colourkeyed surfaces to RGBA if requested  Copy over the alpha channel to RGBA if requested  Copy over the image data  Clean up the original surface, and update converted surface  We're ready to go! 
 * Free a surface created by the above function.
  Free anything that's not NULL, and not the screen surface 
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org
 Public routines 
 * Create an empty RGB surface of the appropriate depth
  Make sure the size requested doesn't overflow our datatypes  Next time I write a library like SDL, I'll use int for size. :)  Check to see if we desire the surface in video memory  Allocate the surface  Get the pixels  This is important for bitmaps  Allocate an empty mapping  The surface is ready to go 
 * Create an RGB surface from an existing memory buffer
 
 * Set the color key in a blittable surface
  Sanity check the flag as it gets passed in  Optimize away operations that don't change anything  UnRLE surfaces before we change the colorkey  This function sets the alpha channel of a surface  Sanity check the flag as it gets passed in  Optimize away operations that don't change anything 
	 * The representation for software surfaces is independent of
	 * per-surface alpha, so no need to invalidate the blit mapping
	 * if just the alpha value was changed. (If either is 255, we still
	 * need to invalidate.)
	  Byte ordering  Quickly set the alpha channel of an RGBA or ARGB surface 
 * A function to calculate the intersection of two rectangles:
 * return true if the rectangles intersect, false otherwise
  Horizontal intersection  Vertical intersection 
 * Set the clipping rectangle for a blittable surface
  Don't do anything if there's no surface to act on  Set up the full surface rectangle  Set the clipping rectangle  
 * Set up a blit between two surfaces -- split into three parts:
 * The upper part, SDL_UpperBlit(), performs clipping and rectangle 
 * verification.  The lower part is a pointer to a low level
 * accelerated blitting function.
 *
 * These parts are separated out and each used internally by this 
 * library in the optimimum places.  They are exported so that if
 * you know exactly what you are doing, you can optimize your code
 * by calling the one(s) you need.
  Check to make sure the blit mapping is valid  Figure out which blitter to use  Make sure the surfaces aren't locked  If the destination rectangle is NULL, use the entire dest surface  clip the source rectangle to the source surface  clip the destination rectangle against the clip rectangle  FIXME: We have to worry about packing order.. *sigh*  FIXME: We have to worry about packing order.. *sigh*  
 * This function performs a fast fill of the given rectangle with 'color'
  This function doesn't work on surfaces < 8 bpp  If 'dstrect' == NULL, then fill the whole surface  Perform clipping  Check for hardware acceleration  Perform software fill 
			 * SDL_memset() on PPC (both glibc and codewarrior) uses
			 * the dcbz (Data Cache Block Zero) instruction, which
			 * causes an alignment exception if the destination is
			 * uncachable, so only use it on software surfaces
			 
					 * 64-bit stores are probably most
					 * efficient to uncached video memory
					  narrow boxes  __powerpc__  We're done! 
 * Lock a surface to directly access the pixels
  Perform the lock  save accel'd state  This needs to be done here in case pixels changes value  Increment the surface lock count, for recursive locks  Ready to go.. 
 * Unlock a previously locked surface
  Only perform an unlock if we are locked  Perform the unlock  Unlock hardware or accelerated surfaces  Update RLE encoded surface with new data  stop lying  
 * Convert a surface into the specified pixel format.
  Check for empty destination palette! (results in empty image)  Only create hw surfaces with alpha channel if hw alpha blits
	   are supported  Create a new surface with the desired format  Copy the palette if any  Save the original surface color key and alpha  Convert colourkeyed surfaces to RGBA if requested  Copy over the alpha channel to RGBA if requested  Copy over the image data  Clean up the original surface, and update converted surface  We're ready to go! 
 * Free a surface created by the above function.
  Free anything that's not NULL, and not the screen surface 
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org
 Public routines 
 * Create an empty RGB surface of the appropriate depth
  Make sure the size requested doesn't overflow our datatypes  Next time I write a library like SDL, I'll use int for size. :)  Check to see if we desire the surface in video memory  Allocate the surface  Get the pixels  This is important for bitmaps  Allocate an empty mapping  The surface is ready to go 
 * Create an RGB surface from an existing memory buffer
 
 * Set the color key in a blittable surface
  Sanity check the flag as it gets passed in  Optimize away operations that don't change anything  UnRLE surfaces before we change the colorkey  This function sets the alpha channel of a surface  Sanity check the flag as it gets passed in  Optimize away operations that don't change anything 
	 * The representation for software surfaces is independent of
	 * per-surface alpha, so no need to invalidate the blit mapping
	 * if just the alpha value was changed. (If either is 255, we still
	 * need to invalidate.)
	  Byte ordering  Quickly set the alpha channel of an RGBA or ARGB surface 
 * A function to calculate the intersection of two rectangles:
 * return true if the rectangles intersect, false otherwise
  Horizontal intersection  Vertical intersection 
 * Set the clipping rectangle for a blittable surface
  Don't do anything if there's no surface to act on  Set up the full surface rectangle  Set the clipping rectangle  
 * Set up a blit between two surfaces -- split into three parts:
 * The upper part, SDL_UpperBlit(), performs clipping and rectangle 
 * verification.  The lower part is a pointer to a low level
 * accelerated blitting function.
 *
 * These parts are separated out and each used internally by this 
 * library in the optimimum places.  They are exported so that if
 * you know exactly what you are doing, you can optimize your code
 * by calling the one(s) you need.
  Check to make sure the blit mapping is valid  Figure out which blitter to use  Make sure the surfaces aren't locked  If the destination rectangle is NULL, use the entire dest surface  clip the source rectangle to the source surface  clip the destination rectangle against the clip rectangle  FIXME: We have to worry about packing order.. *sigh*  FIXME: We have to worry about packing order.. *sigh*  
 * This function performs a fast fill of the given rectangle with 'color'
  This function doesn't work on surfaces < 8 bpp  If 'dstrect' == NULL, then fill the whole surface  Perform clipping  Check for hardware acceleration  Perform software fill 
			 * SDL_memset() on PPC (both glibc and codewarrior) uses
			 * the dcbz (Data Cache Block Zero) instruction, which
			 * causes an alignment exception if the destination is
			 * uncachable, so only use it on software surfaces
			 
					 * 64-bit stores are probably most
					 * efficient to uncached video memory
					  narrow boxes  __powerpc__  We're done! 
 * Lock a surface to directly access the pixels
  Perform the lock  save accel'd state  This needs to be done here in case pixels changes value  Increment the surface lock count, for recursive locks  Ready to go.. 
 * Unlock a previously locked surface
  Only perform an unlock if we are locked  Perform the unlock  Unlock hardware or accelerated surfaces  Update RLE encoded surface with new data  stop lying  
 * Convert a surface into the specified pixel format.
  Check for empty destination palette! (results in empty image)  Only create hw surfaces with alpha channel if hw alpha blits
	   are supported  Create a new surface with the desired format  Copy the palette if any  Save the original surface color key and alpha  Convert colourkeyed surfaces to RGBA if requested  Copy over the alpha channel to RGBA if requested  Copy over the image data  Clean up the original surface, and update converted surface  We're ready to go! 
 * Free a surface created by the above function.
  Free anything that's not NULL, and not the screen surface 