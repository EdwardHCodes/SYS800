**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 Franklin Wei, Benjamin Brown
 * Copyright (C) 2004 Gregory Montoir
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************Read all points, directly from bytecode segment  A shape can be given in two different ways:

    - A list of screenspace vertices.
    - A list of objectspace vertices, based on a delta from the first vertex.

    This is a recursive function. This is 0xc0 = 192 WTF ?0x80 = 128 (1000 0000)0x3F =  63 (0011 1111) pc is misleading here since we are not reading bytecode but only vertices informations.0x3F = 63
  What is read from the bytecode is not a pure screnspace polygon but a polygonspace polygon.

Search for the location where the string is located.Not foundUsed if the string contains a return carriage. each character is 8x8  x is multiplied by 4 and not 8 because there are two pixels per byte  skip to the next line (320 pixels = 160 bytes)  Blend a line in the current framebuffer (v->_curPagePtr1)
  silence warnings without XWORLD_DEBUG  silence warnings without XWORLD_DEBUG  XXX check Since a palette indice is coded on 4 bits, we need to duplicate the clearing color to the upper part of the byte.  This opcode is used once the background of a scene has been drawn in one of the framebuffer:
    it is copied in the current framebuffer at the start of a new frame in order to improve performances. 
  uint8_t *video_allocPage() {
  uint8_t *buf = (uint8_t *)malloc(VID_PAGE_SIZE);
  rb->memset(buf, 0, VID_PAGE_SIZE);
  return buf;
  }

  Note: The palettes set used to be allocated on the stack but I moved it to
  the heap so I could dump the four framebuffer and follow how
  frames are generated.
3 = BYTES_PER_PIXELcolors are coded on 2bytes (565) for 16 colors = 32 Moved to the heap, legacy code used to allocate the palette on the stack.uint8_t pal[NUM_COLORS * 3]; //3 = BYTES_PER_PIXEL r g b swap ptrs 2 and 3 Check if we need to change the paletteQ: Why 160 ?A: Because one byte gives two palette indices so   we only need to move 320/2 per line. Set image attributes. for (y = vid.height-1; y >=0; --y)png_read_image (png_ptr, info_ptr);//We need to write those two pixelsdst[3] = 0xFF;dst[3] = 0xFF;dumpFrameBuffer(v->_pagePtrs[3],allFrameBuffers,320,200);if (v->_curPagePtr1 == v->_pagePtrs[3])
      uint8_t* offScreen = sys->getOffScreenFramebuffer();
      for(int i=0 ; i < 200 ; i++)
      writeLine(allFrameBuffers+320*3+640*i*3 + 200*640*3,  offScreen+320*i/2  ,  160);
    Write bitmap to disk. Filling TGA header information
      char path[256];
      sprintf(path,"test%d.tga",traceFrameBufferCounter);

      #define IMAGE_WIDTH 640
      #define IMAGE_HEIGHT 400

      uint8_t tga_header[18];
      rb->memset(tga_header, 0, 18);
      tga_header[2] = 2;
      tga_header[12] = (IMAGE_WIDTH & 0x00FF);
      tga_header[13] = (IMAGE_WIDTH  & 0xFF00) / 256;
      tga_header[14] = (IMAGE_HEIGHT  & 0x00FF) ;
      tga_header[15] =(IMAGE_HEIGHT & 0xFF00) / 256;
      tga_header[16] = 32 ;



      // Open the file, write both header and payload, close, done.
      char path[256];
      sprintf(path,"test%d.tga",traceFrameBufferCounter);
      FILE* pScreenshot = fopen(path, "wb");
      fwrite(&tga_header, 18, sizeof(uint8_t), pScreenshot);
      fwrite(allFrameBuffers, IMAGE_WIDTH * IMAGE_HEIGHT,SCREENSHOT_BPP * sizeof(uint8_t),pScreenshot);
      fclose(pScreenshot);
    sprintf(path,"%4d%s.png",traceFrameBufferCounter,comment);      if (!dumpPaletteCursor)  dumpPalette = allPalettesDump[dumpPaletteCursor];      elseWe need to write those two pixelsdst[3] = 0xFF;dst[3] = 0xFF; Set image attributes. for (y = vid.height-1; y >=0; --y)png_read_image (png_ptr, info_ptr);//sprintf(path,"%4d%s.png",traceFrameBufferCounter,comment);**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 Franklin Wei, Benjamin Brown
 * Copyright (C) 2004 Gregory Montoir
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************Read all points, directly from bytecode segment  A shape can be given in two different ways:

    - A list of screenspace vertices.
    - A list of objectspace vertices, based on a delta from the first vertex.

    This is a recursive function. This is 0xc0 = 192 WTF ?0x80 = 128 (1000 0000)0x3F =  63 (0011 1111) pc is misleading here since we are not reading bytecode but only vertices informations.0x3F = 63
  What is read from the bytecode is not a pure screnspace polygon but a polygonspace polygon.

Search for the location where the string is located.Not foundUsed if the string contains a return carriage. each character is 8x8  x is multiplied by 4 and not 8 because there are two pixels per byte  skip to the next line (320 pixels = 160 bytes)  Blend a line in the current framebuffer (v->_curPagePtr1)
  silence warnings without XWORLD_DEBUG  silence warnings without XWORLD_DEBUG  XXX check Since a palette indice is coded on 4 bits, we need to duplicate the clearing color to the upper part of the byte.  This opcode is used once the background of a scene has been drawn in one of the framebuffer:
    it is copied in the current framebuffer at the start of a new frame in order to improve performances. 
  uint8_t *video_allocPage() {
  uint8_t *buf = (uint8_t *)malloc(VID_PAGE_SIZE);
  rb->memset(buf, 0, VID_PAGE_SIZE);
  return buf;
  }

  Note: The palettes set used to be allocated on the stack but I moved it to
  the heap so I could dump the four framebuffer and follow how
  frames are generated.
3 = BYTES_PER_PIXELcolors are coded on 2bytes (565) for 16 colors = 32 Moved to the heap, legacy code used to allocate the palette on the stack.uint8_t pal[NUM_COLORS * 3]; //3 = BYTES_PER_PIXEL r g b swap ptrs 2 and 3 Check if we need to change the paletteQ: Why 160 ?A: Because one byte gives two palette indices so   we only need to move 320/2 per line. Set image attributes. for (y = vid.height-1; y >=0; --y)png_read_image (png_ptr, info_ptr);//We need to write those two pixelsdst[3] = 0xFF;dst[3] = 0xFF;dumpFrameBuffer(v->_pagePtrs[3],allFrameBuffers,320,200);if (v->_curPagePtr1 == v->_pagePtrs[3])
      uint8_t* offScreen = sys->getOffScreenFramebuffer();
      for(int i=0 ; i < 200 ; i++)
      writeLine(allFrameBuffers+320*3+640*i*3 + 200*640*3,  offScreen+320*i/2  ,  160);
    Write bitmap to disk. Filling TGA header information
      char path[256];
      sprintf(path,"test%d.tga",traceFrameBufferCounter);

      #define IMAGE_WIDTH 640
      #define IMAGE_HEIGHT 400

      uint8_t tga_header[18];
      rb->memset(tga_header, 0, 18);
      tga_header[2] = 2;
      tga_header[12] = (IMAGE_WIDTH & 0x00FF);
      tga_header[13] = (IMAGE_WIDTH  & 0xFF00) / 256;
      tga_header[14] = (IMAGE_HEIGHT  & 0x00FF) ;
      tga_header[15] =(IMAGE_HEIGHT & 0xFF00) / 256;
      tga_header[16] = 32 ;



      // Open the file, write both header and payload, close, done.
      char path[256];
      sprintf(path,"test%d.tga",traceFrameBufferCounter);
      FILE* pScreenshot = fopen(path, "wb");
      fwrite(&tga_header, 18, sizeof(uint8_t), pScreenshot);
      fwrite(allFrameBuffers, IMAGE_WIDTH * IMAGE_HEIGHT,SCREENSHOT_BPP * sizeof(uint8_t),pScreenshot);
      fclose(pScreenshot);
    sprintf(path,"%4d%s.png",traceFrameBufferCounter,comment);      if (!dumpPaletteCursor)  dumpPalette = allPalettesDump[dumpPaletteCursor];      elseWe need to write those two pixelsdst[3] = 0xFF;dst[3] = 0xFF; Set image attributes. for (y = vid.height-1; y >=0; --y)png_read_image (png_ptr, info_ptr);//sprintf(path,"%4d%s.png",traceFrameBufferCounter,comment);**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 Franklin Wei, Benjamin Brown
 * Copyright (C) 2004 Gregory Montoir
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************Read all points, directly from bytecode segment  A shape can be given in two different ways:

    - A list of screenspace vertices.
    - A list of objectspace vertices, based on a delta from the first vertex.

    This is a recursive function. This is 0xc0 = 192 WTF ?0x80 = 128 (1000 0000)0x3F =  63 (0011 1111) pc is misleading here since we are not reading bytecode but only vertices informations.0x3F = 63
  What is read from the bytecode is not a pure screnspace polygon but a polygonspace polygon.

Search for the location where the string is located.Not foundUsed if the string contains a return carriage. each character is 8x8  x is multiplied by 4 and not 8 because there are two pixels per byte  skip to the next line (320 pixels = 160 bytes)  Blend a line in the current framebuffer (v->_curPagePtr1)
  silence warnings without XWORLD_DEBUG  silence warnings without XWORLD_DEBUG  XXX check Since a palette indice is coded on 4 bits, we need to duplicate the clearing color to the upper part of the byte.  This opcode is used once the background of a scene has been drawn in one of the framebuffer:
    it is copied in the current framebuffer at the start of a new frame in order to improve performances. 
  uint8_t *video_allocPage() {
  uint8_t *buf = (uint8_t *)malloc(VID_PAGE_SIZE);
  rb->memset(buf, 0, VID_PAGE_SIZE);
  return buf;
  }

  Note: The palettes set used to be allocated on the stack but I moved it to
  the heap so I could dump the four framebuffer and follow how
  frames are generated.
3 = BYTES_PER_PIXELcolors are coded on 2bytes (565) for 16 colors = 32 Moved to the heap, legacy code used to allocate the palette on the stack.uint8_t pal[NUM_COLORS * 3]; //3 = BYTES_PER_PIXEL r g b swap ptrs 2 and 3 Check if we need to change the paletteQ: Why 160 ?A: Because one byte gives two palette indices so   we only need to move 320/2 per line. Set image attributes. for (y = vid.height-1; y >=0; --y)png_read_image (png_ptr, info_ptr);//We need to write those two pixelsdst[3] = 0xFF;dst[3] = 0xFF;dumpFrameBuffer(v->_pagePtrs[3],allFrameBuffers,320,200);if (v->_curPagePtr1 == v->_pagePtrs[3])
      uint8_t* offScreen = sys->getOffScreenFramebuffer();
      for(int i=0 ; i < 200 ; i++)
      writeLine(allFrameBuffers+320*3+640*i*3 + 200*640*3,  offScreen+320*i/2  ,  160);
    Write bitmap to disk. Filling TGA header information
      char path[256];
      sprintf(path,"test%d.tga",traceFrameBufferCounter);

      #define IMAGE_WIDTH 640
      #define IMAGE_HEIGHT 400

      uint8_t tga_header[18];
      rb->memset(tga_header, 0, 18);
      tga_header[2] = 2;
      tga_header[12] = (IMAGE_WIDTH & 0x00FF);
      tga_header[13] = (IMAGE_WIDTH  & 0xFF00) / 256;
      tga_header[14] = (IMAGE_HEIGHT  & 0x00FF) ;
      tga_header[15] =(IMAGE_HEIGHT & 0xFF00) / 256;
      tga_header[16] = 32 ;



      // Open the file, write both header and payload, close, done.
      char path[256];
      sprintf(path,"test%d.tga",traceFrameBufferCounter);
      FILE* pScreenshot = fopen(path, "wb");
      fwrite(&tga_header, 18, sizeof(uint8_t), pScreenshot);
      fwrite(allFrameBuffers, IMAGE_WIDTH * IMAGE_HEIGHT,SCREENSHOT_BPP * sizeof(uint8_t),pScreenshot);
      fclose(pScreenshot);
    sprintf(path,"%4d%s.png",traceFrameBufferCounter,comment);      if (!dumpPaletteCursor)  dumpPalette = allPalettesDump[dumpPaletteCursor];      elseWe need to write those two pixelsdst[3] = 0xFF;dst[3] = 0xFF; Set image attributes. for (y = vid.height-1; y >=0; --y)png_read_image (png_ptr, info_ptr);//sprintf(path,"%4d%s.png",traceFrameBufferCounter,comment);