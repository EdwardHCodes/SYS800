 Copyright (c) 2007-2008 CSIRO
   Copyright (c) 2007-2009 Xiph.Org Foundation
   Written by Jean-Marc Valin 
   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

   - Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

   - Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
   OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
Determines if V(N,K) fits in a 32-bit unsigned integer.
  N and K are themselves limited to 15 bits. Scan for all unique band sizes  Find other bands that have the same size  Compute the cache for all unique sizes  Compute the maximum rate for each band at which we'll reliably use as
       many bits as we ask for.  N=1 bands only have a sign bit and fine bits.  Even-sized bands bigger than N=2 can be split one more time.
                  As of commit 44203907 all bands >1 are even, including custom modes. N0=1 bands can't be split down to N<2.  Compute the cost for the lowest-level PVQ of a fully split
                   band.  Add in the cost of coding regular splits.  Offset the number of qtheta bits by log2(N)/2
                      + QTHETA_OFFSET compared to their "fair share" of
                      total/N  The number of qtheta bits we'll allocate if the remainder
                      is to be max_bits.
                     The average measured cost for theta is 0.89701 times qb,
                      approximated here as 459/512.  Add in the cost of a stereo split, if necessary.  The average measured cost for theta with the step PDF is
                      0.95164 times qb, approximated here as 487/512.  Add the fine bits we'll use.  Compensate for the extra DoF in stereo  Offset the number of fine bits by log2(N)/2 + FINE_OFFSET
                   compared to their "fair share" of total/N  N=2 is the only point that doesn't match the curve  The number of fine bits we'll allocate if the remainder is
                   to be max_bits.  CUSTOM_MODES  Don't allocate more than we can actually use printf ("interp bisection gave %d\n", lo); Don't allocate more than we can actually use  Decide which bands to skip, working backwards from the end.  Never skip the first band, nor a band that has been boosted by
          dynalloc.
         In the first case, we'd be coding a bit to signal we're going to waste
          all the other bits.
         In the second case, we'd be coding a bit to redistribute all the bits
          we just signaled should be cocentrated in this band.  Give the bit we reserved to end skipping back. Figure out how many left-over bits we would be adding to this band.
        This can include bits we've stolen back from higher, skipped bands.Only code a skip decision if we're above the threshold for this band.
        Otherwise it is force-skipped.
        This ensures that we have enough bits to code the skip flag.This if() block is the only part of the allocation function that
               is not a mandatory part of the bitstream: any bands we choose to
               skip here must be explicitly signaled.Choose a threshold with some hysteresis to keep bands from
               fluctuating in and out.We used a bit to skip this band.Reclaim the bits originally allocated to this band.If we have enough for a fine energy bit per channel, use it.Otherwise this band gets nothing at all. Code the intensity and dual stereo parameters.  Allocate the remaining bits for (j=0;j<end;j++)printf("%d ", bits[j]);printf("\n"); Compensate for the extra DoF in stereo  Offset for the number of fine bits by log2(N)/2 + FINE_OFFSET
            compared to their "fair share" of total/N  N=2 is the only point that doesn't match the curve  Changing the offset for allocating the second and third
             fine energy bit  Divide with rounding  Make sure not to bust  More than that is useless because that's about as far as PVQ can go  If we rounded down or capped this band, make it a candidate for the
             final fine energy pass  Remove the allocated fine bits; the rest are assigned to PVQ  For N=1, all bits go to fine energy except for a single sign bit  Fine energy can't take advantage of the re-balancing in
          quant_all_bands().
         Instead, do the re-balancing here. Save any remaining bits over the cap for the rebalancing in
       quant_all_bands().  The skipped bands use all their bits for fine energy.  Reserve a bit to signal the end of manually skipped bands.  Reserve bits for the intensity and dual stereo parameters.  Below this threshold, we're sure not to allocate any PVQ bits  Tilt of the allocation curve  Giving less resolution to single-coefficient bands because they get
         more benefit from having one coarse value per coefficient Don't allocate more than we can actually use printf ("lo = %d, hi = %d\n", lo, hi);printf ("interp between %d and %d\n", lo, hi); Copyright (c) 2007-2008 CSIRO
   Copyright (c) 2007-2009 Xiph.Org Foundation
   Written by Jean-Marc Valin 
   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

   - Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

   - Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
   OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
Determines if V(N,K) fits in a 32-bit unsigned integer.
  N and K are themselves limited to 15 bits. Scan for all unique band sizes  Find other bands that have the same size  Compute the cache for all unique sizes  Compute the maximum rate for each band at which we'll reliably use as
       many bits as we ask for.  N=1 bands only have a sign bit and fine bits.  Even-sized bands bigger than N=2 can be split one more time.
                  As of commit 44203907 all bands >1 are even, including custom modes. N0=1 bands can't be split down to N<2.  Compute the cost for the lowest-level PVQ of a fully split
                   band.  Add in the cost of coding regular splits.  Offset the number of qtheta bits by log2(N)/2
                      + QTHETA_OFFSET compared to their "fair share" of
                      total/N  The number of qtheta bits we'll allocate if the remainder
                      is to be max_bits.
                     The average measured cost for theta is 0.89701 times qb,
                      approximated here as 459/512.  Add in the cost of a stereo split, if necessary.  The average measured cost for theta with the step PDF is
                      0.95164 times qb, approximated here as 487/512.  Add the fine bits we'll use.  Compensate for the extra DoF in stereo  Offset the number of fine bits by log2(N)/2 + FINE_OFFSET
                   compared to their "fair share" of total/N  N=2 is the only point that doesn't match the curve  The number of fine bits we'll allocate if the remainder is
                   to be max_bits.  CUSTOM_MODES  Don't allocate more than we can actually use printf ("interp bisection gave %d\n", lo); Don't allocate more than we can actually use  Decide which bands to skip, working backwards from the end.  Never skip the first band, nor a band that has been boosted by
          dynalloc.
         In the first case, we'd be coding a bit to signal we're going to waste
          all the other bits.
         In the second case, we'd be coding a bit to redistribute all the bits
          we just signaled should be cocentrated in this band.  Give the bit we reserved to end skipping back. Figure out how many left-over bits we would be adding to this band.
        This can include bits we've stolen back from higher, skipped bands.Only code a skip decision if we're above the threshold for this band.
        Otherwise it is force-skipped.
        This ensures that we have enough bits to code the skip flag.This if() block is the only part of the allocation function that
               is not a mandatory part of the bitstream: any bands we choose to
               skip here must be explicitly signaled.Choose a threshold with some hysteresis to keep bands from
               fluctuating in and out.We used a bit to skip this band.Reclaim the bits originally allocated to this band.If we have enough for a fine energy bit per channel, use it.Otherwise this band gets nothing at all. Code the intensity and dual stereo parameters.  Allocate the remaining bits for (j=0;j<end;j++)printf("%d ", bits[j]);printf("\n"); Compensate for the extra DoF in stereo  Offset for the number of fine bits by log2(N)/2 + FINE_OFFSET
            compared to their "fair share" of total/N  N=2 is the only point that doesn't match the curve  Changing the offset for allocating the second and third
             fine energy bit  Divide with rounding  Make sure not to bust  More than that is useless because that's about as far as PVQ can go  If we rounded down or capped this band, make it a candidate for the
             final fine energy pass  Remove the allocated fine bits; the rest are assigned to PVQ  For N=1, all bits go to fine energy except for a single sign bit  Fine energy can't take advantage of the re-balancing in
          quant_all_bands().
         Instead, do the re-balancing here. Save any remaining bits over the cap for the rebalancing in
       quant_all_bands().  The skipped bands use all their bits for fine energy.  Reserve a bit to signal the end of manually skipped bands.  Reserve bits for the intensity and dual stereo parameters.  Below this threshold, we're sure not to allocate any PVQ bits  Tilt of the allocation curve  Giving less resolution to single-coefficient bands because they get
         more benefit from having one coarse value per coefficient Don't allocate more than we can actually use printf ("lo = %d, hi = %d\n", lo, hi);printf ("interp between %d and %d\n", lo, hi); Copyright (c) 2007-2008 CSIRO
   Copyright (c) 2007-2009 Xiph.Org Foundation
   Written by Jean-Marc Valin 
   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

   - Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

   - Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
   OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
Determines if V(N,K) fits in a 32-bit unsigned integer.
  N and K are themselves limited to 15 bits. Scan for all unique band sizes  Find other bands that have the same size  Compute the cache for all unique sizes  Compute the maximum rate for each band at which we'll reliably use as
       many bits as we ask for.  N=1 bands only have a sign bit and fine bits.  Even-sized bands bigger than N=2 can be split one more time.
                  As of commit 44203907 all bands >1 are even, including custom modes. N0=1 bands can't be split down to N<2.  Compute the cost for the lowest-level PVQ of a fully split
                   band.  Add in the cost of coding regular splits.  Offset the number of qtheta bits by log2(N)/2
                      + QTHETA_OFFSET compared to their "fair share" of
                      total/N  The number of qtheta bits we'll allocate if the remainder
                      is to be max_bits.
                     The average measured cost for theta is 0.89701 times qb,
                      approximated here as 459/512.  Add in the cost of a stereo split, if necessary.  The average measured cost for theta with the step PDF is
                      0.95164 times qb, approximated here as 487/512.  Add the fine bits we'll use.  Compensate for the extra DoF in stereo  Offset the number of fine bits by log2(N)/2 + FINE_OFFSET
                   compared to their "fair share" of total/N  N=2 is the only point that doesn't match the curve  The number of fine bits we'll allocate if the remainder is
                   to be max_bits.  CUSTOM_MODES  Don't allocate more than we can actually use printf ("interp bisection gave %d\n", lo); Don't allocate more than we can actually use  Decide which bands to skip, working backwards from the end.  Never skip the first band, nor a band that has been boosted by
          dynalloc.
         In the first case, we'd be coding a bit to signal we're going to waste
          all the other bits.
         In the second case, we'd be coding a bit to redistribute all the bits
          we just signaled should be cocentrated in this band.  Give the bit we reserved to end skipping back. Figure out how many left-over bits we would be adding to this band.
        This can include bits we've stolen back from higher, skipped bands.Only code a skip decision if we're above the threshold for this band.
        Otherwise it is force-skipped.
        This ensures that we have enough bits to code the skip flag.This if() block is the only part of the allocation function that
               is not a mandatory part of the bitstream: any bands we choose to
               skip here must be explicitly signaled.Choose a threshold with some hysteresis to keep bands from
               fluctuating in and out.We used a bit to skip this band.Reclaim the bits originally allocated to this band.If we have enough for a fine energy bit per channel, use it.Otherwise this band gets nothing at all. Code the intensity and dual stereo parameters.  Allocate the remaining bits for (j=0;j<end;j++)printf("%d ", bits[j]);printf("\n"); Compensate for the extra DoF in stereo  Offset for the number of fine bits by log2(N)/2 + FINE_OFFSET
            compared to their "fair share" of total/N  N=2 is the only point that doesn't match the curve  Changing the offset for allocating the second and third
             fine energy bit  Divide with rounding  Make sure not to bust  More than that is useless because that's about as far as PVQ can go  If we rounded down or capped this band, make it a candidate for the
             final fine energy pass  Remove the allocated fine bits; the rest are assigned to PVQ  For N=1, all bits go to fine energy except for a single sign bit  Fine energy can't take advantage of the re-balancing in
          quant_all_bands().
         Instead, do the re-balancing here. Save any remaining bits over the cap for the rebalancing in
       quant_all_bands().  The skipped bands use all their bits for fine energy.  Reserve a bit to signal the end of manually skipped bands.  Reserve bits for the intensity and dual stereo parameters.  Below this threshold, we're sure not to allocate any PVQ bits  Tilt of the allocation curve  Giving less resolution to single-coefficient bands because they get
         more benefit from having one coarse value per coefficient Don't allocate more than we can actually use printf ("lo = %d, hi = %d\n", lo, hi);printf ("interp between %d and %d\n", lo, hi);