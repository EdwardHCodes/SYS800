 Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *  Gamma correction LUT stuff.
 *  Color range translation support
 *  Functions to draw patches (by post) directly to screen.
 *  Functions to blit a block to the screen.
 *
 *-----------------------------------------------------------------------------
  needed for color translation lump lookup  Each screen is [SCREENWIDTH*SCREENHEIGHT]; jff 4/24/98 initialize this at runtime  Now where did these came from? CPhipps - const
 * V_InitColorTranslation
 *
 * Loads the color translation tables from predefined lumps at game start
 * No return
 *
 * Used for translating text colors from the red palette range
 * to other colors. The first nine entries can be used to dynamically
 * switch the output of text color thru the HUlib_drawText routine
 * by embedding ESCn in the text to obtain color n. Symbols for n are
 * provided in v_video.h.
 *
 * cphipps - constness of crdef_t stuff fixed
  killough 5/2/98: table-driven approach killough 5/2/98: tiny engine driven by table above V_MarkRect Marks a rectangular portion of the screen specified by upper left origin and height and width dirty to minimize the amount of screen update necessary. No return. V_CopyRect Copies a source rectangle in a screen buffer to a destination rectangle in another screen buffer. Source origin in srcx,srcy, destination origin in destx,desty, common size in width and height. Source buffer specfified by srcscrn, destination buffer by destscrn. Marks the destination rectangle on the screen dirty. No return. V_DrawBlock Draw a linear block of pixels into the view buffer. The bytes at src are copied in linear order to the screen rectangle at x,y in screenbuffer scrn, with size width by height. The destination rectangle is marked dirty. No return. CPhipps - modified  to take the patch translation flags. For now, only stretching is  implemented, to support highres in the menus x & y no longer needed
 * V_DrawBackground tiles a 64x64 patch over the entire screen, providing the
 * background for the Help and Setup screens, and plot text betwen levels.
 * cphipps - used to have M_DrawBackground, but that was used the framebuffer
 * directly, so this is my code from the equivalent function in f_finale.c
  erase the entire screen to a tiled background  killough 4/17/98: V_GetBlock Gets a linear block of pixels from the view buffer. The pixels in the rectangle at x,y in screenbuffer scrn with size width by height are linearly packed into the buffer dest. No return V_Init Allocates the 4 full screen buffers in low DOS memory No return CPhipps - allocate only 2 screens all the time, the rest can be allocated as and when needed CPhipps - no point in "stick these in low dos memory on PCs" anymore Allocate the screens individually, so I_InitGraphics can release d_screens[0]  if e.g. it wants a MitSHM buffer instead Clear the rest (paranoia) V_DrawMemPatch CPhipps - unifying patch drawing routine, handles all cases and combinations  of stretching, flipping and translating This function is big, hopefully not too big that gcc can't optimise it well. In fact it packs pretty well, there is no big performance lose for all this merging; the inner loops themselves are just the same as they always were (indeed, laziness of the people who wrote the 'clones' of the original V_DrawPatch  means that their inner loops weren't so well optimised, so merging code may even speed them). CPhipps - auto-no-stretch if not high-res CPhipps - null translation pointer => no translation killough 1/19/98: improved error message: CPhipps - note: w = width-1 now, speeds up flipping step through the posts in a column killough 2/21/98: Unrolled and performance-tunedkillough 2/21/98 even faster CPhipps - merged translation code here CPhipps - move stretched patch drawing code here         - reformat initialisers, move variables into inner blocks CPhipps - -1 for faster flipping Clamp down the screenwidth Bounds checking allows those messed up GP32 mods to work (they're using patch-> height values of 240, this code cuts off thier bottom few pixels CPhipps - some simple, useful wrappers for that function, for drawing patches from wads CPhipps - GNU C only suppresses generating a copy of a function if it is static inline; other compilers have different behaviour. This inline is _only_ for the function below cph -
 * V_NamePatchWidth - returns width of a patch.
 * V_NamePatchHeight- returns height of a patch.
 *
 * Doesn't really belong here, but is often used in conjunction with
 *  this code.
 * This is needed to reduce the number of patches being held locked
 *  in memory, since a lot of code was locking and holding pointers
 *  to graphics in order to get this info easily. Also, we do endian
 *  correction here, which reduces the chance of other code forgetting
 *  this.
  CPhipps - V_PatchToBlock Returns a simple bitmap which contains the patch. See-through parts of the patch will be undefined (in fact black for now) One of those odd things that don't seem to have a purpose other then rangechecking  On screens smaller than 320X200 this line causes problems.   V_DrawMemPatch(SHORT(patch->leftoffset), SHORT(patch->topoffset),                  1, patch, cm, flags); V_SetPalette CPhipps - New function to set the palette to palette number pal. Handles loading of PLAYPAL and calls I_SetPalette V_FillRect CPhipps - New function to fill a rectangle with a given colour Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *  Gamma correction LUT stuff.
 *  Color range translation support
 *  Functions to draw patches (by post) directly to screen.
 *  Functions to blit a block to the screen.
 *
 *-----------------------------------------------------------------------------
  needed for color translation lump lookup  Each screen is [SCREENWIDTH*SCREENHEIGHT]; jff 4/24/98 initialize this at runtime  Now where did these came from? CPhipps - const
 * V_InitColorTranslation
 *
 * Loads the color translation tables from predefined lumps at game start
 * No return
 *
 * Used for translating text colors from the red palette range
 * to other colors. The first nine entries can be used to dynamically
 * switch the output of text color thru the HUlib_drawText routine
 * by embedding ESCn in the text to obtain color n. Symbols for n are
 * provided in v_video.h.
 *
 * cphipps - constness of crdef_t stuff fixed
  killough 5/2/98: table-driven approach killough 5/2/98: tiny engine driven by table above V_MarkRect Marks a rectangular portion of the screen specified by upper left origin and height and width dirty to minimize the amount of screen update necessary. No return. V_CopyRect Copies a source rectangle in a screen buffer to a destination rectangle in another screen buffer. Source origin in srcx,srcy, destination origin in destx,desty, common size in width and height. Source buffer specfified by srcscrn, destination buffer by destscrn. Marks the destination rectangle on the screen dirty. No return. V_DrawBlock Draw a linear block of pixels into the view buffer. The bytes at src are copied in linear order to the screen rectangle at x,y in screenbuffer scrn, with size width by height. The destination rectangle is marked dirty. No return. CPhipps - modified  to take the patch translation flags. For now, only stretching is  implemented, to support highres in the menus x & y no longer needed
 * V_DrawBackground tiles a 64x64 patch over the entire screen, providing the
 * background for the Help and Setup screens, and plot text betwen levels.
 * cphipps - used to have M_DrawBackground, but that was used the framebuffer
 * directly, so this is my code from the equivalent function in f_finale.c
  erase the entire screen to a tiled background  killough 4/17/98: V_GetBlock Gets a linear block of pixels from the view buffer. The pixels in the rectangle at x,y in screenbuffer scrn with size width by height are linearly packed into the buffer dest. No return V_Init Allocates the 4 full screen buffers in low DOS memory No return CPhipps - allocate only 2 screens all the time, the rest can be allocated as and when needed CPhipps - no point in "stick these in low dos memory on PCs" anymore Allocate the screens individually, so I_InitGraphics can release d_screens[0]  if e.g. it wants a MitSHM buffer instead Clear the rest (paranoia) V_DrawMemPatch CPhipps - unifying patch drawing routine, handles all cases and combinations  of stretching, flipping and translating This function is big, hopefully not too big that gcc can't optimise it well. In fact it packs pretty well, there is no big performance lose for all this merging; the inner loops themselves are just the same as they always were (indeed, laziness of the people who wrote the 'clones' of the original V_DrawPatch  means that their inner loops weren't so well optimised, so merging code may even speed them). CPhipps - auto-no-stretch if not high-res CPhipps - null translation pointer => no translation killough 1/19/98: improved error message: CPhipps - note: w = width-1 now, speeds up flipping step through the posts in a column killough 2/21/98: Unrolled and performance-tunedkillough 2/21/98 even faster CPhipps - merged translation code here CPhipps - move stretched patch drawing code here         - reformat initialisers, move variables into inner blocks CPhipps - -1 for faster flipping Clamp down the screenwidth Bounds checking allows those messed up GP32 mods to work (they're using patch-> height values of 240, this code cuts off thier bottom few pixels CPhipps - some simple, useful wrappers for that function, for drawing patches from wads CPhipps - GNU C only suppresses generating a copy of a function if it is static inline; other compilers have different behaviour. This inline is _only_ for the function below cph -
 * V_NamePatchWidth - returns width of a patch.
 * V_NamePatchHeight- returns height of a patch.
 *
 * Doesn't really belong here, but is often used in conjunction with
 *  this code.
 * This is needed to reduce the number of patches being held locked
 *  in memory, since a lot of code was locking and holding pointers
 *  to graphics in order to get this info easily. Also, we do endian
 *  correction here, which reduces the chance of other code forgetting
 *  this.
  CPhipps - V_PatchToBlock Returns a simple bitmap which contains the patch. See-through parts of the patch will be undefined (in fact black for now) One of those odd things that don't seem to have a purpose other then rangechecking  On screens smaller than 320X200 this line causes problems.   V_DrawMemPatch(SHORT(patch->leftoffset), SHORT(patch->topoffset),                  1, patch, cm, flags); V_SetPalette CPhipps - New function to set the palette to palette number pal. Handles loading of PLAYPAL and calls I_SetPalette V_FillRect CPhipps - New function to fill a rectangle with a given colour Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *  Gamma correction LUT stuff.
 *  Color range translation support
 *  Functions to draw patches (by post) directly to screen.
 *  Functions to blit a block to the screen.
 *
 *-----------------------------------------------------------------------------
  needed for color translation lump lookup  Each screen is [SCREENWIDTH*SCREENHEIGHT]; jff 4/24/98 initialize this at runtime  Now where did these came from? CPhipps - const
 * V_InitColorTranslation
 *
 * Loads the color translation tables from predefined lumps at game start
 * No return
 *
 * Used for translating text colors from the red palette range
 * to other colors. The first nine entries can be used to dynamically
 * switch the output of text color thru the HUlib_drawText routine
 * by embedding ESCn in the text to obtain color n. Symbols for n are
 * provided in v_video.h.
 *
 * cphipps - constness of crdef_t stuff fixed
  killough 5/2/98: table-driven approach killough 5/2/98: tiny engine driven by table above V_MarkRect Marks a rectangular portion of the screen specified by upper left origin and height and width dirty to minimize the amount of screen update necessary. No return. V_CopyRect Copies a source rectangle in a screen buffer to a destination rectangle in another screen buffer. Source origin in srcx,srcy, destination origin in destx,desty, common size in width and height. Source buffer specfified by srcscrn, destination buffer by destscrn. Marks the destination rectangle on the screen dirty. No return. V_DrawBlock Draw a linear block of pixels into the view buffer. The bytes at src are copied in linear order to the screen rectangle at x,y in screenbuffer scrn, with size width by height. The destination rectangle is marked dirty. No return. CPhipps - modified  to take the patch translation flags. For now, only stretching is  implemented, to support highres in the menus x & y no longer needed
 * V_DrawBackground tiles a 64x64 patch over the entire screen, providing the
 * background for the Help and Setup screens, and plot text betwen levels.
 * cphipps - used to have M_DrawBackground, but that was used the framebuffer
 * directly, so this is my code from the equivalent function in f_finale.c
  erase the entire screen to a tiled background  killough 4/17/98: V_GetBlock Gets a linear block of pixels from the view buffer. The pixels in the rectangle at x,y in screenbuffer scrn with size width by height are linearly packed into the buffer dest. No return V_Init Allocates the 4 full screen buffers in low DOS memory No return CPhipps - allocate only 2 screens all the time, the rest can be allocated as and when needed CPhipps - no point in "stick these in low dos memory on PCs" anymore Allocate the screens individually, so I_InitGraphics can release d_screens[0]  if e.g. it wants a MitSHM buffer instead Clear the rest (paranoia) V_DrawMemPatch CPhipps - unifying patch drawing routine, handles all cases and combinations  of stretching, flipping and translating This function is big, hopefully not too big that gcc can't optimise it well. In fact it packs pretty well, there is no big performance lose for all this merging; the inner loops themselves are just the same as they always were (indeed, laziness of the people who wrote the 'clones' of the original V_DrawPatch  means that their inner loops weren't so well optimised, so merging code may even speed them). CPhipps - auto-no-stretch if not high-res CPhipps - null translation pointer => no translation killough 1/19/98: improved error message: CPhipps - note: w = width-1 now, speeds up flipping step through the posts in a column killough 2/21/98: Unrolled and performance-tunedkillough 2/21/98 even faster CPhipps - merged translation code here CPhipps - move stretched patch drawing code here         - reformat initialisers, move variables into inner blocks CPhipps - -1 for faster flipping Clamp down the screenwidth Bounds checking allows those messed up GP32 mods to work (they're using patch-> height values of 240, this code cuts off thier bottom few pixels CPhipps - some simple, useful wrappers for that function, for drawing patches from wads CPhipps - GNU C only suppresses generating a copy of a function if it is static inline; other compilers have different behaviour. This inline is _only_ for the function below cph -
 * V_NamePatchWidth - returns width of a patch.
 * V_NamePatchHeight- returns height of a patch.
 *
 * Doesn't really belong here, but is often used in conjunction with
 *  this code.
 * This is needed to reduce the number of patches being held locked
 *  in memory, since a lot of code was locking and holding pointers
 *  to graphics in order to get this info easily. Also, we do endian
 *  correction here, which reduces the chance of other code forgetting
 *  this.
  CPhipps - V_PatchToBlock Returns a simple bitmap which contains the patch. See-through parts of the patch will be undefined (in fact black for now) One of those odd things that don't seem to have a purpose other then rangechecking  On screens smaller than 320X200 this line causes problems.   V_DrawMemPatch(SHORT(patch->leftoffset), SHORT(patch->topoffset),                  1, patch, cm, flags); V_SetPalette CPhipps - New function to set the palette to palette number pal. Handles loading of PLAYPAL and calls I_SetPalette V_FillRect CPhipps - New function to fill a rectangle with a given colour