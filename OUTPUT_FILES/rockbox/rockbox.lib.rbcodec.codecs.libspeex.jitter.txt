 Copyright (C) 2002 Jean-Marc Valin 
   File: speex_jitter.h

   Adaptive jitter buffer for Speex

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:
   
   - Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
   
   - Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
   
   - Neither the name of the Xiph.org Foundation nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.
   
   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


TODO:
- Add short-term estimate
- Defensive programming
  + warn when last returned < last desired (begative buffering)
  + warn if update_delay not called between get() and tick() or is called twice in a row
- Linked list structure for holding the packets instead of the current fixed-size array
  + return memory to a pool
  + allow pre-allocation of the pool
  + optional max number of elements
- Statistics
  + drift
  + loss
  + late
  + jitter
  + buffering delay
*< Maximum number of packets in jitter buffer * Buffer that keeps the time of arrival of the latest packets *< Number of entries occupied in "timing" and "counts"*< Number of packet timings we got (including those we discarded) *< Sorted list of all timings ("latest" packets first) *< Order the packets were put in (will be used for short-term estimate)  Add the timing of a new packet to the TimingBuffer  Discard packet that won't make it into the list because they're too early  Find where the timing info goes in the sorted list  FIXME: Do bisection instead of linear search  Shift everything so we can perform the insertion  Insert * Jitter buffer structure *< Timestamp of what we will *get* next *< Useful for getting the next packet with the same timestamp (for fragmented media) *< Estimated time the next get() will be called *< Amount of data we think is still buffered by the application (timestamp units)*< Packets stored in the buffer *< Packet arrival time (0 means it was late, even though it's a valid timestamp) *< Callback for destroying a packet *< Size of the steps when adjusting buffering (timestamp units) *< Size of the packet loss concealment "units" *< True if state was just reset        *< How many frames we want to keep in the buffer (lower bound) *< How late must a packet be for it not to be considered at all *< An interpolation is requested by speex_jitter_update_delay() *< Whether to automatically adjust the delay at any time *< Don't use those directly *< Storing arrival time of latest frames so we can compute some stats *< Total window over which the late frames are counted *< Sub-window size for faster computation  *< Absolute maximum amount of late packets tolerable (in percent) *< Latency equivalent of losing one percent of packets *< Latency equivalent of losing one percent of packets (automatic default) *< Number of consecutive lost packets  * Based on available data, this computes the optimal delay for the jitter buffer. 
   The optimised function is in timestamp units and is:
   cost = delay + late_factor*[number of frames that would be late if we used that delay]
   @param tb Array of buffers
   @param late_factor Equivalent cost of a late frame (in timestamp units) 
  Number of packet timings we have received (including those we didn't keep)  Compute cost for one lost packet fprintf(stderr, "late_factor = %f\n", late_factor); Pick the TOP_DELAY "latest" packets (doesn't need to actually be late 
      for the current settings)  Pick latest amoung all sub-windows  Actual cost function that tells us how bad using this delay would be fprintf(stderr, "cost %d = %d + %f * %d\n", cost, -latest, late_factor, late); For the next timing we will consider, there will be one more late packet to count  Two-frame penalty if we're going to increase the amount of late frames (hysteresis)  This is a default "automatic latency tradeoff" when none is provided fprintf(stderr, "auto_tradeoff = %d (%d %d %d)\n", jitter->auto_tradeoff, best, worst, i); FIXME: Compute a short-term estimate too and combine with the long-term one  Prevents reducing the buffer size when we haven't really had much data * Initialise jitter buffer FIXME: Should this be 0 or 1?* Reset jitter buffer  Timestamp is actually undefined at this point fprintf (stderr, "reset\n");* Destroy jitter buffer * Take the following timing into consideration for future calculations  If the current sub-window is full, perform a rotation and discard oldest sub-widow fprintf(stderr, "Rotate buffer\n");* Compensate all timings when we do an adjustment of the buffering * Put one packet into the jitter buffer fprintf (stderr, "put packet %d %d\n", timestamp, span); Cleanup buffer (remove old packets that weren't played)  Make sure we don't discard a "just-late" packet in case we want to play it next (if we interpolate). fprintf (stderr, "cleaned (not played)\n");fprintf(stderr, "arrival: %d %d %d\n", packet->timestamp, jitter->next_stop, jitter->pointer_timestamp); Check if packet is late (could still be useful though)  Only insert the packet if it's not hopelessly late (i.e. totally useless) Find an empty slot in the bufferNo place left in the buffer, need to make room for it by discarding the oldest packet fprintf (stderr, "Buffer is full, discarding earliest frame %d (currently at %d)\n", timestamp, jitter->pointer_timestamp); Copy packet in buffer * Get one packet from the jitter buffer  Syncing on the first call  Find the oldest packet  Increment the pointer because it got decremented in the delay update fprintf (stderr, "Deferred interpolate\n"); Searching for the packet that fits best  Search the buffer for a packet with the right timestamp and spanning the whole current chunk  If no match, try for an "older" packet that still spans (fully) the current chunk  If still no match, try for an "older" packet that spans part of the current chunk  If still no match, try for earliest packet possible  check if packet starts within current chunk fprintf (stderr, "incomplete: %d %d %d %d\n", jitter->packets[i].timestamp, jitter->pointer_timestamp, chunk_size, jitter->packets[i].span); If we find something  We (obviously) haven't lost this packet  In this case, 0 isn't as a valid timestamp  Copy packet  Remove packet  Set timestamp and span (if requested)  Point to the end of the current packet  If we haven't found anything worth returning fprintf (stderr, "not found\n");fprintf (stderr, "m");fprintf (stderr, "lost_count = %d\n", jitter->lost_count); Should we force an increase in the buffer or just do normal interpolation?  Need to increase buffering  Shift histogram to compensate  Don't move the pointer_timestamp forward jitter->pointer_timestamp -= jitter->delay_step;fprintf (stderr, "Forced to interpolate\n"); Normal packet loss fprintf (stderr, "Normal loss\n"); Copy packet  Remove packet  Let the jitter buffer know it's the right time to adjust the buffering delay to the network conditions fprintf(stderr, "opt adjustment is %d ", opt);fprintf (stderr, "Decision to interpolate %d samples\n", -opt);fprintf (stderr, "Decision to drop %d samples\n", opt); Let the jitter buffer know it's the right time to adjust the buffering delay to the network conditions  If the programmer calls jitter_buffer_update_delay() directly, 
      automatically disable auto-adjustment * Get pointer timestamp of jitter buffer  Automatically-adjust the buffering delay if requested  Automatically-adjust the buffering delay if requested  Used like the ioctl function to control the jitter buffer parameters  Copyright (C) 2002 Jean-Marc Valin 
   File: speex_jitter.h

   Adaptive jitter buffer for Speex

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:
   
   - Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
   
   - Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
   
   - Neither the name of the Xiph.org Foundation nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.
   
   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


TODO:
- Add short-term estimate
- Defensive programming
  + warn when last returned < last desired (begative buffering)
  + warn if update_delay not called between get() and tick() or is called twice in a row
- Linked list structure for holding the packets instead of the current fixed-size array
  + return memory to a pool
  + allow pre-allocation of the pool
  + optional max number of elements
- Statistics
  + drift
  + loss
  + late
  + jitter
  + buffering delay
*< Maximum number of packets in jitter buffer * Buffer that keeps the time of arrival of the latest packets *< Number of entries occupied in "timing" and "counts"*< Number of packet timings we got (including those we discarded) *< Sorted list of all timings ("latest" packets first) *< Order the packets were put in (will be used for short-term estimate)  Add the timing of a new packet to the TimingBuffer  Discard packet that won't make it into the list because they're too early  Find where the timing info goes in the sorted list  FIXME: Do bisection instead of linear search  Shift everything so we can perform the insertion  Insert * Jitter buffer structure *< Timestamp of what we will *get* next *< Useful for getting the next packet with the same timestamp (for fragmented media) *< Estimated time the next get() will be called *< Amount of data we think is still buffered by the application (timestamp units)*< Packets stored in the buffer *< Packet arrival time (0 means it was late, even though it's a valid timestamp) *< Callback for destroying a packet *< Size of the steps when adjusting buffering (timestamp units) *< Size of the packet loss concealment "units" *< True if state was just reset        *< How many frames we want to keep in the buffer (lower bound) *< How late must a packet be for it not to be considered at all *< An interpolation is requested by speex_jitter_update_delay() *< Whether to automatically adjust the delay at any time *< Don't use those directly *< Storing arrival time of latest frames so we can compute some stats *< Total window over which the late frames are counted *< Sub-window size for faster computation  *< Absolute maximum amount of late packets tolerable (in percent) *< Latency equivalent of losing one percent of packets *< Latency equivalent of losing one percent of packets (automatic default) *< Number of consecutive lost packets  * Based on available data, this computes the optimal delay for the jitter buffer. 
   The optimised function is in timestamp units and is:
   cost = delay + late_factor*[number of frames that would be late if we used that delay]
   @param tb Array of buffers
   @param late_factor Equivalent cost of a late frame (in timestamp units) 
  Number of packet timings we have received (including those we didn't keep)  Compute cost for one lost packet fprintf(stderr, "late_factor = %f\n", late_factor); Pick the TOP_DELAY "latest" packets (doesn't need to actually be late 
      for the current settings)  Pick latest amoung all sub-windows  Actual cost function that tells us how bad using this delay would be fprintf(stderr, "cost %d = %d + %f * %d\n", cost, -latest, late_factor, late); For the next timing we will consider, there will be one more late packet to count  Two-frame penalty if we're going to increase the amount of late frames (hysteresis)  This is a default "automatic latency tradeoff" when none is provided fprintf(stderr, "auto_tradeoff = %d (%d %d %d)\n", jitter->auto_tradeoff, best, worst, i); FIXME: Compute a short-term estimate too and combine with the long-term one  Prevents reducing the buffer size when we haven't really had much data * Initialise jitter buffer FIXME: Should this be 0 or 1?* Reset jitter buffer  Timestamp is actually undefined at this point fprintf (stderr, "reset\n");* Destroy jitter buffer * Take the following timing into consideration for future calculations  If the current sub-window is full, perform a rotation and discard oldest sub-widow fprintf(stderr, "Rotate buffer\n");* Compensate all timings when we do an adjustment of the buffering * Put one packet into the jitter buffer fprintf (stderr, "put packet %d %d\n", timestamp, span); Cleanup buffer (remove old packets that weren't played)  Make sure we don't discard a "just-late" packet in case we want to play it next (if we interpolate). fprintf (stderr, "cleaned (not played)\n");fprintf(stderr, "arrival: %d %d %d\n", packet->timestamp, jitter->next_stop, jitter->pointer_timestamp); Check if packet is late (could still be useful though)  Only insert the packet if it's not hopelessly late (i.e. totally useless) Find an empty slot in the bufferNo place left in the buffer, need to make room for it by discarding the oldest packet fprintf (stderr, "Buffer is full, discarding earliest frame %d (currently at %d)\n", timestamp, jitter->pointer_timestamp); Copy packet in buffer * Get one packet from the jitter buffer  Syncing on the first call  Find the oldest packet  Increment the pointer because it got decremented in the delay update fprintf (stderr, "Deferred interpolate\n"); Searching for the packet that fits best  Search the buffer for a packet with the right timestamp and spanning the whole current chunk  If no match, try for an "older" packet that still spans (fully) the current chunk  If still no match, try for an "older" packet that spans part of the current chunk  If still no match, try for earliest packet possible  check if packet starts within current chunk fprintf (stderr, "incomplete: %d %d %d %d\n", jitter->packets[i].timestamp, jitter->pointer_timestamp, chunk_size, jitter->packets[i].span); If we find something  We (obviously) haven't lost this packet  In this case, 0 isn't as a valid timestamp  Copy packet  Remove packet  Set timestamp and span (if requested)  Point to the end of the current packet  If we haven't found anything worth returning fprintf (stderr, "not found\n");fprintf (stderr, "m");fprintf (stderr, "lost_count = %d\n", jitter->lost_count); Should we force an increase in the buffer or just do normal interpolation?  Need to increase buffering  Shift histogram to compensate  Don't move the pointer_timestamp forward jitter->pointer_timestamp -= jitter->delay_step;fprintf (stderr, "Forced to interpolate\n"); Normal packet loss fprintf (stderr, "Normal loss\n"); Copy packet  Remove packet  Let the jitter buffer know it's the right time to adjust the buffering delay to the network conditions fprintf(stderr, "opt adjustment is %d ", opt);fprintf (stderr, "Decision to interpolate %d samples\n", -opt);fprintf (stderr, "Decision to drop %d samples\n", opt); Let the jitter buffer know it's the right time to adjust the buffering delay to the network conditions  If the programmer calls jitter_buffer_update_delay() directly, 
      automatically disable auto-adjustment * Get pointer timestamp of jitter buffer  Automatically-adjust the buffering delay if requested  Automatically-adjust the buffering delay if requested  Used like the ioctl function to control the jitter buffer parameters  Copyright (C) 2002 Jean-Marc Valin 
   File: speex_jitter.h

   Adaptive jitter buffer for Speex

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:
   
   - Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
   
   - Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
   
   - Neither the name of the Xiph.org Foundation nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.
   
   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


TODO:
- Add short-term estimate
- Defensive programming
  + warn when last returned < last desired (begative buffering)
  + warn if update_delay not called between get() and tick() or is called twice in a row
- Linked list structure for holding the packets instead of the current fixed-size array
  + return memory to a pool
  + allow pre-allocation of the pool
  + optional max number of elements
- Statistics
  + drift
  + loss
  + late
  + jitter
  + buffering delay
*< Maximum number of packets in jitter buffer * Buffer that keeps the time of arrival of the latest packets *< Number of entries occupied in "timing" and "counts"*< Number of packet timings we got (including those we discarded) *< Sorted list of all timings ("latest" packets first) *< Order the packets were put in (will be used for short-term estimate)  Add the timing of a new packet to the TimingBuffer  Discard packet that won't make it into the list because they're too early  Find where the timing info goes in the sorted list  FIXME: Do bisection instead of linear search  Shift everything so we can perform the insertion  Insert * Jitter buffer structure *< Timestamp of what we will *get* next *< Useful for getting the next packet with the same timestamp (for fragmented media) *< Estimated time the next get() will be called *< Amount of data we think is still buffered by the application (timestamp units)*< Packets stored in the buffer *< Packet arrival time (0 means it was late, even though it's a valid timestamp) *< Callback for destroying a packet *< Size of the steps when adjusting buffering (timestamp units) *< Size of the packet loss concealment "units" *< True if state was just reset        *< How many frames we want to keep in the buffer (lower bound) *< How late must a packet be for it not to be considered at all *< An interpolation is requested by speex_jitter_update_delay() *< Whether to automatically adjust the delay at any time *< Don't use those directly *< Storing arrival time of latest frames so we can compute some stats *< Total window over which the late frames are counted *< Sub-window size for faster computation  *< Absolute maximum amount of late packets tolerable (in percent) *< Latency equivalent of losing one percent of packets *< Latency equivalent of losing one percent of packets (automatic default) *< Number of consecutive lost packets  * Based on available data, this computes the optimal delay for the jitter buffer. 
   The optimised function is in timestamp units and is:
   cost = delay + late_factor*[number of frames that would be late if we used that delay]
   @param tb Array of buffers
   @param late_factor Equivalent cost of a late frame (in timestamp units) 
  Number of packet timings we have received (including those we didn't keep)  Compute cost for one lost packet fprintf(stderr, "late_factor = %f\n", late_factor); Pick the TOP_DELAY "latest" packets (doesn't need to actually be late 
      for the current settings)  Pick latest amoung all sub-windows  Actual cost function that tells us how bad using this delay would be fprintf(stderr, "cost %d = %d + %f * %d\n", cost, -latest, late_factor, late); For the next timing we will consider, there will be one more late packet to count  Two-frame penalty if we're going to increase the amount of late frames (hysteresis)  This is a default "automatic latency tradeoff" when none is provided fprintf(stderr, "auto_tradeoff = %d (%d %d %d)\n", jitter->auto_tradeoff, best, worst, i); FIXME: Compute a short-term estimate too and combine with the long-term one  Prevents reducing the buffer size when we haven't really had much data * Initialise jitter buffer FIXME: Should this be 0 or 1?* Reset jitter buffer  Timestamp is actually undefined at this point fprintf (stderr, "reset\n");* Destroy jitter buffer * Take the following timing into consideration for future calculations  If the current sub-window is full, perform a rotation and discard oldest sub-widow fprintf(stderr, "Rotate buffer\n");* Compensate all timings when we do an adjustment of the buffering * Put one packet into the jitter buffer fprintf (stderr, "put packet %d %d\n", timestamp, span); Cleanup buffer (remove old packets that weren't played)  Make sure we don't discard a "just-late" packet in case we want to play it next (if we interpolate). fprintf (stderr, "cleaned (not played)\n");fprintf(stderr, "arrival: %d %d %d\n", packet->timestamp, jitter->next_stop, jitter->pointer_timestamp); Check if packet is late (could still be useful though)  Only insert the packet if it's not hopelessly late (i.e. totally useless) Find an empty slot in the bufferNo place left in the buffer, need to make room for it by discarding the oldest packet fprintf (stderr, "Buffer is full, discarding earliest frame %d (currently at %d)\n", timestamp, jitter->pointer_timestamp); Copy packet in buffer * Get one packet from the jitter buffer  Syncing on the first call  Find the oldest packet  Increment the pointer because it got decremented in the delay update fprintf (stderr, "Deferred interpolate\n"); Searching for the packet that fits best  Search the buffer for a packet with the right timestamp and spanning the whole current chunk  If no match, try for an "older" packet that still spans (fully) the current chunk  If still no match, try for an "older" packet that spans part of the current chunk  If still no match, try for earliest packet possible  check if packet starts within current chunk fprintf (stderr, "incomplete: %d %d %d %d\n", jitter->packets[i].timestamp, jitter->pointer_timestamp, chunk_size, jitter->packets[i].span); If we find something  We (obviously) haven't lost this packet  In this case, 0 isn't as a valid timestamp  Copy packet  Remove packet  Set timestamp and span (if requested)  Point to the end of the current packet  If we haven't found anything worth returning fprintf (stderr, "not found\n");fprintf (stderr, "m");fprintf (stderr, "lost_count = %d\n", jitter->lost_count); Should we force an increase in the buffer or just do normal interpolation?  Need to increase buffering  Shift histogram to compensate  Don't move the pointer_timestamp forward jitter->pointer_timestamp -= jitter->delay_step;fprintf (stderr, "Forced to interpolate\n"); Normal packet loss fprintf (stderr, "Normal loss\n"); Copy packet  Remove packet  Let the jitter buffer know it's the right time to adjust the buffering delay to the network conditions fprintf(stderr, "opt adjustment is %d ", opt);fprintf (stderr, "Decision to interpolate %d samples\n", -opt);fprintf (stderr, "Decision to drop %d samples\n", opt); Let the jitter buffer know it's the right time to adjust the buffering delay to the network conditions  If the programmer calls jitter_buffer_update_delay() directly, 
      automatically disable auto-adjustment * Get pointer timestamp of jitter buffer  Automatically-adjust the buffering delay if requested  Automatically-adjust the buffering delay if requested  Used like the ioctl function to control the jitter buffer parameters 