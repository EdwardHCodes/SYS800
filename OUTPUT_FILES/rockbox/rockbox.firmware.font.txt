**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2002 by Greg Haerr <greg@censoft.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * Rockbox startup font initialization
 * This file specifies which fonts get compiled-in and
 * loaded at startup, as well as their mapping into
 * the FONT_SYSFIXED, FONT_UI and FONT_MP3 ids.
  max static loadable font buffer size  Font cache includes  Define this to try loading /.rockbox/.glyphcache    *
 * when a font specific file fails. This requires the  *
 * user to copy and rename a font glyph cache file     #define TRY_DEFAULT_GLYPHCACHE compiled-in font  must be the first member!  is the buflib handle currently locked?  how many times has this font been loaded?  Font cache structures  End Font cache structures  Check if we have x bytes left in the file buffer  Helper functions to read big-endian unaligned short or long from
   the file buffer.  Bounds-checking must be done in the calling
   function.
  Load memory font  variable font data pad to 16-bit boundary  pad to 32-bit boundary Check we have sufficient buffer  Check we have sufficient buffer  success! Load cached font  We are now at the bitmap data, this is fixed at 36..  Calculate offset to offset data  pad to 16-bit boundary  pad to 32-bit boundary Calculate offset to widths data  Create the cache  LRU bytes per glyph  Image bytes per glyph  Load the header. Readshort() and readlong()              *
     * update buffer_position address as they read               read magic and version # font info get variable font data sizes # words of bitmap_t load a font with room for glyphs, limited to bufsize if not zero printf("\nfont_load_ex(%s, %d, %d)\n", path, buf_size, glyphs); load font struct f with file header  examine f and calc buffer size  check already loaded  already loaded, no need to reload  reload the font:
             * 1) save of refcont and id
             * 2) force unload (set refcount to 1 to make sure it get unloaded)
             * 3) reload with the larger buffer
             * 4) restore the id and refcount
              we couldn't even get the old size, this shouldn't happen  return error because we didn't satisfy the new buffer size printf("reusing handle %d for %s (count: %d)\n", font_id, path, pd->refcount);  allocate mem  load and init  trick to get a small cache for each file section   *
         * during glyph_cache_load()                           cached font: pf->fd stays open until the font is unloaded printf("%s -> [%d] -> %d\n", path, font_id, *handle); success!printf("freeing id: %d %s\n", font_id, core_get_name(*handle)); force unload  save the cache, but it keep it in-RAM so that cache lookups
         * can still succeed on the same font 
 * Return a pointer to an incore font structure.
 * If the requested font isn't loaded/compiled-in,
 * decrement the font number and try again.
 
 * Reads an entry into cache entry
  load via different fd to get this file section cached  load via different fd to get this file section cached 
 * Converts cbuf into a font cache
  maximum size of rotated bitmap  reserve one blank glyph that is guaranteed to be available, even
     * when the font file is closed during USB  Initialise cache 
 * Returns width of character
  check input range falls back to pf->maxwidth if !e  check input range the font handle is closed, but the cache is intact. Attempt
         * a lookup, which is very likely to succeed. Return a placeholder
         * glyph on miss (again, this is very unlikely  Could attempt to find a suitable fallback glyph from the same
             * font. For now just return blank space which is
             * reserved by cache_create() at buffer_start  This font is entirely in RAM  take full file name, cut extension, and add .glyphcache  call with NULL to flush  flush buffer & reset  save the char codes of the loaded glyphs to a file  if font specific file fails, try default  only read what fits  sort glyphs array to make sector cache happy  load font bitmaps  redo to fix lru order  load latin1 chars into cache  BOOTLOADER 
 * Bootloader only supports the built-in sysfont.
 
 * Returns width of character
  check input range check input range assume small font with uint16_t offsets BOOTLOADER 
 * Returns the stringsize of a given string. 
  get proportional width and glyph bits -----------------------------------------------------------------
 * vim: et sw=4 ts=8 sts=4 tw=78
 **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2002 by Greg Haerr <greg@censoft.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * Rockbox startup font initialization
 * This file specifies which fonts get compiled-in and
 * loaded at startup, as well as their mapping into
 * the FONT_SYSFIXED, FONT_UI and FONT_MP3 ids.
  max static loadable font buffer size  Font cache includes  Define this to try loading /.rockbox/.glyphcache    *
 * when a font specific file fails. This requires the  *
 * user to copy and rename a font glyph cache file     #define TRY_DEFAULT_GLYPHCACHE compiled-in font  must be the first member!  is the buflib handle currently locked?  how many times has this font been loaded?  Font cache structures  End Font cache structures  Check if we have x bytes left in the file buffer  Helper functions to read big-endian unaligned short or long from
   the file buffer.  Bounds-checking must be done in the calling
   function.
  Load memory font  variable font data pad to 16-bit boundary  pad to 32-bit boundary Check we have sufficient buffer  Check we have sufficient buffer  success! Load cached font  We are now at the bitmap data, this is fixed at 36..  Calculate offset to offset data  pad to 16-bit boundary  pad to 32-bit boundary Calculate offset to widths data  Create the cache  LRU bytes per glyph  Image bytes per glyph  Load the header. Readshort() and readlong()              *
     * update buffer_position address as they read               read magic and version # font info get variable font data sizes # words of bitmap_t load a font with room for glyphs, limited to bufsize if not zero printf("\nfont_load_ex(%s, %d, %d)\n", path, buf_size, glyphs); load font struct f with file header  examine f and calc buffer size  check already loaded  already loaded, no need to reload  reload the font:
             * 1) save of refcont and id
             * 2) force unload (set refcount to 1 to make sure it get unloaded)
             * 3) reload with the larger buffer
             * 4) restore the id and refcount
              we couldn't even get the old size, this shouldn't happen  return error because we didn't satisfy the new buffer size printf("reusing handle %d for %s (count: %d)\n", font_id, path, pd->refcount);  allocate mem  load and init  trick to get a small cache for each file section   *
         * during glyph_cache_load()                           cached font: pf->fd stays open until the font is unloaded printf("%s -> [%d] -> %d\n", path, font_id, *handle); success!printf("freeing id: %d %s\n", font_id, core_get_name(*handle)); force unload  save the cache, but it keep it in-RAM so that cache lookups
         * can still succeed on the same font 
 * Return a pointer to an incore font structure.
 * If the requested font isn't loaded/compiled-in,
 * decrement the font number and try again.
 
 * Reads an entry into cache entry
  load via different fd to get this file section cached  load via different fd to get this file section cached 
 * Converts cbuf into a font cache
  maximum size of rotated bitmap  reserve one blank glyph that is guaranteed to be available, even
     * when the font file is closed during USB  Initialise cache 
 * Returns width of character
  check input range falls back to pf->maxwidth if !e  check input range the font handle is closed, but the cache is intact. Attempt
         * a lookup, which is very likely to succeed. Return a placeholder
         * glyph on miss (again, this is very unlikely  Could attempt to find a suitable fallback glyph from the same
             * font. For now just return blank space which is
             * reserved by cache_create() at buffer_start  This font is entirely in RAM  take full file name, cut extension, and add .glyphcache  call with NULL to flush  flush buffer & reset  save the char codes of the loaded glyphs to a file  if font specific file fails, try default  only read what fits  sort glyphs array to make sector cache happy  load font bitmaps  redo to fix lru order  load latin1 chars into cache  BOOTLOADER 
 * Bootloader only supports the built-in sysfont.
 
 * Returns width of character
  check input range check input range assume small font with uint16_t offsets BOOTLOADER 
 * Returns the stringsize of a given string. 
  get proportional width and glyph bits -----------------------------------------------------------------
 * vim: et sw=4 ts=8 sts=4 tw=78
 **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2002 by Greg Haerr <greg@censoft.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * Rockbox startup font initialization
 * This file specifies which fonts get compiled-in and
 * loaded at startup, as well as their mapping into
 * the FONT_SYSFIXED, FONT_UI and FONT_MP3 ids.
  max static loadable font buffer size  Font cache includes  Define this to try loading /.rockbox/.glyphcache    *
 * when a font specific file fails. This requires the  *
 * user to copy and rename a font glyph cache file     #define TRY_DEFAULT_GLYPHCACHE compiled-in font  must be the first member!  is the buflib handle currently locked?  how many times has this font been loaded?  Font cache structures  End Font cache structures  Check if we have x bytes left in the file buffer  Helper functions to read big-endian unaligned short or long from
   the file buffer.  Bounds-checking must be done in the calling
   function.
  Load memory font  variable font data pad to 16-bit boundary  pad to 32-bit boundary Check we have sufficient buffer  Check we have sufficient buffer  success! Load cached font  We are now at the bitmap data, this is fixed at 36..  Calculate offset to offset data  pad to 16-bit boundary  pad to 32-bit boundary Calculate offset to widths data  Create the cache  LRU bytes per glyph  Image bytes per glyph  Load the header. Readshort() and readlong()              *
     * update buffer_position address as they read               read magic and version # font info get variable font data sizes # words of bitmap_t load a font with room for glyphs, limited to bufsize if not zero printf("\nfont_load_ex(%s, %d, %d)\n", path, buf_size, glyphs); load font struct f with file header  examine f and calc buffer size  check already loaded  already loaded, no need to reload  reload the font:
             * 1) save of refcont and id
             * 2) force unload (set refcount to 1 to make sure it get unloaded)
             * 3) reload with the larger buffer
             * 4) restore the id and refcount
              we couldn't even get the old size, this shouldn't happen  return error because we didn't satisfy the new buffer size printf("reusing handle %d for %s (count: %d)\n", font_id, path, pd->refcount);  allocate mem  load and init  trick to get a small cache for each file section   *
         * during glyph_cache_load()                           cached font: pf->fd stays open until the font is unloaded printf("%s -> [%d] -> %d\n", path, font_id, *handle); success!printf("freeing id: %d %s\n", font_id, core_get_name(*handle)); force unload  save the cache, but it keep it in-RAM so that cache lookups
         * can still succeed on the same font 
 * Return a pointer to an incore font structure.
 * If the requested font isn't loaded/compiled-in,
 * decrement the font number and try again.
 
 * Reads an entry into cache entry
  load via different fd to get this file section cached  load via different fd to get this file section cached 
 * Converts cbuf into a font cache
  maximum size of rotated bitmap  reserve one blank glyph that is guaranteed to be available, even
     * when the font file is closed during USB  Initialise cache 
 * Returns width of character
  check input range falls back to pf->maxwidth if !e  check input range the font handle is closed, but the cache is intact. Attempt
         * a lookup, which is very likely to succeed. Return a placeholder
         * glyph on miss (again, this is very unlikely  Could attempt to find a suitable fallback glyph from the same
             * font. For now just return blank space which is
             * reserved by cache_create() at buffer_start  This font is entirely in RAM  take full file name, cut extension, and add .glyphcache  call with NULL to flush  flush buffer & reset  save the char codes of the loaded glyphs to a file  if font specific file fails, try default  only read what fits  sort glyphs array to make sector cache happy  load font bitmaps  redo to fix lru order  load latin1 chars into cache  BOOTLOADER 
 * Bootloader only supports the built-in sysfont.
 
 * Returns width of character
  check input range check input range assume small font with uint16_t offsets BOOTLOADER 
 * Returns the stringsize of a given string. 
  get proportional width and glyph bits -----------------------------------------------------------------
 * vim: et sw=4 ts=8 sts=4 tw=78
 