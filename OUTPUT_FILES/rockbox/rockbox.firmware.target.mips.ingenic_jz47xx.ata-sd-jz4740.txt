**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Maurus Cuelenaere
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************static struct semaphore   sd_wakeup;#define SD_DMA_ENABLE#define DEBUG(x...)         logf(x) Error codes  Standard MMC/SD clock speeds  400 kHz for initial setup  24 MHz for SD Cards  48 MHz for SD Cards  Extra commands for state control  Use negative numbers to disambiguate  Proprietary commands, illegal/reserved according to SD Specification 2.00  class 1  adtc [31:0]  dadr       R1   class 3  adtc [31:0]  data addr  R1   class 4  adtc                    R1   adtc                    R1   class 9  bcr                     R5   Don't change the order of these; they are used in dispatch tables 
  MMC status in R1
  Type
    e : error bit
    s : status bit
    r : detected and set for the actual command response
    x : detected and set during command execution. the host must poll
        the card by sending status command in order to read these bits.
  Clear condition
    a : according to the card state
    b : always related to the previous command. Reception of
        a valid command will clear it (with a delay of one command)
    c : clear by read
  er, c  erx, c  er, c  er, c  ex, c  erx, c  sx, a  erx, c  er, b  er, b  ex, c  erx, c  erx, c  ex, c  ex, c  erx, c, CID/CSD overwrite  sx, c  sx, a  sr, c  sx, b (4 bits)  sx, a  sr, c  These are unpacked versions of the actual responses  Card Power up status bit  Slot index - used for CS lines  Command to send  Argument to send  Response type expected  Data transfer (these may be modified at the low level)  Number of blocks to transfer Block length  Data buffer  Data length, for PIO  Results  Buffer to store response - CRC is optional  Argument of OCR **********************************************************************
 *  SD Events
  No events  Rx data done  Tx data done  Programming is done *************************************************************************
 * Utility functions
 *************************************************************************if (r1->status & R1_CARD_IS_LOCKED)     return SD_ERROR_CARD_IS_LOCKED; This should be last - it's the least dangerous error  Save RCA returned by the SD Card  Stop the MMC clock and wait while it happens DEBUG("stop MMC clock");DEBUG("clock off time is %d microsec", timeout); Start the MMC clock and operation  Checking for response or data timeout  Checking for CRC error  Checking for FIFO empty if(status & MSC_STAT_DATA_FIFO_EMPTY && request->rtype != RESPONSE_NONE)
    {
        DEBUG("SD FIFO empty, MSC_STAT 0x%x", status);
        return SD_ERROR_UNDERRUN;
    } Obtain response to the command and store it to response buffer  flush dcache  setup dma channel  DMA source addr  DMA dest addr  DMA transfer count  DMA request type while (REG_DMAC_DTCR(DMA_SD_RX_CHANNEL)); clear status and disable channel  flush dcache  setup dma channel  DMA source addr  DMA dest addr  DMA transfer count  DMA request type  wait for dma completion  clear status and disable channel  SD_DMA_ENABLE  length in word  word aligned ?  Ready to read data  Read data from RXFIFO. It could be FULL or PARTIAL FULL  length in word  word aligned ?  Ready to write data  Write data to TXFIFO  Set the MMC clock frequency  select clock source from CPM *******************************************************************************************************************
** Name:      int jz_sd_exec_cmd()
** Function:  send command to the card, and get a response
** Input:     struct sd_request *req: SD request
** Output:    0:  right        >0:  error code
******************************************************************************************************************* Indicate we have no result yet  On reset, 1-bit bus width  Reset MMC/SD controller  On reset, drop SD clock down  On reset, stop SD clock  mask all interrupts REG_MSC_IMASK = 0xffff; clear status open interrupt  use 4-bit bus width when possible  Set command type and events  SD core extra command  Initialization sequence sent prior to command  bc - broadcast - no response  bcr - broadcast with response  adtc - addressed with data transfer  ac - no data transfer  Set response type  FALLTHRU  Set command index  Set argument  Set block length and nob  get SCR from DataFIFO  Set command  Start SD clock and send command to card  Wait for command completion __intc_unmask_irq(IRQ_MSC);semaphore_wait(&sd_wakeup, 100); clear flag  Check for status  Complete command with no response  Get response  Start data operation  SD card returns SCR register as data.
                   SD core expect it in the response buffer,
                   after normal response. __intc_unmask_irq(IRQ_MSC);semaphore_wait(&sd_wakeup, 100); Wait for Data Done  clear status  Wait for Prog Done event __intc_unmask_irq(IRQ_MSC);semaphore_wait(&sd_wakeup, 100); clear status  Command completed  Stop SD clock since we're done  return successfully ******************************************************************************************************************
** Name:      int sd_chkcard()
** Function:  check whether card is insert entirely
** Input:     NULL
** Output:    1: insert entirely    0: not insert entirely
******************************************************************************************************************* MSC interrupt handler semaphore_release(&sd_wakeup);******************************************************************************************************************
** Name:      void sd_hardware_init()
** Function:  initialize the hardware condiction that access sd card
** Input:     NULL
** Output:    NULL
******************************************************************************************************************* enable mmc clock  init GPIO  turn on power of card  reset mmc/sd controller  mask all IRQs  stop SD clock     __cpm_start_dmac();    __dmac_enable_module();      REG_DMAC_DMACR = DMAC_DMACR_DME; No response to parse  reset the card to idle Set the data bus width to 4 bits 
 * Fetches and decodes switch information
 
 * Test if the card supports high-speed mode and, if so, switch to it.
  Initialise card data as blank  reset mmc/sd controller  Give the card/controller some rest  disable SD clock         semaphore_init(&sd_wakeup, 1, 0); This is called only if the state was stable for 300ms - check state
     * and post appropriate event.  called on insertion/removal interrupt  lock-out card activity  Force card init for new card, re-init for re-inserted one or
         * clear if the last attempt to init failed with an error.  HAVE_HOTSWAP **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Maurus Cuelenaere
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************static struct semaphore   sd_wakeup;#define SD_DMA_ENABLE#define DEBUG(x...)         logf(x) Error codes  Standard MMC/SD clock speeds  400 kHz for initial setup  24 MHz for SD Cards  48 MHz for SD Cards  Extra commands for state control  Use negative numbers to disambiguate  Proprietary commands, illegal/reserved according to SD Specification 2.00  class 1  adtc [31:0]  dadr       R1   class 3  adtc [31:0]  data addr  R1   class 4  adtc                    R1   adtc                    R1   class 9  bcr                     R5   Don't change the order of these; they are used in dispatch tables 
  MMC status in R1
  Type
    e : error bit
    s : status bit
    r : detected and set for the actual command response
    x : detected and set during command execution. the host must poll
        the card by sending status command in order to read these bits.
  Clear condition
    a : according to the card state
    b : always related to the previous command. Reception of
        a valid command will clear it (with a delay of one command)
    c : clear by read
  er, c  erx, c  er, c  er, c  ex, c  erx, c  sx, a  erx, c  er, b  er, b  ex, c  erx, c  erx, c  ex, c  ex, c  erx, c, CID/CSD overwrite  sx, c  sx, a  sr, c  sx, b (4 bits)  sx, a  sr, c  These are unpacked versions of the actual responses  Card Power up status bit  Slot index - used for CS lines  Command to send  Argument to send  Response type expected  Data transfer (these may be modified at the low level)  Number of blocks to transfer Block length  Data buffer  Data length, for PIO  Results  Buffer to store response - CRC is optional  Argument of OCR **********************************************************************
 *  SD Events
  No events  Rx data done  Tx data done  Programming is done *************************************************************************
 * Utility functions
 *************************************************************************if (r1->status & R1_CARD_IS_LOCKED)     return SD_ERROR_CARD_IS_LOCKED; This should be last - it's the least dangerous error  Save RCA returned by the SD Card  Stop the MMC clock and wait while it happens DEBUG("stop MMC clock");DEBUG("clock off time is %d microsec", timeout); Start the MMC clock and operation  Checking for response or data timeout  Checking for CRC error  Checking for FIFO empty if(status & MSC_STAT_DATA_FIFO_EMPTY && request->rtype != RESPONSE_NONE)
    {
        DEBUG("SD FIFO empty, MSC_STAT 0x%x", status);
        return SD_ERROR_UNDERRUN;
    } Obtain response to the command and store it to response buffer  flush dcache  setup dma channel  DMA source addr  DMA dest addr  DMA transfer count  DMA request type while (REG_DMAC_DTCR(DMA_SD_RX_CHANNEL)); clear status and disable channel  flush dcache  setup dma channel  DMA source addr  DMA dest addr  DMA transfer count  DMA request type  wait for dma completion  clear status and disable channel  SD_DMA_ENABLE  length in word  word aligned ?  Ready to read data  Read data from RXFIFO. It could be FULL or PARTIAL FULL  length in word  word aligned ?  Ready to write data  Write data to TXFIFO  Set the MMC clock frequency  select clock source from CPM *******************************************************************************************************************
** Name:      int jz_sd_exec_cmd()
** Function:  send command to the card, and get a response
** Input:     struct sd_request *req: SD request
** Output:    0:  right        >0:  error code
******************************************************************************************************************* Indicate we have no result yet  On reset, 1-bit bus width  Reset MMC/SD controller  On reset, drop SD clock down  On reset, stop SD clock  mask all interrupts REG_MSC_IMASK = 0xffff; clear status open interrupt  use 4-bit bus width when possible  Set command type and events  SD core extra command  Initialization sequence sent prior to command  bc - broadcast - no response  bcr - broadcast with response  adtc - addressed with data transfer  ac - no data transfer  Set response type  FALLTHRU  Set command index  Set argument  Set block length and nob  get SCR from DataFIFO  Set command  Start SD clock and send command to card  Wait for command completion __intc_unmask_irq(IRQ_MSC);semaphore_wait(&sd_wakeup, 100); clear flag  Check for status  Complete command with no response  Get response  Start data operation  SD card returns SCR register as data.
                   SD core expect it in the response buffer,
                   after normal response. __intc_unmask_irq(IRQ_MSC);semaphore_wait(&sd_wakeup, 100); Wait for Data Done  clear status  Wait for Prog Done event __intc_unmask_irq(IRQ_MSC);semaphore_wait(&sd_wakeup, 100); clear status  Command completed  Stop SD clock since we're done  return successfully ******************************************************************************************************************
** Name:      int sd_chkcard()
** Function:  check whether card is insert entirely
** Input:     NULL
** Output:    1: insert entirely    0: not insert entirely
******************************************************************************************************************* MSC interrupt handler semaphore_release(&sd_wakeup);******************************************************************************************************************
** Name:      void sd_hardware_init()
** Function:  initialize the hardware condiction that access sd card
** Input:     NULL
** Output:    NULL
******************************************************************************************************************* enable mmc clock  init GPIO  turn on power of card  reset mmc/sd controller  mask all IRQs  stop SD clock     __cpm_start_dmac();    __dmac_enable_module();      REG_DMAC_DMACR = DMAC_DMACR_DME; No response to parse  reset the card to idle Set the data bus width to 4 bits 
 * Fetches and decodes switch information
 
 * Test if the card supports high-speed mode and, if so, switch to it.
  Initialise card data as blank  reset mmc/sd controller  Give the card/controller some rest  disable SD clock         semaphore_init(&sd_wakeup, 1, 0); This is called only if the state was stable for 300ms - check state
     * and post appropriate event.  called on insertion/removal interrupt  lock-out card activity  Force card init for new card, re-init for re-inserted one or
         * clear if the last attempt to init failed with an error.  HAVE_HOTSWAP **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Maurus Cuelenaere
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************static struct semaphore   sd_wakeup;#define SD_DMA_ENABLE#define DEBUG(x...)         logf(x) Error codes  Standard MMC/SD clock speeds  400 kHz for initial setup  24 MHz for SD Cards  48 MHz for SD Cards  Extra commands for state control  Use negative numbers to disambiguate  Proprietary commands, illegal/reserved according to SD Specification 2.00  class 1  adtc [31:0]  dadr       R1   class 3  adtc [31:0]  data addr  R1   class 4  adtc                    R1   adtc                    R1   class 9  bcr                     R5   Don't change the order of these; they are used in dispatch tables 
  MMC status in R1
  Type
    e : error bit
    s : status bit
    r : detected and set for the actual command response
    x : detected and set during command execution. the host must poll
        the card by sending status command in order to read these bits.
  Clear condition
    a : according to the card state
    b : always related to the previous command. Reception of
        a valid command will clear it (with a delay of one command)
    c : clear by read
  er, c  erx, c  er, c  er, c  ex, c  erx, c  sx, a  erx, c  er, b  er, b  ex, c  erx, c  erx, c  ex, c  ex, c  erx, c, CID/CSD overwrite  sx, c  sx, a  sr, c  sx, b (4 bits)  sx, a  sr, c  These are unpacked versions of the actual responses  Card Power up status bit  Slot index - used for CS lines  Command to send  Argument to send  Response type expected  Data transfer (these may be modified at the low level)  Number of blocks to transfer Block length  Data buffer  Data length, for PIO  Results  Buffer to store response - CRC is optional  Argument of OCR **********************************************************************
 *  SD Events
  No events  Rx data done  Tx data done  Programming is done *************************************************************************
 * Utility functions
 *************************************************************************if (r1->status & R1_CARD_IS_LOCKED)     return SD_ERROR_CARD_IS_LOCKED; This should be last - it's the least dangerous error  Save RCA returned by the SD Card  Stop the MMC clock and wait while it happens DEBUG("stop MMC clock");DEBUG("clock off time is %d microsec", timeout); Start the MMC clock and operation  Checking for response or data timeout  Checking for CRC error  Checking for FIFO empty if(status & MSC_STAT_DATA_FIFO_EMPTY && request->rtype != RESPONSE_NONE)
    {
        DEBUG("SD FIFO empty, MSC_STAT 0x%x", status);
        return SD_ERROR_UNDERRUN;
    } Obtain response to the command and store it to response buffer  flush dcache  setup dma channel  DMA source addr  DMA dest addr  DMA transfer count  DMA request type while (REG_DMAC_DTCR(DMA_SD_RX_CHANNEL)); clear status and disable channel  flush dcache  setup dma channel  DMA source addr  DMA dest addr  DMA transfer count  DMA request type  wait for dma completion  clear status and disable channel  SD_DMA_ENABLE  length in word  word aligned ?  Ready to read data  Read data from RXFIFO. It could be FULL or PARTIAL FULL  length in word  word aligned ?  Ready to write data  Write data to TXFIFO  Set the MMC clock frequency  select clock source from CPM *******************************************************************************************************************
** Name:      int jz_sd_exec_cmd()
** Function:  send command to the card, and get a response
** Input:     struct sd_request *req: SD request
** Output:    0:  right        >0:  error code
******************************************************************************************************************* Indicate we have no result yet  On reset, 1-bit bus width  Reset MMC/SD controller  On reset, drop SD clock down  On reset, stop SD clock  mask all interrupts REG_MSC_IMASK = 0xffff; clear status open interrupt  use 4-bit bus width when possible  Set command type and events  SD core extra command  Initialization sequence sent prior to command  bc - broadcast - no response  bcr - broadcast with response  adtc - addressed with data transfer  ac - no data transfer  Set response type  FALLTHRU  Set command index  Set argument  Set block length and nob  get SCR from DataFIFO  Set command  Start SD clock and send command to card  Wait for command completion __intc_unmask_irq(IRQ_MSC);semaphore_wait(&sd_wakeup, 100); clear flag  Check for status  Complete command with no response  Get response  Start data operation  SD card returns SCR register as data.
                   SD core expect it in the response buffer,
                   after normal response. __intc_unmask_irq(IRQ_MSC);semaphore_wait(&sd_wakeup, 100); Wait for Data Done  clear status  Wait for Prog Done event __intc_unmask_irq(IRQ_MSC);semaphore_wait(&sd_wakeup, 100); clear status  Command completed  Stop SD clock since we're done  return successfully ******************************************************************************************************************
** Name:      int sd_chkcard()
** Function:  check whether card is insert entirely
** Input:     NULL
** Output:    1: insert entirely    0: not insert entirely
******************************************************************************************************************* MSC interrupt handler semaphore_release(&sd_wakeup);******************************************************************************************************************
** Name:      void sd_hardware_init()
** Function:  initialize the hardware condiction that access sd card
** Input:     NULL
** Output:    NULL
******************************************************************************************************************* enable mmc clock  init GPIO  turn on power of card  reset mmc/sd controller  mask all IRQs  stop SD clock     __cpm_start_dmac();    __dmac_enable_module();      REG_DMAC_DMACR = DMAC_DMACR_DME; No response to parse  reset the card to idle Set the data bus width to 4 bits 
 * Fetches and decodes switch information
 
 * Test if the card supports high-speed mode and, if so, switch to it.
  Initialise card data as blank  reset mmc/sd controller  Give the card/controller some rest  disable SD clock         semaphore_init(&sd_wakeup, 1, 0); This is called only if the state was stable for 300ms - check state
     * and post appropriate event.  called on insertion/removal interrupt  lock-out card activity  Force card init for new card, re-init for re-inserted one or
         * clear if the last attempt to init failed with an error.  HAVE_HOTSWAP 