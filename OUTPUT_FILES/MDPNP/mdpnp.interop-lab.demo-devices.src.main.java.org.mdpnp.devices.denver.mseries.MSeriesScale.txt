Will map to DDS time via default implementation*
	 * These patterns match the formats given in the documentation for the balance,
	 * and/or formats in Dave Arney's kindly supplied sample file (that in fact, didn't
	 * match any of the formats given in the docs).  The documented formats are
	 * 
	 * Output can be in one of the following forms:
		<table>
		<tr><th>Stable</th><th>Unstable</th></tr>
		<tr><td>1 + 0000.0002</td><td>U + 0000.0002</td></tr>
		<tr><td>S + 0000.0003g</td><td>SD + 0000.0003g</td></tr>
		<tr><td>ST + 0000.0003</td><td>US + 000.0003</td></tr>
		<tr><td>+ 0000.0003</td><td>+ 000.0003</td></tr>
		<tr><td>+ 0000.0003 grams</td><td>+ 0000.0003 unstable</td></tr>
		<tr><td>12.4 g</td><td>&lt;--This came from Dave's sample</td></tr>
		</table>
		The output string is terminated with a &lt;cr&gt;&lt;If&gt;.
	 *
			 * a number, zero to four times, followed by a decimal point, followed by zero or one spaces, followed by zero or one letter g
			 * This pattern can actually handle all possible Stable forms.  See the Javadoc for getFloatFromLine to understand how.
			 TODO - array of Matcher as well?Do we not have a better built in ticking clock somewhere? TODO Auto-generated method stub TODO Auto-generated method stub TODO Auto-generated method stubObviously this is a VERY large number, but since we have no negotiation etc...We don't need to do any output - we just read the input stream as CR/LF terminated lines.Publish a metric...*
	 * 
	 * The one regexp we have can be used to handle all known cases of stable input.
	 * This works because the start() and end() methods on the matcher allow us to
	 * trim the input value down the matched segment, and then do replacements of any
	 * space characters, plus characters and the g character  So, for<br/>
	 * 
	 * 1 + 0000.0002 the trimmed match is 0000.0002 , from which we can make a float<br/>
	 * S + 0000.0003g the trimmed match is 0000.0003g, from which we can replace the g and make a float<br/>
	 * ST + 0000.0003 the trimmed match is 0000.0003, from which we can make a float<br/>
	 * + 0000.0003 the trimmed match is 0000.0003, from which we can make a float<br/>
	 * + 0000.0003 grams the trimmed match is 0000.0003 g, from which we can replace the space and the g and make a float<br/>
	 * 12.9 g the trimmed match is 12.9 g, from which we can replace the space and the g and make a float</br>
	 *
	 * @param line
	 * @return float value from line
	 System.out.println("It's a match...");More than one match....replaceAll("[A-z]", "")Will map to DDS time via default implementation*
	 * These patterns match the formats given in the documentation for the balance,
	 * and/or formats in Dave Arney's kindly supplied sample file (that in fact, didn't
	 * match any of the formats given in the docs).  The documented formats are
	 * 
	 * Output can be in one of the following forms:
		<table>
		<tr><th>Stable</th><th>Unstable</th></tr>
		<tr><td>1 + 0000.0002</td><td>U + 0000.0002</td></tr>
		<tr><td>S + 0000.0003g</td><td>SD + 0000.0003g</td></tr>
		<tr><td>ST + 0000.0003</td><td>US + 000.0003</td></tr>
		<tr><td>+ 0000.0003</td><td>+ 000.0003</td></tr>
		<tr><td>+ 0000.0003 grams</td><td>+ 0000.0003 unstable</td></tr>
		<tr><td>12.4 g</td><td>&lt;--This came from Dave's sample</td></tr>
		</table>
		The output string is terminated with a &lt;cr&gt;&lt;If&gt;.
	 *
			 * a number, zero to four times, followed by a decimal point, followed by zero or one spaces, followed by zero or one letter g
			 * This pattern can actually handle all possible Stable forms.  See the Javadoc for getFloatFromLine to understand how.
			 TODO - array of Matcher as well?Do we not have a better built in ticking clock somewhere? TODO Auto-generated method stub TODO Auto-generated method stub TODO Auto-generated method stubObviously this is a VERY large number, but since we have no negotiation etc...We don't need to do any output - we just read the input stream as CR/LF terminated lines.Publish a metric...*
	 * 
	 * The one regexp we have can be used to handle all known cases of stable input.
	 * This works because the start() and end() methods on the matcher allow us to
	 * trim the input value down the matched segment, and then do replacements of any
	 * space characters, plus characters and the g character  So, for<br/>
	 * 
	 * 1 + 0000.0002 the trimmed match is 0000.0002 , from which we can make a float<br/>
	 * S + 0000.0003g the trimmed match is 0000.0003g, from which we can replace the g and make a float<br/>
	 * ST + 0000.0003 the trimmed match is 0000.0003, from which we can make a float<br/>
	 * + 0000.0003 the trimmed match is 0000.0003, from which we can make a float<br/>
	 * + 0000.0003 grams the trimmed match is 0000.0003 g, from which we can replace the space and the g and make a float<br/>
	 * 12.9 g the trimmed match is 12.9 g, from which we can replace the space and the g and make a float</br>
	 *
	 * @param line
	 * @return float value from line
	 System.out.println("It's a match...");More than one match....replaceAll("[A-z]", "")Will map to DDS time via default implementation*
	 * These patterns match the formats given in the documentation for the balance,
	 * and/or formats in Dave Arney's kindly supplied sample file (that in fact, didn't
	 * match any of the formats given in the docs).  The documented formats are
	 * 
	 * Output can be in one of the following forms:
		<table>
		<tr><th>Stable</th><th>Unstable</th></tr>
		<tr><td>1 + 0000.0002</td><td>U + 0000.0002</td></tr>
		<tr><td>S + 0000.0003g</td><td>SD + 0000.0003g</td></tr>
		<tr><td>ST + 0000.0003</td><td>US + 000.0003</td></tr>
		<tr><td>+ 0000.0003</td><td>+ 000.0003</td></tr>
		<tr><td>+ 0000.0003 grams</td><td>+ 0000.0003 unstable</td></tr>
		<tr><td>12.4 g</td><td>&lt;--This came from Dave's sample</td></tr>
		</table>
		The output string is terminated with a &lt;cr&gt;&lt;If&gt;.
	 *
			 * a number, zero to four times, followed by a decimal point, followed by zero or one spaces, followed by zero or one letter g
			 * This pattern can actually handle all possible Stable forms.  See the Javadoc for getFloatFromLine to understand how.
			 TODO - array of Matcher as well?Do we not have a better built in ticking clock somewhere? TODO Auto-generated method stub TODO Auto-generated method stub TODO Auto-generated method stubObviously this is a VERY large number, but since we have no negotiation etc...We don't need to do any output - we just read the input stream as CR/LF terminated lines.Publish a metric...*
	 * 
	 * The one regexp we have can be used to handle all known cases of stable input.
	 * This works because the start() and end() methods on the matcher allow us to
	 * trim the input value down the matched segment, and then do replacements of any
	 * space characters, plus characters and the g character  So, for<br/>
	 * 
	 * 1 + 0000.0002 the trimmed match is 0000.0002 , from which we can make a float<br/>
	 * S + 0000.0003g the trimmed match is 0000.0003g, from which we can replace the g and make a float<br/>
	 * ST + 0000.0003 the trimmed match is 0000.0003, from which we can make a float<br/>
	 * + 0000.0003 the trimmed match is 0000.0003, from which we can make a float<br/>
	 * + 0000.0003 grams the trimmed match is 0000.0003 g, from which we can replace the space and the g and make a float<br/>
	 * 12.9 g the trimmed match is 12.9 g, from which we can replace the space and the g and make a float</br>
	 *
	 * @param line
	 * @return float value from line
	 System.out.println("It's a match...");More than one match....replaceAll("[A-z]", "")Will map to DDS time via default implementation*
	 * These patterns match the formats given in the documentation for the balance,
	 * and/or formats in Dave Arney's kindly supplied sample file (that in fact, didn't
	 * match any of the formats given in the docs).  The documented formats are
	 * 
	 * Output can be in one of the following forms:
		<table>
		<tr><th>Stable</th><th>Unstable</th></tr>
		<tr><td>1 + 0000.0002</td><td>U + 0000.0002</td></tr>
		<tr><td>S + 0000.0003g</td><td>SD + 0000.0003g</td></tr>
		<tr><td>ST + 0000.0003</td><td>US + 000.0003</td></tr>
		<tr><td>+ 0000.0003</td><td>+ 000.0003</td></tr>
		<tr><td>+ 0000.0003 grams</td><td>+ 0000.0003 unstable</td></tr>
		<tr><td>12.4 g</td><td>&lt;--This came from Dave's sample</td></tr>
		</table>
		The output string is terminated with a &lt;cr&gt;&lt;If&gt;.
	 *
			 * a number, zero to four times, followed by a decimal point, followed by zero or one spaces, followed by zero or one letter g
			 * This pattern can actually handle all possible Stable forms.  See the Javadoc for getFloatFromLine to understand how.
			 TODO - array of Matcher as well?Do we not have a better built in ticking clock somewhere? TODO Auto-generated method stub TODO Auto-generated method stub TODO Auto-generated method stubObviously this is a VERY large number, but since we have no negotiation etc...We don't need to do any output - we just read the input stream as CR/LF terminated lines.Publish a metric...*
	 * 
	 * The one regexp we have can be used to handle all known cases of stable input.
	 * This works because the start() and end() methods on the matcher allow us to
	 * trim the input value down the matched segment, and then do replacements of any
	 * space characters, plus characters and the g character  So, for<br/>
	 * 
	 * 1 + 0000.0002 the trimmed match is 0000.0002 , from which we can make a float<br/>
	 * S + 0000.0003g the trimmed match is 0000.0003g, from which we can replace the g and make a float<br/>
	 * ST + 0000.0003 the trimmed match is 0000.0003, from which we can make a float<br/>
	 * + 0000.0003 the trimmed match is 0000.0003, from which we can make a float<br/>
	 * + 0000.0003 grams the trimmed match is 0000.0003 g, from which we can replace the space and the g and make a float<br/>
	 * 12.9 g the trimmed match is 12.9 g, from which we can replace the space and the g and make a float</br>
	 *
	 * @param line
	 * @return float value from line
	 System.out.println("It's a match...");More than one match....replaceAll("[A-z]", "")Will map to DDS time via default implementation*
	 * These patterns match the formats given in the documentation for the balance,
	 * and/or formats in Dave Arney's kindly supplied sample file (that in fact, didn't
	 * match any of the formats given in the docs).  The documented formats are
	 * 
	 * Output can be in one of the following forms:
		<table>
		<tr><th>Stable</th><th>Unstable</th></tr>
		<tr><td>1 + 0000.0002</td><td>U + 0000.0002</td></tr>
		<tr><td>S + 0000.0003g</td><td>SD + 0000.0003g</td></tr>
		<tr><td>ST + 0000.0003</td><td>US + 000.0003</td></tr>
		<tr><td>+ 0000.0003</td><td>+ 000.0003</td></tr>
		<tr><td>+ 0000.0003 grams</td><td>+ 0000.0003 unstable</td></tr>
		<tr><td>12.4 g</td><td>&lt;--This came from Dave's sample</td></tr>
		</table>
		The output string is terminated with a &lt;cr&gt;&lt;If&gt;.
	 *
			 * a number, zero to four times, followed by a decimal point, followed by zero or one spaces, followed by zero or one letter g
			 * This pattern can actually handle all possible Stable forms.  See the Javadoc for getFloatFromLine to understand how.
			 TODO - array of Matcher as well?Do we not have a better built in ticking clock somewhere? TODO Auto-generated method stub TODO Auto-generated method stub TODO Auto-generated method stubObviously this is a VERY large number, but since we have no negotiation etc...We don't need to do any output - we just read the input stream as CR/LF terminated lines.Publish a metric...*
	 * 
	 * The one regexp we have can be used to handle all known cases of stable input.
	 * This works because the start() and end() methods on the matcher allow us to
	 * trim the input value down the matched segment, and then do replacements of any
	 * space characters, plus characters and the g character  So, for<br/>
	 * 
	 * 1 + 0000.0002 the trimmed match is 0000.0002 , from which we can make a float<br/>
	 * S + 0000.0003g the trimmed match is 0000.0003g, from which we can replace the g and make a float<br/>
	 * ST + 0000.0003 the trimmed match is 0000.0003, from which we can make a float<br/>
	 * + 0000.0003 the trimmed match is 0000.0003, from which we can make a float<br/>
	 * + 0000.0003 grams the trimmed match is 0000.0003 g, from which we can replace the space and the g and make a float<br/>
	 * 12.9 g the trimmed match is 12.9 g, from which we can replace the space and the g and make a float</br>
	 *
	 * @param line
	 * @return float value from line
	 System.out.println("It's a match...");More than one match....replaceAll("[A-z]", "")Will map to DDS time via default implementation*
	 * These patterns match the formats given in the documentation for the balance,
	 * and/or formats in Dave Arney's kindly supplied sample file (that in fact, didn't
	 * match any of the formats given in the docs).  The documented formats are
	 * 
	 * Output can be in one of the following forms:
		<table>
		<tr><th>Stable</th><th>Unstable</th></tr>
		<tr><td>1 + 0000.0002</td><td>U + 0000.0002</td></tr>
		<tr><td>S + 0000.0003g</td><td>SD + 0000.0003g</td></tr>
		<tr><td>ST + 0000.0003</td><td>US + 000.0003</td></tr>
		<tr><td>+ 0000.0003</td><td>+ 000.0003</td></tr>
		<tr><td>+ 0000.0003 grams</td><td>+ 0000.0003 unstable</td></tr>
		<tr><td>12.4 g</td><td>&lt;--This came from Dave's sample</td></tr>
		</table>
		The output string is terminated with a &lt;cr&gt;&lt;If&gt;.
	 *
			 * a number, zero to four times, followed by a decimal point, followed by zero or one spaces, followed by zero or one letter g
			 * This pattern can actually handle all possible Stable forms.  See the Javadoc for getFloatFromLine to understand how.
			 TODO - array of Matcher as well?Do we not have a better built in ticking clock somewhere? TODO Auto-generated method stub TODO Auto-generated method stub TODO Auto-generated method stubObviously this is a VERY large number, but since we have no negotiation etc...We don't need to do any output - we just read the input stream as CR/LF terminated lines.Publish a metric...*
	 * 
	 * The one regexp we have can be used to handle all known cases of stable input.
	 * This works because the start() and end() methods on the matcher allow us to
	 * trim the input value down the matched segment, and then do replacements of any
	 * space characters, plus characters and the g character  So, for<br/>
	 * 
	 * 1 + 0000.0002 the trimmed match is 0000.0002 , from which we can make a float<br/>
	 * S + 0000.0003g the trimmed match is 0000.0003g, from which we can replace the g and make a float<br/>
	 * ST + 0000.0003 the trimmed match is 0000.0003, from which we can make a float<br/>
	 * + 0000.0003 the trimmed match is 0000.0003, from which we can make a float<br/>
	 * + 0000.0003 grams the trimmed match is 0000.0003 g, from which we can replace the space and the g and make a float<br/>
	 * 12.9 g the trimmed match is 12.9 g, from which we can replace the space and the g and make a float</br>
	 *
	 * @param line
	 * @return float value from line
	 System.out.println("It's a match...");More than one match....replaceAll("[A-z]", "")Will map to DDS time via default implementation*
	 * These patterns match the formats given in the documentation for the balance,
	 * and/or formats in Dave Arney's kindly supplied sample file (that in fact, didn't
	 * match any of the formats given in the docs).  The documented formats are
	 * 
	 * Output can be in one of the following forms:
		<table>
		<tr><th>Stable</th><th>Unstable</th></tr>
		<tr><td>1 + 0000.0002</td><td>U + 0000.0002</td></tr>
		<tr><td>S + 0000.0003g</td><td>SD + 0000.0003g</td></tr>
		<tr><td>ST + 0000.0003</td><td>US + 000.0003</td></tr>
		<tr><td>+ 0000.0003</td><td>+ 000.0003</td></tr>
		<tr><td>+ 0000.0003 grams</td><td>+ 0000.0003 unstable</td></tr>
		<tr><td>12.4 g</td><td>&lt;--This came from Dave's sample</td></tr>
		</table>
		The output string is terminated with a &lt;cr&gt;&lt;If&gt;.
	 *
			 * a number, zero to four times, followed by a decimal point, followed by zero or one spaces, followed by zero or one letter g
			 * This pattern can actually handle all possible Stable forms.  See the Javadoc for getFloatFromLine to understand how.
			 TODO - array of Matcher as well?Do we not have a better built in ticking clock somewhere? TODO Auto-generated method stub TODO Auto-generated method stub TODO Auto-generated method stubObviously this is a VERY large number, but since we have no negotiation etc...We don't need to do any output - we just read the input stream as CR/LF terminated lines.Publish a metric...*
	 * 
	 * The one regexp we have can be used to handle all known cases of stable input.
	 * This works because the start() and end() methods on the matcher allow us to
	 * trim the input value down the matched segment, and then do replacements of any
	 * space characters, plus characters and the g character  So, for<br/>
	 * 
	 * 1 + 0000.0002 the trimmed match is 0000.0002 , from which we can make a float<br/>
	 * S + 0000.0003g the trimmed match is 0000.0003g, from which we can replace the g and make a float<br/>
	 * ST + 0000.0003 the trimmed match is 0000.0003, from which we can make a float<br/>
	 * + 0000.0003 the trimmed match is 0000.0003, from which we can make a float<br/>
	 * + 0000.0003 grams the trimmed match is 0000.0003 g, from which we can replace the space and the g and make a float<br/>
	 * 12.9 g the trimmed match is 12.9 g, from which we can replace the space and the g and make a float</br>
	 *
	 * @param line
	 * @return float value from line
	 System.out.println("It's a match...");More than one match....replaceAll("[A-z]", "")