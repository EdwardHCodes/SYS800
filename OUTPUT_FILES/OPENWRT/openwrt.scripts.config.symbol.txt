 SPDX-License-Identifier: GPL-2.0
 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>
  any prompt visible? 
		 * Tristate choice_values with visibility 'mod' are
		 * not visible if the corresponding choice's value is
		 * 'yes'.
		  defaulting to "yes" if no explicit "depends on" are given 
 * Find the default symbol for a choice.
 * First try the default values for the choice symbol
 * Next locate the first visible choice value
 * Return NULL if none was found
  any of the defaults visible?  just get the first visible value  failed to locate any defaults  first calculate all choice values' visibilities  is the user choice visible?  no choice? reset tristate value  set default if recursively called  if the symbol is visible use the user value
				 * if available, otherwise try the default value
				 
	 * setting a choice value also resets the new flag of the choice
	 * symbol and all other choice values.
	 
 * Find the default value associated to a symbol.
 * For tristate symbol handle the modules=n case
 * in which case "m" becomes "y".
 * If the symbol does not have any default then fallback
 * to the fixed default values.
  If symbol has a default value look it up  The visibility may limit the value from yes => mod 
			 * The following fails to handle the situation
			 * where a default value is further limited by
			 * the valid range.
			  Handle select statements  transpose mod to yes if modules are not enabled  transpose mod to yes if type is bool  adjust the default value if this symbol is implied by another  fnv32 hash  Compare matched symbols as thus:
 * - first, symbols that match exactly
 * - then, alphabetical sort
  Exact match:
	 * - if matched length on symbol s1 is the length of that symbol,
	 *   then this symbol should come first;
	 * - if matched length on symbol s2 is the length of that symbol,
	 *   then this symbol should come first.
	 * Note: since the search can be a regexp, both symbols may match
	 * exactly; if this is the case, we can't decide which comes first,
	 * and we fallback to sorting alphabetically.
	  As a fallback, sort symbols alphabetically  Skip if empty  As regexec returned 0, we know we have a match, so
		 * we can use match[0].rm_[se]o without further checks
		  sym_match_arr can be NULL if no match, but free(NULL) is OK 
 * When we check for recursive dependencies we use a stack to save
 * current state so we can print out relevant info to user.
 * The entries are located on the call stack so no need to free memory.
 * Note insert() remove() must always match to properly clear the stack.
 
 * Called when we have detected a recursive dependency.
 * check_top point to the top of the stact so we use
 * the ->prev pointer to locate the bottom of the stack.
  for choice values find the menu entry (used below)  return NULL when dependencies are OK  for choice groups start the check with main choice symbol  SPDX-License-Identifier: GPL-2.0
 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>
  any prompt visible? 
		 * Tristate choice_values with visibility 'mod' are
		 * not visible if the corresponding choice's value is
		 * 'yes'.
		  defaulting to "yes" if no explicit "depends on" are given 
 * Find the default symbol for a choice.
 * First try the default values for the choice symbol
 * Next locate the first visible choice value
 * Return NULL if none was found
  any of the defaults visible?  just get the first visible value  failed to locate any defaults  first calculate all choice values' visibilities  is the user choice visible?  no choice? reset tristate value  set default if recursively called  if the symbol is visible use the user value
				 * if available, otherwise try the default value
				 
	 * setting a choice value also resets the new flag of the choice
	 * symbol and all other choice values.
	 
 * Find the default value associated to a symbol.
 * For tristate symbol handle the modules=n case
 * in which case "m" becomes "y".
 * If the symbol does not have any default then fallback
 * to the fixed default values.
  If symbol has a default value look it up  The visibility may limit the value from yes => mod 
			 * The following fails to handle the situation
			 * where a default value is further limited by
			 * the valid range.
			  Handle select statements  transpose mod to yes if modules are not enabled  transpose mod to yes if type is bool  adjust the default value if this symbol is implied by another  fnv32 hash  Compare matched symbols as thus:
 * - first, symbols that match exactly
 * - then, alphabetical sort
  Exact match:
	 * - if matched length on symbol s1 is the length of that symbol,
	 *   then this symbol should come first;
	 * - if matched length on symbol s2 is the length of that symbol,
	 *   then this symbol should come first.
	 * Note: since the search can be a regexp, both symbols may match
	 * exactly; if this is the case, we can't decide which comes first,
	 * and we fallback to sorting alphabetically.
	  As a fallback, sort symbols alphabetically  Skip if empty  As regexec returned 0, we know we have a match, so
		 * we can use match[0].rm_[se]o without further checks
		  sym_match_arr can be NULL if no match, but free(NULL) is OK 
 * When we check for recursive dependencies we use a stack to save
 * current state so we can print out relevant info to user.
 * The entries are located on the call stack so no need to free memory.
 * Note insert() remove() must always match to properly clear the stack.
 
 * Called when we have detected a recursive dependency.
 * check_top point to the top of the stact so we use
 * the ->prev pointer to locate the bottom of the stack.
  for choice values find the menu entry (used below)  return NULL when dependencies are OK  for choice groups start the check with main choice symbol  SPDX-License-Identifier: GPL-2.0
 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>
  any prompt visible? 
		 * Tristate choice_values with visibility 'mod' are
		 * not visible if the corresponding choice's value is
		 * 'yes'.
		  defaulting to "yes" if no explicit "depends on" are given 
 * Find the default symbol for a choice.
 * First try the default values for the choice symbol
 * Next locate the first visible choice value
 * Return NULL if none was found
  any of the defaults visible?  just get the first visible value  failed to locate any defaults  first calculate all choice values' visibilities  is the user choice visible?  no choice? reset tristate value  set default if recursively called  if the symbol is visible use the user value
				 * if available, otherwise try the default value
				 
	 * setting a choice value also resets the new flag of the choice
	 * symbol and all other choice values.
	 
 * Find the default value associated to a symbol.
 * For tristate symbol handle the modules=n case
 * in which case "m" becomes "y".
 * If the symbol does not have any default then fallback
 * to the fixed default values.
  If symbol has a default value look it up  The visibility may limit the value from yes => mod 
			 * The following fails to handle the situation
			 * where a default value is further limited by
			 * the valid range.
			  Handle select statements  transpose mod to yes if modules are not enabled  transpose mod to yes if type is bool  adjust the default value if this symbol is implied by another  fnv32 hash  Compare matched symbols as thus:
 * - first, symbols that match exactly
 * - then, alphabetical sort
  Exact match:
	 * - if matched length on symbol s1 is the length of that symbol,
	 *   then this symbol should come first;
	 * - if matched length on symbol s2 is the length of that symbol,
	 *   then this symbol should come first.
	 * Note: since the search can be a regexp, both symbols may match
	 * exactly; if this is the case, we can't decide which comes first,
	 * and we fallback to sorting alphabetically.
	  As a fallback, sort symbols alphabetically  Skip if empty  As regexec returned 0, we know we have a match, so
		 * we can use match[0].rm_[se]o without further checks
		  sym_match_arr can be NULL if no match, but free(NULL) is OK 
 * When we check for recursive dependencies we use a stack to save
 * current state so we can print out relevant info to user.
 * The entries are located on the call stack so no need to free memory.
 * Note insert() remove() must always match to properly clear the stack.
 
 * Called when we have detected a recursive dependency.
 * check_top point to the top of the stact so we use
 * the ->prev pointer to locate the bottom of the stack.
  for choice values find the menu entry (used below)  return NULL when dependencies are OK  for choice groups start the check with main choice symbol  SPDX-License-Identifier: GPL-2.0
 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>
  any prompt visible? 
		 * Tristate choice_values with visibility 'mod' are
		 * not visible if the corresponding choice's value is
		 * 'yes'.
		  defaulting to "yes" if no explicit "depends on" are given 
 * Find the default symbol for a choice.
 * First try the default values for the choice symbol
 * Next locate the first visible choice value
 * Return NULL if none was found
  any of the defaults visible?  just get the first visible value  failed to locate any defaults  first calculate all choice values' visibilities  is the user choice visible?  no choice? reset tristate value  set default if recursively called  if the symbol is visible use the user value
				 * if available, otherwise try the default value
				 
	 * setting a choice value also resets the new flag of the choice
	 * symbol and all other choice values.
	 
 * Find the default value associated to a symbol.
 * For tristate symbol handle the modules=n case
 * in which case "m" becomes "y".
 * If the symbol does not have any default then fallback
 * to the fixed default values.
  If symbol has a default value look it up  The visibility may limit the value from yes => mod 
			 * The following fails to handle the situation
			 * where a default value is further limited by
			 * the valid range.
			  Handle select statements  transpose mod to yes if modules are not enabled  transpose mod to yes if type is bool  adjust the default value if this symbol is implied by another  fnv32 hash  Compare matched symbols as thus:
 * - first, symbols that match exactly
 * - then, alphabetical sort
  Exact match:
	 * - if matched length on symbol s1 is the length of that symbol,
	 *   then this symbol should come first;
	 * - if matched length on symbol s2 is the length of that symbol,
	 *   then this symbol should come first.
	 * Note: since the search can be a regexp, both symbols may match
	 * exactly; if this is the case, we can't decide which comes first,
	 * and we fallback to sorting alphabetically.
	  As a fallback, sort symbols alphabetically  Skip if empty  As regexec returned 0, we know we have a match, so
		 * we can use match[0].rm_[se]o without further checks
		  sym_match_arr can be NULL if no match, but free(NULL) is OK 
 * When we check for recursive dependencies we use a stack to save
 * current state so we can print out relevant info to user.
 * The entries are located on the call stack so no need to free memory.
 * Note insert() remove() must always match to properly clear the stack.
 
 * Called when we have detected a recursive dependency.
 * check_top point to the top of the stact so we use
 * the ->prev pointer to locate the bottom of the stack.
  for choice values find the menu entry (used below)  return NULL when dependencies are OK  for choice groups start the check with main choice symbol  SPDX-License-Identifier: GPL-2.0
 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>
  any prompt visible? 
		 * Tristate choice_values with visibility 'mod' are
		 * not visible if the corresponding choice's value is
		 * 'yes'.
		  defaulting to "yes" if no explicit "depends on" are given 
 * Find the default symbol for a choice.
 * First try the default values for the choice symbol
 * Next locate the first visible choice value
 * Return NULL if none was found
  any of the defaults visible?  just get the first visible value  failed to locate any defaults  first calculate all choice values' visibilities  is the user choice visible?  no choice? reset tristate value  set default if recursively called  if the symbol is visible use the user value
				 * if available, otherwise try the default value
				 
	 * setting a choice value also resets the new flag of the choice
	 * symbol and all other choice values.
	 
 * Find the default value associated to a symbol.
 * For tristate symbol handle the modules=n case
 * in which case "m" becomes "y".
 * If the symbol does not have any default then fallback
 * to the fixed default values.
  If symbol has a default value look it up  The visibility may limit the value from yes => mod 
			 * The following fails to handle the situation
			 * where a default value is further limited by
			 * the valid range.
			  Handle select statements  transpose mod to yes if modules are not enabled  transpose mod to yes if type is bool  adjust the default value if this symbol is implied by another  fnv32 hash  Compare matched symbols as thus:
 * - first, symbols that match exactly
 * - then, alphabetical sort
  Exact match:
	 * - if matched length on symbol s1 is the length of that symbol,
	 *   then this symbol should come first;
	 * - if matched length on symbol s2 is the length of that symbol,
	 *   then this symbol should come first.
	 * Note: since the search can be a regexp, both symbols may match
	 * exactly; if this is the case, we can't decide which comes first,
	 * and we fallback to sorting alphabetically.
	  As a fallback, sort symbols alphabetically  Skip if empty  As regexec returned 0, we know we have a match, so
		 * we can use match[0].rm_[se]o without further checks
		  sym_match_arr can be NULL if no match, but free(NULL) is OK 
 * When we check for recursive dependencies we use a stack to save
 * current state so we can print out relevant info to user.
 * The entries are located on the call stack so no need to free memory.
 * Note insert() remove() must always match to properly clear the stack.
 
 * Called when we have detected a recursive dependency.
 * check_top point to the top of the stact so we use
 * the ->prev pointer to locate the bottom of the stack.
  for choice values find the menu entry (used below)  return NULL when dependencies are OK  for choice groups start the check with main choice symbol  SPDX-License-Identifier: GPL-2.0
 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>
  any prompt visible? 
		 * Tristate choice_values with visibility 'mod' are
		 * not visible if the corresponding choice's value is
		 * 'yes'.
		  defaulting to "yes" if no explicit "depends on" are given 
 * Find the default symbol for a choice.
 * First try the default values for the choice symbol
 * Next locate the first visible choice value
 * Return NULL if none was found
  any of the defaults visible?  just get the first visible value  failed to locate any defaults  first calculate all choice values' visibilities  is the user choice visible?  no choice? reset tristate value  set default if recursively called  if the symbol is visible use the user value
				 * if available, otherwise try the default value
				 
	 * setting a choice value also resets the new flag of the choice
	 * symbol and all other choice values.
	 
 * Find the default value associated to a symbol.
 * For tristate symbol handle the modules=n case
 * in which case "m" becomes "y".
 * If the symbol does not have any default then fallback
 * to the fixed default values.
  If symbol has a default value look it up  The visibility may limit the value from yes => mod 
			 * The following fails to handle the situation
			 * where a default value is further limited by
			 * the valid range.
			  Handle select statements  transpose mod to yes if modules are not enabled  transpose mod to yes if type is bool  adjust the default value if this symbol is implied by another  fnv32 hash  Compare matched symbols as thus:
 * - first, symbols that match exactly
 * - then, alphabetical sort
  Exact match:
	 * - if matched length on symbol s1 is the length of that symbol,
	 *   then this symbol should come first;
	 * - if matched length on symbol s2 is the length of that symbol,
	 *   then this symbol should come first.
	 * Note: since the search can be a regexp, both symbols may match
	 * exactly; if this is the case, we can't decide which comes first,
	 * and we fallback to sorting alphabetically.
	  As a fallback, sort symbols alphabetically  Skip if empty  As regexec returned 0, we know we have a match, so
		 * we can use match[0].rm_[se]o without further checks
		  sym_match_arr can be NULL if no match, but free(NULL) is OK 
 * When we check for recursive dependencies we use a stack to save
 * current state so we can print out relevant info to user.
 * The entries are located on the call stack so no need to free memory.
 * Note insert() remove() must always match to properly clear the stack.
 
 * Called when we have detected a recursive dependency.
 * check_top point to the top of the stact so we use
 * the ->prev pointer to locate the bottom of the stack.
  for choice values find the menu entry (used below)  return NULL when dependencies are OK  for choice groups start the check with main choice symbol  SPDX-License-Identifier: GPL-2.0
 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>
  any prompt visible? 
		 * Tristate choice_values with visibility 'mod' are
		 * not visible if the corresponding choice's value is
		 * 'yes'.
		  defaulting to "yes" if no explicit "depends on" are given 
 * Find the default symbol for a choice.
 * First try the default values for the choice symbol
 * Next locate the first visible choice value
 * Return NULL if none was found
  any of the defaults visible?  just get the first visible value  failed to locate any defaults  first calculate all choice values' visibilities  is the user choice visible?  no choice? reset tristate value  set default if recursively called  if the symbol is visible use the user value
				 * if available, otherwise try the default value
				 
	 * setting a choice value also resets the new flag of the choice
	 * symbol and all other choice values.
	 
 * Find the default value associated to a symbol.
 * For tristate symbol handle the modules=n case
 * in which case "m" becomes "y".
 * If the symbol does not have any default then fallback
 * to the fixed default values.
  If symbol has a default value look it up  The visibility may limit the value from yes => mod 
			 * The following fails to handle the situation
			 * where a default value is further limited by
			 * the valid range.
			  Handle select statements  transpose mod to yes if modules are not enabled  transpose mod to yes if type is bool  adjust the default value if this symbol is implied by another  fnv32 hash  Compare matched symbols as thus:
 * - first, symbols that match exactly
 * - then, alphabetical sort
  Exact match:
	 * - if matched length on symbol s1 is the length of that symbol,
	 *   then this symbol should come first;
	 * - if matched length on symbol s2 is the length of that symbol,
	 *   then this symbol should come first.
	 * Note: since the search can be a regexp, both symbols may match
	 * exactly; if this is the case, we can't decide which comes first,
	 * and we fallback to sorting alphabetically.
	  As a fallback, sort symbols alphabetically  Skip if empty  As regexec returned 0, we know we have a match, so
		 * we can use match[0].rm_[se]o without further checks
		  sym_match_arr can be NULL if no match, but free(NULL) is OK 
 * When we check for recursive dependencies we use a stack to save
 * current state so we can print out relevant info to user.
 * The entries are located on the call stack so no need to free memory.
 * Note insert() remove() must always match to properly clear the stack.
 
 * Called when we have detected a recursive dependency.
 * check_top point to the top of the stact so we use
 * the ->prev pointer to locate the bottom of the stack.
  for choice values find the menu entry (used below)  return NULL when dependencies are OK  for choice groups start the check with main choice symbol  SPDX-License-Identifier: GPL-2.0
 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>
  any prompt visible? 
		 * Tristate choice_values with visibility 'mod' are
		 * not visible if the corresponding choice's value is
		 * 'yes'.
		  defaulting to "yes" if no explicit "depends on" are given 
 * Find the default symbol for a choice.
 * First try the default values for the choice symbol
 * Next locate the first visible choice value
 * Return NULL if none was found
  any of the defaults visible?  just get the first visible value  failed to locate any defaults  first calculate all choice values' visibilities  is the user choice visible?  no choice? reset tristate value  set default if recursively called  if the symbol is visible use the user value
				 * if available, otherwise try the default value
				 
	 * setting a choice value also resets the new flag of the choice
	 * symbol and all other choice values.
	 
 * Find the default value associated to a symbol.
 * For tristate symbol handle the modules=n case
 * in which case "m" becomes "y".
 * If the symbol does not have any default then fallback
 * to the fixed default values.
  If symbol has a default value look it up  The visibility may limit the value from yes => mod 
			 * The following fails to handle the situation
			 * where a default value is further limited by
			 * the valid range.
			  Handle select statements  transpose mod to yes if modules are not enabled  transpose mod to yes if type is bool  adjust the default value if this symbol is implied by another  fnv32 hash  Compare matched symbols as thus:
 * - first, symbols that match exactly
 * - then, alphabetical sort
  Exact match:
	 * - if matched length on symbol s1 is the length of that symbol,
	 *   then this symbol should come first;
	 * - if matched length on symbol s2 is the length of that symbol,
	 *   then this symbol should come first.
	 * Note: since the search can be a regexp, both symbols may match
	 * exactly; if this is the case, we can't decide which comes first,
	 * and we fallback to sorting alphabetically.
	  As a fallback, sort symbols alphabetically  Skip if empty  As regexec returned 0, we know we have a match, so
		 * we can use match[0].rm_[se]o without further checks
		  sym_match_arr can be NULL if no match, but free(NULL) is OK 
 * When we check for recursive dependencies we use a stack to save
 * current state so we can print out relevant info to user.
 * The entries are located on the call stack so no need to free memory.
 * Note insert() remove() must always match to properly clear the stack.
 
 * Called when we have detected a recursive dependency.
 * check_top point to the top of the stact so we use
 * the ->prev pointer to locate the bottom of the stack.
  for choice values find the menu entry (used below)  return NULL when dependencies are OK  for choice groups start the check with main choice symbol 