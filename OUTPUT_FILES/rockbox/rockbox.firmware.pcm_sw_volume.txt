**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2013 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** volume factors set by pcm_set_master_volume  prescale factor set by pcm_set_prescaler  AUDIOHW_HAVE_PRESCALER  final pcm scaling factors **
 ** Volume scaling routines
 ** If unbuffered, called externally by pcm driver
 * TODO: #include CPU-optimized routines and move this to /firmware/asm  Requires large integer math  PCM_SW_VOLUME_FRACBITS  Scale and round sample by PCM factor  Both UNITY, use direct copy  static void * memcpy(void *dst, const void *src, size_t size);  Either cut (both <= UNITY), no clipping needed  Either boost (any > UNITY) requires clipping  Transition the volume change smoothly across a frame  Transition from the old value to the new value using an inverted cosinus
       from PI..0 in order to minimize amplitude-modulated harmonics generation
       (zipper effects).  0.0..2.0  Select steady-state operation  Called by completion routine to scale the next buffer of samples  Assign the new scaling function for normal steady-state operation  source buffer from client  double buffer and frame length control * Overrides of certain functions in pcm.c and pcm-internal.h * Check status callback first if error  Do next chunk  This is a stop chunk or error  Equitably divide large source buffers amongst double buffer frames;
   frames smaller than or equal to the double buffer chunk size will play
   in one chunk  Obtain the next buffer and prepare it for pcm driver playback  Prefill double buffer and start pcm driver  Smoothed transition might not have happened so sync now  Reprocess in case volume level changed  Playing frame was last frame  Return playing buffer from the source buffer  PCM_SW_VOLUME_UNBUFFERED * Internal * Return the scale factor corresponding to the centibel level  mute  Centibels -> fixedpoint * Public functions * Produce final pcm scale factor  Set the prescaler value for all PCM playback  AUDIOHW_HAVE_PRESCALER  Set the per-channel volume cut/gain for all PCM playback **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2013 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** volume factors set by pcm_set_master_volume  prescale factor set by pcm_set_prescaler  AUDIOHW_HAVE_PRESCALER  final pcm scaling factors **
 ** Volume scaling routines
 ** If unbuffered, called externally by pcm driver
 * TODO: #include CPU-optimized routines and move this to /firmware/asm  Requires large integer math  PCM_SW_VOLUME_FRACBITS  Scale and round sample by PCM factor  Both UNITY, use direct copy  static void * memcpy(void *dst, const void *src, size_t size);  Either cut (both <= UNITY), no clipping needed  Either boost (any > UNITY) requires clipping  Transition the volume change smoothly across a frame  Transition from the old value to the new value using an inverted cosinus
       from PI..0 in order to minimize amplitude-modulated harmonics generation
       (zipper effects).  0.0..2.0  Select steady-state operation  Called by completion routine to scale the next buffer of samples  Assign the new scaling function for normal steady-state operation  source buffer from client  double buffer and frame length control * Overrides of certain functions in pcm.c and pcm-internal.h * Check status callback first if error  Do next chunk  This is a stop chunk or error  Equitably divide large source buffers amongst double buffer frames;
   frames smaller than or equal to the double buffer chunk size will play
   in one chunk  Obtain the next buffer and prepare it for pcm driver playback  Prefill double buffer and start pcm driver  Smoothed transition might not have happened so sync now  Reprocess in case volume level changed  Playing frame was last frame  Return playing buffer from the source buffer  PCM_SW_VOLUME_UNBUFFERED * Internal * Return the scale factor corresponding to the centibel level  mute  Centibels -> fixedpoint * Public functions * Produce final pcm scale factor  Set the prescaler value for all PCM playback  AUDIOHW_HAVE_PRESCALER  Set the per-channel volume cut/gain for all PCM playback **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2013 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** volume factors set by pcm_set_master_volume  prescale factor set by pcm_set_prescaler  AUDIOHW_HAVE_PRESCALER  final pcm scaling factors **
 ** Volume scaling routines
 ** If unbuffered, called externally by pcm driver
 * TODO: #include CPU-optimized routines and move this to /firmware/asm  Requires large integer math  PCM_SW_VOLUME_FRACBITS  Scale and round sample by PCM factor  Both UNITY, use direct copy  static void * memcpy(void *dst, const void *src, size_t size);  Either cut (both <= UNITY), no clipping needed  Either boost (any > UNITY) requires clipping  Transition the volume change smoothly across a frame  Transition from the old value to the new value using an inverted cosinus
       from PI..0 in order to minimize amplitude-modulated harmonics generation
       (zipper effects).  0.0..2.0  Select steady-state operation  Called by completion routine to scale the next buffer of samples  Assign the new scaling function for normal steady-state operation  source buffer from client  double buffer and frame length control * Overrides of certain functions in pcm.c and pcm-internal.h * Check status callback first if error  Do next chunk  This is a stop chunk or error  Equitably divide large source buffers amongst double buffer frames;
   frames smaller than or equal to the double buffer chunk size will play
   in one chunk  Obtain the next buffer and prepare it for pcm driver playback  Prefill double buffer and start pcm driver  Smoothed transition might not have happened so sync now  Reprocess in case volume level changed  Playing frame was last frame  Return playing buffer from the source buffer  PCM_SW_VOLUME_UNBUFFERED * Internal * Return the scale factor corresponding to the centibel level  mute  Centibels -> fixedpoint * Public functions * Produce final pcm scale factor  Set the prescaler value for all PCM playback  AUDIOHW_HAVE_PRESCALER  Set the per-channel volume cut/gain for all PCM playback 