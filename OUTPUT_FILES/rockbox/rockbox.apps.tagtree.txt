**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 by Miika Pekkarinen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************
 * Basic structure on this file was copied from dbtree.c and modified to
 * support the tag cache interface.
 #define LOGF_ENABLE this needs to be same size as struct entry (tree.h) and name needs to be
 * the first; so that they're compatible enough to walk arrays of both
 * derefencing the name member offset n/a  offset n/a  Capacity 10 000 entries (for example 10k different artists) 
 * "%3d. %s" autoscore title %sort = "inverse" %limit = "100"
 *
 * valid = true
 * formatstr = "%-3d. %s"
 * tags[0] = tag_autoscore
 * tags[1] = tag_title
 * tag_count = 2
 *
 * limit = 100
 * sort_inverse = true
  Statusbar text of the current view.  a few memory alloc helper  loop over menus  then over the menu_entries of a menu  then over the search_instructions of each menu_entry  now the same game for formats  save to call without locking  Find the start.  Read the data.  Find the start.  Find the start.  runtime search operand found  "%3d. %s" autoscore title %sort = "inverse" %limit = "100"  Determine the group id  example search:
 * "Best" artist ? year >= "2000" & title !^ "crap" & genre = "good genre" \
 *      : album  ? year >= "2000" : songs
 * ^  begins with
 * *  contains
 * $  ends with
  Parse entry name  Parse entry type  Find the matching root menu or "create" it  Allocate a new menu unless link is found.  Do not gather data unless proper setting has been enabled.  Load current file resume info if not already defined (by
           another resume mechanism)  Store our tagcache index pointer.  Don't process unplayed tracks, or tracks interrupted within the
       first 15 seconds but always process autoresume point  3s because that is the threshold the WPS uses to rewind instead
       of skip backwards  Do not gather data unless proper setting has been enabled and at least
       one is still slated to be recorded  Ignore the last 15s (crossfade etc.)  Queue the updates to the tagcache system.  Strip possible <CR> at end of line.  First line, do initialisation.  End the menu  Only set root menu once.  Allocate  Now read file for real, parsing into si  second unlock to enable re-init  safety check since tree.c needs to cast tagentry to entry  If no root menu is set, assume it's the first single menu
     * we have. That shouldn't normally happen.  Don't show splashes for 1/2 second after starting search  Update progress every 1/10 of a second  Need to fetch the tag data.  need at least one more byte for \0  Show search progress straight away if the disk needs to spin up,
       otherwise show it after the normal 1/2 second delay  Prevent duplicate entries in the search list.  because tagcache saves the clauses, we need to lock the buffer
     * for the entire duration of the search  lock buflib out due to possible yields  Check the format  buffer full  user aborted  unload and re-init tagtree  The _total_ numer of entries available.  lock buflib for possible I/O to protect dptr  Read input as necessary.  about to create a new current playlist...
                 allow user to cancel the operation  Update the statusbar title  Count back to zero  We need to set the table to allsubentries.  Insert a single track?  Now the current table should be allsubentries.  And now the newtable should be playtrack.  Finally return the dirlevel to its original value.  make warn on playlist erase work  Load the next chunk if necessary. **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 by Miika Pekkarinen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************
 * Basic structure on this file was copied from dbtree.c and modified to
 * support the tag cache interface.
 #define LOGF_ENABLE this needs to be same size as struct entry (tree.h) and name needs to be
 * the first; so that they're compatible enough to walk arrays of both
 * derefencing the name member offset n/a  offset n/a  Capacity 10 000 entries (for example 10k different artists) 
 * "%3d. %s" autoscore title %sort = "inverse" %limit = "100"
 *
 * valid = true
 * formatstr = "%-3d. %s"
 * tags[0] = tag_autoscore
 * tags[1] = tag_title
 * tag_count = 2
 *
 * limit = 100
 * sort_inverse = true
  Statusbar text of the current view.  a few memory alloc helper  loop over menus  then over the menu_entries of a menu  then over the search_instructions of each menu_entry  now the same game for formats  save to call without locking  Find the start.  Read the data.  Find the start.  Find the start.  runtime search operand found  "%3d. %s" autoscore title %sort = "inverse" %limit = "100"  Determine the group id  example search:
 * "Best" artist ? year >= "2000" & title !^ "crap" & genre = "good genre" \
 *      : album  ? year >= "2000" : songs
 * ^  begins with
 * *  contains
 * $  ends with
  Parse entry name  Parse entry type  Find the matching root menu or "create" it  Allocate a new menu unless link is found.  Do not gather data unless proper setting has been enabled.  Load current file resume info if not already defined (by
           another resume mechanism)  Store our tagcache index pointer.  Don't process unplayed tracks, or tracks interrupted within the
       first 15 seconds but always process autoresume point  3s because that is the threshold the WPS uses to rewind instead
       of skip backwards  Do not gather data unless proper setting has been enabled and at least
       one is still slated to be recorded  Ignore the last 15s (crossfade etc.)  Queue the updates to the tagcache system.  Strip possible <CR> at end of line.  First line, do initialisation.  End the menu  Only set root menu once.  Allocate  Now read file for real, parsing into si  second unlock to enable re-init  safety check since tree.c needs to cast tagentry to entry  If no root menu is set, assume it's the first single menu
     * we have. That shouldn't normally happen.  Don't show splashes for 1/2 second after starting search  Update progress every 1/10 of a second  Need to fetch the tag data.  need at least one more byte for \0  Show search progress straight away if the disk needs to spin up,
       otherwise show it after the normal 1/2 second delay  Prevent duplicate entries in the search list.  because tagcache saves the clauses, we need to lock the buffer
     * for the entire duration of the search  lock buflib out due to possible yields  Check the format  buffer full  user aborted  unload and re-init tagtree  The _total_ numer of entries available.  lock buflib for possible I/O to protect dptr  Read input as necessary.  about to create a new current playlist...
                 allow user to cancel the operation  Update the statusbar title  Count back to zero  We need to set the table to allsubentries.  Insert a single track?  Now the current table should be allsubentries.  And now the newtable should be playtrack.  Finally return the dirlevel to its original value.  make warn on playlist erase work  Load the next chunk if necessary. **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 by Miika Pekkarinen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************
 * Basic structure on this file was copied from dbtree.c and modified to
 * support the tag cache interface.
 #define LOGF_ENABLE this needs to be same size as struct entry (tree.h) and name needs to be
 * the first; so that they're compatible enough to walk arrays of both
 * derefencing the name member offset n/a  offset n/a  Capacity 10 000 entries (for example 10k different artists) 
 * "%3d. %s" autoscore title %sort = "inverse" %limit = "100"
 *
 * valid = true
 * formatstr = "%-3d. %s"
 * tags[0] = tag_autoscore
 * tags[1] = tag_title
 * tag_count = 2
 *
 * limit = 100
 * sort_inverse = true
  Statusbar text of the current view.  a few memory alloc helper  loop over menus  then over the menu_entries of a menu  then over the search_instructions of each menu_entry  now the same game for formats  save to call without locking  Find the start.  Read the data.  Find the start.  Find the start.  runtime search operand found  "%3d. %s" autoscore title %sort = "inverse" %limit = "100"  Determine the group id  example search:
 * "Best" artist ? year >= "2000" & title !^ "crap" & genre = "good genre" \
 *      : album  ? year >= "2000" : songs
 * ^  begins with
 * *  contains
 * $  ends with
  Parse entry name  Parse entry type  Find the matching root menu or "create" it  Allocate a new menu unless link is found.  Do not gather data unless proper setting has been enabled.  Load current file resume info if not already defined (by
           another resume mechanism)  Store our tagcache index pointer.  Don't process unplayed tracks, or tracks interrupted within the
       first 15 seconds but always process autoresume point  3s because that is the threshold the WPS uses to rewind instead
       of skip backwards  Do not gather data unless proper setting has been enabled and at least
       one is still slated to be recorded  Ignore the last 15s (crossfade etc.)  Queue the updates to the tagcache system.  Strip possible <CR> at end of line.  First line, do initialisation.  End the menu  Only set root menu once.  Allocate  Now read file for real, parsing into si  second unlock to enable re-init  safety check since tree.c needs to cast tagentry to entry  If no root menu is set, assume it's the first single menu
     * we have. That shouldn't normally happen.  Don't show splashes for 1/2 second after starting search  Update progress every 1/10 of a second  Need to fetch the tag data.  need at least one more byte for \0  Show search progress straight away if the disk needs to spin up,
       otherwise show it after the normal 1/2 second delay  Prevent duplicate entries in the search list.  because tagcache saves the clauses, we need to lock the buffer
     * for the entire duration of the search  lock buflib out due to possible yields  Check the format  buffer full  user aborted  unload and re-init tagtree  The _total_ numer of entries available.  lock buflib for possible I/O to protect dptr  Read input as necessary.  about to create a new current playlist...
                 allow user to cancel the operation  Update the statusbar title  Count back to zero  We need to set the table to allsubentries.  Insert a single track?  Now the current table should be allsubentries.  And now the newtable should be playtrack.  Finally return the dirlevel to its original value.  make warn on playlist erase work  Load the next chunk if necessary. 