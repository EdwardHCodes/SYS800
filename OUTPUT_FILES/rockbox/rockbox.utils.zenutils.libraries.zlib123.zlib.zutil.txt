 zutil.c -- target dependent utility functions for the compression library
 * Copyright (C) 1995-2005 Jean-loup Gailly.
 * For conditions of distribution and use, see copyright notice in zlib.h
  @(#) $Id$  for buggy compilers  Z_NEED_DICT       2   Z_STREAM_END      1   Z_OK              0   Z_ERRNO         (-1)  Z_STREAM_ERROR  (-2)  Z_DATA_ERROR    (-3)  Z_MEM_ERROR     (-4)  Z_BUF_ERROR     (-5)  Z_VERSION_ERROR (-6)  exported to allow conversion of error code to string for compress() and
 * uncompress()
  The Microsoft C Run-Time Library for Windows CE doesn't have
     * errno.  We define it as a global variable to simplify porting.
     * Its value is always 0 and should not be used.
      ??? to be unrolled  ??? to be unrolled  Turbo C in 16-bit mode  Turbo C malloc() does not allow dynamic allocation of 64K bytes
 * and farmalloc(64K) returns a pointer with an offset of 8, so we
 * must fix the pointer. Warning: the pointer must be put back to its
 * original form in order to free it, use zcfree().
  10*64K = 640K  This table is used to remember the original form of pointers
 * to large buffers (64K). Such pointers are normalized with a zero offset.
 * Since MSDOS is not a preemptive multitasking OS, this table is not
 * protected from concurrent access. This hack doesn't work anyway on
 * a protected system like OS/2. Use Microsoft C instead.
  If we allocate less than 65520 bytes, we assume that farmalloc
     * will return a usable pointer which doesn't have to be normalized.
      Normalize the pointer to seg:0  object < 64K  Find the original pointer  __TURBOC__  Microsoft C in 16-bit mode  M_I86  SYS16BIT  Any system without a special alloc function  MY_ZCALLOC  zutil.c -- target dependent utility functions for the compression library
 * Copyright (C) 1995-2005 Jean-loup Gailly.
 * For conditions of distribution and use, see copyright notice in zlib.h
  @(#) $Id$  for buggy compilers  Z_NEED_DICT       2   Z_STREAM_END      1   Z_OK              0   Z_ERRNO         (-1)  Z_STREAM_ERROR  (-2)  Z_DATA_ERROR    (-3)  Z_MEM_ERROR     (-4)  Z_BUF_ERROR     (-5)  Z_VERSION_ERROR (-6)  exported to allow conversion of error code to string for compress() and
 * uncompress()
  The Microsoft C Run-Time Library for Windows CE doesn't have
     * errno.  We define it as a global variable to simplify porting.
     * Its value is always 0 and should not be used.
      ??? to be unrolled  ??? to be unrolled  Turbo C in 16-bit mode  Turbo C malloc() does not allow dynamic allocation of 64K bytes
 * and farmalloc(64K) returns a pointer with an offset of 8, so we
 * must fix the pointer. Warning: the pointer must be put back to its
 * original form in order to free it, use zcfree().
  10*64K = 640K  This table is used to remember the original form of pointers
 * to large buffers (64K). Such pointers are normalized with a zero offset.
 * Since MSDOS is not a preemptive multitasking OS, this table is not
 * protected from concurrent access. This hack doesn't work anyway on
 * a protected system like OS/2. Use Microsoft C instead.
  If we allocate less than 65520 bytes, we assume that farmalloc
     * will return a usable pointer which doesn't have to be normalized.
      Normalize the pointer to seg:0  object < 64K  Find the original pointer  __TURBOC__  Microsoft C in 16-bit mode  M_I86  SYS16BIT  Any system without a special alloc function  MY_ZCALLOC  zutil.c -- target dependent utility functions for the compression library
 * Copyright (C) 1995-2005 Jean-loup Gailly.
 * For conditions of distribution and use, see copyright notice in zlib.h
  @(#) $Id$  for buggy compilers  Z_NEED_DICT       2   Z_STREAM_END      1   Z_OK              0   Z_ERRNO         (-1)  Z_STREAM_ERROR  (-2)  Z_DATA_ERROR    (-3)  Z_MEM_ERROR     (-4)  Z_BUF_ERROR     (-5)  Z_VERSION_ERROR (-6)  exported to allow conversion of error code to string for compress() and
 * uncompress()
  The Microsoft C Run-Time Library for Windows CE doesn't have
     * errno.  We define it as a global variable to simplify porting.
     * Its value is always 0 and should not be used.
      ??? to be unrolled  ??? to be unrolled  Turbo C in 16-bit mode  Turbo C malloc() does not allow dynamic allocation of 64K bytes
 * and farmalloc(64K) returns a pointer with an offset of 8, so we
 * must fix the pointer. Warning: the pointer must be put back to its
 * original form in order to free it, use zcfree().
  10*64K = 640K  This table is used to remember the original form of pointers
 * to large buffers (64K). Such pointers are normalized with a zero offset.
 * Since MSDOS is not a preemptive multitasking OS, this table is not
 * protected from concurrent access. This hack doesn't work anyway on
 * a protected system like OS/2. Use Microsoft C instead.
  If we allocate less than 65520 bytes, we assume that farmalloc
     * will return a usable pointer which doesn't have to be normalized.
      Normalize the pointer to seg:0  object < 64K  Find the original pointer  __TURBOC__  Microsoft C in 16-bit mode  M_I86  SYS16BIT  Any system without a special alloc function  MY_ZCALLOC 