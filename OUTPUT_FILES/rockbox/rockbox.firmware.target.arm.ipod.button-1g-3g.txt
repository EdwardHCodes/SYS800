**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Daniel Stenberg
 *
 * iPod driver based on code from the ipodlinux project - http://ipodlinux.org
 * Adapted for Rockbox in December 2005
 * Original file: linux/arch/armnommu/mach-ipod/keyboard.c
 * Copyright (c) 2003-2005 Bernard Leach (leachbj@bouncycastle.org)
 *
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * Rockbox button functions
  The 1st Gen wheel draws ~12mA when enabled permanently. Therefore
 * we only enable it for a very short time to check for changes every
 * tick, and only keep it enabled if there is activity.  Compute every ... clicks  deg/s  deg/s  direction reversal or was hold - reset all  poke backlight every 1/4s of activity  has wheel travelled far enough?  reset travel count and do calculations  1st..3rd Gen wheel has inverse direction mapping
     * compared to Mini 1st Gen wheel.  only happens if we get out of sync  have a keycode  calculate deg/s based upon sensitivity-adjusted interrupt period  timer wrapped (no activity for awhile), skip acceleration  check overflow below  limit to 24 bits  very slow - no smoothing  ensure backlight never gets stuck for an extended period if tick
         * wrapped such that next poke is very far ahead  some velocity filtering to smooth things out  quick enough and same key is being posted more than once in a
             * row - generate repeats - use unsmoothed v to guage  post wheel keycode with wheel data  message posted - reset delta  skipped post - increment delta and limit to 7 bits  get source of interupts  get current keypad status  toggle interrupt level  ack any active interrupts  3g hold switch is active low  hold switch on 3g causes all outputs to go low  we shouldn't interpret these as key presses  1g/2g hold switch is active high  enable scroll wheel 
 * Get button pressed from hardware
  enable wheel  let the voltage settle  keep wheel enabled  enable wheel interrupts  disable wheel interrupts  disable wheel  normal buttons  2G uses GPIO B bit 0  1G has no headphone detection, so fake insertion  3G uses GPIO C bit 0 **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Daniel Stenberg
 *
 * iPod driver based on code from the ipodlinux project - http://ipodlinux.org
 * Adapted for Rockbox in December 2005
 * Original file: linux/arch/armnommu/mach-ipod/keyboard.c
 * Copyright (c) 2003-2005 Bernard Leach (leachbj@bouncycastle.org)
 *
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * Rockbox button functions
  The 1st Gen wheel draws ~12mA when enabled permanently. Therefore
 * we only enable it for a very short time to check for changes every
 * tick, and only keep it enabled if there is activity.  Compute every ... clicks  deg/s  deg/s  direction reversal or was hold - reset all  poke backlight every 1/4s of activity  has wheel travelled far enough?  reset travel count and do calculations  1st..3rd Gen wheel has inverse direction mapping
     * compared to Mini 1st Gen wheel.  only happens if we get out of sync  have a keycode  calculate deg/s based upon sensitivity-adjusted interrupt period  timer wrapped (no activity for awhile), skip acceleration  check overflow below  limit to 24 bits  very slow - no smoothing  ensure backlight never gets stuck for an extended period if tick
         * wrapped such that next poke is very far ahead  some velocity filtering to smooth things out  quick enough and same key is being posted more than once in a
             * row - generate repeats - use unsmoothed v to guage  post wheel keycode with wheel data  message posted - reset delta  skipped post - increment delta and limit to 7 bits  get source of interupts  get current keypad status  toggle interrupt level  ack any active interrupts  3g hold switch is active low  hold switch on 3g causes all outputs to go low  we shouldn't interpret these as key presses  1g/2g hold switch is active high  enable scroll wheel 
 * Get button pressed from hardware
  enable wheel  let the voltage settle  keep wheel enabled  enable wheel interrupts  disable wheel interrupts  disable wheel  normal buttons  2G uses GPIO B bit 0  1G has no headphone detection, so fake insertion  3G uses GPIO C bit 0 **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Daniel Stenberg
 *
 * iPod driver based on code from the ipodlinux project - http://ipodlinux.org
 * Adapted for Rockbox in December 2005
 * Original file: linux/arch/armnommu/mach-ipod/keyboard.c
 * Copyright (c) 2003-2005 Bernard Leach (leachbj@bouncycastle.org)
 *
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * Rockbox button functions
  The 1st Gen wheel draws ~12mA when enabled permanently. Therefore
 * we only enable it for a very short time to check for changes every
 * tick, and only keep it enabled if there is activity.  Compute every ... clicks  deg/s  deg/s  direction reversal or was hold - reset all  poke backlight every 1/4s of activity  has wheel travelled far enough?  reset travel count and do calculations  1st..3rd Gen wheel has inverse direction mapping
     * compared to Mini 1st Gen wheel.  only happens if we get out of sync  have a keycode  calculate deg/s based upon sensitivity-adjusted interrupt period  timer wrapped (no activity for awhile), skip acceleration  check overflow below  limit to 24 bits  very slow - no smoothing  ensure backlight never gets stuck for an extended period if tick
         * wrapped such that next poke is very far ahead  some velocity filtering to smooth things out  quick enough and same key is being posted more than once in a
             * row - generate repeats - use unsmoothed v to guage  post wheel keycode with wheel data  message posted - reset delta  skipped post - increment delta and limit to 7 bits  get source of interupts  get current keypad status  toggle interrupt level  ack any active interrupts  3g hold switch is active low  hold switch on 3g causes all outputs to go low  we shouldn't interpret these as key presses  1g/2g hold switch is active high  enable scroll wheel 
 * Get button pressed from hardware
  enable wheel  let the voltage settle  keep wheel enabled  enable wheel interrupts  disable wheel interrupts  disable wheel  normal buttons  2G uses GPIO B bit 0  1G has no headphone detection, so fake insertion  3G uses GPIO C bit 0 