**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2011 by Marcin Bukat
 * Copyright (C) 2012 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** max allowed packet size definitions  EP type  DIR_IN/DIR_OUT  flag to mark EPs taken  tx/rx buffer address  size of the transfer (bytes)  number of bytes transfered/received   not needed as we use EP0 only  copy setup data from packet  ack upper layer we have setup data  service ep0 IN transaction  TX0FULL flag  size of the transfer  local buffer address  start DMA  clear NAK  buffer address  start DMA  clear NAK bit  min 10ms  return port speed   Set the address (usually it's in a register).
 * There is a problem here: some controller want the address to be set between
 * control out and ack and some want to wait for the end of the transaction.
 * In the first case, you need to write some code special code when getting
 * setup packets and ignore this function (have a look at other drives)
  UDC sets this automaticaly  wait for transfer to end  Setup a receive transfer. (blocking)  block here until the transfer is finished  ZLP, clear NAK bit  Stall the endpoint. Usually set a flag in the controller  ctrl only anyway  doc says Auto clear by UDC 2.0  one time init (once per connection) - basicaly enable usb core  wait at least 10ms  Enable Suspend Irq  Enable Resume Irq  Enable USB Reset Irq  Enable OUT Token receive Irq EP0  Enable IN Token transmit Irq EP0  Enable SETUP Packet Receive Irq  interrupt high active  enable EP0 irqs  turn off usb core  udc module reset  UDC ISR function  read what caused UDC irq  usb reset  Enable Suspend Irq  Enable Resume Irq  Enable USB Reset Irq  Enable OUT Token receive Irq EP0  Enable IN Token transmit Irq EP0  Enable SETUP Packet Receive Irq  Set as one to enable the EP0 tx irq  Set as one to response NAK handshake  Endpoint 0 Enable. When cleared the
                                    * endpoint does not respond to an SETUP
                                    * or OUT token  Set as one to response NAK handshake  setup interrupt  ep0 in interrupt  read clears flags  TODO handle errors  check TxACK flag  Decrement by max packet size is intentional.
             * This way if we have final packet short one we will get negative len
             * after transfer, which in turn indicates we *don't* need to send
             * zero length packet. If the final packet is max sized packet we will
             * get zero len after transfer which indicates we need to send
             * zero length packet to signal host end of the transfer.
              we still have data to send  final ack received  ep0 out interrupt  TODO handle errors  RxACK  advance the buffer  usb resume  TxClr  RxClr **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2011 by Marcin Bukat
 * Copyright (C) 2012 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** max allowed packet size definitions  EP type  DIR_IN/DIR_OUT  flag to mark EPs taken  tx/rx buffer address  size of the transfer (bytes)  number of bytes transfered/received   not needed as we use EP0 only  copy setup data from packet  ack upper layer we have setup data  service ep0 IN transaction  TX0FULL flag  size of the transfer  local buffer address  start DMA  clear NAK  buffer address  start DMA  clear NAK bit  min 10ms  return port speed   Set the address (usually it's in a register).
 * There is a problem here: some controller want the address to be set between
 * control out and ack and some want to wait for the end of the transaction.
 * In the first case, you need to write some code special code when getting
 * setup packets and ignore this function (have a look at other drives)
  UDC sets this automaticaly  wait for transfer to end  Setup a receive transfer. (blocking)  block here until the transfer is finished  ZLP, clear NAK bit  Stall the endpoint. Usually set a flag in the controller  ctrl only anyway  doc says Auto clear by UDC 2.0  one time init (once per connection) - basicaly enable usb core  wait at least 10ms  Enable Suspend Irq  Enable Resume Irq  Enable USB Reset Irq  Enable OUT Token receive Irq EP0  Enable IN Token transmit Irq EP0  Enable SETUP Packet Receive Irq  interrupt high active  enable EP0 irqs  turn off usb core  udc module reset  UDC ISR function  read what caused UDC irq  usb reset  Enable Suspend Irq  Enable Resume Irq  Enable USB Reset Irq  Enable OUT Token receive Irq EP0  Enable IN Token transmit Irq EP0  Enable SETUP Packet Receive Irq  Set as one to enable the EP0 tx irq  Set as one to response NAK handshake  Endpoint 0 Enable. When cleared the
                                    * endpoint does not respond to an SETUP
                                    * or OUT token  Set as one to response NAK handshake  setup interrupt  ep0 in interrupt  read clears flags  TODO handle errors  check TxACK flag  Decrement by max packet size is intentional.
             * This way if we have final packet short one we will get negative len
             * after transfer, which in turn indicates we *don't* need to send
             * zero length packet. If the final packet is max sized packet we will
             * get zero len after transfer which indicates we need to send
             * zero length packet to signal host end of the transfer.
              we still have data to send  final ack received  ep0 out interrupt  TODO handle errors  RxACK  advance the buffer  usb resume  TxClr  RxClr **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2011 by Marcin Bukat
 * Copyright (C) 2012 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** max allowed packet size definitions  EP type  DIR_IN/DIR_OUT  flag to mark EPs taken  tx/rx buffer address  size of the transfer (bytes)  number of bytes transfered/received   not needed as we use EP0 only  copy setup data from packet  ack upper layer we have setup data  service ep0 IN transaction  TX0FULL flag  size of the transfer  local buffer address  start DMA  clear NAK  buffer address  start DMA  clear NAK bit  min 10ms  return port speed   Set the address (usually it's in a register).
 * There is a problem here: some controller want the address to be set between
 * control out and ack and some want to wait for the end of the transaction.
 * In the first case, you need to write some code special code when getting
 * setup packets and ignore this function (have a look at other drives)
  UDC sets this automaticaly  wait for transfer to end  Setup a receive transfer. (blocking)  block here until the transfer is finished  ZLP, clear NAK bit  Stall the endpoint. Usually set a flag in the controller  ctrl only anyway  doc says Auto clear by UDC 2.0  one time init (once per connection) - basicaly enable usb core  wait at least 10ms  Enable Suspend Irq  Enable Resume Irq  Enable USB Reset Irq  Enable OUT Token receive Irq EP0  Enable IN Token transmit Irq EP0  Enable SETUP Packet Receive Irq  interrupt high active  enable EP0 irqs  turn off usb core  udc module reset  UDC ISR function  read what caused UDC irq  usb reset  Enable Suspend Irq  Enable Resume Irq  Enable USB Reset Irq  Enable OUT Token receive Irq EP0  Enable IN Token transmit Irq EP0  Enable SETUP Packet Receive Irq  Set as one to enable the EP0 tx irq  Set as one to response NAK handshake  Endpoint 0 Enable. When cleared the
                                    * endpoint does not respond to an SETUP
                                    * or OUT token  Set as one to response NAK handshake  setup interrupt  ep0 in interrupt  read clears flags  TODO handle errors  check TxACK flag  Decrement by max packet size is intentional.
             * This way if we have final packet short one we will get negative len
             * after transfer, which in turn indicates we *don't* need to send
             * zero length packet. If the final packet is max sized packet we will
             * get zero len after transfer which indicates we need to send
             * zero length packet to signal host end of the transfer.
              we still have data to send  final ack received  ep0 out interrupt  TODO handle errors  RxACK  advance the buffer  usb resume  TxClr  RxClr 