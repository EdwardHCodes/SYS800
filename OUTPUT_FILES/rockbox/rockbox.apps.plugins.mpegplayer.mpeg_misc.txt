**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Miscellaneous helper API definitions
 *
 * Copyright (c) 2007 Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** Streams * Initializes the cursor  Ensures direction is -1 or 1 and margin is properly initialized  Moves a scan cursor. If amount is positive, the increment is in the scan
 * direction, otherwise opposite the scan direction * Time helpers * Only display hours if nonzero * Maths * 0/0 = 0 : yaya  else (> 0) / 0 = UINT32_MAX  Saturate * Lists * Does the list have any members?  Is the item inserted into a particular list?  Removes an item from a list - returns true if item was found
 * and thus removed.  Adds a list item, insert last, if not already present.  Clears the entire list.  Enumerate all items in the array, passing each item in turn to the
 * callback as well as the data value. The current item may be safely
 * removed. Other changes during enumeration are undefined. The callback
 * may return 'false' to stop the enumeration early.  Item still there * System events * Nonzero and won't invoke anything in default event handler * Buttons * Produce keyclick **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Miscellaneous helper API definitions
 *
 * Copyright (c) 2007 Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** Streams * Initializes the cursor  Ensures direction is -1 or 1 and margin is properly initialized  Moves a scan cursor. If amount is positive, the increment is in the scan
 * direction, otherwise opposite the scan direction * Time helpers * Only display hours if nonzero * Maths * 0/0 = 0 : yaya  else (> 0) / 0 = UINT32_MAX  Saturate * Lists * Does the list have any members?  Is the item inserted into a particular list?  Removes an item from a list - returns true if item was found
 * and thus removed.  Adds a list item, insert last, if not already present.  Clears the entire list.  Enumerate all items in the array, passing each item in turn to the
 * callback as well as the data value. The current item may be safely
 * removed. Other changes during enumeration are undefined. The callback
 * may return 'false' to stop the enumeration early.  Item still there * System events * Nonzero and won't invoke anything in default event handler * Buttons * Produce keyclick **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Miscellaneous helper API definitions
 *
 * Copyright (c) 2007 Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** Streams * Initializes the cursor  Ensures direction is -1 or 1 and margin is properly initialized  Moves a scan cursor. If amount is positive, the increment is in the scan
 * direction, otherwise opposite the scan direction * Time helpers * Only display hours if nonzero * Maths * 0/0 = 0 : yaya  else (> 0) / 0 = UINT32_MAX  Saturate * Lists * Does the list have any members?  Is the item inserted into a particular list?  Removes an item from a list - returns true if item was found
 * and thus removed.  Adds a list item, insert last, if not already present.  Clears the entire list.  Enumerate all items in the array, passing each item in turn to the
 * callback as well as the data value. The current item may be safely
 * removed. Other changes during enumeration are undefined. The callback
 * may return 'false' to stop the enumeration early.  Item still there * System events * Nonzero and won't invoke anything in default event handler * Buttons * Produce keyclick 