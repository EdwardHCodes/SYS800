******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ***************************************************************************** Maximum time between message receipt Assert a keepalive if no message received for this long for the 62.5Hz case we use two seconds (125 samples) In the negotiating state we are emitting association requests In the disconnecting state we are emitting association finish requests Been too long since the last message was received, revert to new association requests (Negotiation) Either side (or both) has not asserted themselves in the time required AND we haven't recently sent a keep alive message Time to request a new data poll if we were checking for confirmation of outgoing confirmed messages this would be the place to find confirmations This will capture DataExport, Association, and ConnectIndication messages... Opting not to update lastMessageREceived for ConnectIndications .. since they are beacons and not part of the session Could do something context-sensitive here when a confirmed action fails Such as when setting the priority list returns "access denied" for waveforms because another client is already receiving waves The super sends confirmations where appropriate by default                Attribute<org.mdpnp.devices.philips.intellivue.data.String> as = attrs.getAttribute(AttributeId.NOM_ATTR_ID_BED_LABEL,                        org.mdpnp.devices.philips.intellivue.data.String.class); Responses to our "keep alive" messages occur here Currently we track any incoming message as proof of life ... so nothing special to do here we could track gaps in poll sequence numbers but instead we're relying on consumers of the data to observe a gap in the data timestamps                        int handle = op.getHandle().getHandle();                log.info("Here begins a pollInfoList at time " + result.getRelativeTime() + " " + result.getAbsoluteTime()); log.debug(observed.toString()); TODO these were once cached, no?                                log.info("Expanding to accomodate " + cnt_sa + " samples where only " + cnt + " were expected");                                log.info("Expanding to accomodate " + cnt + " samples where " + w.getArraySize() + " were expected");  Move up to n samples from the old list to the new If we have insufficient oldSamples (shouldn't happen except maybe at initialization) fill in values If we have extra oldSamples then remove them ,    serviceSampleArrays; ok because time progressed or stayed the same Scale and range the value So actually the state transition will emit the connection info If we didn't actually transition state then this will fire the info change If we already did fire it this will be a no op For a point in time this is currentTime-runTime Or, in other words, the time when the device started according to the device clock TBD - make it handle microseconds long microseconds = time.toMicroseconds();******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ***************************************************************************** Maximum time between message receipt Assert a keepalive if no message received for this long for the 62.5Hz case we use two seconds (125 samples) In the negotiating state we are emitting association requests In the disconnecting state we are emitting association finish requests Been too long since the last message was received, revert to new association requests (Negotiation) Either side (or both) has not asserted themselves in the time required AND we haven't recently sent a keep alive message Time to request a new data poll if we were checking for confirmation of outgoing confirmed messages this would be the place to find confirmations This will capture DataExport, Association, and ConnectIndication messages... Opting not to update lastMessageREceived for ConnectIndications .. since they are beacons and not part of the session Could do something context-sensitive here when a confirmed action fails Such as when setting the priority list returns "access denied" for waveforms because another client is already receiving waves The super sends confirmations where appropriate by default                Attribute<org.mdpnp.devices.philips.intellivue.data.String> as = attrs.getAttribute(AttributeId.NOM_ATTR_ID_BED_LABEL,                        org.mdpnp.devices.philips.intellivue.data.String.class); Responses to our "keep alive" messages occur here Currently we track any incoming message as proof of life ... so nothing special to do here we could track gaps in poll sequence numbers but instead we're relying on consumers of the data to observe a gap in the data timestamps                        int handle = op.getHandle().getHandle();                log.info("Here begins a pollInfoList at time " + result.getRelativeTime() + " " + result.getAbsoluteTime()); log.debug(observed.toString()); TODO these were once cached, no?                                log.info("Expanding to accomodate " + cnt_sa + " samples where only " + cnt + " were expected");                                log.info("Expanding to accomodate " + cnt + " samples where " + w.getArraySize() + " were expected");  Move up to n samples from the old list to the new If we have insufficient oldSamples (shouldn't happen except maybe at initialization) fill in values If we have extra oldSamples then remove them ,    serviceSampleArrays; ok because time progressed or stayed the same Scale and range the value So actually the state transition will emit the connection info If we didn't actually transition state then this will fire the info change If we already did fire it this will be a no op For a point in time this is currentTime-runTime Or, in other words, the time when the device started according to the device clock TBD - make it handle microseconds long microseconds = time.toMicroseconds();******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ***************************************************************************** Maximum time between message receipt Assert a keepalive if no message received for this long for the 62.5Hz case we use two seconds (125 samples) In the negotiating state we are emitting association requests In the disconnecting state we are emitting association finish requests Been too long since the last message was received, revert to new association requests (Negotiation) Either side (or both) has not asserted themselves in the time required AND we haven't recently sent a keep alive message Time to request a new data poll if we were checking for confirmation of outgoing confirmed messages this would be the place to find confirmations This will capture DataExport, Association, and ConnectIndication messages... Opting not to update lastMessageREceived for ConnectIndications .. since they are beacons and not part of the session Could do something context-sensitive here when a confirmed action fails Such as when setting the priority list returns "access denied" for waveforms because another client is already receiving waves The super sends confirmations where appropriate by default                Attribute<org.mdpnp.devices.philips.intellivue.data.String> as = attrs.getAttribute(AttributeId.NOM_ATTR_ID_BED_LABEL,                        org.mdpnp.devices.philips.intellivue.data.String.class); Responses to our "keep alive" messages occur here Currently we track any incoming message as proof of life ... so nothing special to do here we could track gaps in poll sequence numbers but instead we're relying on consumers of the data to observe a gap in the data timestamps                        int handle = op.getHandle().getHandle();                log.info("Here begins a pollInfoList at time " + result.getRelativeTime() + " " + result.getAbsoluteTime()); log.debug(observed.toString()); TODO these were once cached, no?                                log.info("Expanding to accomodate " + cnt_sa + " samples where only " + cnt + " were expected");                                log.info("Expanding to accomodate " + cnt + " samples where " + w.getArraySize() + " were expected");  Move up to n samples from the old list to the new If we have insufficient oldSamples (shouldn't happen except maybe at initialization) fill in values If we have extra oldSamples then remove them ,    serviceSampleArrays; ok because time progressed or stayed the same Scale and range the value So actually the state transition will emit the connection info If we didn't actually transition state then this will fire the info change If we already did fire it this will be a no op For a point in time this is currentTime-runTime Or, in other words, the time when the device started according to the device clock TBD - make it handle microseconds long microseconds = time.toMicroseconds();******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ***************************************************************************** Maximum time between message receipt Assert a keepalive if no message received for this long for the 62.5Hz case we use two seconds (125 samples) In the negotiating state we are emitting association requests In the disconnecting state we are emitting association finish requests Been too long since the last message was received, revert to new association requests (Negotiation) Either side (or both) has not asserted themselves in the time required AND we haven't recently sent a keep alive message Time to request a new data poll if we were checking for confirmation of outgoing confirmed messages this would be the place to find confirmations This will capture DataExport, Association, and ConnectIndication messages... Opting not to update lastMessageREceived for ConnectIndications .. since they are beacons and not part of the session Could do something context-sensitive here when a confirmed action fails Such as when setting the priority list returns "access denied" for waveforms because another client is already receiving waves The super sends confirmations where appropriate by default                Attribute<org.mdpnp.devices.philips.intellivue.data.String> as = attrs.getAttribute(AttributeId.NOM_ATTR_ID_BED_LABEL,                        org.mdpnp.devices.philips.intellivue.data.String.class); Responses to our "keep alive" messages occur here Currently we track any incoming message as proof of life ... so nothing special to do here we could track gaps in poll sequence numbers but instead we're relying on consumers of the data to observe a gap in the data timestamps                        int handle = op.getHandle().getHandle();                log.info("Here begins a pollInfoList at time " + result.getRelativeTime() + " " + result.getAbsoluteTime()); log.debug(observed.toString()); TODO these were once cached, no?                                log.info("Expanding to accomodate " + cnt_sa + " samples where only " + cnt + " were expected");                                log.info("Expanding to accomodate " + cnt + " samples where " + w.getArraySize() + " were expected");  Move up to n samples from the old list to the new If we have insufficient oldSamples (shouldn't happen except maybe at initialization) fill in values If we have extra oldSamples then remove them ,    serviceSampleArrays; ok because time progressed or stayed the same Scale and range the value So actually the state transition will emit the connection info If we didn't actually transition state then this will fire the info change If we already did fire it this will be a no op For a point in time this is currentTime-runTime Or, in other words, the time when the device started according to the device clock TBD - make it handle microseconds long microseconds = time.toMicroseconds();******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ***************************************************************************** Maximum time between message receipt Assert a keepalive if no message received for this long for the 62.5Hz case we use two seconds (125 samples) In the negotiating state we are emitting association requests In the disconnecting state we are emitting association finish requests Been too long since the last message was received, revert to new association requests (Negotiation) Either side (or both) has not asserted themselves in the time required AND we haven't recently sent a keep alive message Time to request a new data poll if we were checking for confirmation of outgoing confirmed messages this would be the place to find confirmations This will capture DataExport, Association, and ConnectIndication messages... Opting not to update lastMessageREceived for ConnectIndications .. since they are beacons and not part of the session Could do something context-sensitive here when a confirmed action fails Such as when setting the priority list returns "access denied" for waveforms because another client is already receiving waves The super sends confirmations where appropriate by default                Attribute<org.mdpnp.devices.philips.intellivue.data.String> as = attrs.getAttribute(AttributeId.NOM_ATTR_ID_BED_LABEL,                        org.mdpnp.devices.philips.intellivue.data.String.class); Responses to our "keep alive" messages occur here Currently we track any incoming message as proof of life ... so nothing special to do here we could track gaps in poll sequence numbers but instead we're relying on consumers of the data to observe a gap in the data timestamps                        int handle = op.getHandle().getHandle();                log.info("Here begins a pollInfoList at time " + result.getRelativeTime() + " " + result.getAbsoluteTime()); log.debug(observed.toString()); TODO these were once cached, no?                                log.info("Expanding to accomodate " + cnt_sa + " samples where only " + cnt + " were expected");                                log.info("Expanding to accomodate " + cnt + " samples where " + w.getArraySize() + " were expected");  Move up to n samples from the old list to the new If we have insufficient oldSamples (shouldn't happen except maybe at initialization) fill in values If we have extra oldSamples then remove them ,    serviceSampleArrays; ok because time progressed or stayed the same Scale and range the value So actually the state transition will emit the connection info If we didn't actually transition state then this will fire the info change If we already did fire it this will be a no op For a point in time this is currentTime-runTime Or, in other words, the time when the device started according to the device clock TBD - make it handle microseconds long microseconds = time.toMicroseconds();******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ***************************************************************************** Maximum time between message receipt Assert a keepalive if no message received for this long for the 62.5Hz case we use two seconds (125 samples) In the negotiating state we are emitting association requests In the disconnecting state we are emitting association finish requests Been too long since the last message was received, revert to new association requests (Negotiation) Either side (or both) has not asserted themselves in the time required AND we haven't recently sent a keep alive message Time to request a new data poll if we were checking for confirmation of outgoing confirmed messages this would be the place to find confirmations This will capture DataExport, Association, and ConnectIndication messages... Opting not to update lastMessageREceived for ConnectIndications .. since they are beacons and not part of the session Could do something context-sensitive here when a confirmed action fails Such as when setting the priority list returns "access denied" for waveforms because another client is already receiving waves The super sends confirmations where appropriate by default                Attribute<org.mdpnp.devices.philips.intellivue.data.String> as = attrs.getAttribute(AttributeId.NOM_ATTR_ID_BED_LABEL,                        org.mdpnp.devices.philips.intellivue.data.String.class); Responses to our "keep alive" messages occur here Currently we track any incoming message as proof of life ... so nothing special to do here we could track gaps in poll sequence numbers but instead we're relying on consumers of the data to observe a gap in the data timestamps                        int handle = op.getHandle().getHandle();                log.info("Here begins a pollInfoList at time " + result.getRelativeTime() + " " + result.getAbsoluteTime()); log.debug(observed.toString()); TODO these were once cached, no?                                log.info("Expanding to accomodate " + cnt_sa + " samples where only " + cnt + " were expected");                                log.info("Expanding to accomodate " + cnt + " samples where " + w.getArraySize() + " were expected");  Move up to n samples from the old list to the new If we have insufficient oldSamples (shouldn't happen except maybe at initialization) fill in values If we have extra oldSamples then remove them ,    serviceSampleArrays; ok because time progressed or stayed the same Scale and range the value So actually the state transition will emit the connection info If we didn't actually transition state then this will fire the info change If we already did fire it this will be a no op For a point in time this is currentTime-runTime Or, in other words, the time when the device started according to the device clock TBD - make it handle microseconds long microseconds = time.toMicroseconds();******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ***************************************************************************** Maximum time between message receipt Assert a keepalive if no message received for this long for the 62.5Hz case we use two seconds (125 samples) In the negotiating state we are emitting association requests In the disconnecting state we are emitting association finish requests Been too long since the last message was received, revert to new association requests (Negotiation) Either side (or both) has not asserted themselves in the time required AND we haven't recently sent a keep alive message Time to request a new data poll if we were checking for confirmation of outgoing confirmed messages this would be the place to find confirmations This will capture DataExport, Association, and ConnectIndication messages... Opting not to update lastMessageREceived for ConnectIndications .. since they are beacons and not part of the session Could do something context-sensitive here when a confirmed action fails Such as when setting the priority list returns "access denied" for waveforms because another client is already receiving waves The super sends confirmations where appropriate by default                Attribute<org.mdpnp.devices.philips.intellivue.data.String> as = attrs.getAttribute(AttributeId.NOM_ATTR_ID_BED_LABEL,                        org.mdpnp.devices.philips.intellivue.data.String.class); Responses to our "keep alive" messages occur here Currently we track any incoming message as proof of life ... so nothing special to do here we could track gaps in poll sequence numbers but instead we're relying on consumers of the data to observe a gap in the data timestamps                        int handle = op.getHandle().getHandle();                log.info("Here begins a pollInfoList at time " + result.getRelativeTime() + " " + result.getAbsoluteTime()); log.debug(observed.toString()); TODO these were once cached, no?                                log.info("Expanding to accomodate " + cnt_sa + " samples where only " + cnt + " were expected");                                log.info("Expanding to accomodate " + cnt + " samples where " + w.getArraySize() + " were expected");  Move up to n samples from the old list to the new If we have insufficient oldSamples (shouldn't happen except maybe at initialization) fill in values If we have extra oldSamples then remove them ,    serviceSampleArrays; ok because time progressed or stayed the same Scale and range the value So actually the state transition will emit the connection info If we didn't actually transition state then this will fire the info change If we already did fire it this will be a no op For a point in time this is currentTime-runTime Or, in other words, the time when the device started according to the device clock TBD - make it handle microseconds long microseconds = time.toMicroseconds();