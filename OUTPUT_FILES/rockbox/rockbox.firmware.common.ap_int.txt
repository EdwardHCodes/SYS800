**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2018 by Michael A. Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Miscellaneous large-sized integer functions  round string, base 10 
     * * p should point to the digit that determines if rounding should occur
     * * buffer is updated in reverse
     * * an additional '1' may be added to the beginning: eg. 9.9 => 10.0
      nearest  even  carry to the next place  format arbitrary-precision base 10 integer 
     * * chunks are in least-to-most-significant order
     * * chunk array is used for intermediate division results
     * * digit string buffer is written high-to-low address order
      fast formatting  if top chunk(s) are zero, ignore  optimized to divide number by the biggest 10^x a uint32_t can hold
       so that r_part holds the remainder (x % 1000000000) at the end of
       the division 
             * Testing showed 29 bits as a sweet spot:
             * * Is a 32-bit constant (good for 32-bit hardware)
             * * No more normalization is required than with 30 and 31
             *   (32 bits requires the least but also a large constant)
             * * Doesn't need to be reduced before hand by subtracting the
             *   divisor in order to keep it 32-bits which obviates the need
             *   to correct with another term of the remainder after
             *   multiplying
             *
             * 2305843009 = floor(ldexp(1, 29) / 1000000000.0 * ldexp(1, 32))
              .213693952  if remainder is still out of modular range, normalize it
               and carry over into quotient  if top chunk(s) became zero, ignore from now on  format each digit chunk, padded to width 9 if not the leading one  format arbitrary-precision base 10 fraction 
     * * chunks are in least-to-most-significant order
     * * chunk array is used for intermediate multiplication results
     * * digit string buffer is written low-to-high address order
     * * high bit of fraction must be left-justified to a chunk
     *   boundary
      trim leading zeros and provide <precision> digits; a->len
           will end up greater than the specified precision unless the
           value is zero  fast formatting; shift must be <= 60 as top four bits are used
           for digit carryout  value is zero  optimized to multiply number by the biggest 10^x a uint32_t can hold
       so that c_part holds the carryover into the integer part at the end
       of the multiplication  if bottom chunk(s) are or became zero, skip them  first non-zero chunk has leading zeros?  format each digit chunk, padded to width 9 if not exceeding
           precision  remove extra digits **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2018 by Michael A. Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Miscellaneous large-sized integer functions  round string, base 10 
     * * p should point to the digit that determines if rounding should occur
     * * buffer is updated in reverse
     * * an additional '1' may be added to the beginning: eg. 9.9 => 10.0
      nearest  even  carry to the next place  format arbitrary-precision base 10 integer 
     * * chunks are in least-to-most-significant order
     * * chunk array is used for intermediate division results
     * * digit string buffer is written high-to-low address order
      fast formatting  if top chunk(s) are zero, ignore  optimized to divide number by the biggest 10^x a uint32_t can hold
       so that r_part holds the remainder (x % 1000000000) at the end of
       the division 
             * Testing showed 29 bits as a sweet spot:
             * * Is a 32-bit constant (good for 32-bit hardware)
             * * No more normalization is required than with 30 and 31
             *   (32 bits requires the least but also a large constant)
             * * Doesn't need to be reduced before hand by subtracting the
             *   divisor in order to keep it 32-bits which obviates the need
             *   to correct with another term of the remainder after
             *   multiplying
             *
             * 2305843009 = floor(ldexp(1, 29) / 1000000000.0 * ldexp(1, 32))
              .213693952  if remainder is still out of modular range, normalize it
               and carry over into quotient  if top chunk(s) became zero, ignore from now on  format each digit chunk, padded to width 9 if not the leading one  format arbitrary-precision base 10 fraction 
     * * chunks are in least-to-most-significant order
     * * chunk array is used for intermediate multiplication results
     * * digit string buffer is written low-to-high address order
     * * high bit of fraction must be left-justified to a chunk
     *   boundary
      trim leading zeros and provide <precision> digits; a->len
           will end up greater than the specified precision unless the
           value is zero  fast formatting; shift must be <= 60 as top four bits are used
           for digit carryout  value is zero  optimized to multiply number by the biggest 10^x a uint32_t can hold
       so that c_part holds the carryover into the integer part at the end
       of the multiplication  if bottom chunk(s) are or became zero, skip them  first non-zero chunk has leading zeros?  format each digit chunk, padded to width 9 if not exceeding
           precision  remove extra digits **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2018 by Michael A. Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Miscellaneous large-sized integer functions  round string, base 10 
     * * p should point to the digit that determines if rounding should occur
     * * buffer is updated in reverse
     * * an additional '1' may be added to the beginning: eg. 9.9 => 10.0
      nearest  even  carry to the next place  format arbitrary-precision base 10 integer 
     * * chunks are in least-to-most-significant order
     * * chunk array is used for intermediate division results
     * * digit string buffer is written high-to-low address order
      fast formatting  if top chunk(s) are zero, ignore  optimized to divide number by the biggest 10^x a uint32_t can hold
       so that r_part holds the remainder (x % 1000000000) at the end of
       the division 
             * Testing showed 29 bits as a sweet spot:
             * * Is a 32-bit constant (good for 32-bit hardware)
             * * No more normalization is required than with 30 and 31
             *   (32 bits requires the least but also a large constant)
             * * Doesn't need to be reduced before hand by subtracting the
             *   divisor in order to keep it 32-bits which obviates the need
             *   to correct with another term of the remainder after
             *   multiplying
             *
             * 2305843009 = floor(ldexp(1, 29) / 1000000000.0 * ldexp(1, 32))
              .213693952  if remainder is still out of modular range, normalize it
               and carry over into quotient  if top chunk(s) became zero, ignore from now on  format each digit chunk, padded to width 9 if not the leading one  format arbitrary-precision base 10 fraction 
     * * chunks are in least-to-most-significant order
     * * chunk array is used for intermediate multiplication results
     * * digit string buffer is written low-to-high address order
     * * high bit of fraction must be left-justified to a chunk
     *   boundary
      trim leading zeros and provide <precision> digits; a->len
           will end up greater than the specified precision unless the
           value is zero  fast formatting; shift must be <= 60 as top four bits are used
           for digit carryout  value is zero  optimized to multiply number by the biggest 10^x a uint32_t can hold
       so that c_part holds the carryover into the integer part at the end
       of the multiplication  if bottom chunk(s) are or became zero, skip them  first non-zero chunk has leading zeros?  format each digit chunk, padded to width 9 if not exceeding
           precision  remove extra digits 