 Game_Music_Emu 0.6-pre. http://www.slack.net/~ant/ Copyright (C) 2006-2008 Shay Green. This module is free software; you
can redistribute it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version. This
module is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
details. You should have received a copy of the GNU Lesser General Public
License along with this module; if not, write to the Free Software Foundation,
Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA  Emulation inaccuracies: * Noise isn't run when not in use * Changes to envelope and noise periods are delayed until next reload * Super-sonic tone should attenuate output to about 60%, not 50% Tones above this frequency are treated as disabled tone at half volume. Power of two is more efficient (avoids division). With channels tied together and 1K resistor to ground (as datasheet recommends), output nearly matches logarithmic curve as claimed. Approx. 1.5 dB per step.
	// Measured from an AY-3-8910A chip with date code 8611.
	
	// Direct voltages without any load (very linear)
	ENTRY(0.000000),ENTRY(0.046237),ENTRY(0.064516),ENTRY(0.089785),
	ENTRY(0.124731),ENTRY(0.173118),ENTRY(0.225806),ENTRY(0.329032),
	ENTRY(0.360215),ENTRY(0.494624),ENTRY(0.594624),ENTRY(0.672043),
	ENTRY(0.766129),ENTRY(0.841935),ENTRY(0.926882),ENTRY(1.000000),
	// With only some load
	ENTRY(0.000000),ENTRY(0.011940),ENTRY(0.017413),ENTRY(0.024876),
	ENTRY(0.036318),ENTRY(0.054229),ENTRY(0.072637),ENTRY(0.122388),
	ENTRY(0.174129),ENTRY(0.239303),ENTRY(0.323881),ENTRY(0.410945),
	ENTRY(0.527363),ENTRY(0.651741),ENTRY(0.832338),ENTRY(1.000000),
	 build full table of the upper 8 envelope waveforms if ( (unsigned) addr >= 14 )
		dprintf( "Wrote to I/O port %02X\n", (int) addr );  envelope mode convert modes 0-7 to proper equivalents will get set to envelope period in run_until() handle period changes accurately adjust time of next timer expiration based on change in period TODO: same as above for envelope timer, and it also has a divide by two after it noise period and initial values verified envelope period verified same as period 1 on my AY chip run each osc separately output period Actually around 60%, but 50% is close enough envelope use envelope only if it's a repeating wave or a ramp that hasn't finishedif ( !(regs [12] | regs [11]) )  dprintf( "Used envelope period 0\n" ); tone time maintain tone's phase when off noise timeif ( (regs [6] & 0x1F) == 0 )  dprintf( "Used noise period 0\n" ); The following efficiently handles several cases (least demanding first): * Tone, noise, and envelope disabled, where channel acts as 4-bit DAC * Just tone or just noise, envelope disabled * Envelope controlling tone and/or noise * Tone and noise disabled, envelope enabled with high frequency * Tone and noise together * Tone and noise together with envelope this loop only runs one iteration if envelope is disabled. If envelope is being used as a waveform (tone and noise disabled), this loop will still be reasonably efficient since the bulk of it will be skipped. current amplitude Run wave and noise interleved with each catching up to the other. If one or both are disabled, their "current time" will be past end time, so there will be no significant performance hit. Since amplitude was updated above, delta will always be +/- volume, so we can avoid using last_amp every time to calculate the delta. run noise must advance *past* time to avoid hang 20 or more noise periods on average for some music run tone alternate (less-efficient) implementationphase ^= 1; loop usually runs less than onceSUB_CASE_COUNTER( (time < end) * (end - time + period - 1) / period ); breaks first time when envelope is disabled next envelope step TODO: optimized saw wave envelope? maintain envelope phase Game_Music_Emu 0.6-pre. http://www.slack.net/~ant/ Copyright (C) 2006-2008 Shay Green. This module is free software; you
can redistribute it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version. This
module is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
details. You should have received a copy of the GNU Lesser General Public
License along with this module; if not, write to the Free Software Foundation,
Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA  Emulation inaccuracies: * Noise isn't run when not in use * Changes to envelope and noise periods are delayed until next reload * Super-sonic tone should attenuate output to about 60%, not 50% Tones above this frequency are treated as disabled tone at half volume. Power of two is more efficient (avoids division). With channels tied together and 1K resistor to ground (as datasheet recommends), output nearly matches logarithmic curve as claimed. Approx. 1.5 dB per step.
	// Measured from an AY-3-8910A chip with date code 8611.
	
	// Direct voltages without any load (very linear)
	ENTRY(0.000000),ENTRY(0.046237),ENTRY(0.064516),ENTRY(0.089785),
	ENTRY(0.124731),ENTRY(0.173118),ENTRY(0.225806),ENTRY(0.329032),
	ENTRY(0.360215),ENTRY(0.494624),ENTRY(0.594624),ENTRY(0.672043),
	ENTRY(0.766129),ENTRY(0.841935),ENTRY(0.926882),ENTRY(1.000000),
	// With only some load
	ENTRY(0.000000),ENTRY(0.011940),ENTRY(0.017413),ENTRY(0.024876),
	ENTRY(0.036318),ENTRY(0.054229),ENTRY(0.072637),ENTRY(0.122388),
	ENTRY(0.174129),ENTRY(0.239303),ENTRY(0.323881),ENTRY(0.410945),
	ENTRY(0.527363),ENTRY(0.651741),ENTRY(0.832338),ENTRY(1.000000),
	 build full table of the upper 8 envelope waveforms if ( (unsigned) addr >= 14 )
		dprintf( "Wrote to I/O port %02X\n", (int) addr );  envelope mode convert modes 0-7 to proper equivalents will get set to envelope period in run_until() handle period changes accurately adjust time of next timer expiration based on change in period TODO: same as above for envelope timer, and it also has a divide by two after it noise period and initial values verified envelope period verified same as period 1 on my AY chip run each osc separately output period Actually around 60%, but 50% is close enough envelope use envelope only if it's a repeating wave or a ramp that hasn't finishedif ( !(regs [12] | regs [11]) )  dprintf( "Used envelope period 0\n" ); tone time maintain tone's phase when off noise timeif ( (regs [6] & 0x1F) == 0 )  dprintf( "Used noise period 0\n" ); The following efficiently handles several cases (least demanding first): * Tone, noise, and envelope disabled, where channel acts as 4-bit DAC * Just tone or just noise, envelope disabled * Envelope controlling tone and/or noise * Tone and noise disabled, envelope enabled with high frequency * Tone and noise together * Tone and noise together with envelope this loop only runs one iteration if envelope is disabled. If envelope is being used as a waveform (tone and noise disabled), this loop will still be reasonably efficient since the bulk of it will be skipped. current amplitude Run wave and noise interleved with each catching up to the other. If one or both are disabled, their "current time" will be past end time, so there will be no significant performance hit. Since amplitude was updated above, delta will always be +/- volume, so we can avoid using last_amp every time to calculate the delta. run noise must advance *past* time to avoid hang 20 or more noise periods on average for some music run tone alternate (less-efficient) implementationphase ^= 1; loop usually runs less than onceSUB_CASE_COUNTER( (time < end) * (end - time + period - 1) / period ); breaks first time when envelope is disabled next envelope step TODO: optimized saw wave envelope? maintain envelope phase Game_Music_Emu 0.6-pre. http://www.slack.net/~ant/ Copyright (C) 2006-2008 Shay Green. This module is free software; you
can redistribute it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version. This
module is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
details. You should have received a copy of the GNU Lesser General Public
License along with this module; if not, write to the Free Software Foundation,
Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA  Emulation inaccuracies: * Noise isn't run when not in use * Changes to envelope and noise periods are delayed until next reload * Super-sonic tone should attenuate output to about 60%, not 50% Tones above this frequency are treated as disabled tone at half volume. Power of two is more efficient (avoids division). With channels tied together and 1K resistor to ground (as datasheet recommends), output nearly matches logarithmic curve as claimed. Approx. 1.5 dB per step.
	// Measured from an AY-3-8910A chip with date code 8611.
	
	// Direct voltages without any load (very linear)
	ENTRY(0.000000),ENTRY(0.046237),ENTRY(0.064516),ENTRY(0.089785),
	ENTRY(0.124731),ENTRY(0.173118),ENTRY(0.225806),ENTRY(0.329032),
	ENTRY(0.360215),ENTRY(0.494624),ENTRY(0.594624),ENTRY(0.672043),
	ENTRY(0.766129),ENTRY(0.841935),ENTRY(0.926882),ENTRY(1.000000),
	// With only some load
	ENTRY(0.000000),ENTRY(0.011940),ENTRY(0.017413),ENTRY(0.024876),
	ENTRY(0.036318),ENTRY(0.054229),ENTRY(0.072637),ENTRY(0.122388),
	ENTRY(0.174129),ENTRY(0.239303),ENTRY(0.323881),ENTRY(0.410945),
	ENTRY(0.527363),ENTRY(0.651741),ENTRY(0.832338),ENTRY(1.000000),
	 build full table of the upper 8 envelope waveforms if ( (unsigned) addr >= 14 )
		dprintf( "Wrote to I/O port %02X\n", (int) addr );  envelope mode convert modes 0-7 to proper equivalents will get set to envelope period in run_until() handle period changes accurately adjust time of next timer expiration based on change in period TODO: same as above for envelope timer, and it also has a divide by two after it noise period and initial values verified envelope period verified same as period 1 on my AY chip run each osc separately output period Actually around 60%, but 50% is close enough envelope use envelope only if it's a repeating wave or a ramp that hasn't finishedif ( !(regs [12] | regs [11]) )  dprintf( "Used envelope period 0\n" ); tone time maintain tone's phase when off noise timeif ( (regs [6] & 0x1F) == 0 )  dprintf( "Used noise period 0\n" ); The following efficiently handles several cases (least demanding first): * Tone, noise, and envelope disabled, where channel acts as 4-bit DAC * Just tone or just noise, envelope disabled * Envelope controlling tone and/or noise * Tone and noise disabled, envelope enabled with high frequency * Tone and noise together * Tone and noise together with envelope this loop only runs one iteration if envelope is disabled. If envelope is being used as a waveform (tone and noise disabled), this loop will still be reasonably efficient since the bulk of it will be skipped. current amplitude Run wave and noise interleved with each catching up to the other. If one or both are disabled, their "current time" will be past end time, so there will be no significant performance hit. Since amplitude was updated above, delta will always be +/- volume, so we can avoid using last_amp every time to calculate the delta. run noise must advance *past* time to avoid hang 20 or more noise periods on average for some music run tone alternate (less-efficient) implementationphase ^= 1; loop usually runs less than onceSUB_CASE_COUNTER( (time < end) * (end - time + period - 1) / period ); breaks first time when envelope is disabled next envelope step TODO: optimized saw wave envelope? maintain envelope phase