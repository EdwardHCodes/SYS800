 Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *      Handles WAD file header, directory, lump I/O.
 *
 *-----------------------------------------------------------------------------
  GLOBALS Location of each lump on disk. killough killough cph
     struct stat   fileinfo;
     if (fstat(handle,&fileinfo) == -1)
       I_Error("W_Filelength: Error fstating");
     return fileinfo.st_size;
    back up until a \ or the start killough 3/22/98: allow c:filename copy up to eight characters cph - length check removed, just truncate at 8 chars.
    * If there are 8 or more chars, we'll copy 8, and no zero termination
     1/18/98 killough: adds a default extension to a path Note: Backslashes are treated specially, for MS-DOS. LUMP BASED ROUTINES. W_AddFile All files are optional, but at least one file must be  found (PWAD, if all required lumps are present). Files with a .wad extension are wadlink files  with multiple lumps. Other files are single lumps with the base filename  for the lump name. Reload hack removed by Lee Killough CPhipps - source is an enum killough 1/31/98: static, constkillough open the file and add to directory CPhipps add error check -- killoughjff 8/3/98 use logical output routine single lump file WAD file killough Fill in lumpinfo  killough 4/25/98 killough 1/31/98 killough 4/17/98 Ty 08/29/98 CPhipps - initialise locks killough jff 1/23/98 Create routines to reorder the master directory putting all flats into one marked block, and all sprites into another. This will allow loading of sprites and flats from a PWAD with no other changes to code, particularly fast hashes of the lumps. killough 1/24/98 modified routines to be a little faster and smaller killough 4/17/98: add namespace tags start marker found If this is the first start marker, add start marker to marked lumps killough 3/20/98: force size to be 0 killough 4/17/98 start marking lumps end marker found add end marker below stop marking lumps if we are marking lumps, move lump to marked list killough 4/17/98 else move down THIS list Append marked list to end of unmarked list free marked list new total number of lumps add end marker killough 3/20/98: force size to be 0 killough 4/17/98 Hash function used for lump names. Must be mod'ed with table size. Can be used for any 8-character names. by Lee Killough W_CheckNumForName Returns -1 if name not found. Rewritten by Lee Killough to use hash table for performance. Significantly cuts down on time -- increases Doom performance over 300%. This is the single most important optimization of the original Doom sources, because lump name lookup is used so often, and the original Doom used a sequential search. For large wads with > 1000 lumps this meant an average of over 500 were probed during every search. Now the average is under 2 probes per search. There is no significant benefit to packing the names into longwords with this new hashing algorithm, because the work to do the packing is just as much work as simply doing the string comparisons with the new algorithm, which minimizes the expected number of comparisons to under 2. killough 4/17/98: add namespace parameter to prevent collisions between different resources such as flats, sprites, colormaps Hash function maps the name to one of possibly numlump chains. It has been tuned so that the average chain length never exceeds 2. We search along the chain until end, looking for case-insensitive matches which also match a namespace tag. Separate hash tables are not used for each namespace, because the performance benefit is not worth the overhead, considering namespace collisions are rare in Doom wads. Return the matching lump, or -1 if none found. killough 1/31/98: Initialize lump hash table mark slots empty Insert nodes to the beginning of each chain, in first-to-last lump order, so that the last lump of a given name appears first in any chain, observing pwad ordering rules. killough hash function: Prepend to list End of lump hashing -- killough 1/31/98 W_GetNumForName Calls W_CheckNumForName, but bombs out if not found. killough -- const added W_Init Loads each of the files in the wadfiles array. All files are optional, but at least one file  must be found. Files with a .wad extension are idlink files  with multiple lumps. Other files are single lumps with the base filename  for the lump name. Lump names can appear multiple times. The name searcher looks backwards, so a later file  does override all earlier ones. CPhipps - modified to use the new wadfiles array CPhipps - size of the wadfiles array (dynamic, no limit) killough 1/31/98: add predefined lumps first lumpinfo will be realloced as lumps are added Ty 08/29/98 - add source flag to the predefined lumps CPhipps - start with nothing CPhipps - new wadfiles array used open all the files, load headers, and count lumpsjff 1/23/98 get all the sprites and flats into one marked block each killough 1/24/98: change interface to use M_START/M_END explicitly killough 4/17/98: Add namespace tags to each entry killough 4/4/98: add colormap markers set up caching killough killough 1/31/98: initialize lump hash table cph - allocate space for lock time diagnostics W_LumpLength Returns the buffer size needed to load the given lump. W_ReadLump Loads the lump into the given buffer,  which must be >= W_LumpLength(). killough 1/31/98: predefined lump data killough 1/31/98: Reload hack (-wart) removed W_CacheLumpNum
 * killough 4/25/98: simplified
 * CPhipps - modified for new lump locking scheme
 *           returns a const*
  read the lump in cph - if wasn't locked but now is, tell z_zone to hold it  CPhipps - if not locked, can't give you a pointer cph -
 * W_CacheLumpNumPadded
 *
 * Caches a lump and pads the memory following it.
 * The thing returned is *only* guaranteed to be padded if
 *  the lump isn't already cached (otherwise, you get whatever is
 *  currently cached, which if it was cached by a previous call
 *  to this will also be padded)
  read the lump in  cph - if wasn't locked but now is, tell z_zone to hold it  W_UnlockLumpNum CPhipps - this changes (should reduce) the number of locks on a lump cph - Note: must only tell z_zone to make purgeable if currently locked, else it might already have been purged W_CacheLumpName macroized in w_wad.h -- killough WritePredefinedLumpWad Args: Filename - string with filename to write to Returns: void If the user puts a -dumplumps switch on the command line, we will write all those predefined lumps above out into a pwad.  User supplies the pwad name. killough 4/22/98: make endian-independent, remove tab chars for file open we may have to add ".wad" to the name they pass check for null pointer or empty name early return The following code writes a PWAD from the predefined lumps array How to write a PWAD will not be explained here. proff: In Visual C open is defined a bit different write header write directory write lumps Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *      Handles WAD file header, directory, lump I/O.
 *
 *-----------------------------------------------------------------------------
  GLOBALS Location of each lump on disk. killough killough cph
     struct stat   fileinfo;
     if (fstat(handle,&fileinfo) == -1)
       I_Error("W_Filelength: Error fstating");
     return fileinfo.st_size;
    back up until a \ or the start killough 3/22/98: allow c:filename copy up to eight characters cph - length check removed, just truncate at 8 chars.
    * If there are 8 or more chars, we'll copy 8, and no zero termination
     1/18/98 killough: adds a default extension to a path Note: Backslashes are treated specially, for MS-DOS. LUMP BASED ROUTINES. W_AddFile All files are optional, but at least one file must be  found (PWAD, if all required lumps are present). Files with a .wad extension are wadlink files  with multiple lumps. Other files are single lumps with the base filename  for the lump name. Reload hack removed by Lee Killough CPhipps - source is an enum killough 1/31/98: static, constkillough open the file and add to directory CPhipps add error check -- killoughjff 8/3/98 use logical output routine single lump file WAD file killough Fill in lumpinfo  killough 4/25/98 killough 1/31/98 killough 4/17/98 Ty 08/29/98 CPhipps - initialise locks killough jff 1/23/98 Create routines to reorder the master directory putting all flats into one marked block, and all sprites into another. This will allow loading of sprites and flats from a PWAD with no other changes to code, particularly fast hashes of the lumps. killough 1/24/98 modified routines to be a little faster and smaller killough 4/17/98: add namespace tags start marker found If this is the first start marker, add start marker to marked lumps killough 3/20/98: force size to be 0 killough 4/17/98 start marking lumps end marker found add end marker below stop marking lumps if we are marking lumps, move lump to marked list killough 4/17/98 else move down THIS list Append marked list to end of unmarked list free marked list new total number of lumps add end marker killough 3/20/98: force size to be 0 killough 4/17/98 Hash function used for lump names. Must be mod'ed with table size. Can be used for any 8-character names. by Lee Killough W_CheckNumForName Returns -1 if name not found. Rewritten by Lee Killough to use hash table for performance. Significantly cuts down on time -- increases Doom performance over 300%. This is the single most important optimization of the original Doom sources, because lump name lookup is used so often, and the original Doom used a sequential search. For large wads with > 1000 lumps this meant an average of over 500 were probed during every search. Now the average is under 2 probes per search. There is no significant benefit to packing the names into longwords with this new hashing algorithm, because the work to do the packing is just as much work as simply doing the string comparisons with the new algorithm, which minimizes the expected number of comparisons to under 2. killough 4/17/98: add namespace parameter to prevent collisions between different resources such as flats, sprites, colormaps Hash function maps the name to one of possibly numlump chains. It has been tuned so that the average chain length never exceeds 2. We search along the chain until end, looking for case-insensitive matches which also match a namespace tag. Separate hash tables are not used for each namespace, because the performance benefit is not worth the overhead, considering namespace collisions are rare in Doom wads. Return the matching lump, or -1 if none found. killough 1/31/98: Initialize lump hash table mark slots empty Insert nodes to the beginning of each chain, in first-to-last lump order, so that the last lump of a given name appears first in any chain, observing pwad ordering rules. killough hash function: Prepend to list End of lump hashing -- killough 1/31/98 W_GetNumForName Calls W_CheckNumForName, but bombs out if not found. killough -- const added W_Init Loads each of the files in the wadfiles array. All files are optional, but at least one file  must be found. Files with a .wad extension are idlink files  with multiple lumps. Other files are single lumps with the base filename  for the lump name. Lump names can appear multiple times. The name searcher looks backwards, so a later file  does override all earlier ones. CPhipps - modified to use the new wadfiles array CPhipps - size of the wadfiles array (dynamic, no limit) killough 1/31/98: add predefined lumps first lumpinfo will be realloced as lumps are added Ty 08/29/98 - add source flag to the predefined lumps CPhipps - start with nothing CPhipps - new wadfiles array used open all the files, load headers, and count lumpsjff 1/23/98 get all the sprites and flats into one marked block each killough 1/24/98: change interface to use M_START/M_END explicitly killough 4/17/98: Add namespace tags to each entry killough 4/4/98: add colormap markers set up caching killough killough 1/31/98: initialize lump hash table cph - allocate space for lock time diagnostics W_LumpLength Returns the buffer size needed to load the given lump. W_ReadLump Loads the lump into the given buffer,  which must be >= W_LumpLength(). killough 1/31/98: predefined lump data killough 1/31/98: Reload hack (-wart) removed W_CacheLumpNum
 * killough 4/25/98: simplified
 * CPhipps - modified for new lump locking scheme
 *           returns a const*
  read the lump in cph - if wasn't locked but now is, tell z_zone to hold it  CPhipps - if not locked, can't give you a pointer cph -
 * W_CacheLumpNumPadded
 *
 * Caches a lump and pads the memory following it.
 * The thing returned is *only* guaranteed to be padded if
 *  the lump isn't already cached (otherwise, you get whatever is
 *  currently cached, which if it was cached by a previous call
 *  to this will also be padded)
  read the lump in  cph - if wasn't locked but now is, tell z_zone to hold it  W_UnlockLumpNum CPhipps - this changes (should reduce) the number of locks on a lump cph - Note: must only tell z_zone to make purgeable if currently locked, else it might already have been purged W_CacheLumpName macroized in w_wad.h -- killough WritePredefinedLumpWad Args: Filename - string with filename to write to Returns: void If the user puts a -dumplumps switch on the command line, we will write all those predefined lumps above out into a pwad.  User supplies the pwad name. killough 4/22/98: make endian-independent, remove tab chars for file open we may have to add ".wad" to the name they pass check for null pointer or empty name early return The following code writes a PWAD from the predefined lumps array How to write a PWAD will not be explained here. proff: In Visual C open is defined a bit different write header write directory write lumps Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *      Handles WAD file header, directory, lump I/O.
 *
 *-----------------------------------------------------------------------------
  GLOBALS Location of each lump on disk. killough killough cph
     struct stat   fileinfo;
     if (fstat(handle,&fileinfo) == -1)
       I_Error("W_Filelength: Error fstating");
     return fileinfo.st_size;
    back up until a \ or the start killough 3/22/98: allow c:filename copy up to eight characters cph - length check removed, just truncate at 8 chars.
    * If there are 8 or more chars, we'll copy 8, and no zero termination
     1/18/98 killough: adds a default extension to a path Note: Backslashes are treated specially, for MS-DOS. LUMP BASED ROUTINES. W_AddFile All files are optional, but at least one file must be  found (PWAD, if all required lumps are present). Files with a .wad extension are wadlink files  with multiple lumps. Other files are single lumps with the base filename  for the lump name. Reload hack removed by Lee Killough CPhipps - source is an enum killough 1/31/98: static, constkillough open the file and add to directory CPhipps add error check -- killoughjff 8/3/98 use logical output routine single lump file WAD file killough Fill in lumpinfo  killough 4/25/98 killough 1/31/98 killough 4/17/98 Ty 08/29/98 CPhipps - initialise locks killough jff 1/23/98 Create routines to reorder the master directory putting all flats into one marked block, and all sprites into another. This will allow loading of sprites and flats from a PWAD with no other changes to code, particularly fast hashes of the lumps. killough 1/24/98 modified routines to be a little faster and smaller killough 4/17/98: add namespace tags start marker found If this is the first start marker, add start marker to marked lumps killough 3/20/98: force size to be 0 killough 4/17/98 start marking lumps end marker found add end marker below stop marking lumps if we are marking lumps, move lump to marked list killough 4/17/98 else move down THIS list Append marked list to end of unmarked list free marked list new total number of lumps add end marker killough 3/20/98: force size to be 0 killough 4/17/98 Hash function used for lump names. Must be mod'ed with table size. Can be used for any 8-character names. by Lee Killough W_CheckNumForName Returns -1 if name not found. Rewritten by Lee Killough to use hash table for performance. Significantly cuts down on time -- increases Doom performance over 300%. This is the single most important optimization of the original Doom sources, because lump name lookup is used so often, and the original Doom used a sequential search. For large wads with > 1000 lumps this meant an average of over 500 were probed during every search. Now the average is under 2 probes per search. There is no significant benefit to packing the names into longwords with this new hashing algorithm, because the work to do the packing is just as much work as simply doing the string comparisons with the new algorithm, which minimizes the expected number of comparisons to under 2. killough 4/17/98: add namespace parameter to prevent collisions between different resources such as flats, sprites, colormaps Hash function maps the name to one of possibly numlump chains. It has been tuned so that the average chain length never exceeds 2. We search along the chain until end, looking for case-insensitive matches which also match a namespace tag. Separate hash tables are not used for each namespace, because the performance benefit is not worth the overhead, considering namespace collisions are rare in Doom wads. Return the matching lump, or -1 if none found. killough 1/31/98: Initialize lump hash table mark slots empty Insert nodes to the beginning of each chain, in first-to-last lump order, so that the last lump of a given name appears first in any chain, observing pwad ordering rules. killough hash function: Prepend to list End of lump hashing -- killough 1/31/98 W_GetNumForName Calls W_CheckNumForName, but bombs out if not found. killough -- const added W_Init Loads each of the files in the wadfiles array. All files are optional, but at least one file  must be found. Files with a .wad extension are idlink files  with multiple lumps. Other files are single lumps with the base filename  for the lump name. Lump names can appear multiple times. The name searcher looks backwards, so a later file  does override all earlier ones. CPhipps - modified to use the new wadfiles array CPhipps - size of the wadfiles array (dynamic, no limit) killough 1/31/98: add predefined lumps first lumpinfo will be realloced as lumps are added Ty 08/29/98 - add source flag to the predefined lumps CPhipps - start with nothing CPhipps - new wadfiles array used open all the files, load headers, and count lumpsjff 1/23/98 get all the sprites and flats into one marked block each killough 1/24/98: change interface to use M_START/M_END explicitly killough 4/17/98: Add namespace tags to each entry killough 4/4/98: add colormap markers set up caching killough killough 1/31/98: initialize lump hash table cph - allocate space for lock time diagnostics W_LumpLength Returns the buffer size needed to load the given lump. W_ReadLump Loads the lump into the given buffer,  which must be >= W_LumpLength(). killough 1/31/98: predefined lump data killough 1/31/98: Reload hack (-wart) removed W_CacheLumpNum
 * killough 4/25/98: simplified
 * CPhipps - modified for new lump locking scheme
 *           returns a const*
  read the lump in cph - if wasn't locked but now is, tell z_zone to hold it  CPhipps - if not locked, can't give you a pointer cph -
 * W_CacheLumpNumPadded
 *
 * Caches a lump and pads the memory following it.
 * The thing returned is *only* guaranteed to be padded if
 *  the lump isn't already cached (otherwise, you get whatever is
 *  currently cached, which if it was cached by a previous call
 *  to this will also be padded)
  read the lump in  cph - if wasn't locked but now is, tell z_zone to hold it  W_UnlockLumpNum CPhipps - this changes (should reduce) the number of locks on a lump cph - Note: must only tell z_zone to make purgeable if currently locked, else it might already have been purged W_CacheLumpName macroized in w_wad.h -- killough WritePredefinedLumpWad Args: Filename - string with filename to write to Returns: void If the user puts a -dumplumps switch on the command line, we will write all those predefined lumps above out into a pwad.  User supplies the pwad name. killough 4/22/98: make endian-independent, remove tab chars for file open we may have to add ".wad" to the name they pass check for null pointer or empty name early return The following code writes a PWAD from the predefined lumps array How to write a PWAD will not be explained here. proff: In Visual C open is defined a bit different write header write directory write lumps