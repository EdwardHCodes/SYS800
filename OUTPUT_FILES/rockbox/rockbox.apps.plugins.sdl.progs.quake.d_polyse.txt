
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 d_polyset.c: routines for drawing sets of polygons sharing the same texture (used for Alias models) TODO: put in span spilling to shrink list size !!! if this is changed, it must be changed in d_polysa.s too !!! 1 extra for spanpackage that marks end !!! if this is changed, it must be changed in asm_draw.h too !!! FIXME: some of these can become statics
================
D_PolysetDraw
================
 one extra because of cache line pretouchingJB: OptimizationDan East: May result in image quality loss. Actual performance gain not verified. one extra because of cache line pretouching
================
D_PolysetDrawFinalVerts
================
 valid triangle coordinates for filling can include the bottom and right clip edges, due to the fill rule; these shouldn't be drawn
================
D_DrawSubdiv
================

================
D_DrawNonSubdiv
================
 u v s t light iz
================
D_PolysetRecursiveTriangle
================
 entire tri is filled split this edge draw the point if splitting a leading edge recursively continue !id386
================
D_PolysetUpdateTables
================

===================
D_PolysetScanLeftEdge
====================
 FIXME: need to clamp l, s, t, at both ends? !id386
===================
D_PolysetSetUpForLineScan
====================
 TODO: implement x86 version
================
D_PolysetCalcGradients
================
 ceil () for light so positive steps are exaggerated, negative steps diminished,  pushing us away from underflow toward overflow. Underflow is very visible, overflow is very unlikely, because of ambient lightingDan East: Fixed point conversionfloat xstepdenominv = (float)(1.0 / (float)d_xdenom);float ystepdenominv = -xstepdenominv; int checkx, checky;xstepdenominv = d_xdenom;ystepdenominv = -xstepdenominv; TODO: Ceil has been removed
	checkx = (int)ceil((t1 * p01_minus_p21 - t0 * p11_minus_p21) * xstepdenominv);
	checky = (int)ceil((t1 * p00_minus_p20 - t0 * p10_minus_p20) * ystepdenominv);
	if (checkx-r_lstepx>1||checkx-r_lstepx<-1) 
		r_lstepx=r_lstepx;
	if (checky-r_lstepy>1||checky-r_lstepy<-1) 
		r_lstepy=r_lstepy;
	
	checkx = (int)((t1 * p01_minus_p21 - t0 * p11_minus_p21) * xstepdenominv);
	checky = (int)((t1 * p00_minus_p20 - t0* p10_minus_p20) * ystepdenominv);
	if (checkx-r_sstepx>1||checkx-r_sstepx<-1) 
		r_lstepx=r_lstepx;
	if (checky-r_sstepy>1||checky-r_sstepy<-1) 
		r_lstepy=r_lstepy;
	
	checkx = (int)((t1 * p01_minus_p21 - t0 * p11_minus_p21) * xstepdenominv);
	checky = (int)((t1 * p00_minus_p20 - t0 * p10_minus_p20) * ystepdenominv);
	if (checkx-r_tstepx>1||checkx-r_tstepx<-1) 
		r_lstepx=r_lstepx;
	if (checky-r_tstepy>1||checky-r_tstepy<-1) 
		r_lstepy=r_lstepy;
	
	checkx = (int)((t1 * p01_minus_p21 - t0 * p11_minus_p21) * xstepdenominv);
	checky = (int)((t1 * p00_minus_p20 - t0 * p10_minus_p20) * ystepdenominv);
	if (checkx-r_zistepx>1||checkx-r_zistepx<-1) 
		r_lstepx=checkx;
	if (checky-r_zistepy>1||checky-r_zistepy<-1) 
		r_lstepy=checky;
	 !id386		r = (palette[i*3]>>4); 64 
================
D_PolysetDrawSpans8
================
 gel mapping					*lpdest = gelmap[*lpdest]; !id386
================
D_PolysetFillSpans8
================
 FIXME: do z buffering
================
D_RasterizeAliasPolySmooth
================
 set the s, t, and light gradients, which are consistent across the triangle because being a triangle, things are affine rasterize the polygon scan out the top (and possibly only) part of the left edge FIXME: need to clamp l, s, t, at both ends? TODO: can reuse partial expressions here for negative steps in x along left edge, bias toward overflow rather than underflow (sort of turning the floor () we did in the gradient calcs into ceil (), but plus a little bit) scan out the bottom part of the left edge, if it exists TODO: make this a function; modularize this function in general FIXME: need to clamp l, s, t, at both ends? scan out the top (and possibly only) part of the right edge, updating the count field mark end of the spanpackages scan out the bottom part of the right edge, if it exists mark end of the spanpackages
================
D_PolysetSetEdgeTable
================
 assume the vertices are already in  top to bottom order determine which edges are right & left, and the order in which to rasterize them line is completed split this edge draw the point		pix = ((byte *)acolormap)[pix + (new[4] & 0xFF00)]; recursively continue split this edge recursively continue
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 d_polyset.c: routines for drawing sets of polygons sharing the same texture (used for Alias models) TODO: put in span spilling to shrink list size !!! if this is changed, it must be changed in d_polysa.s too !!! 1 extra for spanpackage that marks end !!! if this is changed, it must be changed in asm_draw.h too !!! FIXME: some of these can become statics
================
D_PolysetDraw
================
 one extra because of cache line pretouchingJB: OptimizationDan East: May result in image quality loss. Actual performance gain not verified. one extra because of cache line pretouching
================
D_PolysetDrawFinalVerts
================
 valid triangle coordinates for filling can include the bottom and right clip edges, due to the fill rule; these shouldn't be drawn
================
D_DrawSubdiv
================

================
D_DrawNonSubdiv
================
 u v s t light iz
================
D_PolysetRecursiveTriangle
================
 entire tri is filled split this edge draw the point if splitting a leading edge recursively continue !id386
================
D_PolysetUpdateTables
================

===================
D_PolysetScanLeftEdge
====================
 FIXME: need to clamp l, s, t, at both ends? !id386
===================
D_PolysetSetUpForLineScan
====================
 TODO: implement x86 version
================
D_PolysetCalcGradients
================
 ceil () for light so positive steps are exaggerated, negative steps diminished,  pushing us away from underflow toward overflow. Underflow is very visible, overflow is very unlikely, because of ambient lightingDan East: Fixed point conversionfloat xstepdenominv = (float)(1.0 / (float)d_xdenom);float ystepdenominv = -xstepdenominv; int checkx, checky;xstepdenominv = d_xdenom;ystepdenominv = -xstepdenominv; TODO: Ceil has been removed
	checkx = (int)ceil((t1 * p01_minus_p21 - t0 * p11_minus_p21) * xstepdenominv);
	checky = (int)ceil((t1 * p00_minus_p20 - t0 * p10_minus_p20) * ystepdenominv);
	if (checkx-r_lstepx>1||checkx-r_lstepx<-1) 
		r_lstepx=r_lstepx;
	if (checky-r_lstepy>1||checky-r_lstepy<-1) 
		r_lstepy=r_lstepy;
	
	checkx = (int)((t1 * p01_minus_p21 - t0 * p11_minus_p21) * xstepdenominv);
	checky = (int)((t1 * p00_minus_p20 - t0* p10_minus_p20) * ystepdenominv);
	if (checkx-r_sstepx>1||checkx-r_sstepx<-1) 
		r_lstepx=r_lstepx;
	if (checky-r_sstepy>1||checky-r_sstepy<-1) 
		r_lstepy=r_lstepy;
	
	checkx = (int)((t1 * p01_minus_p21 - t0 * p11_minus_p21) * xstepdenominv);
	checky = (int)((t1 * p00_minus_p20 - t0 * p10_minus_p20) * ystepdenominv);
	if (checkx-r_tstepx>1||checkx-r_tstepx<-1) 
		r_lstepx=r_lstepx;
	if (checky-r_tstepy>1||checky-r_tstepy<-1) 
		r_lstepy=r_lstepy;
	
	checkx = (int)((t1 * p01_minus_p21 - t0 * p11_minus_p21) * xstepdenominv);
	checky = (int)((t1 * p00_minus_p20 - t0 * p10_minus_p20) * ystepdenominv);
	if (checkx-r_zistepx>1||checkx-r_zistepx<-1) 
		r_lstepx=checkx;
	if (checky-r_zistepy>1||checky-r_zistepy<-1) 
		r_lstepy=checky;
	 !id386		r = (palette[i*3]>>4); 64 
================
D_PolysetDrawSpans8
================
 gel mapping					*lpdest = gelmap[*lpdest]; !id386
================
D_PolysetFillSpans8
================
 FIXME: do z buffering
================
D_RasterizeAliasPolySmooth
================
 set the s, t, and light gradients, which are consistent across the triangle because being a triangle, things are affine rasterize the polygon scan out the top (and possibly only) part of the left edge FIXME: need to clamp l, s, t, at both ends? TODO: can reuse partial expressions here for negative steps in x along left edge, bias toward overflow rather than underflow (sort of turning the floor () we did in the gradient calcs into ceil (), but plus a little bit) scan out the bottom part of the left edge, if it exists TODO: make this a function; modularize this function in general FIXME: need to clamp l, s, t, at both ends? scan out the top (and possibly only) part of the right edge, updating the count field mark end of the spanpackages scan out the bottom part of the right edge, if it exists mark end of the spanpackages
================
D_PolysetSetEdgeTable
================
 assume the vertices are already in  top to bottom order determine which edges are right & left, and the order in which to rasterize them line is completed split this edge draw the point		pix = ((byte *)acolormap)[pix + (new[4] & 0xFF00)]; recursively continue split this edge recursively continue
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 d_polyset.c: routines for drawing sets of polygons sharing the same texture (used for Alias models) TODO: put in span spilling to shrink list size !!! if this is changed, it must be changed in d_polysa.s too !!! 1 extra for spanpackage that marks end !!! if this is changed, it must be changed in asm_draw.h too !!! FIXME: some of these can become statics
================
D_PolysetDraw
================
 one extra because of cache line pretouchingJB: OptimizationDan East: May result in image quality loss. Actual performance gain not verified. one extra because of cache line pretouching
================
D_PolysetDrawFinalVerts
================
 valid triangle coordinates for filling can include the bottom and right clip edges, due to the fill rule; these shouldn't be drawn
================
D_DrawSubdiv
================

================
D_DrawNonSubdiv
================
 u v s t light iz
================
D_PolysetRecursiveTriangle
================
 entire tri is filled split this edge draw the point if splitting a leading edge recursively continue !id386
================
D_PolysetUpdateTables
================

===================
D_PolysetScanLeftEdge
====================
 FIXME: need to clamp l, s, t, at both ends? !id386
===================
D_PolysetSetUpForLineScan
====================
 TODO: implement x86 version
================
D_PolysetCalcGradients
================
 ceil () for light so positive steps are exaggerated, negative steps diminished,  pushing us away from underflow toward overflow. Underflow is very visible, overflow is very unlikely, because of ambient lightingDan East: Fixed point conversionfloat xstepdenominv = (float)(1.0 / (float)d_xdenom);float ystepdenominv = -xstepdenominv; int checkx, checky;xstepdenominv = d_xdenom;ystepdenominv = -xstepdenominv; TODO: Ceil has been removed
	checkx = (int)ceil((t1 * p01_minus_p21 - t0 * p11_minus_p21) * xstepdenominv);
	checky = (int)ceil((t1 * p00_minus_p20 - t0 * p10_minus_p20) * ystepdenominv);
	if (checkx-r_lstepx>1||checkx-r_lstepx<-1) 
		r_lstepx=r_lstepx;
	if (checky-r_lstepy>1||checky-r_lstepy<-1) 
		r_lstepy=r_lstepy;
	
	checkx = (int)((t1 * p01_minus_p21 - t0 * p11_minus_p21) * xstepdenominv);
	checky = (int)((t1 * p00_minus_p20 - t0* p10_minus_p20) * ystepdenominv);
	if (checkx-r_sstepx>1||checkx-r_sstepx<-1) 
		r_lstepx=r_lstepx;
	if (checky-r_sstepy>1||checky-r_sstepy<-1) 
		r_lstepy=r_lstepy;
	
	checkx = (int)((t1 * p01_minus_p21 - t0 * p11_minus_p21) * xstepdenominv);
	checky = (int)((t1 * p00_minus_p20 - t0 * p10_minus_p20) * ystepdenominv);
	if (checkx-r_tstepx>1||checkx-r_tstepx<-1) 
		r_lstepx=r_lstepx;
	if (checky-r_tstepy>1||checky-r_tstepy<-1) 
		r_lstepy=r_lstepy;
	
	checkx = (int)((t1 * p01_minus_p21 - t0 * p11_minus_p21) * xstepdenominv);
	checky = (int)((t1 * p00_minus_p20 - t0 * p10_minus_p20) * ystepdenominv);
	if (checkx-r_zistepx>1||checkx-r_zistepx<-1) 
		r_lstepx=checkx;
	if (checky-r_zistepy>1||checky-r_zistepy<-1) 
		r_lstepy=checky;
	 !id386		r = (palette[i*3]>>4); 64 
================
D_PolysetDrawSpans8
================
 gel mapping					*lpdest = gelmap[*lpdest]; !id386
================
D_PolysetFillSpans8
================
 FIXME: do z buffering
================
D_RasterizeAliasPolySmooth
================
 set the s, t, and light gradients, which are consistent across the triangle because being a triangle, things are affine rasterize the polygon scan out the top (and possibly only) part of the left edge FIXME: need to clamp l, s, t, at both ends? TODO: can reuse partial expressions here for negative steps in x along left edge, bias toward overflow rather than underflow (sort of turning the floor () we did in the gradient calcs into ceil (), but plus a little bit) scan out the bottom part of the left edge, if it exists TODO: make this a function; modularize this function in general FIXME: need to clamp l, s, t, at both ends? scan out the top (and possibly only) part of the right edge, updating the count field mark end of the spanpackages scan out the bottom part of the right edge, if it exists mark end of the spanpackages
================
D_PolysetSetEdgeTable
================
 assume the vertices are already in  top to bottom order determine which edges are right & left, and the order in which to rasterize them line is completed split this edge draw the point		pix = ((byte *)acolormap)[pix + (new[4] & 0xFF00)]; recursively continue split this edge recursively continue