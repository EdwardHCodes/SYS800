**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Delay factor that depends on CPU frequency  Delay the specified number of microseconds - plus a tiny bit  Calculate the CRC of a byte  POLYNOMIAL = X^8 + X^5 + X^4 + 1  01011110  10111100  01100001  11000010  10011101  00100011  01000110  10001100  ds2411_calc_crc  Write a byte to the DS2411 - LSb first  Write a "1": Hold line low, then leave line pulled up and wait
               out the remainder of Tslot  Write a "0": Hold line low, then leave line pulled up and wait
               out the remainder of Tslot which is just Trec  ds2411_write_byte  Read a byte from the DS2411 - LSb first  Hold line low to begin bit read: Tf + Trl  Set line high and delay before sampling within the master
           sampling window: Tmsr - max 15us from Trl start  Sample data line  Wait out the remainder of Tslot  ds2411_read_byte 
 * Byte 0:    8-bit family code (01h)
 * Bytes 1-6: 48-bit serial number
 * Byte 7:    8-bit CRC code
  Timing sensitive  Initialize delay factor based on loop time: 3*(uS-1) + 3  Init GPIO 1 wire bus for bit banging with a pullup resistor where 
     * it is set low as output and switched between input and output mode.
     * Required for bidirectional communication on a single wire.
      Set pin as GPIO             Set as input                Set low when set as output  Delay 100us to stabilize  Issue reset pulse - 480uS or more to ensure standard (not overdrive)
       mode - we don't have the timing accuracy for that.  Delay 560us: (Trstlmin + Trstlmax) / 2 Delay 66us: Tpdhmax + 6  Read presence pulse - line should be pulled low at proper time by the
       slave device  Trsth + 1 - 66 = Tpdhmax + Tpdlmax + Trecmin + 1 - 66  ds2411 should be ready for data transfer  Send Read ROM command  Read ROM serial number and CRC  Check that family code is ok  Check that CRC was ok  Because last loop eors the CRC with the resulting CRC  Good ID read  ds2411_read_id **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Delay factor that depends on CPU frequency  Delay the specified number of microseconds - plus a tiny bit  Calculate the CRC of a byte  POLYNOMIAL = X^8 + X^5 + X^4 + 1  01011110  10111100  01100001  11000010  10011101  00100011  01000110  10001100  ds2411_calc_crc  Write a byte to the DS2411 - LSb first  Write a "1": Hold line low, then leave line pulled up and wait
               out the remainder of Tslot  Write a "0": Hold line low, then leave line pulled up and wait
               out the remainder of Tslot which is just Trec  ds2411_write_byte  Read a byte from the DS2411 - LSb first  Hold line low to begin bit read: Tf + Trl  Set line high and delay before sampling within the master
           sampling window: Tmsr - max 15us from Trl start  Sample data line  Wait out the remainder of Tslot  ds2411_read_byte 
 * Byte 0:    8-bit family code (01h)
 * Bytes 1-6: 48-bit serial number
 * Byte 7:    8-bit CRC code
  Timing sensitive  Initialize delay factor based on loop time: 3*(uS-1) + 3  Init GPIO 1 wire bus for bit banging with a pullup resistor where 
     * it is set low as output and switched between input and output mode.
     * Required for bidirectional communication on a single wire.
      Set pin as GPIO             Set as input                Set low when set as output  Delay 100us to stabilize  Issue reset pulse - 480uS or more to ensure standard (not overdrive)
       mode - we don't have the timing accuracy for that.  Delay 560us: (Trstlmin + Trstlmax) / 2 Delay 66us: Tpdhmax + 6  Read presence pulse - line should be pulled low at proper time by the
       slave device  Trsth + 1 - 66 = Tpdhmax + Tpdlmax + Trecmin + 1 - 66  ds2411 should be ready for data transfer  Send Read ROM command  Read ROM serial number and CRC  Check that family code is ok  Check that CRC was ok  Because last loop eors the CRC with the resulting CRC  Good ID read  ds2411_read_id **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Delay factor that depends on CPU frequency  Delay the specified number of microseconds - plus a tiny bit  Calculate the CRC of a byte  POLYNOMIAL = X^8 + X^5 + X^4 + 1  01011110  10111100  01100001  11000010  10011101  00100011  01000110  10001100  ds2411_calc_crc  Write a byte to the DS2411 - LSb first  Write a "1": Hold line low, then leave line pulled up and wait
               out the remainder of Tslot  Write a "0": Hold line low, then leave line pulled up and wait
               out the remainder of Tslot which is just Trec  ds2411_write_byte  Read a byte from the DS2411 - LSb first  Hold line low to begin bit read: Tf + Trl  Set line high and delay before sampling within the master
           sampling window: Tmsr - max 15us from Trl start  Sample data line  Wait out the remainder of Tslot  ds2411_read_byte 
 * Byte 0:    8-bit family code (01h)
 * Bytes 1-6: 48-bit serial number
 * Byte 7:    8-bit CRC code
  Timing sensitive  Initialize delay factor based on loop time: 3*(uS-1) + 3  Init GPIO 1 wire bus for bit banging with a pullup resistor where 
     * it is set low as output and switched between input and output mode.
     * Required for bidirectional communication on a single wire.
      Set pin as GPIO             Set as input                Set low when set as output  Delay 100us to stabilize  Issue reset pulse - 480uS or more to ensure standard (not overdrive)
       mode - we don't have the timing accuracy for that.  Delay 560us: (Trstlmin + Trstlmax) / 2 Delay 66us: Tpdhmax + 6  Read presence pulse - line should be pulled low at proper time by the
       slave device  Trsth + 1 - 66 = Tpdhmax + Tpdlmax + Trecmin + 1 - 66  ds2411 should be ready for data transfer  Send Read ROM command  Read ROM serial number and CRC  Check that family code is ok  Check that CRC was ok  Because last loop eors the CRC with the resulting CRC  Good ID read  ds2411_read_id 