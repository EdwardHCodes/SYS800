
  SDL_image:  An example image loading library for use with SDL
  Copyright (C) 1997-2012 Sam Lantinga <slouken@libsdl.org>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
 This is a BMP image file loading framework  ICO/CUR file support is here as well since it uses similar internal
 * representation  See if an image is contained in a data source  The Win32 ICO file header (14 bytes)  Compression encodings for BMP files 
	| Sets the surface pixels from src.  A bmp image is upside down.
	
		| encoded mode starts with a run length, and then a byte
		| with two colour indexes to alternate between for the run
		 256-color bitmap, compressed  16-color bitmap, compressed  even count, high nibble  odd count, low nibble 
			| A leading zero is an escape; it may signal the end of the bitmap,
			| a cursor move, or some absolute data.
			| zero tag may be absolute mode or an escape
			 end of line  go to previous  end of bitmap  success!  delta  no compression  (ch+1)>>1: bytes size  pad at even boundary  The Win32 BMP file header (14 bytes)  The Win32 BITMAPINFOHEADER struct (40 bytes)  Make sure we are passed a valid data source  Read in the BMP file header  Read the Win32 BITMAPINFOHEADER  Check for read error  Expand 1 and 4 bit bitmaps to 8 bits per pixel  RLE4 and RLE8 BMP compression is supported  If there are no masks, use the defaults  Default values for the BMP format  Fall through -- read the RGB masks  Create a compatible surface, note that the colors are RGB ordered  Load the palette, if any 
		| guich: always use 1<<bpp b/c some bitmaps can bring wrong information
		| for colorsUsed
		 if ( biClrUsed == 0 ) {   }  Read the surface pixels.  Note that the bmp image is upside down  Byte-swap the pixels if needed. Note that the 24bpp
			   case has already been taken care of above.  Skip padding bytes, ugh  The Win32 ICO file header (14 bytes)  The Win32 BITMAPINFOHEADER struct (40 bytes)  Make sure we are passed a valid data source  Read in the ICO file header  Read the Win32 Icon Directory  Icon Directory Entries  Uint8, but 0 = 256 !  Uint8, but 0 = 256 !  Uint8, but 0 = 256 ! printf("%dx%d@%d - %08x\n", bWidth, bHeight, bColorCount, dwImageOffset);printf("marked\n"); Advance to the DIB Data  Read the Win32 BITMAPINFOHEADER  Check for read error  We don't support any BMP compression right now  Default values for the BMP format  Create a RGBA surface printf("%d x %d\n", biWidth, biHeight); Load the palette, if any printf("bc %d bused %d\n", biBitCount, biClrUsed); Read the surface pixels.  Note that the bmp image is upside down  Skip padding bytes, ugh  Read the mask pixels.  Note that the bmp image is upside down  Skip padding bytes, ugh  Load a BMP type image from an SDL datasource  Load a ICO type image from an SDL datasource  Load a CUR type image from an SDL datasource  See if an image is contained in a data source  Load a BMP type image from an SDL datasource  Load a BMP type image from an SDL datasource  Load a BMP type image from an SDL datasource  LOAD_BMP  !defined(__APPLE__) || defined(SDL_IMAGE_USE_COMMON_BACKEND) 
  SDL_image:  An example image loading library for use with SDL
  Copyright (C) 1997-2012 Sam Lantinga <slouken@libsdl.org>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
 This is a BMP image file loading framework  ICO/CUR file support is here as well since it uses similar internal
 * representation  See if an image is contained in a data source  The Win32 ICO file header (14 bytes)  Compression encodings for BMP files 
	| Sets the surface pixels from src.  A bmp image is upside down.
	
		| encoded mode starts with a run length, and then a byte
		| with two colour indexes to alternate between for the run
		 256-color bitmap, compressed  16-color bitmap, compressed  even count, high nibble  odd count, low nibble 
			| A leading zero is an escape; it may signal the end of the bitmap,
			| a cursor move, or some absolute data.
			| zero tag may be absolute mode or an escape
			 end of line  go to previous  end of bitmap  success!  delta  no compression  (ch+1)>>1: bytes size  pad at even boundary  The Win32 BMP file header (14 bytes)  The Win32 BITMAPINFOHEADER struct (40 bytes)  Make sure we are passed a valid data source  Read in the BMP file header  Read the Win32 BITMAPINFOHEADER  Check for read error  Expand 1 and 4 bit bitmaps to 8 bits per pixel  RLE4 and RLE8 BMP compression is supported  If there are no masks, use the defaults  Default values for the BMP format  Fall through -- read the RGB masks  Create a compatible surface, note that the colors are RGB ordered  Load the palette, if any 
		| guich: always use 1<<bpp b/c some bitmaps can bring wrong information
		| for colorsUsed
		 if ( biClrUsed == 0 ) {   }  Read the surface pixels.  Note that the bmp image is upside down  Byte-swap the pixels if needed. Note that the 24bpp
			   case has already been taken care of above.  Skip padding bytes, ugh  The Win32 ICO file header (14 bytes)  The Win32 BITMAPINFOHEADER struct (40 bytes)  Make sure we are passed a valid data source  Read in the ICO file header  Read the Win32 Icon Directory  Icon Directory Entries  Uint8, but 0 = 256 !  Uint8, but 0 = 256 !  Uint8, but 0 = 256 ! printf("%dx%d@%d - %08x\n", bWidth, bHeight, bColorCount, dwImageOffset);printf("marked\n"); Advance to the DIB Data  Read the Win32 BITMAPINFOHEADER  Check for read error  We don't support any BMP compression right now  Default values for the BMP format  Create a RGBA surface printf("%d x %d\n", biWidth, biHeight); Load the palette, if any printf("bc %d bused %d\n", biBitCount, biClrUsed); Read the surface pixels.  Note that the bmp image is upside down  Skip padding bytes, ugh  Read the mask pixels.  Note that the bmp image is upside down  Skip padding bytes, ugh  Load a BMP type image from an SDL datasource  Load a ICO type image from an SDL datasource  Load a CUR type image from an SDL datasource  See if an image is contained in a data source  Load a BMP type image from an SDL datasource  Load a BMP type image from an SDL datasource  Load a BMP type image from an SDL datasource  LOAD_BMP  !defined(__APPLE__) || defined(SDL_IMAGE_USE_COMMON_BACKEND) 
  SDL_image:  An example image loading library for use with SDL
  Copyright (C) 1997-2012 Sam Lantinga <slouken@libsdl.org>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
 This is a BMP image file loading framework  ICO/CUR file support is here as well since it uses similar internal
 * representation  See if an image is contained in a data source  The Win32 ICO file header (14 bytes)  Compression encodings for BMP files 
	| Sets the surface pixels from src.  A bmp image is upside down.
	
		| encoded mode starts with a run length, and then a byte
		| with two colour indexes to alternate between for the run
		 256-color bitmap, compressed  16-color bitmap, compressed  even count, high nibble  odd count, low nibble 
			| A leading zero is an escape; it may signal the end of the bitmap,
			| a cursor move, or some absolute data.
			| zero tag may be absolute mode or an escape
			 end of line  go to previous  end of bitmap  success!  delta  no compression  (ch+1)>>1: bytes size  pad at even boundary  The Win32 BMP file header (14 bytes)  The Win32 BITMAPINFOHEADER struct (40 bytes)  Make sure we are passed a valid data source  Read in the BMP file header  Read the Win32 BITMAPINFOHEADER  Check for read error  Expand 1 and 4 bit bitmaps to 8 bits per pixel  RLE4 and RLE8 BMP compression is supported  If there are no masks, use the defaults  Default values for the BMP format  Fall through -- read the RGB masks  Create a compatible surface, note that the colors are RGB ordered  Load the palette, if any 
		| guich: always use 1<<bpp b/c some bitmaps can bring wrong information
		| for colorsUsed
		 if ( biClrUsed == 0 ) {   }  Read the surface pixels.  Note that the bmp image is upside down  Byte-swap the pixels if needed. Note that the 24bpp
			   case has already been taken care of above.  Skip padding bytes, ugh  The Win32 ICO file header (14 bytes)  The Win32 BITMAPINFOHEADER struct (40 bytes)  Make sure we are passed a valid data source  Read in the ICO file header  Read the Win32 Icon Directory  Icon Directory Entries  Uint8, but 0 = 256 !  Uint8, but 0 = 256 !  Uint8, but 0 = 256 ! printf("%dx%d@%d - %08x\n", bWidth, bHeight, bColorCount, dwImageOffset);printf("marked\n"); Advance to the DIB Data  Read the Win32 BITMAPINFOHEADER  Check for read error  We don't support any BMP compression right now  Default values for the BMP format  Create a RGBA surface printf("%d x %d\n", biWidth, biHeight); Load the palette, if any printf("bc %d bused %d\n", biBitCount, biClrUsed); Read the surface pixels.  Note that the bmp image is upside down  Skip padding bytes, ugh  Read the mask pixels.  Note that the bmp image is upside down  Skip padding bytes, ugh  Load a BMP type image from an SDL datasource  Load a ICO type image from an SDL datasource  Load a CUR type image from an SDL datasource  See if an image is contained in a data source  Load a BMP type image from an SDL datasource  Load a BMP type image from an SDL datasource  Load a BMP type image from an SDL datasource  LOAD_BMP  !defined(__APPLE__) || defined(SDL_IMAGE_USE_COMMON_BACKEND) 