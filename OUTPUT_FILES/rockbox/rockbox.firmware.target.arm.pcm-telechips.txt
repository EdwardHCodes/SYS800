**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Michael Sevakis
 * Copyright (C) 2008 by Rob Purchase
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** NOTE: The order of size and p is important if you use assembler
   optimised fiq handler, so don't change it. ***************************************************************************
 ** Playback DMA transfer
 * Initialize to a locked, stopped state  Digital Volume = max  Set DAI clock divided from PLL0 (192MHz).
       The best approximation of 256*44.1kHz is 11.291MHz.  DCO mode  Enable DAI block in Master mode, 256fs->32fs, 16bit LSB  Master mode, 256->64fs, 16bit LSB TODO  TODO  TODO  Set DAI interrupts as FIQs  Initialize default register values.  no core in control  disable tx  enable tx  disable tx  This will become more important later - and different !  save initiating core  no core in control  TODO: implement  r10 contains DADO_L0 base address (set in crt0.S to minimise code in the
     * FIQ handler. r11 contains address of p (also set in crt0.S). Most other
     * addresses we need are generated by using offsets with these two.
     * r8 and r9 contains local copies of p and size respectively.
     * r0-r3 and r12 is a working register.
      stack scratch regs and lr  Was the callback called?  DAI_TX_IRQ_MASK | DAI_RX_IRQ_MASK  CREQ  DAI_TX_IRQ_MASK | DAI_RX_IRQ_MASK  CREQ  clear DAI IRQs  r8 = p, r9 = size  is size <16?  if so, ask pcmbuf for more data  load two samples  write top sample to DADO_L0  put right sample at the bottom  write low sample to DADO_R0 load two samples  write top sample to DADO_L1  put right sample at the bottom  write low sample to DADO_R1 load two samples  write top sample to DADO_L2  put right sample at the bottom  write low sample to DADO_R2 load two samples  write top sample to DADO_L3  put right sample at the bottom  write low sample to DADO_R3 4 words written  save p and size  Callback called?  no? -> exit  exit  Remember we got more data in this FIQ  r0 = status  r1 = &dma_play_data.p_r  r2 = &dma_play_data.size  any more to play?  load new p and size  did we actually get enough data?  not stop and enough? refill  exit  C version for reference  p is empty, get some more data  Clear FIQ status  TODO: required by wm8731 codec  DAMR = 0; **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Michael Sevakis
 * Copyright (C) 2008 by Rob Purchase
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** NOTE: The order of size and p is important if you use assembler
   optimised fiq handler, so don't change it. ***************************************************************************
 ** Playback DMA transfer
 * Initialize to a locked, stopped state  Digital Volume = max  Set DAI clock divided from PLL0 (192MHz).
       The best approximation of 256*44.1kHz is 11.291MHz.  DCO mode  Enable DAI block in Master mode, 256fs->32fs, 16bit LSB  Master mode, 256->64fs, 16bit LSB TODO  TODO  TODO  Set DAI interrupts as FIQs  Initialize default register values.  no core in control  disable tx  enable tx  disable tx  This will become more important later - and different !  save initiating core  no core in control  TODO: implement  r10 contains DADO_L0 base address (set in crt0.S to minimise code in the
     * FIQ handler. r11 contains address of p (also set in crt0.S). Most other
     * addresses we need are generated by using offsets with these two.
     * r8 and r9 contains local copies of p and size respectively.
     * r0-r3 and r12 is a working register.
      stack scratch regs and lr  Was the callback called?  DAI_TX_IRQ_MASK | DAI_RX_IRQ_MASK  CREQ  DAI_TX_IRQ_MASK | DAI_RX_IRQ_MASK  CREQ  clear DAI IRQs  r8 = p, r9 = size  is size <16?  if so, ask pcmbuf for more data  load two samples  write top sample to DADO_L0  put right sample at the bottom  write low sample to DADO_R0 load two samples  write top sample to DADO_L1  put right sample at the bottom  write low sample to DADO_R1 load two samples  write top sample to DADO_L2  put right sample at the bottom  write low sample to DADO_R2 load two samples  write top sample to DADO_L3  put right sample at the bottom  write low sample to DADO_R3 4 words written  save p and size  Callback called?  no? -> exit  exit  Remember we got more data in this FIQ  r0 = status  r1 = &dma_play_data.p_r  r2 = &dma_play_data.size  any more to play?  load new p and size  did we actually get enough data?  not stop and enough? refill  exit  C version for reference  p is empty, get some more data  Clear FIQ status  TODO: required by wm8731 codec  DAMR = 0; **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Michael Sevakis
 * Copyright (C) 2008 by Rob Purchase
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** NOTE: The order of size and p is important if you use assembler
   optimised fiq handler, so don't change it. ***************************************************************************
 ** Playback DMA transfer
 * Initialize to a locked, stopped state  Digital Volume = max  Set DAI clock divided from PLL0 (192MHz).
       The best approximation of 256*44.1kHz is 11.291MHz.  DCO mode  Enable DAI block in Master mode, 256fs->32fs, 16bit LSB  Master mode, 256->64fs, 16bit LSB TODO  TODO  TODO  Set DAI interrupts as FIQs  Initialize default register values.  no core in control  disable tx  enable tx  disable tx  This will become more important later - and different !  save initiating core  no core in control  TODO: implement  r10 contains DADO_L0 base address (set in crt0.S to minimise code in the
     * FIQ handler. r11 contains address of p (also set in crt0.S). Most other
     * addresses we need are generated by using offsets with these two.
     * r8 and r9 contains local copies of p and size respectively.
     * r0-r3 and r12 is a working register.
      stack scratch regs and lr  Was the callback called?  DAI_TX_IRQ_MASK | DAI_RX_IRQ_MASK  CREQ  DAI_TX_IRQ_MASK | DAI_RX_IRQ_MASK  CREQ  clear DAI IRQs  r8 = p, r9 = size  is size <16?  if so, ask pcmbuf for more data  load two samples  write top sample to DADO_L0  put right sample at the bottom  write low sample to DADO_R0 load two samples  write top sample to DADO_L1  put right sample at the bottom  write low sample to DADO_R1 load two samples  write top sample to DADO_L2  put right sample at the bottom  write low sample to DADO_R2 load two samples  write top sample to DADO_L3  put right sample at the bottom  write low sample to DADO_R3 4 words written  save p and size  Callback called?  no? -> exit  exit  Remember we got more data in this FIQ  r0 = status  r1 = &dma_play_data.p_r  r2 = &dma_play_data.size  any more to play?  load new p and size  did we actually get enough data?  not stop and enough? refill  exit  C version for reference  p is empty, get some more data  Clear FIQ status  TODO: required by wm8731 codec  DAMR = 0; 