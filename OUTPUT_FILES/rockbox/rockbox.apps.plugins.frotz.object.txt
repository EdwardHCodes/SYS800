 object.c - Object manipulation opcodes
 *	Copyright (c) 1995-1997 Stefan Jokisch
 *
 * This file is part of Frotz.
 *
 * Frotz is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Frotz is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 
 * object_address
 *
 * Calculate the address of an object.
 *
     zchar obj_num[10];  Check object number  Return object address  object_address 
 * object_name
 *
 * Return the address of the given object's name.
 *
  The object name address is found at the start of the properties  object_name 
 * first_property
 *
 * Calculate the start address of the property list associated with
 * an object.
 *
  Fetch address of object name  Get length of object name  Add name length to pointer  first_property 
 * next_property
 *
 * Calculate the address of the next property in a property list.
 *
  Load the current property id  Calculate the length of this property  demanded by Spec 1.0  Add property length to current property pointer  next_property 
 * unlink_object
 *
 * Unlink an object from its parent and siblings.
 *
  Get parent of object, and return if no parent  Get (older) sibling of object and set both parent and sibling
	   pointers to 0  Get first child of parent (the youngest sibling of the object)  Remove object from the list of siblings  Get parent of object, and return if no parent  Get (older) sibling of object and set both parent and sibling
	   pointers to 0  Get first child of parent (the youngest sibling of the object)  Remove object from the list of siblings  unlink_object 
 * z_clear_attr, clear an object attribute.
 *
 *	zargs[0] = object
 *	zargs[1] = number of attribute to be cleared
 *
  If we are monitoring attribute assignment display a short note  Get attribute address  Clear attribute bit  z_clear_attr 
 * z_jin, branch if the first object is inside the second.
 *
 *	zargs[0] = first object
 *	zargs[1] = second object
 *
  If we are monitoring object locating display a short note  Get parent id from object  Branch if the parent is obj2  Get parent id from object  Branch if the parent is obj2  z_jin 
 * z_get_child, store the child of an object.
 *
 *	zargs[0] = object
 *
  If we are monitoring object locating display a short note  Get child id from object  Store child id and branch  Get child id from object  Store child id and branch  z_get_child 
 * z_get_next_prop, store the number of the first or next property.
 *
 *	zargs[0] = object
 *	zargs[1] = address of current property (0 gets the first property)
 *
  Property id is in bottom five (six) bits  Load address of first property  Scan down the property list  Exit if the property does not exist  Return the property id  z_get_next_prop 
 * z_get_parent, store the parent of an object.
 *
 *	zargs[0] = object
 *
  If we are monitoring object locating display a short note  Get parent id from object  Store parent  Get parent id from object  Store parent  z_get_parent 
 * z_get_prop, store the value of an object property.
 *
 *	zargs[0] = object
 *	zargs[1] = number of property to be examined
 *
  Property id is in bottom five (six) bits  Load address of first property  Scan down the property list  property found  Load property (byte or word sized)  property not found  Load default value  Store the property value  z_get_prop 
 * z_get_prop_addr, store the address of an object property.
 *
 *	zargs[0] = object
 *	zargs[1] = number of property to be examined
 *
  Property id is in bottom five (six) bits  Load address of first property  Scan down the property list  Calculate the property address or return zero  z_get_prop_addr 
 * z_get_prop_len, store the length of an object property.
 *
 * 	zargs[0] = address of property to be examined
 *
  Back up the property pointer to the property id  Calculate length of property  demanded by Spec 1.0  Store length of property  z_get_prop_len 
 * z_get_sibling, store the sibling of an object.
 *
 *	zargs[0] = object
 *
  Get sibling id from object  Store sibling and branch  Get sibling id from object  Store sibling and branch  z_get_sibling 
 * z_insert_obj, make an object the first child of another object.
 *
 *	zargs[0] = object to be moved
 *	zargs[1] = destination object
 *
  If we are monitoring object movements display a short note  Get addresses of both objects  Remove object 1 from current parent  Make object 1 first child of object 2  z_insert_obj 
 * z_put_prop, set the value of an object property.
 *
 *	zargs[0] = object
 *	zargs[1] = number of property to set
 *	zargs[2] = value to set property to
 *
  Property id is in bottom five or six bits  Load address of first property  Scan down the property list  Exit if the property does not exist  Store the new property value (byte or word sized)  z_put_prop 
 * z_remove_obj, unlink an object from its parent and siblings.
 *
 *	zargs[0] = object
 *
  If we are monitoring object movements display a short note  Call unlink_object to do the job  z_remove_obj 
 * z_set_attr, set an object attribute.
 *
 *	zargs[0] = object
 *	zargs[1] = number of attribute to set
 *
  If we are monitoring attribute assignment display a short note  Get attribute address  Load attribute byte  Set attribute bit  Store attribute byte  z_set_attr 
 * z_test_attr, branch if an object attribute is set.
 *
 *	zargs[0] = object
 *	zargs[1] = number of attribute to test
 *
  If we are monitoring attribute testing display a short note  Get attribute address  Load attribute byte  Test attribute  z_test_attr  object.c - Object manipulation opcodes
 *	Copyright (c) 1995-1997 Stefan Jokisch
 *
 * This file is part of Frotz.
 *
 * Frotz is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Frotz is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 
 * object_address
 *
 * Calculate the address of an object.
 *
     zchar obj_num[10];  Check object number  Return object address  object_address 
 * object_name
 *
 * Return the address of the given object's name.
 *
  The object name address is found at the start of the properties  object_name 
 * first_property
 *
 * Calculate the start address of the property list associated with
 * an object.
 *
  Fetch address of object name  Get length of object name  Add name length to pointer  first_property 
 * next_property
 *
 * Calculate the address of the next property in a property list.
 *
  Load the current property id  Calculate the length of this property  demanded by Spec 1.0  Add property length to current property pointer  next_property 
 * unlink_object
 *
 * Unlink an object from its parent and siblings.
 *
  Get parent of object, and return if no parent  Get (older) sibling of object and set both parent and sibling
	   pointers to 0  Get first child of parent (the youngest sibling of the object)  Remove object from the list of siblings  Get parent of object, and return if no parent  Get (older) sibling of object and set both parent and sibling
	   pointers to 0  Get first child of parent (the youngest sibling of the object)  Remove object from the list of siblings  unlink_object 
 * z_clear_attr, clear an object attribute.
 *
 *	zargs[0] = object
 *	zargs[1] = number of attribute to be cleared
 *
  If we are monitoring attribute assignment display a short note  Get attribute address  Clear attribute bit  z_clear_attr 
 * z_jin, branch if the first object is inside the second.
 *
 *	zargs[0] = first object
 *	zargs[1] = second object
 *
  If we are monitoring object locating display a short note  Get parent id from object  Branch if the parent is obj2  Get parent id from object  Branch if the parent is obj2  z_jin 
 * z_get_child, store the child of an object.
 *
 *	zargs[0] = object
 *
  If we are monitoring object locating display a short note  Get child id from object  Store child id and branch  Get child id from object  Store child id and branch  z_get_child 
 * z_get_next_prop, store the number of the first or next property.
 *
 *	zargs[0] = object
 *	zargs[1] = address of current property (0 gets the first property)
 *
  Property id is in bottom five (six) bits  Load address of first property  Scan down the property list  Exit if the property does not exist  Return the property id  z_get_next_prop 
 * z_get_parent, store the parent of an object.
 *
 *	zargs[0] = object
 *
  If we are monitoring object locating display a short note  Get parent id from object  Store parent  Get parent id from object  Store parent  z_get_parent 
 * z_get_prop, store the value of an object property.
 *
 *	zargs[0] = object
 *	zargs[1] = number of property to be examined
 *
  Property id is in bottom five (six) bits  Load address of first property  Scan down the property list  property found  Load property (byte or word sized)  property not found  Load default value  Store the property value  z_get_prop 
 * z_get_prop_addr, store the address of an object property.
 *
 *	zargs[0] = object
 *	zargs[1] = number of property to be examined
 *
  Property id is in bottom five (six) bits  Load address of first property  Scan down the property list  Calculate the property address or return zero  z_get_prop_addr 
 * z_get_prop_len, store the length of an object property.
 *
 * 	zargs[0] = address of property to be examined
 *
  Back up the property pointer to the property id  Calculate length of property  demanded by Spec 1.0  Store length of property  z_get_prop_len 
 * z_get_sibling, store the sibling of an object.
 *
 *	zargs[0] = object
 *
  Get sibling id from object  Store sibling and branch  Get sibling id from object  Store sibling and branch  z_get_sibling 
 * z_insert_obj, make an object the first child of another object.
 *
 *	zargs[0] = object to be moved
 *	zargs[1] = destination object
 *
  If we are monitoring object movements display a short note  Get addresses of both objects  Remove object 1 from current parent  Make object 1 first child of object 2  z_insert_obj 
 * z_put_prop, set the value of an object property.
 *
 *	zargs[0] = object
 *	zargs[1] = number of property to set
 *	zargs[2] = value to set property to
 *
  Property id is in bottom five or six bits  Load address of first property  Scan down the property list  Exit if the property does not exist  Store the new property value (byte or word sized)  z_put_prop 
 * z_remove_obj, unlink an object from its parent and siblings.
 *
 *	zargs[0] = object
 *
  If we are monitoring object movements display a short note  Call unlink_object to do the job  z_remove_obj 
 * z_set_attr, set an object attribute.
 *
 *	zargs[0] = object
 *	zargs[1] = number of attribute to set
 *
  If we are monitoring attribute assignment display a short note  Get attribute address  Load attribute byte  Set attribute bit  Store attribute byte  z_set_attr 
 * z_test_attr, branch if an object attribute is set.
 *
 *	zargs[0] = object
 *	zargs[1] = number of attribute to test
 *
  If we are monitoring attribute testing display a short note  Get attribute address  Load attribute byte  Test attribute  z_test_attr  object.c - Object manipulation opcodes
 *	Copyright (c) 1995-1997 Stefan Jokisch
 *
 * This file is part of Frotz.
 *
 * Frotz is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Frotz is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 
 * object_address
 *
 * Calculate the address of an object.
 *
     zchar obj_num[10];  Check object number  Return object address  object_address 
 * object_name
 *
 * Return the address of the given object's name.
 *
  The object name address is found at the start of the properties  object_name 
 * first_property
 *
 * Calculate the start address of the property list associated with
 * an object.
 *
  Fetch address of object name  Get length of object name  Add name length to pointer  first_property 
 * next_property
 *
 * Calculate the address of the next property in a property list.
 *
  Load the current property id  Calculate the length of this property  demanded by Spec 1.0  Add property length to current property pointer  next_property 
 * unlink_object
 *
 * Unlink an object from its parent and siblings.
 *
  Get parent of object, and return if no parent  Get (older) sibling of object and set both parent and sibling
	   pointers to 0  Get first child of parent (the youngest sibling of the object)  Remove object from the list of siblings  Get parent of object, and return if no parent  Get (older) sibling of object and set both parent and sibling
	   pointers to 0  Get first child of parent (the youngest sibling of the object)  Remove object from the list of siblings  unlink_object 
 * z_clear_attr, clear an object attribute.
 *
 *	zargs[0] = object
 *	zargs[1] = number of attribute to be cleared
 *
  If we are monitoring attribute assignment display a short note  Get attribute address  Clear attribute bit  z_clear_attr 
 * z_jin, branch if the first object is inside the second.
 *
 *	zargs[0] = first object
 *	zargs[1] = second object
 *
  If we are monitoring object locating display a short note  Get parent id from object  Branch if the parent is obj2  Get parent id from object  Branch if the parent is obj2  z_jin 
 * z_get_child, store the child of an object.
 *
 *	zargs[0] = object
 *
  If we are monitoring object locating display a short note  Get child id from object  Store child id and branch  Get child id from object  Store child id and branch  z_get_child 
 * z_get_next_prop, store the number of the first or next property.
 *
 *	zargs[0] = object
 *	zargs[1] = address of current property (0 gets the first property)
 *
  Property id is in bottom five (six) bits  Load address of first property  Scan down the property list  Exit if the property does not exist  Return the property id  z_get_next_prop 
 * z_get_parent, store the parent of an object.
 *
 *	zargs[0] = object
 *
  If we are monitoring object locating display a short note  Get parent id from object  Store parent  Get parent id from object  Store parent  z_get_parent 
 * z_get_prop, store the value of an object property.
 *
 *	zargs[0] = object
 *	zargs[1] = number of property to be examined
 *
  Property id is in bottom five (six) bits  Load address of first property  Scan down the property list  property found  Load property (byte or word sized)  property not found  Load default value  Store the property value  z_get_prop 
 * z_get_prop_addr, store the address of an object property.
 *
 *	zargs[0] = object
 *	zargs[1] = number of property to be examined
 *
  Property id is in bottom five (six) bits  Load address of first property  Scan down the property list  Calculate the property address or return zero  z_get_prop_addr 
 * z_get_prop_len, store the length of an object property.
 *
 * 	zargs[0] = address of property to be examined
 *
  Back up the property pointer to the property id  Calculate length of property  demanded by Spec 1.0  Store length of property  z_get_prop_len 
 * z_get_sibling, store the sibling of an object.
 *
 *	zargs[0] = object
 *
  Get sibling id from object  Store sibling and branch  Get sibling id from object  Store sibling and branch  z_get_sibling 
 * z_insert_obj, make an object the first child of another object.
 *
 *	zargs[0] = object to be moved
 *	zargs[1] = destination object
 *
  If we are monitoring object movements display a short note  Get addresses of both objects  Remove object 1 from current parent  Make object 1 first child of object 2  z_insert_obj 
 * z_put_prop, set the value of an object property.
 *
 *	zargs[0] = object
 *	zargs[1] = number of property to set
 *	zargs[2] = value to set property to
 *
  Property id is in bottom five or six bits  Load address of first property  Scan down the property list  Exit if the property does not exist  Store the new property value (byte or word sized)  z_put_prop 
 * z_remove_obj, unlink an object from its parent and siblings.
 *
 *	zargs[0] = object
 *
  If we are monitoring object movements display a short note  Call unlink_object to do the job  z_remove_obj 
 * z_set_attr, set an object attribute.
 *
 *	zargs[0] = object
 *	zargs[1] = number of attribute to set
 *
  If we are monitoring attribute assignment display a short note  Get attribute address  Load attribute byte  Set attribute bit  Store attribute byte  z_set_attr 
 * z_test_attr, branch if an object attribute is set.
 *
 *	zargs[0] = object
 *	zargs[1] = number of attribute to test
 *
  If we are monitoring attribute testing display a short note  Get attribute address  Load attribute byte  Test attribute  z_test_attr 