*
 * Spring lifecycle interceptor to perform additional initialization of the object - such as
 * fxml loading and data binding before it is returned to the context.
 *
 * @param <T>
 *
     * map of screen definition files to the bean names of beans that should be used as controllers.
     *
     * map of all realized screens keyed by the fxml file name.
     *
     * @param fxXmlURL string pointing to the location of the fxml file.
     * @param bean bean to use as a controller
     * @returnui widget created by this load.
     *
     * verify that all beans listed as ui controllers for the purpose of fxml augmentation are
     * actually present in the context.
      To get more metadata from the bean definition: ConfigurableListableBeanFactory clbf = ((AbstractApplicationContext) ctx).getBeanFactory(); BeanDefinition clbf.getBeanDefinition(name);*
 * Spring lifecycle interceptor to perform additional initialization of the object - such as
 * fxml loading and data binding before it is returned to the context.
 *
 * @param <T>
 *
     * map of screen definition files to the bean names of beans that should be used as controllers.
     *
     * map of all realized screens keyed by the fxml file name.
     *
     * @param fxXmlURL string pointing to the location of the fxml file.
     * @param bean bean to use as a controller
     * @returnui widget created by this load.
     *
     * verify that all beans listed as ui controllers for the purpose of fxml augmentation are
     * actually present in the context.
      To get more metadata from the bean definition: ConfigurableListableBeanFactory clbf = ((AbstractApplicationContext) ctx).getBeanFactory(); BeanDefinition clbf.getBeanDefinition(name);*
 * Spring lifecycle interceptor to perform additional initialization of the object - such as
 * fxml loading and data binding before it is returned to the context.
 *
 * @param <T>
 *
     * map of screen definition files to the bean names of beans that should be used as controllers.
     *
     * map of all realized screens keyed by the fxml file name.
     *
     * @param fxXmlURL string pointing to the location of the fxml file.
     * @param bean bean to use as a controller
     * @returnui widget created by this load.
     *
     * verify that all beans listed as ui controllers for the purpose of fxml augmentation are
     * actually present in the context.
      To get more metadata from the bean definition: ConfigurableListableBeanFactory clbf = ((AbstractApplicationContext) ctx).getBeanFactory(); BeanDefinition clbf.getBeanDefinition(name);*
 * Spring lifecycle interceptor to perform additional initialization of the object - such as
 * fxml loading and data binding before it is returned to the context.
 *
 * @param <T>
 *
     * map of screen definition files to the bean names of beans that should be used as controllers.
     *
     * map of all realized screens keyed by the fxml file name.
     *
     * @param fxXmlURL string pointing to the location of the fxml file.
     * @param bean bean to use as a controller
     * @returnui widget created by this load.
     *
     * verify that all beans listed as ui controllers for the purpose of fxml augmentation are
     * actually present in the context.
      To get more metadata from the bean definition: ConfigurableListableBeanFactory clbf = ((AbstractApplicationContext) ctx).getBeanFactory(); BeanDefinition clbf.getBeanDefinition(name);*
 * Spring lifecycle interceptor to perform additional initialization of the object - such as
 * fxml loading and data binding before it is returned to the context.
 *
 * @param <T>
 *
     * map of screen definition files to the bean names of beans that should be used as controllers.
     *
     * map of all realized screens keyed by the fxml file name.
     *
     * @param fxXmlURL string pointing to the location of the fxml file.
     * @param bean bean to use as a controller
     * @returnui widget created by this load.
     *
     * verify that all beans listed as ui controllers for the purpose of fxml augmentation are
     * actually present in the context.
      To get more metadata from the bean definition: ConfigurableListableBeanFactory clbf = ((AbstractApplicationContext) ctx).getBeanFactory(); BeanDefinition clbf.getBeanDefinition(name);*
 * Spring lifecycle interceptor to perform additional initialization of the object - such as
 * fxml loading and data binding before it is returned to the context.
 *
 * @param <T>
 *
     * map of screen definition files to the bean names of beans that should be used as controllers.
     *
     * map of all realized screens keyed by the fxml file name.
     *
     * @param fxXmlURL string pointing to the location of the fxml file.
     * @param bean bean to use as a controller
     * @returnui widget created by this load.
     *
     * verify that all beans listed as ui controllers for the purpose of fxml augmentation are
     * actually present in the context.
      To get more metadata from the bean definition: ConfigurableListableBeanFactory clbf = ((AbstractApplicationContext) ctx).getBeanFactory(); BeanDefinition clbf.getBeanDefinition(name);*
 * Spring lifecycle interceptor to perform additional initialization of the object - such as
 * fxml loading and data binding before it is returned to the context.
 *
 * @param <T>
 *
     * map of screen definition files to the bean names of beans that should be used as controllers.
     *
     * map of all realized screens keyed by the fxml file name.
     *
     * @param fxXmlURL string pointing to the location of the fxml file.
     * @param bean bean to use as a controller
     * @returnui widget created by this load.
     *
     * verify that all beans listed as ui controllers for the purpose of fxml augmentation are
     * actually present in the context.
      To get more metadata from the bean definition: ConfigurableListableBeanFactory clbf = ((AbstractApplicationContext) ctx).getBeanFactory(); BeanDefinition clbf.getBeanDefinition(name);