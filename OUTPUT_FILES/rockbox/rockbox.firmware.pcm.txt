**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Define LOGF_ENABLE to enable logf output in this file #define LOGF_ENABLE*
 * Aspects implemented in the target-specific portion:
 *
 * ==Playback==
 *   Public -
 *      pcm_postinit
 *      pcm_get_bytes_waiting
 *      pcm_play_lock
 *      pcm_play_unlock
 *   Semi-private -
 *      pcm_play_dma_complete_callback
 *      pcm_play_dma_status_callback
 *      pcm_play_dma_init
 *      pcm_play_dma_postinit
 *      pcm_play_dma_start
 *      pcm_play_dma_stop
 *      pcm_play_dma_pause
 *      pcm_play_dma_get_peak_buffer
 *   Data Read/Written within TSP -
 *      pcm_sampr (R)
 *      pcm_fsel (R)
 *      pcm_curr_sampr (R)
 *      pcm_playing (R)
 *      pcm_paused (R)
 *
 * ==Playback/Recording==
 *   Public -
 *      pcm_dma_addr
 *   Semi-private -
 *      pcm_dma_apply_settings
 *
 * ==Recording==
 *   Public -
 *      pcm_rec_lock
 *      pcm_rec_unlock
 *   Semi-private -
 *      pcm_rec_dma_complete_callback
 *      pcm_rec_dma_status_callback
 *      pcm_rec_dma_init
 *      pcm_rec_dma_close
 *      pcm_rec_dma_start
 *      pcm_rec_dma_stop
 *      pcm_rec_dma_get_peak_buffer
 *   Data Read/Written within TSP -
 *      pcm_recording (R)
 *
 * States are set _after_ the target's pcm driver is called so that it may
 * know from whence the state is changed. One exception is init.
 *
  'true' when all stages of pcm initialization have completed  The registered callback function to ask for more mp3 data  The registered callback function to inform of DMA status  PCM playback state  PCM paused state. paused implies playing  samplerate of currently playing audio - undefined if stopped  samplerate waiting to be set  samplerate frequency selection index * Standard hw volume/unbuffered control functions - otherwise, see
 ** pcm_sw_volume.c * Smoothed transition might not have happened so sync now  Check status callback first if error  Error, callback missing or no more DMA to do  !HAVE_SW_VOLUME_CONTROL || PCM_SW_VOLUME_UNBUFFERED  Force a stop *
 * Perform peak calculation on a buffer of packed 16-bit samples.
 *
 * Used for recording and playback.
  Every 4th sample, interleaved  Peak no farther ahead than expected period to avoid overcalculation  Keep reasonable limits on period  else keep previous peak values  peaks are zero  peak data for the global peak values - i.e. what the final output is ***************************************************************************
 * Functions that do not require targeted implementation but only a targeted
 * interface
  This should only be called at startup before any audio playback or
   recording is attempted  Finish delayed init  set frequency next frequency used by the audio hardware -
 * what pcm_apply_settings will set  For now, supported targets have direct conversion when configured with
     * CONFIG_SAMPR_TYPES.
     * Some hypothetical target with independent rates would need slightly
     * different handling throughout this source.  CONFIG_SAMPR_TYPES  Invalid = default  return last-set frequency  apply pcm settings to the hardware * Low level pcm recording apis * Next start for recording peaks  the registered callback function for when more data is available  DMA transfer in is currently active  Called internally by functions to reset the state *
 * Return recording peaks - From the end of the last peak up to
 *                          current write position.
  Interleaved L+R  else keep previous peak values ***************************************************************************
 * Functions that do not require targeted implementation but only a targeted
 * interface
  Stop the beasty before attempting recording  Recording init is locked unlike general pcm init since this is not
     * just a one-time event at startup and it should and must be safe by
     * now.  Need a physical DMA address translation, if not already physical.  pcm_record_data  pcm_stop_recording  Check status callback first if error  Call registered callback to obtain next buffer  Need a physical DMA address translation, if not already
             * physical.  Error, callback missing or no more DMA to do  HAVE_RECORDING **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Define LOGF_ENABLE to enable logf output in this file #define LOGF_ENABLE*
 * Aspects implemented in the target-specific portion:
 *
 * ==Playback==
 *   Public -
 *      pcm_postinit
 *      pcm_get_bytes_waiting
 *      pcm_play_lock
 *      pcm_play_unlock
 *   Semi-private -
 *      pcm_play_dma_complete_callback
 *      pcm_play_dma_status_callback
 *      pcm_play_dma_init
 *      pcm_play_dma_postinit
 *      pcm_play_dma_start
 *      pcm_play_dma_stop
 *      pcm_play_dma_pause
 *      pcm_play_dma_get_peak_buffer
 *   Data Read/Written within TSP -
 *      pcm_sampr (R)
 *      pcm_fsel (R)
 *      pcm_curr_sampr (R)
 *      pcm_playing (R)
 *      pcm_paused (R)
 *
 * ==Playback/Recording==
 *   Public -
 *      pcm_dma_addr
 *   Semi-private -
 *      pcm_dma_apply_settings
 *
 * ==Recording==
 *   Public -
 *      pcm_rec_lock
 *      pcm_rec_unlock
 *   Semi-private -
 *      pcm_rec_dma_complete_callback
 *      pcm_rec_dma_status_callback
 *      pcm_rec_dma_init
 *      pcm_rec_dma_close
 *      pcm_rec_dma_start
 *      pcm_rec_dma_stop
 *      pcm_rec_dma_get_peak_buffer
 *   Data Read/Written within TSP -
 *      pcm_recording (R)
 *
 * States are set _after_ the target's pcm driver is called so that it may
 * know from whence the state is changed. One exception is init.
 *
  'true' when all stages of pcm initialization have completed  The registered callback function to ask for more mp3 data  The registered callback function to inform of DMA status  PCM playback state  PCM paused state. paused implies playing  samplerate of currently playing audio - undefined if stopped  samplerate waiting to be set  samplerate frequency selection index * Standard hw volume/unbuffered control functions - otherwise, see
 ** pcm_sw_volume.c * Smoothed transition might not have happened so sync now  Check status callback first if error  Error, callback missing or no more DMA to do  !HAVE_SW_VOLUME_CONTROL || PCM_SW_VOLUME_UNBUFFERED  Force a stop *
 * Perform peak calculation on a buffer of packed 16-bit samples.
 *
 * Used for recording and playback.
  Every 4th sample, interleaved  Peak no farther ahead than expected period to avoid overcalculation  Keep reasonable limits on period  else keep previous peak values  peaks are zero  peak data for the global peak values - i.e. what the final output is ***************************************************************************
 * Functions that do not require targeted implementation but only a targeted
 * interface
  This should only be called at startup before any audio playback or
   recording is attempted  Finish delayed init  set frequency next frequency used by the audio hardware -
 * what pcm_apply_settings will set  For now, supported targets have direct conversion when configured with
     * CONFIG_SAMPR_TYPES.
     * Some hypothetical target with independent rates would need slightly
     * different handling throughout this source.  CONFIG_SAMPR_TYPES  Invalid = default  return last-set frequency  apply pcm settings to the hardware * Low level pcm recording apis * Next start for recording peaks  the registered callback function for when more data is available  DMA transfer in is currently active  Called internally by functions to reset the state *
 * Return recording peaks - From the end of the last peak up to
 *                          current write position.
  Interleaved L+R  else keep previous peak values ***************************************************************************
 * Functions that do not require targeted implementation but only a targeted
 * interface
  Stop the beasty before attempting recording  Recording init is locked unlike general pcm init since this is not
     * just a one-time event at startup and it should and must be safe by
     * now.  Need a physical DMA address translation, if not already physical.  pcm_record_data  pcm_stop_recording  Check status callback first if error  Call registered callback to obtain next buffer  Need a physical DMA address translation, if not already
             * physical.  Error, callback missing or no more DMA to do  HAVE_RECORDING **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Define LOGF_ENABLE to enable logf output in this file #define LOGF_ENABLE*
 * Aspects implemented in the target-specific portion:
 *
 * ==Playback==
 *   Public -
 *      pcm_postinit
 *      pcm_get_bytes_waiting
 *      pcm_play_lock
 *      pcm_play_unlock
 *   Semi-private -
 *      pcm_play_dma_complete_callback
 *      pcm_play_dma_status_callback
 *      pcm_play_dma_init
 *      pcm_play_dma_postinit
 *      pcm_play_dma_start
 *      pcm_play_dma_stop
 *      pcm_play_dma_pause
 *      pcm_play_dma_get_peak_buffer
 *   Data Read/Written within TSP -
 *      pcm_sampr (R)
 *      pcm_fsel (R)
 *      pcm_curr_sampr (R)
 *      pcm_playing (R)
 *      pcm_paused (R)
 *
 * ==Playback/Recording==
 *   Public -
 *      pcm_dma_addr
 *   Semi-private -
 *      pcm_dma_apply_settings
 *
 * ==Recording==
 *   Public -
 *      pcm_rec_lock
 *      pcm_rec_unlock
 *   Semi-private -
 *      pcm_rec_dma_complete_callback
 *      pcm_rec_dma_status_callback
 *      pcm_rec_dma_init
 *      pcm_rec_dma_close
 *      pcm_rec_dma_start
 *      pcm_rec_dma_stop
 *      pcm_rec_dma_get_peak_buffer
 *   Data Read/Written within TSP -
 *      pcm_recording (R)
 *
 * States are set _after_ the target's pcm driver is called so that it may
 * know from whence the state is changed. One exception is init.
 *
  'true' when all stages of pcm initialization have completed  The registered callback function to ask for more mp3 data  The registered callback function to inform of DMA status  PCM playback state  PCM paused state. paused implies playing  samplerate of currently playing audio - undefined if stopped  samplerate waiting to be set  samplerate frequency selection index * Standard hw volume/unbuffered control functions - otherwise, see
 ** pcm_sw_volume.c * Smoothed transition might not have happened so sync now  Check status callback first if error  Error, callback missing or no more DMA to do  !HAVE_SW_VOLUME_CONTROL || PCM_SW_VOLUME_UNBUFFERED  Force a stop *
 * Perform peak calculation on a buffer of packed 16-bit samples.
 *
 * Used for recording and playback.
  Every 4th sample, interleaved  Peak no farther ahead than expected period to avoid overcalculation  Keep reasonable limits on period  else keep previous peak values  peaks are zero  peak data for the global peak values - i.e. what the final output is ***************************************************************************
 * Functions that do not require targeted implementation but only a targeted
 * interface
  This should only be called at startup before any audio playback or
   recording is attempted  Finish delayed init  set frequency next frequency used by the audio hardware -
 * what pcm_apply_settings will set  For now, supported targets have direct conversion when configured with
     * CONFIG_SAMPR_TYPES.
     * Some hypothetical target with independent rates would need slightly
     * different handling throughout this source.  CONFIG_SAMPR_TYPES  Invalid = default  return last-set frequency  apply pcm settings to the hardware * Low level pcm recording apis * Next start for recording peaks  the registered callback function for when more data is available  DMA transfer in is currently active  Called internally by functions to reset the state *
 * Return recording peaks - From the end of the last peak up to
 *                          current write position.
  Interleaved L+R  else keep previous peak values ***************************************************************************
 * Functions that do not require targeted implementation but only a targeted
 * interface
  Stop the beasty before attempting recording  Recording init is locked unlike general pcm init since this is not
     * just a one-time event at startup and it should and must be safe by
     * now.  Need a physical DMA address translation, if not already physical.  pcm_record_data  pcm_stop_recording  Check status callback first if error  Call registered callback to obtain next buffer  Need a physical DMA address translation, if not already
             * physical.  Error, callback missing or no more DMA to do  HAVE_RECORDING 