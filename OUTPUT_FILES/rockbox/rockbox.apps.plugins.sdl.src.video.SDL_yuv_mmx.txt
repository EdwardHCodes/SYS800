
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org
 *INDENT-OFF* *
   This MMX assembler is my first assembler/MMX program ever.
   Thus it maybe buggy.
   Send patches to:
   mvogt@rhrk.uni-kl.de

   After it worked fine I have "obfuscated" the code a bit to have
   more parallism in the MMX units. This means I moved
   initilisation around and delayed other instruction.
   Performance measurement did not show that this brought any advantage
   but in theory it _should_ be faster this way.

   The overall performanve gain to the C based dither was 30%-40%.
   The MMX routine calculates 256bit=8RGB values in each cycle
   (4 for row1 & 4 for row2)

   The red/green/blue.. coefficents are taken from the mpeg_play 
   player. They look nice, but I dont know if you can have
   better values, to avoid integer rounding errors.
   

   IMPORTANT:
   ==========

   It is a requirement that the cr/cb/lum are 8 byte aligned and
   the out are 16byte aligned or you will/may get segfaults

 Pointer to the end 32 bit target start of second row increment for row1 in byte tap dance to workaround the inability to use %%ebx at will...  move one thing to the stack... save a slot on the stack. save %%ebx. put the thing in ebx. put the thing in the stack slot. get back %%ebx (the PIC register). create Cr (result in mm1)         0  0  0  0  v3 v2 v1 v0         00 00 00 00 00 00 00 00    0  0  0  0 l3 l2 l1 l0         0  v3 0  v2 00 v1 00 v0         00 v1 00 v0 00 v1 00 v0 mm1-128:r1 r1 r0 r0 r1 r1 r0 r0 create Cr_g (result in mm0) r1 r1 r0 r0 r1 r1 r0 r0 red*-46dec=0.7136*64 red*89dec=1.4013*64 red=red/64 red=red/64 create L1 L2 (result in mm2,mm4) L2=lum+cols    0  0  0  0 L3 L2 L1 L0   L3 L2 L1 L0 l3 l2 l1 l0   L3 L2 L1 L0 l3 l2 l1 l0   L3 0  L1  0 l3  0 l1  0   0  L2  0 L0  0 l2  0 l0   0  L3  0 L1  0 l3  0 l1 create R (result in mm6)   0 L3  0 L1  0 l3  0 l1   0 L2  0 L0  0 l2  0 l0 lum1+red:x R3 x R1 x r3 x r1 lum1+red:x R2 x R0 x r2 x r0  R3 R1 r3 r1 R3 R1 r3 r1  R2 R0 r2 r0 R2 R0 r2 r0         00 00 00 00 00 00 00 00  R3 R2 R1 R0 r3 r2 r1 r0 create Cb (result in mm1)         0  0  0  0  u3 u2 u1 u0         0  u3 0  u2 00 u1 00 u0         00 u1 00 u0 00 u1 00 u0 mm1-128:u1 u1 u0 u0 u1 u1 u0 u0 create Cb_g (result in mm5) u1 u1 u0 u0 u1 u1 u0 u0 blue*-109dec=1.7129*64 blue*114dec=1.78125*64 blue=red/64 blue=blue/64 create G (result in mm7)   0  L3  0 L1  0 l3  0 l1   0  L2  0 L0  0 l2  0 l1 lum1+Cb_g:x G3t x G1t x g3t x g1t lum1+Cb_g:x G2t x G0t x g2t x g0t lum1+Cr_g:x G3  x G1  x g3  x g1 lum1+blue:x G2  x G0  x g2  x g0 G3 G1 g3 g1 G3 G1 g3 g1 G2 G0 g2 g0 G2 G0 g2 g0 G3 G2 G1 G0 g3 g2 g1 g0 create B (result in mm5)   0  L3  0 L1  0 l3  0 l1   0  L2  0 L0  0 l2  0 l1 lum1+blue:x B3 x B1 x b3 x b1 lum1+blue:x B2 x B0 x b2 x b0 B3 B1 b3 b1 B3 B1 b3 b1 B2 B0 b2 b0 B2 B0 b2 b0 B3 B2 B1 B0 b3 b2 b1 b0 fill destination row1 (needed are mm6=Rr,mm7=Gg,mm5=Bb)  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 R3 R2 R1 R0 r3 r2 r1 r0 B3 B2 B1 B0 b3 b2 b1 b0 process lower lum  0 r3  0 r2  0 r1  0 r0  0 b3  0 b2  0 b1  0 b0  0 r3  0 r2  0 r1  0 r0  0 b3  0 b2  0 b1  0 b0  0 r1  0 b1  0 r0  0 b0  0 r3  0 b3  0 r2  0 b2  0  0  0  0  0  0  0  0 G3 G2 G1 G0 g3 g2 g1 g0 g3  0 g2  0 g1  0 g0  0  0  0 g1  0  0  0 g0  0  0 r1 g1 b1  0 r0 g0 b0 wrote out ! row1  0  0  0  0  0  0  0  0 g3  0 g2  0 g1  0 g0  0  0  0 g3  0  0  0 g2  0  0 r3 g3 b3  0 r2 g2 b2 wrote out ! row1 fill destination row2 (needed are mm6=Rr,mm7=Gg,mm5=Bb) this can be done "destructive"  0  0  0  0  0  0  0  0  0 R3  0 R2  0 R1  0 R0 G3 B3 G2 B2 G1 B1 G0 B0 G3 B3 G2 B2 G1 B1 G0 B0  0 R1 G1 B1  0 R0 G0 B0 wrote out ! row2  0 R3 G3 B3  0 R2 G2 B2 wrote out ! row2 lum+4 row1+16 row2+16 cr+2 cb+2 x+4 lum += cols row1+= mod row2+= mod x=0 get rid of the stack slot we reserved. reset MMX registers. Pointer to the end  16 bit target  start of second row   increment for row1 in byte  tap dance to workaround the inability to use %%ebx at will...  move one thing to the stack... save a slot on the stack. save %%ebx. put the thing in ebx. put the thing in the stack slot. get back %%ebx (the PIC register). 4 Cb         0  0  0  0 u3 u2 u1 u0 4 Cr                0  0  0  0 v3 v2 v1 v0 4 W cb   0 u3  0 u2  0 u1  0 u0 4 W cr   0 v3  0 v2  0 v1  0 v0 Cb                   0 u3  0 u2  0 u1  0 u0 Cr Cb2green 0 R3  0 R2  0 R1  0 R0 L1      l7 L6 L5 L4 L3 L2 L1 L0 Cb2blue L1      00 L6 00 L4 00 L2 00 L0 Cr2green L2 Cr2red L2           00 L7 00 L5 00 L3 00 L1 lum1 Cb2green + Cr2green == green lum2 lum1 lum1 +blue 00 B6 00 B4 00 B2 00 B0 lum1 lum1 +red  00 R6 00 R4 00 R2 00 R0 lum1 +green 00 G6 00 G4 00 G2 00 G0 R1 0 .. 64 lum2                       00 L7 00 L5 00 L3 00 L1 G1  - .. + Lum2 +blue 00 B7 00 B5 00 B3 00 B1 B1         0 .. 64 R1 R1 G1 G1 B1 B1 GREEN       1 BLUE        1 lum2 lum2 +red      00 R7 00 R5 00 R3 00 R1 lum2 +green 00 G7 00 G5 00 G3 00 G1 R2 MM4 G2 L3 load lum2 L3 lum3 GREEN 2 BLUE  2 L4 load lum2 L4 lum4 write row1 write row1 Lum3 Lum3 +blue Lum3 Lum3 +red Lum3 +green Lum4 Lum4 +blue Lum3 +blue Lum4 Lum4 +red Lum4 +green GREEN 3 psr 6 BLUE BLUE  3 BLUE GREEN 4 row2+16 lum += cols row1+= mod row2+= mod x=0 get rid of the stack slot we reserved. *INDENT-ON*  GCC3 i386 inline assembly 
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org
 *INDENT-OFF* *
   This MMX assembler is my first assembler/MMX program ever.
   Thus it maybe buggy.
   Send patches to:
   mvogt@rhrk.uni-kl.de

   After it worked fine I have "obfuscated" the code a bit to have
   more parallism in the MMX units. This means I moved
   initilisation around and delayed other instruction.
   Performance measurement did not show that this brought any advantage
   but in theory it _should_ be faster this way.

   The overall performanve gain to the C based dither was 30%-40%.
   The MMX routine calculates 256bit=8RGB values in each cycle
   (4 for row1 & 4 for row2)

   The red/green/blue.. coefficents are taken from the mpeg_play 
   player. They look nice, but I dont know if you can have
   better values, to avoid integer rounding errors.
   

   IMPORTANT:
   ==========

   It is a requirement that the cr/cb/lum are 8 byte aligned and
   the out are 16byte aligned or you will/may get segfaults

 Pointer to the end 32 bit target start of second row increment for row1 in byte tap dance to workaround the inability to use %%ebx at will...  move one thing to the stack... save a slot on the stack. save %%ebx. put the thing in ebx. put the thing in the stack slot. get back %%ebx (the PIC register). create Cr (result in mm1)         0  0  0  0  v3 v2 v1 v0         00 00 00 00 00 00 00 00    0  0  0  0 l3 l2 l1 l0         0  v3 0  v2 00 v1 00 v0         00 v1 00 v0 00 v1 00 v0 mm1-128:r1 r1 r0 r0 r1 r1 r0 r0 create Cr_g (result in mm0) r1 r1 r0 r0 r1 r1 r0 r0 red*-46dec=0.7136*64 red*89dec=1.4013*64 red=red/64 red=red/64 create L1 L2 (result in mm2,mm4) L2=lum+cols    0  0  0  0 L3 L2 L1 L0   L3 L2 L1 L0 l3 l2 l1 l0   L3 L2 L1 L0 l3 l2 l1 l0   L3 0  L1  0 l3  0 l1  0   0  L2  0 L0  0 l2  0 l0   0  L3  0 L1  0 l3  0 l1 create R (result in mm6)   0 L3  0 L1  0 l3  0 l1   0 L2  0 L0  0 l2  0 l0 lum1+red:x R3 x R1 x r3 x r1 lum1+red:x R2 x R0 x r2 x r0  R3 R1 r3 r1 R3 R1 r3 r1  R2 R0 r2 r0 R2 R0 r2 r0         00 00 00 00 00 00 00 00  R3 R2 R1 R0 r3 r2 r1 r0 create Cb (result in mm1)         0  0  0  0  u3 u2 u1 u0         0  u3 0  u2 00 u1 00 u0         00 u1 00 u0 00 u1 00 u0 mm1-128:u1 u1 u0 u0 u1 u1 u0 u0 create Cb_g (result in mm5) u1 u1 u0 u0 u1 u1 u0 u0 blue*-109dec=1.7129*64 blue*114dec=1.78125*64 blue=red/64 blue=blue/64 create G (result in mm7)   0  L3  0 L1  0 l3  0 l1   0  L2  0 L0  0 l2  0 l1 lum1+Cb_g:x G3t x G1t x g3t x g1t lum1+Cb_g:x G2t x G0t x g2t x g0t lum1+Cr_g:x G3  x G1  x g3  x g1 lum1+blue:x G2  x G0  x g2  x g0 G3 G1 g3 g1 G3 G1 g3 g1 G2 G0 g2 g0 G2 G0 g2 g0 G3 G2 G1 G0 g3 g2 g1 g0 create B (result in mm5)   0  L3  0 L1  0 l3  0 l1   0  L2  0 L0  0 l2  0 l1 lum1+blue:x B3 x B1 x b3 x b1 lum1+blue:x B2 x B0 x b2 x b0 B3 B1 b3 b1 B3 B1 b3 b1 B2 B0 b2 b0 B2 B0 b2 b0 B3 B2 B1 B0 b3 b2 b1 b0 fill destination row1 (needed are mm6=Rr,mm7=Gg,mm5=Bb)  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 R3 R2 R1 R0 r3 r2 r1 r0 B3 B2 B1 B0 b3 b2 b1 b0 process lower lum  0 r3  0 r2  0 r1  0 r0  0 b3  0 b2  0 b1  0 b0  0 r3  0 r2  0 r1  0 r0  0 b3  0 b2  0 b1  0 b0  0 r1  0 b1  0 r0  0 b0  0 r3  0 b3  0 r2  0 b2  0  0  0  0  0  0  0  0 G3 G2 G1 G0 g3 g2 g1 g0 g3  0 g2  0 g1  0 g0  0  0  0 g1  0  0  0 g0  0  0 r1 g1 b1  0 r0 g0 b0 wrote out ! row1  0  0  0  0  0  0  0  0 g3  0 g2  0 g1  0 g0  0  0  0 g3  0  0  0 g2  0  0 r3 g3 b3  0 r2 g2 b2 wrote out ! row1 fill destination row2 (needed are mm6=Rr,mm7=Gg,mm5=Bb) this can be done "destructive"  0  0  0  0  0  0  0  0  0 R3  0 R2  0 R1  0 R0 G3 B3 G2 B2 G1 B1 G0 B0 G3 B3 G2 B2 G1 B1 G0 B0  0 R1 G1 B1  0 R0 G0 B0 wrote out ! row2  0 R3 G3 B3  0 R2 G2 B2 wrote out ! row2 lum+4 row1+16 row2+16 cr+2 cb+2 x+4 lum += cols row1+= mod row2+= mod x=0 get rid of the stack slot we reserved. reset MMX registers. Pointer to the end  16 bit target  start of second row   increment for row1 in byte  tap dance to workaround the inability to use %%ebx at will...  move one thing to the stack... save a slot on the stack. save %%ebx. put the thing in ebx. put the thing in the stack slot. get back %%ebx (the PIC register). 4 Cb         0  0  0  0 u3 u2 u1 u0 4 Cr                0  0  0  0 v3 v2 v1 v0 4 W cb   0 u3  0 u2  0 u1  0 u0 4 W cr   0 v3  0 v2  0 v1  0 v0 Cb                   0 u3  0 u2  0 u1  0 u0 Cr Cb2green 0 R3  0 R2  0 R1  0 R0 L1      l7 L6 L5 L4 L3 L2 L1 L0 Cb2blue L1      00 L6 00 L4 00 L2 00 L0 Cr2green L2 Cr2red L2           00 L7 00 L5 00 L3 00 L1 lum1 Cb2green + Cr2green == green lum2 lum1 lum1 +blue 00 B6 00 B4 00 B2 00 B0 lum1 lum1 +red  00 R6 00 R4 00 R2 00 R0 lum1 +green 00 G6 00 G4 00 G2 00 G0 R1 0 .. 64 lum2                       00 L7 00 L5 00 L3 00 L1 G1  - .. + Lum2 +blue 00 B7 00 B5 00 B3 00 B1 B1         0 .. 64 R1 R1 G1 G1 B1 B1 GREEN       1 BLUE        1 lum2 lum2 +red      00 R7 00 R5 00 R3 00 R1 lum2 +green 00 G7 00 G5 00 G3 00 G1 R2 MM4 G2 L3 load lum2 L3 lum3 GREEN 2 BLUE  2 L4 load lum2 L4 lum4 write row1 write row1 Lum3 Lum3 +blue Lum3 Lum3 +red Lum3 +green Lum4 Lum4 +blue Lum3 +blue Lum4 Lum4 +red Lum4 +green GREEN 3 psr 6 BLUE BLUE  3 BLUE GREEN 4 row2+16 lum += cols row1+= mod row2+= mod x=0 get rid of the stack slot we reserved. *INDENT-ON*  GCC3 i386 inline assembly 
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org
 *INDENT-OFF* *
   This MMX assembler is my first assembler/MMX program ever.
   Thus it maybe buggy.
   Send patches to:
   mvogt@rhrk.uni-kl.de

   After it worked fine I have "obfuscated" the code a bit to have
   more parallism in the MMX units. This means I moved
   initilisation around and delayed other instruction.
   Performance measurement did not show that this brought any advantage
   but in theory it _should_ be faster this way.

   The overall performanve gain to the C based dither was 30%-40%.
   The MMX routine calculates 256bit=8RGB values in each cycle
   (4 for row1 & 4 for row2)

   The red/green/blue.. coefficents are taken from the mpeg_play 
   player. They look nice, but I dont know if you can have
   better values, to avoid integer rounding errors.
   

   IMPORTANT:
   ==========

   It is a requirement that the cr/cb/lum are 8 byte aligned and
   the out are 16byte aligned or you will/may get segfaults

 Pointer to the end 32 bit target start of second row increment for row1 in byte tap dance to workaround the inability to use %%ebx at will...  move one thing to the stack... save a slot on the stack. save %%ebx. put the thing in ebx. put the thing in the stack slot. get back %%ebx (the PIC register). create Cr (result in mm1)         0  0  0  0  v3 v2 v1 v0         00 00 00 00 00 00 00 00    0  0  0  0 l3 l2 l1 l0         0  v3 0  v2 00 v1 00 v0         00 v1 00 v0 00 v1 00 v0 mm1-128:r1 r1 r0 r0 r1 r1 r0 r0 create Cr_g (result in mm0) r1 r1 r0 r0 r1 r1 r0 r0 red*-46dec=0.7136*64 red*89dec=1.4013*64 red=red/64 red=red/64 create L1 L2 (result in mm2,mm4) L2=lum+cols    0  0  0  0 L3 L2 L1 L0   L3 L2 L1 L0 l3 l2 l1 l0   L3 L2 L1 L0 l3 l2 l1 l0   L3 0  L1  0 l3  0 l1  0   0  L2  0 L0  0 l2  0 l0   0  L3  0 L1  0 l3  0 l1 create R (result in mm6)   0 L3  0 L1  0 l3  0 l1   0 L2  0 L0  0 l2  0 l0 lum1+red:x R3 x R1 x r3 x r1 lum1+red:x R2 x R0 x r2 x r0  R3 R1 r3 r1 R3 R1 r3 r1  R2 R0 r2 r0 R2 R0 r2 r0         00 00 00 00 00 00 00 00  R3 R2 R1 R0 r3 r2 r1 r0 create Cb (result in mm1)         0  0  0  0  u3 u2 u1 u0         0  u3 0  u2 00 u1 00 u0         00 u1 00 u0 00 u1 00 u0 mm1-128:u1 u1 u0 u0 u1 u1 u0 u0 create Cb_g (result in mm5) u1 u1 u0 u0 u1 u1 u0 u0 blue*-109dec=1.7129*64 blue*114dec=1.78125*64 blue=red/64 blue=blue/64 create G (result in mm7)   0  L3  0 L1  0 l3  0 l1   0  L2  0 L0  0 l2  0 l1 lum1+Cb_g:x G3t x G1t x g3t x g1t lum1+Cb_g:x G2t x G0t x g2t x g0t lum1+Cr_g:x G3  x G1  x g3  x g1 lum1+blue:x G2  x G0  x g2  x g0 G3 G1 g3 g1 G3 G1 g3 g1 G2 G0 g2 g0 G2 G0 g2 g0 G3 G2 G1 G0 g3 g2 g1 g0 create B (result in mm5)   0  L3  0 L1  0 l3  0 l1   0  L2  0 L0  0 l2  0 l1 lum1+blue:x B3 x B1 x b3 x b1 lum1+blue:x B2 x B0 x b2 x b0 B3 B1 b3 b1 B3 B1 b3 b1 B2 B0 b2 b0 B2 B0 b2 b0 B3 B2 B1 B0 b3 b2 b1 b0 fill destination row1 (needed are mm6=Rr,mm7=Gg,mm5=Bb)  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 R3 R2 R1 R0 r3 r2 r1 r0 B3 B2 B1 B0 b3 b2 b1 b0 process lower lum  0 r3  0 r2  0 r1  0 r0  0 b3  0 b2  0 b1  0 b0  0 r3  0 r2  0 r1  0 r0  0 b3  0 b2  0 b1  0 b0  0 r1  0 b1  0 r0  0 b0  0 r3  0 b3  0 r2  0 b2  0  0  0  0  0  0  0  0 G3 G2 G1 G0 g3 g2 g1 g0 g3  0 g2  0 g1  0 g0  0  0  0 g1  0  0  0 g0  0  0 r1 g1 b1  0 r0 g0 b0 wrote out ! row1  0  0  0  0  0  0  0  0 g3  0 g2  0 g1  0 g0  0  0  0 g3  0  0  0 g2  0  0 r3 g3 b3  0 r2 g2 b2 wrote out ! row1 fill destination row2 (needed are mm6=Rr,mm7=Gg,mm5=Bb) this can be done "destructive"  0  0  0  0  0  0  0  0  0 R3  0 R2  0 R1  0 R0 G3 B3 G2 B2 G1 B1 G0 B0 G3 B3 G2 B2 G1 B1 G0 B0  0 R1 G1 B1  0 R0 G0 B0 wrote out ! row2  0 R3 G3 B3  0 R2 G2 B2 wrote out ! row2 lum+4 row1+16 row2+16 cr+2 cb+2 x+4 lum += cols row1+= mod row2+= mod x=0 get rid of the stack slot we reserved. reset MMX registers. Pointer to the end  16 bit target  start of second row   increment for row1 in byte  tap dance to workaround the inability to use %%ebx at will...  move one thing to the stack... save a slot on the stack. save %%ebx. put the thing in ebx. put the thing in the stack slot. get back %%ebx (the PIC register). 4 Cb         0  0  0  0 u3 u2 u1 u0 4 Cr                0  0  0  0 v3 v2 v1 v0 4 W cb   0 u3  0 u2  0 u1  0 u0 4 W cr   0 v3  0 v2  0 v1  0 v0 Cb                   0 u3  0 u2  0 u1  0 u0 Cr Cb2green 0 R3  0 R2  0 R1  0 R0 L1      l7 L6 L5 L4 L3 L2 L1 L0 Cb2blue L1      00 L6 00 L4 00 L2 00 L0 Cr2green L2 Cr2red L2           00 L7 00 L5 00 L3 00 L1 lum1 Cb2green + Cr2green == green lum2 lum1 lum1 +blue 00 B6 00 B4 00 B2 00 B0 lum1 lum1 +red  00 R6 00 R4 00 R2 00 R0 lum1 +green 00 G6 00 G4 00 G2 00 G0 R1 0 .. 64 lum2                       00 L7 00 L5 00 L3 00 L1 G1  - .. + Lum2 +blue 00 B7 00 B5 00 B3 00 B1 B1         0 .. 64 R1 R1 G1 G1 B1 B1 GREEN       1 BLUE        1 lum2 lum2 +red      00 R7 00 R5 00 R3 00 R1 lum2 +green 00 G7 00 G5 00 G3 00 G1 R2 MM4 G2 L3 load lum2 L3 lum3 GREEN 2 BLUE  2 L4 load lum2 L4 lum4 write row1 write row1 Lum3 Lum3 +blue Lum3 Lum3 +red Lum3 +green Lum4 Lum4 +blue Lum3 +blue Lum4 Lum4 +red Lum4 +green GREEN 3 psr 6 BLUE BLUE  3 BLUE GREEN 4 row2+16 lum += cols row1+= mod row2+= mod x=0 get rid of the stack slot we reserved. *INDENT-ON*  GCC3 i386 inline assembly 