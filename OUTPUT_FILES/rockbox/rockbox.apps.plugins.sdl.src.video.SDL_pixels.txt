
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org
 General (mostly internal) pixel/color manipulation routines for SDL  Helper functions 
 * Allocate a pixel format structure and fill it according to the given info.
  Allocate an empty pixel format structure  Set up the format  Packed pixels with custom mask  Packed pixels with standard mask  R-G-B  Palettized formats have no mask info  Palettized mode  create palette according to masks  Create a black and white bitmap palette  Create an empty palette 
 * Change any previous mappings from/to the new surface format
  It wrapped... 
 * Free a previously allocated format structure
 
 * Calculate an 8-bit (3 red, 3 green, 2 blue) dithered palette of colors
  only 8bpp supported right now  map each bit field to the full [0, 255] interval,
		   so 0 is mapped to (0, 0, 0) and 255 to (255, 255, 255)  
 * Calculate the pad-aligned scanline width of a surface
  Surface should be 4-byte aligned for speed  4-byte aligning 
 * Match an RGB value to a particular palette index
  Do colorspace distance matching  Perfect match!  Find the opaque pixel value corresponding to an RGB triple  Find the pixel value corresponding to an RGBA quadruple 
		 * This makes sure that the result is mapped to the
		 * interval [0..255], and the maximum value for each
		 * component is 255. This is important to make sure
		 * that white is indeed reported as (255, 255, 255),
		 * and that opaque alpha is 255.
		 * This only works for RGB bit fields at least 4 bit
		 * wide, which is almost always the case.
		  the note for SDL_GetRGBA above applies here too  Apply gamma to a set of colors - this is easy. :)  Map from Palette to Palette  If an identical palette, no need to map  Map from Palette to BitField  We memory copy to the pixel map so the endianness is preserved  Map from BitField to Dithered-Palette to Palette  Generate a 256 color dither palette  SDL_DitherColors does not initialize the 'unused' component of colors,
	   but Map1to1 compares it against pal, so we should initialize it.  Allocate the empty map  Allocate the software blit data  It's ready to go  Clear out any previous mapping  Figure out what kind of mapping we're doing  Palette --> Palette  If both SDL_HWSURFACE, assume have same palette  Palette --> BitField  BitField --> Palette  Don't optimize to copy  BitField --> BitField  Choose your blitters wisely 
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org
 General (mostly internal) pixel/color manipulation routines for SDL  Helper functions 
 * Allocate a pixel format structure and fill it according to the given info.
  Allocate an empty pixel format structure  Set up the format  Packed pixels with custom mask  Packed pixels with standard mask  R-G-B  Palettized formats have no mask info  Palettized mode  create palette according to masks  Create a black and white bitmap palette  Create an empty palette 
 * Change any previous mappings from/to the new surface format
  It wrapped... 
 * Free a previously allocated format structure
 
 * Calculate an 8-bit (3 red, 3 green, 2 blue) dithered palette of colors
  only 8bpp supported right now  map each bit field to the full [0, 255] interval,
		   so 0 is mapped to (0, 0, 0) and 255 to (255, 255, 255)  
 * Calculate the pad-aligned scanline width of a surface
  Surface should be 4-byte aligned for speed  4-byte aligning 
 * Match an RGB value to a particular palette index
  Do colorspace distance matching  Perfect match!  Find the opaque pixel value corresponding to an RGB triple  Find the pixel value corresponding to an RGBA quadruple 
		 * This makes sure that the result is mapped to the
		 * interval [0..255], and the maximum value for each
		 * component is 255. This is important to make sure
		 * that white is indeed reported as (255, 255, 255),
		 * and that opaque alpha is 255.
		 * This only works for RGB bit fields at least 4 bit
		 * wide, which is almost always the case.
		  the note for SDL_GetRGBA above applies here too  Apply gamma to a set of colors - this is easy. :)  Map from Palette to Palette  If an identical palette, no need to map  Map from Palette to BitField  We memory copy to the pixel map so the endianness is preserved  Map from BitField to Dithered-Palette to Palette  Generate a 256 color dither palette  SDL_DitherColors does not initialize the 'unused' component of colors,
	   but Map1to1 compares it against pal, so we should initialize it.  Allocate the empty map  Allocate the software blit data  It's ready to go  Clear out any previous mapping  Figure out what kind of mapping we're doing  Palette --> Palette  If both SDL_HWSURFACE, assume have same palette  Palette --> BitField  BitField --> Palette  Don't optimize to copy  BitField --> BitField  Choose your blitters wisely 
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org
 General (mostly internal) pixel/color manipulation routines for SDL  Helper functions 
 * Allocate a pixel format structure and fill it according to the given info.
  Allocate an empty pixel format structure  Set up the format  Packed pixels with custom mask  Packed pixels with standard mask  R-G-B  Palettized formats have no mask info  Palettized mode  create palette according to masks  Create a black and white bitmap palette  Create an empty palette 
 * Change any previous mappings from/to the new surface format
  It wrapped... 
 * Free a previously allocated format structure
 
 * Calculate an 8-bit (3 red, 3 green, 2 blue) dithered palette of colors
  only 8bpp supported right now  map each bit field to the full [0, 255] interval,
		   so 0 is mapped to (0, 0, 0) and 255 to (255, 255, 255)  
 * Calculate the pad-aligned scanline width of a surface
  Surface should be 4-byte aligned for speed  4-byte aligning 
 * Match an RGB value to a particular palette index
  Do colorspace distance matching  Perfect match!  Find the opaque pixel value corresponding to an RGB triple  Find the pixel value corresponding to an RGBA quadruple 
		 * This makes sure that the result is mapped to the
		 * interval [0..255], and the maximum value for each
		 * component is 255. This is important to make sure
		 * that white is indeed reported as (255, 255, 255),
		 * and that opaque alpha is 255.
		 * This only works for RGB bit fields at least 4 bit
		 * wide, which is almost always the case.
		  the note for SDL_GetRGBA above applies here too  Apply gamma to a set of colors - this is easy. :)  Map from Palette to Palette  If an identical palette, no need to map  Map from Palette to BitField  We memory copy to the pixel map so the endianness is preserved  Map from BitField to Dithered-Palette to Palette  Generate a 256 color dither palette  SDL_DitherColors does not initialize the 'unused' component of colors,
	   but Map1to1 compares it against pal, so we should initialize it.  Allocate the empty map  Allocate the software blit data  It's ready to go  Clear out any previous mapping  Figure out what kind of mapping we're doing  Palette --> Palette  If both SDL_HWSURFACE, assume have same palette  Palette --> BitField  BitField --> Palette  Don't optimize to copy  BitField --> BitField  Choose your blitters wisely 