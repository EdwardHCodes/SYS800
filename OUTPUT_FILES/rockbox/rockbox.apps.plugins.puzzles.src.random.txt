
 * random.c: Internal random number generator, guaranteed to work
 * the same way on all platforms. Used when generating an initial
 * game state from a random game seed; required to ensure that game
 * seeds can be exchanged between versions of a puzzle compiled for
 * different platforms.
 * 
 * The generator is based on SHA-1. This is almost certainly
 * overkill, but I had the SHA-1 code kicking around and it was
 * easier to reuse it than to do anything else!
  ----------------------------------------------------------------------
 * Core SHA algorithm: processes 16-word blocks into a message digest.
  ----------------------------------------------------------------------
 * Outer SHA algorithm: take an arbitrary length byte string,
 * convert it into 16-word blocks with the prescribed padding at
 * the end, and pass those blocks to the core SHA algorithm.
 
     * Update the length field.
     
	 * Trivial case: just add to the block.
	 
	 * We must complete and process at least one block.
	  Now process the block. Gather bytes big-endian into words  ----------------------------------------------------------------------
 * The random number generator.
 
     * `(1 << bits) - 1' is not good enough, since if bits==32 on a
     * 32-bit machine, behaviour is undefined and Intel has a nasty
     * habit of shifting left by zero instead. We'll shift by
     * bits-1 and then separately shift by one.
     
	     * We have a byte. Put it somewhere.
	     
 * random.c: Internal random number generator, guaranteed to work
 * the same way on all platforms. Used when generating an initial
 * game state from a random game seed; required to ensure that game
 * seeds can be exchanged between versions of a puzzle compiled for
 * different platforms.
 * 
 * The generator is based on SHA-1. This is almost certainly
 * overkill, but I had the SHA-1 code kicking around and it was
 * easier to reuse it than to do anything else!
  ----------------------------------------------------------------------
 * Core SHA algorithm: processes 16-word blocks into a message digest.
  ----------------------------------------------------------------------
 * Outer SHA algorithm: take an arbitrary length byte string,
 * convert it into 16-word blocks with the prescribed padding at
 * the end, and pass those blocks to the core SHA algorithm.
 
     * Update the length field.
     
	 * Trivial case: just add to the block.
	 
	 * We must complete and process at least one block.
	  Now process the block. Gather bytes big-endian into words  ----------------------------------------------------------------------
 * The random number generator.
 
     * `(1 << bits) - 1' is not good enough, since if bits==32 on a
     * 32-bit machine, behaviour is undefined and Intel has a nasty
     * habit of shifting left by zero instead. We'll shift by
     * bits-1 and then separately shift by one.
     
	     * We have a byte. Put it somewhere.
	     
 * random.c: Internal random number generator, guaranteed to work
 * the same way on all platforms. Used when generating an initial
 * game state from a random game seed; required to ensure that game
 * seeds can be exchanged between versions of a puzzle compiled for
 * different platforms.
 * 
 * The generator is based on SHA-1. This is almost certainly
 * overkill, but I had the SHA-1 code kicking around and it was
 * easier to reuse it than to do anything else!
  ----------------------------------------------------------------------
 * Core SHA algorithm: processes 16-word blocks into a message digest.
  ----------------------------------------------------------------------
 * Outer SHA algorithm: take an arbitrary length byte string,
 * convert it into 16-word blocks with the prescribed padding at
 * the end, and pass those blocks to the core SHA algorithm.
 
     * Update the length field.
     
	 * Trivial case: just add to the block.
	 
	 * We must complete and process at least one block.
	  Now process the block. Gather bytes big-endian into words  ----------------------------------------------------------------------
 * The random number generator.
 
     * `(1 << bits) - 1' is not good enough, since if bits==32 on a
     * 32-bit machine, behaviour is undefined and Intel has a nasty
     * habit of shifting left by zero instead. We'll shift by
     * bits-1 and then separately shift by one.
     
	     * We have a byte. Put it somewhere.
	     