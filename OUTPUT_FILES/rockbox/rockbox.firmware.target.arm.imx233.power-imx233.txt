**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** mV  mV  mV  mV  mV  mV  mV  mV  don't use the full available range because of the weird encodings for
 * extreme values which are useless anyway  mV  mV  below 8, the register value doesn't encode linearly  in decreasing order  in decreasing order  in decreasing order  FIXME
 * POWER_STS.VBUSVALID does not reflect the actual vbusvalid value, only
 * VBUSVALID_STATUS does. Indeed the VBUSVALID field can be locked using
 * VBUSVALIDPIOLOCK. Some Freescale code suggests locking is required for
 * proper operation of the USB ARC core. This is problematic though
 * because it prevents proper usage of the VDD5V irq.
 * Since we didn't encounter this problem, we never lock VBUSVALID
 *
 * WARNING
 * Using VBUSVALID IRQ is broken on STMP3700 (see errata). The IRQ cannot be
 * cleared. Currently fallback to the VDD5V>VDDIO method even though it's less
 * reliable (we could use polling too).
  reverse polarity  clear int  reverse polarity  clear int  setup vbusvalid parameters: set threshold to 4v and power up comparators  enable vbusvalid detection method for the dcdc (improves efficiency)  disable shutdown on 5V fail  make sure VBUSVALID is unlocked  clear vbusvalid irq and set correct polarity  make sure old detection way is not enabled  make the vbusvalid detection way is not enabled  the VDD5V IRQ is shared by several sources, disable them  IMX233_SUBTARGET < 3780  IMX233_SUBTARGET >= 3700  power down  find closest current LOWER THAN OR EQUAL TO the expected current  find closest current GREATHER THAN OR EQUAL TO the expected current  regulator info  offset in the register value bitmask and bitpos bitmask and bitpos bitmask and bitpos read target value  convert it to mv  read brownout offset  convert it to mv  assume Li-Ion, to divide by 6.25, do *100 and /625 compute raw values clear dc-dc ok flag update Wait until regulator is stable (ie brownout condition is gone)
     * If DC-DC is used, we can use the DCDC_OK irq
     * Otherwise it is unreliable (doesn't work when lowering voltage on linregs)
     * It usually takes between 0.5ms and 2.5ms  On STMP37xx, we need to update the weird HW_POWER_DCFUNCV register  offset is -1,0 or 1 offset is -1,0 or 1
void imx233_power_set_regulator_linreg(enum imx233_regulator_t reg,
    bool enabled, int linreg_offset)
{
}
 power up temperature sensor  read temp  power down temperature sensor **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** mV  mV  mV  mV  mV  mV  mV  mV  don't use the full available range because of the weird encodings for
 * extreme values which are useless anyway  mV  mV  below 8, the register value doesn't encode linearly  in decreasing order  in decreasing order  in decreasing order  FIXME
 * POWER_STS.VBUSVALID does not reflect the actual vbusvalid value, only
 * VBUSVALID_STATUS does. Indeed the VBUSVALID field can be locked using
 * VBUSVALIDPIOLOCK. Some Freescale code suggests locking is required for
 * proper operation of the USB ARC core. This is problematic though
 * because it prevents proper usage of the VDD5V irq.
 * Since we didn't encounter this problem, we never lock VBUSVALID
 *
 * WARNING
 * Using VBUSVALID IRQ is broken on STMP3700 (see errata). The IRQ cannot be
 * cleared. Currently fallback to the VDD5V>VDDIO method even though it's less
 * reliable (we could use polling too).
  reverse polarity  clear int  reverse polarity  clear int  setup vbusvalid parameters: set threshold to 4v and power up comparators  enable vbusvalid detection method for the dcdc (improves efficiency)  disable shutdown on 5V fail  make sure VBUSVALID is unlocked  clear vbusvalid irq and set correct polarity  make sure old detection way is not enabled  make the vbusvalid detection way is not enabled  the VDD5V IRQ is shared by several sources, disable them  IMX233_SUBTARGET < 3780  IMX233_SUBTARGET >= 3700  power down  find closest current LOWER THAN OR EQUAL TO the expected current  find closest current GREATHER THAN OR EQUAL TO the expected current  regulator info  offset in the register value bitmask and bitpos bitmask and bitpos bitmask and bitpos read target value  convert it to mv  read brownout offset  convert it to mv  assume Li-Ion, to divide by 6.25, do *100 and /625 compute raw values clear dc-dc ok flag update Wait until regulator is stable (ie brownout condition is gone)
     * If DC-DC is used, we can use the DCDC_OK irq
     * Otherwise it is unreliable (doesn't work when lowering voltage on linregs)
     * It usually takes between 0.5ms and 2.5ms  On STMP37xx, we need to update the weird HW_POWER_DCFUNCV register  offset is -1,0 or 1 offset is -1,0 or 1
void imx233_power_set_regulator_linreg(enum imx233_regulator_t reg,
    bool enabled, int linreg_offset)
{
}
 power up temperature sensor  read temp  power down temperature sensor **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** mV  mV  mV  mV  mV  mV  mV  mV  don't use the full available range because of the weird encodings for
 * extreme values which are useless anyway  mV  mV  below 8, the register value doesn't encode linearly  in decreasing order  in decreasing order  in decreasing order  FIXME
 * POWER_STS.VBUSVALID does not reflect the actual vbusvalid value, only
 * VBUSVALID_STATUS does. Indeed the VBUSVALID field can be locked using
 * VBUSVALIDPIOLOCK. Some Freescale code suggests locking is required for
 * proper operation of the USB ARC core. This is problematic though
 * because it prevents proper usage of the VDD5V irq.
 * Since we didn't encounter this problem, we never lock VBUSVALID
 *
 * WARNING
 * Using VBUSVALID IRQ is broken on STMP3700 (see errata). The IRQ cannot be
 * cleared. Currently fallback to the VDD5V>VDDIO method even though it's less
 * reliable (we could use polling too).
  reverse polarity  clear int  reverse polarity  clear int  setup vbusvalid parameters: set threshold to 4v and power up comparators  enable vbusvalid detection method for the dcdc (improves efficiency)  disable shutdown on 5V fail  make sure VBUSVALID is unlocked  clear vbusvalid irq and set correct polarity  make sure old detection way is not enabled  make the vbusvalid detection way is not enabled  the VDD5V IRQ is shared by several sources, disable them  IMX233_SUBTARGET < 3780  IMX233_SUBTARGET >= 3700  power down  find closest current LOWER THAN OR EQUAL TO the expected current  find closest current GREATHER THAN OR EQUAL TO the expected current  regulator info  offset in the register value bitmask and bitpos bitmask and bitpos bitmask and bitpos read target value  convert it to mv  read brownout offset  convert it to mv  assume Li-Ion, to divide by 6.25, do *100 and /625 compute raw values clear dc-dc ok flag update Wait until regulator is stable (ie brownout condition is gone)
     * If DC-DC is used, we can use the DCDC_OK irq
     * Otherwise it is unreliable (doesn't work when lowering voltage on linregs)
     * It usually takes between 0.5ms and 2.5ms  On STMP37xx, we need to update the weird HW_POWER_DCFUNCV register  offset is -1,0 or 1 offset is -1,0 or 1
void imx233_power_set_regulator_linreg(enum imx233_regulator_t reg,
    bool enabled, int linreg_offset)
{
}
 power up temperature sensor  read temp  power down temperature sensor 