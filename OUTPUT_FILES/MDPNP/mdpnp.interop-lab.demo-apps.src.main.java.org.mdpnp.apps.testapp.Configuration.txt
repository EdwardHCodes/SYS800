******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * The purpose of configuration object is to collect essential parameters either from the command line or
 * from UI dialog to define runtime configuration of the application. The following flow of control defines
 * the behavior of the component:
 *
 *  1.	If any arguments are passed via the command line, the application assumes them to define an
 *  environment and will start the application in the headless mode (i.e no gui).  If any configuration
 *  parameters are missing or undefined, the application will terminate with an error exit code.
 *
 *  2.	If there are no arguments on the command line, the system assumes a ‘gui’ mode and will
 *  present user with the configuration dialog to collect all necessary parameters.
 *
 *  The dialog is pre-populated with the configuration data from the previous runs. That data will be stored
 *  in the .JumpStartSettings file.  Current working directory is searched first and if not found, the user
 *  home directory.
 *
 *  Many system configuration parameters can be controlled/overridden via system environment variables.
 *  Some of those parameters had been exposed via command line arguments (which takes precedence over the
 *  environment). To pass these values into the application context one should use Configuration::createContext
 *  helper API when creating top-level spring application context. The api will install logic to ensure the proper
 *  search order for property resolution.
 *
 *
     * @param path
     * @return spring's application context. The point of this API is to insert a higher priority
     * property resolver into the context so that command line arguments could be used in property
     * resolution. Out of the box our spring xml configs wire property resolvers with 'order=1'
     * which functions just fine, but also allows for a 'order=0' to take over as a primary.
      if mdpnp.ui is set to true, force the system to come up in the UI mode regardless of command line having arguments or not. If not set, default to headless==true. now parse for real.******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * The purpose of configuration object is to collect essential parameters either from the command line or
 * from UI dialog to define runtime configuration of the application. The following flow of control defines
 * the behavior of the component:
 *
 *  1.	If any arguments are passed via the command line, the application assumes them to define an
 *  environment and will start the application in the headless mode (i.e no gui).  If any configuration
 *  parameters are missing or undefined, the application will terminate with an error exit code.
 *
 *  2.	If there are no arguments on the command line, the system assumes a ‘gui’ mode and will
 *  present user with the configuration dialog to collect all necessary parameters.
 *
 *  The dialog is pre-populated with the configuration data from the previous runs. That data will be stored
 *  in the .JumpStartSettings file.  Current working directory is searched first and if not found, the user
 *  home directory.
 *
 *  Many system configuration parameters can be controlled/overridden via system environment variables.
 *  Some of those parameters had been exposed via command line arguments (which takes precedence over the
 *  environment). To pass these values into the application context one should use Configuration::createContext
 *  helper API when creating top-level spring application context. The api will install logic to ensure the proper
 *  search order for property resolution.
 *
 *
     * @param path
     * @return spring's application context. The point of this API is to insert a higher priority
     * property resolver into the context so that command line arguments could be used in property
     * resolution. Out of the box our spring xml configs wire property resolvers with 'order=1'
     * which functions just fine, but also allows for a 'order=0' to take over as a primary.
      if mdpnp.ui is set to true, force the system to come up in the UI mode regardless of command line having arguments or not. If not set, default to headless==true. now parse for real.******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * The purpose of configuration object is to collect essential parameters either from the command line or
 * from UI dialog to define runtime configuration of the application. The following flow of control defines
 * the behavior of the component:
 *
 *  1.	If any arguments are passed via the command line, the application assumes them to define an
 *  environment and will start the application in the headless mode (i.e no gui).  If any configuration
 *  parameters are missing or undefined, the application will terminate with an error exit code.
 *
 *  2.	If there are no arguments on the command line, the system assumes a ‘gui’ mode and will
 *  present user with the configuration dialog to collect all necessary parameters.
 *
 *  The dialog is pre-populated with the configuration data from the previous runs. That data will be stored
 *  in the .JumpStartSettings file.  Current working directory is searched first and if not found, the user
 *  home directory.
 *
 *  Many system configuration parameters can be controlled/overridden via system environment variables.
 *  Some of those parameters had been exposed via command line arguments (which takes precedence over the
 *  environment). To pass these values into the application context one should use Configuration::createContext
 *  helper API when creating top-level spring application context. The api will install logic to ensure the proper
 *  search order for property resolution.
 *
 *
     * @param path
     * @return spring's application context. The point of this API is to insert a higher priority
     * property resolver into the context so that command line arguments could be used in property
     * resolution. Out of the box our spring xml configs wire property resolvers with 'order=1'
     * which functions just fine, but also allows for a 'order=0' to take over as a primary.
      if mdpnp.ui is set to true, force the system to come up in the UI mode regardless of command line having arguments or not. If not set, default to headless==true. now parse for real.******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * The purpose of configuration object is to collect essential parameters either from the command line or
 * from UI dialog to define runtime configuration of the application. The following flow of control defines
 * the behavior of the component:
 *
 *  1.	If any arguments are passed via the command line, the application assumes them to define an
 *  environment and will start the application in the headless mode (i.e no gui).  If any configuration
 *  parameters are missing or undefined, the application will terminate with an error exit code.
 *
 *  2.	If there are no arguments on the command line, the system assumes a ‘gui’ mode and will
 *  present user with the configuration dialog to collect all necessary parameters.
 *
 *  The dialog is pre-populated with the configuration data from the previous runs. That data will be stored
 *  in the .JumpStartSettings file.  Current working directory is searched first and if not found, the user
 *  home directory.
 *
 *  Many system configuration parameters can be controlled/overridden via system environment variables.
 *  Some of those parameters had been exposed via command line arguments (which takes precedence over the
 *  environment). To pass these values into the application context one should use Configuration::createContext
 *  helper API when creating top-level spring application context. The api will install logic to ensure the proper
 *  search order for property resolution.
 *
 *
     * @param path
     * @return spring's application context. The point of this API is to insert a higher priority
     * property resolver into the context so that command line arguments could be used in property
     * resolution. Out of the box our spring xml configs wire property resolvers with 'order=1'
     * which functions just fine, but also allows for a 'order=0' to take over as a primary.
      if mdpnp.ui is set to true, force the system to come up in the UI mode regardless of command line having arguments or not. If not set, default to headless==true. now parse for real.