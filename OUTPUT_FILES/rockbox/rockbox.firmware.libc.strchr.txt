
FUNCTION
        <<strchr>>---search for character in string

INDEX
        strchr

ANSI_SYNOPSIS
        #include <string.h>
        char * strchr(const char *<[string]>, int <[c]>);

TRAD_SYNOPSIS
        #include <string.h>
        char * strchr(<[string]>, <[c]>);
        char *<[string]>;
        int *<[c]>;

DESCRIPTION
        This function finds the first occurence of <[c]> (converted to
        a char) in the string pointed to by <[string]> (including the
        terminating null character).

RETURNS
        Returns a pointer to the located character, or a null pointer
        if <[c]> does not occur in <[string]>.

PORTABILITY
<<strchr>> is ANSI C.

<<strchr>> requires no supporting OS subroutines.

QUICKREF
        strchr ansi pure
 for _DEFUN  Nonzero if X is not aligned on a "long" boundary.   How many bytes are loaded each iteration of the word copy loop.   Nonzero if X (a long int) contains a NULL byte.  DETECTCHAR returns nonzero if (long)X contains the byte used 
   to fill (long)MASK.  The block of bytes currently pointed to by aligned_addr
         contains either a null or the target char, or both.  We
         catch it using the bytewise search.   not PREFER_SIZE_OVER_SPEED 
FUNCTION
        <<strchr>>---search for character in string

INDEX
        strchr

ANSI_SYNOPSIS
        #include <string.h>
        char * strchr(const char *<[string]>, int <[c]>);

TRAD_SYNOPSIS
        #include <string.h>
        char * strchr(<[string]>, <[c]>);
        char *<[string]>;
        int *<[c]>;

DESCRIPTION
        This function finds the first occurence of <[c]> (converted to
        a char) in the string pointed to by <[string]> (including the
        terminating null character).

RETURNS
        Returns a pointer to the located character, or a null pointer
        if <[c]> does not occur in <[string]>.

PORTABILITY
<<strchr>> is ANSI C.

<<strchr>> requires no supporting OS subroutines.

QUICKREF
        strchr ansi pure
 for _DEFUN  Nonzero if X is not aligned on a "long" boundary.   How many bytes are loaded each iteration of the word copy loop.   Nonzero if X (a long int) contains a NULL byte.  DETECTCHAR returns nonzero if (long)X contains the byte used 
   to fill (long)MASK.  The block of bytes currently pointed to by aligned_addr
         contains either a null or the target char, or both.  We
         catch it using the bytewise search.   not PREFER_SIZE_OVER_SPEED 
FUNCTION
        <<strchr>>---search for character in string

INDEX
        strchr

ANSI_SYNOPSIS
        #include <string.h>
        char * strchr(const char *<[string]>, int <[c]>);

TRAD_SYNOPSIS
        #include <string.h>
        char * strchr(<[string]>, <[c]>);
        char *<[string]>;
        int *<[c]>;

DESCRIPTION
        This function finds the first occurence of <[c]> (converted to
        a char) in the string pointed to by <[string]> (including the
        terminating null character).

RETURNS
        Returns a pointer to the located character, or a null pointer
        if <[c]> does not occur in <[string]>.

PORTABILITY
<<strchr>> is ANSI C.

<<strchr>> requires no supporting OS subroutines.

QUICKREF
        strchr ansi pure
 for _DEFUN  Nonzero if X is not aligned on a "long" boundary.   How many bytes are loaded each iteration of the word copy loop.   Nonzero if X (a long int) contains a NULL byte.  DETECTCHAR returns nonzero if (long)X contains the byte used 
   to fill (long)MASK.  The block of bytes currently pointed to by aligned_addr
         contains either a null or the target char, or both.  We
         catch it using the bytewise search.   not PREFER_SIZE_OVER_SPEED 