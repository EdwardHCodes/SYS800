****************************************************************************

 GIF construction tools

*************************************************************************** #include <stdio.h> *****************************************************************************
 Miscellaneous utility functions                          
***************************************************************************** return smallest bitfield size n will fit in *****************************************************************************
  Color map object functions                              
*****************************************************************************
 * Allocate a color map of given size; initialize with contents of
 * ColorMap if that pointer is non-NULL.
 ** FIXME: Our ColorCount has to be a power of two.  Is it necessary to
     * make the user know that or should we automatically round up instead? ******************************************************************************
Free a color map object
****************************************************************************** #ifdef DEBUG  DEBUG ******************************************************************************
 Compute the union of two given color maps and return it.  If result can't 
 fit into 256 colors, NULL is returned, the allocated union otherwise.
 ColorIn1 is copied as is to ColorUnion, while colors from ColorIn2 are
 copied iff they didn't exist before.  ColorTransIn2 maps the old
 ColorIn2 into the ColorUnion color map table./
******************************************************************************
     * We don't worry about duplicates within either color map; if
     * the caller wants to resolve those, he can perform unions
     * with an empty color map.
      Allocate table which will hold the result for sure.  
     * Copy ColorIn1 to ColorUnion.
      
     * Potentially obnoxious hack:
     *
     * Back CrntSlot down past all contiguous {0, 0, 0} slots at the end
     * of table 1.  This is very useful if your display is limited to
     * 16 colors.
      Copy ColorIn2 to ColorUnion (use old colors if they exist):  Let's see if this color already exists:  color exists in Color1  Color is new - copy it to a new slot:  
         * Zero out slots up to next power of 2.
         * We know these slots exist because of the way ColorUnion's
         * start dimension was computed.
          perhaps we can shrink the map? ******************************************************************************
 Apply a given color translation to the raster bits of an image
***********************************************************************************************************************************************************
 Extension record functions                              
**********************************************************************************************************************************************************
 Image block allocation functions                          
***************************************************************************** Private Function:
 * Frees the last image in the GifFile->SavedImages array
  Remove one SavedImage from the GifFile  Deallocate its Colormap  Deallocate the image data  Deallocate any extensions ** FIXME: We could realloc the GifFile->SavedImages structure but is
     * there a point to it? Saves some memory but we'd have to do it every
     * time.  If this is used in GifFreeSavedImages then it would be inefficient
     * (The whole array is going to be deallocated.)  If we just use it when
     * we want to free the last Image it's convenient to do it here.
     
 * Append an image block to the SavedImages array  
  
             * Make our own allocated copies of the heap fields in the
             * copied record.  This guards against potential aliasing
             * problems.
              first, the local color map  next, the raster  finally, the extension blocks  end ****************************************************************************

 GIF construction tools

*************************************************************************** #include <stdio.h> *****************************************************************************
 Miscellaneous utility functions                          
***************************************************************************** return smallest bitfield size n will fit in *****************************************************************************
  Color map object functions                              
*****************************************************************************
 * Allocate a color map of given size; initialize with contents of
 * ColorMap if that pointer is non-NULL.
 ** FIXME: Our ColorCount has to be a power of two.  Is it necessary to
     * make the user know that or should we automatically round up instead? ******************************************************************************
Free a color map object
****************************************************************************** #ifdef DEBUG  DEBUG ******************************************************************************
 Compute the union of two given color maps and return it.  If result can't 
 fit into 256 colors, NULL is returned, the allocated union otherwise.
 ColorIn1 is copied as is to ColorUnion, while colors from ColorIn2 are
 copied iff they didn't exist before.  ColorTransIn2 maps the old
 ColorIn2 into the ColorUnion color map table./
******************************************************************************
     * We don't worry about duplicates within either color map; if
     * the caller wants to resolve those, he can perform unions
     * with an empty color map.
      Allocate table which will hold the result for sure.  
     * Copy ColorIn1 to ColorUnion.
      
     * Potentially obnoxious hack:
     *
     * Back CrntSlot down past all contiguous {0, 0, 0} slots at the end
     * of table 1.  This is very useful if your display is limited to
     * 16 colors.
      Copy ColorIn2 to ColorUnion (use old colors if they exist):  Let's see if this color already exists:  color exists in Color1  Color is new - copy it to a new slot:  
         * Zero out slots up to next power of 2.
         * We know these slots exist because of the way ColorUnion's
         * start dimension was computed.
          perhaps we can shrink the map? ******************************************************************************
 Apply a given color translation to the raster bits of an image
***********************************************************************************************************************************************************
 Extension record functions                              
**********************************************************************************************************************************************************
 Image block allocation functions                          
***************************************************************************** Private Function:
 * Frees the last image in the GifFile->SavedImages array
  Remove one SavedImage from the GifFile  Deallocate its Colormap  Deallocate the image data  Deallocate any extensions ** FIXME: We could realloc the GifFile->SavedImages structure but is
     * there a point to it? Saves some memory but we'd have to do it every
     * time.  If this is used in GifFreeSavedImages then it would be inefficient
     * (The whole array is going to be deallocated.)  If we just use it when
     * we want to free the last Image it's convenient to do it here.
     
 * Append an image block to the SavedImages array  
  
             * Make our own allocated copies of the heap fields in the
             * copied record.  This guards against potential aliasing
             * problems.
              first, the local color map  next, the raster  finally, the extension blocks  end ****************************************************************************

 GIF construction tools

*************************************************************************** #include <stdio.h> *****************************************************************************
 Miscellaneous utility functions                          
***************************************************************************** return smallest bitfield size n will fit in *****************************************************************************
  Color map object functions                              
*****************************************************************************
 * Allocate a color map of given size; initialize with contents of
 * ColorMap if that pointer is non-NULL.
 ** FIXME: Our ColorCount has to be a power of two.  Is it necessary to
     * make the user know that or should we automatically round up instead? ******************************************************************************
Free a color map object
****************************************************************************** #ifdef DEBUG  DEBUG ******************************************************************************
 Compute the union of two given color maps and return it.  If result can't 
 fit into 256 colors, NULL is returned, the allocated union otherwise.
 ColorIn1 is copied as is to ColorUnion, while colors from ColorIn2 are
 copied iff they didn't exist before.  ColorTransIn2 maps the old
 ColorIn2 into the ColorUnion color map table./
******************************************************************************
     * We don't worry about duplicates within either color map; if
     * the caller wants to resolve those, he can perform unions
     * with an empty color map.
      Allocate table which will hold the result for sure.  
     * Copy ColorIn1 to ColorUnion.
      
     * Potentially obnoxious hack:
     *
     * Back CrntSlot down past all contiguous {0, 0, 0} slots at the end
     * of table 1.  This is very useful if your display is limited to
     * 16 colors.
      Copy ColorIn2 to ColorUnion (use old colors if they exist):  Let's see if this color already exists:  color exists in Color1  Color is new - copy it to a new slot:  
         * Zero out slots up to next power of 2.
         * We know these slots exist because of the way ColorUnion's
         * start dimension was computed.
          perhaps we can shrink the map? ******************************************************************************
 Apply a given color translation to the raster bits of an image
***********************************************************************************************************************************************************
 Extension record functions                              
**********************************************************************************************************************************************************
 Image block allocation functions                          
***************************************************************************** Private Function:
 * Frees the last image in the GifFile->SavedImages array
  Remove one SavedImage from the GifFile  Deallocate its Colormap  Deallocate the image data  Deallocate any extensions ** FIXME: We could realloc the GifFile->SavedImages structure but is
     * there a point to it? Saves some memory but we'd have to do it every
     * time.  If this is used in GifFreeSavedImages then it would be inefficient
     * (The whole array is going to be deallocated.)  If we just use it when
     * we want to free the last Image it's convenient to do it here.
     
 * Append an image block to the SavedImages array  
  
             * Make our own allocated copies of the heap fields in the
             * copied record.  This guards against potential aliasing
             * problems.
              first, the local color map  next, the raster  finally, the extension blocks  end 