 Copyright (c) 2007-2008 CSIRO
   Copyright (c) 2007-2008 Xiph.Org Foundation
   Written by Jean-Marc Valin 
   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

   - Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

   - Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
   OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 This is a simple MDCT implementation that uses a N/4 complex FFT
   to do most of the work. It should be relatively straightforward to
   plug in pretty much and FFT here.

   This replaces the Vorbis FFT (and uses the exact same API), which
   was a bit too messy and that was ending up duplicating code
   (might as well use the same FFT everywhere).

   The algorithm is similar to (and inspired from) Fabrice Bellard's
   MDCT implementation in FFMPEG, but has differences in signs, ordering
   and scaling in many places.
 We have enough points that sine isn't necessary  CUSTOM_MODES  Forward MDCT trashes the input array  Allows us to scale with MULT16_32_Q16(), which is faster than
      MULT16_32_Q15() on ARM.  Consider the input to be composed of four blocks: [a, b, c, d]  Window, shuffle, fold  Temp pointers to make it really clear to the compiler what we're doing  Real part arranged as -d-cR, Imag part arranged as -b+aR Real part arranged as a-bR, Imag part arranged as -c-dR  Real part arranged as a-bR, Imag part arranged as -c-dR  Pre-rotation  N/4 complex FFT, does not downscale anymore  Post-rotate  Temp pointers to make it really clear to the compiler what we're doing  Temp pointers to make it really clear to the compiler what we're doing  OVERRIDE_clt_mdct_forward  Pre-rotate  Temp pointers to make it really clear to the compiler what we're doing  We swap real and imag because we use an FFT instead of an IFFT.  Storing the pre-rotation directly in the bitrev order.  Post-rotate and de-shuffle from both ends of the buffer at once to make
      it in-place.  Loop to (N4+1)>>1 to handle odd N4. When N4 is odd, the
         middle pair will be computed twice.  We swap real and imag because we're using an FFT instead of an IFFT.  We'd scale up by 2 here, but instead it's done when mixing the windows  We swap real and imag because we're using an FFT instead of an IFFT.  We'd scale up by 2 here, but instead it's done when mixing the windows  Mirror on both sides for TDAC  OVERRIDE_clt_mdct_backward  Copyright (c) 2007-2008 CSIRO
   Copyright (c) 2007-2008 Xiph.Org Foundation
   Written by Jean-Marc Valin 
   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

   - Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

   - Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
   OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 This is a simple MDCT implementation that uses a N/4 complex FFT
   to do most of the work. It should be relatively straightforward to
   plug in pretty much and FFT here.

   This replaces the Vorbis FFT (and uses the exact same API), which
   was a bit too messy and that was ending up duplicating code
   (might as well use the same FFT everywhere).

   The algorithm is similar to (and inspired from) Fabrice Bellard's
   MDCT implementation in FFMPEG, but has differences in signs, ordering
   and scaling in many places.
 We have enough points that sine isn't necessary  CUSTOM_MODES  Forward MDCT trashes the input array  Allows us to scale with MULT16_32_Q16(), which is faster than
      MULT16_32_Q15() on ARM.  Consider the input to be composed of four blocks: [a, b, c, d]  Window, shuffle, fold  Temp pointers to make it really clear to the compiler what we're doing  Real part arranged as -d-cR, Imag part arranged as -b+aR Real part arranged as a-bR, Imag part arranged as -c-dR  Real part arranged as a-bR, Imag part arranged as -c-dR  Pre-rotation  N/4 complex FFT, does not downscale anymore  Post-rotate  Temp pointers to make it really clear to the compiler what we're doing  Temp pointers to make it really clear to the compiler what we're doing  OVERRIDE_clt_mdct_forward  Pre-rotate  Temp pointers to make it really clear to the compiler what we're doing  We swap real and imag because we use an FFT instead of an IFFT.  Storing the pre-rotation directly in the bitrev order.  Post-rotate and de-shuffle from both ends of the buffer at once to make
      it in-place.  Loop to (N4+1)>>1 to handle odd N4. When N4 is odd, the
         middle pair will be computed twice.  We swap real and imag because we're using an FFT instead of an IFFT.  We'd scale up by 2 here, but instead it's done when mixing the windows  We swap real and imag because we're using an FFT instead of an IFFT.  We'd scale up by 2 here, but instead it's done when mixing the windows  Mirror on both sides for TDAC  OVERRIDE_clt_mdct_backward  Copyright (c) 2007-2008 CSIRO
   Copyright (c) 2007-2008 Xiph.Org Foundation
   Written by Jean-Marc Valin 
   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

   - Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

   - Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
   OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 This is a simple MDCT implementation that uses a N/4 complex FFT
   to do most of the work. It should be relatively straightforward to
   plug in pretty much and FFT here.

   This replaces the Vorbis FFT (and uses the exact same API), which
   was a bit too messy and that was ending up duplicating code
   (might as well use the same FFT everywhere).

   The algorithm is similar to (and inspired from) Fabrice Bellard's
   MDCT implementation in FFMPEG, but has differences in signs, ordering
   and scaling in many places.
 We have enough points that sine isn't necessary  CUSTOM_MODES  Forward MDCT trashes the input array  Allows us to scale with MULT16_32_Q16(), which is faster than
      MULT16_32_Q15() on ARM.  Consider the input to be composed of four blocks: [a, b, c, d]  Window, shuffle, fold  Temp pointers to make it really clear to the compiler what we're doing  Real part arranged as -d-cR, Imag part arranged as -b+aR Real part arranged as a-bR, Imag part arranged as -c-dR  Real part arranged as a-bR, Imag part arranged as -c-dR  Pre-rotation  N/4 complex FFT, does not downscale anymore  Post-rotate  Temp pointers to make it really clear to the compiler what we're doing  Temp pointers to make it really clear to the compiler what we're doing  OVERRIDE_clt_mdct_forward  Pre-rotate  Temp pointers to make it really clear to the compiler what we're doing  We swap real and imag because we use an FFT instead of an IFFT.  Storing the pre-rotation directly in the bitrev order.  Post-rotate and de-shuffle from both ends of the buffer at once to make
      it in-place.  Loop to (N4+1)>>1 to handle odd N4. When N4 is odd, the
         middle pair will be computed twice.  We swap real and imag because we're using an FFT instead of an IFFT.  We'd scale up by 2 here, but instead it's done when mixing the windows  We swap real and imag because we're using an FFT instead of an IFFT.  We'd scale up by 2 here, but instead it's done when mixing the windows  Mirror on both sides for TDAC  OVERRIDE_clt_mdct_backward 