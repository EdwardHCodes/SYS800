 infback.c -- inflate using a call-back interface
 * Copyright (C) 1995-2005 Mark Adler
 * For conditions of distribution and use, see copyright notice in zlib.h
 
   This code is largely copied from inflate.c.  Normally either infback.o or
   inflate.o would be linked into an application--not both.  The interface
   with inffast.c is retained so that optimized assembler-coded versions of
   inflate_fast() can be used with either inflate.c or infback.c.
  function prototypes 
   strm provides memory allocation functions in zalloc and zfree, or
   Z_NULL to use the library memory allocation functions.

   windowBits is in the range 8..15, and window is a user-supplied
   window and output buffer that is 2**windowBits bytes.
  in case we return an error 
   Return state with length and distance decoding tables and index sizes set to
   fixed code decoding.  Normally this returns fixed tables from inffixed.h.
   If BUILDFIXED is defined, then instead this routine builds the tables the
   first time it's called, and returns those tables the first time and
   thereafter.  This reduces the size of the code by about 2K bytes, in
   exchange for a little execution time.  However, BUILDFIXED should not be
   used for threaded applications, since the rewriting of the tables and virgin
   may not be thread-safe.
  build fixed huffman tables if first call (may not be thread safe)  literal/length table  distance table  do this just once  !BUILDFIXED  BUILDFIXED  Macros for inflateBack():  Load returned state from inflate_fast()  Set state from registers for inflate_fast()  Clear the input bit accumulator  Assure that some input is available.  If input is requested, but denied,
   then return a Z_BUF_ERROR from inflateBack().  Get a byte of input into the bit accumulator, or return from inflateBack()
   with an error if there is no input available.  Assure that there are at least n bits in the bit accumulator.  If there is
   not enough available input to do that, then return from inflateBack() with
   an error.  Return the low n bits of the bit accumulator (n < 16)  Remove n bits from the bit accumulator  Remove zero to seven bits as needed to go to a byte boundary  Assure that some output space is available, by writing out the window
   if it's full.  If the write fails, return from inflateBack() with a
   Z_BUF_ERROR. 
   strm provides the memory allocation functions and window buffer on input,
   and provides information on the unused input on return.  For Z_DATA_ERROR
   returns, strm will also provide an error message.

   in() and out() are the call-back input and output functions.  When
   inflateBack() needs more input, it calls in().  When inflateBack() has
   filled the window with output, or when it completes with data in the
   window, it calls out() to write out the data.  The application must not
   change the provided input until in() is called again or inflateBack()
   returns.  The application must not change the window/output buffer until
   inflateBack() returns.

   in() and out() are called with a descriptor parameter provided in the
   inflateBack() call.  This parameter can be a structure that provides the
   information required to do the read or write, as well as accumulated
   information on the input and output such as totals and check values.

   in() should return zero on failure.  out() should return non-zero on
   failure.  If either in() or out() fails, than inflateBack() returns a
   Z_BUF_ERROR.  strm->next_in can be checked for Z_NULL to see whether it
   was in() or out() that caused in the error.  Otherwise,  inflateBack()
   returns Z_STREAM_END on success, Z_DATA_ERROR for an deflate format
   error, or Z_MEM_ERROR if it could not allocate memory for the state.
   inflateBack() can also return Z_STREAM_ERROR if the input parameters
   are not correct, i.e. strm is Z_NULL or the state was not initialized.
  next input  next output  available input and output  bit buffer  bits in bit buffer  number of stored or match bytes to copy  where to copy match bytes from  current decoding table entry  parent table entry  length to copy for repeats, bits to drop  return code  permutation of code lengths  Check that the strm exists and that the state was initialized  Reset the state  Inflate until end of block marked as last  determine and dispatch block type  stored block  fixed block  decode codes  dynamic block  get and verify stored block length  go to byte boundary  copy stored block from input to output  get dynamic table entries descriptor  get code length code lengths (not a typo)  get length and distance code code lengths  handle error breaks in while  build code tables  use inflate_fast() if we have enough input and output  get a literal, length, or end-of-block code  process literal  process end of block  invalid code  length code -- get extra bits, if any  get distance code  get distance extra bits, if any  copy match from window to output  inflate stream terminated properly -- write leftover output  can't happen, but makes compilers happy  Return unused input  infback.c -- inflate using a call-back interface
 * Copyright (C) 1995-2005 Mark Adler
 * For conditions of distribution and use, see copyright notice in zlib.h
 
   This code is largely copied from inflate.c.  Normally either infback.o or
   inflate.o would be linked into an application--not both.  The interface
   with inffast.c is retained so that optimized assembler-coded versions of
   inflate_fast() can be used with either inflate.c or infback.c.
  function prototypes 
   strm provides memory allocation functions in zalloc and zfree, or
   Z_NULL to use the library memory allocation functions.

   windowBits is in the range 8..15, and window is a user-supplied
   window and output buffer that is 2**windowBits bytes.
  in case we return an error 
   Return state with length and distance decoding tables and index sizes set to
   fixed code decoding.  Normally this returns fixed tables from inffixed.h.
   If BUILDFIXED is defined, then instead this routine builds the tables the
   first time it's called, and returns those tables the first time and
   thereafter.  This reduces the size of the code by about 2K bytes, in
   exchange for a little execution time.  However, BUILDFIXED should not be
   used for threaded applications, since the rewriting of the tables and virgin
   may not be thread-safe.
  build fixed huffman tables if first call (may not be thread safe)  literal/length table  distance table  do this just once  !BUILDFIXED  BUILDFIXED  Macros for inflateBack():  Load returned state from inflate_fast()  Set state from registers for inflate_fast()  Clear the input bit accumulator  Assure that some input is available.  If input is requested, but denied,
   then return a Z_BUF_ERROR from inflateBack().  Get a byte of input into the bit accumulator, or return from inflateBack()
   with an error if there is no input available.  Assure that there are at least n bits in the bit accumulator.  If there is
   not enough available input to do that, then return from inflateBack() with
   an error.  Return the low n bits of the bit accumulator (n < 16)  Remove n bits from the bit accumulator  Remove zero to seven bits as needed to go to a byte boundary  Assure that some output space is available, by writing out the window
   if it's full.  If the write fails, return from inflateBack() with a
   Z_BUF_ERROR. 
   strm provides the memory allocation functions and window buffer on input,
   and provides information on the unused input on return.  For Z_DATA_ERROR
   returns, strm will also provide an error message.

   in() and out() are the call-back input and output functions.  When
   inflateBack() needs more input, it calls in().  When inflateBack() has
   filled the window with output, or when it completes with data in the
   window, it calls out() to write out the data.  The application must not
   change the provided input until in() is called again or inflateBack()
   returns.  The application must not change the window/output buffer until
   inflateBack() returns.

   in() and out() are called with a descriptor parameter provided in the
   inflateBack() call.  This parameter can be a structure that provides the
   information required to do the read or write, as well as accumulated
   information on the input and output such as totals and check values.

   in() should return zero on failure.  out() should return non-zero on
   failure.  If either in() or out() fails, than inflateBack() returns a
   Z_BUF_ERROR.  strm->next_in can be checked for Z_NULL to see whether it
   was in() or out() that caused in the error.  Otherwise,  inflateBack()
   returns Z_STREAM_END on success, Z_DATA_ERROR for an deflate format
   error, or Z_MEM_ERROR if it could not allocate memory for the state.
   inflateBack() can also return Z_STREAM_ERROR if the input parameters
   are not correct, i.e. strm is Z_NULL or the state was not initialized.
  next input  next output  available input and output  bit buffer  bits in bit buffer  number of stored or match bytes to copy  where to copy match bytes from  current decoding table entry  parent table entry  length to copy for repeats, bits to drop  return code  permutation of code lengths  Check that the strm exists and that the state was initialized  Reset the state  Inflate until end of block marked as last  determine and dispatch block type  stored block  fixed block  decode codes  dynamic block  get and verify stored block length  go to byte boundary  copy stored block from input to output  get dynamic table entries descriptor  get code length code lengths (not a typo)  get length and distance code code lengths  handle error breaks in while  build code tables  use inflate_fast() if we have enough input and output  get a literal, length, or end-of-block code  process literal  process end of block  invalid code  length code -- get extra bits, if any  get distance code  get distance extra bits, if any  copy match from window to output  inflate stream terminated properly -- write leftover output  can't happen, but makes compilers happy  Return unused input  infback.c -- inflate using a call-back interface
 * Copyright (C) 1995-2005 Mark Adler
 * For conditions of distribution and use, see copyright notice in zlib.h
 
   This code is largely copied from inflate.c.  Normally either infback.o or
   inflate.o would be linked into an application--not both.  The interface
   with inffast.c is retained so that optimized assembler-coded versions of
   inflate_fast() can be used with either inflate.c or infback.c.
  function prototypes 
   strm provides memory allocation functions in zalloc and zfree, or
   Z_NULL to use the library memory allocation functions.

   windowBits is in the range 8..15, and window is a user-supplied
   window and output buffer that is 2**windowBits bytes.
  in case we return an error 
   Return state with length and distance decoding tables and index sizes set to
   fixed code decoding.  Normally this returns fixed tables from inffixed.h.
   If BUILDFIXED is defined, then instead this routine builds the tables the
   first time it's called, and returns those tables the first time and
   thereafter.  This reduces the size of the code by about 2K bytes, in
   exchange for a little execution time.  However, BUILDFIXED should not be
   used for threaded applications, since the rewriting of the tables and virgin
   may not be thread-safe.
  build fixed huffman tables if first call (may not be thread safe)  literal/length table  distance table  do this just once  !BUILDFIXED  BUILDFIXED  Macros for inflateBack():  Load returned state from inflate_fast()  Set state from registers for inflate_fast()  Clear the input bit accumulator  Assure that some input is available.  If input is requested, but denied,
   then return a Z_BUF_ERROR from inflateBack().  Get a byte of input into the bit accumulator, or return from inflateBack()
   with an error if there is no input available.  Assure that there are at least n bits in the bit accumulator.  If there is
   not enough available input to do that, then return from inflateBack() with
   an error.  Return the low n bits of the bit accumulator (n < 16)  Remove n bits from the bit accumulator  Remove zero to seven bits as needed to go to a byte boundary  Assure that some output space is available, by writing out the window
   if it's full.  If the write fails, return from inflateBack() with a
   Z_BUF_ERROR. 
   strm provides the memory allocation functions and window buffer on input,
   and provides information on the unused input on return.  For Z_DATA_ERROR
   returns, strm will also provide an error message.

   in() and out() are the call-back input and output functions.  When
   inflateBack() needs more input, it calls in().  When inflateBack() has
   filled the window with output, or when it completes with data in the
   window, it calls out() to write out the data.  The application must not
   change the provided input until in() is called again or inflateBack()
   returns.  The application must not change the window/output buffer until
   inflateBack() returns.

   in() and out() are called with a descriptor parameter provided in the
   inflateBack() call.  This parameter can be a structure that provides the
   information required to do the read or write, as well as accumulated
   information on the input and output such as totals and check values.

   in() should return zero on failure.  out() should return non-zero on
   failure.  If either in() or out() fails, than inflateBack() returns a
   Z_BUF_ERROR.  strm->next_in can be checked for Z_NULL to see whether it
   was in() or out() that caused in the error.  Otherwise,  inflateBack()
   returns Z_STREAM_END on success, Z_DATA_ERROR for an deflate format
   error, or Z_MEM_ERROR if it could not allocate memory for the state.
   inflateBack() can also return Z_STREAM_ERROR if the input parameters
   are not correct, i.e. strm is Z_NULL or the state was not initialized.
  next input  next output  available input and output  bit buffer  bits in bit buffer  number of stored or match bytes to copy  where to copy match bytes from  current decoding table entry  parent table entry  length to copy for repeats, bits to drop  return code  permutation of code lengths  Check that the strm exists and that the state was initialized  Reset the state  Inflate until end of block marked as last  determine and dispatch block type  stored block  fixed block  decode codes  dynamic block  get and verify stored block length  go to byte boundary  copy stored block from input to output  get dynamic table entries descriptor  get code length code lengths (not a typo)  get length and distance code code lengths  handle error breaks in while  build code tables  use inflate_fast() if we have enough input and output  get a literal, length, or end-of-block code  process literal  process end of block  invalid code  length code -- get extra bits, if any  get distance code  get distance extra bits, if any  copy match from window to output  inflate stream terminated properly -- write leftover output  can't happen, but makes compilers happy  Return unused input 