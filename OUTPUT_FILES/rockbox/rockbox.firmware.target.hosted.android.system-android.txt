**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2010 Thomas Martitz
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** global fields for use with various JNI calls  this is used to return from the entry point of the native library.  no better place yet  stub  this is the entry point of the android app initially called by jni  hack!!! we can't have a valid stack pointer otherwise.
     * but we don't really need it anyway, thread.c only needs it
     * for overflow detection which doesn't apply for the main thread
     * (it's managed by the OS)  setup a jmp_buf to come back later in case of exit  simply return here. this will allow the VM to clean up objects and do
     * garbage collection  below is the facility for external (from other java threads) to safely call
 * into our snative code. When extracting rockbox.zip the main function is
 * called only after extraction. This delay can be accounted for by calling
 * wait_rockbox_ready(). This does not return until the critical parts of Rockbox
 * can be considered up and running.  don't bother with mutexes for this  now ready. signal all waiters **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2010 Thomas Martitz
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** global fields for use with various JNI calls  this is used to return from the entry point of the native library.  no better place yet  stub  this is the entry point of the android app initially called by jni  hack!!! we can't have a valid stack pointer otherwise.
     * but we don't really need it anyway, thread.c only needs it
     * for overflow detection which doesn't apply for the main thread
     * (it's managed by the OS)  setup a jmp_buf to come back later in case of exit  simply return here. this will allow the VM to clean up objects and do
     * garbage collection  below is the facility for external (from other java threads) to safely call
 * into our snative code. When extracting rockbox.zip the main function is
 * called only after extraction. This delay can be accounted for by calling
 * wait_rockbox_ready(). This does not return until the critical parts of Rockbox
 * can be considered up and running.  don't bother with mutexes for this  now ready. signal all waiters **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2010 Thomas Martitz
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** global fields for use with various JNI calls  this is used to return from the entry point of the native library.  no better place yet  stub  this is the entry point of the android app initially called by jni  hack!!! we can't have a valid stack pointer otherwise.
     * but we don't really need it anyway, thread.c only needs it
     * for overflow detection which doesn't apply for the main thread
     * (it's managed by the OS)  setup a jmp_buf to come back later in case of exit  simply return here. this will allow the VM to clean up objects and do
     * garbage collection  below is the facility for external (from other java threads) to safely call
 * into our snative code. When extracting rockbox.zip the main function is
 * called only after extraction. This delay can be accounted for by calling
 * wait_rockbox_ready(). This does not return until the critical parts of Rockbox
 * can be considered up and running.  don't bother with mutexes for this  now ready. signal all waiters 