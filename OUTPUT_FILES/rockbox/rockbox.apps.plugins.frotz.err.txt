 err.c - Runtime error reporting functions
 *	Written by Jim Dunleavy <jim.dunleavy@erha.ie>
 *
 * This file is part of Frotz.
 *
 * Frotz is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Frotz is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
  Define stuff for stricter Z-code error checking, for the generic
   Unix/DOS/etc terminal-window interface. Feel free to change the way
   player prefs are specified, or replace report_zstrict_error() 
   completely if you want to change the way errors are reported.  int err_report_mode = ERR_DEFAULT_REPORT_MODE; 
 * init_err
 *
 * Initialise error reporting.
 *
  Initialize the counters. 
 * runtime_error
 *
 * An error has occurred. Ignore it, pass it to os_fatal or report
 * it according to err_report_mode.
 *
 * errnum : Numeric code for error (1 to ERR_NUM_ERRORS)
 *
  report_error 
 * print_long
 *
 * Print an unsigned 32bit number in decimal or hex.
 *
  print_long  err.c - Runtime error reporting functions
 *	Written by Jim Dunleavy <jim.dunleavy@erha.ie>
 *
 * This file is part of Frotz.
 *
 * Frotz is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Frotz is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
  Define stuff for stricter Z-code error checking, for the generic
   Unix/DOS/etc terminal-window interface. Feel free to change the way
   player prefs are specified, or replace report_zstrict_error() 
   completely if you want to change the way errors are reported.  int err_report_mode = ERR_DEFAULT_REPORT_MODE; 
 * init_err
 *
 * Initialise error reporting.
 *
  Initialize the counters. 
 * runtime_error
 *
 * An error has occurred. Ignore it, pass it to os_fatal or report
 * it according to err_report_mode.
 *
 * errnum : Numeric code for error (1 to ERR_NUM_ERRORS)
 *
  report_error 
 * print_long
 *
 * Print an unsigned 32bit number in decimal or hex.
 *
  print_long  err.c - Runtime error reporting functions
 *	Written by Jim Dunleavy <jim.dunleavy@erha.ie>
 *
 * This file is part of Frotz.
 *
 * Frotz is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Frotz is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
  Define stuff for stricter Z-code error checking, for the generic
   Unix/DOS/etc terminal-window interface. Feel free to change the way
   player prefs are specified, or replace report_zstrict_error() 
   completely if you want to change the way errors are reported.  int err_report_mode = ERR_DEFAULT_REPORT_MODE; 
 * init_err
 *
 * Initialise error reporting.
 *
  Initialize the counters. 
 * runtime_error
 *
 * An error has occurred. Ignore it, pass it to os_fatal or report
 * it according to err_report_mode.
 *
 * errnum : Numeric code for error (1 to ERR_NUM_ERRORS)
 *
  report_error 
 * print_long
 *
 * Print an unsigned 32bit number in decimal or hex.
 *
  print_long 