**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Codec for aac files without container
 *
 * Written by Igor B. Poretsky
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** The maximum buffer size handled by faad. 12 bytes are required by libfaad
 * as headroom (see libfaad/bits.c). FAAD_BYTE_BUFFER_SIZE bytes are buffered
 * for each frame.  this is the codec entry point  Generic codec initialisation  this is called for each file to process  Clean and initialize decoder structures  initialise the sound converter  irrelevant, we don't convert  Resume the desired (byte) position.  The main decoding loop  Deal with any pending seek requests  Seek to the desired time position.  Request the required number of bytes from the input buffer  End of Stream  Decode one block - returned samples will be host-endian  Advance codec buffer (no need to call set_offset because of this)  Output the audio  Update the elapsed-time indicator **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Codec for aac files without container
 *
 * Written by Igor B. Poretsky
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** The maximum buffer size handled by faad. 12 bytes are required by libfaad
 * as headroom (see libfaad/bits.c). FAAD_BYTE_BUFFER_SIZE bytes are buffered
 * for each frame.  this is the codec entry point  Generic codec initialisation  this is called for each file to process  Clean and initialize decoder structures  initialise the sound converter  irrelevant, we don't convert  Resume the desired (byte) position.  The main decoding loop  Deal with any pending seek requests  Seek to the desired time position.  Request the required number of bytes from the input buffer  End of Stream  Decode one block - returned samples will be host-endian  Advance codec buffer (no need to call set_offset because of this)  Output the audio  Update the elapsed-time indicator **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Codec for aac files without container
 *
 * Written by Igor B. Poretsky
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** The maximum buffer size handled by faad. 12 bytes are required by libfaad
 * as headroom (see libfaad/bits.c). FAAD_BYTE_BUFFER_SIZE bytes are buffered
 * for each frame.  this is the codec entry point  Generic codec initialisation  this is called for each file to process  Clean and initialize decoder structures  initialise the sound converter  irrelevant, we don't convert  Resume the desired (byte) position.  The main decoding loop  Deal with any pending seek requests  Seek to the desired time position.  Request the required number of bytes from the input buffer  End of Stream  Decode one block - returned samples will be host-endian  Advance codec buffer (no need to call set_offset because of this)  Output the audio  Update the elapsed-time indicator 