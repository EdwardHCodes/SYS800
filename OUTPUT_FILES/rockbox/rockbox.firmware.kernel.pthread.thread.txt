 else: no lock. must be running already ~ IF_PRIO(, int priority) for block_thread(), _w_tmp() and wakeup_thread() t->lock must point
 * to a corelock instance, and this corelock must be held by the caller  the thread timed out and was not explicitely woken up.
         * we need to do this now to mark it runnable again  NOTE: objects do their own removal upon timer expiration  else: no lock. must be running already ~ IF_PRIO(, int priority) for block_thread(), _w_tmp() and wakeup_thread() t->lock must point
 * to a corelock instance, and this corelock must be held by the caller  the thread timed out and was not explicitely woken up.
         * we need to do this now to mark it runnable again  NOTE: objects do their own removal upon timer expiration  else: no lock. must be running already ~ IF_PRIO(, int priority) for block_thread(), _w_tmp() and wakeup_thread() t->lock must point
 * to a corelock instance, and this corelock must be held by the caller  the thread timed out and was not explicitely woken up.
         * we need to do this now to mark it runnable again  NOTE: objects do their own removal upon timer expiration 