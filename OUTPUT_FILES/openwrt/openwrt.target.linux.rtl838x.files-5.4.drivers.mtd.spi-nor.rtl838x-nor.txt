 SPDX-License-Identifier: GPL-2.0-only Needed because of MMU constraints deactivate CS0, CS1activate CS0,CS1deactivate CS0, CS1 Perform SPINOR_OP_READ: 1 byte command & 3 byte addr Read Data, 4 bytes at a time 		printk("%.8x  ", *((uint32_t*) buffer));  The rest needs to be read 1 byte a time 		printk("%.2x  ", *(buffer)); 
 * Do fast read in 3 or 4 Byte addressing mode
  Send read command  Send address  Dummy cycles  Start reading  Read Data, 4 bytes at a time 		printk("%.8x  ", *((uint32_t*) buffer));  The rest needs to be read 1 byte a time 		printk("%.2x  ", *(buffer)); 
 * Do write (Page Programming) in 3 or 4 Byte addressing mode
  Send write command, command IO-width is 1 (bit 25/26)  Send address  Write Data, 1 byte at a time, if we are not 4-byte aligned  Now we can write 4 bytes at a time  Final bytes might need to be written 1 byte at a time, again  Do write in 4-byte mode on large Macronix chips  Do fast read in 3, or 4-byte mode on large Macronix chips  TODO: do timeout and return error  Do erase in 4-byte mode on large Macronix chips  TODO: do timeout and return error  Send erase command, command IO-width is 1 (bit 25/26)  Send address  SPINOR_OP_WRSR  initialized with NULL  only support one attached flash  Get the 3/4 byte address mode as configure by bootloader 	struct rtl8xx_nor *rtl838x_nor = platform_get_drvdata(pdev);  sentinel  SPDX-License-Identifier: GPL-2.0-only Needed because of MMU constraints deactivate CS0, CS1activate CS0,CS1deactivate CS0, CS1 Perform SPINOR_OP_READ: 1 byte command & 3 byte addr Read Data, 4 bytes at a time 		printk("%.8x  ", *((uint32_t*) buffer));  The rest needs to be read 1 byte a time 		printk("%.2x  ", *(buffer)); 
 * Do fast read in 3 or 4 Byte addressing mode
  Send read command  Send address  Dummy cycles  Start reading  Read Data, 4 bytes at a time 		printk("%.8x  ", *((uint32_t*) buffer));  The rest needs to be read 1 byte a time 		printk("%.2x  ", *(buffer)); 
 * Do write (Page Programming) in 3 or 4 Byte addressing mode
  Send write command, command IO-width is 1 (bit 25/26)  Send address  Write Data, 1 byte at a time, if we are not 4-byte aligned  Now we can write 4 bytes at a time  Final bytes might need to be written 1 byte at a time, again  Do write in 4-byte mode on large Macronix chips  Do fast read in 3, or 4-byte mode on large Macronix chips  TODO: do timeout and return error  Do erase in 4-byte mode on large Macronix chips  TODO: do timeout and return error  Send erase command, command IO-width is 1 (bit 25/26)  Send address  SPINOR_OP_WRSR  initialized with NULL  only support one attached flash  Get the 3/4 byte address mode as configure by bootloader 	struct rtl8xx_nor *rtl838x_nor = platform_get_drvdata(pdev);  sentinel  SPDX-License-Identifier: GPL-2.0-only Needed because of MMU constraints deactivate CS0, CS1activate CS0,CS1deactivate CS0, CS1 Perform SPINOR_OP_READ: 1 byte command & 3 byte addr Read Data, 4 bytes at a time 		printk("%.8x  ", *((uint32_t*) buffer));  The rest needs to be read 1 byte a time 		printk("%.2x  ", *(buffer)); 
 * Do fast read in 3 or 4 Byte addressing mode
  Send read command  Send address  Dummy cycles  Start reading  Read Data, 4 bytes at a time 		printk("%.8x  ", *((uint32_t*) buffer));  The rest needs to be read 1 byte a time 		printk("%.2x  ", *(buffer)); 
 * Do write (Page Programming) in 3 or 4 Byte addressing mode
  Send write command, command IO-width is 1 (bit 25/26)  Send address  Write Data, 1 byte at a time, if we are not 4-byte aligned  Now we can write 4 bytes at a time  Final bytes might need to be written 1 byte at a time, again  Do write in 4-byte mode on large Macronix chips  Do fast read in 3, or 4-byte mode on large Macronix chips  TODO: do timeout and return error  Do erase in 4-byte mode on large Macronix chips  TODO: do timeout and return error  Send erase command, command IO-width is 1 (bit 25/26)  Send address  SPINOR_OP_WRSR  initialized with NULL  only support one attached flash  Get the 3/4 byte address mode as configure by bootloader 	struct rtl8xx_nor *rtl838x_nor = platform_get_drvdata(pdev);  sentinel 