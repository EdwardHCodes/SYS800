**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 by Linus Nielsen Feltzing
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** First, read the iriver original firmware into the image  This is the length of the binary image without the scrambling
       overhead (but including the ESTFBINR header)  Read the rest of the binary data, but not the checksum block  Now, read the boot loader into the image  Patch the reset vector to start the boot loader  This is the actual length of the binary, excluding all headers  Patch the ESTFBINR header  This is the length of the binary, including the ESTFBINR header and
       rounded up to the nearest 0x200 boundary  The number of checksums, i.e number of 0x200 byte blocks  The total file length, including all headers and checksums  Patch the scrambler header with the new length info  iAudio firmware update file header size  Address of flash contents that get overwritten by a firmware update.
 * Contents before this address contain the preloader and are not affected
 * by a firmware update.
 * -> Firmware update file contents starting at offset HEADER_SIZE end up
 * in flash at address FLASH_START
  Start of unused space in original firmware (flash address, not file
 * offset!) where we patch in the Rockbox loader  End of unused space in original firmware  Patch the Rockbox bootloader into free space in the original firmware
 * (starting at 0x150000). The preloader starts execution of the OF at
 * 0x10000 which normally contains a jsr 0x10010. We also patch this to
 * do a jsr 0x150000 to the Rockbox dual boot loader instead. If it then
 * decides to start the OF instead of Rockbox, it simply does a jmp
 * 0x10010 instead of loading Rockbox from disk.
  jsr 0x10010  dualboot signatures  X5  M5  read input files  verify format of input files  verify firmware is not overrun  change jsr 0x10010 to jsr DUAL_BOOTLOADER  recalc checksum  write output **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 by Linus Nielsen Feltzing
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** First, read the iriver original firmware into the image  This is the length of the binary image without the scrambling
       overhead (but including the ESTFBINR header)  Read the rest of the binary data, but not the checksum block  Now, read the boot loader into the image  Patch the reset vector to start the boot loader  This is the actual length of the binary, excluding all headers  Patch the ESTFBINR header  This is the length of the binary, including the ESTFBINR header and
       rounded up to the nearest 0x200 boundary  The number of checksums, i.e number of 0x200 byte blocks  The total file length, including all headers and checksums  Patch the scrambler header with the new length info  iAudio firmware update file header size  Address of flash contents that get overwritten by a firmware update.
 * Contents before this address contain the preloader and are not affected
 * by a firmware update.
 * -> Firmware update file contents starting at offset HEADER_SIZE end up
 * in flash at address FLASH_START
  Start of unused space in original firmware (flash address, not file
 * offset!) where we patch in the Rockbox loader  End of unused space in original firmware  Patch the Rockbox bootloader into free space in the original firmware
 * (starting at 0x150000). The preloader starts execution of the OF at
 * 0x10000 which normally contains a jsr 0x10010. We also patch this to
 * do a jsr 0x150000 to the Rockbox dual boot loader instead. If it then
 * decides to start the OF instead of Rockbox, it simply does a jmp
 * 0x10010 instead of loading Rockbox from disk.
  jsr 0x10010  dualboot signatures  X5  M5  read input files  verify format of input files  verify firmware is not overrun  change jsr 0x10010 to jsr DUAL_BOOTLOADER  recalc checksum  write output **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 by Linus Nielsen Feltzing
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** First, read the iriver original firmware into the image  This is the length of the binary image without the scrambling
       overhead (but including the ESTFBINR header)  Read the rest of the binary data, but not the checksum block  Now, read the boot loader into the image  Patch the reset vector to start the boot loader  This is the actual length of the binary, excluding all headers  Patch the ESTFBINR header  This is the length of the binary, including the ESTFBINR header and
       rounded up to the nearest 0x200 boundary  The number of checksums, i.e number of 0x200 byte blocks  The total file length, including all headers and checksums  Patch the scrambler header with the new length info  iAudio firmware update file header size  Address of flash contents that get overwritten by a firmware update.
 * Contents before this address contain the preloader and are not affected
 * by a firmware update.
 * -> Firmware update file contents starting at offset HEADER_SIZE end up
 * in flash at address FLASH_START
  Start of unused space in original firmware (flash address, not file
 * offset!) where we patch in the Rockbox loader  End of unused space in original firmware  Patch the Rockbox bootloader into free space in the original firmware
 * (starting at 0x150000). The preloader starts execution of the OF at
 * 0x10000 which normally contains a jsr 0x10010. We also patch this to
 * do a jsr 0x150000 to the Rockbox dual boot loader instead. If it then
 * decides to start the OF instead of Rockbox, it simply does a jmp
 * 0x10010 instead of loading Rockbox from disk.
  jsr 0x10010  dualboot signatures  X5  M5  read input files  verify format of input files  verify firmware is not overrun  change jsr 0x10010 to jsr DUAL_BOOTLOADER  recalc checksum  write output 