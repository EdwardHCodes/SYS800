**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Channels use standard-style PCM callback interface but a latency of one
   frame by double-buffering is introduced in order to facilitate mixing and
   keep the hardware fed. There must be sufficient time to perform operations
   before the last samples are sent to the codec and so things are done in
   parallel (as much as possible) with sending-out data.  Define this to nonzero to add a marker pulse at each frame start  Descriptor for each channel  Buffer pointer  Bytes remaining  Size of consumed data in prev. cycle  Registered callback  Playback status  Amp. factor: 0x0000 = mute, 0x10000 = unity  Callback for new buffer  Forget about boost here for the moment  Because of the double-buffering, playback is always from here, otherwise a
   mechanism for the channel callbacks not to free buffers too early would be
   needed (if we _really_ want it and it's worth it, we _can_ do that ;-) )  Which downmix_buf?  Size of buffer to play next time  Descriptors for all available channels  Packed pointer array of all playing (active) channels in "channels" array  Number of silence frames to play after all data has played * Mixing routines, CPU optmized ** Private generic routines * Mark channel active to mix its data  Stop channel from mixing  Deactivate channel and change it to stopped state  Main PCM callback - sends the current prepared frame to play  Buffering callback - calls sub-callbacks and mixes the data for next
   buffer to be sent from mixer_pcm_callback()  Next buffer  "Loop" back here if one round wasn't enough to fill a frame  Find the active channel with the least data remaining and call any
           callbacks for channels that ran out - stopping whichever report
           "no more"  Channel is stopping  Channel will play for at least part of this frame  Channel with least amount of data remaining determines the downmix
           size  Add all still-active channels to the downmix  Mix first two channels with each other as the downmix  More channels to mix - mix each with existing downmix  There is still space remaining in this frame  Pad incomplete frames with silence  else silence period ran out - go to sleep  Certain SoC's have to do cleanup  Start PCM driver if it's not currently playing  Requires a shared global sample rate for all channels  Prepare initial frames and set up the double buffer  Save the previous call's output * Public interfaces * Start playback on a channel  Initial buffer not passed - call the callback now  Protect chan struct if active;
                                           may also be same callback which
                                           must not be reentered  Allow playback while doing callback  We have data - start the channel  Never had anything - stop it now  Pause or resume a channel (when started)  Stop playback on a channel  Set channel's amplitude factor  Return channel's playback status  Returns amount data remaining in channel before next callback  Return pointer to channel's playing audio data and the size remaining  Still same buffer?  else can't be sure buf and size are related  Calculate peak values for channel  Adjust channel pointer by a given offset to support movable buffers  Makes no difference if it's stopped  Set a hook that is called upon getting a new source buffer for a channel
   NOTE: Called for each buffer, not each mixer chunk  Stop ALL channels and PCM and reset state  Set output samplerate  All data is now invalid  Get output samplerate **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Channels use standard-style PCM callback interface but a latency of one
   frame by double-buffering is introduced in order to facilitate mixing and
   keep the hardware fed. There must be sufficient time to perform operations
   before the last samples are sent to the codec and so things are done in
   parallel (as much as possible) with sending-out data.  Define this to nonzero to add a marker pulse at each frame start  Descriptor for each channel  Buffer pointer  Bytes remaining  Size of consumed data in prev. cycle  Registered callback  Playback status  Amp. factor: 0x0000 = mute, 0x10000 = unity  Callback for new buffer  Forget about boost here for the moment  Because of the double-buffering, playback is always from here, otherwise a
   mechanism for the channel callbacks not to free buffers too early would be
   needed (if we _really_ want it and it's worth it, we _can_ do that ;-) )  Which downmix_buf?  Size of buffer to play next time  Descriptors for all available channels  Packed pointer array of all playing (active) channels in "channels" array  Number of silence frames to play after all data has played * Mixing routines, CPU optmized ** Private generic routines * Mark channel active to mix its data  Stop channel from mixing  Deactivate channel and change it to stopped state  Main PCM callback - sends the current prepared frame to play  Buffering callback - calls sub-callbacks and mixes the data for next
   buffer to be sent from mixer_pcm_callback()  Next buffer  "Loop" back here if one round wasn't enough to fill a frame  Find the active channel with the least data remaining and call any
           callbacks for channels that ran out - stopping whichever report
           "no more"  Channel is stopping  Channel will play for at least part of this frame  Channel with least amount of data remaining determines the downmix
           size  Add all still-active channels to the downmix  Mix first two channels with each other as the downmix  More channels to mix - mix each with existing downmix  There is still space remaining in this frame  Pad incomplete frames with silence  else silence period ran out - go to sleep  Certain SoC's have to do cleanup  Start PCM driver if it's not currently playing  Requires a shared global sample rate for all channels  Prepare initial frames and set up the double buffer  Save the previous call's output * Public interfaces * Start playback on a channel  Initial buffer not passed - call the callback now  Protect chan struct if active;
                                           may also be same callback which
                                           must not be reentered  Allow playback while doing callback  We have data - start the channel  Never had anything - stop it now  Pause or resume a channel (when started)  Stop playback on a channel  Set channel's amplitude factor  Return channel's playback status  Returns amount data remaining in channel before next callback  Return pointer to channel's playing audio data and the size remaining  Still same buffer?  else can't be sure buf and size are related  Calculate peak values for channel  Adjust channel pointer by a given offset to support movable buffers  Makes no difference if it's stopped  Set a hook that is called upon getting a new source buffer for a channel
   NOTE: Called for each buffer, not each mixer chunk  Stop ALL channels and PCM and reset state  Set output samplerate  All data is now invalid  Get output samplerate **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Channels use standard-style PCM callback interface but a latency of one
   frame by double-buffering is introduced in order to facilitate mixing and
   keep the hardware fed. There must be sufficient time to perform operations
   before the last samples are sent to the codec and so things are done in
   parallel (as much as possible) with sending-out data.  Define this to nonzero to add a marker pulse at each frame start  Descriptor for each channel  Buffer pointer  Bytes remaining  Size of consumed data in prev. cycle  Registered callback  Playback status  Amp. factor: 0x0000 = mute, 0x10000 = unity  Callback for new buffer  Forget about boost here for the moment  Because of the double-buffering, playback is always from here, otherwise a
   mechanism for the channel callbacks not to free buffers too early would be
   needed (if we _really_ want it and it's worth it, we _can_ do that ;-) )  Which downmix_buf?  Size of buffer to play next time  Descriptors for all available channels  Packed pointer array of all playing (active) channels in "channels" array  Number of silence frames to play after all data has played * Mixing routines, CPU optmized ** Private generic routines * Mark channel active to mix its data  Stop channel from mixing  Deactivate channel and change it to stopped state  Main PCM callback - sends the current prepared frame to play  Buffering callback - calls sub-callbacks and mixes the data for next
   buffer to be sent from mixer_pcm_callback()  Next buffer  "Loop" back here if one round wasn't enough to fill a frame  Find the active channel with the least data remaining and call any
           callbacks for channels that ran out - stopping whichever report
           "no more"  Channel is stopping  Channel will play for at least part of this frame  Channel with least amount of data remaining determines the downmix
           size  Add all still-active channels to the downmix  Mix first two channels with each other as the downmix  More channels to mix - mix each with existing downmix  There is still space remaining in this frame  Pad incomplete frames with silence  else silence period ran out - go to sleep  Certain SoC's have to do cleanup  Start PCM driver if it's not currently playing  Requires a shared global sample rate for all channels  Prepare initial frames and set up the double buffer  Save the previous call's output * Public interfaces * Start playback on a channel  Initial buffer not passed - call the callback now  Protect chan struct if active;
                                           may also be same callback which
                                           must not be reentered  Allow playback while doing callback  We have data - start the channel  Never had anything - stop it now  Pause or resume a channel (when started)  Stop playback on a channel  Set channel's amplitude factor  Return channel's playback status  Returns amount data remaining in channel before next callback  Return pointer to channel's playing audio data and the size remaining  Still same buffer?  else can't be sure buf and size are related  Calculate peak values for channel  Adjust channel pointer by a given offset to support movable buffers  Makes no difference if it's stopped  Set a hook that is called upon getting a new source buffer for a channel
   NOTE: Called for each buffer, not each mixer chunk  Stop ALL channels and PCM and reset state  Set output samplerate  All data is now invalid  Get output samplerate 