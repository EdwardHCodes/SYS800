
** $Id: ldebug.c,v 2.29.1.6 2008/05/08 16:56:26 roberto Exp $
** Debug Interface
** See Copyright Notice in lua.h
 function is not a Lua function?  only active lua functions have current-line information 
** this function can be called asynchronous (e.g. during a signal)
 turn off hooks?  Lua function?  skip lost tail calls  level found?  level is of a lost tail call?  no such level  is a local variable in a Lua function  is 'n' inside 'ci' stack?  pop value  line delta 
 * This may seem expensive but this is only accessed frequently in traceexec
 * and the while loop will be executed roughly half the number of non-blank
 * source lines in the Lua function and these tend to be short.
  line delta  This is a recursive function so it's stack size has been kept to a minimum!  gcc doesn't realize level can't be changed  recv limits recursion depth  not found  handled by lua_getinfo  invalid option  skip the '>'  pop function  no tail call? 
** {======================================================
** Symbolic Execution and code checker
** =======================================================
 invalid instruction after an open call  stores position of last instruction that changed `reg'  points to final return (a `neutral' instruction)  check that it does not jump to a setlist count; this
               is tricky, because the count from a previous setlist may
               have the same value of an invalid setlist; so, we must
               go all the way back to the first of them (if any)  if 'j' is even, previous value is not a setlist (even if
               it looks like one)  change register `a'  check skip  does it jump?  check its jump  set registers from `a' to `b'  at least two operands  at least one result (control variable)  space for results  affect all regs above its base  go through  not full check and jump is forward and do not skip `lastpc'?  do the jump  c = num. returns  affect all registers above base  b = num. returns  tracing?  do not 'execute' these pseudo-instructions  }======================================================  a Lua function?  is a local?  try symbolic execution  global index  move from `b' to `a'  get name for `b'  key index  upvalue index  key index  no useful name found  calling function is not Lua (or is unknown)  calling function  no useful name can be found  only ANSI way to check whether a pointer points to an array  first operand is wrong  is Lua code?  add file:line information  is there an error handling function?  move argument  push function  call it 
** $Id: ldebug.c,v 2.29.1.6 2008/05/08 16:56:26 roberto Exp $
** Debug Interface
** See Copyright Notice in lua.h
 function is not a Lua function?  only active lua functions have current-line information 
** this function can be called asynchronous (e.g. during a signal)
 turn off hooks?  Lua function?  skip lost tail calls  level found?  level is of a lost tail call?  no such level  is a local variable in a Lua function  is 'n' inside 'ci' stack?  pop value  line delta 
 * This may seem expensive but this is only accessed frequently in traceexec
 * and the while loop will be executed roughly half the number of non-blank
 * source lines in the Lua function and these tend to be short.
  line delta  This is a recursive function so it's stack size has been kept to a minimum!  gcc doesn't realize level can't be changed  recv limits recursion depth  not found  handled by lua_getinfo  invalid option  skip the '>'  pop function  no tail call? 
** {======================================================
** Symbolic Execution and code checker
** =======================================================
 invalid instruction after an open call  stores position of last instruction that changed `reg'  points to final return (a `neutral' instruction)  check that it does not jump to a setlist count; this
               is tricky, because the count from a previous setlist may
               have the same value of an invalid setlist; so, we must
               go all the way back to the first of them (if any)  if 'j' is even, previous value is not a setlist (even if
               it looks like one)  change register `a'  check skip  does it jump?  check its jump  set registers from `a' to `b'  at least two operands  at least one result (control variable)  space for results  affect all regs above its base  go through  not full check and jump is forward and do not skip `lastpc'?  do the jump  c = num. returns  affect all registers above base  b = num. returns  tracing?  do not 'execute' these pseudo-instructions  }======================================================  a Lua function?  is a local?  try symbolic execution  global index  move from `b' to `a'  get name for `b'  key index  upvalue index  key index  no useful name found  calling function is not Lua (or is unknown)  calling function  no useful name can be found  only ANSI way to check whether a pointer points to an array  first operand is wrong  is Lua code?  add file:line information  is there an error handling function?  move argument  push function  call it 
** $Id: ldebug.c,v 2.29.1.6 2008/05/08 16:56:26 roberto Exp $
** Debug Interface
** See Copyright Notice in lua.h
 function is not a Lua function?  only active lua functions have current-line information 
** this function can be called asynchronous (e.g. during a signal)
 turn off hooks?  Lua function?  skip lost tail calls  level found?  level is of a lost tail call?  no such level  is a local variable in a Lua function  is 'n' inside 'ci' stack?  pop value  line delta 
 * This may seem expensive but this is only accessed frequently in traceexec
 * and the while loop will be executed roughly half the number of non-blank
 * source lines in the Lua function and these tend to be short.
  line delta  This is a recursive function so it's stack size has been kept to a minimum!  gcc doesn't realize level can't be changed  recv limits recursion depth  not found  handled by lua_getinfo  invalid option  skip the '>'  pop function  no tail call? 
** {======================================================
** Symbolic Execution and code checker
** =======================================================
 invalid instruction after an open call  stores position of last instruction that changed `reg'  points to final return (a `neutral' instruction)  check that it does not jump to a setlist count; this
               is tricky, because the count from a previous setlist may
               have the same value of an invalid setlist; so, we must
               go all the way back to the first of them (if any)  if 'j' is even, previous value is not a setlist (even if
               it looks like one)  change register `a'  check skip  does it jump?  check its jump  set registers from `a' to `b'  at least two operands  at least one result (control variable)  space for results  affect all regs above its base  go through  not full check and jump is forward and do not skip `lastpc'?  do the jump  c = num. returns  affect all registers above base  b = num. returns  tracing?  do not 'execute' these pseudo-instructions  }======================================================  a Lua function?  is a local?  try symbolic execution  global index  move from `b' to `a'  get name for `b'  key index  upvalue index  key index  no useful name found  calling function is not Lua (or is unknown)  calling function  no useful name can be found  only ANSI way to check whether a pointer points to an array  first operand is wrong  is Lua code?  add file:line information  is there an error handling function?  move argument  push function  call it 