**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2013 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** hardcode all the register values for the different settings. This avoid
 * computing the register values at runtime since they never change and also
 * avoid wasting some space in iram.
 * Values from IMX233 manual, for Mobile DDR 7.5ns (133 MHz and 64MHz)
 * Make sure the last value is written to register 40.  DLL bypass mode, concurrent auto-precharge and bank split  Read/write grouping, extra clock for back to back, priority placement  tWR = 2 cycles, tRRD = 1 cycles, tCKE = 2 cycles  CAS lat gate = 3.0 cycles, CAS lat = 3.0 cycles, tWTR = 2  tRP = 2 cycles, tDAL = 4 cycles  DDL: start point = 45, lock = 0, increment = 0, tRC = 5 cycles   DLL: DQS out shift (bypass) = 1, DQS delay bypass (1/0) = 11 / 11  tRCD = 2 cycles, tRAS (min) = 3 cycles, DQS write shift (bypass) = 10  tRFC = 5 cycles  tREF = 460 cycles  tRAS (max) = 4192 cycles, tXSNR = 8 cycles  tXSR = 8 cycles  tINIT = 12005 cycles  tPDEX = 2  concurrent auto-precharge and bank split  Read/write grouping, priority placement  tWR = 2 cycles, tRRD = 2 cycles, tCKE = 2 cycles  CAS lat gate = 3.0 cycles, CAS lat = 3.5 cycles, tWTR = 2  tRP = 3 cycles, tDAL = 5 cycles  DDL: start point = 25, lock = 0, increment = 15, tRC = 10 cycles  DLL: DQS delay (1/0) = 31 / 31  DLL: DQS out shift  = 10  tRCD = 3 cycles, tRAS (min) = 6 cycles, DQS write shift = 35  tRFC = 10 cycles  tREF = 1015 cycles  tRAS (max) = 9165 cycles, tXSNR = 16 cycles  tXSR = 16 cycles  tINIT = 26213 cycles  tPDEX = 4 * WARNING all restriction of imx233_emi_set_frequency apply here !!  Set divider and clear clkgate.  clk_emi@ref_emi/3*18/19  ref_emi@480 MHz
             * clk_emi@151.58 MHz  clk_emi@ref_emi/2*18/33  ref_emi@480 MHz
             * clk_emi@130.91 MHz  clk_emi@ref_emi/5*18/27  ref_emi@480 MHz
             * clk_emi@64 MHz * FIXME we rely on the compiler to NOT use the stack here because it's
     * not in iram ! If it's not smart enough, one can switch the switch to use
     * the irq stack since we are running interrupts disable here ! * BUG for freq<=24 MHz we must keep bypass mode since we run on xtal
     * since this setting is unused by our code so ignore this bug for now * WARNING DANGER
     * Changing the EMI frequency is complicated because it requires to
     * completely shutdown the external memory interface. We must make sure
     * that this code and all the data it uses in in iram and that no access to
     * the sdram will be made during the change. Care must be taken w.r.t to
     * the cache also. * FIXME assume that auto-slow is disabled here since that could put some
     * clock below the minimum value and we want to spend as least time as
     * possible in this state anyway.
     * WARNING DANGER don't call any external function when sdram is disabled
     * otherwise you'll poke sdram and trigger a fatal data abort !  avoid changes if unneeded  first disable all interrupts  flush the cache  put DRAM into self-refresh mode  wait for DRAM to be halted  load timings  switch emi to xtal  wait for transition  put emi dll into reset mode  FIXME Unsure about what to do for stmp37xx load the new frequency dividers  switch emi back to pll  wait for transition  allow emi dll to lock again  wait for lock  get DRAM out of self-refresh mode  wait for DRAM to be to run again **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2013 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** hardcode all the register values for the different settings. This avoid
 * computing the register values at runtime since they never change and also
 * avoid wasting some space in iram.
 * Values from IMX233 manual, for Mobile DDR 7.5ns (133 MHz and 64MHz)
 * Make sure the last value is written to register 40.  DLL bypass mode, concurrent auto-precharge and bank split  Read/write grouping, extra clock for back to back, priority placement  tWR = 2 cycles, tRRD = 1 cycles, tCKE = 2 cycles  CAS lat gate = 3.0 cycles, CAS lat = 3.0 cycles, tWTR = 2  tRP = 2 cycles, tDAL = 4 cycles  DDL: start point = 45, lock = 0, increment = 0, tRC = 5 cycles   DLL: DQS out shift (bypass) = 1, DQS delay bypass (1/0) = 11 / 11  tRCD = 2 cycles, tRAS (min) = 3 cycles, DQS write shift (bypass) = 10  tRFC = 5 cycles  tREF = 460 cycles  tRAS (max) = 4192 cycles, tXSNR = 8 cycles  tXSR = 8 cycles  tINIT = 12005 cycles  tPDEX = 2  concurrent auto-precharge and bank split  Read/write grouping, priority placement  tWR = 2 cycles, tRRD = 2 cycles, tCKE = 2 cycles  CAS lat gate = 3.0 cycles, CAS lat = 3.5 cycles, tWTR = 2  tRP = 3 cycles, tDAL = 5 cycles  DDL: start point = 25, lock = 0, increment = 15, tRC = 10 cycles  DLL: DQS delay (1/0) = 31 / 31  DLL: DQS out shift  = 10  tRCD = 3 cycles, tRAS (min) = 6 cycles, DQS write shift = 35  tRFC = 10 cycles  tREF = 1015 cycles  tRAS (max) = 9165 cycles, tXSNR = 16 cycles  tXSR = 16 cycles  tINIT = 26213 cycles  tPDEX = 4 * WARNING all restriction of imx233_emi_set_frequency apply here !!  Set divider and clear clkgate.  clk_emi@ref_emi/3*18/19  ref_emi@480 MHz
             * clk_emi@151.58 MHz  clk_emi@ref_emi/2*18/33  ref_emi@480 MHz
             * clk_emi@130.91 MHz  clk_emi@ref_emi/5*18/27  ref_emi@480 MHz
             * clk_emi@64 MHz * FIXME we rely on the compiler to NOT use the stack here because it's
     * not in iram ! If it's not smart enough, one can switch the switch to use
     * the irq stack since we are running interrupts disable here ! * BUG for freq<=24 MHz we must keep bypass mode since we run on xtal
     * since this setting is unused by our code so ignore this bug for now * WARNING DANGER
     * Changing the EMI frequency is complicated because it requires to
     * completely shutdown the external memory interface. We must make sure
     * that this code and all the data it uses in in iram and that no access to
     * the sdram will be made during the change. Care must be taken w.r.t to
     * the cache also. * FIXME assume that auto-slow is disabled here since that could put some
     * clock below the minimum value and we want to spend as least time as
     * possible in this state anyway.
     * WARNING DANGER don't call any external function when sdram is disabled
     * otherwise you'll poke sdram and trigger a fatal data abort !  avoid changes if unneeded  first disable all interrupts  flush the cache  put DRAM into self-refresh mode  wait for DRAM to be halted  load timings  switch emi to xtal  wait for transition  put emi dll into reset mode  FIXME Unsure about what to do for stmp37xx load the new frequency dividers  switch emi back to pll  wait for transition  allow emi dll to lock again  wait for lock  get DRAM out of self-refresh mode  wait for DRAM to be to run again **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2013 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** hardcode all the register values for the different settings. This avoid
 * computing the register values at runtime since they never change and also
 * avoid wasting some space in iram.
 * Values from IMX233 manual, for Mobile DDR 7.5ns (133 MHz and 64MHz)
 * Make sure the last value is written to register 40.  DLL bypass mode, concurrent auto-precharge and bank split  Read/write grouping, extra clock for back to back, priority placement  tWR = 2 cycles, tRRD = 1 cycles, tCKE = 2 cycles  CAS lat gate = 3.0 cycles, CAS lat = 3.0 cycles, tWTR = 2  tRP = 2 cycles, tDAL = 4 cycles  DDL: start point = 45, lock = 0, increment = 0, tRC = 5 cycles   DLL: DQS out shift (bypass) = 1, DQS delay bypass (1/0) = 11 / 11  tRCD = 2 cycles, tRAS (min) = 3 cycles, DQS write shift (bypass) = 10  tRFC = 5 cycles  tREF = 460 cycles  tRAS (max) = 4192 cycles, tXSNR = 8 cycles  tXSR = 8 cycles  tINIT = 12005 cycles  tPDEX = 2  concurrent auto-precharge and bank split  Read/write grouping, priority placement  tWR = 2 cycles, tRRD = 2 cycles, tCKE = 2 cycles  CAS lat gate = 3.0 cycles, CAS lat = 3.5 cycles, tWTR = 2  tRP = 3 cycles, tDAL = 5 cycles  DDL: start point = 25, lock = 0, increment = 15, tRC = 10 cycles  DLL: DQS delay (1/0) = 31 / 31  DLL: DQS out shift  = 10  tRCD = 3 cycles, tRAS (min) = 6 cycles, DQS write shift = 35  tRFC = 10 cycles  tREF = 1015 cycles  tRAS (max) = 9165 cycles, tXSNR = 16 cycles  tXSR = 16 cycles  tINIT = 26213 cycles  tPDEX = 4 * WARNING all restriction of imx233_emi_set_frequency apply here !!  Set divider and clear clkgate.  clk_emi@ref_emi/3*18/19  ref_emi@480 MHz
             * clk_emi@151.58 MHz  clk_emi@ref_emi/2*18/33  ref_emi@480 MHz
             * clk_emi@130.91 MHz  clk_emi@ref_emi/5*18/27  ref_emi@480 MHz
             * clk_emi@64 MHz * FIXME we rely on the compiler to NOT use the stack here because it's
     * not in iram ! If it's not smart enough, one can switch the switch to use
     * the irq stack since we are running interrupts disable here ! * BUG for freq<=24 MHz we must keep bypass mode since we run on xtal
     * since this setting is unused by our code so ignore this bug for now * WARNING DANGER
     * Changing the EMI frequency is complicated because it requires to
     * completely shutdown the external memory interface. We must make sure
     * that this code and all the data it uses in in iram and that no access to
     * the sdram will be made during the change. Care must be taken w.r.t to
     * the cache also. * FIXME assume that auto-slow is disabled here since that could put some
     * clock below the minimum value and we want to spend as least time as
     * possible in this state anyway.
     * WARNING DANGER don't call any external function when sdram is disabled
     * otherwise you'll poke sdram and trigger a fatal data abort !  avoid changes if unneeded  first disable all interrupts  flush the cache  put DRAM into self-refresh mode  wait for DRAM to be halted  load timings  switch emi to xtal  wait for transition  put emi dll into reset mode  FIXME Unsure about what to do for stmp37xx load the new frequency dividers  switch emi back to pll  wait for transition  allow emi dll to lock again  wait for lock  get DRAM out of self-refresh mode  wait for DRAM to be to run again 