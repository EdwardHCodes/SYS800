 SPDX-License-Identifier: GPL-2.0
 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>
  return true if 'path' exists, false otherwise  return true if 'path' exists and it is a directory, false otherwise  return true if the given two files are the same, false otherwise 
 * Create the parent directory of the given path.
 *
 * For example, if 'include/config/auto.conf' is given, create 'include/config'.
  Remove the base name. Just return if nothing is left  Just in case it is an absolute path  skip if the directory exists  touch depfile for symbol 'name'  check overflow: prefix + name + ".h" + '\0' must fit in buffer.  Assume directory path already exists.  Try it again.  fall through  fall through  fall through  fall through 
					 * Reading from include/config/auto.conf
					 * If CONFIG_FOO previously existed in
					 * auto.conf but it is missing now,
					 * include/config/foo.h must be touched.
					  check that calculated value agrees with saved value  no previous value and not saved  maybe print value in verbose mode...  Reset values of generates values, so they'll appear
			 * as new, if they should become visible, but that
			 * doesn't quite work if the Kconfig and the saved
			 * configuration disagree.
			  Reset a string value if it's out of range 
 * Kconfig configuration printer
 *
 * This printer is used when generating the resulting configuration after
 * kconfig invocation and `defconfig' files. Unset symbol might be omitted by
 * passing a non-NULL argument to the printer.
 *
 
 * Header printer
 *
 * This printer is used when generating the `include/generated/autoconf.h' file.
  fall through 
 * Write out a minimal config.
 * All values that has default values are skipped as this is redundant.
  Traverse all menus to find all relevant symbols  If we cannot change the symbol - skip  If symbol equals to default value - skip 
			 * If symbol is a choice value and equals to the
			 * default for a choice - skip.
			 * But only if value is bool and equal to "y" and
			 * choice is not "optional".
			 * (If choice is "optional" then all values can be "n")
			  write a dependency file as used by kbuild to track dependencies 
				 * symbol has old and new value,
				 * so compare them...
				 
				 * If there is no old value, only 'no' (unset)
				 * is allowed as new value.
				  There is neither an old nor a new value.  else
		 *	There is an old value, but no new value ('no' (unset)
		 *	isn't saved in auto.conf, so the old value is always
		 *	different from 'no').
		  write symbols to auto.conf and autoconf.h 
	 * This must be the last step, kbuild has a dependency on auto.conf
	 * and this marks the successful completion of the previous steps.
	 
	 * If choice is mod then we may have more items selected
	 * and if no then no-one.
	 * In both cases stop.
	  count entries in choice block 
	 * find a random value and set it to yes,
	 * set the rest to no so we have only one set
	  clear VALID to get value calculated  clear VALID to get value calculated 
	 * Set all non-assinged choice values to no
	  clear VALID to get value calculated  pby: probability of bool     = y
					 * pty: probability of tristate = y
					 * ptm: probability of tristate = m
					  can't go as the default in switch-case
				   * below, otherwise gcc whines about
				   * -Wmaybe-uninitialized 
	 * We have different type of choice blocks.
	 * If curr.tri equals to mod then we can select several
	 * choice symbols in one block.
	 * In this case we do nothing.
	 * If curr.tri equals yes then only one symbol can be
	 * selected in a choice block and we set it to yes,
	 * and the rest to no.
	  SPDX-License-Identifier: GPL-2.0
 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>
  return true if 'path' exists, false otherwise  return true if 'path' exists and it is a directory, false otherwise  return true if the given two files are the same, false otherwise 
 * Create the parent directory of the given path.
 *
 * For example, if 'include/config/auto.conf' is given, create 'include/config'.
  Remove the base name. Just return if nothing is left  Just in case it is an absolute path  skip if the directory exists  touch depfile for symbol 'name'  check overflow: prefix + name + ".h" + '\0' must fit in buffer.  Assume directory path already exists.  Try it again.  fall through  fall through  fall through  fall through 
					 * Reading from include/config/auto.conf
					 * If CONFIG_FOO previously existed in
					 * auto.conf but it is missing now,
					 * include/config/foo.h must be touched.
					  check that calculated value agrees with saved value  no previous value and not saved  maybe print value in verbose mode...  Reset values of generates values, so they'll appear
			 * as new, if they should become visible, but that
			 * doesn't quite work if the Kconfig and the saved
			 * configuration disagree.
			  Reset a string value if it's out of range 
 * Kconfig configuration printer
 *
 * This printer is used when generating the resulting configuration after
 * kconfig invocation and `defconfig' files. Unset symbol might be omitted by
 * passing a non-NULL argument to the printer.
 *
 
 * Header printer
 *
 * This printer is used when generating the `include/generated/autoconf.h' file.
  fall through 
 * Write out a minimal config.
 * All values that has default values are skipped as this is redundant.
  Traverse all menus to find all relevant symbols  If we cannot change the symbol - skip  If symbol equals to default value - skip 
			 * If symbol is a choice value and equals to the
			 * default for a choice - skip.
			 * But only if value is bool and equal to "y" and
			 * choice is not "optional".
			 * (If choice is "optional" then all values can be "n")
			  write a dependency file as used by kbuild to track dependencies 
				 * symbol has old and new value,
				 * so compare them...
				 
				 * If there is no old value, only 'no' (unset)
				 * is allowed as new value.
				  There is neither an old nor a new value.  else
		 *	There is an old value, but no new value ('no' (unset)
		 *	isn't saved in auto.conf, so the old value is always
		 *	different from 'no').
		  write symbols to auto.conf and autoconf.h 
	 * This must be the last step, kbuild has a dependency on auto.conf
	 * and this marks the successful completion of the previous steps.
	 
	 * If choice is mod then we may have more items selected
	 * and if no then no-one.
	 * In both cases stop.
	  count entries in choice block 
	 * find a random value and set it to yes,
	 * set the rest to no so we have only one set
	  clear VALID to get value calculated  clear VALID to get value calculated 
	 * Set all non-assinged choice values to no
	  clear VALID to get value calculated  pby: probability of bool     = y
					 * pty: probability of tristate = y
					 * ptm: probability of tristate = m
					  can't go as the default in switch-case
				   * below, otherwise gcc whines about
				   * -Wmaybe-uninitialized 
	 * We have different type of choice blocks.
	 * If curr.tri equals to mod then we can select several
	 * choice symbols in one block.
	 * In this case we do nothing.
	 * If curr.tri equals yes then only one symbol can be
	 * selected in a choice block and we set it to yes,
	 * and the rest to no.
	  SPDX-License-Identifier: GPL-2.0
 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>
  return true if 'path' exists, false otherwise  return true if 'path' exists and it is a directory, false otherwise  return true if the given two files are the same, false otherwise 
 * Create the parent directory of the given path.
 *
 * For example, if 'include/config/auto.conf' is given, create 'include/config'.
  Remove the base name. Just return if nothing is left  Just in case it is an absolute path  skip if the directory exists  touch depfile for symbol 'name'  check overflow: prefix + name + ".h" + '\0' must fit in buffer.  Assume directory path already exists.  Try it again.  fall through  fall through  fall through  fall through 
					 * Reading from include/config/auto.conf
					 * If CONFIG_FOO previously existed in
					 * auto.conf but it is missing now,
					 * include/config/foo.h must be touched.
					  check that calculated value agrees with saved value  no previous value and not saved  maybe print value in verbose mode...  Reset values of generates values, so they'll appear
			 * as new, if they should become visible, but that
			 * doesn't quite work if the Kconfig and the saved
			 * configuration disagree.
			  Reset a string value if it's out of range 
 * Kconfig configuration printer
 *
 * This printer is used when generating the resulting configuration after
 * kconfig invocation and `defconfig' files. Unset symbol might be omitted by
 * passing a non-NULL argument to the printer.
 *
 
 * Header printer
 *
 * This printer is used when generating the `include/generated/autoconf.h' file.
  fall through 
 * Write out a minimal config.
 * All values that has default values are skipped as this is redundant.
  Traverse all menus to find all relevant symbols  If we cannot change the symbol - skip  If symbol equals to default value - skip 
			 * If symbol is a choice value and equals to the
			 * default for a choice - skip.
			 * But only if value is bool and equal to "y" and
			 * choice is not "optional".
			 * (If choice is "optional" then all values can be "n")
			  write a dependency file as used by kbuild to track dependencies 
				 * symbol has old and new value,
				 * so compare them...
				 
				 * If there is no old value, only 'no' (unset)
				 * is allowed as new value.
				  There is neither an old nor a new value.  else
		 *	There is an old value, but no new value ('no' (unset)
		 *	isn't saved in auto.conf, so the old value is always
		 *	different from 'no').
		  write symbols to auto.conf and autoconf.h 
	 * This must be the last step, kbuild has a dependency on auto.conf
	 * and this marks the successful completion of the previous steps.
	 
	 * If choice is mod then we may have more items selected
	 * and if no then no-one.
	 * In both cases stop.
	  count entries in choice block 
	 * find a random value and set it to yes,
	 * set the rest to no so we have only one set
	  clear VALID to get value calculated  clear VALID to get value calculated 
	 * Set all non-assinged choice values to no
	  clear VALID to get value calculated  pby: probability of bool     = y
					 * pty: probability of tristate = y
					 * ptm: probability of tristate = m
					  can't go as the default in switch-case
				   * below, otherwise gcc whines about
				   * -Wmaybe-uninitialized 
	 * We have different type of choice blocks.
	 * If curr.tri equals to mod then we can select several
	 * choice symbols in one block.
	 * In this case we do nothing.
	 * If curr.tri equals yes then only one symbol can be
	 * selected in a choice block and we set it to yes,
	 * and the rest to no.
	  SPDX-License-Identifier: GPL-2.0
 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>
  return true if 'path' exists, false otherwise  return true if 'path' exists and it is a directory, false otherwise  return true if the given two files are the same, false otherwise 
 * Create the parent directory of the given path.
 *
 * For example, if 'include/config/auto.conf' is given, create 'include/config'.
  Remove the base name. Just return if nothing is left  Just in case it is an absolute path  skip if the directory exists  touch depfile for symbol 'name'  check overflow: prefix + name + ".h" + '\0' must fit in buffer.  Assume directory path already exists.  Try it again.  fall through  fall through  fall through  fall through 
					 * Reading from include/config/auto.conf
					 * If CONFIG_FOO previously existed in
					 * auto.conf but it is missing now,
					 * include/config/foo.h must be touched.
					  check that calculated value agrees with saved value  no previous value and not saved  maybe print value in verbose mode...  Reset values of generates values, so they'll appear
			 * as new, if they should become visible, but that
			 * doesn't quite work if the Kconfig and the saved
			 * configuration disagree.
			  Reset a string value if it's out of range 
 * Kconfig configuration printer
 *
 * This printer is used when generating the resulting configuration after
 * kconfig invocation and `defconfig' files. Unset symbol might be omitted by
 * passing a non-NULL argument to the printer.
 *
 
 * Header printer
 *
 * This printer is used when generating the `include/generated/autoconf.h' file.
  fall through 
 * Write out a minimal config.
 * All values that has default values are skipped as this is redundant.
  Traverse all menus to find all relevant symbols  If we cannot change the symbol - skip  If symbol equals to default value - skip 
			 * If symbol is a choice value and equals to the
			 * default for a choice - skip.
			 * But only if value is bool and equal to "y" and
			 * choice is not "optional".
			 * (If choice is "optional" then all values can be "n")
			  write a dependency file as used by kbuild to track dependencies 
				 * symbol has old and new value,
				 * so compare them...
				 
				 * If there is no old value, only 'no' (unset)
				 * is allowed as new value.
				  There is neither an old nor a new value.  else
		 *	There is an old value, but no new value ('no' (unset)
		 *	isn't saved in auto.conf, so the old value is always
		 *	different from 'no').
		  write symbols to auto.conf and autoconf.h 
	 * This must be the last step, kbuild has a dependency on auto.conf
	 * and this marks the successful completion of the previous steps.
	 
	 * If choice is mod then we may have more items selected
	 * and if no then no-one.
	 * In both cases stop.
	  count entries in choice block 
	 * find a random value and set it to yes,
	 * set the rest to no so we have only one set
	  clear VALID to get value calculated  clear VALID to get value calculated 
	 * Set all non-assinged choice values to no
	  clear VALID to get value calculated  pby: probability of bool     = y
					 * pty: probability of tristate = y
					 * ptm: probability of tristate = m
					  can't go as the default in switch-case
				   * below, otherwise gcc whines about
				   * -Wmaybe-uninitialized 
	 * We have different type of choice blocks.
	 * If curr.tri equals to mod then we can select several
	 * choice symbols in one block.
	 * In this case we do nothing.
	 * If curr.tri equals yes then only one symbol can be
	 * selected in a choice block and we set it to yes,
	 * and the rest to no.
	  SPDX-License-Identifier: GPL-2.0
 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>
  return true if 'path' exists, false otherwise  return true if 'path' exists and it is a directory, false otherwise  return true if the given two files are the same, false otherwise 
 * Create the parent directory of the given path.
 *
 * For example, if 'include/config/auto.conf' is given, create 'include/config'.
  Remove the base name. Just return if nothing is left  Just in case it is an absolute path  skip if the directory exists  touch depfile for symbol 'name'  check overflow: prefix + name + ".h" + '\0' must fit in buffer.  Assume directory path already exists.  Try it again.  fall through  fall through  fall through  fall through 
					 * Reading from include/config/auto.conf
					 * If CONFIG_FOO previously existed in
					 * auto.conf but it is missing now,
					 * include/config/foo.h must be touched.
					  check that calculated value agrees with saved value  no previous value and not saved  maybe print value in verbose mode...  Reset values of generates values, so they'll appear
			 * as new, if they should become visible, but that
			 * doesn't quite work if the Kconfig and the saved
			 * configuration disagree.
			  Reset a string value if it's out of range 
 * Kconfig configuration printer
 *
 * This printer is used when generating the resulting configuration after
 * kconfig invocation and `defconfig' files. Unset symbol might be omitted by
 * passing a non-NULL argument to the printer.
 *
 
 * Header printer
 *
 * This printer is used when generating the `include/generated/autoconf.h' file.
  fall through 
 * Write out a minimal config.
 * All values that has default values are skipped as this is redundant.
  Traverse all menus to find all relevant symbols  If we cannot change the symbol - skip  If symbol equals to default value - skip 
			 * If symbol is a choice value and equals to the
			 * default for a choice - skip.
			 * But only if value is bool and equal to "y" and
			 * choice is not "optional".
			 * (If choice is "optional" then all values can be "n")
			  write a dependency file as used by kbuild to track dependencies 
				 * symbol has old and new value,
				 * so compare them...
				 
				 * If there is no old value, only 'no' (unset)
				 * is allowed as new value.
				  There is neither an old nor a new value.  else
		 *	There is an old value, but no new value ('no' (unset)
		 *	isn't saved in auto.conf, so the old value is always
		 *	different from 'no').
		  write symbols to auto.conf and autoconf.h 
	 * This must be the last step, kbuild has a dependency on auto.conf
	 * and this marks the successful completion of the previous steps.
	 
	 * If choice is mod then we may have more items selected
	 * and if no then no-one.
	 * In both cases stop.
	  count entries in choice block 
	 * find a random value and set it to yes,
	 * set the rest to no so we have only one set
	  clear VALID to get value calculated  clear VALID to get value calculated 
	 * Set all non-assinged choice values to no
	  clear VALID to get value calculated  pby: probability of bool     = y
					 * pty: probability of tristate = y
					 * ptm: probability of tristate = m
					  can't go as the default in switch-case
				   * below, otherwise gcc whines about
				   * -Wmaybe-uninitialized 
	 * We have different type of choice blocks.
	 * If curr.tri equals to mod then we can select several
	 * choice symbols in one block.
	 * In this case we do nothing.
	 * If curr.tri equals yes then only one symbol can be
	 * selected in a choice block and we set it to yes,
	 * and the rest to no.
	  SPDX-License-Identifier: GPL-2.0
 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>
  return true if 'path' exists, false otherwise  return true if 'path' exists and it is a directory, false otherwise  return true if the given two files are the same, false otherwise 
 * Create the parent directory of the given path.
 *
 * For example, if 'include/config/auto.conf' is given, create 'include/config'.
  Remove the base name. Just return if nothing is left  Just in case it is an absolute path  skip if the directory exists  touch depfile for symbol 'name'  check overflow: prefix + name + ".h" + '\0' must fit in buffer.  Assume directory path already exists.  Try it again.  fall through  fall through  fall through  fall through 
					 * Reading from include/config/auto.conf
					 * If CONFIG_FOO previously existed in
					 * auto.conf but it is missing now,
					 * include/config/foo.h must be touched.
					  check that calculated value agrees with saved value  no previous value and not saved  maybe print value in verbose mode...  Reset values of generates values, so they'll appear
			 * as new, if they should become visible, but that
			 * doesn't quite work if the Kconfig and the saved
			 * configuration disagree.
			  Reset a string value if it's out of range 
 * Kconfig configuration printer
 *
 * This printer is used when generating the resulting configuration after
 * kconfig invocation and `defconfig' files. Unset symbol might be omitted by
 * passing a non-NULL argument to the printer.
 *
 
 * Header printer
 *
 * This printer is used when generating the `include/generated/autoconf.h' file.
  fall through 
 * Write out a minimal config.
 * All values that has default values are skipped as this is redundant.
  Traverse all menus to find all relevant symbols  If we cannot change the symbol - skip  If symbol equals to default value - skip 
			 * If symbol is a choice value and equals to the
			 * default for a choice - skip.
			 * But only if value is bool and equal to "y" and
			 * choice is not "optional".
			 * (If choice is "optional" then all values can be "n")
			  write a dependency file as used by kbuild to track dependencies 
				 * symbol has old and new value,
				 * so compare them...
				 
				 * If there is no old value, only 'no' (unset)
				 * is allowed as new value.
				  There is neither an old nor a new value.  else
		 *	There is an old value, but no new value ('no' (unset)
		 *	isn't saved in auto.conf, so the old value is always
		 *	different from 'no').
		  write symbols to auto.conf and autoconf.h 
	 * This must be the last step, kbuild has a dependency on auto.conf
	 * and this marks the successful completion of the previous steps.
	 
	 * If choice is mod then we may have more items selected
	 * and if no then no-one.
	 * In both cases stop.
	  count entries in choice block 
	 * find a random value and set it to yes,
	 * set the rest to no so we have only one set
	  clear VALID to get value calculated  clear VALID to get value calculated 
	 * Set all non-assinged choice values to no
	  clear VALID to get value calculated  pby: probability of bool     = y
					 * pty: probability of tristate = y
					 * ptm: probability of tristate = m
					  can't go as the default in switch-case
				   * below, otherwise gcc whines about
				   * -Wmaybe-uninitialized 
	 * We have different type of choice blocks.
	 * If curr.tri equals to mod then we can select several
	 * choice symbols in one block.
	 * In this case we do nothing.
	 * If curr.tri equals yes then only one symbol can be
	 * selected in a choice block and we set it to yes,
	 * and the rest to no.
	  SPDX-License-Identifier: GPL-2.0
 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>
  return true if 'path' exists, false otherwise  return true if 'path' exists and it is a directory, false otherwise  return true if the given two files are the same, false otherwise 
 * Create the parent directory of the given path.
 *
 * For example, if 'include/config/auto.conf' is given, create 'include/config'.
  Remove the base name. Just return if nothing is left  Just in case it is an absolute path  skip if the directory exists  touch depfile for symbol 'name'  check overflow: prefix + name + ".h" + '\0' must fit in buffer.  Assume directory path already exists.  Try it again.  fall through  fall through  fall through  fall through 
					 * Reading from include/config/auto.conf
					 * If CONFIG_FOO previously existed in
					 * auto.conf but it is missing now,
					 * include/config/foo.h must be touched.
					  check that calculated value agrees with saved value  no previous value and not saved  maybe print value in verbose mode...  Reset values of generates values, so they'll appear
			 * as new, if they should become visible, but that
			 * doesn't quite work if the Kconfig and the saved
			 * configuration disagree.
			  Reset a string value if it's out of range 
 * Kconfig configuration printer
 *
 * This printer is used when generating the resulting configuration after
 * kconfig invocation and `defconfig' files. Unset symbol might be omitted by
 * passing a non-NULL argument to the printer.
 *
 
 * Header printer
 *
 * This printer is used when generating the `include/generated/autoconf.h' file.
  fall through 
 * Write out a minimal config.
 * All values that has default values are skipped as this is redundant.
  Traverse all menus to find all relevant symbols  If we cannot change the symbol - skip  If symbol equals to default value - skip 
			 * If symbol is a choice value and equals to the
			 * default for a choice - skip.
			 * But only if value is bool and equal to "y" and
			 * choice is not "optional".
			 * (If choice is "optional" then all values can be "n")
			  write a dependency file as used by kbuild to track dependencies 
				 * symbol has old and new value,
				 * so compare them...
				 
				 * If there is no old value, only 'no' (unset)
				 * is allowed as new value.
				  There is neither an old nor a new value.  else
		 *	There is an old value, but no new value ('no' (unset)
		 *	isn't saved in auto.conf, so the old value is always
		 *	different from 'no').
		  write symbols to auto.conf and autoconf.h 
	 * This must be the last step, kbuild has a dependency on auto.conf
	 * and this marks the successful completion of the previous steps.
	 
	 * If choice is mod then we may have more items selected
	 * and if no then no-one.
	 * In both cases stop.
	  count entries in choice block 
	 * find a random value and set it to yes,
	 * set the rest to no so we have only one set
	  clear VALID to get value calculated  clear VALID to get value calculated 
	 * Set all non-assinged choice values to no
	  clear VALID to get value calculated  pby: probability of bool     = y
					 * pty: probability of tristate = y
					 * ptm: probability of tristate = m
					  can't go as the default in switch-case
				   * below, otherwise gcc whines about
				   * -Wmaybe-uninitialized 
	 * We have different type of choice blocks.
	 * If curr.tri equals to mod then we can select several
	 * choice symbols in one block.
	 * In this case we do nothing.
	 * If curr.tri equals yes then only one symbol can be
	 * selected in a choice block and we set it to yes,
	 * and the rest to no.
	  SPDX-License-Identifier: GPL-2.0
 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>
  return true if 'path' exists, false otherwise  return true if 'path' exists and it is a directory, false otherwise  return true if the given two files are the same, false otherwise 
 * Create the parent directory of the given path.
 *
 * For example, if 'include/config/auto.conf' is given, create 'include/config'.
  Remove the base name. Just return if nothing is left  Just in case it is an absolute path  skip if the directory exists  touch depfile for symbol 'name'  check overflow: prefix + name + ".h" + '\0' must fit in buffer.  Assume directory path already exists.  Try it again.  fall through  fall through  fall through  fall through 
					 * Reading from include/config/auto.conf
					 * If CONFIG_FOO previously existed in
					 * auto.conf but it is missing now,
					 * include/config/foo.h must be touched.
					  check that calculated value agrees with saved value  no previous value and not saved  maybe print value in verbose mode...  Reset values of generates values, so they'll appear
			 * as new, if they should become visible, but that
			 * doesn't quite work if the Kconfig and the saved
			 * configuration disagree.
			  Reset a string value if it's out of range 
 * Kconfig configuration printer
 *
 * This printer is used when generating the resulting configuration after
 * kconfig invocation and `defconfig' files. Unset symbol might be omitted by
 * passing a non-NULL argument to the printer.
 *
 
 * Header printer
 *
 * This printer is used when generating the `include/generated/autoconf.h' file.
  fall through 
 * Write out a minimal config.
 * All values that has default values are skipped as this is redundant.
  Traverse all menus to find all relevant symbols  If we cannot change the symbol - skip  If symbol equals to default value - skip 
			 * If symbol is a choice value and equals to the
			 * default for a choice - skip.
			 * But only if value is bool and equal to "y" and
			 * choice is not "optional".
			 * (If choice is "optional" then all values can be "n")
			  write a dependency file as used by kbuild to track dependencies 
				 * symbol has old and new value,
				 * so compare them...
				 
				 * If there is no old value, only 'no' (unset)
				 * is allowed as new value.
				  There is neither an old nor a new value.  else
		 *	There is an old value, but no new value ('no' (unset)
		 *	isn't saved in auto.conf, so the old value is always
		 *	different from 'no').
		  write symbols to auto.conf and autoconf.h 
	 * This must be the last step, kbuild has a dependency on auto.conf
	 * and this marks the successful completion of the previous steps.
	 
	 * If choice is mod then we may have more items selected
	 * and if no then no-one.
	 * In both cases stop.
	  count entries in choice block 
	 * find a random value and set it to yes,
	 * set the rest to no so we have only one set
	  clear VALID to get value calculated  clear VALID to get value calculated 
	 * Set all non-assinged choice values to no
	  clear VALID to get value calculated  pby: probability of bool     = y
					 * pty: probability of tristate = y
					 * ptm: probability of tristate = m
					  can't go as the default in switch-case
				   * below, otherwise gcc whines about
				   * -Wmaybe-uninitialized 
	 * We have different type of choice blocks.
	 * If curr.tri equals to mod then we can select several
	 * choice symbols in one block.
	 * In this case we do nothing.
	 * If curr.tri equals yes then only one symbol can be
	 * selected in a choice block and we set it to yes,
	 * and the rest to no.
	 