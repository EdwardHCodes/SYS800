
 * libmad - MPEG audio decoder library
 * Copyright (C) 2000-2004 Underbit Technologies, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * $Id$
  MPEG-1  Layer I    Layer II   Layer III  MPEG-2 LSF  Layer I    Layers     II & III  
 * NAME:        header->init()
 * DESCRIPTION: initialize header struct
  rockbox: not used
  header->duration       = mad_timer_zero;

 * NAME:        frame->init()
 * DESCRIPTION: initialize frame struct
  rockbox: comment this to proper zero this array in mad_frame_mute(). overlap
 * is linked to an array in ../mpa.c before calling this.
  frame->overlap = 0;

 * NAME:        frame->finish()
 * DESCRIPTION: deallocate any dynamic memory associated with frame
  rockbox: unused
void mad_frame_finish(struct mad_frame *frame)
{
  mad_header_finish(&frame->header);

  if (frame->overlap) {
    free(frame->overlap);
    frame->overlap = 0;
  }
}

 * NAME:        decode_header()
 * DESCRIPTION: read header data and following CRC word
  header()  syncword  MPEG 2.5 indicator (really part of syncword)  ID  layer  protection_bit  bitrate_index  sampling_frequency  padding_bit  private_bit  mode  mode_extension  copyright  original/copy  emphasis 
   * ISO/IEC 11172-3 says this is a reserved emphasis value, but
   * streams exist which use it anyway. Since the value is not important
   * to the decoder proper, we allow it unless OPT_STRICT is defined.
    error_check()  crc_check 
 * NAME:        free_bitrate()
 * DESCRIPTION: attempt to discover the bitstream's free bitrate
 
 * NAME:        header->decode()
 * DESCRIPTION: read the next frame header from the stream
  stream skip  rockbox: not used
  if (stream->skiplen) {
    if (!stream->sync)
      ptr = stream->this_frame;

    if (end - ptr < (long) stream->skiplen) {
      stream->skiplen   -= end - ptr;
      stream->next_frame = end;

      stream->error = MAD_ERROR_BUFLEN;
      goto fail;
    }

    ptr += stream->skiplen;
    stream->skiplen = 0;

    stream->sync = 1;
  }
   synchronize  mark point where frame sync word was expected  begin processing  possibly bogus sync word  calculate frame duration  rockbox: not used
  mad_timer_set(&header->duration, 0,
                32 * MAD_NSBSAMPLES(header), header->samplerate);
   calculate free bit rate  calculate beginning of next frame  verify there is enough data left in buffer to decode this frame  check that a valid frame header follows this frame 
 * NAME:        frame->decode()
 * DESCRIPTION: decode a single frame from a bitstream
  header()  error_check()  audio_data()  ancillary_data() 
 * NAME:        frame->mute()
 * DESCRIPTION: zero all subband values so the frame becomes silent
 
 * libmad - MPEG audio decoder library
 * Copyright (C) 2000-2004 Underbit Technologies, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * $Id$
  MPEG-1  Layer I    Layer II   Layer III  MPEG-2 LSF  Layer I    Layers     II & III  
 * NAME:        header->init()
 * DESCRIPTION: initialize header struct
  rockbox: not used
  header->duration       = mad_timer_zero;

 * NAME:        frame->init()
 * DESCRIPTION: initialize frame struct
  rockbox: comment this to proper zero this array in mad_frame_mute(). overlap
 * is linked to an array in ../mpa.c before calling this.
  frame->overlap = 0;

 * NAME:        frame->finish()
 * DESCRIPTION: deallocate any dynamic memory associated with frame
  rockbox: unused
void mad_frame_finish(struct mad_frame *frame)
{
  mad_header_finish(&frame->header);

  if (frame->overlap) {
    free(frame->overlap);
    frame->overlap = 0;
  }
}

 * NAME:        decode_header()
 * DESCRIPTION: read header data and following CRC word
  header()  syncword  MPEG 2.5 indicator (really part of syncword)  ID  layer  protection_bit  bitrate_index  sampling_frequency  padding_bit  private_bit  mode  mode_extension  copyright  original/copy  emphasis 
   * ISO/IEC 11172-3 says this is a reserved emphasis value, but
   * streams exist which use it anyway. Since the value is not important
   * to the decoder proper, we allow it unless OPT_STRICT is defined.
    error_check()  crc_check 
 * NAME:        free_bitrate()
 * DESCRIPTION: attempt to discover the bitstream's free bitrate
 
 * NAME:        header->decode()
 * DESCRIPTION: read the next frame header from the stream
  stream skip  rockbox: not used
  if (stream->skiplen) {
    if (!stream->sync)
      ptr = stream->this_frame;

    if (end - ptr < (long) stream->skiplen) {
      stream->skiplen   -= end - ptr;
      stream->next_frame = end;

      stream->error = MAD_ERROR_BUFLEN;
      goto fail;
    }

    ptr += stream->skiplen;
    stream->skiplen = 0;

    stream->sync = 1;
  }
   synchronize  mark point where frame sync word was expected  begin processing  possibly bogus sync word  calculate frame duration  rockbox: not used
  mad_timer_set(&header->duration, 0,
                32 * MAD_NSBSAMPLES(header), header->samplerate);
   calculate free bit rate  calculate beginning of next frame  verify there is enough data left in buffer to decode this frame  check that a valid frame header follows this frame 
 * NAME:        frame->decode()
 * DESCRIPTION: decode a single frame from a bitstream
  header()  error_check()  audio_data()  ancillary_data() 
 * NAME:        frame->mute()
 * DESCRIPTION: zero all subband values so the frame becomes silent
 
 * libmad - MPEG audio decoder library
 * Copyright (C) 2000-2004 Underbit Technologies, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * $Id$
  MPEG-1  Layer I    Layer II   Layer III  MPEG-2 LSF  Layer I    Layers     II & III  
 * NAME:        header->init()
 * DESCRIPTION: initialize header struct
  rockbox: not used
  header->duration       = mad_timer_zero;

 * NAME:        frame->init()
 * DESCRIPTION: initialize frame struct
  rockbox: comment this to proper zero this array in mad_frame_mute(). overlap
 * is linked to an array in ../mpa.c before calling this.
  frame->overlap = 0;

 * NAME:        frame->finish()
 * DESCRIPTION: deallocate any dynamic memory associated with frame
  rockbox: unused
void mad_frame_finish(struct mad_frame *frame)
{
  mad_header_finish(&frame->header);

  if (frame->overlap) {
    free(frame->overlap);
    frame->overlap = 0;
  }
}

 * NAME:        decode_header()
 * DESCRIPTION: read header data and following CRC word
  header()  syncword  MPEG 2.5 indicator (really part of syncword)  ID  layer  protection_bit  bitrate_index  sampling_frequency  padding_bit  private_bit  mode  mode_extension  copyright  original/copy  emphasis 
   * ISO/IEC 11172-3 says this is a reserved emphasis value, but
   * streams exist which use it anyway. Since the value is not important
   * to the decoder proper, we allow it unless OPT_STRICT is defined.
    error_check()  crc_check 
 * NAME:        free_bitrate()
 * DESCRIPTION: attempt to discover the bitstream's free bitrate
 
 * NAME:        header->decode()
 * DESCRIPTION: read the next frame header from the stream
  stream skip  rockbox: not used
  if (stream->skiplen) {
    if (!stream->sync)
      ptr = stream->this_frame;

    if (end - ptr < (long) stream->skiplen) {
      stream->skiplen   -= end - ptr;
      stream->next_frame = end;

      stream->error = MAD_ERROR_BUFLEN;
      goto fail;
    }

    ptr += stream->skiplen;
    stream->skiplen = 0;

    stream->sync = 1;
  }
   synchronize  mark point where frame sync word was expected  begin processing  possibly bogus sync word  calculate frame duration  rockbox: not used
  mad_timer_set(&header->duration, 0,
                32 * MAD_NSBSAMPLES(header), header->samplerate);
   calculate free bit rate  calculate beginning of next frame  verify there is enough data left in buffer to decode this frame  check that a valid frame header follows this frame 
 * NAME:        frame->decode()
 * DESCRIPTION: decode a single frame from a bitstream
  header()  error_check()  audio_data()  ancillary_data() 
 * NAME:        frame->mute()
 * DESCRIPTION: zero all subband values so the frame becomes silent
 