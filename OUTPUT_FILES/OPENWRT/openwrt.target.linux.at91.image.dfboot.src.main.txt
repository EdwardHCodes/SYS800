----------------------------------------------------------------------------
 *         ATMEL Microcontroller Software Support  -  ROUSSET  -
 *----------------------------------------------------------------------------
 * The software is delivered "AS IS" without warranty or condition of any
 * kind, either express, implied or statutory. This includes without
 * limitation any warranty or condition with respect to merchantability or
 * fitness for any particular purpose, or against the infringements of
 * intellectual property rights of others.
 *----------------------------------------------------------------------------
 * File Name		: main.c
 * Object		: 
 * Creation		: HIi	10/10/2003
 * Modif		: HIi	15/06/2004 :	add crc32 to verify the download
 *                                          	from dataflash
 *			: HIi	21/09/2004 :	Set first PLLA to 180Mhz and MCK to
 *						60Mhz to speed up dataflash boot (15Mhz)
 *			: MLC	12/04/2005 :	Modify SetPLL() to avoid errata
 *			: USA	30/12/2005 :	Change to page Size 1056
 *						Change startaddress to C0008400
 *						Change SPI Speed to ~4 Mhz
 *						Add retry on CRC Error
 *----------------------------------------------------------------------------
  crystal= 18.432MHz - fixes BRG error at 115kbps#define AT91C_PLLA_VALUE 0x2026BE04	// crystal= 18.432MHz#define AT91C_PLLA_VALUE 0x202CBE01	// crystal= 4MHz Reason for boot failure prototypes*--------------------------------------------------------------------------------------* Function Name       : GetTickCount()* Object              : Return the number of systimer tick * Input Parameters    :* Output Parameters   :*--------------------------------------------------------------------------------------*--------------------------------------------------------------------------------------* Function Name       : AT91_XmodemComplete()* Object              : Perform the remap and jump to appli in RAM* Input Parameters    :* Output Parameters   :*-------------------------------------------------------------------------------------- stop the Xmodem tempo *--------------------------------------------------------------------------------------* Function Name       : AT91F_XmodemProtocol(AT91S_PipeStatus status, void *pVoid)* Object              : Xmodem dispatcher* Input Parameters    :* Output Parameters   :*-------------------------------------------------------------------------------------- Start a tempo to wait the Xmodem protocol complete *--------------------------------------------------------------------------------------* Function Name       : irq1_c_handler()* Object              : C Interrupt handler for Interrutp source 1* Input Parameters    : none* Output Parameters   : none*-------------------------------------------------------------------------------------- Stop previous Xmodem transmition*-----------------------------------------------------------------------------* Function Name       : AT91F_DisplayMenu()* Object              : * Input Parameters    : * Return value		: *-----------------------------------------------------------------------------*-----------------------------------------------------------------------------* Function Name       : AsciiToHex()* Object              : ascii to hexa conversion* Input Parameters    : * Return value		: *-----------------------------------------------------------------------------*-----------------------------------------------------------------------------* Function Name       : AT91F_MemoryDisplay()* Object              : Display the content of the dataflash* Input Parameters    : * Return value		: *-----------------------------------------------------------------------------	unsigned int 	*uip;	unsigned short 	*usp;	nbytes = length * size;   		uip = (unsigned int *)linebuf;   		usp = (unsigned short *)linebuf;			if (size == 4) 
				printf(" %08x", *uip++);
			else if (size == 2)
				printf(" %04x", *usp++);
			else
			addr += size;*--------------------------------------------------------------------------------------* Function Name       : AT91F_SetPLL* Object              : Set the PLLA to 180Mhz and Master clock to 60 Mhz* Input Parameters    :* Output Parameters   :*-------------------------------------------------------------------------------------- -Setup the PLL A  - Switch Master Clock from PLLB to PLLA/3  See Atmel Errata #27 and #28 *--------------------------------------------------------------------------------------* Function Name       : AT91F_ResetRegisters* Object              : Restore the initial state to registers* Input Parameters    :* Output Parameters   :*-------------------------------------------------------------------------------------- set the PIOs in input This disables the UART output, so dont execute for now Disables all the output pins  Enables the PIO to control all the pins  close all peripheral clocks  Disable core interrupts and set supervisor mode * ARM_MODE_SYS(0x1F) | I_BIT(0x80) | F_BIT(0x40) Clear all the interrupts  read the AIC_IVR and AIC_FVR  write the end of interrupt control register 	volatile unsigned int crc1 = 0, crc2 = 0; Read vector 6 to extract size to load  calculate the size to download 	printf("\nLoad UBOOT from dataflash[%x] to SDRAM[%x]\n",	       AT91C_BOOT_DATAFLASH_ADDR, AT91C_BOOT_ADDR); Restore the value of Vector 6 	printf("\n");	printf("PLLA[180MHz], MCK[60Mhz] ==> Start UBOOT\n");		LED_blink(0);			LED_blink(1); "HDR0" *----------------------------------------------------------------------------* Function Name       : main* Object              : Main function* Input Parameters    : none* Output Parameters   : True*---------------------------------------------------------------------------- Link to a AT91S_Tempo object Tempo Initialisation  Attach the tempo to a tempo controler	LED_init();	LED_blink(2); Xmodem Initialisation  System Timer initialization  AIC base address System peripheral ID Max priority Level sensitive Enable ST interrupt  Start tempo to start Boot in a delay of
	 * AT91C_DELAY_TO_BOOT sec if no key pressed  try to detect Dataflash  stop tempo ==> stop autoboot  Skip some whitespace Illegal DeviceAddress						printf("Download DataflashBoot.bin to [0x%x]\n", DeviceAddress);						printf("Download u-boot.bin to [0x%x]\n", DeviceAddress);						printf("Download Dataflash to [0x%x]\n", DeviceAddress);							printf("Erase complete\n\n");						else							printf("Erase aborted\n"); Modification of vector 6  Vector 6 must be compliant to the BootRom description (ref Datasheet)+4 to add crc32 Save the contents of vector 6 ==> will be restored 
			 * at boot time (AT91F_StartBoot)  Modify Vector 6 to contain the size of the
			 * file to copy (Dataflash -> SDRAM)		printf("\nModification of Arm Vector 6 :%x\n", i);		printf("\nWrite %d bytes in DataFlash [0x%x]\n",SizeToDownload, DeviceAddress); Add the crc32 at the end of the code  write dataflash  clear the buffer before read  Read dataflash to check the validity of the data ----------------------------------------------------------------------------
 *         ATMEL Microcontroller Software Support  -  ROUSSET  -
 *----------------------------------------------------------------------------
 * The software is delivered "AS IS" without warranty or condition of any
 * kind, either express, implied or statutory. This includes without
 * limitation any warranty or condition with respect to merchantability or
 * fitness for any particular purpose, or against the infringements of
 * intellectual property rights of others.
 *----------------------------------------------------------------------------
 * File Name		: main.c
 * Object		: 
 * Creation		: HIi	10/10/2003
 * Modif		: HIi	15/06/2004 :	add crc32 to verify the download
 *                                          	from dataflash
 *			: HIi	21/09/2004 :	Set first PLLA to 180Mhz and MCK to
 *						60Mhz to speed up dataflash boot (15Mhz)
 *			: MLC	12/04/2005 :	Modify SetPLL() to avoid errata
 *			: USA	30/12/2005 :	Change to page Size 1056
 *						Change startaddress to C0008400
 *						Change SPI Speed to ~4 Mhz
 *						Add retry on CRC Error
 *----------------------------------------------------------------------------
  crystal= 18.432MHz - fixes BRG error at 115kbps#define AT91C_PLLA_VALUE 0x2026BE04	// crystal= 18.432MHz#define AT91C_PLLA_VALUE 0x202CBE01	// crystal= 4MHz Reason for boot failure prototypes*--------------------------------------------------------------------------------------* Function Name       : GetTickCount()* Object              : Return the number of systimer tick * Input Parameters    :* Output Parameters   :*--------------------------------------------------------------------------------------*--------------------------------------------------------------------------------------* Function Name       : AT91_XmodemComplete()* Object              : Perform the remap and jump to appli in RAM* Input Parameters    :* Output Parameters   :*-------------------------------------------------------------------------------------- stop the Xmodem tempo *--------------------------------------------------------------------------------------* Function Name       : AT91F_XmodemProtocol(AT91S_PipeStatus status, void *pVoid)* Object              : Xmodem dispatcher* Input Parameters    :* Output Parameters   :*-------------------------------------------------------------------------------------- Start a tempo to wait the Xmodem protocol complete *--------------------------------------------------------------------------------------* Function Name       : irq1_c_handler()* Object              : C Interrupt handler for Interrutp source 1* Input Parameters    : none* Output Parameters   : none*-------------------------------------------------------------------------------------- Stop previous Xmodem transmition*-----------------------------------------------------------------------------* Function Name       : AT91F_DisplayMenu()* Object              : * Input Parameters    : * Return value		: *-----------------------------------------------------------------------------*-----------------------------------------------------------------------------* Function Name       : AsciiToHex()* Object              : ascii to hexa conversion* Input Parameters    : * Return value		: *-----------------------------------------------------------------------------*-----------------------------------------------------------------------------* Function Name       : AT91F_MemoryDisplay()* Object              : Display the content of the dataflash* Input Parameters    : * Return value		: *-----------------------------------------------------------------------------	unsigned int 	*uip;	unsigned short 	*usp;	nbytes = length * size;   		uip = (unsigned int *)linebuf;   		usp = (unsigned short *)linebuf;			if (size == 4) 
				printf(" %08x", *uip++);
			else if (size == 2)
				printf(" %04x", *usp++);
			else
			addr += size;*--------------------------------------------------------------------------------------* Function Name       : AT91F_SetPLL* Object              : Set the PLLA to 180Mhz and Master clock to 60 Mhz* Input Parameters    :* Output Parameters   :*-------------------------------------------------------------------------------------- -Setup the PLL A  - Switch Master Clock from PLLB to PLLA/3  See Atmel Errata #27 and #28 *--------------------------------------------------------------------------------------* Function Name       : AT91F_ResetRegisters* Object              : Restore the initial state to registers* Input Parameters    :* Output Parameters   :*-------------------------------------------------------------------------------------- set the PIOs in input This disables the UART output, so dont execute for now Disables all the output pins  Enables the PIO to control all the pins  close all peripheral clocks  Disable core interrupts and set supervisor mode * ARM_MODE_SYS(0x1F) | I_BIT(0x80) | F_BIT(0x40) Clear all the interrupts  read the AIC_IVR and AIC_FVR  write the end of interrupt control register 	volatile unsigned int crc1 = 0, crc2 = 0; Read vector 6 to extract size to load  calculate the size to download 	printf("\nLoad UBOOT from dataflash[%x] to SDRAM[%x]\n",	       AT91C_BOOT_DATAFLASH_ADDR, AT91C_BOOT_ADDR); Restore the value of Vector 6 	printf("\n");	printf("PLLA[180MHz], MCK[60Mhz] ==> Start UBOOT\n");		LED_blink(0);			LED_blink(1); "HDR0" *----------------------------------------------------------------------------* Function Name       : main* Object              : Main function* Input Parameters    : none* Output Parameters   : True*---------------------------------------------------------------------------- Link to a AT91S_Tempo object Tempo Initialisation  Attach the tempo to a tempo controler	LED_init();	LED_blink(2); Xmodem Initialisation  System Timer initialization  AIC base address System peripheral ID Max priority Level sensitive Enable ST interrupt  Start tempo to start Boot in a delay of
	 * AT91C_DELAY_TO_BOOT sec if no key pressed  try to detect Dataflash  stop tempo ==> stop autoboot  Skip some whitespace Illegal DeviceAddress						printf("Download DataflashBoot.bin to [0x%x]\n", DeviceAddress);						printf("Download u-boot.bin to [0x%x]\n", DeviceAddress);						printf("Download Dataflash to [0x%x]\n", DeviceAddress);							printf("Erase complete\n\n");						else							printf("Erase aborted\n"); Modification of vector 6  Vector 6 must be compliant to the BootRom description (ref Datasheet)+4 to add crc32 Save the contents of vector 6 ==> will be restored 
			 * at boot time (AT91F_StartBoot)  Modify Vector 6 to contain the size of the
			 * file to copy (Dataflash -> SDRAM)		printf("\nModification of Arm Vector 6 :%x\n", i);		printf("\nWrite %d bytes in DataFlash [0x%x]\n",SizeToDownload, DeviceAddress); Add the crc32 at the end of the code  write dataflash  clear the buffer before read  Read dataflash to check the validity of the data ----------------------------------------------------------------------------
 *         ATMEL Microcontroller Software Support  -  ROUSSET  -
 *----------------------------------------------------------------------------
 * The software is delivered "AS IS" without warranty or condition of any
 * kind, either express, implied or statutory. This includes without
 * limitation any warranty or condition with respect to merchantability or
 * fitness for any particular purpose, or against the infringements of
 * intellectual property rights of others.
 *----------------------------------------------------------------------------
 * File Name		: main.c
 * Object		: 
 * Creation		: HIi	10/10/2003
 * Modif		: HIi	15/06/2004 :	add crc32 to verify the download
 *                                          	from dataflash
 *			: HIi	21/09/2004 :	Set first PLLA to 180Mhz and MCK to
 *						60Mhz to speed up dataflash boot (15Mhz)
 *			: MLC	12/04/2005 :	Modify SetPLL() to avoid errata
 *			: USA	30/12/2005 :	Change to page Size 1056
 *						Change startaddress to C0008400
 *						Change SPI Speed to ~4 Mhz
 *						Add retry on CRC Error
 *----------------------------------------------------------------------------
  crystal= 18.432MHz - fixes BRG error at 115kbps#define AT91C_PLLA_VALUE 0x2026BE04	// crystal= 18.432MHz#define AT91C_PLLA_VALUE 0x202CBE01	// crystal= 4MHz Reason for boot failure prototypes*--------------------------------------------------------------------------------------* Function Name       : GetTickCount()* Object              : Return the number of systimer tick * Input Parameters    :* Output Parameters   :*--------------------------------------------------------------------------------------*--------------------------------------------------------------------------------------* Function Name       : AT91_XmodemComplete()* Object              : Perform the remap and jump to appli in RAM* Input Parameters    :* Output Parameters   :*-------------------------------------------------------------------------------------- stop the Xmodem tempo *--------------------------------------------------------------------------------------* Function Name       : AT91F_XmodemProtocol(AT91S_PipeStatus status, void *pVoid)* Object              : Xmodem dispatcher* Input Parameters    :* Output Parameters   :*-------------------------------------------------------------------------------------- Start a tempo to wait the Xmodem protocol complete *--------------------------------------------------------------------------------------* Function Name       : irq1_c_handler()* Object              : C Interrupt handler for Interrutp source 1* Input Parameters    : none* Output Parameters   : none*-------------------------------------------------------------------------------------- Stop previous Xmodem transmition*-----------------------------------------------------------------------------* Function Name       : AT91F_DisplayMenu()* Object              : * Input Parameters    : * Return value		: *-----------------------------------------------------------------------------*-----------------------------------------------------------------------------* Function Name       : AsciiToHex()* Object              : ascii to hexa conversion* Input Parameters    : * Return value		: *-----------------------------------------------------------------------------*-----------------------------------------------------------------------------* Function Name       : AT91F_MemoryDisplay()* Object              : Display the content of the dataflash* Input Parameters    : * Return value		: *-----------------------------------------------------------------------------	unsigned int 	*uip;	unsigned short 	*usp;	nbytes = length * size;   		uip = (unsigned int *)linebuf;   		usp = (unsigned short *)linebuf;			if (size == 4) 
				printf(" %08x", *uip++);
			else if (size == 2)
				printf(" %04x", *usp++);
			else
			addr += size;*--------------------------------------------------------------------------------------* Function Name       : AT91F_SetPLL* Object              : Set the PLLA to 180Mhz and Master clock to 60 Mhz* Input Parameters    :* Output Parameters   :*-------------------------------------------------------------------------------------- -Setup the PLL A  - Switch Master Clock from PLLB to PLLA/3  See Atmel Errata #27 and #28 *--------------------------------------------------------------------------------------* Function Name       : AT91F_ResetRegisters* Object              : Restore the initial state to registers* Input Parameters    :* Output Parameters   :*-------------------------------------------------------------------------------------- set the PIOs in input This disables the UART output, so dont execute for now Disables all the output pins  Enables the PIO to control all the pins  close all peripheral clocks  Disable core interrupts and set supervisor mode * ARM_MODE_SYS(0x1F) | I_BIT(0x80) | F_BIT(0x40) Clear all the interrupts  read the AIC_IVR and AIC_FVR  write the end of interrupt control register 	volatile unsigned int crc1 = 0, crc2 = 0; Read vector 6 to extract size to load  calculate the size to download 	printf("\nLoad UBOOT from dataflash[%x] to SDRAM[%x]\n",	       AT91C_BOOT_DATAFLASH_ADDR, AT91C_BOOT_ADDR); Restore the value of Vector 6 	printf("\n");	printf("PLLA[180MHz], MCK[60Mhz] ==> Start UBOOT\n");		LED_blink(0);			LED_blink(1); "HDR0" *----------------------------------------------------------------------------* Function Name       : main* Object              : Main function* Input Parameters    : none* Output Parameters   : True*---------------------------------------------------------------------------- Link to a AT91S_Tempo object Tempo Initialisation  Attach the tempo to a tempo controler	LED_init();	LED_blink(2); Xmodem Initialisation  System Timer initialization  AIC base address System peripheral ID Max priority Level sensitive Enable ST interrupt  Start tempo to start Boot in a delay of
	 * AT91C_DELAY_TO_BOOT sec if no key pressed  try to detect Dataflash  stop tempo ==> stop autoboot  Skip some whitespace Illegal DeviceAddress						printf("Download DataflashBoot.bin to [0x%x]\n", DeviceAddress);						printf("Download u-boot.bin to [0x%x]\n", DeviceAddress);						printf("Download Dataflash to [0x%x]\n", DeviceAddress);							printf("Erase complete\n\n");						else							printf("Erase aborted\n"); Modification of vector 6  Vector 6 must be compliant to the BootRom description (ref Datasheet)+4 to add crc32 Save the contents of vector 6 ==> will be restored 
			 * at boot time (AT91F_StartBoot)  Modify Vector 6 to contain the size of the
			 * file to copy (Dataflash -> SDRAM)		printf("\nModification of Arm Vector 6 :%x\n", i);		printf("\nWrite %d bytes in DataFlash [0x%x]\n",SizeToDownload, DeviceAddress); Add the crc32 at the end of the code  write dataflash  clear the buffer before read  Read dataflash to check the validity of the data 