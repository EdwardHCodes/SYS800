 Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *      The actual span/column drawing functions.
 *      Here find the main potential for optimization,
 *       e.g. inline assembly, different algorithms.
 *
 *-----------------------------------------------------------------------------#include "lprintf.h" All drawing to the view buffer is accomplished in this file. The other refresh files only know about ccordinates,  not the architecture of the frame buffer. Conveniently, the frame buffer is a linear one,  and we need only the base address,  and the total size == width*height*depth/8.,byte*  viewimage; Color tables for different players,  translate a limited part to another  (color ramps used for  suit colors). CPhipps - made const*'s translucency filter maps 256x256   // phares killough 4/11/98 R_DrawColumn Source is the top of the column to scale. killough first pixel in a column (possibly virtual) A column is a vertical slice/span from a wall texture that,  given the DOOM style restrictions on the view orientation,  will always have constant z depth. Thus a special case loop for very fast rendering can  be used. It has also been used with Wolfenstein 3D. killough killough leban 1/17/99: removed the + 1 here, adjusted the if test, and added an increment later.  this helps a compiler pipeline a bit better.  the x86 assembler also does this. Zero length, column does not exceed a pixel. Framebuffer destination address. Determine scaling, which is the only mapping to be done. Inner loop that does the actual texture mapping,  e.g. a DDA-lile scaling. This is as fast as it gets.       (Yeah, right!!! -- killough) killough 2/1/98: more performance tuning cph - another special case  CPhipps - specify type power of 2 -- killough texture height is a power of 2 -- killough Re-map color indices from wall texture column  using a lighting/special effects LUT. heightmask is the Tutti-Frutti fix -- killough Here is the version of R_DrawColumn that deals with translucent  // phares textures and sprites. It's identical to R_DrawColumn except      //    | for the spot where the color index is stuffed into *dest. At     //    V that point, the existing color index and the new color index are mapped through the TRANMAP lump filters to get a new color index whose RGB values are the average of the existing and new colors. Since we're concerned about performance, the 'translucent or opaque' decision is made outside this routine, not down where the actual code differences are. killough killough Zero length, column does not exceed a pixel. Framebuffer destination address. Determine scaling,  which is the only mapping to be done. Inner loop that does the actual texture mapping,  e.g. a DDA-lile scaling. This is as fast as it gets.       (Yeah, right!!! -- killough) killough 2/1/98, 2/21/98: more performance tuning CPhipps - specify type not a power of 2 -- killough Re-map color indices from wall texture column  using a lighting/special effects LUT. heightmask is the Tutti-Frutti fix -- killough phares texture height is a power of 2 -- killough phares phares phares Spectre/Invisibility. proff 08/17/98: Changed for high-res#define FUZZOFF (SCREENWIDTH) Framebuffer postprocessing. Creates a fuzzy image by copying pixels  from adjacent ones to left and right. Used with an all black colormap, this  could create the SHADOW effect,  i.e. spectres and invisible players. Adjust borders. Low... .. and high. Zero length. Keep till detailshift bug in blocky mode fixed,  or blocky mode removed. Does not work with blocky mode. Looks familiar. Looks like an attempt at dithering, using the colormap #6 (of 0-31, a bit brighter than average). Lookup framebuffer, and retrieve  a pixel that is either one column  left or right of the current one. Add index from colormap to index. killough 3/20/98: use fullcolormap instead of colormaps Some varying invisibility effects can be gotten by playing // phares with this logic. For example, try                          // phares                                                            // phares    *dest = fullcolormap[0*256+dest[FUZZOFF]];              // phares Clamp table lookup index. R_DrawTranslatedColumn Used to draw player sprites  with the green colorramp mapped to others. Could be used with different translation  tables, e.g. the lighter colored version  of the BaronOfHell, the HellKnight, uses  identical sprites, kinda brightened up. FIXME. As above. Looks familiar. Here we do an additional index re-mapping. Translation tables are used  to map certain colorramps to other ones,  used with PLAY sprites. Thus the "green" ramp of the player 0 sprite  is mapped to gray, red, black/indigo. R_InitTranslationTables Creates the translation tables to map  the green color ramp to gray, brown, red. Assumes a given structure of the PLAYPAL. Could be read from a lump instead. killough 5/2/98: Remove dependency of colormaps aligned on 256-byte boundary CPhipps - allow multiple calls Not green, would like translation translate just the 16 green colors CPhipps - configurable player colours Keep all other colors as is. R_DrawSpan With DOOM style restrictions on view orientation,  the floors and ceilings consist of horizontal slices  or spans with constant z depth. However, rotation around the world z axis is possible,  thus this mapping, while simpler and faster than  perspective correct texture mapping, has to traverse  the texture at an angle in all but a few cases. In consequence, flats are not stored by column (like walls),  and the inner loop has to step in texture space u and v. start of a 64*64 tile image only slightly faster outputs  inputs  clobbers  R_InitBuffer Creats lookup tables that avoid  multiplies and other hazzles  for getting the framebuffer address  of a pixel to draw. Handle resize,  e.g. smaller view windows  with border and/or status bar. Same with base row offset. Preclaculate all row offsets. CPhipps - merge viewwindowx into here R_FillBackScreen Fills the back screen with a pattern  for variable screen sizes Also draws a beveled edge. CPhipps - patch drawing updated Draw beveled edge. Copy a screen buffer. LFB copy. R_DrawViewBorder Draws the border around the view  for different size windows? proff/nicolas 09/20/98: Added for high-res (inspired by DosDOOM) proff/nicolas 09/20/98: Removed for high-res  if (scaledviewwidth == SCREENWIDTH)  return; proff/nicolas 09/20/98: Added for high-res (inspired by DosDOOM) if high-res, don't go any further! copy top and one line of left side copy one line of right side and bottom copy sides using wraparound Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *      The actual span/column drawing functions.
 *      Here find the main potential for optimization,
 *       e.g. inline assembly, different algorithms.
 *
 *-----------------------------------------------------------------------------#include "lprintf.h" All drawing to the view buffer is accomplished in this file. The other refresh files only know about ccordinates,  not the architecture of the frame buffer. Conveniently, the frame buffer is a linear one,  and we need only the base address,  and the total size == width*height*depth/8.,byte*  viewimage; Color tables for different players,  translate a limited part to another  (color ramps used for  suit colors). CPhipps - made const*'s translucency filter maps 256x256   // phares killough 4/11/98 R_DrawColumn Source is the top of the column to scale. killough first pixel in a column (possibly virtual) A column is a vertical slice/span from a wall texture that,  given the DOOM style restrictions on the view orientation,  will always have constant z depth. Thus a special case loop for very fast rendering can  be used. It has also been used with Wolfenstein 3D. killough killough leban 1/17/99: removed the + 1 here, adjusted the if test, and added an increment later.  this helps a compiler pipeline a bit better.  the x86 assembler also does this. Zero length, column does not exceed a pixel. Framebuffer destination address. Determine scaling, which is the only mapping to be done. Inner loop that does the actual texture mapping,  e.g. a DDA-lile scaling. This is as fast as it gets.       (Yeah, right!!! -- killough) killough 2/1/98: more performance tuning cph - another special case  CPhipps - specify type power of 2 -- killough texture height is a power of 2 -- killough Re-map color indices from wall texture column  using a lighting/special effects LUT. heightmask is the Tutti-Frutti fix -- killough Here is the version of R_DrawColumn that deals with translucent  // phares textures and sprites. It's identical to R_DrawColumn except      //    | for the spot where the color index is stuffed into *dest. At     //    V that point, the existing color index and the new color index are mapped through the TRANMAP lump filters to get a new color index whose RGB values are the average of the existing and new colors. Since we're concerned about performance, the 'translucent or opaque' decision is made outside this routine, not down where the actual code differences are. killough killough Zero length, column does not exceed a pixel. Framebuffer destination address. Determine scaling,  which is the only mapping to be done. Inner loop that does the actual texture mapping,  e.g. a DDA-lile scaling. This is as fast as it gets.       (Yeah, right!!! -- killough) killough 2/1/98, 2/21/98: more performance tuning CPhipps - specify type not a power of 2 -- killough Re-map color indices from wall texture column  using a lighting/special effects LUT. heightmask is the Tutti-Frutti fix -- killough phares texture height is a power of 2 -- killough phares phares phares Spectre/Invisibility. proff 08/17/98: Changed for high-res#define FUZZOFF (SCREENWIDTH) Framebuffer postprocessing. Creates a fuzzy image by copying pixels  from adjacent ones to left and right. Used with an all black colormap, this  could create the SHADOW effect,  i.e. spectres and invisible players. Adjust borders. Low... .. and high. Zero length. Keep till detailshift bug in blocky mode fixed,  or blocky mode removed. Does not work with blocky mode. Looks familiar. Looks like an attempt at dithering, using the colormap #6 (of 0-31, a bit brighter than average). Lookup framebuffer, and retrieve  a pixel that is either one column  left or right of the current one. Add index from colormap to index. killough 3/20/98: use fullcolormap instead of colormaps Some varying invisibility effects can be gotten by playing // phares with this logic. For example, try                          // phares                                                            // phares    *dest = fullcolormap[0*256+dest[FUZZOFF]];              // phares Clamp table lookup index. R_DrawTranslatedColumn Used to draw player sprites  with the green colorramp mapped to others. Could be used with different translation  tables, e.g. the lighter colored version  of the BaronOfHell, the HellKnight, uses  identical sprites, kinda brightened up. FIXME. As above. Looks familiar. Here we do an additional index re-mapping. Translation tables are used  to map certain colorramps to other ones,  used with PLAY sprites. Thus the "green" ramp of the player 0 sprite  is mapped to gray, red, black/indigo. R_InitTranslationTables Creates the translation tables to map  the green color ramp to gray, brown, red. Assumes a given structure of the PLAYPAL. Could be read from a lump instead. killough 5/2/98: Remove dependency of colormaps aligned on 256-byte boundary CPhipps - allow multiple calls Not green, would like translation translate just the 16 green colors CPhipps - configurable player colours Keep all other colors as is. R_DrawSpan With DOOM style restrictions on view orientation,  the floors and ceilings consist of horizontal slices  or spans with constant z depth. However, rotation around the world z axis is possible,  thus this mapping, while simpler and faster than  perspective correct texture mapping, has to traverse  the texture at an angle in all but a few cases. In consequence, flats are not stored by column (like walls),  and the inner loop has to step in texture space u and v. start of a 64*64 tile image only slightly faster outputs  inputs  clobbers  R_InitBuffer Creats lookup tables that avoid  multiplies and other hazzles  for getting the framebuffer address  of a pixel to draw. Handle resize,  e.g. smaller view windows  with border and/or status bar. Same with base row offset. Preclaculate all row offsets. CPhipps - merge viewwindowx into here R_FillBackScreen Fills the back screen with a pattern  for variable screen sizes Also draws a beveled edge. CPhipps - patch drawing updated Draw beveled edge. Copy a screen buffer. LFB copy. R_DrawViewBorder Draws the border around the view  for different size windows? proff/nicolas 09/20/98: Added for high-res (inspired by DosDOOM) proff/nicolas 09/20/98: Removed for high-res  if (scaledviewwidth == SCREENWIDTH)  return; proff/nicolas 09/20/98: Added for high-res (inspired by DosDOOM) if high-res, don't go any further! copy top and one line of left side copy one line of right side and bottom copy sides using wraparound Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *      The actual span/column drawing functions.
 *      Here find the main potential for optimization,
 *       e.g. inline assembly, different algorithms.
 *
 *-----------------------------------------------------------------------------#include "lprintf.h" All drawing to the view buffer is accomplished in this file. The other refresh files only know about ccordinates,  not the architecture of the frame buffer. Conveniently, the frame buffer is a linear one,  and we need only the base address,  and the total size == width*height*depth/8.,byte*  viewimage; Color tables for different players,  translate a limited part to another  (color ramps used for  suit colors). CPhipps - made const*'s translucency filter maps 256x256   // phares killough 4/11/98 R_DrawColumn Source is the top of the column to scale. killough first pixel in a column (possibly virtual) A column is a vertical slice/span from a wall texture that,  given the DOOM style restrictions on the view orientation,  will always have constant z depth. Thus a special case loop for very fast rendering can  be used. It has also been used with Wolfenstein 3D. killough killough leban 1/17/99: removed the + 1 here, adjusted the if test, and added an increment later.  this helps a compiler pipeline a bit better.  the x86 assembler also does this. Zero length, column does not exceed a pixel. Framebuffer destination address. Determine scaling, which is the only mapping to be done. Inner loop that does the actual texture mapping,  e.g. a DDA-lile scaling. This is as fast as it gets.       (Yeah, right!!! -- killough) killough 2/1/98: more performance tuning cph - another special case  CPhipps - specify type power of 2 -- killough texture height is a power of 2 -- killough Re-map color indices from wall texture column  using a lighting/special effects LUT. heightmask is the Tutti-Frutti fix -- killough Here is the version of R_DrawColumn that deals with translucent  // phares textures and sprites. It's identical to R_DrawColumn except      //    | for the spot where the color index is stuffed into *dest. At     //    V that point, the existing color index and the new color index are mapped through the TRANMAP lump filters to get a new color index whose RGB values are the average of the existing and new colors. Since we're concerned about performance, the 'translucent or opaque' decision is made outside this routine, not down where the actual code differences are. killough killough Zero length, column does not exceed a pixel. Framebuffer destination address. Determine scaling,  which is the only mapping to be done. Inner loop that does the actual texture mapping,  e.g. a DDA-lile scaling. This is as fast as it gets.       (Yeah, right!!! -- killough) killough 2/1/98, 2/21/98: more performance tuning CPhipps - specify type not a power of 2 -- killough Re-map color indices from wall texture column  using a lighting/special effects LUT. heightmask is the Tutti-Frutti fix -- killough phares texture height is a power of 2 -- killough phares phares phares Spectre/Invisibility. proff 08/17/98: Changed for high-res#define FUZZOFF (SCREENWIDTH) Framebuffer postprocessing. Creates a fuzzy image by copying pixels  from adjacent ones to left and right. Used with an all black colormap, this  could create the SHADOW effect,  i.e. spectres and invisible players. Adjust borders. Low... .. and high. Zero length. Keep till detailshift bug in blocky mode fixed,  or blocky mode removed. Does not work with blocky mode. Looks familiar. Looks like an attempt at dithering, using the colormap #6 (of 0-31, a bit brighter than average). Lookup framebuffer, and retrieve  a pixel that is either one column  left or right of the current one. Add index from colormap to index. killough 3/20/98: use fullcolormap instead of colormaps Some varying invisibility effects can be gotten by playing // phares with this logic. For example, try                          // phares                                                            // phares    *dest = fullcolormap[0*256+dest[FUZZOFF]];              // phares Clamp table lookup index. R_DrawTranslatedColumn Used to draw player sprites  with the green colorramp mapped to others. Could be used with different translation  tables, e.g. the lighter colored version  of the BaronOfHell, the HellKnight, uses  identical sprites, kinda brightened up. FIXME. As above. Looks familiar. Here we do an additional index re-mapping. Translation tables are used  to map certain colorramps to other ones,  used with PLAY sprites. Thus the "green" ramp of the player 0 sprite  is mapped to gray, red, black/indigo. R_InitTranslationTables Creates the translation tables to map  the green color ramp to gray, brown, red. Assumes a given structure of the PLAYPAL. Could be read from a lump instead. killough 5/2/98: Remove dependency of colormaps aligned on 256-byte boundary CPhipps - allow multiple calls Not green, would like translation translate just the 16 green colors CPhipps - configurable player colours Keep all other colors as is. R_DrawSpan With DOOM style restrictions on view orientation,  the floors and ceilings consist of horizontal slices  or spans with constant z depth. However, rotation around the world z axis is possible,  thus this mapping, while simpler and faster than  perspective correct texture mapping, has to traverse  the texture at an angle in all but a few cases. In consequence, flats are not stored by column (like walls),  and the inner loop has to step in texture space u and v. start of a 64*64 tile image only slightly faster outputs  inputs  clobbers  R_InitBuffer Creats lookup tables that avoid  multiplies and other hazzles  for getting the framebuffer address  of a pixel to draw. Handle resize,  e.g. smaller view windows  with border and/or status bar. Same with base row offset. Preclaculate all row offsets. CPhipps - merge viewwindowx into here R_FillBackScreen Fills the back screen with a pattern  for variable screen sizes Also draws a beveled edge. CPhipps - patch drawing updated Draw beveled edge. Copy a screen buffer. LFB copy. R_DrawViewBorder Draws the border around the view  for different size windows? proff/nicolas 09/20/98: Added for high-res (inspired by DosDOOM) proff/nicolas 09/20/98: Removed for high-res  if (scaledviewwidth == SCREENWIDTH)  return; proff/nicolas 09/20/98: Added for high-res (inspired by DosDOOM) if high-res, don't go any further! copy top and one line of left side copy one line of right side and bottom copy sides using wraparound