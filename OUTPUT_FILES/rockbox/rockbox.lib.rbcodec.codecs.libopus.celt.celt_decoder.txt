 Copyright (c) 2007-2008 CSIRO
   Copyright (c) 2007-2010 Xiph.Org Foundation
   Copyright (c) 2008 Gregory Maxwell
   Written by Jean-Marc Valin and Gregory Maxwell 
   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

   - Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

   - Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
   OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
********************************************************************                                                                                                 DECODER                                                                                                    ********************************************************************* Decoder state
 @brief Decoder state
  Everything beyond this point gets cleared on a reset  Size = channels*(DECODE_BUFFER_SIZE+mode->overlap)  opus_val16 lpc[],  Size = channels*LPC_ORDER  opus_val16 oldEBands[], Size = 2*mode->nbEBands  opus_val16 oldLogE[], Size = 2*mode->nbEBands  opus_val16 oldLogE2[], Size = 2*mode->nbEBands  opus_val16 backgroundLogE[], Size = 2*mode->nbEBands  CUSTOM_MODES  CUSTOM_MODES  Shortcut for the standard (non-custom modes) case  Shortcut for the standard (non-custom modes) case  Perform down-sampling *< Interleaved signal MDCTs  Copying a mono streams to two channels  Store a temporary copy in the output buffer because the IMDCT destroys its input.  Downmixing a stereo stream to mono  Use the output buffer as temp array before downmixing.  Normal case (mono or stereo)  The maximum pitch lag to allow in the pitch-based PLC. It's possible to save
   CPU time in the PLC pitch search by making this smaller than MAX_PERIOD. The
   current value corresponds to a pitch of 66.67 Hz.  The minimum pitch lag to allow in the pitch-based PLC. This corresponds to a
   pitch of 480 Hz.  Noise-based PLC/CNG  This is an ugly hack that breaks aliasing rules and would be easily broken,
         but it saves almost 4kB of stack. *< Interleaved normalised MDCTs  Energy decay  Pitch-based PLC  Compute LPC coefficients for the last MAX_PERIOD samples before
               the first loss so we can work in the excitation-filter domain.  Add a noise floor of -40 dB.  Use lag windowing to stabilize the Levinson-Durbin recursion. ac[i] *= exp(-.5*(2*M_PI*.002*i)*(2*M_PI*.002*i)); We want the excitation for 2 pitch periods in order to look for a
            decaying signal, but we can't get more than MAX_PERIOD.  Initialize the LPC history with the samples just before the start
            of the region for which we're computing the excitation.  Compute the excitation for exc_length samples before the loss.  Check if the waveform is decaying, and if so how fast.
            We do this to avoid adding energy when concealing in a segment
            with decaying energy.  Move the decoder memory one frame to the left to give us room to
            add the data for the new frame. We ignore the overlap that extends
            past the end of the buffer, because we aren't going to use it.  Extrapolate from the end of the excitation with a period of
            "pitch_index", scaling down each period by an additional factor of
            "decay".  We need to extrapolate enough samples to cover a complete MDCT
            window (including overlap/2 samples on both sides).  We also apply fading if this is not the first loss.  Compute the energy of the previously decoded signal whose
               excitation we're copying.  Copy the last decoded samples (prior to the overlap region) to
               synthesis filter memory so we can have a continuous signal.  Apply the synthesis filter to convert the excitation back into
               the signal domain.  Check if the synthesis energy is higher than expected, which can
            happen with the signal changes during our window. If so,
            attenuate.  This checks for an "explosion" in the synthesis.  The float test is written this way to catch NaNs in the output
               of the IIR filter at the same time.  Apply the pre-filter to the MDCT overlap for the next frame because
            the post-filter will be re-applied in the decoder after the MDCT
            overlap.  Simulate TDAC on the concealed audio so that it blends with the
            MDCT of the next frame.  Convert "standard mode" to Opus header  Pretend we've read all the remaining bits  Decode the global flags (first symbols in the stream)  Get band energies  quanta is 6 bits, but no more than 1 bit/sample
         and no less than 1/8 bit/sample  Making dynalloc more likely  Decode fixed codebook  This is an ugly hack that breaks aliasing rules and would be easily broken,
      but it saves almost 4kB of stack. *< Interleaved normalised MDCTs  In case start or end were to change  DISABLE_FLOAT_API  CUSTOM_MODES  Copyright (c) 2007-2008 CSIRO
   Copyright (c) 2007-2010 Xiph.Org Foundation
   Copyright (c) 2008 Gregory Maxwell
   Written by Jean-Marc Valin and Gregory Maxwell 
   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

   - Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

   - Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
   OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
********************************************************************                                                                                                 DECODER                                                                                                    ********************************************************************* Decoder state
 @brief Decoder state
  Everything beyond this point gets cleared on a reset  Size = channels*(DECODE_BUFFER_SIZE+mode->overlap)  opus_val16 lpc[],  Size = channels*LPC_ORDER  opus_val16 oldEBands[], Size = 2*mode->nbEBands  opus_val16 oldLogE[], Size = 2*mode->nbEBands  opus_val16 oldLogE2[], Size = 2*mode->nbEBands  opus_val16 backgroundLogE[], Size = 2*mode->nbEBands  CUSTOM_MODES  CUSTOM_MODES  Shortcut for the standard (non-custom modes) case  Shortcut for the standard (non-custom modes) case  Perform down-sampling *< Interleaved signal MDCTs  Copying a mono streams to two channels  Store a temporary copy in the output buffer because the IMDCT destroys its input.  Downmixing a stereo stream to mono  Use the output buffer as temp array before downmixing.  Normal case (mono or stereo)  The maximum pitch lag to allow in the pitch-based PLC. It's possible to save
   CPU time in the PLC pitch search by making this smaller than MAX_PERIOD. The
   current value corresponds to a pitch of 66.67 Hz.  The minimum pitch lag to allow in the pitch-based PLC. This corresponds to a
   pitch of 480 Hz.  Noise-based PLC/CNG  This is an ugly hack that breaks aliasing rules and would be easily broken,
         but it saves almost 4kB of stack. *< Interleaved normalised MDCTs  Energy decay  Pitch-based PLC  Compute LPC coefficients for the last MAX_PERIOD samples before
               the first loss so we can work in the excitation-filter domain.  Add a noise floor of -40 dB.  Use lag windowing to stabilize the Levinson-Durbin recursion. ac[i] *= exp(-.5*(2*M_PI*.002*i)*(2*M_PI*.002*i)); We want the excitation for 2 pitch periods in order to look for a
            decaying signal, but we can't get more than MAX_PERIOD.  Initialize the LPC history with the samples just before the start
            of the region for which we're computing the excitation.  Compute the excitation for exc_length samples before the loss.  Check if the waveform is decaying, and if so how fast.
            We do this to avoid adding energy when concealing in a segment
            with decaying energy.  Move the decoder memory one frame to the left to give us room to
            add the data for the new frame. We ignore the overlap that extends
            past the end of the buffer, because we aren't going to use it.  Extrapolate from the end of the excitation with a period of
            "pitch_index", scaling down each period by an additional factor of
            "decay".  We need to extrapolate enough samples to cover a complete MDCT
            window (including overlap/2 samples on both sides).  We also apply fading if this is not the first loss.  Compute the energy of the previously decoded signal whose
               excitation we're copying.  Copy the last decoded samples (prior to the overlap region) to
               synthesis filter memory so we can have a continuous signal.  Apply the synthesis filter to convert the excitation back into
               the signal domain.  Check if the synthesis energy is higher than expected, which can
            happen with the signal changes during our window. If so,
            attenuate.  This checks for an "explosion" in the synthesis.  The float test is written this way to catch NaNs in the output
               of the IIR filter at the same time.  Apply the pre-filter to the MDCT overlap for the next frame because
            the post-filter will be re-applied in the decoder after the MDCT
            overlap.  Simulate TDAC on the concealed audio so that it blends with the
            MDCT of the next frame.  Convert "standard mode" to Opus header  Pretend we've read all the remaining bits  Decode the global flags (first symbols in the stream)  Get band energies  quanta is 6 bits, but no more than 1 bit/sample
         and no less than 1/8 bit/sample  Making dynalloc more likely  Decode fixed codebook  This is an ugly hack that breaks aliasing rules and would be easily broken,
      but it saves almost 4kB of stack. *< Interleaved normalised MDCTs  In case start or end were to change  DISABLE_FLOAT_API  CUSTOM_MODES  Copyright (c) 2007-2008 CSIRO
   Copyright (c) 2007-2010 Xiph.Org Foundation
   Copyright (c) 2008 Gregory Maxwell
   Written by Jean-Marc Valin and Gregory Maxwell 
   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

   - Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

   - Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
   OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
********************************************************************                                                                                                 DECODER                                                                                                    ********************************************************************* Decoder state
 @brief Decoder state
  Everything beyond this point gets cleared on a reset  Size = channels*(DECODE_BUFFER_SIZE+mode->overlap)  opus_val16 lpc[],  Size = channels*LPC_ORDER  opus_val16 oldEBands[], Size = 2*mode->nbEBands  opus_val16 oldLogE[], Size = 2*mode->nbEBands  opus_val16 oldLogE2[], Size = 2*mode->nbEBands  opus_val16 backgroundLogE[], Size = 2*mode->nbEBands  CUSTOM_MODES  CUSTOM_MODES  Shortcut for the standard (non-custom modes) case  Shortcut for the standard (non-custom modes) case  Perform down-sampling *< Interleaved signal MDCTs  Copying a mono streams to two channels  Store a temporary copy in the output buffer because the IMDCT destroys its input.  Downmixing a stereo stream to mono  Use the output buffer as temp array before downmixing.  Normal case (mono or stereo)  The maximum pitch lag to allow in the pitch-based PLC. It's possible to save
   CPU time in the PLC pitch search by making this smaller than MAX_PERIOD. The
   current value corresponds to a pitch of 66.67 Hz.  The minimum pitch lag to allow in the pitch-based PLC. This corresponds to a
   pitch of 480 Hz.  Noise-based PLC/CNG  This is an ugly hack that breaks aliasing rules and would be easily broken,
         but it saves almost 4kB of stack. *< Interleaved normalised MDCTs  Energy decay  Pitch-based PLC  Compute LPC coefficients for the last MAX_PERIOD samples before
               the first loss so we can work in the excitation-filter domain.  Add a noise floor of -40 dB.  Use lag windowing to stabilize the Levinson-Durbin recursion. ac[i] *= exp(-.5*(2*M_PI*.002*i)*(2*M_PI*.002*i)); We want the excitation for 2 pitch periods in order to look for a
            decaying signal, but we can't get more than MAX_PERIOD.  Initialize the LPC history with the samples just before the start
            of the region for which we're computing the excitation.  Compute the excitation for exc_length samples before the loss.  Check if the waveform is decaying, and if so how fast.
            We do this to avoid adding energy when concealing in a segment
            with decaying energy.  Move the decoder memory one frame to the left to give us room to
            add the data for the new frame. We ignore the overlap that extends
            past the end of the buffer, because we aren't going to use it.  Extrapolate from the end of the excitation with a period of
            "pitch_index", scaling down each period by an additional factor of
            "decay".  We need to extrapolate enough samples to cover a complete MDCT
            window (including overlap/2 samples on both sides).  We also apply fading if this is not the first loss.  Compute the energy of the previously decoded signal whose
               excitation we're copying.  Copy the last decoded samples (prior to the overlap region) to
               synthesis filter memory so we can have a continuous signal.  Apply the synthesis filter to convert the excitation back into
               the signal domain.  Check if the synthesis energy is higher than expected, which can
            happen with the signal changes during our window. If so,
            attenuate.  This checks for an "explosion" in the synthesis.  The float test is written this way to catch NaNs in the output
               of the IIR filter at the same time.  Apply the pre-filter to the MDCT overlap for the next frame because
            the post-filter will be re-applied in the decoder after the MDCT
            overlap.  Simulate TDAC on the concealed audio so that it blends with the
            MDCT of the next frame.  Convert "standard mode" to Opus header  Pretend we've read all the remaining bits  Decode the global flags (first symbols in the stream)  Get band energies  quanta is 6 bits, but no more than 1 bit/sample
         and no less than 1/8 bit/sample  Making dynalloc more likely  Decode fixed codebook  This is an ugly hack that breaks aliasing rules and would be easily broken,
      but it saves almost 4kB of stack. *< Interleaved normalised MDCTs  In case start or end were to change  DISABLE_FLOAT_API  CUSTOM_MODES 