 Copyright (C) 2002-2006 Jean-Marc Valin 
   File: sb_celp.c

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:
   
   - Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
   
   - Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
   
   - Neither the name of the Xiph.org Foundation nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.
   
   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 Default size for the encoder and decoder stack (can be changed at compile time).
   This does not apply when using variable-size arrays or alloca.  pi st->stack = (char*)speex_alloc_scratch(SB_ENC_STACK); We just need a big value here  #ifndef DISABLE_VBR speex_free_scratch(st->stack); High-band buffering / sync with low band  Compute the two sub-bands by filtering with QMF h0 Need to compute things here before the signal is trashed by the encoder FIXME: Are the two signals (low, high) in sync?  #ifndef DISABLE_VBR  Encode the narrowband part Window for analysis  FIXME: This is a kludge  Compute auto-correlation  Noise floor in auto-correlation domain  Lag windowing: equivalent to filtering in the power-spectrum domain  Levinson-Durbin  LPC to LSPs (x-domain) transform If we can't find all LSP's, do some damage control and use a flat filter VBR code  Only adapt if long-term and short-term drift are the same sign if (ratio>-2) VAD only speex_encoder_ctl(state, SPEEX_SET_MODE, &mode);fprintf (stderr, "%f %f\n", ratio, low_qual); #ifndef DISABLE_VBR  If null mode (no transmission), just set a couple things to zero Final signal synthesis from excitation  LSP quantization Q7Q13 LSP interpolation (quantized and unquantized)  Compute mid-band (4000 Hz for wideband) response of low-band and high-band
         filters  Compute "real excitation"  Compute energy of low-band and high-band excitation  1 for spectral folding excitation, 0 for stochastic Q7Q0 Gain to use if we want to use the low-band excitation for high-band fprintf (stderr, "gains: %f %f\n", g, g2);print_vec(&g, 1, "gain factor"); Gain quantization speex_warning_int("tata", quant);Q7Q14Q0Q0 This is a kludge that cleans up a historical bug printf ("%f %f %f %f\n", el, eh, filter_ratio, gc); Reset excitation  Compute zero response (ringing) of A(z/g1) / ( A(z/g2) * Aq(z) )  Compute weighted signal  Compute target signal  Reset excitation print_vec(target, st->subframeSize, "\ntarget");print_vec(target, st->subframeSize, "after");Keep the previous memory Final signal synthesis from excitation  Compute weighted signal again, from synthesized speech (not sure it's the right thing)  SPEEX_DISABLE_ENCODER  Do not include this for voice codec, files will never be UWB  
   st = (SBDecState*)speex_alloc(sizeof(SBDecState));
   if (!st)
      return NULL;
st->stack = (char*)speex_alloc_scratch(SB_DEC_STACK); st->g0_mem = (spx_word32_t*)speex_alloc((QMF_ORDER)*sizeof(spx_word32_t));  st->g1_mem = (spx_word32_t*)speex_alloc((QMF_ORDER)*sizeof(spx_word32_t));  st->excBuf = (spx_word16_t*)speex_alloc((st->subframeSize)*sizeof(spx_word16_t));  st->old_qlsp = (spx_lsp_t*)speex_alloc((st->lpcSize)*sizeof(spx_lsp_t));  st->interp_qlpc = (spx_coef_t*)speex_alloc(st->lpcSize*sizeof(spx_coef_t));  st->pi_gain = (spx_word32_t*)speex_alloc((st->nbSubframes)*sizeof(spx_word32_t)); st->exc_rms = (spx_word16_t*)speex_alloc((st->nbSubframes)*sizeof(spx_word16_t));  st->mem_sp = (spx_mem_t*)speex_alloc((2*st->lpcSize)*sizeof(spx_mem_t)); speex_free_scratch(st->stack);
   speex_free(st->g0_mem);
   speex_free(st->g1_mem);
   speex_free(st->excBuf);
   speex_free(st->old_qlsp);
   speex_free(st->interp_qlpc);
   speex_free(st->pi_gain);
   speex_free(st->exc_rms);
   speex_free(st->mem_sp);

   speex_free(state);
 Final signal synthesis from excitation  Reconstruct the original  Decode the low-band  If error decoding the narrowband part, propagate error Check "wideband bit"Regular wideband frame, read the submodeWas a narrowband frame, set "null submode" If null mode (no transmission), just set a couple things to zero Final signal synthesis from excitation  Pointer for saving innovation  LSP interpolation  LSP to LPC  Calculate reponse ratio between the low and high filter in the middle
         of the band (4000 Hz)  #ifndef DISABLE_VBR  #if !defined(DISABLE_VBR) && !defined(DISABLE_FLOAT_API)  #ifndef DISABLE_VBR fprintf (stderr, "before: %d\n", (*(int*)ptr));fprintf (stderr, "after: %d\n", (*(int*)ptr)); #ifndef DISABLE_VBR  This is all internal stuff past this point  #ifndef DISABLE_VBR  SPEEX_DISABLE_ENCODER  Copyright (C) 2002-2006 Jean-Marc Valin 
   File: sb_celp.c

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:
   
   - Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
   
   - Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
   
   - Neither the name of the Xiph.org Foundation nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.
   
   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 Default size for the encoder and decoder stack (can be changed at compile time).
   This does not apply when using variable-size arrays or alloca.  pi st->stack = (char*)speex_alloc_scratch(SB_ENC_STACK); We just need a big value here  #ifndef DISABLE_VBR speex_free_scratch(st->stack); High-band buffering / sync with low band  Compute the two sub-bands by filtering with QMF h0 Need to compute things here before the signal is trashed by the encoder FIXME: Are the two signals (low, high) in sync?  #ifndef DISABLE_VBR  Encode the narrowband part Window for analysis  FIXME: This is a kludge  Compute auto-correlation  Noise floor in auto-correlation domain  Lag windowing: equivalent to filtering in the power-spectrum domain  Levinson-Durbin  LPC to LSPs (x-domain) transform If we can't find all LSP's, do some damage control and use a flat filter VBR code  Only adapt if long-term and short-term drift are the same sign if (ratio>-2) VAD only speex_encoder_ctl(state, SPEEX_SET_MODE, &mode);fprintf (stderr, "%f %f\n", ratio, low_qual); #ifndef DISABLE_VBR  If null mode (no transmission), just set a couple things to zero Final signal synthesis from excitation  LSP quantization Q7Q13 LSP interpolation (quantized and unquantized)  Compute mid-band (4000 Hz for wideband) response of low-band and high-band
         filters  Compute "real excitation"  Compute energy of low-band and high-band excitation  1 for spectral folding excitation, 0 for stochastic Q7Q0 Gain to use if we want to use the low-band excitation for high-band fprintf (stderr, "gains: %f %f\n", g, g2);print_vec(&g, 1, "gain factor"); Gain quantization speex_warning_int("tata", quant);Q7Q14Q0Q0 This is a kludge that cleans up a historical bug printf ("%f %f %f %f\n", el, eh, filter_ratio, gc); Reset excitation  Compute zero response (ringing) of A(z/g1) / ( A(z/g2) * Aq(z) )  Compute weighted signal  Compute target signal  Reset excitation print_vec(target, st->subframeSize, "\ntarget");print_vec(target, st->subframeSize, "after");Keep the previous memory Final signal synthesis from excitation  Compute weighted signal again, from synthesized speech (not sure it's the right thing)  SPEEX_DISABLE_ENCODER  Do not include this for voice codec, files will never be UWB  
   st = (SBDecState*)speex_alloc(sizeof(SBDecState));
   if (!st)
      return NULL;
st->stack = (char*)speex_alloc_scratch(SB_DEC_STACK); st->g0_mem = (spx_word32_t*)speex_alloc((QMF_ORDER)*sizeof(spx_word32_t));  st->g1_mem = (spx_word32_t*)speex_alloc((QMF_ORDER)*sizeof(spx_word32_t));  st->excBuf = (spx_word16_t*)speex_alloc((st->subframeSize)*sizeof(spx_word16_t));  st->old_qlsp = (spx_lsp_t*)speex_alloc((st->lpcSize)*sizeof(spx_lsp_t));  st->interp_qlpc = (spx_coef_t*)speex_alloc(st->lpcSize*sizeof(spx_coef_t));  st->pi_gain = (spx_word32_t*)speex_alloc((st->nbSubframes)*sizeof(spx_word32_t)); st->exc_rms = (spx_word16_t*)speex_alloc((st->nbSubframes)*sizeof(spx_word16_t));  st->mem_sp = (spx_mem_t*)speex_alloc((2*st->lpcSize)*sizeof(spx_mem_t)); speex_free_scratch(st->stack);
   speex_free(st->g0_mem);
   speex_free(st->g1_mem);
   speex_free(st->excBuf);
   speex_free(st->old_qlsp);
   speex_free(st->interp_qlpc);
   speex_free(st->pi_gain);
   speex_free(st->exc_rms);
   speex_free(st->mem_sp);

   speex_free(state);
 Final signal synthesis from excitation  Reconstruct the original  Decode the low-band  If error decoding the narrowband part, propagate error Check "wideband bit"Regular wideband frame, read the submodeWas a narrowband frame, set "null submode" If null mode (no transmission), just set a couple things to zero Final signal synthesis from excitation  Pointer for saving innovation  LSP interpolation  LSP to LPC  Calculate reponse ratio between the low and high filter in the middle
         of the band (4000 Hz)  #ifndef DISABLE_VBR  #if !defined(DISABLE_VBR) && !defined(DISABLE_FLOAT_API)  #ifndef DISABLE_VBR fprintf (stderr, "before: %d\n", (*(int*)ptr));fprintf (stderr, "after: %d\n", (*(int*)ptr)); #ifndef DISABLE_VBR  This is all internal stuff past this point  #ifndef DISABLE_VBR  SPEEX_DISABLE_ENCODER  Copyright (C) 2002-2006 Jean-Marc Valin 
   File: sb_celp.c

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:
   
   - Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
   
   - Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
   
   - Neither the name of the Xiph.org Foundation nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.
   
   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 Default size for the encoder and decoder stack (can be changed at compile time).
   This does not apply when using variable-size arrays or alloca.  pi st->stack = (char*)speex_alloc_scratch(SB_ENC_STACK); We just need a big value here  #ifndef DISABLE_VBR speex_free_scratch(st->stack); High-band buffering / sync with low band  Compute the two sub-bands by filtering with QMF h0 Need to compute things here before the signal is trashed by the encoder FIXME: Are the two signals (low, high) in sync?  #ifndef DISABLE_VBR  Encode the narrowband part Window for analysis  FIXME: This is a kludge  Compute auto-correlation  Noise floor in auto-correlation domain  Lag windowing: equivalent to filtering in the power-spectrum domain  Levinson-Durbin  LPC to LSPs (x-domain) transform If we can't find all LSP's, do some damage control and use a flat filter VBR code  Only adapt if long-term and short-term drift are the same sign if (ratio>-2) VAD only speex_encoder_ctl(state, SPEEX_SET_MODE, &mode);fprintf (stderr, "%f %f\n", ratio, low_qual); #ifndef DISABLE_VBR  If null mode (no transmission), just set a couple things to zero Final signal synthesis from excitation  LSP quantization Q7Q13 LSP interpolation (quantized and unquantized)  Compute mid-band (4000 Hz for wideband) response of low-band and high-band
         filters  Compute "real excitation"  Compute energy of low-band and high-band excitation  1 for spectral folding excitation, 0 for stochastic Q7Q0 Gain to use if we want to use the low-band excitation for high-band fprintf (stderr, "gains: %f %f\n", g, g2);print_vec(&g, 1, "gain factor"); Gain quantization speex_warning_int("tata", quant);Q7Q14Q0Q0 This is a kludge that cleans up a historical bug printf ("%f %f %f %f\n", el, eh, filter_ratio, gc); Reset excitation  Compute zero response (ringing) of A(z/g1) / ( A(z/g2) * Aq(z) )  Compute weighted signal  Compute target signal  Reset excitation print_vec(target, st->subframeSize, "\ntarget");print_vec(target, st->subframeSize, "after");Keep the previous memory Final signal synthesis from excitation  Compute weighted signal again, from synthesized speech (not sure it's the right thing)  SPEEX_DISABLE_ENCODER  Do not include this for voice codec, files will never be UWB  
   st = (SBDecState*)speex_alloc(sizeof(SBDecState));
   if (!st)
      return NULL;
st->stack = (char*)speex_alloc_scratch(SB_DEC_STACK); st->g0_mem = (spx_word32_t*)speex_alloc((QMF_ORDER)*sizeof(spx_word32_t));  st->g1_mem = (spx_word32_t*)speex_alloc((QMF_ORDER)*sizeof(spx_word32_t));  st->excBuf = (spx_word16_t*)speex_alloc((st->subframeSize)*sizeof(spx_word16_t));  st->old_qlsp = (spx_lsp_t*)speex_alloc((st->lpcSize)*sizeof(spx_lsp_t));  st->interp_qlpc = (spx_coef_t*)speex_alloc(st->lpcSize*sizeof(spx_coef_t));  st->pi_gain = (spx_word32_t*)speex_alloc((st->nbSubframes)*sizeof(spx_word32_t)); st->exc_rms = (spx_word16_t*)speex_alloc((st->nbSubframes)*sizeof(spx_word16_t));  st->mem_sp = (spx_mem_t*)speex_alloc((2*st->lpcSize)*sizeof(spx_mem_t)); speex_free_scratch(st->stack);
   speex_free(st->g0_mem);
   speex_free(st->g1_mem);
   speex_free(st->excBuf);
   speex_free(st->old_qlsp);
   speex_free(st->interp_qlpc);
   speex_free(st->pi_gain);
   speex_free(st->exc_rms);
   speex_free(st->mem_sp);

   speex_free(state);
 Final signal synthesis from excitation  Reconstruct the original  Decode the low-band  If error decoding the narrowband part, propagate error Check "wideband bit"Regular wideband frame, read the submodeWas a narrowband frame, set "null submode" If null mode (no transmission), just set a couple things to zero Final signal synthesis from excitation  Pointer for saving innovation  LSP interpolation  LSP to LPC  Calculate reponse ratio between the low and high filter in the middle
         of the band (4000 Hz)  #ifndef DISABLE_VBR  #if !defined(DISABLE_VBR) && !defined(DISABLE_FLOAT_API)  #ifndef DISABLE_VBR fprintf (stderr, "before: %d\n", (*(int*)ptr));fprintf (stderr, "after: %d\n", (*(int*)ptr)); #ifndef DISABLE_VBR  This is all internal stuff past this point  #ifndef DISABLE_VBR  SPEEX_DISABLE_ENCODER 