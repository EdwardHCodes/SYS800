**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (c) 2012 Marcin Bukat
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Color map to use  mem allocator init  Reading Gif spec it seems one should always use background color
     * in canvas but most real files omit this and sets background color to 0
     * (which IS valid index). We can choose to either conform to standard
     * (and wrongly display most of gifs with transparency) or stick to
     * common practise and treat background color 0 as transparent.
     * Moreover when dispose method is BACKGROUND spec suggest
     * to reset canvas to global background color specified in gif BUT
     * all renderers I know use transparency instead.
      var names adhere to giflib coding style  The way Interlaced image should
     * be read - offsets and jumps
      used for color conversion  initialize struct  Size in bytes one row. error allocating temp space  We use two pixel buffers if dispose method asks
     * for restoration of the previous state.
     * We only swap the indexes leaving data in place.
      Global background color  Scan the content of the GIF file and load the image(s) in:  Image Position relative to canvas  Check Color map to use  sanity check  We need to take a snapshot before processing the image
                     * in order to restore canvas to previous state after
                     * rendering
                      Need to perform 4 passes on the image  load single line into buffer  allocate space for new frame  animated gif  restore to the background color  DISPOSAL_UNSPECIFIED
                             * DISPOSE_DO_NOT
                              Skip anything else  including TERMINATE_RECORD_TYPE  free all internal allocated data  not animated gif  WARNING !!!!  GifFile object is trashed from now on, DONT use it  Move bitmap in native format to the front of the buff  correct aspect ratio  scaler vars  recalc_dimensions vars  size of the image after correction  defined in apps/recorder/resize.c  calculate 'corrected' image size  check memory constraints
         * do the correction only if there is enough
         * free memory
          scale the bitmap to correct physical
                 * pixel dimentions
                  copy back corrected image  update decoder struct **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (c) 2012 Marcin Bukat
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Color map to use  mem allocator init  Reading Gif spec it seems one should always use background color
     * in canvas but most real files omit this and sets background color to 0
     * (which IS valid index). We can choose to either conform to standard
     * (and wrongly display most of gifs with transparency) or stick to
     * common practise and treat background color 0 as transparent.
     * Moreover when dispose method is BACKGROUND spec suggest
     * to reset canvas to global background color specified in gif BUT
     * all renderers I know use transparency instead.
      var names adhere to giflib coding style  The way Interlaced image should
     * be read - offsets and jumps
      used for color conversion  initialize struct  Size in bytes one row. error allocating temp space  We use two pixel buffers if dispose method asks
     * for restoration of the previous state.
     * We only swap the indexes leaving data in place.
      Global background color  Scan the content of the GIF file and load the image(s) in:  Image Position relative to canvas  Check Color map to use  sanity check  We need to take a snapshot before processing the image
                     * in order to restore canvas to previous state after
                     * rendering
                      Need to perform 4 passes on the image  load single line into buffer  allocate space for new frame  animated gif  restore to the background color  DISPOSAL_UNSPECIFIED
                             * DISPOSE_DO_NOT
                              Skip anything else  including TERMINATE_RECORD_TYPE  free all internal allocated data  not animated gif  WARNING !!!!  GifFile object is trashed from now on, DONT use it  Move bitmap in native format to the front of the buff  correct aspect ratio  scaler vars  recalc_dimensions vars  size of the image after correction  defined in apps/recorder/resize.c  calculate 'corrected' image size  check memory constraints
         * do the correction only if there is enough
         * free memory
          scale the bitmap to correct physical
                 * pixel dimentions
                  copy back corrected image  update decoder struct **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (c) 2012 Marcin Bukat
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Color map to use  mem allocator init  Reading Gif spec it seems one should always use background color
     * in canvas but most real files omit this and sets background color to 0
     * (which IS valid index). We can choose to either conform to standard
     * (and wrongly display most of gifs with transparency) or stick to
     * common practise and treat background color 0 as transparent.
     * Moreover when dispose method is BACKGROUND spec suggest
     * to reset canvas to global background color specified in gif BUT
     * all renderers I know use transparency instead.
      var names adhere to giflib coding style  The way Interlaced image should
     * be read - offsets and jumps
      used for color conversion  initialize struct  Size in bytes one row. error allocating temp space  We use two pixel buffers if dispose method asks
     * for restoration of the previous state.
     * We only swap the indexes leaving data in place.
      Global background color  Scan the content of the GIF file and load the image(s) in:  Image Position relative to canvas  Check Color map to use  sanity check  We need to take a snapshot before processing the image
                     * in order to restore canvas to previous state after
                     * rendering
                      Need to perform 4 passes on the image  load single line into buffer  allocate space for new frame  animated gif  restore to the background color  DISPOSAL_UNSPECIFIED
                             * DISPOSE_DO_NOT
                              Skip anything else  including TERMINATE_RECORD_TYPE  free all internal allocated data  not animated gif  WARNING !!!!  GifFile object is trashed from now on, DONT use it  Move bitmap in native format to the front of the buff  correct aspect ratio  scaler vars  recalc_dimensions vars  size of the image after correction  defined in apps/recorder/resize.c  calculate 'corrected' image size  check memory constraints
         * do the correction only if there is enough
         * free memory
          scale the bitmap to correct physical
                 * pixel dimentions
                  copy back corrected image  update decoder struct 