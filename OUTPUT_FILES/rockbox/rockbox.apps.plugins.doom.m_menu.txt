 Emacs style mode select   -*- C++ -*------------------------------------------------------------------------------ $Id$ Copyright (C) 1993-1996 by id Software, Inc. This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. $Log$ Revision 1.7  2006/12/13 04:44:17  kkurbjun Dehacked and BEX support for Doom - currently only supports a DEHACKED file in a WAD (not as a standalone file yet). Revision 1.6  2006-04-16 23:14:04  kkurbjun Fix run so that it stays enabled across level loads.  Removed some unused code and added some back in for hopeful future use. Revision 1.5  2006-04-04 23:58:37  kkurbjun Make savegame strings more informative Revision 1.4  2006-04-04 23:13:50  kkurbjun Fix up configurable keys, edit exit string, more work needs to be done on menu keys Revision 1.3  2006-04-03 20:03:02  kkurbjun Updates doom menu w/ new graphics, now requires rockdoom.wad: http://alamode.mines.edu/~kkurbjun/rockdoom.wad Revision 1.2  2006-04-03 00:28:13  kkurbjun Fixes graphic errors in scaling code, note sure about the fix in hu_lib.c though.  I havn't seen any corrupted text but it may still need a proper fix. Revision 1.1  2006-03-28 15:44:01  dave Patch #2969 - Doom!  Currently only working on the H300. DESCRIPTION: DOOM selection menu, options, episode etc. Sliders and icons. Kinda widget stuff.----------------------------------------------------------------------------- Data. in heads-up code defaulted values has default Show messages has default, 0 = off, 1 = on Blocky mode, has default, 0 = high, 1 = normal has default temp for screenblocks (0-9) -1 = no quicksave slot picked! 1 = message to be printed ...and here is the message string! message x & y timed message = no input from user we are going to be entering a savegame string which slot to save in which char we're editing old save description before edit MENU TYPEDEFS 0 = no cursor here, 1 = ok, 2 = arrows ok choice = menu item #. if status = 2,   choice=0:leftarrow,1:rightarrow hotkey in menu # of menu items previous menu menu items draw routine ROCKBOX x,y of menu last item user was on in menu menu item skull is on skull animation counter which skull to draw graphic name of skulls warning: initializer-string for array of chars is too long8 current menudef PROTOTYPES DOOM MENU Another hickup with Special edition. EPISODE SELECT # of menu items previous menu menuitem_t -> drawing routine -> x,y lastOn NEW GAME # of menu items previous menu menuitem_t -> drawing routine -> x,y lastOn OPTIONS MENU Read This! MENU 1 & 2 SOUND VOLUME MENUROCKBOXROCKBOXROCKBOX LOAD GAME MENU SAVE GAME MENU M_ReadSaveStrings  read the strings from the savegame files M_LoadGame & Cie. Draw border for the savegame description User wants to load this game Selected from DOOM menu  M_SaveGame & Cie. M_Responder calls this when user is finished PICK QUICKSAVE SLOT YET? User wants to save. Start string input for M_Responder we are going to be intercepting all chars Selected from DOOM menu      M_QuickSave means to pick a slot now M_QuickLoad Read This Menus Had a "quick hack to fix romero bug" Read This Menus - optional second page. This hack keeps us from having to change menus. Change Sfx & Music volumes *8  *8  M_DrawMainMenu M_NewGame CPhipps - patch drawing updated      M_Episode CPhipps - patch drawing updatedjff 3/24/98 remember last skill selected killough 10/98 moved to here Ty 03/27/98 - externalized Yet another hack... Digita  fprintf( stderr,     "M_Episode: 4th episode requires UltimateDOOM\n"); M_Options CPhipps - patch drawing updated      Toggle messages on/off M_EndGame killough 5/26/98: make endgame quit if recording or playing back demo M_ReadThis M_QuitDOOM We pick index 0 which is language sensitive,  or one at random, between 1 and maximum number.      Menu Functions CPhipps - patch drawing updated CPhipps - patch drawing updated Find string width from hu_font chars    Find string height from hu_font chars killough 1/31/98      Write a string using the hu_font proff/nicolas 09/20/98 -- changed for hi-res CPhipps - patch drawing updated CONTROL PANEL M_Responder   static  int     joywait = 0;   static  int     mousewait = 0;   static  int     mousey = 0;   static  int     lasty = 0;   static  int     mousex = 0;   static  int     lastx = 0; Process joystick input   if (ev->type == ev_joystick && joywait < I_GetTime())
   {
      if (ev->data3 == -1)
      {
         ch = KEY_UPARROW;
         joywait = I_GetTime() + 5;
      }
      else if (ev->data3 == 1)
      {
         ch = KEY_DOWNARROW;
         joywait = I_GetTime() + 5;
      }

      if (ev->data2 == -1)
      {
         ch = KEY_LEFTARROW;
         joywait = I_GetTime() + 2;
      }
      else if (ev->data2 == 1)
      {
         ch = KEY_RIGHTARROW;
         joywait = I_GetTime() + 2;
      }

      if (ev->data1&1)
      {
         ch = key_menu_enter;
         joywait = I_GetTime() + 5;
      }
      if (ev->data1&2)
      {
         ch = KEY_BACKSPACE;
         joywait = I_GetTime() + 5;
      }
   }
   else
   {
      // Process mouse input
      if (ev->type == ev_mouse && mousewait < I_GetTime())
      {
         mousey += ev->data3;
         if (mousey < lasty-30)
         {
            ch = KEY_DOWNARROW;
            mousewait = I_GetTime() + 5;
            mousey = lasty -= 30;
         }
         else if (mousey > lasty+30)
         {
            ch = KEY_UPARROW;
            mousewait = I_GetTime() + 5;
            mousey = lasty += 30;
         }

         mousex += ev->data2;
         if (mousex < lastx-30)
         {
            ch = KEY_LEFTARROW;
            mousewait = I_GetTime() + 5;
            mousex = lastx -= 30;
         }
         else if (mousex > lastx+30)
         {
            ch = KEY_RIGHTARROW;
            mousewait = I_GetTime() + 5;
            mousex = lastx += 30;
         }

         if (ev->data1&1)
         {
            ch = key_menu_enter;
            mousewait = I_GetTime() + 15;
         }

         if (ev->data1&2)
         {
            ch = KEY_BACKSPACE;
            mousewait = I_GetTime() + 15;
         }
      }
      else    } Save Game string input Take care of any messages that need input
   if (ch == KEY_F1) // devparm &&
   {
      G_ScreenShot ();
      return true;
   }
 F-Keys Autorun                          //  V
      case KEY_F1:            // Help key
         M_StartControlPanel ();

         if ( gamemode == retail )
            currentMenu = &ReadDef2;
         else
            currentMenu = &ReadDef1;

         itemOn = 0;
         S_StartSound(NULL,sfx_swtchn);
         return true;

      case KEY_F6:            // Quicksave
         S_StartSound(NULL,sfx_swtchn);
         M_QuickSave();
         return true;

      case KEY_F9:            // Quickload
         S_StartSound(NULL,sfx_swtchn);
         M_QuickLoad();
         return true;
 Pop-up menu? Keys usable within menu right arrow M_StartControlPanel intro might call this repeatedly JDC JDC M_Drawer Called after the view has been rendered, but before it has been blitted. Horiz. & Vertically center string and print it. call Draw routine DRAW MENU DRAW SKULL CPhipps - patch drawing updated M_ClearMenus if (!netgame && usergame && paused)       sendpause = true; M_SetupNextMenu M_Ticker M_Init Here we could catch other version dependencies,  like HELP1/2, and four episodes. This is used because DOOM 2 had only one HELP  page. I use CREDIT as second page now, but  kept this hack for educational purposes. Episode 2 and 3 are handled,  branching to an ad screen. We need to remove the fourth episode. We are fine. Emacs style mode select   -*- C++ -*------------------------------------------------------------------------------ $Id$ Copyright (C) 1993-1996 by id Software, Inc. This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. $Log$ Revision 1.7  2006/12/13 04:44:17  kkurbjun Dehacked and BEX support for Doom - currently only supports a DEHACKED file in a WAD (not as a standalone file yet). Revision 1.6  2006-04-16 23:14:04  kkurbjun Fix run so that it stays enabled across level loads.  Removed some unused code and added some back in for hopeful future use. Revision 1.5  2006-04-04 23:58:37  kkurbjun Make savegame strings more informative Revision 1.4  2006-04-04 23:13:50  kkurbjun Fix up configurable keys, edit exit string, more work needs to be done on menu keys Revision 1.3  2006-04-03 20:03:02  kkurbjun Updates doom menu w/ new graphics, now requires rockdoom.wad: http://alamode.mines.edu/~kkurbjun/rockdoom.wad Revision 1.2  2006-04-03 00:28:13  kkurbjun Fixes graphic errors in scaling code, note sure about the fix in hu_lib.c though.  I havn't seen any corrupted text but it may still need a proper fix. Revision 1.1  2006-03-28 15:44:01  dave Patch #2969 - Doom!  Currently only working on the H300. DESCRIPTION: DOOM selection menu, options, episode etc. Sliders and icons. Kinda widget stuff.----------------------------------------------------------------------------- Data. in heads-up code defaulted values has default Show messages has default, 0 = off, 1 = on Blocky mode, has default, 0 = high, 1 = normal has default temp for screenblocks (0-9) -1 = no quicksave slot picked! 1 = message to be printed ...and here is the message string! message x & y timed message = no input from user we are going to be entering a savegame string which slot to save in which char we're editing old save description before edit MENU TYPEDEFS 0 = no cursor here, 1 = ok, 2 = arrows ok choice = menu item #. if status = 2,   choice=0:leftarrow,1:rightarrow hotkey in menu # of menu items previous menu menu items draw routine ROCKBOX x,y of menu last item user was on in menu menu item skull is on skull animation counter which skull to draw graphic name of skulls warning: initializer-string for array of chars is too long8 current menudef PROTOTYPES DOOM MENU Another hickup with Special edition. EPISODE SELECT # of menu items previous menu menuitem_t -> drawing routine -> x,y lastOn NEW GAME # of menu items previous menu menuitem_t -> drawing routine -> x,y lastOn OPTIONS MENU Read This! MENU 1 & 2 SOUND VOLUME MENUROCKBOXROCKBOXROCKBOX LOAD GAME MENU SAVE GAME MENU M_ReadSaveStrings  read the strings from the savegame files M_LoadGame & Cie. Draw border for the savegame description User wants to load this game Selected from DOOM menu  M_SaveGame & Cie. M_Responder calls this when user is finished PICK QUICKSAVE SLOT YET? User wants to save. Start string input for M_Responder we are going to be intercepting all chars Selected from DOOM menu      M_QuickSave means to pick a slot now M_QuickLoad Read This Menus Had a "quick hack to fix romero bug" Read This Menus - optional second page. This hack keeps us from having to change menus. Change Sfx & Music volumes *8  *8  M_DrawMainMenu M_NewGame CPhipps - patch drawing updated      M_Episode CPhipps - patch drawing updatedjff 3/24/98 remember last skill selected killough 10/98 moved to here Ty 03/27/98 - externalized Yet another hack... Digita  fprintf( stderr,     "M_Episode: 4th episode requires UltimateDOOM\n"); M_Options CPhipps - patch drawing updated      Toggle messages on/off M_EndGame killough 5/26/98: make endgame quit if recording or playing back demo M_ReadThis M_QuitDOOM We pick index 0 which is language sensitive,  or one at random, between 1 and maximum number.      Menu Functions CPhipps - patch drawing updated CPhipps - patch drawing updated Find string width from hu_font chars    Find string height from hu_font chars killough 1/31/98      Write a string using the hu_font proff/nicolas 09/20/98 -- changed for hi-res CPhipps - patch drawing updated CONTROL PANEL M_Responder   static  int     joywait = 0;   static  int     mousewait = 0;   static  int     mousey = 0;   static  int     lasty = 0;   static  int     mousex = 0;   static  int     lastx = 0; Process joystick input   if (ev->type == ev_joystick && joywait < I_GetTime())
   {
      if (ev->data3 == -1)
      {
         ch = KEY_UPARROW;
         joywait = I_GetTime() + 5;
      }
      else if (ev->data3 == 1)
      {
         ch = KEY_DOWNARROW;
         joywait = I_GetTime() + 5;
      }

      if (ev->data2 == -1)
      {
         ch = KEY_LEFTARROW;
         joywait = I_GetTime() + 2;
      }
      else if (ev->data2 == 1)
      {
         ch = KEY_RIGHTARROW;
         joywait = I_GetTime() + 2;
      }

      if (ev->data1&1)
      {
         ch = key_menu_enter;
         joywait = I_GetTime() + 5;
      }
      if (ev->data1&2)
      {
         ch = KEY_BACKSPACE;
         joywait = I_GetTime() + 5;
      }
   }
   else
   {
      // Process mouse input
      if (ev->type == ev_mouse && mousewait < I_GetTime())
      {
         mousey += ev->data3;
         if (mousey < lasty-30)
         {
            ch = KEY_DOWNARROW;
            mousewait = I_GetTime() + 5;
            mousey = lasty -= 30;
         }
         else if (mousey > lasty+30)
         {
            ch = KEY_UPARROW;
            mousewait = I_GetTime() + 5;
            mousey = lasty += 30;
         }

         mousex += ev->data2;
         if (mousex < lastx-30)
         {
            ch = KEY_LEFTARROW;
            mousewait = I_GetTime() + 5;
            mousex = lastx -= 30;
         }
         else if (mousex > lastx+30)
         {
            ch = KEY_RIGHTARROW;
            mousewait = I_GetTime() + 5;
            mousex = lastx += 30;
         }

         if (ev->data1&1)
         {
            ch = key_menu_enter;
            mousewait = I_GetTime() + 15;
         }

         if (ev->data1&2)
         {
            ch = KEY_BACKSPACE;
            mousewait = I_GetTime() + 15;
         }
      }
      else    } Save Game string input Take care of any messages that need input
   if (ch == KEY_F1) // devparm &&
   {
      G_ScreenShot ();
      return true;
   }
 F-Keys Autorun                          //  V
      case KEY_F1:            // Help key
         M_StartControlPanel ();

         if ( gamemode == retail )
            currentMenu = &ReadDef2;
         else
            currentMenu = &ReadDef1;

         itemOn = 0;
         S_StartSound(NULL,sfx_swtchn);
         return true;

      case KEY_F6:            // Quicksave
         S_StartSound(NULL,sfx_swtchn);
         M_QuickSave();
         return true;

      case KEY_F9:            // Quickload
         S_StartSound(NULL,sfx_swtchn);
         M_QuickLoad();
         return true;
 Pop-up menu? Keys usable within menu right arrow M_StartControlPanel intro might call this repeatedly JDC JDC M_Drawer Called after the view has been rendered, but before it has been blitted. Horiz. & Vertically center string and print it. call Draw routine DRAW MENU DRAW SKULL CPhipps - patch drawing updated M_ClearMenus if (!netgame && usergame && paused)       sendpause = true; M_SetupNextMenu M_Ticker M_Init Here we could catch other version dependencies,  like HELP1/2, and four episodes. This is used because DOOM 2 had only one HELP  page. I use CREDIT as second page now, but  kept this hack for educational purposes. Episode 2 and 3 are handled,  branching to an ad screen. We need to remove the fourth episode. We are fine. Emacs style mode select   -*- C++ -*------------------------------------------------------------------------------ $Id$ Copyright (C) 1993-1996 by id Software, Inc. This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. $Log$ Revision 1.7  2006/12/13 04:44:17  kkurbjun Dehacked and BEX support for Doom - currently only supports a DEHACKED file in a WAD (not as a standalone file yet). Revision 1.6  2006-04-16 23:14:04  kkurbjun Fix run so that it stays enabled across level loads.  Removed some unused code and added some back in for hopeful future use. Revision 1.5  2006-04-04 23:58:37  kkurbjun Make savegame strings more informative Revision 1.4  2006-04-04 23:13:50  kkurbjun Fix up configurable keys, edit exit string, more work needs to be done on menu keys Revision 1.3  2006-04-03 20:03:02  kkurbjun Updates doom menu w/ new graphics, now requires rockdoom.wad: http://alamode.mines.edu/~kkurbjun/rockdoom.wad Revision 1.2  2006-04-03 00:28:13  kkurbjun Fixes graphic errors in scaling code, note sure about the fix in hu_lib.c though.  I havn't seen any corrupted text but it may still need a proper fix. Revision 1.1  2006-03-28 15:44:01  dave Patch #2969 - Doom!  Currently only working on the H300. DESCRIPTION: DOOM selection menu, options, episode etc. Sliders and icons. Kinda widget stuff.----------------------------------------------------------------------------- Data. in heads-up code defaulted values has default Show messages has default, 0 = off, 1 = on Blocky mode, has default, 0 = high, 1 = normal has default temp for screenblocks (0-9) -1 = no quicksave slot picked! 1 = message to be printed ...and here is the message string! message x & y timed message = no input from user we are going to be entering a savegame string which slot to save in which char we're editing old save description before edit MENU TYPEDEFS 0 = no cursor here, 1 = ok, 2 = arrows ok choice = menu item #. if status = 2,   choice=0:leftarrow,1:rightarrow hotkey in menu # of menu items previous menu menu items draw routine ROCKBOX x,y of menu last item user was on in menu menu item skull is on skull animation counter which skull to draw graphic name of skulls warning: initializer-string for array of chars is too long8 current menudef PROTOTYPES DOOM MENU Another hickup with Special edition. EPISODE SELECT # of menu items previous menu menuitem_t -> drawing routine -> x,y lastOn NEW GAME # of menu items previous menu menuitem_t -> drawing routine -> x,y lastOn OPTIONS MENU Read This! MENU 1 & 2 SOUND VOLUME MENUROCKBOXROCKBOXROCKBOX LOAD GAME MENU SAVE GAME MENU M_ReadSaveStrings  read the strings from the savegame files M_LoadGame & Cie. Draw border for the savegame description User wants to load this game Selected from DOOM menu  M_SaveGame & Cie. M_Responder calls this when user is finished PICK QUICKSAVE SLOT YET? User wants to save. Start string input for M_Responder we are going to be intercepting all chars Selected from DOOM menu      M_QuickSave means to pick a slot now M_QuickLoad Read This Menus Had a "quick hack to fix romero bug" Read This Menus - optional second page. This hack keeps us from having to change menus. Change Sfx & Music volumes *8  *8  M_DrawMainMenu M_NewGame CPhipps - patch drawing updated      M_Episode CPhipps - patch drawing updatedjff 3/24/98 remember last skill selected killough 10/98 moved to here Ty 03/27/98 - externalized Yet another hack... Digita  fprintf( stderr,     "M_Episode: 4th episode requires UltimateDOOM\n"); M_Options CPhipps - patch drawing updated      Toggle messages on/off M_EndGame killough 5/26/98: make endgame quit if recording or playing back demo M_ReadThis M_QuitDOOM We pick index 0 which is language sensitive,  or one at random, between 1 and maximum number.      Menu Functions CPhipps - patch drawing updated CPhipps - patch drawing updated Find string width from hu_font chars    Find string height from hu_font chars killough 1/31/98      Write a string using the hu_font proff/nicolas 09/20/98 -- changed for hi-res CPhipps - patch drawing updated CONTROL PANEL M_Responder   static  int     joywait = 0;   static  int     mousewait = 0;   static  int     mousey = 0;   static  int     lasty = 0;   static  int     mousex = 0;   static  int     lastx = 0; Process joystick input   if (ev->type == ev_joystick && joywait < I_GetTime())
   {
      if (ev->data3 == -1)
      {
         ch = KEY_UPARROW;
         joywait = I_GetTime() + 5;
      }
      else if (ev->data3 == 1)
      {
         ch = KEY_DOWNARROW;
         joywait = I_GetTime() + 5;
      }

      if (ev->data2 == -1)
      {
         ch = KEY_LEFTARROW;
         joywait = I_GetTime() + 2;
      }
      else if (ev->data2 == 1)
      {
         ch = KEY_RIGHTARROW;
         joywait = I_GetTime() + 2;
      }

      if (ev->data1&1)
      {
         ch = key_menu_enter;
         joywait = I_GetTime() + 5;
      }
      if (ev->data1&2)
      {
         ch = KEY_BACKSPACE;
         joywait = I_GetTime() + 5;
      }
   }
   else
   {
      // Process mouse input
      if (ev->type == ev_mouse && mousewait < I_GetTime())
      {
         mousey += ev->data3;
         if (mousey < lasty-30)
         {
            ch = KEY_DOWNARROW;
            mousewait = I_GetTime() + 5;
            mousey = lasty -= 30;
         }
         else if (mousey > lasty+30)
         {
            ch = KEY_UPARROW;
            mousewait = I_GetTime() + 5;
            mousey = lasty += 30;
         }

         mousex += ev->data2;
         if (mousex < lastx-30)
         {
            ch = KEY_LEFTARROW;
            mousewait = I_GetTime() + 5;
            mousex = lastx -= 30;
         }
         else if (mousex > lastx+30)
         {
            ch = KEY_RIGHTARROW;
            mousewait = I_GetTime() + 5;
            mousex = lastx += 30;
         }

         if (ev->data1&1)
         {
            ch = key_menu_enter;
            mousewait = I_GetTime() + 15;
         }

         if (ev->data1&2)
         {
            ch = KEY_BACKSPACE;
            mousewait = I_GetTime() + 15;
         }
      }
      else    } Save Game string input Take care of any messages that need input
   if (ch == KEY_F1) // devparm &&
   {
      G_ScreenShot ();
      return true;
   }
 F-Keys Autorun                          //  V
      case KEY_F1:            // Help key
         M_StartControlPanel ();

         if ( gamemode == retail )
            currentMenu = &ReadDef2;
         else
            currentMenu = &ReadDef1;

         itemOn = 0;
         S_StartSound(NULL,sfx_swtchn);
         return true;

      case KEY_F6:            // Quicksave
         S_StartSound(NULL,sfx_swtchn);
         M_QuickSave();
         return true;

      case KEY_F9:            // Quickload
         S_StartSound(NULL,sfx_swtchn);
         M_QuickLoad();
         return true;
 Pop-up menu? Keys usable within menu right arrow M_StartControlPanel intro might call this repeatedly JDC JDC M_Drawer Called after the view has been rendered, but before it has been blitted. Horiz. & Vertically center string and print it. call Draw routine DRAW MENU DRAW SKULL CPhipps - patch drawing updated M_ClearMenus if (!netgame && usergame && paused)       sendpause = true; M_SetupNextMenu M_Ticker M_Init Here we could catch other version dependencies,  like HELP1/2, and four episodes. This is used because DOOM 2 had only one HELP  page. I use CREDIT as second page now, but  kept this hack for educational purposes. Episode 2 and 3 are handled,  branching to an ad screen. We need to remove the fourth episode. We are fine.