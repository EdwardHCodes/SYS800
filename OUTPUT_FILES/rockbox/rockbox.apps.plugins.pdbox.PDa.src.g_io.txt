 Copyright (c) 1997-1999 Miller Puckette.
* For information on usage and redistribution, and for a DISCLAIMER OF ALL
* WARRANTIES, see the file, "LICENSE.txt," in this distribution.   graphical inlets and outlets, both for control and signals.   This code is highly inefficient; messages actually have to be forwarded
by inlets and outlets.  The outlet is in even worse shape than the inlet;
in order to avoid having a "signal" method in the class, the oulet actually
sprouts an inlet, which forwards the message to the "outlet" object, which
sends it on to the outlet proper.  Another way to do it would be to have
separate classes for "signal" and "control" outlets, but this would complicate
life elsewhere.  hacked to run subpatches with different samplerates
 *
 * mfg.gfd.uil
 * IOhannes
 *
 * edited lines are marked with "IOhannes"
 *
  ------------------------- vinlet --------------------------  signal buffer; zero if not a signal  if not reblocking, the next slot communicates the parent's inlet
     signal from the prolog to the DSP routine:  IOhannes  ------------------------- signal inlet --------------------------  no buffer means we're not a signal inlet  prolog code: loads buffer from parent patch  set up prolog DSP code   IOhannes  if the "reblock" flag is set, arrange to copy data in from the
	parent.  resampled parentvectorsize: IOhannes  this should never happen:  the prolog code counts from 0 to period-1; the
    	    phase is backed up by one so that AFTER the prolog code
    	    runs, the "x_fill" phase is in sync with the "x_read" phase.  IOhannes {  } IOhannes  if the input signal's reference count is zero, we have
	       to free it here because we didn't in ugen_doit().  no reblocking; in this case our output signal is "borrowed"
	    and merely needs to be pointed to the real one. static void *vinlet_newsig(void) this should be though over: 
     * it might prove hard to provide consistency between labeled up- & downsampling methods
     * maybe indeces would be better...
     *
     * up till now we provide several upsampling methods and 1 single downsampling method (no filtering !)
      up: sample and hold  up: linear interpolation  up: zero-padding  ------------------------- voutlet --------------------------  signal buffer; zero if not a signal  next to read out of buffer in epilog code  next to write in to buffer  hopsize  vice versa from the inlet, if we don't block, this holds the
	parent's outlet signal, valid between the prolog and the dsp setup
	routines.   and here's a flag indicating that we aren't blocked but have to
	do a copy (because we're switched).  IOhannes  ------------------------- signal outlet --------------------------  LATER optimize for non-overlapped case where the "+=" isn't needed  epilog code for blocking: write buffer to parent patch  IOhannes  IOhannes  IOhannes {     t_float *dummy = (t_float *)(w[2]); IOhannes  } IOhannes  prolog for outlets -- store pointer to the outlet on the
	parent, which, if "reblock" is false, will want to refer
	back to whatever we see on our input during the "dsp" method
	called later.   IOhannes  IOhannes  if we're just going to make the signal available on the
	    parent patch, hand it off to the parent signal.  this is done elsewhere--> sp[0]->s_refcount++;  set up epilog DSP code.  If we're reblocking, this is the
	time to copy the samples out to the containing object's outlets.
	If we aren't reblocking, there's nothing to do here.   IOhannes  this shouldn't be necesssary...  IOhannes  IOhannes 	bigperiod = (downsample * myvecsize)/(upsample * parentvecsize); /* IOhannes */ IOhannes 	bufsize = parentvecsize * upsample; /* IOhannes */ IOhannes  IOhannes: {  } IOhannes  post("phase %d, block %d, parent %d", phase & 63,
    	    parentvecsize * blockphase, parentvecsize * epilogphase);  set epilog pointer and schedule it  IOhannes {  } IOhannes  if we aren't blocked but we are switched, the epilog code just
	copies zeros to the output.  In this case the blocking code actually
	jumps over the epilog if the block is running.  this should be though over: 
     * it might prove hard to provide consistency between labeled up- & downsampling methods
     * maybe indeces would be better...
     *
     * up till now we provide several upsampling methods and 1 single downsampling method (no filtering !)
      up: sample and hold  up: linear interpolation  up: linear interpolation  up: zero-padding; down: ignore samples inbetween  ---------------------------- overall setup -----------------------------  Copyright (c) 1997-1999 Miller Puckette.
* For information on usage and redistribution, and for a DISCLAIMER OF ALL
* WARRANTIES, see the file, "LICENSE.txt," in this distribution.   graphical inlets and outlets, both for control and signals.   This code is highly inefficient; messages actually have to be forwarded
by inlets and outlets.  The outlet is in even worse shape than the inlet;
in order to avoid having a "signal" method in the class, the oulet actually
sprouts an inlet, which forwards the message to the "outlet" object, which
sends it on to the outlet proper.  Another way to do it would be to have
separate classes for "signal" and "control" outlets, but this would complicate
life elsewhere.  hacked to run subpatches with different samplerates
 *
 * mfg.gfd.uil
 * IOhannes
 *
 * edited lines are marked with "IOhannes"
 *
  ------------------------- vinlet --------------------------  signal buffer; zero if not a signal  if not reblocking, the next slot communicates the parent's inlet
     signal from the prolog to the DSP routine:  IOhannes  ------------------------- signal inlet --------------------------  no buffer means we're not a signal inlet  prolog code: loads buffer from parent patch  set up prolog DSP code   IOhannes  if the "reblock" flag is set, arrange to copy data in from the
	parent.  resampled parentvectorsize: IOhannes  this should never happen:  the prolog code counts from 0 to period-1; the
    	    phase is backed up by one so that AFTER the prolog code
    	    runs, the "x_fill" phase is in sync with the "x_read" phase.  IOhannes {  } IOhannes  if the input signal's reference count is zero, we have
	       to free it here because we didn't in ugen_doit().  no reblocking; in this case our output signal is "borrowed"
	    and merely needs to be pointed to the real one. static void *vinlet_newsig(void) this should be though over: 
     * it might prove hard to provide consistency between labeled up- & downsampling methods
     * maybe indeces would be better...
     *
     * up till now we provide several upsampling methods and 1 single downsampling method (no filtering !)
      up: sample and hold  up: linear interpolation  up: zero-padding  ------------------------- voutlet --------------------------  signal buffer; zero if not a signal  next to read out of buffer in epilog code  next to write in to buffer  hopsize  vice versa from the inlet, if we don't block, this holds the
	parent's outlet signal, valid between the prolog and the dsp setup
	routines.   and here's a flag indicating that we aren't blocked but have to
	do a copy (because we're switched).  IOhannes  ------------------------- signal outlet --------------------------  LATER optimize for non-overlapped case where the "+=" isn't needed  epilog code for blocking: write buffer to parent patch  IOhannes  IOhannes  IOhannes {     t_float *dummy = (t_float *)(w[2]); IOhannes  } IOhannes  prolog for outlets -- store pointer to the outlet on the
	parent, which, if "reblock" is false, will want to refer
	back to whatever we see on our input during the "dsp" method
	called later.   IOhannes  IOhannes  if we're just going to make the signal available on the
	    parent patch, hand it off to the parent signal.  this is done elsewhere--> sp[0]->s_refcount++;  set up epilog DSP code.  If we're reblocking, this is the
	time to copy the samples out to the containing object's outlets.
	If we aren't reblocking, there's nothing to do here.   IOhannes  this shouldn't be necesssary...  IOhannes  IOhannes 	bigperiod = (downsample * myvecsize)/(upsample * parentvecsize); /* IOhannes */ IOhannes 	bufsize = parentvecsize * upsample; /* IOhannes */ IOhannes  IOhannes: {  } IOhannes  post("phase %d, block %d, parent %d", phase & 63,
    	    parentvecsize * blockphase, parentvecsize * epilogphase);  set epilog pointer and schedule it  IOhannes {  } IOhannes  if we aren't blocked but we are switched, the epilog code just
	copies zeros to the output.  In this case the blocking code actually
	jumps over the epilog if the block is running.  this should be though over: 
     * it might prove hard to provide consistency between labeled up- & downsampling methods
     * maybe indeces would be better...
     *
     * up till now we provide several upsampling methods and 1 single downsampling method (no filtering !)
      up: sample and hold  up: linear interpolation  up: linear interpolation  up: zero-padding; down: ignore samples inbetween  ---------------------------- overall setup -----------------------------  Copyright (c) 1997-1999 Miller Puckette.
* For information on usage and redistribution, and for a DISCLAIMER OF ALL
* WARRANTIES, see the file, "LICENSE.txt," in this distribution.   graphical inlets and outlets, both for control and signals.   This code is highly inefficient; messages actually have to be forwarded
by inlets and outlets.  The outlet is in even worse shape than the inlet;
in order to avoid having a "signal" method in the class, the oulet actually
sprouts an inlet, which forwards the message to the "outlet" object, which
sends it on to the outlet proper.  Another way to do it would be to have
separate classes for "signal" and "control" outlets, but this would complicate
life elsewhere.  hacked to run subpatches with different samplerates
 *
 * mfg.gfd.uil
 * IOhannes
 *
 * edited lines are marked with "IOhannes"
 *
  ------------------------- vinlet --------------------------  signal buffer; zero if not a signal  if not reblocking, the next slot communicates the parent's inlet
     signal from the prolog to the DSP routine:  IOhannes  ------------------------- signal inlet --------------------------  no buffer means we're not a signal inlet  prolog code: loads buffer from parent patch  set up prolog DSP code   IOhannes  if the "reblock" flag is set, arrange to copy data in from the
	parent.  resampled parentvectorsize: IOhannes  this should never happen:  the prolog code counts from 0 to period-1; the
    	    phase is backed up by one so that AFTER the prolog code
    	    runs, the "x_fill" phase is in sync with the "x_read" phase.  IOhannes {  } IOhannes  if the input signal's reference count is zero, we have
	       to free it here because we didn't in ugen_doit().  no reblocking; in this case our output signal is "borrowed"
	    and merely needs to be pointed to the real one. static void *vinlet_newsig(void) this should be though over: 
     * it might prove hard to provide consistency between labeled up- & downsampling methods
     * maybe indeces would be better...
     *
     * up till now we provide several upsampling methods and 1 single downsampling method (no filtering !)
      up: sample and hold  up: linear interpolation  up: zero-padding  ------------------------- voutlet --------------------------  signal buffer; zero if not a signal  next to read out of buffer in epilog code  next to write in to buffer  hopsize  vice versa from the inlet, if we don't block, this holds the
	parent's outlet signal, valid between the prolog and the dsp setup
	routines.   and here's a flag indicating that we aren't blocked but have to
	do a copy (because we're switched).  IOhannes  ------------------------- signal outlet --------------------------  LATER optimize for non-overlapped case where the "+=" isn't needed  epilog code for blocking: write buffer to parent patch  IOhannes  IOhannes  IOhannes {     t_float *dummy = (t_float *)(w[2]); IOhannes  } IOhannes  prolog for outlets -- store pointer to the outlet on the
	parent, which, if "reblock" is false, will want to refer
	back to whatever we see on our input during the "dsp" method
	called later.   IOhannes  IOhannes  if we're just going to make the signal available on the
	    parent patch, hand it off to the parent signal.  this is done elsewhere--> sp[0]->s_refcount++;  set up epilog DSP code.  If we're reblocking, this is the
	time to copy the samples out to the containing object's outlets.
	If we aren't reblocking, there's nothing to do here.   IOhannes  this shouldn't be necesssary...  IOhannes  IOhannes 	bigperiod = (downsample * myvecsize)/(upsample * parentvecsize); /* IOhannes */ IOhannes 	bufsize = parentvecsize * upsample; /* IOhannes */ IOhannes  IOhannes: {  } IOhannes  post("phase %d, block %d, parent %d", phase & 63,
    	    parentvecsize * blockphase, parentvecsize * epilogphase);  set epilog pointer and schedule it  IOhannes {  } IOhannes  if we aren't blocked but we are switched, the epilog code just
	copies zeros to the output.  In this case the blocking code actually
	jumps over the epilog if the block is running.  this should be though over: 
     * it might prove hard to provide consistency between labeled up- & downsampling methods
     * maybe indeces would be better...
     *
     * up till now we provide several upsampling methods and 1 single downsampling method (no filtering !)
      up: sample and hold  up: linear interpolation  up: linear interpolation  up: zero-padding; down: ignore samples inbetween  ---------------------------- overall setup ----------------------------- 