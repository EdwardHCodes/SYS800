
  SDL_image:  An example image loading library for use with SDL
  Copyright (C) 1997-2012 Sam Lantinga <slouken@libsdl.org>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
 This is a JPEG image file loading framework  MinGW version of jpeg-8.x renamed TRUE to JPEG_TRUE etc.  Define this for fast loading and not as good image quality #define FAST_JPEG Define this for quicker (but less perfect) JPEG identification  LOAD_JPG_DYNAMIC  See if an image is contained in a data source  This detection code is by Steaphan Greene <stea@cs.binghamton.edu>  Blame me, not Sam, if this doesn't work right.  And don't forget to report the problem to the the sdl list too!  Extra padding in JPEG (legal)  or this is data and we are scanning  Got to end of good JPEG  This is an encoded 0xFF within the data  These have nothing else  Yes, it's big-endian  Now comes the actual JPEG meat  Ok, I'm convinced.  It is a JPEG.  I'm not convinced.  Prove it! 
 * Initialize source --- called by jpeg_read_header
 * before any data is actually read.
  We don't actually need to do anything 
 * Fill the input buffer --- called whenever buffer is emptied.
  Insert a fake EOI marker 
 * Skip data --- used to skip over a potentially large amount of
 * uninteresting data (such as an APPn marker).
 *
 * Writers of suspendable-input applications must note that skip_input_data
 * is not granted the right to give a suspension return.  If the skip extends
 * beyond the data currently in the buffer, the buffer can be marked empty so
 * that the next read will cause a fill_input_buffer call that can suspend.
 * Arranging for additional bytes to be discarded before reloading the input
 * buffer is the application writer's problem.
  Just a dumb implementation for now.	Could use fseek() except
	 * it doesn't work on pipes.  Not clear that being smart is worth
	 * any trouble anyway --- large skips are infrequent.
	  note we assume that fill_input_buffer will never
			 * return FALSE, so suspension need not be handled.
			 
 * Terminate source --- called by jpeg_finish_decompress
 * after all data has been read.
  We don't actually need to do anything 
 * Prepare for input from a stdio stream.
 * The caller must have already opened the stream, and is responsible
 * for closing it after finishing decompression.
  The source object and input buffer are made permanent so that a series
   * of JPEG images can be read from the same file by calling jpeg_stdio_src
   * only before the first one.  (If we discarded the buffer at the end of
   * one image, we'd likely lose the start of the next one.)
   * This makes it unsafe to use this manager and a different source
   * manager serially with the same JPEG object.  Caveat programmer.
    first time for this JPEG object?  use default method  forces fill_input_buffer on first read  until buffer loaded  do nothing  Load a JPEG type image from an SDL datasource  The error message has been set in SDL_RWFromFile  Create a decompression structure and load the JPEG header  If we get here, libjpeg found an error  Set 32-bit Raw output  Allocate an output surface to hold the image  Set 24-bit RGB output  Allocate an output surface to hold the image  Decompress the image  See if an image is contained in a data source  Load a JPEG type image from an SDL datasource  LOAD_JPG  !defined(__APPLE__) || defined(SDL_IMAGE_USE_COMMON_BACKEND) 
  SDL_image:  An example image loading library for use with SDL
  Copyright (C) 1997-2012 Sam Lantinga <slouken@libsdl.org>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
 This is a JPEG image file loading framework  MinGW version of jpeg-8.x renamed TRUE to JPEG_TRUE etc.  Define this for fast loading and not as good image quality #define FAST_JPEG Define this for quicker (but less perfect) JPEG identification  LOAD_JPG_DYNAMIC  See if an image is contained in a data source  This detection code is by Steaphan Greene <stea@cs.binghamton.edu>  Blame me, not Sam, if this doesn't work right.  And don't forget to report the problem to the the sdl list too!  Extra padding in JPEG (legal)  or this is data and we are scanning  Got to end of good JPEG  This is an encoded 0xFF within the data  These have nothing else  Yes, it's big-endian  Now comes the actual JPEG meat  Ok, I'm convinced.  It is a JPEG.  I'm not convinced.  Prove it! 
 * Initialize source --- called by jpeg_read_header
 * before any data is actually read.
  We don't actually need to do anything 
 * Fill the input buffer --- called whenever buffer is emptied.
  Insert a fake EOI marker 
 * Skip data --- used to skip over a potentially large amount of
 * uninteresting data (such as an APPn marker).
 *
 * Writers of suspendable-input applications must note that skip_input_data
 * is not granted the right to give a suspension return.  If the skip extends
 * beyond the data currently in the buffer, the buffer can be marked empty so
 * that the next read will cause a fill_input_buffer call that can suspend.
 * Arranging for additional bytes to be discarded before reloading the input
 * buffer is the application writer's problem.
  Just a dumb implementation for now.	Could use fseek() except
	 * it doesn't work on pipes.  Not clear that being smart is worth
	 * any trouble anyway --- large skips are infrequent.
	  note we assume that fill_input_buffer will never
			 * return FALSE, so suspension need not be handled.
			 
 * Terminate source --- called by jpeg_finish_decompress
 * after all data has been read.
  We don't actually need to do anything 
 * Prepare for input from a stdio stream.
 * The caller must have already opened the stream, and is responsible
 * for closing it after finishing decompression.
  The source object and input buffer are made permanent so that a series
   * of JPEG images can be read from the same file by calling jpeg_stdio_src
   * only before the first one.  (If we discarded the buffer at the end of
   * one image, we'd likely lose the start of the next one.)
   * This makes it unsafe to use this manager and a different source
   * manager serially with the same JPEG object.  Caveat programmer.
    first time for this JPEG object?  use default method  forces fill_input_buffer on first read  until buffer loaded  do nothing  Load a JPEG type image from an SDL datasource  The error message has been set in SDL_RWFromFile  Create a decompression structure and load the JPEG header  If we get here, libjpeg found an error  Set 32-bit Raw output  Allocate an output surface to hold the image  Set 24-bit RGB output  Allocate an output surface to hold the image  Decompress the image  See if an image is contained in a data source  Load a JPEG type image from an SDL datasource  LOAD_JPG  !defined(__APPLE__) || defined(SDL_IMAGE_USE_COMMON_BACKEND) 
  SDL_image:  An example image loading library for use with SDL
  Copyright (C) 1997-2012 Sam Lantinga <slouken@libsdl.org>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
 This is a JPEG image file loading framework  MinGW version of jpeg-8.x renamed TRUE to JPEG_TRUE etc.  Define this for fast loading and not as good image quality #define FAST_JPEG Define this for quicker (but less perfect) JPEG identification  LOAD_JPG_DYNAMIC  See if an image is contained in a data source  This detection code is by Steaphan Greene <stea@cs.binghamton.edu>  Blame me, not Sam, if this doesn't work right.  And don't forget to report the problem to the the sdl list too!  Extra padding in JPEG (legal)  or this is data and we are scanning  Got to end of good JPEG  This is an encoded 0xFF within the data  These have nothing else  Yes, it's big-endian  Now comes the actual JPEG meat  Ok, I'm convinced.  It is a JPEG.  I'm not convinced.  Prove it! 
 * Initialize source --- called by jpeg_read_header
 * before any data is actually read.
  We don't actually need to do anything 
 * Fill the input buffer --- called whenever buffer is emptied.
  Insert a fake EOI marker 
 * Skip data --- used to skip over a potentially large amount of
 * uninteresting data (such as an APPn marker).
 *
 * Writers of suspendable-input applications must note that skip_input_data
 * is not granted the right to give a suspension return.  If the skip extends
 * beyond the data currently in the buffer, the buffer can be marked empty so
 * that the next read will cause a fill_input_buffer call that can suspend.
 * Arranging for additional bytes to be discarded before reloading the input
 * buffer is the application writer's problem.
  Just a dumb implementation for now.	Could use fseek() except
	 * it doesn't work on pipes.  Not clear that being smart is worth
	 * any trouble anyway --- large skips are infrequent.
	  note we assume that fill_input_buffer will never
			 * return FALSE, so suspension need not be handled.
			 
 * Terminate source --- called by jpeg_finish_decompress
 * after all data has been read.
  We don't actually need to do anything 
 * Prepare for input from a stdio stream.
 * The caller must have already opened the stream, and is responsible
 * for closing it after finishing decompression.
  The source object and input buffer are made permanent so that a series
   * of JPEG images can be read from the same file by calling jpeg_stdio_src
   * only before the first one.  (If we discarded the buffer at the end of
   * one image, we'd likely lose the start of the next one.)
   * This makes it unsafe to use this manager and a different source
   * manager serially with the same JPEG object.  Caveat programmer.
    first time for this JPEG object?  use default method  forces fill_input_buffer on first read  until buffer loaded  do nothing  Load a JPEG type image from an SDL datasource  The error message has been set in SDL_RWFromFile  Create a decompression structure and load the JPEG header  If we get here, libjpeg found an error  Set 32-bit Raw output  Allocate an output surface to hold the image  Set 24-bit RGB output  Allocate an output surface to hold the image  Decompress the image  See if an image is contained in a data source  Load a JPEG type image from an SDL datasource  LOAD_JPG  !defined(__APPLE__) || defined(SDL_IMAGE_USE_COMMON_BACKEND) 