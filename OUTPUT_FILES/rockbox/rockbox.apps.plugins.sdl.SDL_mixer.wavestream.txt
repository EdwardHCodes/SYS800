
  SDL_mixer:  An audio mixer library based on the SDL library
  Copyright (C) 1997-2012 Sam Lantinga <slouken@libsdl.org>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
 $Id$  This file supports streaming WAV files, without volume adjustment 
    Taken with permission from SDL_wave.h, part of the SDL library,
    available at: http://www.libsdl.org/
    and placed under the same license as this mixer library.
 WAVE files are little-endian ***************************************** Define values for Microsoft WAVE format ***************************************** "RIFF"  "WAVE"  "fact"  "LIST"  "fmt "  "data"  Normally, these three chunks come consecutively in a WAVE file  Not saved in the chunk we read:
	Uint32	FMTchunk;
	Uint32	fmtlen;
 1 = mono, 2 = stereo  One of 11025, 22050, or 44100 Hz  Average bytes per second  Bytes per sample block  One of 8, 12, 16, or 4 for ADPCM  The general chunk found in the WAVE file  Data includes magic and length ******************************************* Define values for AIFF (IFF audio) format ******************************************* "FORM"  "AIFF"  "SSND"  "COMM"  Currently we only support a single stream at a time  This is the format of the audio mixer data  Function to load the WAV/AIFF stream  Initialize the WAVStream player, with the given mixer settings
   This function returns 0, or -1 if there was an error.
  Load a WAV stream from the given RWops object  Start playback of a given WAV stream  Play some of a stream previously started with WAVStream_Start()  At least at the time of writing, SDL_ConvertAudio()
			   does byte-order swapping starting at the end of the
			   buffer. Thus, if we are reading 16-bit samples, we
			   had better make damn sure that we get an even
			   number of bytes, or we'll get garbage.
			  Stop playback of a stream previously started with WAVStream_Start()  Close the given WAV stream  Clean up associated data  Return non-zero if a stream is currently playing  WAV magic header 	Uint32 wavelen; FMT chunk  Check the magic header 	wavelen		= SDL_ReadLE32(src); Read the audio data format chunk  FIXME! Add this logic to SDL_LoadWAV_RW()  Decode the audio data format  We can understand this  Good default buffer size  Set the file offset to the DATA chunk data  I couldn't get SANE_to_double() to work, so I stole this from libsndfile.
 * I don't pretend to fully understand it.
  Negative number?  Less than 1?  Way too big?  Still too big?  AIFF magic header  SSND chunk        	Uint32 blocksize; COMM format chunk  Check the magic header  From what I understand of the specification, chunks may appear in
         * any order, and we should just ignore unknown ones.
	 *
	 * TODO: Better sanity-checking. E.g. what happens if the AIFF file
	 *       contains compressed sound data?
          Paranoia to avoid infinite loops 		    blocksize		= SDL_ReadBE32(src); Read the audio data format chunk  Decode the audio data format  Good default buffer size 
  SDL_mixer:  An audio mixer library based on the SDL library
  Copyright (C) 1997-2012 Sam Lantinga <slouken@libsdl.org>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
 $Id$  This file supports streaming WAV files, without volume adjustment 
    Taken with permission from SDL_wave.h, part of the SDL library,
    available at: http://www.libsdl.org/
    and placed under the same license as this mixer library.
 WAVE files are little-endian ***************************************** Define values for Microsoft WAVE format ***************************************** "RIFF"  "WAVE"  "fact"  "LIST"  "fmt "  "data"  Normally, these three chunks come consecutively in a WAVE file  Not saved in the chunk we read:
	Uint32	FMTchunk;
	Uint32	fmtlen;
 1 = mono, 2 = stereo  One of 11025, 22050, or 44100 Hz  Average bytes per second  Bytes per sample block  One of 8, 12, 16, or 4 for ADPCM  The general chunk found in the WAVE file  Data includes magic and length ******************************************* Define values for AIFF (IFF audio) format ******************************************* "FORM"  "AIFF"  "SSND"  "COMM"  Currently we only support a single stream at a time  This is the format of the audio mixer data  Function to load the WAV/AIFF stream  Initialize the WAVStream player, with the given mixer settings
   This function returns 0, or -1 if there was an error.
  Load a WAV stream from the given RWops object  Start playback of a given WAV stream  Play some of a stream previously started with WAVStream_Start()  At least at the time of writing, SDL_ConvertAudio()
			   does byte-order swapping starting at the end of the
			   buffer. Thus, if we are reading 16-bit samples, we
			   had better make damn sure that we get an even
			   number of bytes, or we'll get garbage.
			  Stop playback of a stream previously started with WAVStream_Start()  Close the given WAV stream  Clean up associated data  Return non-zero if a stream is currently playing  WAV magic header 	Uint32 wavelen; FMT chunk  Check the magic header 	wavelen		= SDL_ReadLE32(src); Read the audio data format chunk  FIXME! Add this logic to SDL_LoadWAV_RW()  Decode the audio data format  We can understand this  Good default buffer size  Set the file offset to the DATA chunk data  I couldn't get SANE_to_double() to work, so I stole this from libsndfile.
 * I don't pretend to fully understand it.
  Negative number?  Less than 1?  Way too big?  Still too big?  AIFF magic header  SSND chunk        	Uint32 blocksize; COMM format chunk  Check the magic header  From what I understand of the specification, chunks may appear in
         * any order, and we should just ignore unknown ones.
	 *
	 * TODO: Better sanity-checking. E.g. what happens if the AIFF file
	 *       contains compressed sound data?
          Paranoia to avoid infinite loops 		    blocksize		= SDL_ReadBE32(src); Read the audio data format chunk  Decode the audio data format  Good default buffer size 
  SDL_mixer:  An audio mixer library based on the SDL library
  Copyright (C) 1997-2012 Sam Lantinga <slouken@libsdl.org>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
 $Id$  This file supports streaming WAV files, without volume adjustment 
    Taken with permission from SDL_wave.h, part of the SDL library,
    available at: http://www.libsdl.org/
    and placed under the same license as this mixer library.
 WAVE files are little-endian ***************************************** Define values for Microsoft WAVE format ***************************************** "RIFF"  "WAVE"  "fact"  "LIST"  "fmt "  "data"  Normally, these three chunks come consecutively in a WAVE file  Not saved in the chunk we read:
	Uint32	FMTchunk;
	Uint32	fmtlen;
 1 = mono, 2 = stereo  One of 11025, 22050, or 44100 Hz  Average bytes per second  Bytes per sample block  One of 8, 12, 16, or 4 for ADPCM  The general chunk found in the WAVE file  Data includes magic and length ******************************************* Define values for AIFF (IFF audio) format ******************************************* "FORM"  "AIFF"  "SSND"  "COMM"  Currently we only support a single stream at a time  This is the format of the audio mixer data  Function to load the WAV/AIFF stream  Initialize the WAVStream player, with the given mixer settings
   This function returns 0, or -1 if there was an error.
  Load a WAV stream from the given RWops object  Start playback of a given WAV stream  Play some of a stream previously started with WAVStream_Start()  At least at the time of writing, SDL_ConvertAudio()
			   does byte-order swapping starting at the end of the
			   buffer. Thus, if we are reading 16-bit samples, we
			   had better make damn sure that we get an even
			   number of bytes, or we'll get garbage.
			  Stop playback of a stream previously started with WAVStream_Start()  Close the given WAV stream  Clean up associated data  Return non-zero if a stream is currently playing  WAV magic header 	Uint32 wavelen; FMT chunk  Check the magic header 	wavelen		= SDL_ReadLE32(src); Read the audio data format chunk  FIXME! Add this logic to SDL_LoadWAV_RW()  Decode the audio data format  We can understand this  Good default buffer size  Set the file offset to the DATA chunk data  I couldn't get SANE_to_double() to work, so I stole this from libsndfile.
 * I don't pretend to fully understand it.
  Negative number?  Less than 1?  Way too big?  Still too big?  AIFF magic header  SSND chunk        	Uint32 blocksize; COMM format chunk  Check the magic header  From what I understand of the specification, chunks may appear in
         * any order, and we should just ignore unknown ones.
	 *
	 * TODO: Better sanity-checking. E.g. what happens if the AIFF file
	 *       contains compressed sound data?
          Paranoia to avoid infinite loops 		    blocksize		= SDL_ReadBE32(src); Read the audio data format chunk  Decode the audio data format  Good default buffer size 