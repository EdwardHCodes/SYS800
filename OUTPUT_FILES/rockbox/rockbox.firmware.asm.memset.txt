
FUNCTION
        <<memset>>---set an area of memory

INDEX
        memset

ANSI_SYNOPSIS
        #include <string.h>
        void *memset(const void *<[dst]>, int <[c]>, size_t <[length]>);

TRAD_SYNOPSIS
        #include <string.h>
        void *memset(<[dst]>, <[c]>, <[length]>)
        void *<[dst]>;
        int <[c]>;
        size_t <[length]>;

DESCRIPTION
        This function converts the argument <[c]> into an unsigned
        char and fills the first <[length]> characters of the array
        pointed to by <[dst]> to the value.

RETURNS
        <<memset>> returns the value of <[m]>.

PORTABILITY
<<memset>> is ANSI C.

    <<memset>> requires no supporting OS subroutines.

QUICKREF
        memset ansi pure
 If we get this far, we know that n is large and m is word-aligned.  Store C into each char sized location in BUFFER so that
         we can set large blocks quickly.   Pick up the remainder with a bytewise loop.   not PREFER_SIZE_OVER_SPEED 
FUNCTION
        <<memset>>---set an area of memory

INDEX
        memset

ANSI_SYNOPSIS
        #include <string.h>
        void *memset(const void *<[dst]>, int <[c]>, size_t <[length]>);

TRAD_SYNOPSIS
        #include <string.h>
        void *memset(<[dst]>, <[c]>, <[length]>)
        void *<[dst]>;
        int <[c]>;
        size_t <[length]>;

DESCRIPTION
        This function converts the argument <[c]> into an unsigned
        char and fills the first <[length]> characters of the array
        pointed to by <[dst]> to the value.

RETURNS
        <<memset>> returns the value of <[m]>.

PORTABILITY
<<memset>> is ANSI C.

    <<memset>> requires no supporting OS subroutines.

QUICKREF
        memset ansi pure
 If we get this far, we know that n is large and m is word-aligned.  Store C into each char sized location in BUFFER so that
         we can set large blocks quickly.   Pick up the remainder with a bytewise loop.   not PREFER_SIZE_OVER_SPEED 
FUNCTION
        <<memset>>---set an area of memory

INDEX
        memset

ANSI_SYNOPSIS
        #include <string.h>
        void *memset(const void *<[dst]>, int <[c]>, size_t <[length]>);

TRAD_SYNOPSIS
        #include <string.h>
        void *memset(<[dst]>, <[c]>, <[length]>)
        void *<[dst]>;
        int <[c]>;
        size_t <[length]>;

DESCRIPTION
        This function converts the argument <[c]> into an unsigned
        char and fills the first <[length]> characters of the array
        pointed to by <[dst]> to the value.

RETURNS
        <<memset>> returns the value of <[m]>.

PORTABILITY
<<memset>> is ANSI C.

    <<memset>> requires no supporting OS subroutines.

QUICKREF
        memset ansi pure
 If we get this far, we know that n is large and m is word-aligned.  Store C into each char sized location in BUFFER so that
         we can set large blocks quickly.   Pick up the remainder with a bytewise loop.   not PREFER_SIZE_OVER_SPEED 