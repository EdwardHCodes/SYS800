**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 by Cástor Muñoz
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * UC870x: UART controller for s5l870x
  Rx related masks  CONFIG_CPU == S5L8702  Initialization  set port registers to default reset values  clear all interrupts  disable Tx/Rx and mask all interrupts  clear all interrupts  configure registers  activate nRTS (low level)  init and register port struct  enable interrupts if (port->utrstat_int_mask) Configuration  set bitrate using precalculated values  calculate values to set real bitrate as close as possible to the
   requested speed  Real baud width in UCLK/16 ticks: trunc(UCLK/(16*speed) + 0.5)  Fine adjust:
     *
     * Along the whole frame, insert/remove "jittered" bauds when needed
     * to minimize frame lenght accumulated error.
     *
     * jitter_width: "jittered" bauds are 1/16 wider/narrower than normal
     * bauds, so step is 1/16 of real baud width = brdiv (in UCLK ticks)
     *
     * baud_err_width: it is the difference between theoric width and real
     * width = CLK/speed - brdiv*16 (in UCLK ticks)
     *
     * Previous widths are scaled by 'speed' factor to simplify operations
     * and preserve precision using integer operations.
      adjust to the nearest width  CONFIG_CPU == S5L8702  Select Tx/Rx modes: disabling Tx/Rx resets HW, including
   FIFOs and shift registers  Transmit  wait for transmit buffer empty  Receive  test receive buffer data ready  Autobauding  There is no known way to stop the HW once COUNTING is
         * in progress.
         * If we disable AUTOBR_START_BIT now, COUNTING is not
         * aborted, instead the HW will launch interrupts for
         * every new rising edge detected while AUTOBR_START_BIT
         * remains disabled.
         * If AUTOBR_START_BIT is enabled, the HW will stop by
         * itself when a rising edge is detected.
         * So, do not disable AUTOBR_START_BIT and wait for the
         * next rising edge.
          CONFIG_CPU != S5L8700  ISR  filter registered interrupts  clear interrupts, events ocurring while processing
       this ISR will be processed in the next call  try to fix abnormal situations  CONFIG_CPU != S5L8700  get FIFO count  must read error status first, then data  'len' might be zero due to RX_TOUT interrupts are
         * raised by the hardware even when RX FIFO is empty.
         * When overrun, it is marked on the first error:
         * overrun = len ? (rx_err[0] & UERSTAT_OVERRUN_BIT) : 0
          'abr_cnt' is zero when no ABR interrupt exists  not used and not tested #define LOGF_ENABLE in UCLK clock ticks  calculate resulting speed for every frame len  speed = truncate((UCLK / (real_frame_width / NBITS)) + 0.5)
           XXX: overflows for big UCLK  average of the speed for all frame lengths  CONFIG_CPU == S5L8702  speed = truncate(UCLK/(16*brdiv) + 0.5)  Autobauding  waiting for rising edge  waiting for falling edge  CONFIG_CPU != S5L8700  UC870X_DEBUG **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 by Cástor Muñoz
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * UC870x: UART controller for s5l870x
  Rx related masks  CONFIG_CPU == S5L8702  Initialization  set port registers to default reset values  clear all interrupts  disable Tx/Rx and mask all interrupts  clear all interrupts  configure registers  activate nRTS (low level)  init and register port struct  enable interrupts if (port->utrstat_int_mask) Configuration  set bitrate using precalculated values  calculate values to set real bitrate as close as possible to the
   requested speed  Real baud width in UCLK/16 ticks: trunc(UCLK/(16*speed) + 0.5)  Fine adjust:
     *
     * Along the whole frame, insert/remove "jittered" bauds when needed
     * to minimize frame lenght accumulated error.
     *
     * jitter_width: "jittered" bauds are 1/16 wider/narrower than normal
     * bauds, so step is 1/16 of real baud width = brdiv (in UCLK ticks)
     *
     * baud_err_width: it is the difference between theoric width and real
     * width = CLK/speed - brdiv*16 (in UCLK ticks)
     *
     * Previous widths are scaled by 'speed' factor to simplify operations
     * and preserve precision using integer operations.
      adjust to the nearest width  CONFIG_CPU == S5L8702  Select Tx/Rx modes: disabling Tx/Rx resets HW, including
   FIFOs and shift registers  Transmit  wait for transmit buffer empty  Receive  test receive buffer data ready  Autobauding  There is no known way to stop the HW once COUNTING is
         * in progress.
         * If we disable AUTOBR_START_BIT now, COUNTING is not
         * aborted, instead the HW will launch interrupts for
         * every new rising edge detected while AUTOBR_START_BIT
         * remains disabled.
         * If AUTOBR_START_BIT is enabled, the HW will stop by
         * itself when a rising edge is detected.
         * So, do not disable AUTOBR_START_BIT and wait for the
         * next rising edge.
          CONFIG_CPU != S5L8700  ISR  filter registered interrupts  clear interrupts, events ocurring while processing
       this ISR will be processed in the next call  try to fix abnormal situations  CONFIG_CPU != S5L8700  get FIFO count  must read error status first, then data  'len' might be zero due to RX_TOUT interrupts are
         * raised by the hardware even when RX FIFO is empty.
         * When overrun, it is marked on the first error:
         * overrun = len ? (rx_err[0] & UERSTAT_OVERRUN_BIT) : 0
          'abr_cnt' is zero when no ABR interrupt exists  not used and not tested #define LOGF_ENABLE in UCLK clock ticks  calculate resulting speed for every frame len  speed = truncate((UCLK / (real_frame_width / NBITS)) + 0.5)
           XXX: overflows for big UCLK  average of the speed for all frame lengths  CONFIG_CPU == S5L8702  speed = truncate(UCLK/(16*brdiv) + 0.5)  Autobauding  waiting for rising edge  waiting for falling edge  CONFIG_CPU != S5L8700  UC870X_DEBUG **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 by Cástor Muñoz
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * UC870x: UART controller for s5l870x
  Rx related masks  CONFIG_CPU == S5L8702  Initialization  set port registers to default reset values  clear all interrupts  disable Tx/Rx and mask all interrupts  clear all interrupts  configure registers  activate nRTS (low level)  init and register port struct  enable interrupts if (port->utrstat_int_mask) Configuration  set bitrate using precalculated values  calculate values to set real bitrate as close as possible to the
   requested speed  Real baud width in UCLK/16 ticks: trunc(UCLK/(16*speed) + 0.5)  Fine adjust:
     *
     * Along the whole frame, insert/remove "jittered" bauds when needed
     * to minimize frame lenght accumulated error.
     *
     * jitter_width: "jittered" bauds are 1/16 wider/narrower than normal
     * bauds, so step is 1/16 of real baud width = brdiv (in UCLK ticks)
     *
     * baud_err_width: it is the difference between theoric width and real
     * width = CLK/speed - brdiv*16 (in UCLK ticks)
     *
     * Previous widths are scaled by 'speed' factor to simplify operations
     * and preserve precision using integer operations.
      adjust to the nearest width  CONFIG_CPU == S5L8702  Select Tx/Rx modes: disabling Tx/Rx resets HW, including
   FIFOs and shift registers  Transmit  wait for transmit buffer empty  Receive  test receive buffer data ready  Autobauding  There is no known way to stop the HW once COUNTING is
         * in progress.
         * If we disable AUTOBR_START_BIT now, COUNTING is not
         * aborted, instead the HW will launch interrupts for
         * every new rising edge detected while AUTOBR_START_BIT
         * remains disabled.
         * If AUTOBR_START_BIT is enabled, the HW will stop by
         * itself when a rising edge is detected.
         * So, do not disable AUTOBR_START_BIT and wait for the
         * next rising edge.
          CONFIG_CPU != S5L8700  ISR  filter registered interrupts  clear interrupts, events ocurring while processing
       this ISR will be processed in the next call  try to fix abnormal situations  CONFIG_CPU != S5L8700  get FIFO count  must read error status first, then data  'len' might be zero due to RX_TOUT interrupts are
         * raised by the hardware even when RX FIFO is empty.
         * When overrun, it is marked on the first error:
         * overrun = len ? (rx_err[0] & UERSTAT_OVERRUN_BIT) : 0
          'abr_cnt' is zero when no ABR interrupt exists  not used and not tested #define LOGF_ENABLE in UCLK clock ticks  calculate resulting speed for every frame len  speed = truncate((UCLK / (real_frame_width / NBITS)) + 0.5)
           XXX: overflows for big UCLK  average of the speed for all frame lengths  CONFIG_CPU == S5L8702  speed = truncate(UCLK/(16*brdiv) + 0.5)  Autobauding  waiting for rising edge  waiting for falling edge  CONFIG_CPU != S5L8700  UC870X_DEBUG 