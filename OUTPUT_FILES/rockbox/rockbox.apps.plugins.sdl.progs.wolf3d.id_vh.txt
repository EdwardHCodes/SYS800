==========================================================================
=================
=
= VL_MungePic
=
=================
 copy the pic to a temp buffer munge it back into the original buffer proportional width
=============================================================================

				Double buffer management routines

=============================================================================

=============================================================================

						WOLFENSTEIN STUFF

=============================================================================

=====================
=
= LatchDrawPic
=
=====================
==========================================================================
===================
=
= LoadLatchMem
=
===================
 tile 8s pics==========================================================================
===================
=
= FizzleFade
=
= returns true if aborted
=
= It uses maximum-length Linear Feedback Shift Registers (LFSR) counters.
= You can find a list of them with lengths from 3 to 168 at:
= http://www.xilinx.com/support/documentation/application_notes/xapp052.pdf
= Many thanks to Xilinx for this list!!!
=
===================
 XOR masks for the pseudo-random number sequence starting with n=17 bits n    XNOR from (starting at 1, not 0 as usual) 17   17,14 18   18,11 19   19,6,2,1 20   20,17 21   21,19 22   22,21 23   23,18 24   24,23,22,17 25   25,22      (this is enough for 8191x4095) Returns the number of bits needed to represent the given value no problem, just a bit slower fizzle fade will not fill whole screen When using double buffering, we have to copy the pixels of the last AND the current frame. Only for the first frame, there is no "last frame" seperate random value into x/y pair advance to next random element entire sequence has been completed copy one pixel entire sequence has been completed If there is no double buffering, we always use the "first frame" case don't go too fast==========================================================================
=================
=
= VL_MungePic
=
=================
 copy the pic to a temp buffer munge it back into the original buffer proportional width
=============================================================================

				Double buffer management routines

=============================================================================

=============================================================================

						WOLFENSTEIN STUFF

=============================================================================

=====================
=
= LatchDrawPic
=
=====================
==========================================================================
===================
=
= LoadLatchMem
=
===================
 tile 8s pics==========================================================================
===================
=
= FizzleFade
=
= returns true if aborted
=
= It uses maximum-length Linear Feedback Shift Registers (LFSR) counters.
= You can find a list of them with lengths from 3 to 168 at:
= http://www.xilinx.com/support/documentation/application_notes/xapp052.pdf
= Many thanks to Xilinx for this list!!!
=
===================
 XOR masks for the pseudo-random number sequence starting with n=17 bits n    XNOR from (starting at 1, not 0 as usual) 17   17,14 18   18,11 19   19,6,2,1 20   20,17 21   21,19 22   22,21 23   23,18 24   24,23,22,17 25   25,22      (this is enough for 8191x4095) Returns the number of bits needed to represent the given value no problem, just a bit slower fizzle fade will not fill whole screen When using double buffering, we have to copy the pixels of the last AND the current frame. Only for the first frame, there is no "last frame" seperate random value into x/y pair advance to next random element entire sequence has been completed copy one pixel entire sequence has been completed If there is no double buffering, we always use the "first frame" case don't go too fast==========================================================================
=================
=
= VL_MungePic
=
=================
 copy the pic to a temp buffer munge it back into the original buffer proportional width
=============================================================================

				Double buffer management routines

=============================================================================

=============================================================================

						WOLFENSTEIN STUFF

=============================================================================

=====================
=
= LatchDrawPic
=
=====================
==========================================================================
===================
=
= LoadLatchMem
=
===================
 tile 8s pics==========================================================================
===================
=
= FizzleFade
=
= returns true if aborted
=
= It uses maximum-length Linear Feedback Shift Registers (LFSR) counters.
= You can find a list of them with lengths from 3 to 168 at:
= http://www.xilinx.com/support/documentation/application_notes/xapp052.pdf
= Many thanks to Xilinx for this list!!!
=
===================
 XOR masks for the pseudo-random number sequence starting with n=17 bits n    XNOR from (starting at 1, not 0 as usual) 17   17,14 18   18,11 19   19,6,2,1 20   20,17 21   21,19 22   22,21 23   23,18 24   24,23,22,17 25   25,22      (this is enough for 8191x4095) Returns the number of bits needed to represent the given value no problem, just a bit slower fizzle fade will not fill whole screen When using double buffering, we have to copy the pixels of the last AND the current frame. Only for the first frame, there is no "last frame" seperate random value into x/y pair advance to next random element entire sequence has been completed copy one pixel entire sequence has been completed If there is no double buffering, we always use the "first frame" case don't go too fast