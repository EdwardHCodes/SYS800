
  native_midi:  Hardware Midi support for the SDL_mixer library
  Copyright (C) 2000,2001  Florian 'Proff' Schulze <florian.proff.schulze@gmx.net>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
 The maximum number of midi tracks that we can handle 
#define MIDI_TRACKS 32  A single midi track as read from the midi file  MIDI message stream  length of the track data  A midi file, stripped down to the absolute minimum - divison & track data  number of pulses per quarter note (ppqn)  number of tracks  tracks  Some macros that help us stay endianess-independant  Get Variable Length Quantity  Create a single MIDIEvent  Convert a single midi track to a list of MIDIEvents  dummy event to make handling the list easier  End of data stream reached  Handle SysEx seperatly  End of data marker  Tempo change 
						a=track->data[currentPos];
						b=track->data[currentPos+1];
						c=track->data[currentPos+2];
						AddEvent(song, atime, MEVT_TEMPO, c, b, a);
						 Create an event and attach the extra data, if any  It's a status byte  Extract channel and status information  Read the next byte which should always be a data byte  Note on  Key Pressure  Control change  Pitch wheel  Program change  Channel pressure  Sysex already handled above  release the dummy head event 
 *  Convert a midi song, consisting of up to 32 tracks, to a list of MIDIEvents.
 *  To do so, first convert the tracks seperatly, then interweave the resulting
 *  MIDIEvent-Lists to one big list.
  dummy event to make handling the list easier  First, convert all tracks to MIDIEvent lists  Now, merge the lists.  TODO  Find the next event  Check if we processes all events  Make sure the list is properly terminated  release the dummy head event  Make sure this is really a MIDI file  Header size must be 6  We only support format 0 and 1, but not 2  Allocate tracks  Retrieve the PPQN value, needed for playback  We might want to verify this is MTrk...  Open the file  Read in the data 
  native_midi:  Hardware Midi support for the SDL_mixer library
  Copyright (C) 2000,2001  Florian 'Proff' Schulze <florian.proff.schulze@gmx.net>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
 The maximum number of midi tracks that we can handle 
#define MIDI_TRACKS 32  A single midi track as read from the midi file  MIDI message stream  length of the track data  A midi file, stripped down to the absolute minimum - divison & track data  number of pulses per quarter note (ppqn)  number of tracks  tracks  Some macros that help us stay endianess-independant  Get Variable Length Quantity  Create a single MIDIEvent  Convert a single midi track to a list of MIDIEvents  dummy event to make handling the list easier  End of data stream reached  Handle SysEx seperatly  End of data marker  Tempo change 
						a=track->data[currentPos];
						b=track->data[currentPos+1];
						c=track->data[currentPos+2];
						AddEvent(song, atime, MEVT_TEMPO, c, b, a);
						 Create an event and attach the extra data, if any  It's a status byte  Extract channel and status information  Read the next byte which should always be a data byte  Note on  Key Pressure  Control change  Pitch wheel  Program change  Channel pressure  Sysex already handled above  release the dummy head event 
 *  Convert a midi song, consisting of up to 32 tracks, to a list of MIDIEvents.
 *  To do so, first convert the tracks seperatly, then interweave the resulting
 *  MIDIEvent-Lists to one big list.
  dummy event to make handling the list easier  First, convert all tracks to MIDIEvent lists  Now, merge the lists.  TODO  Find the next event  Check if we processes all events  Make sure the list is properly terminated  release the dummy head event  Make sure this is really a MIDI file  Header size must be 6  We only support format 0 and 1, but not 2  Allocate tracks  Retrieve the PPQN value, needed for playback  We might want to verify this is MTrk...  Open the file  Read in the data 
  native_midi:  Hardware Midi support for the SDL_mixer library
  Copyright (C) 2000,2001  Florian 'Proff' Schulze <florian.proff.schulze@gmx.net>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
 The maximum number of midi tracks that we can handle 
#define MIDI_TRACKS 32  A single midi track as read from the midi file  MIDI message stream  length of the track data  A midi file, stripped down to the absolute minimum - divison & track data  number of pulses per quarter note (ppqn)  number of tracks  tracks  Some macros that help us stay endianess-independant  Get Variable Length Quantity  Create a single MIDIEvent  Convert a single midi track to a list of MIDIEvents  dummy event to make handling the list easier  End of data stream reached  Handle SysEx seperatly  End of data marker  Tempo change 
						a=track->data[currentPos];
						b=track->data[currentPos+1];
						c=track->data[currentPos+2];
						AddEvent(song, atime, MEVT_TEMPO, c, b, a);
						 Create an event and attach the extra data, if any  It's a status byte  Extract channel and status information  Read the next byte which should always be a data byte  Note on  Key Pressure  Control change  Pitch wheel  Program change  Channel pressure  Sysex already handled above  release the dummy head event 
 *  Convert a midi song, consisting of up to 32 tracks, to a list of MIDIEvents.
 *  To do so, first convert the tracks seperatly, then interweave the resulting
 *  MIDIEvent-Lists to one big list.
  dummy event to make handling the list easier  First, convert all tracks to MIDIEvent lists  Now, merge the lists.  TODO  Find the next event  Check if we processes all events  Make sure the list is properly terminated  release the dummy head event  Make sure this is really a MIDI file  Header size must be 6  We only support format 0 and 1, but not 2  Allocate tracks  Retrieve the PPQN value, needed for playback  We might want to verify this is MTrk...  Open the file  Read in the data 