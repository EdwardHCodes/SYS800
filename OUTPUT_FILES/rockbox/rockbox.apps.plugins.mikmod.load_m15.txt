	MikMod sound library
	(c) 1998, 1999, 2000, 2001, 2002 Miodrag Vallat and others - see file
	AUTHORS for complete list.

	This library is free software; you can redistribute it and/or modify
	it under the terms of the GNU Library General Public License as
	published by the Free Software Foundation; either version 2 of
	the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Library General Public License for more details.

	You should have received a copy of the GNU Library General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
	02111-1307, USA.
==============================================================================

  $Id$

  15 instrument MOD loader
  Also supports Ultimate Sound Tracker (old M15 format)

======================================================================================== Module Structure  22 in module, 23 in memory  the songname.., 20 in module, 21 in memory  all sampleinfo  number of patterns used  should be 127  which pattern to play at pos ========== Loader variables  if TRUE, load as an ust module.  known file formats which can confuse the loader  cakewalk midi files  Microsoft compressed files ========== Loader code  sanity check : title should contain printable characters and a bunch
	   of null chars  sanity check : sample title should contain printable characters and
		   a bunch of null chars 32 sanity check : finetune values  should be 127  sanity check : no more than 128 positions, restart position in range  values encountered so far are 0x6a and 0x78  sanity check : pattern range is 0..63  Checks the patterns in the modfile for UST / 15-inst indications.
   For example, if an effect 3xx is found, it is assumed that the song
   is 15-inst.  If a 1xx effect has dat greater than 0x20, it is UST.

   Returns:  0 indecisive; 1 = UST; 2 = 15-inst                                Load the pattern into the temp buffer and scan it  reject other file types  all finetunes should be zero  all volumes should be <= 64  all instrument names should begin with s, st-, or a number  if loop information is incorrect as words, but correct as bytes,
		   this is likely to be an ust-style module  indecisive, so check more clues... 
Old (amiga) noteinfo:

 _____byte 1_____   byte2_    _____byte 3_____   byte4_
/                \ /      \  /                \ /      \
0000          0000-00000000  0000          0000-00000000

Upper four    12 bits for    Lower four    Effect command.
bits of sam-  note period.   bits of sam-
ple number.                  ple number.
 decode the 4 bytes that make up a single note  Convert the period to a note number  if instrument does not exist, note cut  if we had a note, then change instrument...  ...otherwise, only adjust volume...  ...unless an effect was specified, which forces a new note
				   to be played  Convert pattern jump from Dec to Hex  Volume slide, up has priority  Handle ``heavy'' volumes correctly  An isolated 100, 200 or 300 effect should be ignored (no
		   "standalone" porta memory in mod files). However, a sequence
		   such as 1XX, 100, 100, 100 is fine.  non existant effect  Loads all patterns of a modfile and converts them into the 3 byte format.  Allocate temporary buffer for loading and converting the patterns  Load the pattern into the temp buffer and convert it  try to read module header  set module variables  Count the number of patterns  since some old modules embed extra patterns, we have to check the
	   whole list to get the samples' file offsets right - however we can find
	   garbage here, so check carefully  Finally, init the sampleinfo structures  convert the samplename  init the sampleinfo variables and convert the size pointers  just in case ========== Loader information  ex:set ts=4: 	MikMod sound library
	(c) 1998, 1999, 2000, 2001, 2002 Miodrag Vallat and others - see file
	AUTHORS for complete list.

	This library is free software; you can redistribute it and/or modify
	it under the terms of the GNU Library General Public License as
	published by the Free Software Foundation; either version 2 of
	the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Library General Public License for more details.

	You should have received a copy of the GNU Library General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
	02111-1307, USA.
==============================================================================

  $Id$

  15 instrument MOD loader
  Also supports Ultimate Sound Tracker (old M15 format)

======================================================================================== Module Structure  22 in module, 23 in memory  the songname.., 20 in module, 21 in memory  all sampleinfo  number of patterns used  should be 127  which pattern to play at pos ========== Loader variables  if TRUE, load as an ust module.  known file formats which can confuse the loader  cakewalk midi files  Microsoft compressed files ========== Loader code  sanity check : title should contain printable characters and a bunch
	   of null chars  sanity check : sample title should contain printable characters and
		   a bunch of null chars 32 sanity check : finetune values  should be 127  sanity check : no more than 128 positions, restart position in range  values encountered so far are 0x6a and 0x78  sanity check : pattern range is 0..63  Checks the patterns in the modfile for UST / 15-inst indications.
   For example, if an effect 3xx is found, it is assumed that the song
   is 15-inst.  If a 1xx effect has dat greater than 0x20, it is UST.

   Returns:  0 indecisive; 1 = UST; 2 = 15-inst                                Load the pattern into the temp buffer and scan it  reject other file types  all finetunes should be zero  all volumes should be <= 64  all instrument names should begin with s, st-, or a number  if loop information is incorrect as words, but correct as bytes,
		   this is likely to be an ust-style module  indecisive, so check more clues... 
Old (amiga) noteinfo:

 _____byte 1_____   byte2_    _____byte 3_____   byte4_
/                \ /      \  /                \ /      \
0000          0000-00000000  0000          0000-00000000

Upper four    12 bits for    Lower four    Effect command.
bits of sam-  note period.   bits of sam-
ple number.                  ple number.
 decode the 4 bytes that make up a single note  Convert the period to a note number  if instrument does not exist, note cut  if we had a note, then change instrument...  ...otherwise, only adjust volume...  ...unless an effect was specified, which forces a new note
				   to be played  Convert pattern jump from Dec to Hex  Volume slide, up has priority  Handle ``heavy'' volumes correctly  An isolated 100, 200 or 300 effect should be ignored (no
		   "standalone" porta memory in mod files). However, a sequence
		   such as 1XX, 100, 100, 100 is fine.  non existant effect  Loads all patterns of a modfile and converts them into the 3 byte format.  Allocate temporary buffer for loading and converting the patterns  Load the pattern into the temp buffer and convert it  try to read module header  set module variables  Count the number of patterns  since some old modules embed extra patterns, we have to check the
	   whole list to get the samples' file offsets right - however we can find
	   garbage here, so check carefully  Finally, init the sampleinfo structures  convert the samplename  init the sampleinfo variables and convert the size pointers  just in case ========== Loader information  ex:set ts=4: 	MikMod sound library
	(c) 1998, 1999, 2000, 2001, 2002 Miodrag Vallat and others - see file
	AUTHORS for complete list.

	This library is free software; you can redistribute it and/or modify
	it under the terms of the GNU Library General Public License as
	published by the Free Software Foundation; either version 2 of
	the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Library General Public License for more details.

	You should have received a copy of the GNU Library General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
	02111-1307, USA.
==============================================================================

  $Id$

  15 instrument MOD loader
  Also supports Ultimate Sound Tracker (old M15 format)

======================================================================================== Module Structure  22 in module, 23 in memory  the songname.., 20 in module, 21 in memory  all sampleinfo  number of patterns used  should be 127  which pattern to play at pos ========== Loader variables  if TRUE, load as an ust module.  known file formats which can confuse the loader  cakewalk midi files  Microsoft compressed files ========== Loader code  sanity check : title should contain printable characters and a bunch
	   of null chars  sanity check : sample title should contain printable characters and
		   a bunch of null chars 32 sanity check : finetune values  should be 127  sanity check : no more than 128 positions, restart position in range  values encountered so far are 0x6a and 0x78  sanity check : pattern range is 0..63  Checks the patterns in the modfile for UST / 15-inst indications.
   For example, if an effect 3xx is found, it is assumed that the song
   is 15-inst.  If a 1xx effect has dat greater than 0x20, it is UST.

   Returns:  0 indecisive; 1 = UST; 2 = 15-inst                                Load the pattern into the temp buffer and scan it  reject other file types  all finetunes should be zero  all volumes should be <= 64  all instrument names should begin with s, st-, or a number  if loop information is incorrect as words, but correct as bytes,
		   this is likely to be an ust-style module  indecisive, so check more clues... 
Old (amiga) noteinfo:

 _____byte 1_____   byte2_    _____byte 3_____   byte4_
/                \ /      \  /                \ /      \
0000          0000-00000000  0000          0000-00000000

Upper four    12 bits for    Lower four    Effect command.
bits of sam-  note period.   bits of sam-
ple number.                  ple number.
 decode the 4 bytes that make up a single note  Convert the period to a note number  if instrument does not exist, note cut  if we had a note, then change instrument...  ...otherwise, only adjust volume...  ...unless an effect was specified, which forces a new note
				   to be played  Convert pattern jump from Dec to Hex  Volume slide, up has priority  Handle ``heavy'' volumes correctly  An isolated 100, 200 or 300 effect should be ignored (no
		   "standalone" porta memory in mod files). However, a sequence
		   such as 1XX, 100, 100, 100 is fine.  non existant effect  Loads all patterns of a modfile and converts them into the 3 byte format.  Allocate temporary buffer for loading and converting the patterns  Load the pattern into the temp buffer and convert it  try to read module header  set module variables  Count the number of patterns  since some old modules embed extra patterns, we have to check the
	   whole list to get the samples' file offsets right - however we can find
	   garbage here, so check carefully  Finally, init the sampleinfo structures  convert the samplename  init the sampleinfo variables and convert the size pointers  just in case ========== Loader information  ex:set ts=4: 