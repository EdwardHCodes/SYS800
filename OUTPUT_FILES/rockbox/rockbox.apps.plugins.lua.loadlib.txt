
** $Id: loadlib.c,v 1.52.1.4 2009/09/09 13:17:16 roberto Exp $
** Dynamic library loader for Lua
** See Copyright Notice in lua.h
**
** This module contains an implementation of loadlib for Unix systems
** that have dlfcn, an implementation for Darwin (Mac OS X), an
** implementation for Windows, and a stub for other systems.
 ROCKLUA ADDED 
** {======================================================
** 'require' function
** =======================================================
 try to open file  open failed  skip separators  no more templates  find next separator  template  ROCKLUA ADDED  error accumulator  remove path template  does file exist and is readable?  return that file name  remove file name  add entry to possible error message  not found  library not found in this path  library loaded successfully  not found?  _LOADED table will be at index 2  is it there?  check loops  package is already loaded  else must load it; iterate over available loaders  error message accumulator  get a loader  call it  did it find module?  module loaded successfully  loader returned error message?  accumulate it  _LOADED[name] = sentinel  pass name as argument to module  run loaded module  non-nil return?  _LOADED[name] = returned value  module did not set a value?  use true as result  extra copy to be returned  _LOADED[name] = true  }====================================================== 
** {======================================================
** 'module' function
** =======================================================
 get calling function  get option (a function)  module  module._M = module  look for last dot in module name  set _PACKAGE as package name (full module name minus last part)  index of _LOADED table  get _LOADED[modname]  not found?  remove previous result  try global variable (and create one if it does not exist)  _LOADED[modname] = new table  check whether table already has a _NAME field  is table an initialized module?  no; initialize it  create new metatable  mt.__index = _G  }======================================================  auxiliary mark (for internal use)  use default  create new type _LOADLIB  create `package' table  create `loaders' table  fill it with pre-defined loaders  put it in field `loaders'  set field `path'  store config information  set field `loaded'  set field `preload'  open lib into global table  return 'package' table 
** $Id: loadlib.c,v 1.52.1.4 2009/09/09 13:17:16 roberto Exp $
** Dynamic library loader for Lua
** See Copyright Notice in lua.h
**
** This module contains an implementation of loadlib for Unix systems
** that have dlfcn, an implementation for Darwin (Mac OS X), an
** implementation for Windows, and a stub for other systems.
 ROCKLUA ADDED 
** {======================================================
** 'require' function
** =======================================================
 try to open file  open failed  skip separators  no more templates  find next separator  template  ROCKLUA ADDED  error accumulator  remove path template  does file exist and is readable?  return that file name  remove file name  add entry to possible error message  not found  library not found in this path  library loaded successfully  not found?  _LOADED table will be at index 2  is it there?  check loops  package is already loaded  else must load it; iterate over available loaders  error message accumulator  get a loader  call it  did it find module?  module loaded successfully  loader returned error message?  accumulate it  _LOADED[name] = sentinel  pass name as argument to module  run loaded module  non-nil return?  _LOADED[name] = returned value  module did not set a value?  use true as result  extra copy to be returned  _LOADED[name] = true  }====================================================== 
** {======================================================
** 'module' function
** =======================================================
 get calling function  get option (a function)  module  module._M = module  look for last dot in module name  set _PACKAGE as package name (full module name minus last part)  index of _LOADED table  get _LOADED[modname]  not found?  remove previous result  try global variable (and create one if it does not exist)  _LOADED[modname] = new table  check whether table already has a _NAME field  is table an initialized module?  no; initialize it  create new metatable  mt.__index = _G  }======================================================  auxiliary mark (for internal use)  use default  create new type _LOADLIB  create `package' table  create `loaders' table  fill it with pre-defined loaders  put it in field `loaders'  set field `path'  store config information  set field `loaded'  set field `preload'  open lib into global table  return 'package' table 
** $Id: loadlib.c,v 1.52.1.4 2009/09/09 13:17:16 roberto Exp $
** Dynamic library loader for Lua
** See Copyright Notice in lua.h
**
** This module contains an implementation of loadlib for Unix systems
** that have dlfcn, an implementation for Darwin (Mac OS X), an
** implementation for Windows, and a stub for other systems.
 ROCKLUA ADDED 
** {======================================================
** 'require' function
** =======================================================
 try to open file  open failed  skip separators  no more templates  find next separator  template  ROCKLUA ADDED  error accumulator  remove path template  does file exist and is readable?  return that file name  remove file name  add entry to possible error message  not found  library not found in this path  library loaded successfully  not found?  _LOADED table will be at index 2  is it there?  check loops  package is already loaded  else must load it; iterate over available loaders  error message accumulator  get a loader  call it  did it find module?  module loaded successfully  loader returned error message?  accumulate it  _LOADED[name] = sentinel  pass name as argument to module  run loaded module  non-nil return?  _LOADED[name] = returned value  module did not set a value?  use true as result  extra copy to be returned  _LOADED[name] = true  }====================================================== 
** {======================================================
** 'module' function
** =======================================================
 get calling function  get option (a function)  module  module._M = module  look for last dot in module name  set _PACKAGE as package name (full module name minus last part)  index of _LOADED table  get _LOADED[modname]  not found?  remove previous result  try global variable (and create one if it does not exist)  _LOADED[modname] = new table  check whether table already has a _NAME field  is table an initialized module?  no; initialize it  create new metatable  mt.__index = _G  }======================================================  auxiliary mark (for internal use)  use default  create new type _LOADLIB  create `package' table  create `loaders' table  fill it with pre-defined loaders  put it in field `loaders'  set field `path'  store config information  set field `loaded'  set field `preload'  open lib into global table  return 'package' table 