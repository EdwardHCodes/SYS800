******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * @author Jeff Plourde
 *
     private static final Stroke LINE_STROKE = new BasicStroke(3f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND); For use only in rendering / THIS LOGIC SHOULD LIVE OUTSIDE OF THE FX THREAD / and probably draw an offscreen buffer        if (g instanceof Graphics2D) {            ((Graphics2D) g).setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);            ((Graphics2D) g).setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);            ((Graphics2D) g).setStroke(LINE_STROKE);        } int countVitalsOut = 0; int countVitalsAbsent = 0; find the vertices of the data axes countVitalsOut += vital.countOutOfBounds(); All's well float low = REVERSE_DIRECTION ? vital.getHigh() : vital.getLow(); float high = REVERSE_DIRECTION ? vital.getLow() : vital.getHigh(); Draw an axis line for this vital vertical line is a special case vertical line is a special case vertical line is a special case vertical line is a special case            g.setFont(g.getFont() vertical line is a special case            if (g instanceof Graphics2D) {                Graphics2D g2d = (Graphics2D) g;                AffineTransform at = g2d.getTransform();                g2d.translate(x_ideal, y_ideal); g2d.rotate(Math.asin( (y2-y1) / Math.sqrt( (x2-x1)*(x2-x1) + (y2-y1)*(y2-y1)))); vertical line case rotate -= Math.PI; FLIP = ; String lbl = v < LABEL.length ? LABEL[v] : ""; Vital name                    g.drawString(lbl, -str_w / 2, 3 * height + maxDescent);                    g.drawString(lbl, -str_w / 2, FLIP_SIGN * (-2 * height - maxDescent)); Low end of the scale Alarm low limit High end of the scale Alarm high limit Middle of the scale            } countVitalsAbsent++; vertical line        RtConfig.loadAndSetIceQos();        RtConfig rtSetup = RtConfig.setupDDS(0);        final EventLoop eventLoop=rtSetup.getEventLoop();        final Publisher pub=rtSetup.getPublisher();        final Subscriber s=rtSetup.getSubscriber();        final DomainParticipant participant=rtSetup.getParticipant();        final TimeManager timeManager = new TimeManager(pub, s,                 AbstractSimulatedDevice.randomUDI(), "VitalMonitoring");        final DeviceListModel nc = new DeviceListModel(rtSetup.getSubscriber(),                rtSetup.getEventLoop(),                timeManager);                final EventLoopHandler handler = rtSetup.getHandler();        final VitalModel vm = new VitalModelImpl(nc);        ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();        rtSetup.getEventLoop().doLater(new Runnable() {            public void run() {                nc.start();            }        });        vm.start(s, pub, eventLoop);        eventLoop.doLater(new Runnable() {            public void run() {                VitalSign.SpO2.addToModel(vm);                VitalSign.RespiratoryRate.addToModel(vm);                VitalSign.EndTidalCO2.addToModel(vm);            }        });        JFrame frame = new JFrame("UITest");        frame.getContentPane().setBackground(Color.white);        final VitalMonitoring uiTest = new VitalMonitoring();        uiTest.setModel(vm);        executor.scheduleAtFixedRate(new Runnable() {            public void run() {                uiTest.repaint();            }        }, 0L, 500L, TimeUnit.MILLISECONDS);        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.addWindowListener(new WindowAdapter() {            @Override            public void windowClosing(WindowEvent e) {                vm.stop();                try {                    handler.shutdown();                } catch (InterruptedException e1) {                    e1.printStackTrace();                }                participant.delete_subscriber(s);                participant.delete_contained_entities();                DomainParticipantFactory.get_instance().delete_participant(participant);                DomainParticipantFactory.finalize_instance();                super.windowClosing(e);            }        });        frame.getContentPane().setLayout(new BorderLayout());        frame.getContentPane().add(uiTest, BorderLayout.CENTER);        // frame.getContentPane().add(slider, BorderLayout.SOUTH);        frame.setSize(640, 480);        frame.setLocationRelativeTo(null);        frame.setVisible(true);