**************************************************************************
*             __________               __   ___.
*   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
*   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
*   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
*   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
*                     \/            \/     \/    \/            \/
* $Id: $
*
* Copyright (C) 2011 by Tomasz Moń
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
* KIND, either express or implied.
*
***************************************************************************#define BUTTON_DEBUG protects spi avr commands from concurrent access  buttons thread  filter "rewinds"  direction reversal  TODO: take velocity into account  Post directly, don't update btn as avr doesn't give
           interrupt on scroll stop  skipped post - increment delta and limit to 7 bits  buf must be 11-byte array of byte (reply from avr_hid_get_state()  make sure other bits doesn't conflict with our "free bits" buttons  is power button pressed?  check if stored hold_switch state changed (prevents lost changes)  hold change notification  scrollwheel change  power button change  power button state has changed  100 us wait for AVR  100 us wait to give AVR time to process data  Send SYNC three times 
       setup alternate GIO functions:
       GIO29 - SIF1 Enable (Directly connected to AVR's SS)
       GIO30 - SIF1 Clock
       GIO31 - SIF1 Data In
       GIO32 - SIF1 Data Out
     GIO29, GIO30 - outputs, GIO31 - input  GIO32 - output  RATE = 219 (0xDB) -> 200 kHz  defined in powermgmt-sansaconnect.c 
     *  buf[8] contains some battery/charger related information (unknown)
     *  buf[9] contains battery level in percents (0-100)
      request interrupt on button press  command that is sent by "hidtool -J 1" issued on every OF boot  Ignore all messages except BTN_INTERRUPT  Enable back button interrupt  Read buttons state  for some reason we have lost next interrupt  Clear interrupt  Disable interrupt  interrupt will be enabled back after button read  Clear interrupt  Set GIO0 as input  Enable wheel  Read button status and tell avr we want interrupt on next change  Enable GIO0/GIO2 external interrupt  Clear INV for GIO0/GIO2  falling edge detection on GIO0, any edge on GIO2  Enable GIO0 and GIO2 interrupts **************************************************************************
*             __________               __   ___.
*   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
*   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
*   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
*   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
*                     \/            \/     \/    \/            \/
* $Id: $
*
* Copyright (C) 2011 by Tomasz Moń
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
* KIND, either express or implied.
*
***************************************************************************#define BUTTON_DEBUG protects spi avr commands from concurrent access  buttons thread  filter "rewinds"  direction reversal  TODO: take velocity into account  Post directly, don't update btn as avr doesn't give
           interrupt on scroll stop  skipped post - increment delta and limit to 7 bits  buf must be 11-byte array of byte (reply from avr_hid_get_state()  make sure other bits doesn't conflict with our "free bits" buttons  is power button pressed?  check if stored hold_switch state changed (prevents lost changes)  hold change notification  scrollwheel change  power button change  power button state has changed  100 us wait for AVR  100 us wait to give AVR time to process data  Send SYNC three times 
       setup alternate GIO functions:
       GIO29 - SIF1 Enable (Directly connected to AVR's SS)
       GIO30 - SIF1 Clock
       GIO31 - SIF1 Data In
       GIO32 - SIF1 Data Out
     GIO29, GIO30 - outputs, GIO31 - input  GIO32 - output  RATE = 219 (0xDB) -> 200 kHz  defined in powermgmt-sansaconnect.c 
     *  buf[8] contains some battery/charger related information (unknown)
     *  buf[9] contains battery level in percents (0-100)
      request interrupt on button press  command that is sent by "hidtool -J 1" issued on every OF boot  Ignore all messages except BTN_INTERRUPT  Enable back button interrupt  Read buttons state  for some reason we have lost next interrupt  Clear interrupt  Disable interrupt  interrupt will be enabled back after button read  Clear interrupt  Set GIO0 as input  Enable wheel  Read button status and tell avr we want interrupt on next change  Enable GIO0/GIO2 external interrupt  Clear INV for GIO0/GIO2  falling edge detection on GIO0, any edge on GIO2  Enable GIO0 and GIO2 interrupts **************************************************************************
*             __________               __   ___.
*   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
*   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
*   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
*   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
*                     \/            \/     \/    \/            \/
* $Id: $
*
* Copyright (C) 2011 by Tomasz Moń
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
* KIND, either express or implied.
*
***************************************************************************#define BUTTON_DEBUG protects spi avr commands from concurrent access  buttons thread  filter "rewinds"  direction reversal  TODO: take velocity into account  Post directly, don't update btn as avr doesn't give
           interrupt on scroll stop  skipped post - increment delta and limit to 7 bits  buf must be 11-byte array of byte (reply from avr_hid_get_state()  make sure other bits doesn't conflict with our "free bits" buttons  is power button pressed?  check if stored hold_switch state changed (prevents lost changes)  hold change notification  scrollwheel change  power button change  power button state has changed  100 us wait for AVR  100 us wait to give AVR time to process data  Send SYNC three times 
       setup alternate GIO functions:
       GIO29 - SIF1 Enable (Directly connected to AVR's SS)
       GIO30 - SIF1 Clock
       GIO31 - SIF1 Data In
       GIO32 - SIF1 Data Out
     GIO29, GIO30 - outputs, GIO31 - input  GIO32 - output  RATE = 219 (0xDB) -> 200 kHz  defined in powermgmt-sansaconnect.c 
     *  buf[8] contains some battery/charger related information (unknown)
     *  buf[9] contains battery level in percents (0-100)
      request interrupt on button press  command that is sent by "hidtool -J 1" issued on every OF boot  Ignore all messages except BTN_INTERRUPT  Enable back button interrupt  Read buttons state  for some reason we have lost next interrupt  Clear interrupt  Disable interrupt  interrupt will be enabled back after button read  Clear interrupt  Set GIO0 as input  Enable wheel  Read button status and tell avr we want interrupt on next change  Enable GIO0/GIO2 external interrupt  Clear INV for GIO0/GIO2  falling edge detection on GIO0, any edge on GIO2  Enable GIO0 and GIO2 interrupts 