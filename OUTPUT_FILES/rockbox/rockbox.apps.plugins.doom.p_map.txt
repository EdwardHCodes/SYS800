 Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *  Movement, collision handling.
 *  Shooting and aiming.
 *
 *----------------------------------------------------------------------------- Pain Elemental position for Lost Soul checks // phares Pain Elemental position for Lost Soul checks // phares Lost Soul position for Lost Soul checks      // phares Lost Soul position for Lost Soul checks      // phares If "floatok" true, move would be ok if within "tmfloorz - tmceilingz". killough 11/98: if "felldown" true, object was pushed down ledge  The tm* items are used to hold information globally, usually for line or object intersection checking bounding box for line intersection checks floor you'd hit if free to fall ceiling of sector you're in dropoff on other side of line you're crossing keep track of the line that lowers the ceiling, so missiles don't explode against sky hack walls killough 8/11/98: blocking linedef  killough 8/1/98: Highest touched floor  killough 8/1/98: whether to allow unsticking  keep track of special lines as they are hit, but don't process them until the move is proven valid 1/11/98 killough: removed limit on special lines crossed new code -- killough killough Temporary holder for thing_sectorlist threads phares 3/16/98 TELEPORT MOVE PIT_StompThing killough 8/9/98: whether to telefrag at exit  phares 9/10/98: moved this self-check to start of routine don't clip against self Can't shoot it? Can't stomp it! didn't hit it monsters don't stomp things except on boss level killough 8/9/98: make consistent across all levels Stomp!
 * killough 8/28/98:
 *
 * P_GetFriction()
 *
 * Returns the friction associated with a particular mobj.
  Assign the friction value to objects on the floor, non-floating,
    * and clipped. Normally the object's friction value is kept at
    * ORIG_FRICTION and this thinker changes it for icy or muddy floors.
    *
    * When the object is straddling sectors with the same
    * floorheight that have different frictions, use the lowest
    * friction value (muddy has precedence over icy).
     phares 3/19/98
 * P_GetMoveFactor() returns the value by which the x,y
 * movements are multiplied to add to player movement.
 *
 * killough 8/28/98: rewritten
  If the floor is icy or muddy, it's harder to get moving. This is where the different friction factors are applied to 'trying to move'. In p_mobj.c, the friction factors are applied as you coast and slow down. phares 3/11/98: you start off slowly, then increase as you get better footing P_TeleportMove killough 8/9/98: make telefragging more consistent, preserve compatibility  kill anything occupying the position The base floor/ceiling is from the subsector that contains the point. Any contacted lines the step closer together will adjust them. stomp on any things contacted the move is ok, so unlink from the old position & link into the new position killough 11/98 MOVEMENT ITERATOR FUNCTIONS                                                                  // phares PIT_CrossLine                                                    //   | Checks to see if a PE->LS trajectory line crosses a blocking     //   V line. Returns false if it does. tmbbox holds the bounding box of the trajectory. If that box does not touch the bounding box of the line in question, then the trajectory is not blocked. If the PE is on one side of the line and the LS is on the other side, then the trajectory is blocked. Currently this assumes an infinite line, which is not quite correct. A more correct solution would be to check for an intersection of the trajectory and the line, but that takes longer and probably really isn't worth the effort. killough 3/26/98: make static line blocks trajectory                   //   ^ line doesn't block trajectory                    //   | phares killough 8/1/98: used to test intersection between thing and line
 * assuming NO movement occurs -- used to avoid sticky situations.
  PIT_CheckLine Adjusts tmfloorz and tmceilingz as lines are contacted killough 3/26/98: make static didn't hit it didn't hit it A line has been hit The moving thing's destination position will cross the given line. If this should not be allowed, return false. If the line is special, keep track of it to process later if the move is proven ok. NOTE: specials are NOT sorted by order, so two special lines that are only 8 pixels apart could be crossed in either order. killough 7/24/98: allow player to move out of 1s wall, to prevent sticking one sided line killough 8/10/98: allow bouncing objects to pass through as missiles explicitly blocking everything killough 8/1/98: allow escape killough 8/9/98: monster-blockers don't affect friends block monsters only set openrange, opentop, openbottom these define a 'window' from one sector to another across this line adjust floor & ceiling heights killough 8/1/98: remember floor linedef if contacted a special line, add it to the list 1/11/98 killough: remove limit on lines hit, by array doubling killough PIT_CheckThing killough 3/26/98: make static killough 11/98: add touchy things didn't hit it killough 11/98: This test has less information content (it's almost always false), so it should not be moved up to first, as it adds more overhead than it removes. don't clip against self killough 11/98:
    *
    * TOUCHY flag, for mines or other objects which die on contact with solids.
    * If a solid object of a different type comes in contact with a touchy
    * thing, and the touchy thing is not the sole one moving relative to fixed
    * surroundings such as walls, then the touchy thing dies immediately.
     touchy object solid object touches it touchy object is alive Thing is an armed mine ... or a sentient thing only different species ... or different players touches vertically PEs and lost souls are considered same (but Barons & Knights are intentionally not) kill object check for skulls slamming into things A flying skull is smacking something. Determine damage amount, and the skull comes to a dead stop. stop moving missiles can hit other things killough 8/10/98: bouncing non-solid things can hit other things too see if it went over / under overhead underneath Don't hit same species as originator. Explode, but do no damage. Let players missile other players. killough 8/10/98: if moving thing is not a missile, no damage is inflicted, and momentum is reduced if object hit is solid. didn't do any damage damage / explode don't traverse any more check for special pickup can remove thing killough 3/16/98: Allow non-solid moving objects to move through solid ones, by allowing the moving thing (tmthing) to move if it's non-solid, despite another solid thing being in the way. killough 4/11/98: Treat no-clipping things as not blocking return !(thing->flags & MF_SOLID);   // old code -- killough This routine checks for Lost Souls trying to be spawned      // phares across 1-sided lines, impassible lines, or "monsters can't   //   | cross" lines. Draw an imaginary line between the PE          //   V and the new Lost Soul spawn spot. If that line crosses a 'blocking' line, then disallow the spawn. Only search lines in the blocks of the blockmap where the bounding box of the trajectory line resides. Then check bounding box of the trajectory vs. the bounding box of each blocking line to see if the trajectory and the blocking line cross. Then check the PE and LS to see if they're on different sides of the blocking line. If so, return true, otherwise false. Here is the bounding box of the trajectory Determine which blocks to look in for blocking lines xl->xh, yl->yh determine the mapblock set to search prevents checking same line twice   ^   | phares MOVEMENT CLIPPING P_CheckPosition This is purely informative, nothing is modified (except things picked up). in:  a mobj_t (can be valid or invalid)  a position to be checked   (doesn't need to be related to the mobj_t->x,y) during:  special things are touched if MF_PICKUP  early out on solid lines? out:  newsubsec  floorz  ceilingz  tmdropoffz   the lowest point contacted   (monsters won't move to a dropoff)  speciallines[]  numspeciallines killough 8/1/98 Whether object can get out of a sticky situation: only players  not voodoo dolls  not under old demos  The base floor / ceiling is from the subsector that contains the point. Any contacted lines the step closer together will adjust them. Check things first, possibly picking things up. The bounding box is extended by MAXRADIUS because mobj_ts are grouped into mapblocks based on their origin point, and can overlap into adjacent blocks by up to MAXRADIUS units. check lines doesn't fit P_TryMove Attempt to move to a new position, crossing special lines unless MF_TELEPORT is set. killough 3/15/98: allow dropoff as option killough 11/98 solid wall or thing killough 7/26/98: reformatted slightly killough 8/1/98: Possibly allow escape if otherwise stuck doesn't fit mobj must lower to fit too big a step up killough 3/15/98: Allow certain objects to drop off
       * killough 7/24/98, 8/1/98:
       * Prevent monsters from getting stuck hanging off ledges
       * killough 10/98: Allow dropoffs in controlled circumstances
       * killough 11/98: Improve symmetry of clipping on stairs
        don't stand over a dropoff large jump down (e.g. dogs) dropoff allowed -- check for whether it fell more than 24  killough 8/13/98 too big a step up for bouncers under gravity killough 11/98: prevent falling objects from going up too many steps the move is ok, so unlink from the old position and link into the new position killough 11/98: keep track of dropoffs if any special lines were hit, do the effect see if the line was crossed
 * killough 9/12/98:
 *
 * Apply "torque" to objects hanging off of ledges, so that they
 * fall off. It's not really torque, since Doom has no concept of
 * rotation, but it's a convincing effect which avoids anomalies
 * such as lifeless objects hanging more than halfway off of ledges,
 * and allows objects to roll off of the edges of moving lifts, or
 * to slide up and then back down stairs, or to fall into a ditch.
 * If more than one linedef is contacted, the effects are cumulative,
 * so balancing is possible.
  If thing touches two-sided pivot linedef lever arm dropoff direction At this point, we know that the object straddles a two-sided
          * linedef, and that the object's center of mass is above-ground.
           Momentum is proportional to distance between the
          * object's center of mass and the pivot linedef.
          *
          * It is scaled by 2^(OVERDRIVE - gear). When gear is
          * increased, the momentum gradually decreases to 0 for
          * the same amount of pseudotorque, so that oscillations
          * are prevented, yet it has a chance to reach equilibrium.
           Apply momentum away from the pivot linedef.  Avoid moving too fast all of a sudden (step into "overdrive") 
 * killough 9/12/98
 *
 * Applies "torque" to objects, based on all contacted linedefs
 Remember the current state, for gear-change prevents checking same line twice  If any momentum, mark object as 'falling' using engine-internal flags  Clear the engine-internal flag indicating falling object. If the object has been moving, step up the gear.
    * This helps reach equilibrium and avoid oscillations.
    *
    * Doom has no concept of potential energy, much less
    * of rotation, so we have to creatively simulate these
    * systems somehow :)
     If not falling for a while, Reset it to full strength Else if not at max gear, move up a gear P_ThingHeightClip Takes a valid thing and adjusts the thing->floorz, thing->ceilingz, and possibly thing->z. This is called for all nearby monsters whenever a sector changes height. If the thing doesn't fit, the z will be set to the lowest value and false will be returned. what about stranding a monster partially off an edge?
    * killough 11/98: Answer: see below (upset balance if hanging off ledge)
     killough 11/98: remember dropoffs  walking monsters rise and fall with the floor killough 11/98: Possibly upset balance of objects hanging off ledges  don't adjust a floating monster unless forced to SLIDE MOVE Allows the player to slide along any angled walls. killough 8/2/98: make variables static  P_HitSlideLine Adjusts the xmove / ymove so that the next move will slide along the wall. If the floor is icy, then you can bounce off a wall.             // phares is floor icy?                               // phares   | Under icy conditions, if the angle of approach to the wall     //   V is more than 45 degrees, then you'll bounce and lose half your momentum. If less than 45 degrees, you'll slide along the wall. 45 is arbitrary and is believable. Check for the special cases of horz or vert walls. killough 10/98: only bounce if hit hard (prevents wobbling)
    * cph - DEMOSYNC - should only affect players in Boom demos?  killough 8/28/98: calc friction on demand absorb half the momentum oooff! no more movement in the Y direction absorb half the momentum oooff!                      //   ^   | phares no more movement in the X direction The wall is angled. Bounce if the angle of approach is         // phares less than 45 degrees.                                          // phares killough 3/2/98: The moveangle+=10 breaks v1.9 demo compatibility in some demos, so it needs demo_compatibility switch. prevents sudden path reversal due to        // phares rounding error                              //   |   V absorb oooff!   ^   | phares  I_Error ("SlideLine: ang>ANG180"); phares PTR_SlideTraverse don't hit the back side set openrange, opentop, openbottom. These define a 'window' from one sector to another across a line doesn't fit mobj is too high too big a step up this line doesn't block movement the line does block movement, see if it is closer than best so far stop P_SlideMove The momx / momy move is bad, so try to slide along a wall. Find the first line hit, move flush to it, and slide along it This is a kludgy mess. killough 11/98: reformatted the object that's sliding don't loop forever trace along the three leading corners move up to the wall the move must have hit the middle, so stairstep killough 3/15/98: Allow objects to drop off ledges
          *
          * phares 5/4/98: kill momentum if you can't move at all
          * This eliminates player bobbing if pressed against a wall
          * while on ice.
          *
          * killough 10/98: keep buggy code around for old Boom demos
          *
          * cph 2000/09//23: buggy code was only in Boom v2.01
           fudge a bit to make sure it doesn't hit killough 3/15/98: Allow objects to drop off ledges Now continue along the wall. First calculate remainder. clip the moves killough 10/98: affect the bobbing the same way (but not voodoo dolls)
       * cph - DEMOSYNC?  killough 3/15/98: Allow objects to drop off ledges: P_LineAttack who got hit (or NULL) killough 8/2/98: for more intelligent autoaiming  Height if not aiming up or down slopes to top and bottom of target killough 4/20/98: make static instead of using ones in p_sight.c PTR_AimTraverse Sets linetaget and aimslope when a target is aimed at. stop Crosses a two sided line. A two sided line will restrict the possible target ranges. stop stop shot continues shoot a thing can't shoot self corpse or something killough 7/19/98, 8/2/98:
    * friends don't aim at friends (except players), at least not first
     check angles to see if the thing can be aimed at shot over the thing shot under the thing this thing can be hit! don't go any farther PTR_ShootTraverse crosses a two sided (really 2s) line killough 11/98: simplify shot continues hit line position a bit closer don't shoot the sky! it's a sky hack wall fix bullet-eaters -- killough: WARNING: Almost all demos will lose sync without this demo_compatibility flag check!!! killough 1/18/98 Spawn bullet puffs. don't go any farther shoot a thing can't shoot self corpse or something check angles to see if the thing can be aimed at shot over the thing shot under the thing hit thing position a bit closer Spawn bullet puffs or blod spots, depending on target type. don't go any farther P_AimLineAttack can't shoot outside view angles killough 8/2/98: prevent friends from aiming at friends  P_LineAttack If damage == 0, it is just a test trace that will leave linetarget set. USE LINES can't use through a wall not a special line, but keep checking  return false;   // don't use back sideWAS can't use for than one special line in a rowjff 3/21/98 NOW multiple use allowed with enabling line flag Returns false if a "oof" sound should be made because of a blocking linedef. Makes 2s middles which are impassable, as well as 2s uppers and lowers which block the player, cause the sound effect when the player tries to activate them. Specials are excluded, although it is assumed that all special linedefs within reach have been considered and rejected already (see P_UseLines). by Lee Killough This linedef Ignore specials Always blocking Find openings No opening Too high it blocks Too low it blocks P_UseLines Looks for special lines in front of the player to activate. old code: P_PathTraverse ( x1, y1, x2, y2, PT_ADDLINES, PTR_UseTraverse ); This added test makes the "oof" sound work on 2s lines -- killough: RADIUS ATTACK PIT_RadiusAttack "bombsource" is the creature that caused the explosion at "bombspot". killough 8/20/98: allow bouncers to take damage
    * (missile bouncers are already excluded with MF_NOBLOCKMAP)
     Boss spider and cyborg take no damage from concussion. killough 8/10/98: allow grenades to hurt anyone, unless fired by Cyberdemons, in which case it won't hurt Cybers. out of range must be in direct path P_RadiusAttack Source is the creature that caused the explosion at spot. SECTOR HEIGHT CHANGING After modifying a sectors floor or ceiling height, call this routine to adjust the positions of all things that touch the sector. If anything doesn't fit anymore, true will be returned. If crunch is true, they will take damage  as they are being crushed. If Crunch is false, you should set the sector height back  the way it was and call P_ChangeSector again  to undo the changes. PIT_ChangeSector keep checking crunch bodies to giblets keep checking crunch dropped items keep checking killough 11/98: kill touchy things immediately  kill object keep checking assume it is bloody gibs or something spray blood in a random direction killough 8/10/98: remove dependence on order of evaluation  keep checking (crush other things) P_ChangeSector ARRGGHHH!!!! This is horrendously slow!!! killough 3/14/98 re-check heights for all things near the moving sector P_CheckSector jff 3/19/98 added to just check monsters on the periphery of a moving sector instead of all in bounding box of the sector. Both more accurate and faster. use the old routine for old demos though  killough 4/4/98: scan list front-to-back until empty or exhausted, restarting from beginning after each thing is processed. Avoids crashes, and is sure to examine all things in the sector, and only the things which are in the sector, until a steady-state is reached. Things can arbitrarily be inserted and removed and it won't mess up. killough 4/7/98: simplified to avoid using complicated counter Mark all things invalid go through list unprocessed thing found mark thing as processedjff 4/7/98 don't do these process it exit and start over repeat from scratch until all things left are marked valid CPhipps - Use block memory allocator here P_PutSecnode() returns a node to the freelist. phares 3/16/98 P_AddSecnode() searches the current list to see if this sector is already there. If not, it adds a sector node at the head of the list of sectors this object appears in. This is called when creating a list of nodes that will get linked in later. Returns a pointer to the new node. Already have a node for this sector? Yes. Setting m_thing says 'keep it'. Couldn't find an existing node for this sector. Add one at the head of the list. killough 4/4/98, 4/7/98: mark new nodes unvisited. sector mobj prev node on Thing thread next node on Thing thread set back link on Thing Add new node at head of sector thread starting at s->touching_thinglist prev node on sector thread next node on sector thread P_DelSecnode() deletes a sector node from the list of sectors this object appears in. Returns a pointer to the next node on the linked list, or NULL. prev node on thing thread next node on thing thread prev node on sector thread next node on sector thread Unlink from the Thing thread. The Thing thread begins at sector_list and not from mobj_t->touching_sectorlist. Unlink from the sector thread. This thread begins at sector_t->touching_thinglist. Return this node to the freelist phares 3/13/98 Delete an entire sector list phares 3/14/98 PIT_GetSectors Locates all the sectors the object is in by looking at the lines that cross through it. You have already decided that the object is allowed at this location, so don't bother with checking impassable or blocking lines. This line crosses through the object. Collect the sector(s) from the line and add to the sector_list you're examining. If the Thing ends up being allowed to move to this position, then the sector_list will be attached to the Thing's mobj_t at touching_sectorlist. Don't assume all lines are 2-sided, since some Things
    * like MT_TFOG are allowed regardless of whether their radius takes
    * them beyond an impassable linedef.
    *
    * killough 3/27/98, 4/4/98:
    * Use sidedefs instead of 2s flag to determine two-sidedness.
    * killough 8/1/98: avoid duplicate if same sector on both sides
    * cph - DEMOSYNC?  phares 3/14/98 P_CreateSecNodeList alters/creates the sector_list that shows what sectors the object resides in. cph - see comment at func end  ditto  First, clear out the existing m_thing fields. As each node is added or verified as needed, m_thing will be set properly. When finished, delete all nodes where m_thing is still NULL. These represent the sectors the Thing has vacated. used to make sure we only process a line once Add the sector of the (x,y) point to sector_list. Now delete any nodes that won't be used. These are the ones where m_thing is still NULL. cph -
    * This is the strife we get into for using global variables. tmthing
    *  is being used by several different functions calling
    *  P_BlockThingIterator, including functions that can be called *from*
    *  P_BlockThingIterator. Using a global tmthing is not reentrant.
    * OTOH for Boom/MBF demos we have to preserve the buggy behavior.
    *  Fun. We restore its previous value unless we're in a Boom/MBF demo.
     And, duh, the same for tmx/y - cph 2002/09/22
    * And for tmbbox - cph 2003/08/10  ||
                     (compatibility_level >= prboom_4_compatibility)  cphipps 2004/08/30 -
 * Must clear tmthing at tic end, as it might contain a pointer to a removed thinker, or the level might have ended/been ended and we clear the objects it was pointing too. Hopefully we don't need to carry this between tics for sync.  Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *  Movement, collision handling.
 *  Shooting and aiming.
 *
 *----------------------------------------------------------------------------- Pain Elemental position for Lost Soul checks // phares Pain Elemental position for Lost Soul checks // phares Lost Soul position for Lost Soul checks      // phares Lost Soul position for Lost Soul checks      // phares If "floatok" true, move would be ok if within "tmfloorz - tmceilingz". killough 11/98: if "felldown" true, object was pushed down ledge  The tm* items are used to hold information globally, usually for line or object intersection checking bounding box for line intersection checks floor you'd hit if free to fall ceiling of sector you're in dropoff on other side of line you're crossing keep track of the line that lowers the ceiling, so missiles don't explode against sky hack walls killough 8/11/98: blocking linedef  killough 8/1/98: Highest touched floor  killough 8/1/98: whether to allow unsticking  keep track of special lines as they are hit, but don't process them until the move is proven valid 1/11/98 killough: removed limit on special lines crossed new code -- killough killough Temporary holder for thing_sectorlist threads phares 3/16/98 TELEPORT MOVE PIT_StompThing killough 8/9/98: whether to telefrag at exit  phares 9/10/98: moved this self-check to start of routine don't clip against self Can't shoot it? Can't stomp it! didn't hit it monsters don't stomp things except on boss level killough 8/9/98: make consistent across all levels Stomp!
 * killough 8/28/98:
 *
 * P_GetFriction()
 *
 * Returns the friction associated with a particular mobj.
  Assign the friction value to objects on the floor, non-floating,
    * and clipped. Normally the object's friction value is kept at
    * ORIG_FRICTION and this thinker changes it for icy or muddy floors.
    *
    * When the object is straddling sectors with the same
    * floorheight that have different frictions, use the lowest
    * friction value (muddy has precedence over icy).
     phares 3/19/98
 * P_GetMoveFactor() returns the value by which the x,y
 * movements are multiplied to add to player movement.
 *
 * killough 8/28/98: rewritten
  If the floor is icy or muddy, it's harder to get moving. This is where the different friction factors are applied to 'trying to move'. In p_mobj.c, the friction factors are applied as you coast and slow down. phares 3/11/98: you start off slowly, then increase as you get better footing P_TeleportMove killough 8/9/98: make telefragging more consistent, preserve compatibility  kill anything occupying the position The base floor/ceiling is from the subsector that contains the point. Any contacted lines the step closer together will adjust them. stomp on any things contacted the move is ok, so unlink from the old position & link into the new position killough 11/98 MOVEMENT ITERATOR FUNCTIONS                                                                  // phares PIT_CrossLine                                                    //   | Checks to see if a PE->LS trajectory line crosses a blocking     //   V line. Returns false if it does. tmbbox holds the bounding box of the trajectory. If that box does not touch the bounding box of the line in question, then the trajectory is not blocked. If the PE is on one side of the line and the LS is on the other side, then the trajectory is blocked. Currently this assumes an infinite line, which is not quite correct. A more correct solution would be to check for an intersection of the trajectory and the line, but that takes longer and probably really isn't worth the effort. killough 3/26/98: make static line blocks trajectory                   //   ^ line doesn't block trajectory                    //   | phares killough 8/1/98: used to test intersection between thing and line
 * assuming NO movement occurs -- used to avoid sticky situations.
  PIT_CheckLine Adjusts tmfloorz and tmceilingz as lines are contacted killough 3/26/98: make static didn't hit it didn't hit it A line has been hit The moving thing's destination position will cross the given line. If this should not be allowed, return false. If the line is special, keep track of it to process later if the move is proven ok. NOTE: specials are NOT sorted by order, so two special lines that are only 8 pixels apart could be crossed in either order. killough 7/24/98: allow player to move out of 1s wall, to prevent sticking one sided line killough 8/10/98: allow bouncing objects to pass through as missiles explicitly blocking everything killough 8/1/98: allow escape killough 8/9/98: monster-blockers don't affect friends block monsters only set openrange, opentop, openbottom these define a 'window' from one sector to another across this line adjust floor & ceiling heights killough 8/1/98: remember floor linedef if contacted a special line, add it to the list 1/11/98 killough: remove limit on lines hit, by array doubling killough PIT_CheckThing killough 3/26/98: make static killough 11/98: add touchy things didn't hit it killough 11/98: This test has less information content (it's almost always false), so it should not be moved up to first, as it adds more overhead than it removes. don't clip against self killough 11/98:
    *
    * TOUCHY flag, for mines or other objects which die on contact with solids.
    * If a solid object of a different type comes in contact with a touchy
    * thing, and the touchy thing is not the sole one moving relative to fixed
    * surroundings such as walls, then the touchy thing dies immediately.
     touchy object solid object touches it touchy object is alive Thing is an armed mine ... or a sentient thing only different species ... or different players touches vertically PEs and lost souls are considered same (but Barons & Knights are intentionally not) kill object check for skulls slamming into things A flying skull is smacking something. Determine damage amount, and the skull comes to a dead stop. stop moving missiles can hit other things killough 8/10/98: bouncing non-solid things can hit other things too see if it went over / under overhead underneath Don't hit same species as originator. Explode, but do no damage. Let players missile other players. killough 8/10/98: if moving thing is not a missile, no damage is inflicted, and momentum is reduced if object hit is solid. didn't do any damage damage / explode don't traverse any more check for special pickup can remove thing killough 3/16/98: Allow non-solid moving objects to move through solid ones, by allowing the moving thing (tmthing) to move if it's non-solid, despite another solid thing being in the way. killough 4/11/98: Treat no-clipping things as not blocking return !(thing->flags & MF_SOLID);   // old code -- killough This routine checks for Lost Souls trying to be spawned      // phares across 1-sided lines, impassible lines, or "monsters can't   //   | cross" lines. Draw an imaginary line between the PE          //   V and the new Lost Soul spawn spot. If that line crosses a 'blocking' line, then disallow the spawn. Only search lines in the blocks of the blockmap where the bounding box of the trajectory line resides. Then check bounding box of the trajectory vs. the bounding box of each blocking line to see if the trajectory and the blocking line cross. Then check the PE and LS to see if they're on different sides of the blocking line. If so, return true, otherwise false. Here is the bounding box of the trajectory Determine which blocks to look in for blocking lines xl->xh, yl->yh determine the mapblock set to search prevents checking same line twice   ^   | phares MOVEMENT CLIPPING P_CheckPosition This is purely informative, nothing is modified (except things picked up). in:  a mobj_t (can be valid or invalid)  a position to be checked   (doesn't need to be related to the mobj_t->x,y) during:  special things are touched if MF_PICKUP  early out on solid lines? out:  newsubsec  floorz  ceilingz  tmdropoffz   the lowest point contacted   (monsters won't move to a dropoff)  speciallines[]  numspeciallines killough 8/1/98 Whether object can get out of a sticky situation: only players  not voodoo dolls  not under old demos  The base floor / ceiling is from the subsector that contains the point. Any contacted lines the step closer together will adjust them. Check things first, possibly picking things up. The bounding box is extended by MAXRADIUS because mobj_ts are grouped into mapblocks based on their origin point, and can overlap into adjacent blocks by up to MAXRADIUS units. check lines doesn't fit P_TryMove Attempt to move to a new position, crossing special lines unless MF_TELEPORT is set. killough 3/15/98: allow dropoff as option killough 11/98 solid wall or thing killough 7/26/98: reformatted slightly killough 8/1/98: Possibly allow escape if otherwise stuck doesn't fit mobj must lower to fit too big a step up killough 3/15/98: Allow certain objects to drop off
       * killough 7/24/98, 8/1/98:
       * Prevent monsters from getting stuck hanging off ledges
       * killough 10/98: Allow dropoffs in controlled circumstances
       * killough 11/98: Improve symmetry of clipping on stairs
        don't stand over a dropoff large jump down (e.g. dogs) dropoff allowed -- check for whether it fell more than 24  killough 8/13/98 too big a step up for bouncers under gravity killough 11/98: prevent falling objects from going up too many steps the move is ok, so unlink from the old position and link into the new position killough 11/98: keep track of dropoffs if any special lines were hit, do the effect see if the line was crossed
 * killough 9/12/98:
 *
 * Apply "torque" to objects hanging off of ledges, so that they
 * fall off. It's not really torque, since Doom has no concept of
 * rotation, but it's a convincing effect which avoids anomalies
 * such as lifeless objects hanging more than halfway off of ledges,
 * and allows objects to roll off of the edges of moving lifts, or
 * to slide up and then back down stairs, or to fall into a ditch.
 * If more than one linedef is contacted, the effects are cumulative,
 * so balancing is possible.
  If thing touches two-sided pivot linedef lever arm dropoff direction At this point, we know that the object straddles a two-sided
          * linedef, and that the object's center of mass is above-ground.
           Momentum is proportional to distance between the
          * object's center of mass and the pivot linedef.
          *
          * It is scaled by 2^(OVERDRIVE - gear). When gear is
          * increased, the momentum gradually decreases to 0 for
          * the same amount of pseudotorque, so that oscillations
          * are prevented, yet it has a chance to reach equilibrium.
           Apply momentum away from the pivot linedef.  Avoid moving too fast all of a sudden (step into "overdrive") 
 * killough 9/12/98
 *
 * Applies "torque" to objects, based on all contacted linedefs
 Remember the current state, for gear-change prevents checking same line twice  If any momentum, mark object as 'falling' using engine-internal flags  Clear the engine-internal flag indicating falling object. If the object has been moving, step up the gear.
    * This helps reach equilibrium and avoid oscillations.
    *
    * Doom has no concept of potential energy, much less
    * of rotation, so we have to creatively simulate these
    * systems somehow :)
     If not falling for a while, Reset it to full strength Else if not at max gear, move up a gear P_ThingHeightClip Takes a valid thing and adjusts the thing->floorz, thing->ceilingz, and possibly thing->z. This is called for all nearby monsters whenever a sector changes height. If the thing doesn't fit, the z will be set to the lowest value and false will be returned. what about stranding a monster partially off an edge?
    * killough 11/98: Answer: see below (upset balance if hanging off ledge)
     killough 11/98: remember dropoffs  walking monsters rise and fall with the floor killough 11/98: Possibly upset balance of objects hanging off ledges  don't adjust a floating monster unless forced to SLIDE MOVE Allows the player to slide along any angled walls. killough 8/2/98: make variables static  P_HitSlideLine Adjusts the xmove / ymove so that the next move will slide along the wall. If the floor is icy, then you can bounce off a wall.             // phares is floor icy?                               // phares   | Under icy conditions, if the angle of approach to the wall     //   V is more than 45 degrees, then you'll bounce and lose half your momentum. If less than 45 degrees, you'll slide along the wall. 45 is arbitrary and is believable. Check for the special cases of horz or vert walls. killough 10/98: only bounce if hit hard (prevents wobbling)
    * cph - DEMOSYNC - should only affect players in Boom demos?  killough 8/28/98: calc friction on demand absorb half the momentum oooff! no more movement in the Y direction absorb half the momentum oooff!                      //   ^   | phares no more movement in the X direction The wall is angled. Bounce if the angle of approach is         // phares less than 45 degrees.                                          // phares killough 3/2/98: The moveangle+=10 breaks v1.9 demo compatibility in some demos, so it needs demo_compatibility switch. prevents sudden path reversal due to        // phares rounding error                              //   |   V absorb oooff!   ^   | phares  I_Error ("SlideLine: ang>ANG180"); phares PTR_SlideTraverse don't hit the back side set openrange, opentop, openbottom. These define a 'window' from one sector to another across a line doesn't fit mobj is too high too big a step up this line doesn't block movement the line does block movement, see if it is closer than best so far stop P_SlideMove The momx / momy move is bad, so try to slide along a wall. Find the first line hit, move flush to it, and slide along it This is a kludgy mess. killough 11/98: reformatted the object that's sliding don't loop forever trace along the three leading corners move up to the wall the move must have hit the middle, so stairstep killough 3/15/98: Allow objects to drop off ledges
          *
          * phares 5/4/98: kill momentum if you can't move at all
          * This eliminates player bobbing if pressed against a wall
          * while on ice.
          *
          * killough 10/98: keep buggy code around for old Boom demos
          *
          * cph 2000/09//23: buggy code was only in Boom v2.01
           fudge a bit to make sure it doesn't hit killough 3/15/98: Allow objects to drop off ledges Now continue along the wall. First calculate remainder. clip the moves killough 10/98: affect the bobbing the same way (but not voodoo dolls)
       * cph - DEMOSYNC?  killough 3/15/98: Allow objects to drop off ledges: P_LineAttack who got hit (or NULL) killough 8/2/98: for more intelligent autoaiming  Height if not aiming up or down slopes to top and bottom of target killough 4/20/98: make static instead of using ones in p_sight.c PTR_AimTraverse Sets linetaget and aimslope when a target is aimed at. stop Crosses a two sided line. A two sided line will restrict the possible target ranges. stop stop shot continues shoot a thing can't shoot self corpse or something killough 7/19/98, 8/2/98:
    * friends don't aim at friends (except players), at least not first
     check angles to see if the thing can be aimed at shot over the thing shot under the thing this thing can be hit! don't go any farther PTR_ShootTraverse crosses a two sided (really 2s) line killough 11/98: simplify shot continues hit line position a bit closer don't shoot the sky! it's a sky hack wall fix bullet-eaters -- killough: WARNING: Almost all demos will lose sync without this demo_compatibility flag check!!! killough 1/18/98 Spawn bullet puffs. don't go any farther shoot a thing can't shoot self corpse or something check angles to see if the thing can be aimed at shot over the thing shot under the thing hit thing position a bit closer Spawn bullet puffs or blod spots, depending on target type. don't go any farther P_AimLineAttack can't shoot outside view angles killough 8/2/98: prevent friends from aiming at friends  P_LineAttack If damage == 0, it is just a test trace that will leave linetarget set. USE LINES can't use through a wall not a special line, but keep checking  return false;   // don't use back sideWAS can't use for than one special line in a rowjff 3/21/98 NOW multiple use allowed with enabling line flag Returns false if a "oof" sound should be made because of a blocking linedef. Makes 2s middles which are impassable, as well as 2s uppers and lowers which block the player, cause the sound effect when the player tries to activate them. Specials are excluded, although it is assumed that all special linedefs within reach have been considered and rejected already (see P_UseLines). by Lee Killough This linedef Ignore specials Always blocking Find openings No opening Too high it blocks Too low it blocks P_UseLines Looks for special lines in front of the player to activate. old code: P_PathTraverse ( x1, y1, x2, y2, PT_ADDLINES, PTR_UseTraverse ); This added test makes the "oof" sound work on 2s lines -- killough: RADIUS ATTACK PIT_RadiusAttack "bombsource" is the creature that caused the explosion at "bombspot". killough 8/20/98: allow bouncers to take damage
    * (missile bouncers are already excluded with MF_NOBLOCKMAP)
     Boss spider and cyborg take no damage from concussion. killough 8/10/98: allow grenades to hurt anyone, unless fired by Cyberdemons, in which case it won't hurt Cybers. out of range must be in direct path P_RadiusAttack Source is the creature that caused the explosion at spot. SECTOR HEIGHT CHANGING After modifying a sectors floor or ceiling height, call this routine to adjust the positions of all things that touch the sector. If anything doesn't fit anymore, true will be returned. If crunch is true, they will take damage  as they are being crushed. If Crunch is false, you should set the sector height back  the way it was and call P_ChangeSector again  to undo the changes. PIT_ChangeSector keep checking crunch bodies to giblets keep checking crunch dropped items keep checking killough 11/98: kill touchy things immediately  kill object keep checking assume it is bloody gibs or something spray blood in a random direction killough 8/10/98: remove dependence on order of evaluation  keep checking (crush other things) P_ChangeSector ARRGGHHH!!!! This is horrendously slow!!! killough 3/14/98 re-check heights for all things near the moving sector P_CheckSector jff 3/19/98 added to just check monsters on the periphery of a moving sector instead of all in bounding box of the sector. Both more accurate and faster. use the old routine for old demos though  killough 4/4/98: scan list front-to-back until empty or exhausted, restarting from beginning after each thing is processed. Avoids crashes, and is sure to examine all things in the sector, and only the things which are in the sector, until a steady-state is reached. Things can arbitrarily be inserted and removed and it won't mess up. killough 4/7/98: simplified to avoid using complicated counter Mark all things invalid go through list unprocessed thing found mark thing as processedjff 4/7/98 don't do these process it exit and start over repeat from scratch until all things left are marked valid CPhipps - Use block memory allocator here P_PutSecnode() returns a node to the freelist. phares 3/16/98 P_AddSecnode() searches the current list to see if this sector is already there. If not, it adds a sector node at the head of the list of sectors this object appears in. This is called when creating a list of nodes that will get linked in later. Returns a pointer to the new node. Already have a node for this sector? Yes. Setting m_thing says 'keep it'. Couldn't find an existing node for this sector. Add one at the head of the list. killough 4/4/98, 4/7/98: mark new nodes unvisited. sector mobj prev node on Thing thread next node on Thing thread set back link on Thing Add new node at head of sector thread starting at s->touching_thinglist prev node on sector thread next node on sector thread P_DelSecnode() deletes a sector node from the list of sectors this object appears in. Returns a pointer to the next node on the linked list, or NULL. prev node on thing thread next node on thing thread prev node on sector thread next node on sector thread Unlink from the Thing thread. The Thing thread begins at sector_list and not from mobj_t->touching_sectorlist. Unlink from the sector thread. This thread begins at sector_t->touching_thinglist. Return this node to the freelist phares 3/13/98 Delete an entire sector list phares 3/14/98 PIT_GetSectors Locates all the sectors the object is in by looking at the lines that cross through it. You have already decided that the object is allowed at this location, so don't bother with checking impassable or blocking lines. This line crosses through the object. Collect the sector(s) from the line and add to the sector_list you're examining. If the Thing ends up being allowed to move to this position, then the sector_list will be attached to the Thing's mobj_t at touching_sectorlist. Don't assume all lines are 2-sided, since some Things
    * like MT_TFOG are allowed regardless of whether their radius takes
    * them beyond an impassable linedef.
    *
    * killough 3/27/98, 4/4/98:
    * Use sidedefs instead of 2s flag to determine two-sidedness.
    * killough 8/1/98: avoid duplicate if same sector on both sides
    * cph - DEMOSYNC?  phares 3/14/98 P_CreateSecNodeList alters/creates the sector_list that shows what sectors the object resides in. cph - see comment at func end  ditto  First, clear out the existing m_thing fields. As each node is added or verified as needed, m_thing will be set properly. When finished, delete all nodes where m_thing is still NULL. These represent the sectors the Thing has vacated. used to make sure we only process a line once Add the sector of the (x,y) point to sector_list. Now delete any nodes that won't be used. These are the ones where m_thing is still NULL. cph -
    * This is the strife we get into for using global variables. tmthing
    *  is being used by several different functions calling
    *  P_BlockThingIterator, including functions that can be called *from*
    *  P_BlockThingIterator. Using a global tmthing is not reentrant.
    * OTOH for Boom/MBF demos we have to preserve the buggy behavior.
    *  Fun. We restore its previous value unless we're in a Boom/MBF demo.
     And, duh, the same for tmx/y - cph 2002/09/22
    * And for tmbbox - cph 2003/08/10  ||
                     (compatibility_level >= prboom_4_compatibility)  cphipps 2004/08/30 -
 * Must clear tmthing at tic end, as it might contain a pointer to a removed thinker, or the level might have ended/been ended and we clear the objects it was pointing too. Hopefully we don't need to carry this between tics for sync.  Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *  Movement, collision handling.
 *  Shooting and aiming.
 *
 *----------------------------------------------------------------------------- Pain Elemental position for Lost Soul checks // phares Pain Elemental position for Lost Soul checks // phares Lost Soul position for Lost Soul checks      // phares Lost Soul position for Lost Soul checks      // phares If "floatok" true, move would be ok if within "tmfloorz - tmceilingz". killough 11/98: if "felldown" true, object was pushed down ledge  The tm* items are used to hold information globally, usually for line or object intersection checking bounding box for line intersection checks floor you'd hit if free to fall ceiling of sector you're in dropoff on other side of line you're crossing keep track of the line that lowers the ceiling, so missiles don't explode against sky hack walls killough 8/11/98: blocking linedef  killough 8/1/98: Highest touched floor  killough 8/1/98: whether to allow unsticking  keep track of special lines as they are hit, but don't process them until the move is proven valid 1/11/98 killough: removed limit on special lines crossed new code -- killough killough Temporary holder for thing_sectorlist threads phares 3/16/98 TELEPORT MOVE PIT_StompThing killough 8/9/98: whether to telefrag at exit  phares 9/10/98: moved this self-check to start of routine don't clip against self Can't shoot it? Can't stomp it! didn't hit it monsters don't stomp things except on boss level killough 8/9/98: make consistent across all levels Stomp!
 * killough 8/28/98:
 *
 * P_GetFriction()
 *
 * Returns the friction associated with a particular mobj.
  Assign the friction value to objects on the floor, non-floating,
    * and clipped. Normally the object's friction value is kept at
    * ORIG_FRICTION and this thinker changes it for icy or muddy floors.
    *
    * When the object is straddling sectors with the same
    * floorheight that have different frictions, use the lowest
    * friction value (muddy has precedence over icy).
     phares 3/19/98
 * P_GetMoveFactor() returns the value by which the x,y
 * movements are multiplied to add to player movement.
 *
 * killough 8/28/98: rewritten
  If the floor is icy or muddy, it's harder to get moving. This is where the different friction factors are applied to 'trying to move'. In p_mobj.c, the friction factors are applied as you coast and slow down. phares 3/11/98: you start off slowly, then increase as you get better footing P_TeleportMove killough 8/9/98: make telefragging more consistent, preserve compatibility  kill anything occupying the position The base floor/ceiling is from the subsector that contains the point. Any contacted lines the step closer together will adjust them. stomp on any things contacted the move is ok, so unlink from the old position & link into the new position killough 11/98 MOVEMENT ITERATOR FUNCTIONS                                                                  // phares PIT_CrossLine                                                    //   | Checks to see if a PE->LS trajectory line crosses a blocking     //   V line. Returns false if it does. tmbbox holds the bounding box of the trajectory. If that box does not touch the bounding box of the line in question, then the trajectory is not blocked. If the PE is on one side of the line and the LS is on the other side, then the trajectory is blocked. Currently this assumes an infinite line, which is not quite correct. A more correct solution would be to check for an intersection of the trajectory and the line, but that takes longer and probably really isn't worth the effort. killough 3/26/98: make static line blocks trajectory                   //   ^ line doesn't block trajectory                    //   | phares killough 8/1/98: used to test intersection between thing and line
 * assuming NO movement occurs -- used to avoid sticky situations.
  PIT_CheckLine Adjusts tmfloorz and tmceilingz as lines are contacted killough 3/26/98: make static didn't hit it didn't hit it A line has been hit The moving thing's destination position will cross the given line. If this should not be allowed, return false. If the line is special, keep track of it to process later if the move is proven ok. NOTE: specials are NOT sorted by order, so two special lines that are only 8 pixels apart could be crossed in either order. killough 7/24/98: allow player to move out of 1s wall, to prevent sticking one sided line killough 8/10/98: allow bouncing objects to pass through as missiles explicitly blocking everything killough 8/1/98: allow escape killough 8/9/98: monster-blockers don't affect friends block monsters only set openrange, opentop, openbottom these define a 'window' from one sector to another across this line adjust floor & ceiling heights killough 8/1/98: remember floor linedef if contacted a special line, add it to the list 1/11/98 killough: remove limit on lines hit, by array doubling killough PIT_CheckThing killough 3/26/98: make static killough 11/98: add touchy things didn't hit it killough 11/98: This test has less information content (it's almost always false), so it should not be moved up to first, as it adds more overhead than it removes. don't clip against self killough 11/98:
    *
    * TOUCHY flag, for mines or other objects which die on contact with solids.
    * If a solid object of a different type comes in contact with a touchy
    * thing, and the touchy thing is not the sole one moving relative to fixed
    * surroundings such as walls, then the touchy thing dies immediately.
     touchy object solid object touches it touchy object is alive Thing is an armed mine ... or a sentient thing only different species ... or different players touches vertically PEs and lost souls are considered same (but Barons & Knights are intentionally not) kill object check for skulls slamming into things A flying skull is smacking something. Determine damage amount, and the skull comes to a dead stop. stop moving missiles can hit other things killough 8/10/98: bouncing non-solid things can hit other things too see if it went over / under overhead underneath Don't hit same species as originator. Explode, but do no damage. Let players missile other players. killough 8/10/98: if moving thing is not a missile, no damage is inflicted, and momentum is reduced if object hit is solid. didn't do any damage damage / explode don't traverse any more check for special pickup can remove thing killough 3/16/98: Allow non-solid moving objects to move through solid ones, by allowing the moving thing (tmthing) to move if it's non-solid, despite another solid thing being in the way. killough 4/11/98: Treat no-clipping things as not blocking return !(thing->flags & MF_SOLID);   // old code -- killough This routine checks for Lost Souls trying to be spawned      // phares across 1-sided lines, impassible lines, or "monsters can't   //   | cross" lines. Draw an imaginary line between the PE          //   V and the new Lost Soul spawn spot. If that line crosses a 'blocking' line, then disallow the spawn. Only search lines in the blocks of the blockmap where the bounding box of the trajectory line resides. Then check bounding box of the trajectory vs. the bounding box of each blocking line to see if the trajectory and the blocking line cross. Then check the PE and LS to see if they're on different sides of the blocking line. If so, return true, otherwise false. Here is the bounding box of the trajectory Determine which blocks to look in for blocking lines xl->xh, yl->yh determine the mapblock set to search prevents checking same line twice   ^   | phares MOVEMENT CLIPPING P_CheckPosition This is purely informative, nothing is modified (except things picked up). in:  a mobj_t (can be valid or invalid)  a position to be checked   (doesn't need to be related to the mobj_t->x,y) during:  special things are touched if MF_PICKUP  early out on solid lines? out:  newsubsec  floorz  ceilingz  tmdropoffz   the lowest point contacted   (monsters won't move to a dropoff)  speciallines[]  numspeciallines killough 8/1/98 Whether object can get out of a sticky situation: only players  not voodoo dolls  not under old demos  The base floor / ceiling is from the subsector that contains the point. Any contacted lines the step closer together will adjust them. Check things first, possibly picking things up. The bounding box is extended by MAXRADIUS because mobj_ts are grouped into mapblocks based on their origin point, and can overlap into adjacent blocks by up to MAXRADIUS units. check lines doesn't fit P_TryMove Attempt to move to a new position, crossing special lines unless MF_TELEPORT is set. killough 3/15/98: allow dropoff as option killough 11/98 solid wall or thing killough 7/26/98: reformatted slightly killough 8/1/98: Possibly allow escape if otherwise stuck doesn't fit mobj must lower to fit too big a step up killough 3/15/98: Allow certain objects to drop off
       * killough 7/24/98, 8/1/98:
       * Prevent monsters from getting stuck hanging off ledges
       * killough 10/98: Allow dropoffs in controlled circumstances
       * killough 11/98: Improve symmetry of clipping on stairs
        don't stand over a dropoff large jump down (e.g. dogs) dropoff allowed -- check for whether it fell more than 24  killough 8/13/98 too big a step up for bouncers under gravity killough 11/98: prevent falling objects from going up too many steps the move is ok, so unlink from the old position and link into the new position killough 11/98: keep track of dropoffs if any special lines were hit, do the effect see if the line was crossed
 * killough 9/12/98:
 *
 * Apply "torque" to objects hanging off of ledges, so that they
 * fall off. It's not really torque, since Doom has no concept of
 * rotation, but it's a convincing effect which avoids anomalies
 * such as lifeless objects hanging more than halfway off of ledges,
 * and allows objects to roll off of the edges of moving lifts, or
 * to slide up and then back down stairs, or to fall into a ditch.
 * If more than one linedef is contacted, the effects are cumulative,
 * so balancing is possible.
  If thing touches two-sided pivot linedef lever arm dropoff direction At this point, we know that the object straddles a two-sided
          * linedef, and that the object's center of mass is above-ground.
           Momentum is proportional to distance between the
          * object's center of mass and the pivot linedef.
          *
          * It is scaled by 2^(OVERDRIVE - gear). When gear is
          * increased, the momentum gradually decreases to 0 for
          * the same amount of pseudotorque, so that oscillations
          * are prevented, yet it has a chance to reach equilibrium.
           Apply momentum away from the pivot linedef.  Avoid moving too fast all of a sudden (step into "overdrive") 
 * killough 9/12/98
 *
 * Applies "torque" to objects, based on all contacted linedefs
 Remember the current state, for gear-change prevents checking same line twice  If any momentum, mark object as 'falling' using engine-internal flags  Clear the engine-internal flag indicating falling object. If the object has been moving, step up the gear.
    * This helps reach equilibrium and avoid oscillations.
    *
    * Doom has no concept of potential energy, much less
    * of rotation, so we have to creatively simulate these
    * systems somehow :)
     If not falling for a while, Reset it to full strength Else if not at max gear, move up a gear P_ThingHeightClip Takes a valid thing and adjusts the thing->floorz, thing->ceilingz, and possibly thing->z. This is called for all nearby monsters whenever a sector changes height. If the thing doesn't fit, the z will be set to the lowest value and false will be returned. what about stranding a monster partially off an edge?
    * killough 11/98: Answer: see below (upset balance if hanging off ledge)
     killough 11/98: remember dropoffs  walking monsters rise and fall with the floor killough 11/98: Possibly upset balance of objects hanging off ledges  don't adjust a floating monster unless forced to SLIDE MOVE Allows the player to slide along any angled walls. killough 8/2/98: make variables static  P_HitSlideLine Adjusts the xmove / ymove so that the next move will slide along the wall. If the floor is icy, then you can bounce off a wall.             // phares is floor icy?                               // phares   | Under icy conditions, if the angle of approach to the wall     //   V is more than 45 degrees, then you'll bounce and lose half your momentum. If less than 45 degrees, you'll slide along the wall. 45 is arbitrary and is believable. Check for the special cases of horz or vert walls. killough 10/98: only bounce if hit hard (prevents wobbling)
    * cph - DEMOSYNC - should only affect players in Boom demos?  killough 8/28/98: calc friction on demand absorb half the momentum oooff! no more movement in the Y direction absorb half the momentum oooff!                      //   ^   | phares no more movement in the X direction The wall is angled. Bounce if the angle of approach is         // phares less than 45 degrees.                                          // phares killough 3/2/98: The moveangle+=10 breaks v1.9 demo compatibility in some demos, so it needs demo_compatibility switch. prevents sudden path reversal due to        // phares rounding error                              //   |   V absorb oooff!   ^   | phares  I_Error ("SlideLine: ang>ANG180"); phares PTR_SlideTraverse don't hit the back side set openrange, opentop, openbottom. These define a 'window' from one sector to another across a line doesn't fit mobj is too high too big a step up this line doesn't block movement the line does block movement, see if it is closer than best so far stop P_SlideMove The momx / momy move is bad, so try to slide along a wall. Find the first line hit, move flush to it, and slide along it This is a kludgy mess. killough 11/98: reformatted the object that's sliding don't loop forever trace along the three leading corners move up to the wall the move must have hit the middle, so stairstep killough 3/15/98: Allow objects to drop off ledges
          *
          * phares 5/4/98: kill momentum if you can't move at all
          * This eliminates player bobbing if pressed against a wall
          * while on ice.
          *
          * killough 10/98: keep buggy code around for old Boom demos
          *
          * cph 2000/09//23: buggy code was only in Boom v2.01
           fudge a bit to make sure it doesn't hit killough 3/15/98: Allow objects to drop off ledges Now continue along the wall. First calculate remainder. clip the moves killough 10/98: affect the bobbing the same way (but not voodoo dolls)
       * cph - DEMOSYNC?  killough 3/15/98: Allow objects to drop off ledges: P_LineAttack who got hit (or NULL) killough 8/2/98: for more intelligent autoaiming  Height if not aiming up or down slopes to top and bottom of target killough 4/20/98: make static instead of using ones in p_sight.c PTR_AimTraverse Sets linetaget and aimslope when a target is aimed at. stop Crosses a two sided line. A two sided line will restrict the possible target ranges. stop stop shot continues shoot a thing can't shoot self corpse or something killough 7/19/98, 8/2/98:
    * friends don't aim at friends (except players), at least not first
     check angles to see if the thing can be aimed at shot over the thing shot under the thing this thing can be hit! don't go any farther PTR_ShootTraverse crosses a two sided (really 2s) line killough 11/98: simplify shot continues hit line position a bit closer don't shoot the sky! it's a sky hack wall fix bullet-eaters -- killough: WARNING: Almost all demos will lose sync without this demo_compatibility flag check!!! killough 1/18/98 Spawn bullet puffs. don't go any farther shoot a thing can't shoot self corpse or something check angles to see if the thing can be aimed at shot over the thing shot under the thing hit thing position a bit closer Spawn bullet puffs or blod spots, depending on target type. don't go any farther P_AimLineAttack can't shoot outside view angles killough 8/2/98: prevent friends from aiming at friends  P_LineAttack If damage == 0, it is just a test trace that will leave linetarget set. USE LINES can't use through a wall not a special line, but keep checking  return false;   // don't use back sideWAS can't use for than one special line in a rowjff 3/21/98 NOW multiple use allowed with enabling line flag Returns false if a "oof" sound should be made because of a blocking linedef. Makes 2s middles which are impassable, as well as 2s uppers and lowers which block the player, cause the sound effect when the player tries to activate them. Specials are excluded, although it is assumed that all special linedefs within reach have been considered and rejected already (see P_UseLines). by Lee Killough This linedef Ignore specials Always blocking Find openings No opening Too high it blocks Too low it blocks P_UseLines Looks for special lines in front of the player to activate. old code: P_PathTraverse ( x1, y1, x2, y2, PT_ADDLINES, PTR_UseTraverse ); This added test makes the "oof" sound work on 2s lines -- killough: RADIUS ATTACK PIT_RadiusAttack "bombsource" is the creature that caused the explosion at "bombspot". killough 8/20/98: allow bouncers to take damage
    * (missile bouncers are already excluded with MF_NOBLOCKMAP)
     Boss spider and cyborg take no damage from concussion. killough 8/10/98: allow grenades to hurt anyone, unless fired by Cyberdemons, in which case it won't hurt Cybers. out of range must be in direct path P_RadiusAttack Source is the creature that caused the explosion at spot. SECTOR HEIGHT CHANGING After modifying a sectors floor or ceiling height, call this routine to adjust the positions of all things that touch the sector. If anything doesn't fit anymore, true will be returned. If crunch is true, they will take damage  as they are being crushed. If Crunch is false, you should set the sector height back  the way it was and call P_ChangeSector again  to undo the changes. PIT_ChangeSector keep checking crunch bodies to giblets keep checking crunch dropped items keep checking killough 11/98: kill touchy things immediately  kill object keep checking assume it is bloody gibs or something spray blood in a random direction killough 8/10/98: remove dependence on order of evaluation  keep checking (crush other things) P_ChangeSector ARRGGHHH!!!! This is horrendously slow!!! killough 3/14/98 re-check heights for all things near the moving sector P_CheckSector jff 3/19/98 added to just check monsters on the periphery of a moving sector instead of all in bounding box of the sector. Both more accurate and faster. use the old routine for old demos though  killough 4/4/98: scan list front-to-back until empty or exhausted, restarting from beginning after each thing is processed. Avoids crashes, and is sure to examine all things in the sector, and only the things which are in the sector, until a steady-state is reached. Things can arbitrarily be inserted and removed and it won't mess up. killough 4/7/98: simplified to avoid using complicated counter Mark all things invalid go through list unprocessed thing found mark thing as processedjff 4/7/98 don't do these process it exit and start over repeat from scratch until all things left are marked valid CPhipps - Use block memory allocator here P_PutSecnode() returns a node to the freelist. phares 3/16/98 P_AddSecnode() searches the current list to see if this sector is already there. If not, it adds a sector node at the head of the list of sectors this object appears in. This is called when creating a list of nodes that will get linked in later. Returns a pointer to the new node. Already have a node for this sector? Yes. Setting m_thing says 'keep it'. Couldn't find an existing node for this sector. Add one at the head of the list. killough 4/4/98, 4/7/98: mark new nodes unvisited. sector mobj prev node on Thing thread next node on Thing thread set back link on Thing Add new node at head of sector thread starting at s->touching_thinglist prev node on sector thread next node on sector thread P_DelSecnode() deletes a sector node from the list of sectors this object appears in. Returns a pointer to the next node on the linked list, or NULL. prev node on thing thread next node on thing thread prev node on sector thread next node on sector thread Unlink from the Thing thread. The Thing thread begins at sector_list and not from mobj_t->touching_sectorlist. Unlink from the sector thread. This thread begins at sector_t->touching_thinglist. Return this node to the freelist phares 3/13/98 Delete an entire sector list phares 3/14/98 PIT_GetSectors Locates all the sectors the object is in by looking at the lines that cross through it. You have already decided that the object is allowed at this location, so don't bother with checking impassable or blocking lines. This line crosses through the object. Collect the sector(s) from the line and add to the sector_list you're examining. If the Thing ends up being allowed to move to this position, then the sector_list will be attached to the Thing's mobj_t at touching_sectorlist. Don't assume all lines are 2-sided, since some Things
    * like MT_TFOG are allowed regardless of whether their radius takes
    * them beyond an impassable linedef.
    *
    * killough 3/27/98, 4/4/98:
    * Use sidedefs instead of 2s flag to determine two-sidedness.
    * killough 8/1/98: avoid duplicate if same sector on both sides
    * cph - DEMOSYNC?  phares 3/14/98 P_CreateSecNodeList alters/creates the sector_list that shows what sectors the object resides in. cph - see comment at func end  ditto  First, clear out the existing m_thing fields. As each node is added or verified as needed, m_thing will be set properly. When finished, delete all nodes where m_thing is still NULL. These represent the sectors the Thing has vacated. used to make sure we only process a line once Add the sector of the (x,y) point to sector_list. Now delete any nodes that won't be used. These are the ones where m_thing is still NULL. cph -
    * This is the strife we get into for using global variables. tmthing
    *  is being used by several different functions calling
    *  P_BlockThingIterator, including functions that can be called *from*
    *  P_BlockThingIterator. Using a global tmthing is not reentrant.
    * OTOH for Boom/MBF demos we have to preserve the buggy behavior.
    *  Fun. We restore its previous value unless we're in a Boom/MBF demo.
     And, duh, the same for tmx/y - cph 2002/09/22
    * And for tmbbox - cph 2003/08/10  ||
                     (compatibility_level >= prboom_4_compatibility)  cphipps 2004/08/30 -
 * Must clear tmthing at tic end, as it might contain a pointer to a removed thinker, or the level might have ended/been ended and we clear the objects it was pointing too. Hopefully we don't need to carry this between tics for sync. 