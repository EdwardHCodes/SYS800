
 * (C) Copyright 2004
 * Texas Instruments
 * Richard Woodruff <r-woodruff2@ti.com>
 *
 * (C) Copyright 2002
 * Sysgo Real-Time Solutions, GmbH <www.elinos.com>
 * Marius Groeger <mgroeger@sysgo.de>
 * Alex Zuepke <azu@sysgo.de>
 *
 * (C) Copyright 2002
 * Gary Jennejohn, DENX Software Engineering, <garyj@denx.de>
 *
 * See file CREDITS for list of people who contributed to this
 * project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307 USA
  macro to read the 32 bit timer  Start the counter ticking up  reload value on overflow mask to enable timer start timer  reset time  capture current incrementer value  start "advancing" time stamp 
 * timer without interrupts
  delay x useconds AND preserve advance timestamp value  if "big" number, spread normalization to seconds  start to normalize for usec to ticks per sec  find number of "ticks" to wait to achieve target  finish normalize.  get current timestamp  loop till event NOP else small number, convert to hw ticks  timeout is no more than 0.1s, and the hw timer will roll over at most once  loop till event NOP current tick value  normal mode (non roll)  move stamp fordward with absoulte diff ticks  we have rollover of incrementer 
 * This function is derived from PowerPC code (read timebase as long long).
 * On ARM it just returns the timer value.
 
 * This function is derived from PowerPC code (timebase clock frequency).
 * On ARM it returns the number of timer ticks per second.
 
 * (C) Copyright 2004
 * Texas Instruments
 * Richard Woodruff <r-woodruff2@ti.com>
 *
 * (C) Copyright 2002
 * Sysgo Real-Time Solutions, GmbH <www.elinos.com>
 * Marius Groeger <mgroeger@sysgo.de>
 * Alex Zuepke <azu@sysgo.de>
 *
 * (C) Copyright 2002
 * Gary Jennejohn, DENX Software Engineering, <garyj@denx.de>
 *
 * See file CREDITS for list of people who contributed to this
 * project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307 USA
  macro to read the 32 bit timer  Start the counter ticking up  reload value on overflow mask to enable timer start timer  reset time  capture current incrementer value  start "advancing" time stamp 
 * timer without interrupts
  delay x useconds AND preserve advance timestamp value  if "big" number, spread normalization to seconds  start to normalize for usec to ticks per sec  find number of "ticks" to wait to achieve target  finish normalize.  get current timestamp  loop till event NOP else small number, convert to hw ticks  timeout is no more than 0.1s, and the hw timer will roll over at most once  loop till event NOP current tick value  normal mode (non roll)  move stamp fordward with absoulte diff ticks  we have rollover of incrementer 
 * This function is derived from PowerPC code (read timebase as long long).
 * On ARM it just returns the timer value.
 
 * This function is derived from PowerPC code (timebase clock frequency).
 * On ARM it returns the number of timer ticks per second.
 
 * (C) Copyright 2004
 * Texas Instruments
 * Richard Woodruff <r-woodruff2@ti.com>
 *
 * (C) Copyright 2002
 * Sysgo Real-Time Solutions, GmbH <www.elinos.com>
 * Marius Groeger <mgroeger@sysgo.de>
 * Alex Zuepke <azu@sysgo.de>
 *
 * (C) Copyright 2002
 * Gary Jennejohn, DENX Software Engineering, <garyj@denx.de>
 *
 * See file CREDITS for list of people who contributed to this
 * project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307 USA
  macro to read the 32 bit timer  Start the counter ticking up  reload value on overflow mask to enable timer start timer  reset time  capture current incrementer value  start "advancing" time stamp 
 * timer without interrupts
  delay x useconds AND preserve advance timestamp value  if "big" number, spread normalization to seconds  start to normalize for usec to ticks per sec  find number of "ticks" to wait to achieve target  finish normalize.  get current timestamp  loop till event NOP else small number, convert to hw ticks  timeout is no more than 0.1s, and the hw timer will roll over at most once  loop till event NOP current tick value  normal mode (non roll)  move stamp fordward with absoulte diff ticks  we have rollover of incrementer 
 * This function is derived from PowerPC code (read timebase as long long).
 * On ARM it just returns the timer value.
 
 * This function is derived from PowerPC code (timebase clock frequency).
 * On ARM it returns the number of timer ticks per second.
 
 * (C) Copyright 2004
 * Texas Instruments
 * Richard Woodruff <r-woodruff2@ti.com>
 *
 * (C) Copyright 2002
 * Sysgo Real-Time Solutions, GmbH <www.elinos.com>
 * Marius Groeger <mgroeger@sysgo.de>
 * Alex Zuepke <azu@sysgo.de>
 *
 * (C) Copyright 2002
 * Gary Jennejohn, DENX Software Engineering, <garyj@denx.de>
 *
 * See file CREDITS for list of people who contributed to this
 * project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307 USA
  macro to read the 32 bit timer  Start the counter ticking up  reload value on overflow mask to enable timer start timer  reset time  capture current incrementer value  start "advancing" time stamp 
 * timer without interrupts
  delay x useconds AND preserve advance timestamp value  if "big" number, spread normalization to seconds  start to normalize for usec to ticks per sec  find number of "ticks" to wait to achieve target  finish normalize.  get current timestamp  loop till event NOP else small number, convert to hw ticks  timeout is no more than 0.1s, and the hw timer will roll over at most once  loop till event NOP current tick value  normal mode (non roll)  move stamp fordward with absoulte diff ticks  we have rollover of incrementer 
 * This function is derived from PowerPC code (read timebase as long long).
 * On ARM it just returns the timer value.
 
 * This function is derived from PowerPC code (timebase clock frequency).
 * On ARM it returns the number of timer ticks per second.
 
 * (C) Copyright 2004
 * Texas Instruments
 * Richard Woodruff <r-woodruff2@ti.com>
 *
 * (C) Copyright 2002
 * Sysgo Real-Time Solutions, GmbH <www.elinos.com>
 * Marius Groeger <mgroeger@sysgo.de>
 * Alex Zuepke <azu@sysgo.de>
 *
 * (C) Copyright 2002
 * Gary Jennejohn, DENX Software Engineering, <garyj@denx.de>
 *
 * See file CREDITS for list of people who contributed to this
 * project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307 USA
  macro to read the 32 bit timer  Start the counter ticking up  reload value on overflow mask to enable timer start timer  reset time  capture current incrementer value  start "advancing" time stamp 
 * timer without interrupts
  delay x useconds AND preserve advance timestamp value  if "big" number, spread normalization to seconds  start to normalize for usec to ticks per sec  find number of "ticks" to wait to achieve target  finish normalize.  get current timestamp  loop till event NOP else small number, convert to hw ticks  timeout is no more than 0.1s, and the hw timer will roll over at most once  loop till event NOP current tick value  normal mode (non roll)  move stamp fordward with absoulte diff ticks  we have rollover of incrementer 
 * This function is derived from PowerPC code (read timebase as long long).
 * On ARM it just returns the timer value.
 
 * This function is derived from PowerPC code (timebase clock frequency).
 * On ARM it returns the number of timer ticks per second.
 
 * (C) Copyright 2004
 * Texas Instruments
 * Richard Woodruff <r-woodruff2@ti.com>
 *
 * (C) Copyright 2002
 * Sysgo Real-Time Solutions, GmbH <www.elinos.com>
 * Marius Groeger <mgroeger@sysgo.de>
 * Alex Zuepke <azu@sysgo.de>
 *
 * (C) Copyright 2002
 * Gary Jennejohn, DENX Software Engineering, <garyj@denx.de>
 *
 * See file CREDITS for list of people who contributed to this
 * project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307 USA
  macro to read the 32 bit timer  Start the counter ticking up  reload value on overflow mask to enable timer start timer  reset time  capture current incrementer value  start "advancing" time stamp 
 * timer without interrupts
  delay x useconds AND preserve advance timestamp value  if "big" number, spread normalization to seconds  start to normalize for usec to ticks per sec  find number of "ticks" to wait to achieve target  finish normalize.  get current timestamp  loop till event NOP else small number, convert to hw ticks  timeout is no more than 0.1s, and the hw timer will roll over at most once  loop till event NOP current tick value  normal mode (non roll)  move stamp fordward with absoulte diff ticks  we have rollover of incrementer 
 * This function is derived from PowerPC code (read timebase as long long).
 * On ARM it just returns the timer value.
 
 * This function is derived from PowerPC code (timebase clock frequency).
 * On ARM it returns the number of timer ticks per second.
 
 * (C) Copyright 2004
 * Texas Instruments
 * Richard Woodruff <r-woodruff2@ti.com>
 *
 * (C) Copyright 2002
 * Sysgo Real-Time Solutions, GmbH <www.elinos.com>
 * Marius Groeger <mgroeger@sysgo.de>
 * Alex Zuepke <azu@sysgo.de>
 *
 * (C) Copyright 2002
 * Gary Jennejohn, DENX Software Engineering, <garyj@denx.de>
 *
 * See file CREDITS for list of people who contributed to this
 * project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307 USA
  macro to read the 32 bit timer  Start the counter ticking up  reload value on overflow mask to enable timer start timer  reset time  capture current incrementer value  start "advancing" time stamp 
 * timer without interrupts
  delay x useconds AND preserve advance timestamp value  if "big" number, spread normalization to seconds  start to normalize for usec to ticks per sec  find number of "ticks" to wait to achieve target  finish normalize.  get current timestamp  loop till event NOP else small number, convert to hw ticks  timeout is no more than 0.1s, and the hw timer will roll over at most once  loop till event NOP current tick value  normal mode (non roll)  move stamp fordward with absoulte diff ticks  we have rollover of incrementer 
 * This function is derived from PowerPC code (read timebase as long long).
 * On ARM it just returns the timer value.
 
 * This function is derived from PowerPC code (timebase clock frequency).
 * On ARM it returns the number of timer ticks per second.
 
 * (C) Copyright 2004
 * Texas Instruments
 * Richard Woodruff <r-woodruff2@ti.com>
 *
 * (C) Copyright 2002
 * Sysgo Real-Time Solutions, GmbH <www.elinos.com>
 * Marius Groeger <mgroeger@sysgo.de>
 * Alex Zuepke <azu@sysgo.de>
 *
 * (C) Copyright 2002
 * Gary Jennejohn, DENX Software Engineering, <garyj@denx.de>
 *
 * See file CREDITS for list of people who contributed to this
 * project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307 USA
  macro to read the 32 bit timer  Start the counter ticking up  reload value on overflow mask to enable timer start timer  reset time  capture current incrementer value  start "advancing" time stamp 
 * timer without interrupts
  delay x useconds AND preserve advance timestamp value  if "big" number, spread normalization to seconds  start to normalize for usec to ticks per sec  find number of "ticks" to wait to achieve target  finish normalize.  get current timestamp  loop till event NOP else small number, convert to hw ticks  timeout is no more than 0.1s, and the hw timer will roll over at most once  loop till event NOP current tick value  normal mode (non roll)  move stamp fordward with absoulte diff ticks  we have rollover of incrementer 
 * This function is derived from PowerPC code (read timebase as long long).
 * On ARM it just returns the timer value.
 
 * This function is derived from PowerPC code (timebase clock frequency).
 * On ARM it returns the number of timer ticks per second.
 