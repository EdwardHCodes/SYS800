**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007-2009 Joshua Simmons <mud at majidejima dot com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** for xlcd_filltriangle  pixel offsets for the board on the LCD  current cursor position in board coordinates (intersections, not
   pixels)  we way need to "move" our notion of which intersections to draw when
   the cursor moves, since we can be zoomed in (and often will be) this is
   used to signal when we need to do that  function prototypes  don't overwrite real board marks with last-move or variation
           marks  moves, 'mark', 'square'  purposely don't break here, draw small the same as
                       a triangle  don't have to undo the colors for LCD_DEPTH > 1, most
                   functions assume bg and fg get clobbered  draw the points on the axes to make the loop easier  Now walk from the very top of the circle to 1/8th of the way around
       to the right.  For each point, draw the 8 symmetrical points.  walk one pixel to the right  And then adjust our discriminant, and adjust y if we've
           ventured outside of the circle. This boils down to walking a
           tightrope between being inside and outside the circle.  The
           updating functions are taken from expanding the discriminant
           function f(x, y) = x^2 + y^2 - r^2 after substituting in x + 1
           and y - 1 and then subtracting out f(x, y)  each line takes care of 2 points on the circle so we only
               need 4  Draw all 8 symmetrical points  the size of the string, in pixels, when drawn vertically  GBN_WIDE_SCREEN  LCD_DEPTH  !GBN_TALL_SCREEN  LCD_DEPTH  GBN_TALL_SCREEN  these are used in line drawing to extend the lines if there is more
       board in that direction  default zoom, we get to set it however we want  now intersection_size has been set appropriately, so set up all of
       the derived values used for display  Call every time the board size might have changed!  0 means set to default  The cursor starts out in the top right of the board
     * (on the hoshi point for most board sizes), unless the board
     * is really small in which case the cursor starts at the center
     * of the board.
      check whether foreground is bright or dark  HAVE_NEGATIVE_LCD  LCD_DEPTH > 1  outline stones of background color only  OUTLINE_STONES  color and drawmode are already set before this function (all lines
       and hoshi and stuff are drawn together)  special case boards taken care of, handle the general case
     *
     * Note: board_width == board_height here (or we bailed out) so the two
     * are interchangeable  corner hoshi, for big enough boards  side hoshi, for big enough boards (only makes sense on odd)  center hoshi **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007-2009 Joshua Simmons <mud at majidejima dot com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** for xlcd_filltriangle  pixel offsets for the board on the LCD  current cursor position in board coordinates (intersections, not
   pixels)  we way need to "move" our notion of which intersections to draw when
   the cursor moves, since we can be zoomed in (and often will be) this is
   used to signal when we need to do that  function prototypes  don't overwrite real board marks with last-move or variation
           marks  moves, 'mark', 'square'  purposely don't break here, draw small the same as
                       a triangle  don't have to undo the colors for LCD_DEPTH > 1, most
                   functions assume bg and fg get clobbered  draw the points on the axes to make the loop easier  Now walk from the very top of the circle to 1/8th of the way around
       to the right.  For each point, draw the 8 symmetrical points.  walk one pixel to the right  And then adjust our discriminant, and adjust y if we've
           ventured outside of the circle. This boils down to walking a
           tightrope between being inside and outside the circle.  The
           updating functions are taken from expanding the discriminant
           function f(x, y) = x^2 + y^2 - r^2 after substituting in x + 1
           and y - 1 and then subtracting out f(x, y)  each line takes care of 2 points on the circle so we only
               need 4  Draw all 8 symmetrical points  the size of the string, in pixels, when drawn vertically  GBN_WIDE_SCREEN  LCD_DEPTH  !GBN_TALL_SCREEN  LCD_DEPTH  GBN_TALL_SCREEN  these are used in line drawing to extend the lines if there is more
       board in that direction  default zoom, we get to set it however we want  now intersection_size has been set appropriately, so set up all of
       the derived values used for display  Call every time the board size might have changed!  0 means set to default  The cursor starts out in the top right of the board
     * (on the hoshi point for most board sizes), unless the board
     * is really small in which case the cursor starts at the center
     * of the board.
      check whether foreground is bright or dark  HAVE_NEGATIVE_LCD  LCD_DEPTH > 1  outline stones of background color only  OUTLINE_STONES  color and drawmode are already set before this function (all lines
       and hoshi and stuff are drawn together)  special case boards taken care of, handle the general case
     *
     * Note: board_width == board_height here (or we bailed out) so the two
     * are interchangeable  corner hoshi, for big enough boards  side hoshi, for big enough boards (only makes sense on odd)  center hoshi **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007-2009 Joshua Simmons <mud at majidejima dot com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** for xlcd_filltriangle  pixel offsets for the board on the LCD  current cursor position in board coordinates (intersections, not
   pixels)  we way need to "move" our notion of which intersections to draw when
   the cursor moves, since we can be zoomed in (and often will be) this is
   used to signal when we need to do that  function prototypes  don't overwrite real board marks with last-move or variation
           marks  moves, 'mark', 'square'  purposely don't break here, draw small the same as
                       a triangle  don't have to undo the colors for LCD_DEPTH > 1, most
                   functions assume bg and fg get clobbered  draw the points on the axes to make the loop easier  Now walk from the very top of the circle to 1/8th of the way around
       to the right.  For each point, draw the 8 symmetrical points.  walk one pixel to the right  And then adjust our discriminant, and adjust y if we've
           ventured outside of the circle. This boils down to walking a
           tightrope between being inside and outside the circle.  The
           updating functions are taken from expanding the discriminant
           function f(x, y) = x^2 + y^2 - r^2 after substituting in x + 1
           and y - 1 and then subtracting out f(x, y)  each line takes care of 2 points on the circle so we only
               need 4  Draw all 8 symmetrical points  the size of the string, in pixels, when drawn vertically  GBN_WIDE_SCREEN  LCD_DEPTH  !GBN_TALL_SCREEN  LCD_DEPTH  GBN_TALL_SCREEN  these are used in line drawing to extend the lines if there is more
       board in that direction  default zoom, we get to set it however we want  now intersection_size has been set appropriately, so set up all of
       the derived values used for display  Call every time the board size might have changed!  0 means set to default  The cursor starts out in the top right of the board
     * (on the hoshi point for most board sizes), unless the board
     * is really small in which case the cursor starts at the center
     * of the board.
      check whether foreground is bright or dark  HAVE_NEGATIVE_LCD  LCD_DEPTH > 1  outline stones of background color only  OUTLINE_STONES  color and drawmode are already set before this function (all lines
       and hoshi and stuff are drawn together)  special case boards taken care of, handle the general case
     *
     * Note: board_width == board_height here (or we bailed out) so the two
     * are interchangeable  corner hoshi, for big enough boards  side hoshi, for big enough boards (only makes sense on odd)  center hoshi 