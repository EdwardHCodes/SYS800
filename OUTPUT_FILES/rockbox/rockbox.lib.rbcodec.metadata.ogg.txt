**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Dave Chapman
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** A simple parser to read vital metadata from an Ogg Vorbis file. 
 * Can also handle parsing Ogg Speex files for metadata. Returns
 * false if metadata needed by the codec couldn't be read.
  An Ogg File is split into pages, each starting with the string 
     * "OggS". Each page has a timestamp (in PCM samples) referred to as
     * the "granule position".
     *
     * An Ogg Vorbis has the following structure:
     * 1) Identification header (containing samplerate, numchannels, etc)
     * 2) Comment header - containing the Vorbis Comments
     * 3) Setup header - containing codec setup information
     * 4) Many audio packets...
     *
     * An Ogg Speex has the following structure:
     * 1) Identification header (containing samplerate, numchannels, etc)
     *    Described in this page: (http://www.speex.org/manual2/node7.html)
     * 2) Comment header - containing the Vorbis Comments
     * 3) Many audio packets.
      Use the path name of the id3 structure as a temporary buffer.  92 bytes is enough for both Vorbis and Speex headers  All Ogg streams start with OggS  Check for format magic and then get metadata  Comments are in second Ogg page (byte 58 onwards for Vorbis)  Comments are in second Ogg page (byte 108 onwards for Speex)  FIXME handle an actual channel mapping table Comments are in second Ogg page (byte 108 onwards for Speex)  Unsupported format, try to print the marker, catches Ogg/FLAC at least  We need to ensure the serial number from this page is the same as the
     * one from the last page (since we only support a single bitstream).
      We now need to search for the last page in the file - identified by 
     * by ('O','g','g','S',0) and retrieve totalsamples.
      A page is always < 64 kB  Inefficient (but simple) search  Note that this only reads the low 32 bits of a
                     * 64 bit value.
                      If this page is very small the beginning of the next
                     * header could be in buffer. Jump near end of this header
                     * and continue  Move the remaining bytes to start of buffer.
             * Reuse var 'segments' as it is no longer needed  Discard the rest of the buffer  This file has mutiple vorbis bitstreams (or is corrupt).  FIXME we should display an error here. **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Dave Chapman
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** A simple parser to read vital metadata from an Ogg Vorbis file. 
 * Can also handle parsing Ogg Speex files for metadata. Returns
 * false if metadata needed by the codec couldn't be read.
  An Ogg File is split into pages, each starting with the string 
     * "OggS". Each page has a timestamp (in PCM samples) referred to as
     * the "granule position".
     *
     * An Ogg Vorbis has the following structure:
     * 1) Identification header (containing samplerate, numchannels, etc)
     * 2) Comment header - containing the Vorbis Comments
     * 3) Setup header - containing codec setup information
     * 4) Many audio packets...
     *
     * An Ogg Speex has the following structure:
     * 1) Identification header (containing samplerate, numchannels, etc)
     *    Described in this page: (http://www.speex.org/manual2/node7.html)
     * 2) Comment header - containing the Vorbis Comments
     * 3) Many audio packets.
      Use the path name of the id3 structure as a temporary buffer.  92 bytes is enough for both Vorbis and Speex headers  All Ogg streams start with OggS  Check for format magic and then get metadata  Comments are in second Ogg page (byte 58 onwards for Vorbis)  Comments are in second Ogg page (byte 108 onwards for Speex)  FIXME handle an actual channel mapping table Comments are in second Ogg page (byte 108 onwards for Speex)  Unsupported format, try to print the marker, catches Ogg/FLAC at least  We need to ensure the serial number from this page is the same as the
     * one from the last page (since we only support a single bitstream).
      We now need to search for the last page in the file - identified by 
     * by ('O','g','g','S',0) and retrieve totalsamples.
      A page is always < 64 kB  Inefficient (but simple) search  Note that this only reads the low 32 bits of a
                     * 64 bit value.
                      If this page is very small the beginning of the next
                     * header could be in buffer. Jump near end of this header
                     * and continue  Move the remaining bytes to start of buffer.
             * Reuse var 'segments' as it is no longer needed  Discard the rest of the buffer  This file has mutiple vorbis bitstreams (or is corrupt).  FIXME we should display an error here. **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Dave Chapman
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** A simple parser to read vital metadata from an Ogg Vorbis file. 
 * Can also handle parsing Ogg Speex files for metadata. Returns
 * false if metadata needed by the codec couldn't be read.
  An Ogg File is split into pages, each starting with the string 
     * "OggS". Each page has a timestamp (in PCM samples) referred to as
     * the "granule position".
     *
     * An Ogg Vorbis has the following structure:
     * 1) Identification header (containing samplerate, numchannels, etc)
     * 2) Comment header - containing the Vorbis Comments
     * 3) Setup header - containing codec setup information
     * 4) Many audio packets...
     *
     * An Ogg Speex has the following structure:
     * 1) Identification header (containing samplerate, numchannels, etc)
     *    Described in this page: (http://www.speex.org/manual2/node7.html)
     * 2) Comment header - containing the Vorbis Comments
     * 3) Many audio packets.
      Use the path name of the id3 structure as a temporary buffer.  92 bytes is enough for both Vorbis and Speex headers  All Ogg streams start with OggS  Check for format magic and then get metadata  Comments are in second Ogg page (byte 58 onwards for Vorbis)  Comments are in second Ogg page (byte 108 onwards for Speex)  FIXME handle an actual channel mapping table Comments are in second Ogg page (byte 108 onwards for Speex)  Unsupported format, try to print the marker, catches Ogg/FLAC at least  We need to ensure the serial number from this page is the same as the
     * one from the last page (since we only support a single bitstream).
      We now need to search for the last page in the file - identified by 
     * by ('O','g','g','S',0) and retrieve totalsamples.
      A page is always < 64 kB  Inefficient (but simple) search  Note that this only reads the low 32 bits of a
                     * 64 bit value.
                      If this page is very small the beginning of the next
                     * header could be in buffer. Jump near end of this header
                     * and continue  Move the remaining bytes to start of buffer.
             * Reuse var 'segments' as it is no longer needed  Discard the rest of the buffer  This file has mutiple vorbis bitstreams (or is corrupt).  FIXME we should display an error here. 