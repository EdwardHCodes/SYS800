**************************************************************************
 *             __________               __   ___
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2014 by Ilia Sergachev: Initial Rockbox port to iBasso DX50
 * Copyright (C) 2014 by Mario Basister: iBasso DX90 port
 * Copyright (C) 2014 by Simon Rothen: Initial Rockbox repository submission, additional features
 * Copyright (C) 2014 by Udo Schläpfer: Code clean up, additional features
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Tiny alsa handle.  Bytes left in the Rockbox PCM frame buffer.  Rockbox PCM frame buffer. 
    1: PCM thread suspended.
    0: PCM thread running.
    These are used by pcm_play_[lock|unlock] or pcm_play_dma_[start|stop|pause]. These need to be
    separated because of nested calls for locking and stopping.
 Mutex for PCM thread suspend/unsuspend.  Signal condition for PCM thread suspend/unsuspend.  Retrive a new PCM buffer from Rockbox.  This relies on Rockbox PCM frame buffer size == ALSA PCM frame buffer size. DEBUGF("DEBUG %s: Thread running.", __func__); https://github.com/tinyalsa/tinyalsa/blob/master/tinypcminfo.c [0] =[24] =[43] = Thread that copies the Rockbox PCM buffer to ALSA.  ALSA card and device.  ALSA config. 
        DEBUG pcm_play_dma_init: Access: 0x000009
        DEBUG pcm_play_dma_init: Format[0]: 0x000044
        DEBUG pcm_play_dma_init: Format[1]: 0x000010
        DEBUG pcm_play_dma_init: Format: S16_LE
        DEBUG pcm_play_dma_init: Format: S24_LE
        DEBUG pcm_play_dma_init: Format: S20_3LE
        DEBUG pcm_play_dma_init: Subformat: 0x000001
        DEBUG pcm_play_dma_init: Rate: min = 8000Hz, max = 192000Hz
        DEBUG pcm_play_dma_init: Channels: min = 2, max = 2
        DEBUG pcm_play_dma_init: Sample bits: min=16, max=32
        DEBUG pcm_play_dma_init: Period size: min=8, max=10922
        DEBUG pcm_play_dma_init: Period count: min=3, max=128
        DEBUG pcm_play_dma_init: 0 mixer controls.
    
        Rockbox outputs 16 Bit/44.1kHz stereo by default.

        ALSA frame buffer size = config.period_count * config.period_size * config.channels * (16 \ 8)
                               = 4 * 256 * 2 * 2
                               = 4096
                               = Rockbox PCM buffer size
        pcm_thread_run relies on this size match. See pcm_mixer.h.
     Create pcm thread in the suspended state. 
        DX50
        /sys/class/codec/mute
        Mute:   echo 'A' > /sys/class/codec/mute
        Unmute: echo 'B' > /sys/class/codec/mute

        DX90?
     TODO: Why is this in the API if it gets never called?  Unessecary play locks before pcm_play_dma_postinit.  TODO: WTF **************************************************************************
 *             __________               __   ___
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2014 by Ilia Sergachev: Initial Rockbox port to iBasso DX50
 * Copyright (C) 2014 by Mario Basister: iBasso DX90 port
 * Copyright (C) 2014 by Simon Rothen: Initial Rockbox repository submission, additional features
 * Copyright (C) 2014 by Udo Schläpfer: Code clean up, additional features
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Tiny alsa handle.  Bytes left in the Rockbox PCM frame buffer.  Rockbox PCM frame buffer. 
    1: PCM thread suspended.
    0: PCM thread running.
    These are used by pcm_play_[lock|unlock] or pcm_play_dma_[start|stop|pause]. These need to be
    separated because of nested calls for locking and stopping.
 Mutex for PCM thread suspend/unsuspend.  Signal condition for PCM thread suspend/unsuspend.  Retrive a new PCM buffer from Rockbox.  This relies on Rockbox PCM frame buffer size == ALSA PCM frame buffer size. DEBUGF("DEBUG %s: Thread running.", __func__); https://github.com/tinyalsa/tinyalsa/blob/master/tinypcminfo.c [0] =[24] =[43] = Thread that copies the Rockbox PCM buffer to ALSA.  ALSA card and device.  ALSA config. 
        DEBUG pcm_play_dma_init: Access: 0x000009
        DEBUG pcm_play_dma_init: Format[0]: 0x000044
        DEBUG pcm_play_dma_init: Format[1]: 0x000010
        DEBUG pcm_play_dma_init: Format: S16_LE
        DEBUG pcm_play_dma_init: Format: S24_LE
        DEBUG pcm_play_dma_init: Format: S20_3LE
        DEBUG pcm_play_dma_init: Subformat: 0x000001
        DEBUG pcm_play_dma_init: Rate: min = 8000Hz, max = 192000Hz
        DEBUG pcm_play_dma_init: Channels: min = 2, max = 2
        DEBUG pcm_play_dma_init: Sample bits: min=16, max=32
        DEBUG pcm_play_dma_init: Period size: min=8, max=10922
        DEBUG pcm_play_dma_init: Period count: min=3, max=128
        DEBUG pcm_play_dma_init: 0 mixer controls.
    
        Rockbox outputs 16 Bit/44.1kHz stereo by default.

        ALSA frame buffer size = config.period_count * config.period_size * config.channels * (16 \ 8)
                               = 4 * 256 * 2 * 2
                               = 4096
                               = Rockbox PCM buffer size
        pcm_thread_run relies on this size match. See pcm_mixer.h.
     Create pcm thread in the suspended state. 
        DX50
        /sys/class/codec/mute
        Mute:   echo 'A' > /sys/class/codec/mute
        Unmute: echo 'B' > /sys/class/codec/mute

        DX90?
     TODO: Why is this in the API if it gets never called?  Unessecary play locks before pcm_play_dma_postinit.  TODO: WTF **************************************************************************
 *             __________               __   ___
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2014 by Ilia Sergachev: Initial Rockbox port to iBasso DX50
 * Copyright (C) 2014 by Mario Basister: iBasso DX90 port
 * Copyright (C) 2014 by Simon Rothen: Initial Rockbox repository submission, additional features
 * Copyright (C) 2014 by Udo Schläpfer: Code clean up, additional features
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Tiny alsa handle.  Bytes left in the Rockbox PCM frame buffer.  Rockbox PCM frame buffer. 
    1: PCM thread suspended.
    0: PCM thread running.
    These are used by pcm_play_[lock|unlock] or pcm_play_dma_[start|stop|pause]. These need to be
    separated because of nested calls for locking and stopping.
 Mutex for PCM thread suspend/unsuspend.  Signal condition for PCM thread suspend/unsuspend.  Retrive a new PCM buffer from Rockbox.  This relies on Rockbox PCM frame buffer size == ALSA PCM frame buffer size. DEBUGF("DEBUG %s: Thread running.", __func__); https://github.com/tinyalsa/tinyalsa/blob/master/tinypcminfo.c [0] =[24] =[43] = Thread that copies the Rockbox PCM buffer to ALSA.  ALSA card and device.  ALSA config. 
        DEBUG pcm_play_dma_init: Access: 0x000009
        DEBUG pcm_play_dma_init: Format[0]: 0x000044
        DEBUG pcm_play_dma_init: Format[1]: 0x000010
        DEBUG pcm_play_dma_init: Format: S16_LE
        DEBUG pcm_play_dma_init: Format: S24_LE
        DEBUG pcm_play_dma_init: Format: S20_3LE
        DEBUG pcm_play_dma_init: Subformat: 0x000001
        DEBUG pcm_play_dma_init: Rate: min = 8000Hz, max = 192000Hz
        DEBUG pcm_play_dma_init: Channels: min = 2, max = 2
        DEBUG pcm_play_dma_init: Sample bits: min=16, max=32
        DEBUG pcm_play_dma_init: Period size: min=8, max=10922
        DEBUG pcm_play_dma_init: Period count: min=3, max=128
        DEBUG pcm_play_dma_init: 0 mixer controls.
    
        Rockbox outputs 16 Bit/44.1kHz stereo by default.

        ALSA frame buffer size = config.period_count * config.period_size * config.channels * (16 \ 8)
                               = 4 * 256 * 2 * 2
                               = 4096
                               = Rockbox PCM buffer size
        pcm_thread_run relies on this size match. See pcm_mixer.h.
     Create pcm thread in the suspended state. 
        DX50
        /sys/class/codec/mute
        Mute:   echo 'A' > /sys/class/codec/mute
        Unmute: echo 'B' > /sys/class/codec/mute

        DX90?
     TODO: Why is this in the API if it gets never called?  Unessecary play locks before pcm_play_dma_postinit.  TODO: WTF 