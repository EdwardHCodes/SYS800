
** Algorithm: complex multiplication
** 
** Performance: Bad accuracy, great speed.
** 
** The simplest, way of generating trig values.  Note, this method is
** not stable, and errors accumulate rapidly.
** 
** Computation: 2 *, 1 + per value.

** Algorithm: O. Buneman's trig generator.
** 
** Performance: Good accuracy, mediocre speed.
** 
**   Manipulates a log(n) table to stably create n evenly spaced trig
**   values. The newly generated values lay halfway between two
**   known values, and are calculated by appropriatelly scaling the
**   average of the known trig values appropriatelly according to the
**   angle between them.  This process is inherently stable; and is
**   about as accurate as most trig library functions.  The errors
**   caused by this code segment are primarily due to the less stable
**   method to calculate values for 2t and s 3t. Note: I believe this
**   algorithm is patented(!), see readme file for more details.
**
** Computation: 1 +, 1 *, much integer math,  per trig value
**
 TEST RUN   imayer_fht(r,NP);  mayer_fht(fr,NP);
** Algorithm: complex multiplication
** 
** Performance: Bad accuracy, great speed.
** 
** The simplest, way of generating trig values.  Note, this method is
** not stable, and errors accumulate rapidly.
** 
** Computation: 2 *, 1 + per value.

** Algorithm: O. Buneman's trig generator.
** 
** Performance: Good accuracy, mediocre speed.
** 
**   Manipulates a log(n) table to stably create n evenly spaced trig
**   values. The newly generated values lay halfway between two
**   known values, and are calculated by appropriatelly scaling the
**   average of the known trig values appropriatelly according to the
**   angle between them.  This process is inherently stable; and is
**   about as accurate as most trig library functions.  The errors
**   caused by this code segment are primarily due to the less stable
**   method to calculate values for 2t and s 3t. Note: I believe this
**   algorithm is patented(!), see readme file for more details.
**
** Computation: 1 +, 1 *, much integer math,  per trig value
**
 TEST RUN   imayer_fht(r,NP);  mayer_fht(fr,NP);
** Algorithm: complex multiplication
** 
** Performance: Bad accuracy, great speed.
** 
** The simplest, way of generating trig values.  Note, this method is
** not stable, and errors accumulate rapidly.
** 
** Computation: 2 *, 1 + per value.

** Algorithm: O. Buneman's trig generator.
** 
** Performance: Good accuracy, mediocre speed.
** 
**   Manipulates a log(n) table to stably create n evenly spaced trig
**   values. The newly generated values lay halfway between two
**   known values, and are calculated by appropriatelly scaling the
**   average of the known trig values appropriatelly according to the
**   angle between them.  This process is inherently stable; and is
**   about as accurate as most trig library functions.  The errors
**   caused by this code segment are primarily due to the less stable
**   method to calculate values for 2t and s 3t. Note: I believe this
**   algorithm is patented(!), see readme file for more details.
**
** Computation: 1 +, 1 *, much integer math,  per trig value
**
 TEST RUN   imayer_fht(r,NP);  mayer_fht(fr,NP);