
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 sv_edict.c -- entity dictionary same as pr_global_struct in bytes
=================
ED_ClearEdict

Sets everything to NULL
=================

=================
ED_Alloc

Either finds a free edict, or allocates a new one.
Try to avoid reusing an entity that was recently freed, because it
can cause the client to think the entity morphed into something else
instead of being removed and recreated, which can cause interpolated
angles and bad trails.
=================
 the first couple seconds of server time can involve a lot of freeing and allocating, so relax the replacement policy
=================
ED_Free

Marks the edict as free
FIXME: walk all entities and NULL out references to this entity
=================
 unlink from world bsp===========================================================================
============
ED_GlobalAtOfs
============

============
ED_FieldAtOfs
============

============
ED_FindField
============

============
ED_FindGlobal
============

============
ED_FindFunction
============

============
PR_ValueString

Returns a string describing *data in a type specific manner
=============

============
PR_UglyValueString

Returns a string describing *data in a type specific manner
Easier to parse than PR_ValueString
=============

============
PR_GlobalString

Returns a string with a description and the contents of a global,
padded to 20 field width
============

=============
ED_Print

For debugging
=============
 skip _x, _y, _z vars if the value is still all 0, skip the field
=============
ED_Write

For savegames
=============
 skip _x, _y, _z vars if the value is still all 0, skip the field
=============
ED_PrintEdicts

For debugging, prints all the entities in the current server
=============

=============
ED_PrintEdict_f

For debugging, prints a single edicy
=============

=============
ED_Count

For debugging
=============

==============================================================================

					ARCHIVING GLOBALS

FIXME: need to tag constants, doesn't really work
==============================================================================

=============
ED_WriteGlobals
=============

=============
ED_ParseGlobals
=============
 parse key parse value	============================================================================
=============
ED_NewString
=============

=============
ED_ParseEval

Can parse either fields or globals
returns false if error
=============

====================
ED_ParseEdict

Parses an edict out of the given string, returning the new position
ed should be a properly initialized empty edict.
Used for initial level load and for savegames.
====================
 clear it hack go through all the dictionary pairs parse key anglehack is to allow QuakeEd to write single scalar angles and allow them to be turned into vectors. (FIXME...) FIXME: change light to _light to get rid of this hack hack for single light def another hack to fix heynames with trailing spaces parse value	 keynames with a leading underscore are used for utility comments, and are immediately discarded by quake
================
ED_LoadFromFile

The entities are directly placed in the array, rather than allocated with
ED_Alloc, because otherwise an error loading the map would have entity
number references out of order.

Creates a server's entity / program execution context by
parsing textual entity definitions out of an ent file.

Used for both fresh maps and savegame loads.  A fresh map would also need
to call ED_CallSpawnFunctions () to let the objects initialize themselves.
================
 parse ents parse the opening brace	 remove things from different skill levels or deathmatch immediately call spawn function look for the spawn function
===============
PR_LoadProgs
===============
 flush the non-C variable lookup cacheprintf("loadprogs 1");printf("loadprogs 2");printf("loadprogs 3");printf("loadprogs 4"); byte swap the headerprintf("loadprogs 5"); byte swap the lumps
===============
PR_Init
===============

Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 sv_edict.c -- entity dictionary same as pr_global_struct in bytes
=================
ED_ClearEdict

Sets everything to NULL
=================

=================
ED_Alloc

Either finds a free edict, or allocates a new one.
Try to avoid reusing an entity that was recently freed, because it
can cause the client to think the entity morphed into something else
instead of being removed and recreated, which can cause interpolated
angles and bad trails.
=================
 the first couple seconds of server time can involve a lot of freeing and allocating, so relax the replacement policy
=================
ED_Free

Marks the edict as free
FIXME: walk all entities and NULL out references to this entity
=================
 unlink from world bsp===========================================================================
============
ED_GlobalAtOfs
============

============
ED_FieldAtOfs
============

============
ED_FindField
============

============
ED_FindGlobal
============

============
ED_FindFunction
============

============
PR_ValueString

Returns a string describing *data in a type specific manner
=============

============
PR_UglyValueString

Returns a string describing *data in a type specific manner
Easier to parse than PR_ValueString
=============

============
PR_GlobalString

Returns a string with a description and the contents of a global,
padded to 20 field width
============

=============
ED_Print

For debugging
=============
 skip _x, _y, _z vars if the value is still all 0, skip the field
=============
ED_Write

For savegames
=============
 skip _x, _y, _z vars if the value is still all 0, skip the field
=============
ED_PrintEdicts

For debugging, prints all the entities in the current server
=============

=============
ED_PrintEdict_f

For debugging, prints a single edicy
=============

=============
ED_Count

For debugging
=============

==============================================================================

					ARCHIVING GLOBALS

FIXME: need to tag constants, doesn't really work
==============================================================================

=============
ED_WriteGlobals
=============

=============
ED_ParseGlobals
=============
 parse key parse value	============================================================================
=============
ED_NewString
=============

=============
ED_ParseEval

Can parse either fields or globals
returns false if error
=============

====================
ED_ParseEdict

Parses an edict out of the given string, returning the new position
ed should be a properly initialized empty edict.
Used for initial level load and for savegames.
====================
 clear it hack go through all the dictionary pairs parse key anglehack is to allow QuakeEd to write single scalar angles and allow them to be turned into vectors. (FIXME...) FIXME: change light to _light to get rid of this hack hack for single light def another hack to fix heynames with trailing spaces parse value	 keynames with a leading underscore are used for utility comments, and are immediately discarded by quake
================
ED_LoadFromFile

The entities are directly placed in the array, rather than allocated with
ED_Alloc, because otherwise an error loading the map would have entity
number references out of order.

Creates a server's entity / program execution context by
parsing textual entity definitions out of an ent file.

Used for both fresh maps and savegame loads.  A fresh map would also need
to call ED_CallSpawnFunctions () to let the objects initialize themselves.
================
 parse ents parse the opening brace	 remove things from different skill levels or deathmatch immediately call spawn function look for the spawn function
===============
PR_LoadProgs
===============
 flush the non-C variable lookup cacheprintf("loadprogs 1");printf("loadprogs 2");printf("loadprogs 3");printf("loadprogs 4"); byte swap the headerprintf("loadprogs 5"); byte swap the lumps
===============
PR_Init
===============

Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 sv_edict.c -- entity dictionary same as pr_global_struct in bytes
=================
ED_ClearEdict

Sets everything to NULL
=================

=================
ED_Alloc

Either finds a free edict, or allocates a new one.
Try to avoid reusing an entity that was recently freed, because it
can cause the client to think the entity morphed into something else
instead of being removed and recreated, which can cause interpolated
angles and bad trails.
=================
 the first couple seconds of server time can involve a lot of freeing and allocating, so relax the replacement policy
=================
ED_Free

Marks the edict as free
FIXME: walk all entities and NULL out references to this entity
=================
 unlink from world bsp===========================================================================
============
ED_GlobalAtOfs
============

============
ED_FieldAtOfs
============

============
ED_FindField
============

============
ED_FindGlobal
============

============
ED_FindFunction
============

============
PR_ValueString

Returns a string describing *data in a type specific manner
=============

============
PR_UglyValueString

Returns a string describing *data in a type specific manner
Easier to parse than PR_ValueString
=============

============
PR_GlobalString

Returns a string with a description and the contents of a global,
padded to 20 field width
============

=============
ED_Print

For debugging
=============
 skip _x, _y, _z vars if the value is still all 0, skip the field
=============
ED_Write

For savegames
=============
 skip _x, _y, _z vars if the value is still all 0, skip the field
=============
ED_PrintEdicts

For debugging, prints all the entities in the current server
=============

=============
ED_PrintEdict_f

For debugging, prints a single edicy
=============

=============
ED_Count

For debugging
=============

==============================================================================

					ARCHIVING GLOBALS

FIXME: need to tag constants, doesn't really work
==============================================================================

=============
ED_WriteGlobals
=============

=============
ED_ParseGlobals
=============
 parse key parse value	============================================================================
=============
ED_NewString
=============

=============
ED_ParseEval

Can parse either fields or globals
returns false if error
=============

====================
ED_ParseEdict

Parses an edict out of the given string, returning the new position
ed should be a properly initialized empty edict.
Used for initial level load and for savegames.
====================
 clear it hack go through all the dictionary pairs parse key anglehack is to allow QuakeEd to write single scalar angles and allow them to be turned into vectors. (FIXME...) FIXME: change light to _light to get rid of this hack hack for single light def another hack to fix heynames with trailing spaces parse value	 keynames with a leading underscore are used for utility comments, and are immediately discarded by quake
================
ED_LoadFromFile

The entities are directly placed in the array, rather than allocated with
ED_Alloc, because otherwise an error loading the map would have entity
number references out of order.

Creates a server's entity / program execution context by
parsing textual entity definitions out of an ent file.

Used for both fresh maps and savegame loads.  A fresh map would also need
to call ED_CallSpawnFunctions () to let the objects initialize themselves.
================
 parse ents parse the opening brace	 remove things from different skill levels or deathmatch immediately call spawn function look for the spawn function
===============
PR_LoadProgs
===============
 flush the non-C variable lookup cacheprintf("loadprogs 1");printf("loadprogs 2");printf("loadprogs 3");printf("loadprogs 4"); byte swap the headerprintf("loadprogs 5"); byte swap the lumps
===============
PR_Init
===============
