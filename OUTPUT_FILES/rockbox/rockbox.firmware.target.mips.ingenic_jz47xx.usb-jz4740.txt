**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Maurus Cuelenaere
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define LOGF_ENABLE
    The Jz4740 USB controller is called MUSBHSFC in the datasheet.
    It also seems to be a more generic controller, with support for
    up to 15 endpoints (the Jz4740 only has 5).
 Set data end!  Read CSR0  Check for SentStall:
        This bit is set when a STALL handshake is transmitted. The CPU should clear this bit.
      Check for SetupEnd:
        This bit will be set when a control transaction ends before the DataEnd bit has been set.
        An interrupt will be generated and the FIFO flushed at this time.
        The bit is cleared by the CPU writing a 1 to the ServicedSetupEnd bit.
      Call relevant routines for endpoint 0 state  There is a packet in the fifo  clear OUTPKTRDY bit  There is a packet in the fifo if(csr & USB_OUTCSR_FFFULL)
                csr &= ~USB_OUTCSR_FFFULL; Disable DMA  XXX range? Read out last packet manually  If the last packet is less than MAXP, set INPKTRDY manually  From the datasheet:

       When a reset condition is detected on the USB, the controller performs the following actions:
           * Sets FAddr to 0.
           * Sets Index to 0.
           * Flushes all endpoint FIFOs.
           * Clears all control/status registers.
           * Enables all endpoint interrupts.
           * Generates a Reset interrupt.
     Disable interrupts  Disable DMA  High speed, softconnect and suspend/resume  Reset EP0  Reset other endpoints  Enable interrupts  Interrupt handler  Read interrupt registers  Mask SOF  EPIN & EPOUT are all handled in DMA  A18 = ADP_CHK  Prevent enabled-disabled bouncing  Set this bit to allow the UDC entering low-power mode when
     * there are no actions on the USB bus.
     * UDC still works during this bit was set.
     __cpm_stop_udc(); Enable the USB PHY  Dis- and reconnect from USB  Disable interrupts  Disable DMA  Disconnect from USB  Disable the USB PHY  ACK request, handled in the ISR  all EP0 OUT transactions are handled within the ISR  ep0 out needs special handling  There are only 3+2 endpoints, so hardcode this ... **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Maurus Cuelenaere
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define LOGF_ENABLE
    The Jz4740 USB controller is called MUSBHSFC in the datasheet.
    It also seems to be a more generic controller, with support for
    up to 15 endpoints (the Jz4740 only has 5).
 Set data end!  Read CSR0  Check for SentStall:
        This bit is set when a STALL handshake is transmitted. The CPU should clear this bit.
      Check for SetupEnd:
        This bit will be set when a control transaction ends before the DataEnd bit has been set.
        An interrupt will be generated and the FIFO flushed at this time.
        The bit is cleared by the CPU writing a 1 to the ServicedSetupEnd bit.
      Call relevant routines for endpoint 0 state  There is a packet in the fifo  clear OUTPKTRDY bit  There is a packet in the fifo if(csr & USB_OUTCSR_FFFULL)
                csr &= ~USB_OUTCSR_FFFULL; Disable DMA  XXX range? Read out last packet manually  If the last packet is less than MAXP, set INPKTRDY manually  From the datasheet:

       When a reset condition is detected on the USB, the controller performs the following actions:
           * Sets FAddr to 0.
           * Sets Index to 0.
           * Flushes all endpoint FIFOs.
           * Clears all control/status registers.
           * Enables all endpoint interrupts.
           * Generates a Reset interrupt.
     Disable interrupts  Disable DMA  High speed, softconnect and suspend/resume  Reset EP0  Reset other endpoints  Enable interrupts  Interrupt handler  Read interrupt registers  Mask SOF  EPIN & EPOUT are all handled in DMA  A18 = ADP_CHK  Prevent enabled-disabled bouncing  Set this bit to allow the UDC entering low-power mode when
     * there are no actions on the USB bus.
     * UDC still works during this bit was set.
     __cpm_stop_udc(); Enable the USB PHY  Dis- and reconnect from USB  Disable interrupts  Disable DMA  Disconnect from USB  Disable the USB PHY  ACK request, handled in the ISR  all EP0 OUT transactions are handled within the ISR  ep0 out needs special handling  There are only 3+2 endpoints, so hardcode this ... **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Maurus Cuelenaere
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define LOGF_ENABLE
    The Jz4740 USB controller is called MUSBHSFC in the datasheet.
    It also seems to be a more generic controller, with support for
    up to 15 endpoints (the Jz4740 only has 5).
 Set data end!  Read CSR0  Check for SentStall:
        This bit is set when a STALL handshake is transmitted. The CPU should clear this bit.
      Check for SetupEnd:
        This bit will be set when a control transaction ends before the DataEnd bit has been set.
        An interrupt will be generated and the FIFO flushed at this time.
        The bit is cleared by the CPU writing a 1 to the ServicedSetupEnd bit.
      Call relevant routines for endpoint 0 state  There is a packet in the fifo  clear OUTPKTRDY bit  There is a packet in the fifo if(csr & USB_OUTCSR_FFFULL)
                csr &= ~USB_OUTCSR_FFFULL; Disable DMA  XXX range? Read out last packet manually  If the last packet is less than MAXP, set INPKTRDY manually  From the datasheet:

       When a reset condition is detected on the USB, the controller performs the following actions:
           * Sets FAddr to 0.
           * Sets Index to 0.
           * Flushes all endpoint FIFOs.
           * Clears all control/status registers.
           * Enables all endpoint interrupts.
           * Generates a Reset interrupt.
     Disable interrupts  Disable DMA  High speed, softconnect and suspend/resume  Reset EP0  Reset other endpoints  Enable interrupts  Interrupt handler  Read interrupt registers  Mask SOF  EPIN & EPOUT are all handled in DMA  A18 = ADP_CHK  Prevent enabled-disabled bouncing  Set this bit to allow the UDC entering low-power mode when
     * there are no actions on the USB bus.
     * UDC still works during this bit was set.
     __cpm_stop_udc(); Enable the USB PHY  Dis- and reconnect from USB  Disable interrupts  Disable DMA  Disconnect from USB  Disable the USB PHY  ACK request, handled in the ISR  all EP0 OUT transactions are handled within the ISR  ep0 out needs special handling  There are only 3+2 endpoints, so hardcode this ... 