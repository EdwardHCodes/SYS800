**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Barry Wardell
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** register defines for TL1771  Send command  Send 16-bit data  Send MSB first  Write value to register ** hardware configuration ** TODO: Implement lcd_set_contrast()  TODO: Implement lcd_set_invert_display()  turn the display upside down (call lcd_update() afterwards)  TODO: Implement lcd_set_flip()  LCD init  The OF won't boot if this is done in the bootloader - ideally we should 
       tweak the lcd controller speed settings but this will do for now  Set LCD interface clock to PLL  H10 LCD is initialised by the bootloader ** update functions ** 31 * 257 *  1.402     31 * 257 * -0.714136  31 * 257 * -0.344136  31 * 257 *  1.772     Performance function to blit a YUV bitmap directly to the LCD  calculate the drawing region  max horiz << 8 | start horiz  max vert << 8 | start vert  start vert << 8 | start horiz  start drawing  upsampling, YUV->RGB conversion and reduction to RGB565 in one go  Pixel 1  Pixel 2  Since out of bounds errors are relatively rare, we check two
               pixels at once to see if any components are out of bounds, and
               then fix whichever is broken. This works due to high values and
               negative values both becoming larger than the cutoff when
               casted to unsigned.  And ORing them together checks all of them
               simultaneously.   Update a fraction of the display.  Ensure x and width are both even - so we can read 32-bit aligned 
       data from lcd_framebuffer  calculate the drawing region  max vert  max horiz  swap max horiz < start horiz  swap max vert < start vert  max horiz << 8 | start horiz  max vert << 8 | start vert  start vert << 8 | start horiz  start drawing  calculate how much we can do in one go  for each row  for each column  output 2 pixels  Update the display.
   This must be called after all other LCD functions that change the display. **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Barry Wardell
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** register defines for TL1771  Send command  Send 16-bit data  Send MSB first  Write value to register ** hardware configuration ** TODO: Implement lcd_set_contrast()  TODO: Implement lcd_set_invert_display()  turn the display upside down (call lcd_update() afterwards)  TODO: Implement lcd_set_flip()  LCD init  The OF won't boot if this is done in the bootloader - ideally we should 
       tweak the lcd controller speed settings but this will do for now  Set LCD interface clock to PLL  H10 LCD is initialised by the bootloader ** update functions ** 31 * 257 *  1.402     31 * 257 * -0.714136  31 * 257 * -0.344136  31 * 257 *  1.772     Performance function to blit a YUV bitmap directly to the LCD  calculate the drawing region  max horiz << 8 | start horiz  max vert << 8 | start vert  start vert << 8 | start horiz  start drawing  upsampling, YUV->RGB conversion and reduction to RGB565 in one go  Pixel 1  Pixel 2  Since out of bounds errors are relatively rare, we check two
               pixels at once to see if any components are out of bounds, and
               then fix whichever is broken. This works due to high values and
               negative values both becoming larger than the cutoff when
               casted to unsigned.  And ORing them together checks all of them
               simultaneously.   Update a fraction of the display.  Ensure x and width are both even - so we can read 32-bit aligned 
       data from lcd_framebuffer  calculate the drawing region  max vert  max horiz  swap max horiz < start horiz  swap max vert < start vert  max horiz << 8 | start horiz  max vert << 8 | start vert  start vert << 8 | start horiz  start drawing  calculate how much we can do in one go  for each row  for each column  output 2 pixels  Update the display.
   This must be called after all other LCD functions that change the display. **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Barry Wardell
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** register defines for TL1771  Send command  Send 16-bit data  Send MSB first  Write value to register ** hardware configuration ** TODO: Implement lcd_set_contrast()  TODO: Implement lcd_set_invert_display()  turn the display upside down (call lcd_update() afterwards)  TODO: Implement lcd_set_flip()  LCD init  The OF won't boot if this is done in the bootloader - ideally we should 
       tweak the lcd controller speed settings but this will do for now  Set LCD interface clock to PLL  H10 LCD is initialised by the bootloader ** update functions ** 31 * 257 *  1.402     31 * 257 * -0.714136  31 * 257 * -0.344136  31 * 257 *  1.772     Performance function to blit a YUV bitmap directly to the LCD  calculate the drawing region  max horiz << 8 | start horiz  max vert << 8 | start vert  start vert << 8 | start horiz  start drawing  upsampling, YUV->RGB conversion and reduction to RGB565 in one go  Pixel 1  Pixel 2  Since out of bounds errors are relatively rare, we check two
               pixels at once to see if any components are out of bounds, and
               then fix whichever is broken. This works due to high values and
               negative values both becoming larger than the cutoff when
               casted to unsigned.  And ORing them together checks all of them
               simultaneously.   Update a fraction of the display.  Ensure x and width are both even - so we can read 32-bit aligned 
       data from lcd_framebuffer  calculate the drawing region  max vert  max horiz  swap max horiz < start horiz  swap max vert < start vert  max horiz << 8 | start horiz  max vert << 8 | start vert  start vert << 8 | start horiz  start drawing  calculate how much we can do in one go  for each row  for each column  output 2 pixels  Update the display.
   This must be called after all other LCD functions that change the display. 