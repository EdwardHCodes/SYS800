*******************************************************************
 *                                                                  *
 * THIS FILE IS PART OF THE OggVorbis 'TREMOR' CODEC SOURCE CODE.   *
 *                                                                  *
 * USE, DISTRIBUTION AND REPRODUCTION OF THIS LIBRARY SOURCE IS     *
 * GOVERNED BY A BSD-STYLE SOURCE LICENSE INCLUDED WITH THIS SOURCE *
 * IN 'COPYING'. PLEASE READ THESE TERMS BEFORE DISTRIBUTING.       *
 *                                                                  *
 * THE OggVorbis 'TREMOR' SOURCE CODE IS (C) COPYRIGHT 1994-2002    *
 * BY THE Xiph.Org FOUNDATION http://www.xiph.org/                  *
 *                                                                  *
 ********************************************************************

 function: channel mapping 0 implementation

 ******************************************************************* simplistic, wasteful way of doing this (unique lookup for each
   mode/submapping); there should be a central repository for
   identical lookups.  That will require minor work, so I'm putting it
   off as low priority.

   Why a lookup for each backend in a given mode?  Because the
   blocksize is set by the mode, and low backend lookups may require
   parameters from other areas of the mode/mapping  if a different mode is called, we need to 
                     invalidate decay  also responsible for range checking  2,3:reserved  neg sets cc so we might as well jump  trapf.l, shadow next 2 insns  if we didn't jump, the next test will  false anyway  trapf.w, shadow next insn  use offsets instead of autoinc since the store to pcmM is conditional  bounded mapping arrays instead of using alloca();
     avoids memory leak; we can only deal with stereo anyway  time domain information decode (note that applying the
     information would have to happen later; we'll probably add a
     function entry to the harness for that later  NOT IMPLEMENTED  recover the spectral envelope; store it in the PCM vector for now  channel coupling can 'dirty' the nonzero listing  recover the residue into our working vectors for(j=0;j<vi->channels;j++)_analysis_output("coupled",seq+j,vb->pcm[j],-8,n/2,0,0); channel coupling for(j=0;j<vi->channels;j++)_analysis_output("residue",seq+j,vb->pcm[j],-8,n/2,0,0);for(j=0;j<vi->channels;j++)_analysis_output("mdct",seq+j,vb->pcm[j],-24,n/2,0,1); transform the PCM data; takes PCM vector, vb; modifies PCM vector  only MDCT right now....  compute and apply spectral envelope for(j=0;j<vi->channels;j++)_analysis_output("imdct",seq+j,vb->pcm[j],-24,n,0,0);for(j=0;j<vi->channels;j++)_analysis_output("window",seq+j,vb->pcm[j],-24,n,0,0);seq+=vi->channels; all done!  export hooks *******************************************************************
 *                                                                  *
 * THIS FILE IS PART OF THE OggVorbis 'TREMOR' CODEC SOURCE CODE.   *
 *                                                                  *
 * USE, DISTRIBUTION AND REPRODUCTION OF THIS LIBRARY SOURCE IS     *
 * GOVERNED BY A BSD-STYLE SOURCE LICENSE INCLUDED WITH THIS SOURCE *
 * IN 'COPYING'. PLEASE READ THESE TERMS BEFORE DISTRIBUTING.       *
 *                                                                  *
 * THE OggVorbis 'TREMOR' SOURCE CODE IS (C) COPYRIGHT 1994-2002    *
 * BY THE Xiph.Org FOUNDATION http://www.xiph.org/                  *
 *                                                                  *
 ********************************************************************

 function: channel mapping 0 implementation

 ******************************************************************* simplistic, wasteful way of doing this (unique lookup for each
   mode/submapping); there should be a central repository for
   identical lookups.  That will require minor work, so I'm putting it
   off as low priority.

   Why a lookup for each backend in a given mode?  Because the
   blocksize is set by the mode, and low backend lookups may require
   parameters from other areas of the mode/mapping  if a different mode is called, we need to 
                     invalidate decay  also responsible for range checking  2,3:reserved  neg sets cc so we might as well jump  trapf.l, shadow next 2 insns  if we didn't jump, the next test will  false anyway  trapf.w, shadow next insn  use offsets instead of autoinc since the store to pcmM is conditional  bounded mapping arrays instead of using alloca();
     avoids memory leak; we can only deal with stereo anyway  time domain information decode (note that applying the
     information would have to happen later; we'll probably add a
     function entry to the harness for that later  NOT IMPLEMENTED  recover the spectral envelope; store it in the PCM vector for now  channel coupling can 'dirty' the nonzero listing  recover the residue into our working vectors for(j=0;j<vi->channels;j++)_analysis_output("coupled",seq+j,vb->pcm[j],-8,n/2,0,0); channel coupling for(j=0;j<vi->channels;j++)_analysis_output("residue",seq+j,vb->pcm[j],-8,n/2,0,0);for(j=0;j<vi->channels;j++)_analysis_output("mdct",seq+j,vb->pcm[j],-24,n/2,0,1); transform the PCM data; takes PCM vector, vb; modifies PCM vector  only MDCT right now....  compute and apply spectral envelope for(j=0;j<vi->channels;j++)_analysis_output("imdct",seq+j,vb->pcm[j],-24,n,0,0);for(j=0;j<vi->channels;j++)_analysis_output("window",seq+j,vb->pcm[j],-24,n,0,0);seq+=vi->channels; all done!  export hooks *******************************************************************
 *                                                                  *
 * THIS FILE IS PART OF THE OggVorbis 'TREMOR' CODEC SOURCE CODE.   *
 *                                                                  *
 * USE, DISTRIBUTION AND REPRODUCTION OF THIS LIBRARY SOURCE IS     *
 * GOVERNED BY A BSD-STYLE SOURCE LICENSE INCLUDED WITH THIS SOURCE *
 * IN 'COPYING'. PLEASE READ THESE TERMS BEFORE DISTRIBUTING.       *
 *                                                                  *
 * THE OggVorbis 'TREMOR' SOURCE CODE IS (C) COPYRIGHT 1994-2002    *
 * BY THE Xiph.Org FOUNDATION http://www.xiph.org/                  *
 *                                                                  *
 ********************************************************************

 function: channel mapping 0 implementation

 ******************************************************************* simplistic, wasteful way of doing this (unique lookup for each
   mode/submapping); there should be a central repository for
   identical lookups.  That will require minor work, so I'm putting it
   off as low priority.

   Why a lookup for each backend in a given mode?  Because the
   blocksize is set by the mode, and low backend lookups may require
   parameters from other areas of the mode/mapping  if a different mode is called, we need to 
                     invalidate decay  also responsible for range checking  2,3:reserved  neg sets cc so we might as well jump  trapf.l, shadow next 2 insns  if we didn't jump, the next test will  false anyway  trapf.w, shadow next insn  use offsets instead of autoinc since the store to pcmM is conditional  bounded mapping arrays instead of using alloca();
     avoids memory leak; we can only deal with stereo anyway  time domain information decode (note that applying the
     information would have to happen later; we'll probably add a
     function entry to the harness for that later  NOT IMPLEMENTED  recover the spectral envelope; store it in the PCM vector for now  channel coupling can 'dirty' the nonzero listing  recover the residue into our working vectors for(j=0;j<vi->channels;j++)_analysis_output("coupled",seq+j,vb->pcm[j],-8,n/2,0,0); channel coupling for(j=0;j<vi->channels;j++)_analysis_output("residue",seq+j,vb->pcm[j],-8,n/2,0,0);for(j=0;j<vi->channels;j++)_analysis_output("mdct",seq+j,vb->pcm[j],-24,n/2,0,1); transform the PCM data; takes PCM vector, vb; modifies PCM vector  only MDCT right now....  compute and apply spectral envelope for(j=0;j<vi->channels;j++)_analysis_output("imdct",seq+j,vb->pcm[j],-24,n,0,0);for(j=0;j<vi->channels;j++)_analysis_output("window",seq+j,vb->pcm[j],-24,n,0,0);seq+=vi->channels; all done!  export hooks 