
  Copyright (c) 2005-2009, The Musepack Development Team
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are
  met:

  * Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.

  * Redistributions in binary form must reproduce the above
  copyright notice, this list of conditions and the following
  disclaimer in the documentation and/or other materials provided
  with the distribution.

  * Neither the name of the The Musepack Development Team nor the
  names of its contributors may be used to endorse or promote
  products derived from this software without specific prior
  written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
/ \file streaminfo.c/ Implementation of streaminfo reading functions. rockbox: not used
static const char na[] = "n.a.";
static char const * const versionNames[] = {
    na, "'Unstable/Experimental'", na, na, na, "'quality 0'", "'quality 1'",
    "'Telephone'", "'Thumb'", "'Radio'", "'Standard'", "'Extreme'", "'Insane'",
    "'BrainDead'", "'quality 9'", "'quality 10'"
};
 rockbox: not used
static const char *
mpc_get_version_string(float profile) // profile is 0...15, where 7...13 is used
{
    return profile >= sizeof versionNames / sizeof *versionNames ? na : versionNames[(int)profile];
}
 rockbox: not used
static void
mpc_get_encoder_string(mpc_streaminfo* si)
{
    int ver = si->encoder_version;
    if (si->stream_version >= 8)
        ver = (si->encoder_version >> 24) * 100 + ((si->encoder_version >> 16) & 0xFF);
    if (ver <= 116) {
        if (ver == 0) {
            sprintf(si->encoder, "Buschmann 1.7.0...9, Klemm 0.90...1.05");
        } else {
            switch (ver % 10) {
                case 0:
                    sprintf(si->encoder, "Release %u.%u", ver / 100,
                            ver / 10 % 10);
                    break;
                case 2: case 4: case 6: case 8:
                    sprintf(si->encoder, "Beta %u.%02u", ver / 100,
                            ver % 100);
                    break;
                default:
                    sprintf(si->encoder, "--Alpha-- %u.%02u",
                            ver / 100, ver % 100);
                    break;
            }
        }
    } else {
        int major = si->encoder_version >> 24;
        int minor = (si->encoder_version >> 16) & 0xFF;
        int build = (si->encoder_version >> 8) & 0xFF;
        char * tmp = "--Stable--";

        if (minor & 1)
            tmp = "--Unstable--";

        sprintf(si->encoder, "%s %u.%u.%u", tmp, major, minor, build);
    }
}
/ Reads streaminfo from SV7 header. intensity stereo : should be 0 rockbox: not used    
    si->profile_name       = mpc_get_version_string(si->profile);
 Link ? Estimatedpeak_title true gapless: used? true gapless: valid samples for last frame fast seeking unused rockbox: not used
    // convert gain info
    if (si->gain_title != 0) {
        int tmp = (int)((MPC_OLD_GAIN_REF - (mpc_int16_t)si->gain_title / 100.) * 256. + .5);
        if (tmp >= (1 << 16) || tmp < 0) tmp = 0;
        si->gain_title = (mpc_int16_t) tmp;
    }

    if (si->gain_album != 0) {
        int tmp = (int)((MPC_OLD_GAIN_REF - (mpc_int16_t)si->gain_album / 100.) * 256. + .5);
        if (tmp >= (1 << 16) || tmp < 0) tmp = 0;
        si->gain_album = (mpc_int16_t) tmp;
    }
    
    if (si->peak_title != 0)
        si->peak_title = (mpc_uint16_t) (log10(si->peak_title) * 20 * 256 + .5);

    if (si->peak_album != 0)
        si->peak_album = (mpc_uint16_t) (log10(si->peak_album) * 20 * 256 + .5);
        
    mpc_get_encoder_string(si);
/ Reads replay gain datas gain version we only know ver 1/ Reads streaminfo from SV8 header./ Reads encoder informations to be divided by 8 rockbox: not used    
    si->profile_name       = mpc_get_version_string(si->profile);
 major minor build rockbox: not used   
    mpc_get_encoder_string(si);
 rockbox: not used
double
mpc_streaminfo_get_length(mpc_streaminfo * si)
{
    return (double) (si->samples - si->beg_silence) / si->sample_freq;
}

mpc_int64_t mpc_streaminfo_get_length_samples(mpc_streaminfo *si)
{
    return si->samples - si->beg_silence;
}

  Copyright (c) 2005-2009, The Musepack Development Team
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are
  met:

  * Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.

  * Redistributions in binary form must reproduce the above
  copyright notice, this list of conditions and the following
  disclaimer in the documentation and/or other materials provided
  with the distribution.

  * Neither the name of the The Musepack Development Team nor the
  names of its contributors may be used to endorse or promote
  products derived from this software without specific prior
  written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
/ \file streaminfo.c/ Implementation of streaminfo reading functions. rockbox: not used
static const char na[] = "n.a.";
static char const * const versionNames[] = {
    na, "'Unstable/Experimental'", na, na, na, "'quality 0'", "'quality 1'",
    "'Telephone'", "'Thumb'", "'Radio'", "'Standard'", "'Extreme'", "'Insane'",
    "'BrainDead'", "'quality 9'", "'quality 10'"
};
 rockbox: not used
static const char *
mpc_get_version_string(float profile) // profile is 0...15, where 7...13 is used
{
    return profile >= sizeof versionNames / sizeof *versionNames ? na : versionNames[(int)profile];
}
 rockbox: not used
static void
mpc_get_encoder_string(mpc_streaminfo* si)
{
    int ver = si->encoder_version;
    if (si->stream_version >= 8)
        ver = (si->encoder_version >> 24) * 100 + ((si->encoder_version >> 16) & 0xFF);
    if (ver <= 116) {
        if (ver == 0) {
            sprintf(si->encoder, "Buschmann 1.7.0...9, Klemm 0.90...1.05");
        } else {
            switch (ver % 10) {
                case 0:
                    sprintf(si->encoder, "Release %u.%u", ver / 100,
                            ver / 10 % 10);
                    break;
                case 2: case 4: case 6: case 8:
                    sprintf(si->encoder, "Beta %u.%02u", ver / 100,
                            ver % 100);
                    break;
                default:
                    sprintf(si->encoder, "--Alpha-- %u.%02u",
                            ver / 100, ver % 100);
                    break;
            }
        }
    } else {
        int major = si->encoder_version >> 24;
        int minor = (si->encoder_version >> 16) & 0xFF;
        int build = (si->encoder_version >> 8) & 0xFF;
        char * tmp = "--Stable--";

        if (minor & 1)
            tmp = "--Unstable--";

        sprintf(si->encoder, "%s %u.%u.%u", tmp, major, minor, build);
    }
}
/ Reads streaminfo from SV7 header. intensity stereo : should be 0 rockbox: not used    
    si->profile_name       = mpc_get_version_string(si->profile);
 Link ? Estimatedpeak_title true gapless: used? true gapless: valid samples for last frame fast seeking unused rockbox: not used
    // convert gain info
    if (si->gain_title != 0) {
        int tmp = (int)((MPC_OLD_GAIN_REF - (mpc_int16_t)si->gain_title / 100.) * 256. + .5);
        if (tmp >= (1 << 16) || tmp < 0) tmp = 0;
        si->gain_title = (mpc_int16_t) tmp;
    }

    if (si->gain_album != 0) {
        int tmp = (int)((MPC_OLD_GAIN_REF - (mpc_int16_t)si->gain_album / 100.) * 256. + .5);
        if (tmp >= (1 << 16) || tmp < 0) tmp = 0;
        si->gain_album = (mpc_int16_t) tmp;
    }
    
    if (si->peak_title != 0)
        si->peak_title = (mpc_uint16_t) (log10(si->peak_title) * 20 * 256 + .5);

    if (si->peak_album != 0)
        si->peak_album = (mpc_uint16_t) (log10(si->peak_album) * 20 * 256 + .5);
        
    mpc_get_encoder_string(si);
/ Reads replay gain datas gain version we only know ver 1/ Reads streaminfo from SV8 header./ Reads encoder informations to be divided by 8 rockbox: not used    
    si->profile_name       = mpc_get_version_string(si->profile);
 major minor build rockbox: not used   
    mpc_get_encoder_string(si);
 rockbox: not used
double
mpc_streaminfo_get_length(mpc_streaminfo * si)
{
    return (double) (si->samples - si->beg_silence) / si->sample_freq;
}

mpc_int64_t mpc_streaminfo_get_length_samples(mpc_streaminfo *si)
{
    return si->samples - si->beg_silence;
}

  Copyright (c) 2005-2009, The Musepack Development Team
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are
  met:

  * Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.

  * Redistributions in binary form must reproduce the above
  copyright notice, this list of conditions and the following
  disclaimer in the documentation and/or other materials provided
  with the distribution.

  * Neither the name of the The Musepack Development Team nor the
  names of its contributors may be used to endorse or promote
  products derived from this software without specific prior
  written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
/ \file streaminfo.c/ Implementation of streaminfo reading functions. rockbox: not used
static const char na[] = "n.a.";
static char const * const versionNames[] = {
    na, "'Unstable/Experimental'", na, na, na, "'quality 0'", "'quality 1'",
    "'Telephone'", "'Thumb'", "'Radio'", "'Standard'", "'Extreme'", "'Insane'",
    "'BrainDead'", "'quality 9'", "'quality 10'"
};
 rockbox: not used
static const char *
mpc_get_version_string(float profile) // profile is 0...15, where 7...13 is used
{
    return profile >= sizeof versionNames / sizeof *versionNames ? na : versionNames[(int)profile];
}
 rockbox: not used
static void
mpc_get_encoder_string(mpc_streaminfo* si)
{
    int ver = si->encoder_version;
    if (si->stream_version >= 8)
        ver = (si->encoder_version >> 24) * 100 + ((si->encoder_version >> 16) & 0xFF);
    if (ver <= 116) {
        if (ver == 0) {
            sprintf(si->encoder, "Buschmann 1.7.0...9, Klemm 0.90...1.05");
        } else {
            switch (ver % 10) {
                case 0:
                    sprintf(si->encoder, "Release %u.%u", ver / 100,
                            ver / 10 % 10);
                    break;
                case 2: case 4: case 6: case 8:
                    sprintf(si->encoder, "Beta %u.%02u", ver / 100,
                            ver % 100);
                    break;
                default:
                    sprintf(si->encoder, "--Alpha-- %u.%02u",
                            ver / 100, ver % 100);
                    break;
            }
        }
    } else {
        int major = si->encoder_version >> 24;
        int minor = (si->encoder_version >> 16) & 0xFF;
        int build = (si->encoder_version >> 8) & 0xFF;
        char * tmp = "--Stable--";

        if (minor & 1)
            tmp = "--Unstable--";

        sprintf(si->encoder, "%s %u.%u.%u", tmp, major, minor, build);
    }
}
/ Reads streaminfo from SV7 header. intensity stereo : should be 0 rockbox: not used    
    si->profile_name       = mpc_get_version_string(si->profile);
 Link ? Estimatedpeak_title true gapless: used? true gapless: valid samples for last frame fast seeking unused rockbox: not used
    // convert gain info
    if (si->gain_title != 0) {
        int tmp = (int)((MPC_OLD_GAIN_REF - (mpc_int16_t)si->gain_title / 100.) * 256. + .5);
        if (tmp >= (1 << 16) || tmp < 0) tmp = 0;
        si->gain_title = (mpc_int16_t) tmp;
    }

    if (si->gain_album != 0) {
        int tmp = (int)((MPC_OLD_GAIN_REF - (mpc_int16_t)si->gain_album / 100.) * 256. + .5);
        if (tmp >= (1 << 16) || tmp < 0) tmp = 0;
        si->gain_album = (mpc_int16_t) tmp;
    }
    
    if (si->peak_title != 0)
        si->peak_title = (mpc_uint16_t) (log10(si->peak_title) * 20 * 256 + .5);

    if (si->peak_album != 0)
        si->peak_album = (mpc_uint16_t) (log10(si->peak_album) * 20 * 256 + .5);
        
    mpc_get_encoder_string(si);
/ Reads replay gain datas gain version we only know ver 1/ Reads streaminfo from SV8 header./ Reads encoder informations to be divided by 8 rockbox: not used    
    si->profile_name       = mpc_get_version_string(si->profile);
 major minor build rockbox: not used   
    mpc_get_encoder_string(si);
 rockbox: not used
double
mpc_streaminfo_get_length(mpc_streaminfo * si)
{
    return (double) (si->samples - si->beg_silence) / si->sample_freq;
}

mpc_int64_t mpc_streaminfo_get_length_samples(mpc_streaminfo *si)
{
    return si->samples - si->beg_silence;
}
