**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Barry Wardell
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** ATA stuff was taken from the iPod code  TODO: Implement ata_enable()  TODO: Implement coldstart variable  From ipod-ide.c:ipod_ide_register()  cpu > 65MHz  cpu < 65MHz  These are PIO timings for 80 Mhz.  At 24 Mhz, 
   the first value is 0 but the rest are the same.
   They go in IDE0_PRI_TIMING0.
   
   Rockbox used 0x10, and test_disk shows that leads to faster PIO.   
   If 0x10 is incorrect, these timings may be needed with some devices.
static const unsigned long pio80mhz[] = {
    0xC293, 0x43A2, 0x11A1, 0x7232, 0x3131
}; 
 Timings for multi-word and ultra DMA modes.
   These go in IDE0_PRI_TIMING1
  This function sets up registers for 80 Mhz.
   Ultra DMA mode 2 works at 30 Mhz.
  80 Mhz  >= 50 Mhz  This waits for an ATA interrupt using polling.
   In ATA_CONTROL, CONTROL_nIEN must be cleared.
  timeout  This function checks if parameters are appropriate for DMA, 
   and if they are, it sets up for DMA.
   
   If return value is false, caller may use PIO for this transfer.
   
   If return value is true, caller must issue a DMA ATA command
   and then call ata_dma_finish().
  Require cacheline alignment for reads to prevent interference.  Writes only need to be word-aligned, but by default DMA
     * is not used for writing as it appears to be slower.
      If unflushed, old data may be written to disk  Invalidate cache because new data may be present in RAM  Clear pending interrupts so ata_dma_finish() can wait for an
       interrupt from this transfer
      Rockbox remaps DRAM to start at 0  This function waits for a DMA transfer to end.
   It must be called to finish what ata_dma_setup started.
   
   Return value is true if DMA completed before the timeout, and false
   if a timeout happened.
  It may be okay to put this at the end of setup  Wait for end of transfer.
       Reading standard ATA status while DMA is in progress causes 
       failures and hangs.  Because of that, another wait is used.
      HAVE_ATA_DMA **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Barry Wardell
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** ATA stuff was taken from the iPod code  TODO: Implement ata_enable()  TODO: Implement coldstart variable  From ipod-ide.c:ipod_ide_register()  cpu > 65MHz  cpu < 65MHz  These are PIO timings for 80 Mhz.  At 24 Mhz, 
   the first value is 0 but the rest are the same.
   They go in IDE0_PRI_TIMING0.
   
   Rockbox used 0x10, and test_disk shows that leads to faster PIO.   
   If 0x10 is incorrect, these timings may be needed with some devices.
static const unsigned long pio80mhz[] = {
    0xC293, 0x43A2, 0x11A1, 0x7232, 0x3131
}; 
 Timings for multi-word and ultra DMA modes.
   These go in IDE0_PRI_TIMING1
  This function sets up registers for 80 Mhz.
   Ultra DMA mode 2 works at 30 Mhz.
  80 Mhz  >= 50 Mhz  This waits for an ATA interrupt using polling.
   In ATA_CONTROL, CONTROL_nIEN must be cleared.
  timeout  This function checks if parameters are appropriate for DMA, 
   and if they are, it sets up for DMA.
   
   If return value is false, caller may use PIO for this transfer.
   
   If return value is true, caller must issue a DMA ATA command
   and then call ata_dma_finish().
  Require cacheline alignment for reads to prevent interference.  Writes only need to be word-aligned, but by default DMA
     * is not used for writing as it appears to be slower.
      If unflushed, old data may be written to disk  Invalidate cache because new data may be present in RAM  Clear pending interrupts so ata_dma_finish() can wait for an
       interrupt from this transfer
      Rockbox remaps DRAM to start at 0  This function waits for a DMA transfer to end.
   It must be called to finish what ata_dma_setup started.
   
   Return value is true if DMA completed before the timeout, and false
   if a timeout happened.
  It may be okay to put this at the end of setup  Wait for end of transfer.
       Reading standard ATA status while DMA is in progress causes 
       failures and hangs.  Because of that, another wait is used.
      HAVE_ATA_DMA **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Barry Wardell
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** ATA stuff was taken from the iPod code  TODO: Implement ata_enable()  TODO: Implement coldstart variable  From ipod-ide.c:ipod_ide_register()  cpu > 65MHz  cpu < 65MHz  These are PIO timings for 80 Mhz.  At 24 Mhz, 
   the first value is 0 but the rest are the same.
   They go in IDE0_PRI_TIMING0.
   
   Rockbox used 0x10, and test_disk shows that leads to faster PIO.   
   If 0x10 is incorrect, these timings may be needed with some devices.
static const unsigned long pio80mhz[] = {
    0xC293, 0x43A2, 0x11A1, 0x7232, 0x3131
}; 
 Timings for multi-word and ultra DMA modes.
   These go in IDE0_PRI_TIMING1
  This function sets up registers for 80 Mhz.
   Ultra DMA mode 2 works at 30 Mhz.
  80 Mhz  >= 50 Mhz  This waits for an ATA interrupt using polling.
   In ATA_CONTROL, CONTROL_nIEN must be cleared.
  timeout  This function checks if parameters are appropriate for DMA, 
   and if they are, it sets up for DMA.
   
   If return value is false, caller may use PIO for this transfer.
   
   If return value is true, caller must issue a DMA ATA command
   and then call ata_dma_finish().
  Require cacheline alignment for reads to prevent interference.  Writes only need to be word-aligned, but by default DMA
     * is not used for writing as it appears to be slower.
      If unflushed, old data may be written to disk  Invalidate cache because new data may be present in RAM  Clear pending interrupts so ata_dma_finish() can wait for an
       interrupt from this transfer
      Rockbox remaps DRAM to start at 0  This function waits for a DMA transfer to end.
   It must be called to finish what ata_dma_setup started.
   
   Return value is true if DMA completed before the timeout, and false
   if a timeout happened.
  It may be okay to put this at the end of setup  Wait for end of transfer.
       Reading standard ATA status while DMA is in progress causes 
       failures and hangs.  Because of that, another wait is used.
      HAVE_ATA_DMA 