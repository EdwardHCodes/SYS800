 Copyright (C) 2012-2015 Papavasileiou Dimitris
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
  This is a simple readline-like function in case readline is not
 * available.  HAVE_LIBREADLINE  HAVE_READLINE_HISTORY  Loop through the list of keywords and return the ones that
     * match.  Scan to the beginning of the to-be-completed token.  Get the iterable value, the keys of which we wish to
             * complete.  Replace the to-be-iterated value with it's metatable
             * and set up a call to next.  Call the standard pairs function.  Iterate the table/userdata and generate matches.  Make some notes about the value we're completing.  We'll
         * make use of them later on.  There are no keys in the table so we won't want to
                 * index it.  Add a space.  Pop the value, keep the key.  We're mainly interested in strings at this point but if
         * we're completing for the table[key] syntax we consider
         * numeric keys too.  If this isn't an integer key, we may as well
                     * forget about it.  If the candidate has been fully typed (or
                 * previously completed) consider adding certain
                 * helpful suffixes.  Were not completing a global variable.  Put the
                     * completed string together out of the table and
                     * the key.  Return the whole candidate as is, to be freed
                     * by Readline.  Suppress the newline when completing a table
                 * or other potentially complex value.  Try to load the input as a module.  If it's not an already loaded module, check whether the
             * input is an available module by searching for it and/or
             * trying to load it.  Look for the module as require would and ask the
                 * user whether it should be loaded or not.  If it was found but not loaded, return
                             * the module name as a match to avoid
                             * asking the user againg if the tab key
                             * is pressed repeatedly.  Load the model if needed.  Clean up but leave the package.table on the stack.  Look for matches in package.preload.  Get the configuration (directory, path separators, module
         * name wildcard).  Get the path and cpath  Synthesize the pattern.  Suppress submodules named init.  Return the next match from the table of matches.  Pop the match.  Pop key/value.  Pop the empty table.  Try to complete a keyword.  Try to complete a module name.  Try to complete a table access.  Try to complete a metatable access.  Try to complete a file name.  If a match was produced, add the quote
                 * characters.  If the file's a directory, add a trailing backslash
                 * and suppress the space, otherwise add the closing
                 * quote.  Save the command history on exit.  Print the Lua stack.  Get the results table, and stash it behind the to-be-executed
     * chunk.  Clean up.  We need to remove the results table as well if we
     * track results.  This is the pretty-printing related stuff.  Calculate the printed width of the chunk s ignoring escape
     * sequences.  Check if a chunk fits in the buffer and expand as necessary.  Check whether a string can be used as a key without quotes and
     * braces.  Add a line break.  And indent to the current level.  Break the line if the current chunk doesn't fit but it would
     * fit if we started on a fresh line at the current indent.  Copy the string to the buffer.  Copy the value to avoid mutating it.  Scan the string to decide how to print it.  These characters show up better in a long sting so
                 * bias towards that.  These however go better with an escaped short
                 * string (unless you like the bell or weird
                 * characters).  Check what long string delimeter level to use so that
             * the string won't be closed prematurely.  Dump the string as a long string.  Escape the string as needed and print it as a normal
             * string.  Check if table is too deeply nested.  Check if the table introduces a cycle by checking whether
         * it is a back-edge (that is equal to an ancestor table.  Add the table to the ancestor list and pop the ancestor
         * list table.  Open the table and update the indentation level to the
         * current column.  Traverse the array part first.  Start a fresh line when dumping tables to make sure
             * there's plenty of room.  Dump the value and separating comma.  Now for the hash part.  Keep each key-value pair on a separate line.  Dump the key and value.  Remove the table from the ancestor list.  Pop the indentation level.  Initialize the state.  Suppress colorization, to avoid escape sequences in the
     * returned strings.  Create a table to hold the ancestors for checking for cycles
     * when printing table hierarchies.  These are custom commands.  We can wind up here before reaching luap_enter, so this is
     * needed.  Push the error handler onto the stack.  Try to execute the supplied chunk and keep note of any return
     * values.  Print any errors.  Remove the error handler.  Plain, uncolored prompts.  Colored prompts.  Don't allow color if we're not writing to a terminal.  Save the state since it needs to be passed to some readline
     * callbacks.  Load the command history if there is one.  Add/copy the line to the buffer.  Try to execute the line with a return prepended first.  If
         * this works we can show returned values.  Try to execute the line as-is.  If the error message mentions an unexpected eof
                 * then consider this a multi-line statement and wait
                 * for more input.  If not then just print the error
                 * message. Try to execute the loaded chunk.  Add the line to the history if non-empty.  Copyright (C) 2012-2015 Papavasileiou Dimitris
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
  This is a simple readline-like function in case readline is not
 * available.  HAVE_LIBREADLINE  HAVE_READLINE_HISTORY  Loop through the list of keywords and return the ones that
     * match.  Scan to the beginning of the to-be-completed token.  Get the iterable value, the keys of which we wish to
             * complete.  Replace the to-be-iterated value with it's metatable
             * and set up a call to next.  Call the standard pairs function.  Iterate the table/userdata and generate matches.  Make some notes about the value we're completing.  We'll
         * make use of them later on.  There are no keys in the table so we won't want to
                 * index it.  Add a space.  Pop the value, keep the key.  We're mainly interested in strings at this point but if
         * we're completing for the table[key] syntax we consider
         * numeric keys too.  If this isn't an integer key, we may as well
                     * forget about it.  If the candidate has been fully typed (or
                 * previously completed) consider adding certain
                 * helpful suffixes.  Were not completing a global variable.  Put the
                     * completed string together out of the table and
                     * the key.  Return the whole candidate as is, to be freed
                     * by Readline.  Suppress the newline when completing a table
                 * or other potentially complex value.  Try to load the input as a module.  If it's not an already loaded module, check whether the
             * input is an available module by searching for it and/or
             * trying to load it.  Look for the module as require would and ask the
                 * user whether it should be loaded or not.  If it was found but not loaded, return
                             * the module name as a match to avoid
                             * asking the user againg if the tab key
                             * is pressed repeatedly.  Load the model if needed.  Clean up but leave the package.table on the stack.  Look for matches in package.preload.  Get the configuration (directory, path separators, module
         * name wildcard).  Get the path and cpath  Synthesize the pattern.  Suppress submodules named init.  Return the next match from the table of matches.  Pop the match.  Pop key/value.  Pop the empty table.  Try to complete a keyword.  Try to complete a module name.  Try to complete a table access.  Try to complete a metatable access.  Try to complete a file name.  If a match was produced, add the quote
                 * characters.  If the file's a directory, add a trailing backslash
                 * and suppress the space, otherwise add the closing
                 * quote.  Save the command history on exit.  Print the Lua stack.  Get the results table, and stash it behind the to-be-executed
     * chunk.  Clean up.  We need to remove the results table as well if we
     * track results.  This is the pretty-printing related stuff.  Calculate the printed width of the chunk s ignoring escape
     * sequences.  Check if a chunk fits in the buffer and expand as necessary.  Check whether a string can be used as a key without quotes and
     * braces.  Add a line break.  And indent to the current level.  Break the line if the current chunk doesn't fit but it would
     * fit if we started on a fresh line at the current indent.  Copy the string to the buffer.  Copy the value to avoid mutating it.  Scan the string to decide how to print it.  These characters show up better in a long sting so
                 * bias towards that.  These however go better with an escaped short
                 * string (unless you like the bell or weird
                 * characters).  Check what long string delimeter level to use so that
             * the string won't be closed prematurely.  Dump the string as a long string.  Escape the string as needed and print it as a normal
             * string.  Check if table is too deeply nested.  Check if the table introduces a cycle by checking whether
         * it is a back-edge (that is equal to an ancestor table.  Add the table to the ancestor list and pop the ancestor
         * list table.  Open the table and update the indentation level to the
         * current column.  Traverse the array part first.  Start a fresh line when dumping tables to make sure
             * there's plenty of room.  Dump the value and separating comma.  Now for the hash part.  Keep each key-value pair on a separate line.  Dump the key and value.  Remove the table from the ancestor list.  Pop the indentation level.  Initialize the state.  Suppress colorization, to avoid escape sequences in the
     * returned strings.  Create a table to hold the ancestors for checking for cycles
     * when printing table hierarchies.  These are custom commands.  We can wind up here before reaching luap_enter, so this is
     * needed.  Push the error handler onto the stack.  Try to execute the supplied chunk and keep note of any return
     * values.  Print any errors.  Remove the error handler.  Plain, uncolored prompts.  Colored prompts.  Don't allow color if we're not writing to a terminal.  Save the state since it needs to be passed to some readline
     * callbacks.  Load the command history if there is one.  Add/copy the line to the buffer.  Try to execute the line with a return prepended first.  If
         * this works we can show returned values.  Try to execute the line as-is.  If the error message mentions an unexpected eof
                 * then consider this a multi-line statement and wait
                 * for more input.  If not then just print the error
                 * message. Try to execute the loaded chunk.  Add the line to the history if non-empty.  Copyright (C) 2012-2015 Papavasileiou Dimitris
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
  This is a simple readline-like function in case readline is not
 * available.  HAVE_LIBREADLINE  HAVE_READLINE_HISTORY  Loop through the list of keywords and return the ones that
     * match.  Scan to the beginning of the to-be-completed token.  Get the iterable value, the keys of which we wish to
             * complete.  Replace the to-be-iterated value with it's metatable
             * and set up a call to next.  Call the standard pairs function.  Iterate the table/userdata and generate matches.  Make some notes about the value we're completing.  We'll
         * make use of them later on.  There are no keys in the table so we won't want to
                 * index it.  Add a space.  Pop the value, keep the key.  We're mainly interested in strings at this point but if
         * we're completing for the table[key] syntax we consider
         * numeric keys too.  If this isn't an integer key, we may as well
                     * forget about it.  If the candidate has been fully typed (or
                 * previously completed) consider adding certain
                 * helpful suffixes.  Were not completing a global variable.  Put the
                     * completed string together out of the table and
                     * the key.  Return the whole candidate as is, to be freed
                     * by Readline.  Suppress the newline when completing a table
                 * or other potentially complex value.  Try to load the input as a module.  If it's not an already loaded module, check whether the
             * input is an available module by searching for it and/or
             * trying to load it.  Look for the module as require would and ask the
                 * user whether it should be loaded or not.  If it was found but not loaded, return
                             * the module name as a match to avoid
                             * asking the user againg if the tab key
                             * is pressed repeatedly.  Load the model if needed.  Clean up but leave the package.table on the stack.  Look for matches in package.preload.  Get the configuration (directory, path separators, module
         * name wildcard).  Get the path and cpath  Synthesize the pattern.  Suppress submodules named init.  Return the next match from the table of matches.  Pop the match.  Pop key/value.  Pop the empty table.  Try to complete a keyword.  Try to complete a module name.  Try to complete a table access.  Try to complete a metatable access.  Try to complete a file name.  If a match was produced, add the quote
                 * characters.  If the file's a directory, add a trailing backslash
                 * and suppress the space, otherwise add the closing
                 * quote.  Save the command history on exit.  Print the Lua stack.  Get the results table, and stash it behind the to-be-executed
     * chunk.  Clean up.  We need to remove the results table as well if we
     * track results.  This is the pretty-printing related stuff.  Calculate the printed width of the chunk s ignoring escape
     * sequences.  Check if a chunk fits in the buffer and expand as necessary.  Check whether a string can be used as a key without quotes and
     * braces.  Add a line break.  And indent to the current level.  Break the line if the current chunk doesn't fit but it would
     * fit if we started on a fresh line at the current indent.  Copy the string to the buffer.  Copy the value to avoid mutating it.  Scan the string to decide how to print it.  These characters show up better in a long sting so
                 * bias towards that.  These however go better with an escaped short
                 * string (unless you like the bell or weird
                 * characters).  Check what long string delimeter level to use so that
             * the string won't be closed prematurely.  Dump the string as a long string.  Escape the string as needed and print it as a normal
             * string.  Check if table is too deeply nested.  Check if the table introduces a cycle by checking whether
         * it is a back-edge (that is equal to an ancestor table.  Add the table to the ancestor list and pop the ancestor
         * list table.  Open the table and update the indentation level to the
         * current column.  Traverse the array part first.  Start a fresh line when dumping tables to make sure
             * there's plenty of room.  Dump the value and separating comma.  Now for the hash part.  Keep each key-value pair on a separate line.  Dump the key and value.  Remove the table from the ancestor list.  Pop the indentation level.  Initialize the state.  Suppress colorization, to avoid escape sequences in the
     * returned strings.  Create a table to hold the ancestors for checking for cycles
     * when printing table hierarchies.  These are custom commands.  We can wind up here before reaching luap_enter, so this is
     * needed.  Push the error handler onto the stack.  Try to execute the supplied chunk and keep note of any return
     * values.  Print any errors.  Remove the error handler.  Plain, uncolored prompts.  Colored prompts.  Don't allow color if we're not writing to a terminal.  Save the state since it needs to be passed to some readline
     * callbacks.  Load the command history if there is one.  Add/copy the line to the buffer.  Try to execute the line with a return prepended first.  If
         * this works we can show returned values.  Try to execute the line as-is.  If the error message mentions an unexpected eof
                 * then consider this a multi-line statement and wait
                 * for more input.  If not then just print the error
                 * message. Try to execute the loaded chunk.  Add the line to the history if non-empty. 