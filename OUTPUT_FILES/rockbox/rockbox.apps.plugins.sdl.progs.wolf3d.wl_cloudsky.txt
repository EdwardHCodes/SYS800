 Each colormap defines a number of colors which should be mapped from the skytable. The according colormapentry_t array defines how these colors should be mapped to the wolfenstein palette. The first int of each entry defines how many colors are grouped to this entry and the absolute value of the second int sets the starting palette index for this pair. If this value is negative the index will be decremented for every color, if it's positive it will be incremented. Example colormap:   colormapentry_t colmapents_1[] = { { 6, -10 }, { 2, 40 } };   colormap_t colorMaps[] = {      { 8, colmapents_1 }   };   The colormap 0 consists of 8 colors. The first color group consists of 6   colors and starts descending at palette index 10: 10, 9, 8, 7, 6, 5   The second color group consists of 2 colors and starts ascending at   index 40: 40, 41   There's no other color group because all colors of this colormap are   already used (6+2=8) Warning: Always make sure that the sum of the amount of the colors in all          color groups is the number of colors used for your colormap! The sky definitions which can be selected as defined by GetCloudSkyDefID() in wl_def.h You can use <TAB>+Z in debug mode to find out suitable values for seed and colorMapIndex Each entry consists of seed, speed, angle and colorMapIndex The lower left tile of every map determines the used cloud sky definition from cloudSkys. funny water texture if used instead of memset ;D for(int i = 0; i < 65536; i++)     skyc[i] = rand() % 32 * 8; Smooth the clouds a bit the following commented line could be useful, if you're trying to create a new color map. This will display your current color map in one (of course repeating) stripe of the sky for(int i = 0; i < 256; i++)     skyc[i] = skyc[i + 256] = skyc[i + 512] = i; Based on Textured Floor and Ceiling by DarkOne Move clouds Draw them distance to row projection global step per one screen pixel global texture coordinates local texture coordinates ------ * prepare * -------- starting y value view obscured by walls don't let division by zero draw horizontal lines starting point (leftmost) Each colormap defines a number of colors which should be mapped from the skytable. The according colormapentry_t array defines how these colors should be mapped to the wolfenstein palette. The first int of each entry defines how many colors are grouped to this entry and the absolute value of the second int sets the starting palette index for this pair. If this value is negative the index will be decremented for every color, if it's positive it will be incremented. Example colormap:   colormapentry_t colmapents_1[] = { { 6, -10 }, { 2, 40 } };   colormap_t colorMaps[] = {      { 8, colmapents_1 }   };   The colormap 0 consists of 8 colors. The first color group consists of 6   colors and starts descending at palette index 10: 10, 9, 8, 7, 6, 5   The second color group consists of 2 colors and starts ascending at   index 40: 40, 41   There's no other color group because all colors of this colormap are   already used (6+2=8) Warning: Always make sure that the sum of the amount of the colors in all          color groups is the number of colors used for your colormap! The sky definitions which can be selected as defined by GetCloudSkyDefID() in wl_def.h You can use <TAB>+Z in debug mode to find out suitable values for seed and colorMapIndex Each entry consists of seed, speed, angle and colorMapIndex The lower left tile of every map determines the used cloud sky definition from cloudSkys. funny water texture if used instead of memset ;D for(int i = 0; i < 65536; i++)     skyc[i] = rand() % 32 * 8; Smooth the clouds a bit the following commented line could be useful, if you're trying to create a new color map. This will display your current color map in one (of course repeating) stripe of the sky for(int i = 0; i < 256; i++)     skyc[i] = skyc[i + 256] = skyc[i + 512] = i; Based on Textured Floor and Ceiling by DarkOne Move clouds Draw them distance to row projection global step per one screen pixel global texture coordinates local texture coordinates ------ * prepare * -------- starting y value view obscured by walls don't let division by zero draw horizontal lines starting point (leftmost) Each colormap defines a number of colors which should be mapped from the skytable. The according colormapentry_t array defines how these colors should be mapped to the wolfenstein palette. The first int of each entry defines how many colors are grouped to this entry and the absolute value of the second int sets the starting palette index for this pair. If this value is negative the index will be decremented for every color, if it's positive it will be incremented. Example colormap:   colormapentry_t colmapents_1[] = { { 6, -10 }, { 2, 40 } };   colormap_t colorMaps[] = {      { 8, colmapents_1 }   };   The colormap 0 consists of 8 colors. The first color group consists of 6   colors and starts descending at palette index 10: 10, 9, 8, 7, 6, 5   The second color group consists of 2 colors and starts ascending at   index 40: 40, 41   There's no other color group because all colors of this colormap are   already used (6+2=8) Warning: Always make sure that the sum of the amount of the colors in all          color groups is the number of colors used for your colormap! The sky definitions which can be selected as defined by GetCloudSkyDefID() in wl_def.h You can use <TAB>+Z in debug mode to find out suitable values for seed and colorMapIndex Each entry consists of seed, speed, angle and colorMapIndex The lower left tile of every map determines the used cloud sky definition from cloudSkys. funny water texture if used instead of memset ;D for(int i = 0; i < 65536; i++)     skyc[i] = rand() % 32 * 8; Smooth the clouds a bit the following commented line could be useful, if you're trying to create a new color map. This will display your current color map in one (of course repeating) stripe of the sky for(int i = 0; i < 256; i++)     skyc[i] = skyc[i + 256] = skyc[i + 512] = i; Based on Textured Floor and Ceiling by DarkOne Move clouds Draw them distance to row projection global step per one screen pixel global texture coordinates local texture coordinates ------ * prepare * -------- starting y value view obscured by walls don't let division by zero draw horizontal lines starting point (leftmost)