

demac - A Monkey's Audio decoder

$Id$

Copyright (C) Dave Chapman 2007

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA

 

This example is intended to demonstrate how the decoder can be used in
embedded devices - there is no usage of dynamic memory (i.e. no
malloc/free) and small buffer sizes are chosen to minimise both the
memory usage and decoding latency.

This implementation requires the following memory and supports decoding of all APE files up to 24-bit Stereo.

32768 - data from the input stream to be presented to the decoder in one contiguous chunk.
18432 - decoding buffer (left channel)
18432 - decoding buffer (right channel)

17408+5120+2240 - buffers used for filter histories (compression levels 2000-5000)

In addition, this example uses a static 27648 byte buffer as temporary
storage for outputting the data to a WAV file but that could be
avoided by writing the decoded data one sample at a time.

 4608*2*3 = 27648 bytes  4608*4 = 18432 bytes per channel  We assume that 32KB of compressed data is enough to extract up to
   27648 bytes of decompressed data.  Read the file headers to populate the ape_ctx struct ape_dumpinfo(&ape_ctx); Open the WAV file and write a canonical 44-byte WAV header
       based on the audio format information in the ape_ctx struct.

       NOTE: This example doesn't write the original WAV header and
             tail data which are (optionally) stored in the APE file.
      Initialise the buffer  Take account of the little-endian 32-bit byte ordering  The main decoding loop - we decode the frames a small chunk at a time  Calculate how many blocks there are in this frame  Initialise the frame decoder  Update buffer  Decode the frame a chunk at a time  Frame decoding error, abort  Convert the output samples to WAV format and write to output file  8 bit WAV uses unsigned samples  Update the buffer  Decrement the block count 

demac - A Monkey's Audio decoder

$Id$

Copyright (C) Dave Chapman 2007

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA

 

This example is intended to demonstrate how the decoder can be used in
embedded devices - there is no usage of dynamic memory (i.e. no
malloc/free) and small buffer sizes are chosen to minimise both the
memory usage and decoding latency.

This implementation requires the following memory and supports decoding of all APE files up to 24-bit Stereo.

32768 - data from the input stream to be presented to the decoder in one contiguous chunk.
18432 - decoding buffer (left channel)
18432 - decoding buffer (right channel)

17408+5120+2240 - buffers used for filter histories (compression levels 2000-5000)

In addition, this example uses a static 27648 byte buffer as temporary
storage for outputting the data to a WAV file but that could be
avoided by writing the decoded data one sample at a time.

 4608*2*3 = 27648 bytes  4608*4 = 18432 bytes per channel  We assume that 32KB of compressed data is enough to extract up to
   27648 bytes of decompressed data.  Read the file headers to populate the ape_ctx struct ape_dumpinfo(&ape_ctx); Open the WAV file and write a canonical 44-byte WAV header
       based on the audio format information in the ape_ctx struct.

       NOTE: This example doesn't write the original WAV header and
             tail data which are (optionally) stored in the APE file.
      Initialise the buffer  Take account of the little-endian 32-bit byte ordering  The main decoding loop - we decode the frames a small chunk at a time  Calculate how many blocks there are in this frame  Initialise the frame decoder  Update buffer  Decode the frame a chunk at a time  Frame decoding error, abort  Convert the output samples to WAV format and write to output file  8 bit WAV uses unsigned samples  Update the buffer  Decrement the block count 

demac - A Monkey's Audio decoder

$Id$

Copyright (C) Dave Chapman 2007

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA

 

This example is intended to demonstrate how the decoder can be used in
embedded devices - there is no usage of dynamic memory (i.e. no
malloc/free) and small buffer sizes are chosen to minimise both the
memory usage and decoding latency.

This implementation requires the following memory and supports decoding of all APE files up to 24-bit Stereo.

32768 - data from the input stream to be presented to the decoder in one contiguous chunk.
18432 - decoding buffer (left channel)
18432 - decoding buffer (right channel)

17408+5120+2240 - buffers used for filter histories (compression levels 2000-5000)

In addition, this example uses a static 27648 byte buffer as temporary
storage for outputting the data to a WAV file but that could be
avoided by writing the decoded data one sample at a time.

 4608*2*3 = 27648 bytes  4608*4 = 18432 bytes per channel  We assume that 32KB of compressed data is enough to extract up to
   27648 bytes of decompressed data.  Read the file headers to populate the ape_ctx struct ape_dumpinfo(&ape_ctx); Open the WAV file and write a canonical 44-byte WAV header
       based on the audio format information in the ape_ctx struct.

       NOTE: This example doesn't write the original WAV header and
             tail data which are (optionally) stored in the APE file.
      Initialise the buffer  Take account of the little-endian 32-bit byte ordering  The main decoding loop - we decode the frames a small chunk at a time  Calculate how many blocks there are in this frame  Initialise the frame decoder  Update buffer  Decode the frame a chunk at a time  Frame decoding error, abort  Convert the output samples to WAV format and write to output file  8 bit WAV uses unsigned samples  Update the buffer  Decrement the block count 