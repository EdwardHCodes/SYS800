 This file is part of libmspack.
 * (C) 2003-2011 Stuart Caie.
 *
 * KWAJ is a format very similar to SZDD. KWAJ method 3 (LZH) was
 * written by Jeff Johnson.
 *
 * libmspack is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License (LGPL) version 2.1
 *
 * For further details, see the file COPYING.LIB distributed with libmspack
  KWAJ decompression implementation  prototypes **************************************
 * MSPACK_CREATE_KWAJ_DECOMPRESSOR
 ***************************************
 * constructor
 **************************************
 * MSPACK_DESTROY_KWAJ_DECOMPRESSOR
 ***************************************
 * destructor
 **************************************
 * KWAJD_OPEN
 ***************************************
 * opens a KWAJ file without decompressing, reads header
 **************************************
 * KWAJD_CLOSE
 ***************************************
 * closes a KWAJ file
  close the file handle associated  free the memory associated **************************************
 * KWAJD_READ_HEADERS
 ***************************************
 * reads the headers of a KWAJ format file
  read in the header  check for "KWAJ" signature  basic header fields  optional headers  4 bytes: length of unpacked file  2 bytes: unknown purpose  2 bytes: length of section, then [length] bytes: unknown purpose  filename and extension  allocate memory for maximum length filename  copy filename if present  read and copy up to 9 bytes of a null terminated string  if string was 9 bytes with no null terminator, reject it  seek to byte after string ended in file  remove the null terminator  copy extension if present  read and copy up to 4 bytes of a null terminated string  if string was 4 bytes with no null terminator, reject it  seek to byte after string ended in file  remove the null terminator  2 bytes: extra text length then [length] bytes of extra text data **************************************
 * KWAJD_EXTRACT
 ***************************************
 * decompresses a KWAJ file
  seek to the compressed data  open file for output  decompress based on format  NONE is a straight copy. XOR is a copy xored with 0xFF  close output file **************************************
 * KWAJD_DECOMPRESS
 ***************************************
 * unpacks directly from input to output
 **************************************
 * KWAJD_ERROR
 ***************************************
 * returns the last error that occurred
 **************************************
 * LZH_INIT, LZH_DECOMPRESS, LZH_FREE
 ***************************************
 * unpacks KWAJ method 3 files
  import bit-reading macros and code  import huffman-reading macros and code  In the KWAJ LZH format, there is no special 'eof' marker, it just
 * ends. Depending on how many bits are left in the final byte when
 * the stream ends, that might be enough to start another literal or
 * match. The only easy way to detect that we've come to an end is to
 * guard all bit-reading. We allow fake bits to be read once we reach
 * the end of the stream, but we check if we then consumed any of
 * those fake bits, after doing the READ_BITS / READ_HUFFSYM. This
 * isn't how the default readbits.h read_input() works (it simply lets
 * 2 fake bytes in then stops), so we implement our own.
  reset global state  read 6 encoding types (for byte alignment) but only 5 are needed  read huffman table symbol lengths and build huffman trees  not the end of a literal run  copy match as output and into the ring buffer  end of a literal run?  copy as output and into the ring buffer  update i_ptr and i_end  This file is part of libmspack.
 * (C) 2003-2011 Stuart Caie.
 *
 * KWAJ is a format very similar to SZDD. KWAJ method 3 (LZH) was
 * written by Jeff Johnson.
 *
 * libmspack is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License (LGPL) version 2.1
 *
 * For further details, see the file COPYING.LIB distributed with libmspack
  KWAJ decompression implementation  prototypes **************************************
 * MSPACK_CREATE_KWAJ_DECOMPRESSOR
 ***************************************
 * constructor
 **************************************
 * MSPACK_DESTROY_KWAJ_DECOMPRESSOR
 ***************************************
 * destructor
 **************************************
 * KWAJD_OPEN
 ***************************************
 * opens a KWAJ file without decompressing, reads header
 **************************************
 * KWAJD_CLOSE
 ***************************************
 * closes a KWAJ file
  close the file handle associated  free the memory associated **************************************
 * KWAJD_READ_HEADERS
 ***************************************
 * reads the headers of a KWAJ format file
  read in the header  check for "KWAJ" signature  basic header fields  optional headers  4 bytes: length of unpacked file  2 bytes: unknown purpose  2 bytes: length of section, then [length] bytes: unknown purpose  filename and extension  allocate memory for maximum length filename  copy filename if present  read and copy up to 9 bytes of a null terminated string  if string was 9 bytes with no null terminator, reject it  seek to byte after string ended in file  remove the null terminator  copy extension if present  read and copy up to 4 bytes of a null terminated string  if string was 4 bytes with no null terminator, reject it  seek to byte after string ended in file  remove the null terminator  2 bytes: extra text length then [length] bytes of extra text data **************************************
 * KWAJD_EXTRACT
 ***************************************
 * decompresses a KWAJ file
  seek to the compressed data  open file for output  decompress based on format  NONE is a straight copy. XOR is a copy xored with 0xFF  close output file **************************************
 * KWAJD_DECOMPRESS
 ***************************************
 * unpacks directly from input to output
 **************************************
 * KWAJD_ERROR
 ***************************************
 * returns the last error that occurred
 **************************************
 * LZH_INIT, LZH_DECOMPRESS, LZH_FREE
 ***************************************
 * unpacks KWAJ method 3 files
  import bit-reading macros and code  import huffman-reading macros and code  In the KWAJ LZH format, there is no special 'eof' marker, it just
 * ends. Depending on how many bits are left in the final byte when
 * the stream ends, that might be enough to start another literal or
 * match. The only easy way to detect that we've come to an end is to
 * guard all bit-reading. We allow fake bits to be read once we reach
 * the end of the stream, but we check if we then consumed any of
 * those fake bits, after doing the READ_BITS / READ_HUFFSYM. This
 * isn't how the default readbits.h read_input() works (it simply lets
 * 2 fake bytes in then stops), so we implement our own.
  reset global state  read 6 encoding types (for byte alignment) but only 5 are needed  read huffman table symbol lengths and build huffman trees  not the end of a literal run  copy match as output and into the ring buffer  end of a literal run?  copy as output and into the ring buffer  update i_ptr and i_end  This file is part of libmspack.
 * (C) 2003-2011 Stuart Caie.
 *
 * KWAJ is a format very similar to SZDD. KWAJ method 3 (LZH) was
 * written by Jeff Johnson.
 *
 * libmspack is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License (LGPL) version 2.1
 *
 * For further details, see the file COPYING.LIB distributed with libmspack
  KWAJ decompression implementation  prototypes **************************************
 * MSPACK_CREATE_KWAJ_DECOMPRESSOR
 ***************************************
 * constructor
 **************************************
 * MSPACK_DESTROY_KWAJ_DECOMPRESSOR
 ***************************************
 * destructor
 **************************************
 * KWAJD_OPEN
 ***************************************
 * opens a KWAJ file without decompressing, reads header
 **************************************
 * KWAJD_CLOSE
 ***************************************
 * closes a KWAJ file
  close the file handle associated  free the memory associated **************************************
 * KWAJD_READ_HEADERS
 ***************************************
 * reads the headers of a KWAJ format file
  read in the header  check for "KWAJ" signature  basic header fields  optional headers  4 bytes: length of unpacked file  2 bytes: unknown purpose  2 bytes: length of section, then [length] bytes: unknown purpose  filename and extension  allocate memory for maximum length filename  copy filename if present  read and copy up to 9 bytes of a null terminated string  if string was 9 bytes with no null terminator, reject it  seek to byte after string ended in file  remove the null terminator  copy extension if present  read and copy up to 4 bytes of a null terminated string  if string was 4 bytes with no null terminator, reject it  seek to byte after string ended in file  remove the null terminator  2 bytes: extra text length then [length] bytes of extra text data **************************************
 * KWAJD_EXTRACT
 ***************************************
 * decompresses a KWAJ file
  seek to the compressed data  open file for output  decompress based on format  NONE is a straight copy. XOR is a copy xored with 0xFF  close output file **************************************
 * KWAJD_DECOMPRESS
 ***************************************
 * unpacks directly from input to output
 **************************************
 * KWAJD_ERROR
 ***************************************
 * returns the last error that occurred
 **************************************
 * LZH_INIT, LZH_DECOMPRESS, LZH_FREE
 ***************************************
 * unpacks KWAJ method 3 files
  import bit-reading macros and code  import huffman-reading macros and code  In the KWAJ LZH format, there is no special 'eof' marker, it just
 * ends. Depending on how many bits are left in the final byte when
 * the stream ends, that might be enough to start another literal or
 * match. The only easy way to detect that we've come to an end is to
 * guard all bit-reading. We allow fake bits to be read once we reach
 * the end of the stream, but we check if we then consumed any of
 * those fake bits, after doing the READ_BITS / READ_HUFFSYM. This
 * isn't how the default readbits.h read_input() works (it simply lets
 * 2 fake bytes in then stops), so we implement our own.
  reset global state  read 6 encoding types (for byte alignment) but only 5 are needed  read huffman table symbol lengths and build huffman trees  not the end of a literal run  copy match as output and into the ring buffer  end of a literal run?  copy as output and into the ring buffer  update i_ptr and i_end 