
Copyright (C) 1994-1995 Apogee Software, Ltd.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*********************************************************************
   module: TASK_MAN.C

   author: James R. Dose
   date:   July 25, 1994

   Low level timer task scheduler.

   (c) Copyright 1994 James R. Dose.  All Rights Reserved.
*********************************************************************#define USESTACK---------------------------------------------------------------------
   Global variables
--------------------------------------------------------------------- adequate stack size---------------------------------------------------------------------
   Function prototypes
--------------------------------------------------------------------- These declarations are necessary to use the inline assembly pragmas. This function will get the current stack selector and pointer and save them off. This function will set the stack selector and pointer to the specified values.*********************************************************************

   Memory locked functions:

*********************************************************************---------------------------------------------------------------------
   Function: TS_FreeTaskList

   Terminates all tasks and releases any memory used for control
   structures.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_SetClockSpeed

   Sets the rate of the 8253 timer.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_SetTimer

   Calculates the rate at which a task will occur and sets the clock
   speed if necessary.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_SetTimerToMaxTaskRate

   Finds the fastest running task and sets the clock to operate at
   that speed.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_ServiceSchedule

   Interrupt service routine
--------------------------------------------------------------------- save stack set our stackJIM         if ( ptr->count >= ptr->rate ) restore stack---------------------------------------------------------------------
   Function: TS_ServiceScheduleIntEnabled

   Interrupt service routine with interrupts enabled.
--------------------------------------------------------------------- save stack set our stack restore stack---------------------------------------------------------------------
   Function: allocateTimerStack

   Allocate a block of memory from conventional (low) memory and return
   the selector (which can go directly into a segment register) of the
   memory block or 0 if an error occured.
--------------------------------------------------------------------- clear all registers DPMI allocate conventional memory size in paragraphs DPMI call returns selector in dx (ax contains real mode segment which is ignored here) Couldn't allocate memory.---------------------------------------------------------------------
   Function: deallocateTimerStack

   Deallocate a block of conventional (low) memory given a selector to
   it.  Assumes the block was allocated with DPMI function 0x100.
--------------------------------------------------------------------- clear all registers---------------------------------------------------------------------
   Function: TS_Startup

   Sets up the task service routine.
--------------------------------------------------------------------- Leave a little room at top of stack just for the hell of it...static const task *TaskList = &HeadTask;---------------------------------------------------------------------
   Function: TS_Shutdown

   Ends processing of all tasks.
--------------------------------------------------------------------- Set Date and Time from CMOS      RestoreRealTimeClock();---------------------------------------------------------------------
   Function: TS_ScheduleTask

   Schedules a new task for processing.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_AddTask

   Adds a new task to our list of tasks.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_Terminate

   Ends processing of a specific task.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_Dispatch

   Begins processing of all inactive tasks.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_SetTaskRate

   Sets the rate at which the specified task is serviced.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_LockEnd

   Used for determining the length of the functions to lock in memory.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_UnlockMemory

   Unlocks all neccessary data.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_LockMemory

   Locks all neccessary data.
---------------------------------------------------------------------
Copyright (C) 1994-1995 Apogee Software, Ltd.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*********************************************************************
   module: TASK_MAN.C

   author: James R. Dose
   date:   July 25, 1994

   Low level timer task scheduler.

   (c) Copyright 1994 James R. Dose.  All Rights Reserved.
*********************************************************************#define USESTACK---------------------------------------------------------------------
   Global variables
--------------------------------------------------------------------- adequate stack size---------------------------------------------------------------------
   Function prototypes
--------------------------------------------------------------------- These declarations are necessary to use the inline assembly pragmas. This function will get the current stack selector and pointer and save them off. This function will set the stack selector and pointer to the specified values.*********************************************************************

   Memory locked functions:

*********************************************************************---------------------------------------------------------------------
   Function: TS_FreeTaskList

   Terminates all tasks and releases any memory used for control
   structures.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_SetClockSpeed

   Sets the rate of the 8253 timer.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_SetTimer

   Calculates the rate at which a task will occur and sets the clock
   speed if necessary.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_SetTimerToMaxTaskRate

   Finds the fastest running task and sets the clock to operate at
   that speed.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_ServiceSchedule

   Interrupt service routine
--------------------------------------------------------------------- save stack set our stackJIM         if ( ptr->count >= ptr->rate ) restore stack---------------------------------------------------------------------
   Function: TS_ServiceScheduleIntEnabled

   Interrupt service routine with interrupts enabled.
--------------------------------------------------------------------- save stack set our stack restore stack---------------------------------------------------------------------
   Function: allocateTimerStack

   Allocate a block of memory from conventional (low) memory and return
   the selector (which can go directly into a segment register) of the
   memory block or 0 if an error occured.
--------------------------------------------------------------------- clear all registers DPMI allocate conventional memory size in paragraphs DPMI call returns selector in dx (ax contains real mode segment which is ignored here) Couldn't allocate memory.---------------------------------------------------------------------
   Function: deallocateTimerStack

   Deallocate a block of conventional (low) memory given a selector to
   it.  Assumes the block was allocated with DPMI function 0x100.
--------------------------------------------------------------------- clear all registers---------------------------------------------------------------------
   Function: TS_Startup

   Sets up the task service routine.
--------------------------------------------------------------------- Leave a little room at top of stack just for the hell of it...static const task *TaskList = &HeadTask;---------------------------------------------------------------------
   Function: TS_Shutdown

   Ends processing of all tasks.
--------------------------------------------------------------------- Set Date and Time from CMOS      RestoreRealTimeClock();---------------------------------------------------------------------
   Function: TS_ScheduleTask

   Schedules a new task for processing.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_AddTask

   Adds a new task to our list of tasks.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_Terminate

   Ends processing of a specific task.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_Dispatch

   Begins processing of all inactive tasks.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_SetTaskRate

   Sets the rate at which the specified task is serviced.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_LockEnd

   Used for determining the length of the functions to lock in memory.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_UnlockMemory

   Unlocks all neccessary data.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_LockMemory

   Locks all neccessary data.
---------------------------------------------------------------------
Copyright (C) 1994-1995 Apogee Software, Ltd.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*********************************************************************
   module: TASK_MAN.C

   author: James R. Dose
   date:   July 25, 1994

   Low level timer task scheduler.

   (c) Copyright 1994 James R. Dose.  All Rights Reserved.
*********************************************************************#define USESTACK---------------------------------------------------------------------
   Global variables
--------------------------------------------------------------------- adequate stack size---------------------------------------------------------------------
   Function prototypes
--------------------------------------------------------------------- These declarations are necessary to use the inline assembly pragmas. This function will get the current stack selector and pointer and save them off. This function will set the stack selector and pointer to the specified values.*********************************************************************

   Memory locked functions:

*********************************************************************---------------------------------------------------------------------
   Function: TS_FreeTaskList

   Terminates all tasks and releases any memory used for control
   structures.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_SetClockSpeed

   Sets the rate of the 8253 timer.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_SetTimer

   Calculates the rate at which a task will occur and sets the clock
   speed if necessary.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_SetTimerToMaxTaskRate

   Finds the fastest running task and sets the clock to operate at
   that speed.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_ServiceSchedule

   Interrupt service routine
--------------------------------------------------------------------- save stack set our stackJIM         if ( ptr->count >= ptr->rate ) restore stack---------------------------------------------------------------------
   Function: TS_ServiceScheduleIntEnabled

   Interrupt service routine with interrupts enabled.
--------------------------------------------------------------------- save stack set our stack restore stack---------------------------------------------------------------------
   Function: allocateTimerStack

   Allocate a block of memory from conventional (low) memory and return
   the selector (which can go directly into a segment register) of the
   memory block or 0 if an error occured.
--------------------------------------------------------------------- clear all registers DPMI allocate conventional memory size in paragraphs DPMI call returns selector in dx (ax contains real mode segment which is ignored here) Couldn't allocate memory.---------------------------------------------------------------------
   Function: deallocateTimerStack

   Deallocate a block of conventional (low) memory given a selector to
   it.  Assumes the block was allocated with DPMI function 0x100.
--------------------------------------------------------------------- clear all registers---------------------------------------------------------------------
   Function: TS_Startup

   Sets up the task service routine.
--------------------------------------------------------------------- Leave a little room at top of stack just for the hell of it...static const task *TaskList = &HeadTask;---------------------------------------------------------------------
   Function: TS_Shutdown

   Ends processing of all tasks.
--------------------------------------------------------------------- Set Date and Time from CMOS      RestoreRealTimeClock();---------------------------------------------------------------------
   Function: TS_ScheduleTask

   Schedules a new task for processing.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_AddTask

   Adds a new task to our list of tasks.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_Terminate

   Ends processing of a specific task.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_Dispatch

   Begins processing of all inactive tasks.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_SetTaskRate

   Sets the rate at which the specified task is serviced.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_LockEnd

   Used for determining the length of the functions to lock in memory.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_UnlockMemory

   Unlocks all neccessary data.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: TS_LockMemory

   Locks all neccessary data.
---------------------------------------------------------------------