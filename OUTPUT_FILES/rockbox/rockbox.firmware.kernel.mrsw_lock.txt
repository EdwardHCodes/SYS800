**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** no need to lock this; if a reader can claim, noone is in the queue  If no writer is queued or has ownership then noone is queued;
       if a writer owns it, then the reader would be blocked instead.
       Therefore, if the queue has threads, then the next after the
       owning readers is a writer and this is not the last reader.  There is noone waiting; we'd be calling mrsw_wakeup_writer()
           at this time instead  switch owner to sole remaining reader  !HAVE_PRIORITY_SCHEDULING  HAVE_PRIORITY_SCHEDULING * Public interface * Initializes a multi-reader, single-writer object  Request reader thread lock. Any number of reader threads may enter which
 * also locks-out all writer threads. Same thread may safely acquire read
 * access recursively. The current writer is ignored and gets access.  Read request while holding write access; pass  Track recursion counts for each thread:
       IF_PRIO, mrsw->count just tracks unique owners   HAVE_PRIORITY_SCHEDULING  Lock open to readers:
           IFN_PRIO, mrsw->count tracks reader recursion  A writer owns it or is waiting; block...  indicate multi-wake candidate  ...and turn control over to next thread  Release reader thread lockout of writer thread. The last reader to
 * leave opens up access to writer threads. The current writer is ignored.  Read release while holding write access; ignore  Reader is releasing recursive claim  HAVE_PRIORITY_SCHEDULING  No readers remain and a writer is waiting  Giving up readership; we may be the last, or not  HAVE_PRIORITY_SCHEDULING  Acquire writer thread lock which provides exclusive access. If a thread
 * that is holding read access calls this it will deadlock. The writer may
 * safely call recursively.  Current thread already has write access  Lock is open to a writer  Readers present or a writer owns it - block...  indicate single-wake candidate  ...and turn control over to next thread  Release writer thread lock and open the lock to readers and writers  This thread still owns write lock  'count' becomes zero  'count' stays -1  'count' becomes # of readers  HAVE_PRIORITY_SCHEDULING **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** no need to lock this; if a reader can claim, noone is in the queue  If no writer is queued or has ownership then noone is queued;
       if a writer owns it, then the reader would be blocked instead.
       Therefore, if the queue has threads, then the next after the
       owning readers is a writer and this is not the last reader.  There is noone waiting; we'd be calling mrsw_wakeup_writer()
           at this time instead  switch owner to sole remaining reader  !HAVE_PRIORITY_SCHEDULING  HAVE_PRIORITY_SCHEDULING * Public interface * Initializes a multi-reader, single-writer object  Request reader thread lock. Any number of reader threads may enter which
 * also locks-out all writer threads. Same thread may safely acquire read
 * access recursively. The current writer is ignored and gets access.  Read request while holding write access; pass  Track recursion counts for each thread:
       IF_PRIO, mrsw->count just tracks unique owners   HAVE_PRIORITY_SCHEDULING  Lock open to readers:
           IFN_PRIO, mrsw->count tracks reader recursion  A writer owns it or is waiting; block...  indicate multi-wake candidate  ...and turn control over to next thread  Release reader thread lockout of writer thread. The last reader to
 * leave opens up access to writer threads. The current writer is ignored.  Read release while holding write access; ignore  Reader is releasing recursive claim  HAVE_PRIORITY_SCHEDULING  No readers remain and a writer is waiting  Giving up readership; we may be the last, or not  HAVE_PRIORITY_SCHEDULING  Acquire writer thread lock which provides exclusive access. If a thread
 * that is holding read access calls this it will deadlock. The writer may
 * safely call recursively.  Current thread already has write access  Lock is open to a writer  Readers present or a writer owns it - block...  indicate single-wake candidate  ...and turn control over to next thread  Release writer thread lock and open the lock to readers and writers  This thread still owns write lock  'count' becomes zero  'count' stays -1  'count' becomes # of readers  HAVE_PRIORITY_SCHEDULING **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** no need to lock this; if a reader can claim, noone is in the queue  If no writer is queued or has ownership then noone is queued;
       if a writer owns it, then the reader would be blocked instead.
       Therefore, if the queue has threads, then the next after the
       owning readers is a writer and this is not the last reader.  There is noone waiting; we'd be calling mrsw_wakeup_writer()
           at this time instead  switch owner to sole remaining reader  !HAVE_PRIORITY_SCHEDULING  HAVE_PRIORITY_SCHEDULING * Public interface * Initializes a multi-reader, single-writer object  Request reader thread lock. Any number of reader threads may enter which
 * also locks-out all writer threads. Same thread may safely acquire read
 * access recursively. The current writer is ignored and gets access.  Read request while holding write access; pass  Track recursion counts for each thread:
       IF_PRIO, mrsw->count just tracks unique owners   HAVE_PRIORITY_SCHEDULING  Lock open to readers:
           IFN_PRIO, mrsw->count tracks reader recursion  A writer owns it or is waiting; block...  indicate multi-wake candidate  ...and turn control over to next thread  Release reader thread lockout of writer thread. The last reader to
 * leave opens up access to writer threads. The current writer is ignored.  Read release while holding write access; ignore  Reader is releasing recursive claim  HAVE_PRIORITY_SCHEDULING  No readers remain and a writer is waiting  Giving up readership; we may be the last, or not  HAVE_PRIORITY_SCHEDULING  Acquire writer thread lock which provides exclusive access. If a thread
 * that is holding read access calls this it will deadlock. The writer may
 * safely call recursively.  Current thread already has write access  Lock is open to a writer  Readers present or a writer owns it - block...  indicate single-wake candidate  ...and turn control over to next thread  Release writer thread lock and open the lock to readers and writers  This thread still owns write lock  'count' becomes zero  'count' stays -1  'count' becomes # of readers  HAVE_PRIORITY_SCHEDULING 