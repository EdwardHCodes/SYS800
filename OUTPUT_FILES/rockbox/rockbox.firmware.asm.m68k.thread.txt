**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2004 by Linus Nielsen Feltzing
 *
 * Coldfire processor threading support
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************---------------------------------------------------------------------------
 * Start the thread running and terminate it if it returns
 *---------------------------------------------------------------------------
  Provide C access to ASM label  a0=macsr, a1=context  Start here - no naked attribute  Set initial mac status reg  Set initial stack  Fetch thread function pointer  Mark thread running  Call thread function  Set EMAC unit to fractional mode with saturation for each new thread,
 * since that's what'll be the most useful for most things which the dsp
 * will do. Codecs should still initialize their preferred modes
 * explicitly. Context pointer is placed in d2 slot and start_thread
 * pointer in d3 slot. thread function pointer is placed in context.start.
 * See load_context for what happens when thread is initially going to
 * run.
 ---------------------------------------------------------------------------
 * Store non-volatile context.
 *---------------------------------------------------------------------------
  only! ---------------------------------------------------------------------------
 * Load non-volatile context.
 *---------------------------------------------------------------------------
  Get start address  NULL -> already running  a0=macsr, a1=context, a2=start_thread  Start the thread  Load context  only! ---------------------------------------------------------------------------
 * Call this from asm to make sure the sp is pointing to the
 * correct place before the context is saved.
 *---------------------------------------------------------------------------
  RB_PROFILE **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2004 by Linus Nielsen Feltzing
 *
 * Coldfire processor threading support
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************---------------------------------------------------------------------------
 * Start the thread running and terminate it if it returns
 *---------------------------------------------------------------------------
  Provide C access to ASM label  a0=macsr, a1=context  Start here - no naked attribute  Set initial mac status reg  Set initial stack  Fetch thread function pointer  Mark thread running  Call thread function  Set EMAC unit to fractional mode with saturation for each new thread,
 * since that's what'll be the most useful for most things which the dsp
 * will do. Codecs should still initialize their preferred modes
 * explicitly. Context pointer is placed in d2 slot and start_thread
 * pointer in d3 slot. thread function pointer is placed in context.start.
 * See load_context for what happens when thread is initially going to
 * run.
 ---------------------------------------------------------------------------
 * Store non-volatile context.
 *---------------------------------------------------------------------------
  only! ---------------------------------------------------------------------------
 * Load non-volatile context.
 *---------------------------------------------------------------------------
  Get start address  NULL -> already running  a0=macsr, a1=context, a2=start_thread  Start the thread  Load context  only! ---------------------------------------------------------------------------
 * Call this from asm to make sure the sp is pointing to the
 * correct place before the context is saved.
 *---------------------------------------------------------------------------
  RB_PROFILE **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2004 by Linus Nielsen Feltzing
 *
 * Coldfire processor threading support
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************---------------------------------------------------------------------------
 * Start the thread running and terminate it if it returns
 *---------------------------------------------------------------------------
  Provide C access to ASM label  a0=macsr, a1=context  Start here - no naked attribute  Set initial mac status reg  Set initial stack  Fetch thread function pointer  Mark thread running  Call thread function  Set EMAC unit to fractional mode with saturation for each new thread,
 * since that's what'll be the most useful for most things which the dsp
 * will do. Codecs should still initialize their preferred modes
 * explicitly. Context pointer is placed in d2 slot and start_thread
 * pointer in d3 slot. thread function pointer is placed in context.start.
 * See load_context for what happens when thread is initially going to
 * run.
 ---------------------------------------------------------------------------
 * Store non-volatile context.
 *---------------------------------------------------------------------------
  only! ---------------------------------------------------------------------------
 * Load non-volatile context.
 *---------------------------------------------------------------------------
  Get start address  NULL -> already running  a0=macsr, a1=context, a2=start_thread  Start the thread  Load context  only! ---------------------------------------------------------------------------
 * Call this from asm to make sure the sp is pointing to the
 * correct place before the context is saved.
 *---------------------------------------------------------------------------
  RB_PROFILE 