	MikMod sound library
	(c) 1998, 1999, 2000, 2001, 2002 Miodrag Vallat and others - see file
	AUTHORS for complete list.

	This library is free software; you can redistribute it and/or modify
	it under the terms of the GNU Library General Public License as
	published by the Free Software Foundation; either version 2 of
	the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Library General Public License for more details.

	You should have received a copy of the GNU Library General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
	02111-1307, USA.
==============================================================================

  $Id$

  Sample mixing routines, using a 32 bits mixing buffer.

==============================================================================

  Optional features include:
    (a) 4-step reverb (for 16 bit output only)
    (b) Interpolation of sample data during mixing
    (c) Dolby Surround Sound

   Constant definitions
   ====================

	BITSHIFT
		Controls the maximum volume of the sound output.  All data is shifted
		right by BITSHIFT after being mixed. Higher values result in quieter
		sound and less chance of distortion.

	REVERBERATION
		Controls the duration of the reverb. Larger values represent a shorter
		reverb loop. Smaller values extend the reverb but can result in more of
		an echo-ish sound.

 =1 -> sample has to be restarted  =1 -> sample is playing  16/8 bits looping/one-shot  identifies the sample  start index  samplesize  loop start  loop end  current frequency  current volume  current panning position  Volume factor in range 0-255  current index in the sample  increment value  Reverb control variables  For Mono or Left Channel  For Stereo only (Right Channel)  TODO:  !NATIVE_64BIT_INT  Dest can be misaligned  Srce is always aligned  l  l  r  r  l  l  r  r  Load constants  s0  0   s0  0   s1  0   s1  0   s2  0   s2  0   s3  0   s3  0   HAVE_ALTIVEC  Remaining bits ========== 32 bit sample mixers - only for 32 bit platforms  FIXME: This mixer should works also on 64-bit platform  Hint : changes SLONG / SLONGLONG mess with intptr ========== 64 bit sample mixers - all platforms  Reverb macros  Compute the left channel echo buffers  Prepare to compute actual finalized data  left channel  Compute the left channel echo buffers  Compute the right channel echo buffers  Prepare to compute actual finalized data  left channel then right channel  shifting fudge factor for FP scaling, should be 0 < FP_SHIFT < BITSHIFT  Mixing macros  Mixing macros  Mix 32bit input to floating point. 32 samples per iteration  PC: ?, Mac OK  Scale factor  Load 4 samples  Load 4 samples  Store 4 samples  Store 4 samples  Load 4 samples  Store 4 samples  PC: Ok, Mac Ok  Load 4 samples  Load 4 samples  Store 8 samples  Mix 32bit input to 8bit. 128 samples per iteration  PC:OK, Mac: Ok  Load 4 samples  Load 4 samples  Load 4 samples  Load 4 samples  Store 16 samples  update the 'current' index so the sample loops, or stops playing if it
	   reached the end of the sample  The sample is playing in reverse  the sample is looping and has reached the loopstart index  sample is doing bidirectional loops, so 'bounce' the
					   current index against the idxlpos  normal backwards looping, so set the current position to
					   loopend index  the sample is not looping, so check if it reached index 0  playing index reached 0, so stop playing this sample  The sample is playing forward  the sample is looping, check the loopend index  sample is doing bidirectional loops, so 'bounce' the
					   current index against the idxlend  normal backwards looping, so set the current position
					   to loopend index  sample is not looping, so check if it reached the last
				   position  yes, so stop playing this sample  if the sample is not blocked...  use the 32 bit mixers as often as we can (they're much faster)  update sample position  allocate reverb buffers for the right channel if in stereo mode only.  ex:set ts=4: 	MikMod sound library
	(c) 1998, 1999, 2000, 2001, 2002 Miodrag Vallat and others - see file
	AUTHORS for complete list.

	This library is free software; you can redistribute it and/or modify
	it under the terms of the GNU Library General Public License as
	published by the Free Software Foundation; either version 2 of
	the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Library General Public License for more details.

	You should have received a copy of the GNU Library General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
	02111-1307, USA.
==============================================================================

  $Id$

  Sample mixing routines, using a 32 bits mixing buffer.

==============================================================================

  Optional features include:
    (a) 4-step reverb (for 16 bit output only)
    (b) Interpolation of sample data during mixing
    (c) Dolby Surround Sound

   Constant definitions
   ====================

	BITSHIFT
		Controls the maximum volume of the sound output.  All data is shifted
		right by BITSHIFT after being mixed. Higher values result in quieter
		sound and less chance of distortion.

	REVERBERATION
		Controls the duration of the reverb. Larger values represent a shorter
		reverb loop. Smaller values extend the reverb but can result in more of
		an echo-ish sound.

 =1 -> sample has to be restarted  =1 -> sample is playing  16/8 bits looping/one-shot  identifies the sample  start index  samplesize  loop start  loop end  current frequency  current volume  current panning position  Volume factor in range 0-255  current index in the sample  increment value  Reverb control variables  For Mono or Left Channel  For Stereo only (Right Channel)  TODO:  !NATIVE_64BIT_INT  Dest can be misaligned  Srce is always aligned  l  l  r  r  l  l  r  r  Load constants  s0  0   s0  0   s1  0   s1  0   s2  0   s2  0   s3  0   s3  0   HAVE_ALTIVEC  Remaining bits ========== 32 bit sample mixers - only for 32 bit platforms  FIXME: This mixer should works also on 64-bit platform  Hint : changes SLONG / SLONGLONG mess with intptr ========== 64 bit sample mixers - all platforms  Reverb macros  Compute the left channel echo buffers  Prepare to compute actual finalized data  left channel  Compute the left channel echo buffers  Compute the right channel echo buffers  Prepare to compute actual finalized data  left channel then right channel  shifting fudge factor for FP scaling, should be 0 < FP_SHIFT < BITSHIFT  Mixing macros  Mixing macros  Mix 32bit input to floating point. 32 samples per iteration  PC: ?, Mac OK  Scale factor  Load 4 samples  Load 4 samples  Store 4 samples  Store 4 samples  Load 4 samples  Store 4 samples  PC: Ok, Mac Ok  Load 4 samples  Load 4 samples  Store 8 samples  Mix 32bit input to 8bit. 128 samples per iteration  PC:OK, Mac: Ok  Load 4 samples  Load 4 samples  Load 4 samples  Load 4 samples  Store 16 samples  update the 'current' index so the sample loops, or stops playing if it
	   reached the end of the sample  The sample is playing in reverse  the sample is looping and has reached the loopstart index  sample is doing bidirectional loops, so 'bounce' the
					   current index against the idxlpos  normal backwards looping, so set the current position to
					   loopend index  the sample is not looping, so check if it reached index 0  playing index reached 0, so stop playing this sample  The sample is playing forward  the sample is looping, check the loopend index  sample is doing bidirectional loops, so 'bounce' the
					   current index against the idxlend  normal backwards looping, so set the current position
					   to loopend index  sample is not looping, so check if it reached the last
				   position  yes, so stop playing this sample  if the sample is not blocked...  use the 32 bit mixers as often as we can (they're much faster)  update sample position  allocate reverb buffers for the right channel if in stereo mode only.  ex:set ts=4: 	MikMod sound library
	(c) 1998, 1999, 2000, 2001, 2002 Miodrag Vallat and others - see file
	AUTHORS for complete list.

	This library is free software; you can redistribute it and/or modify
	it under the terms of the GNU Library General Public License as
	published by the Free Software Foundation; either version 2 of
	the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Library General Public License for more details.

	You should have received a copy of the GNU Library General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
	02111-1307, USA.
==============================================================================

  $Id$

  Sample mixing routines, using a 32 bits mixing buffer.

==============================================================================

  Optional features include:
    (a) 4-step reverb (for 16 bit output only)
    (b) Interpolation of sample data during mixing
    (c) Dolby Surround Sound

   Constant definitions
   ====================

	BITSHIFT
		Controls the maximum volume of the sound output.  All data is shifted
		right by BITSHIFT after being mixed. Higher values result in quieter
		sound and less chance of distortion.

	REVERBERATION
		Controls the duration of the reverb. Larger values represent a shorter
		reverb loop. Smaller values extend the reverb but can result in more of
		an echo-ish sound.

 =1 -> sample has to be restarted  =1 -> sample is playing  16/8 bits looping/one-shot  identifies the sample  start index  samplesize  loop start  loop end  current frequency  current volume  current panning position  Volume factor in range 0-255  current index in the sample  increment value  Reverb control variables  For Mono or Left Channel  For Stereo only (Right Channel)  TODO:  !NATIVE_64BIT_INT  Dest can be misaligned  Srce is always aligned  l  l  r  r  l  l  r  r  Load constants  s0  0   s0  0   s1  0   s1  0   s2  0   s2  0   s3  0   s3  0   HAVE_ALTIVEC  Remaining bits ========== 32 bit sample mixers - only for 32 bit platforms  FIXME: This mixer should works also on 64-bit platform  Hint : changes SLONG / SLONGLONG mess with intptr ========== 64 bit sample mixers - all platforms  Reverb macros  Compute the left channel echo buffers  Prepare to compute actual finalized data  left channel  Compute the left channel echo buffers  Compute the right channel echo buffers  Prepare to compute actual finalized data  left channel then right channel  shifting fudge factor for FP scaling, should be 0 < FP_SHIFT < BITSHIFT  Mixing macros  Mixing macros  Mix 32bit input to floating point. 32 samples per iteration  PC: ?, Mac OK  Scale factor  Load 4 samples  Load 4 samples  Store 4 samples  Store 4 samples  Load 4 samples  Store 4 samples  PC: Ok, Mac Ok  Load 4 samples  Load 4 samples  Store 8 samples  Mix 32bit input to 8bit. 128 samples per iteration  PC:OK, Mac: Ok  Load 4 samples  Load 4 samples  Load 4 samples  Load 4 samples  Store 16 samples  update the 'current' index so the sample loops, or stops playing if it
	   reached the end of the sample  The sample is playing in reverse  the sample is looping and has reached the loopstart index  sample is doing bidirectional loops, so 'bounce' the
					   current index against the idxlpos  normal backwards looping, so set the current position to
					   loopend index  the sample is not looping, so check if it reached index 0  playing index reached 0, so stop playing this sample  The sample is playing forward  the sample is looping, check the loopend index  sample is doing bidirectional loops, so 'bounce' the
					   current index against the idxlend  normal backwards looping, so set the current position
					   to loopend index  sample is not looping, so check if it reached the last
				   position  yes, so stop playing this sample  if the sample is not blocked...  use the 32 bit mixers as often as we can (they're much faster)  update sample position  allocate reverb buffers for the right channel if in stereo mode only.  ex:set ts=4: 