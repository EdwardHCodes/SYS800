 Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *      Movement/collision utility functions,
 *      as used by function in p_map.c.
 *      BLOCKMAP Iterator functions,
 *      and some PIT_* functions to use for iteration.
 *
 *----------------------------------------------------------------------------- P_AproxDistance Gives an estimation of distance (not exact) P_PointOnLineSide Returns 0 or 1 killough 5/3/98: reformatted, cleaned up P_BoxOnLineSide Considers the line to be infinite Returns side 0 or 1, -1 if box crosses the line. killough 5/3/98: reformatted, cleaned up shut up compiler warnings -- killough P_PointOnDivlineSide Returns 0 or 1. killough 5/3/98: reformatted, cleaned up P_MakeDivline P_InterceptVector Returns the fractional intercept point along the first divline. This is only called by the addthings and addlines traversers. killough 5/3/98: reformatted, cleaned up P_LineOpening Sets opentop and openbottom to the window through a two sided line. OPTIMIZE: keep this precalculated moved front and back outside P-LineOpening and changed    // phares 3/7/98 them to these so we can pick up the new friction value in PIT_CheckLine() made global                    // phares made global single sided line THING POSITION SETTING P_UnsetThingPosition Unlinks a thing from block map and sectors. On each position change, BLOCKMAP and other lookups maintaining lists ot things inside these structures need to be updated. invisible things don't need to be in sector list
       * unlink from subsector
       *
       * killough 8/11/98: simpler scheme using pointers-to-pointers for prev
       * pointers, allows head node pointers to be treated like everything else
        unlink from sector list phares 3/14/98 Save the sector list pointed to by touching_sectorlist. In P_SetThingPosition, we'll keep any nodes that represent sectors the Thing still touches. We'll add new ones then, and delete any nodes for sectors the Thing has vacated. Then we'll put it back into touching_sectorlist. It's done this way to avoid a lot of deleting/creating for nodes, when most of the time you just get back what you deleted anyway. If this Thing is being removed entirely, then the calling routine will clear out the nodes in sector_list.to be restored by P_SetThingPosition inert things don't need to be in blockmap
       *
       * killough 8/11/98: simpler scheme using pointers-to-pointers for prev
       * pointers, allows head node pointers to be treated like everything else
       *
       * Also more robust, since it doesn't depend on current position for
       * unlinking. Old method required computing head node based on position
       * at time of unlinking, assuming it was the same position as during
       * linking.
        unlink from block map P_SetThingPosition Links a thing into both a block and a subsector based on it's x y. Sets thing->subsector properly killough 5/3/98: reformatted, cleaned up link into subsector invisible things don't go into the sector links killough 8/11/98: simpler scheme using pointer-to-pointer prev pointers, allows head nodes to be treated like everything else phares 3/16/98 If sector_list isn't NULL, it has a collection of sector nodes that were just removed from this Thing. Collect the sectors the object will live in by looking at the existing sector_list and adding new nodes and deleting obsolete ones. When a node is deleted, its sector links (the links starting at sector_t->touching_thinglist) are broken. When a node is added, new sector links are created. Attach to Thing's mobj_t clear for next time link into blockmap inert things don't need to be in blockmap killough 8/11/98: simpler scheme using pointer-to-pointer prev pointers, allows head nodes to be treated like everything else thing is off the map killough 3/15/98: A fast function for testing intersections between things and linedefs. Linedef vector Thing-->v1 vector Thing radius First make sure bounding boxes of linedef and thing intersect. Leads to quick rejection using only shifts and adds/subs/compares. Next, make sure that at least one thing crosshair intersects linedef's extension. Requires only 3-4 multiplications, the rest adds/subs/ shifts/xors (writing the steps out this way leads to better codegen). BLOCK MAP ITERATORS For each line/thing in the given mapblock, call the passed PIT_* function. If the function returns false, exit with false without checking anything else. P_BlockLinesIterator The validcount flags are used to avoid checking lines that are marked in multiple mapblocks, so increment validcount before the first call to P_BlockLinesIterator, then make one or more calls to it. killough 5/3/98: reformatted, cleaned up killough 3/1/98: for removal of blockmap limit original was reading         // phares delmiting 0 as linedef 0     // phares killough 1/31/98: for compatibility we need to use the old method. Most demos go out of sync, and maybe other problems happen, if we don't consider linedef 0. For safety this should be qualified. killough 2/22/98: demo_compatibility check skip 0 starting delimiter                      // phares phares line has already been checked everything was checked P_BlockThingsIterator killough 5/3/98: reformatted, cleaned up INTERCEPT ROUTINES 1/11/98 killough: Intercept limit removed Check for limit and double size if necessary -- killough PIT_AddLineIntercepts. Looks for lines in the given block that intercept the given trace to add to the intercepts list. A line is crossed if its endpoints are on opposite sides of the trace. killough 5/3/98: reformatted, cleaned up avoid precision problems with two routines line isn't crossed hit the line behind source killough continue PIT_AddThingIntercepts killough 5/3/98: reformatted, cleaned up check a corner to corner crossection for hit line isn't crossed behind source killough keep going P_TraverseIntercepts Returns true if the traverser function returns true for all lines. killough 5/3/98: reformatted, cleaned up checked everything in range don't bother going farther everything was traversed P_PathTraverse Traces a line from x1,y1 to x2,y2, calling the traverser function for each. Returns true if the traverser function returns true for all lines. killough 5/3/98: reformatted, cleaned up don't side exactly on a line don't side exactly on a line Step through map blocks. Count is present to prevent a round off error from skipping the break. early out early out go through the sorted list Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *      Movement/collision utility functions,
 *      as used by function in p_map.c.
 *      BLOCKMAP Iterator functions,
 *      and some PIT_* functions to use for iteration.
 *
 *----------------------------------------------------------------------------- P_AproxDistance Gives an estimation of distance (not exact) P_PointOnLineSide Returns 0 or 1 killough 5/3/98: reformatted, cleaned up P_BoxOnLineSide Considers the line to be infinite Returns side 0 or 1, -1 if box crosses the line. killough 5/3/98: reformatted, cleaned up shut up compiler warnings -- killough P_PointOnDivlineSide Returns 0 or 1. killough 5/3/98: reformatted, cleaned up P_MakeDivline P_InterceptVector Returns the fractional intercept point along the first divline. This is only called by the addthings and addlines traversers. killough 5/3/98: reformatted, cleaned up P_LineOpening Sets opentop and openbottom to the window through a two sided line. OPTIMIZE: keep this precalculated moved front and back outside P-LineOpening and changed    // phares 3/7/98 them to these so we can pick up the new friction value in PIT_CheckLine() made global                    // phares made global single sided line THING POSITION SETTING P_UnsetThingPosition Unlinks a thing from block map and sectors. On each position change, BLOCKMAP and other lookups maintaining lists ot things inside these structures need to be updated. invisible things don't need to be in sector list
       * unlink from subsector
       *
       * killough 8/11/98: simpler scheme using pointers-to-pointers for prev
       * pointers, allows head node pointers to be treated like everything else
        unlink from sector list phares 3/14/98 Save the sector list pointed to by touching_sectorlist. In P_SetThingPosition, we'll keep any nodes that represent sectors the Thing still touches. We'll add new ones then, and delete any nodes for sectors the Thing has vacated. Then we'll put it back into touching_sectorlist. It's done this way to avoid a lot of deleting/creating for nodes, when most of the time you just get back what you deleted anyway. If this Thing is being removed entirely, then the calling routine will clear out the nodes in sector_list.to be restored by P_SetThingPosition inert things don't need to be in blockmap
       *
       * killough 8/11/98: simpler scheme using pointers-to-pointers for prev
       * pointers, allows head node pointers to be treated like everything else
       *
       * Also more robust, since it doesn't depend on current position for
       * unlinking. Old method required computing head node based on position
       * at time of unlinking, assuming it was the same position as during
       * linking.
        unlink from block map P_SetThingPosition Links a thing into both a block and a subsector based on it's x y. Sets thing->subsector properly killough 5/3/98: reformatted, cleaned up link into subsector invisible things don't go into the sector links killough 8/11/98: simpler scheme using pointer-to-pointer prev pointers, allows head nodes to be treated like everything else phares 3/16/98 If sector_list isn't NULL, it has a collection of sector nodes that were just removed from this Thing. Collect the sectors the object will live in by looking at the existing sector_list and adding new nodes and deleting obsolete ones. When a node is deleted, its sector links (the links starting at sector_t->touching_thinglist) are broken. When a node is added, new sector links are created. Attach to Thing's mobj_t clear for next time link into blockmap inert things don't need to be in blockmap killough 8/11/98: simpler scheme using pointer-to-pointer prev pointers, allows head nodes to be treated like everything else thing is off the map killough 3/15/98: A fast function for testing intersections between things and linedefs. Linedef vector Thing-->v1 vector Thing radius First make sure bounding boxes of linedef and thing intersect. Leads to quick rejection using only shifts and adds/subs/compares. Next, make sure that at least one thing crosshair intersects linedef's extension. Requires only 3-4 multiplications, the rest adds/subs/ shifts/xors (writing the steps out this way leads to better codegen). BLOCK MAP ITERATORS For each line/thing in the given mapblock, call the passed PIT_* function. If the function returns false, exit with false without checking anything else. P_BlockLinesIterator The validcount flags are used to avoid checking lines that are marked in multiple mapblocks, so increment validcount before the first call to P_BlockLinesIterator, then make one or more calls to it. killough 5/3/98: reformatted, cleaned up killough 3/1/98: for removal of blockmap limit original was reading         // phares delmiting 0 as linedef 0     // phares killough 1/31/98: for compatibility we need to use the old method. Most demos go out of sync, and maybe other problems happen, if we don't consider linedef 0. For safety this should be qualified. killough 2/22/98: demo_compatibility check skip 0 starting delimiter                      // phares phares line has already been checked everything was checked P_BlockThingsIterator killough 5/3/98: reformatted, cleaned up INTERCEPT ROUTINES 1/11/98 killough: Intercept limit removed Check for limit and double size if necessary -- killough PIT_AddLineIntercepts. Looks for lines in the given block that intercept the given trace to add to the intercepts list. A line is crossed if its endpoints are on opposite sides of the trace. killough 5/3/98: reformatted, cleaned up avoid precision problems with two routines line isn't crossed hit the line behind source killough continue PIT_AddThingIntercepts killough 5/3/98: reformatted, cleaned up check a corner to corner crossection for hit line isn't crossed behind source killough keep going P_TraverseIntercepts Returns true if the traverser function returns true for all lines. killough 5/3/98: reformatted, cleaned up checked everything in range don't bother going farther everything was traversed P_PathTraverse Traces a line from x1,y1 to x2,y2, calling the traverser function for each. Returns true if the traverser function returns true for all lines. killough 5/3/98: reformatted, cleaned up don't side exactly on a line don't side exactly on a line Step through map blocks. Count is present to prevent a round off error from skipping the break. early out early out go through the sorted list Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *      Movement/collision utility functions,
 *      as used by function in p_map.c.
 *      BLOCKMAP Iterator functions,
 *      and some PIT_* functions to use for iteration.
 *
 *----------------------------------------------------------------------------- P_AproxDistance Gives an estimation of distance (not exact) P_PointOnLineSide Returns 0 or 1 killough 5/3/98: reformatted, cleaned up P_BoxOnLineSide Considers the line to be infinite Returns side 0 or 1, -1 if box crosses the line. killough 5/3/98: reformatted, cleaned up shut up compiler warnings -- killough P_PointOnDivlineSide Returns 0 or 1. killough 5/3/98: reformatted, cleaned up P_MakeDivline P_InterceptVector Returns the fractional intercept point along the first divline. This is only called by the addthings and addlines traversers. killough 5/3/98: reformatted, cleaned up P_LineOpening Sets opentop and openbottom to the window through a two sided line. OPTIMIZE: keep this precalculated moved front and back outside P-LineOpening and changed    // phares 3/7/98 them to these so we can pick up the new friction value in PIT_CheckLine() made global                    // phares made global single sided line THING POSITION SETTING P_UnsetThingPosition Unlinks a thing from block map and sectors. On each position change, BLOCKMAP and other lookups maintaining lists ot things inside these structures need to be updated. invisible things don't need to be in sector list
       * unlink from subsector
       *
       * killough 8/11/98: simpler scheme using pointers-to-pointers for prev
       * pointers, allows head node pointers to be treated like everything else
        unlink from sector list phares 3/14/98 Save the sector list pointed to by touching_sectorlist. In P_SetThingPosition, we'll keep any nodes that represent sectors the Thing still touches. We'll add new ones then, and delete any nodes for sectors the Thing has vacated. Then we'll put it back into touching_sectorlist. It's done this way to avoid a lot of deleting/creating for nodes, when most of the time you just get back what you deleted anyway. If this Thing is being removed entirely, then the calling routine will clear out the nodes in sector_list.to be restored by P_SetThingPosition inert things don't need to be in blockmap
       *
       * killough 8/11/98: simpler scheme using pointers-to-pointers for prev
       * pointers, allows head node pointers to be treated like everything else
       *
       * Also more robust, since it doesn't depend on current position for
       * unlinking. Old method required computing head node based on position
       * at time of unlinking, assuming it was the same position as during
       * linking.
        unlink from block map P_SetThingPosition Links a thing into both a block and a subsector based on it's x y. Sets thing->subsector properly killough 5/3/98: reformatted, cleaned up link into subsector invisible things don't go into the sector links killough 8/11/98: simpler scheme using pointer-to-pointer prev pointers, allows head nodes to be treated like everything else phares 3/16/98 If sector_list isn't NULL, it has a collection of sector nodes that were just removed from this Thing. Collect the sectors the object will live in by looking at the existing sector_list and adding new nodes and deleting obsolete ones. When a node is deleted, its sector links (the links starting at sector_t->touching_thinglist) are broken. When a node is added, new sector links are created. Attach to Thing's mobj_t clear for next time link into blockmap inert things don't need to be in blockmap killough 8/11/98: simpler scheme using pointer-to-pointer prev pointers, allows head nodes to be treated like everything else thing is off the map killough 3/15/98: A fast function for testing intersections between things and linedefs. Linedef vector Thing-->v1 vector Thing radius First make sure bounding boxes of linedef and thing intersect. Leads to quick rejection using only shifts and adds/subs/compares. Next, make sure that at least one thing crosshair intersects linedef's extension. Requires only 3-4 multiplications, the rest adds/subs/ shifts/xors (writing the steps out this way leads to better codegen). BLOCK MAP ITERATORS For each line/thing in the given mapblock, call the passed PIT_* function. If the function returns false, exit with false without checking anything else. P_BlockLinesIterator The validcount flags are used to avoid checking lines that are marked in multiple mapblocks, so increment validcount before the first call to P_BlockLinesIterator, then make one or more calls to it. killough 5/3/98: reformatted, cleaned up killough 3/1/98: for removal of blockmap limit original was reading         // phares delmiting 0 as linedef 0     // phares killough 1/31/98: for compatibility we need to use the old method. Most demos go out of sync, and maybe other problems happen, if we don't consider linedef 0. For safety this should be qualified. killough 2/22/98: demo_compatibility check skip 0 starting delimiter                      // phares phares line has already been checked everything was checked P_BlockThingsIterator killough 5/3/98: reformatted, cleaned up INTERCEPT ROUTINES 1/11/98 killough: Intercept limit removed Check for limit and double size if necessary -- killough PIT_AddLineIntercepts. Looks for lines in the given block that intercept the given trace to add to the intercepts list. A line is crossed if its endpoints are on opposite sides of the trace. killough 5/3/98: reformatted, cleaned up avoid precision problems with two routines line isn't crossed hit the line behind source killough continue PIT_AddThingIntercepts killough 5/3/98: reformatted, cleaned up check a corner to corner crossection for hit line isn't crossed behind source killough keep going P_TraverseIntercepts Returns true if the traverser function returns true for all lines. killough 5/3/98: reformatted, cleaned up checked everything in range don't bother going farther everything was traversed P_PathTraverse Traces a line from x1,y1 to x2,y2, calling the traverser function for each. Returns true if the traverser function returns true for all lines. killough 5/3/98: reformatted, cleaned up don't side exactly on a line don't side exactly on a line Step through map blocks. Count is present to prevent a round off error from skipping the break. early out early out go through the sorted list