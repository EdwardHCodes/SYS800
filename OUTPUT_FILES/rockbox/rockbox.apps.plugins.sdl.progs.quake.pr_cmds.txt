
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.


===============================================================================

						BUILT-IN FUNCTIONS

===============================================================================

=================
PF_errror

This is a TERMINAL error, which will kill off the entire server.
Dumps self.

error(value)
=================

=================
PF_objerror

Dumps out self, then an error message.  The program is aborted and self is
removed, but the level can continue.

objerror(value)
=================

==============
PF_makevectors

Writes new values for v_forward, v_up, and v_right based on angles
makevectors(vector)
==============

=================
PF_setorigin

This is the only valid way to move an object without using the physics of the world (setting velocity and waiting).  Directly changing origin will not set internal links correctly, so clipping would be messed up.  This should be called when an object is spawned, and then only if it is teleported.

setorigin (entity, origin)
=================
printf("SetOrigin %f %f %f", org[0], org[1], org[2]); FIXME: implement rotation properly again find min / max for rotations transform the point set derived values
=================
PF_setsize

the size box is rotated by the current angle

setsize (entity, minvector, maxvector)
=================

=================
PF_setmodel

setmodel(entity, model)
=================
 check to see if model was properly precachedSV_ModelIndex (m); Mod_ForName (m, true);
=================
PF_bprint

broadcast print to everyone on server

bprint(value)
=================

=================
PF_sprint

single print to a specific client

sprint(clientent, value)
=================

=================
PF_centerprint

single print to a specific client

centerprint(clientent, value)
=================

=================
PF_normalize

vector normalize(vector)
=================

=================
PF_vlen

scalar vlen(vector)
=================

=================
PF_vectoyaw

float vectoyaw(vector)
=================

=================
PF_vectoangles

vector vectoangles(vector)
=================

=================
PF_Random

Returns a number from 0<= num < 1

random()
=================

=================
PF_particle

particle(origin, color, count)
=================

=================
PF_ambientsound

=================
 check to see if samp was properly precached add an svc_spawnambient command to the level signon packet
=================
PF_sound

Each entity can have eight independant sound sources, like voice,
weapon, feet, etc.

Channel 0 is an auto-allocate channel, the others override anything
allready running on that entity/channel pair.

An attenuation of 0 will play full volume everywhere in the level.
Larger attenuations will drop off.

=================

=================
PF_break

break()
=================
 dump to debugger	PR_RunError ("break statement");
=================
PF_traceline

Used for use tracing and shot targeting
Traces are blocked by bbox and exact bsp entityes, and also slide box entities
if the tryents flag is set.

traceline (vector1, vector2, tryents)
=================

=================
PF_checkpos

Returns true if the given entity can move to the given position from it's
current position by walking or rolling.
FIXME: make work...
scalar checkpos (entity, vector)
=================
============================================================================ cycle to the next one didn't find anything else anything that is a client, or has a client as an enemy get the PVS for the entity
=================
PF_checkclient

Returns a client (or object that has a client enemy) that would be a
valid target.

If there are more than one valid options, they are cycled each frame

If (self.origin + self.viewofs) is not in the PVS of the current target,
it is not returned at all.

name checkclient ()
=================
 find a new check if on a new frame return check if it might be visible	 if current entity can't possibly see the check entity, return 0 might be able to see it============================================================================
=================
PF_stuffcmd

Sends text over to the client's execution buffer

stuffcmd (clientent, value)
=================

=================
PF_localcmd

Sends text over to the client's execution buffer

localcmd (string)
=================

=================
PF_cvar

float cvar (string)
=================

=================
PF_cvar_set

float cvar (string)
=================

=================
PF_findradius

Returns a chain of entities that have origins within a spherical area

findradius (origin, radius)
=================

=========
PF_dprint
=========
 entity (entity start, .string field, string match) find = #5; precache_file is only used to copy files with qcc, it does nothing
===============
PF_walkmove

float(float yaw, float dist) walkmove
===============
 save program state, because SV_movestep may call other progs restore program state
===============
PF_droptofloor

void() droptofloor
===============

===============
PF_lightstyle

void(float style, string value) lightstyle
===============
 change the string in sv send message to all clients on this server
=============
PF_checkbottom
=============

=============
PF_pointcontents
=============

=============
PF_nextent

entity nextent(entity)
=============

=============
PF_aim

Pick a vector for the player to shoot along
vector aim(entity, missilespeed)
=============
 try sending a trace straight try all possible entities don't aim at teammate to far to turn can shoot at this one
==============
PF_changeyaw

This was a major timewaster in progs, so it was converted to C
==============

==============
PF_changepitch
==============

===============================================================================

MESSAGE WRITING

===============================================================================
 unreliable to all reliable to one (msg_entity) reliable to all write to the init string============================================================================= throw the entity away now=============================================================================
==============
PF_setspawnparms
==============
 copy spawn parms out of the client_t
==============
PF_changelevel
==============
 make sure we don't issue two changelevels					T_Damage (self, world, world, self.dmg, 0, FALSE);				sound (self, CHAN_VOICE, "player/gasp2.wav", 1, ATTN_NORM);				sound (self, CHAN_VOICE, "player/gasp1.wav", 1, ATTN_NORM); play leave water sound			sound (self, CHAN_BODY, "misc/outwater.wav", 1, ATTN_NORM); do damage				T_Damage (self, world, world, 10*self.waterlevel, 0, TRUE); do damage				T_Damage (self, world, world, 4*self.waterlevel, 0, TRUE); player enter water sound			sound (self, CHAN_BODY, "player/inlava.wav", 1, ATTN_NORM);			sound (self, CHAN_BODY, "player/inh2o.wav", 1, ATTN_NORM);			sound (self, CHAN_BODY, "player/slimbrn2.wav", 1, ATTN_NORM);		self.velocity = self.velocity - 0.8*self.waterlevel*frametime*self.velocity; void(entity e)	makevectors 		= #1; void(entity e, vector o) setorigin	= #2; void(entity e, string m) setmodel	= #3; void(entity e, vector min, vector max) setsize = #4; void(entity e, vector min, vector max) setabssize = #5; void() break						= #6; float() random						= #7; void(entity e, float chan, string samp) sound = #8; vector(vector v) normalize			= #9; void(string e) error				= #10; void(string e) objerror				= #11; float(vector v) vlen				= #12; float(vector v) vectoyaw		= #13; entity() spawn						= #14; void(entity e) remove				= #15; float(vector v1, vector v2, float tryents) traceline = #16; entity() clientlist					= #17; entity(entity start, .string fld, string match) find = #18; void(string s) precache_sound		= #19; void(string s) precache_model		= #20; void(entity client, string s)stuffcmd = #21; entity(vector org, float rad) findradius = #22; void(string s) bprint				= #23; void(entity client, string s) sprint = #24; void(string s) dprint				= #25; void(string s) ftos				= #26; void(string s) vtos				= #27; void(entity e) debug print an entire entity float(float yaw, float dist) walkmove float(float yaw, float dist) walkmove precache_sound2 is different only for qcc
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.


===============================================================================

						BUILT-IN FUNCTIONS

===============================================================================

=================
PF_errror

This is a TERMINAL error, which will kill off the entire server.
Dumps self.

error(value)
=================

=================
PF_objerror

Dumps out self, then an error message.  The program is aborted and self is
removed, but the level can continue.

objerror(value)
=================

==============
PF_makevectors

Writes new values for v_forward, v_up, and v_right based on angles
makevectors(vector)
==============

=================
PF_setorigin

This is the only valid way to move an object without using the physics of the world (setting velocity and waiting).  Directly changing origin will not set internal links correctly, so clipping would be messed up.  This should be called when an object is spawned, and then only if it is teleported.

setorigin (entity, origin)
=================
printf("SetOrigin %f %f %f", org[0], org[1], org[2]); FIXME: implement rotation properly again find min / max for rotations transform the point set derived values
=================
PF_setsize

the size box is rotated by the current angle

setsize (entity, minvector, maxvector)
=================

=================
PF_setmodel

setmodel(entity, model)
=================
 check to see if model was properly precachedSV_ModelIndex (m); Mod_ForName (m, true);
=================
PF_bprint

broadcast print to everyone on server

bprint(value)
=================

=================
PF_sprint

single print to a specific client

sprint(clientent, value)
=================

=================
PF_centerprint

single print to a specific client

centerprint(clientent, value)
=================

=================
PF_normalize

vector normalize(vector)
=================

=================
PF_vlen

scalar vlen(vector)
=================

=================
PF_vectoyaw

float vectoyaw(vector)
=================

=================
PF_vectoangles

vector vectoangles(vector)
=================

=================
PF_Random

Returns a number from 0<= num < 1

random()
=================

=================
PF_particle

particle(origin, color, count)
=================

=================
PF_ambientsound

=================
 check to see if samp was properly precached add an svc_spawnambient command to the level signon packet
=================
PF_sound

Each entity can have eight independant sound sources, like voice,
weapon, feet, etc.

Channel 0 is an auto-allocate channel, the others override anything
allready running on that entity/channel pair.

An attenuation of 0 will play full volume everywhere in the level.
Larger attenuations will drop off.

=================

=================
PF_break

break()
=================
 dump to debugger	PR_RunError ("break statement");
=================
PF_traceline

Used for use tracing and shot targeting
Traces are blocked by bbox and exact bsp entityes, and also slide box entities
if the tryents flag is set.

traceline (vector1, vector2, tryents)
=================

=================
PF_checkpos

Returns true if the given entity can move to the given position from it's
current position by walking or rolling.
FIXME: make work...
scalar checkpos (entity, vector)
=================
============================================================================ cycle to the next one didn't find anything else anything that is a client, or has a client as an enemy get the PVS for the entity
=================
PF_checkclient

Returns a client (or object that has a client enemy) that would be a
valid target.

If there are more than one valid options, they are cycled each frame

If (self.origin + self.viewofs) is not in the PVS of the current target,
it is not returned at all.

name checkclient ()
=================
 find a new check if on a new frame return check if it might be visible	 if current entity can't possibly see the check entity, return 0 might be able to see it============================================================================
=================
PF_stuffcmd

Sends text over to the client's execution buffer

stuffcmd (clientent, value)
=================

=================
PF_localcmd

Sends text over to the client's execution buffer

localcmd (string)
=================

=================
PF_cvar

float cvar (string)
=================

=================
PF_cvar_set

float cvar (string)
=================

=================
PF_findradius

Returns a chain of entities that have origins within a spherical area

findradius (origin, radius)
=================

=========
PF_dprint
=========
 entity (entity start, .string field, string match) find = #5; precache_file is only used to copy files with qcc, it does nothing
===============
PF_walkmove

float(float yaw, float dist) walkmove
===============
 save program state, because SV_movestep may call other progs restore program state
===============
PF_droptofloor

void() droptofloor
===============

===============
PF_lightstyle

void(float style, string value) lightstyle
===============
 change the string in sv send message to all clients on this server
=============
PF_checkbottom
=============

=============
PF_pointcontents
=============

=============
PF_nextent

entity nextent(entity)
=============

=============
PF_aim

Pick a vector for the player to shoot along
vector aim(entity, missilespeed)
=============
 try sending a trace straight try all possible entities don't aim at teammate to far to turn can shoot at this one
==============
PF_changeyaw

This was a major timewaster in progs, so it was converted to C
==============

==============
PF_changepitch
==============

===============================================================================

MESSAGE WRITING

===============================================================================
 unreliable to all reliable to one (msg_entity) reliable to all write to the init string============================================================================= throw the entity away now=============================================================================
==============
PF_setspawnparms
==============
 copy spawn parms out of the client_t
==============
PF_changelevel
==============
 make sure we don't issue two changelevels					T_Damage (self, world, world, self.dmg, 0, FALSE);				sound (self, CHAN_VOICE, "player/gasp2.wav", 1, ATTN_NORM);				sound (self, CHAN_VOICE, "player/gasp1.wav", 1, ATTN_NORM); play leave water sound			sound (self, CHAN_BODY, "misc/outwater.wav", 1, ATTN_NORM); do damage				T_Damage (self, world, world, 10*self.waterlevel, 0, TRUE); do damage				T_Damage (self, world, world, 4*self.waterlevel, 0, TRUE); player enter water sound			sound (self, CHAN_BODY, "player/inlava.wav", 1, ATTN_NORM);			sound (self, CHAN_BODY, "player/inh2o.wav", 1, ATTN_NORM);			sound (self, CHAN_BODY, "player/slimbrn2.wav", 1, ATTN_NORM);		self.velocity = self.velocity - 0.8*self.waterlevel*frametime*self.velocity; void(entity e)	makevectors 		= #1; void(entity e, vector o) setorigin	= #2; void(entity e, string m) setmodel	= #3; void(entity e, vector min, vector max) setsize = #4; void(entity e, vector min, vector max) setabssize = #5; void() break						= #6; float() random						= #7; void(entity e, float chan, string samp) sound = #8; vector(vector v) normalize			= #9; void(string e) error				= #10; void(string e) objerror				= #11; float(vector v) vlen				= #12; float(vector v) vectoyaw		= #13; entity() spawn						= #14; void(entity e) remove				= #15; float(vector v1, vector v2, float tryents) traceline = #16; entity() clientlist					= #17; entity(entity start, .string fld, string match) find = #18; void(string s) precache_sound		= #19; void(string s) precache_model		= #20; void(entity client, string s)stuffcmd = #21; entity(vector org, float rad) findradius = #22; void(string s) bprint				= #23; void(entity client, string s) sprint = #24; void(string s) dprint				= #25; void(string s) ftos				= #26; void(string s) vtos				= #27; void(entity e) debug print an entire entity float(float yaw, float dist) walkmove float(float yaw, float dist) walkmove precache_sound2 is different only for qcc
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.


===============================================================================

						BUILT-IN FUNCTIONS

===============================================================================

=================
PF_errror

This is a TERMINAL error, which will kill off the entire server.
Dumps self.

error(value)
=================

=================
PF_objerror

Dumps out self, then an error message.  The program is aborted and self is
removed, but the level can continue.

objerror(value)
=================

==============
PF_makevectors

Writes new values for v_forward, v_up, and v_right based on angles
makevectors(vector)
==============

=================
PF_setorigin

This is the only valid way to move an object without using the physics of the world (setting velocity and waiting).  Directly changing origin will not set internal links correctly, so clipping would be messed up.  This should be called when an object is spawned, and then only if it is teleported.

setorigin (entity, origin)
=================
printf("SetOrigin %f %f %f", org[0], org[1], org[2]); FIXME: implement rotation properly again find min / max for rotations transform the point set derived values
=================
PF_setsize

the size box is rotated by the current angle

setsize (entity, minvector, maxvector)
=================

=================
PF_setmodel

setmodel(entity, model)
=================
 check to see if model was properly precachedSV_ModelIndex (m); Mod_ForName (m, true);
=================
PF_bprint

broadcast print to everyone on server

bprint(value)
=================

=================
PF_sprint

single print to a specific client

sprint(clientent, value)
=================

=================
PF_centerprint

single print to a specific client

centerprint(clientent, value)
=================

=================
PF_normalize

vector normalize(vector)
=================

=================
PF_vlen

scalar vlen(vector)
=================

=================
PF_vectoyaw

float vectoyaw(vector)
=================

=================
PF_vectoangles

vector vectoangles(vector)
=================

=================
PF_Random

Returns a number from 0<= num < 1

random()
=================

=================
PF_particle

particle(origin, color, count)
=================

=================
PF_ambientsound

=================
 check to see if samp was properly precached add an svc_spawnambient command to the level signon packet
=================
PF_sound

Each entity can have eight independant sound sources, like voice,
weapon, feet, etc.

Channel 0 is an auto-allocate channel, the others override anything
allready running on that entity/channel pair.

An attenuation of 0 will play full volume everywhere in the level.
Larger attenuations will drop off.

=================

=================
PF_break

break()
=================
 dump to debugger	PR_RunError ("break statement");
=================
PF_traceline

Used for use tracing and shot targeting
Traces are blocked by bbox and exact bsp entityes, and also slide box entities
if the tryents flag is set.

traceline (vector1, vector2, tryents)
=================

=================
PF_checkpos

Returns true if the given entity can move to the given position from it's
current position by walking or rolling.
FIXME: make work...
scalar checkpos (entity, vector)
=================
============================================================================ cycle to the next one didn't find anything else anything that is a client, or has a client as an enemy get the PVS for the entity
=================
PF_checkclient

Returns a client (or object that has a client enemy) that would be a
valid target.

If there are more than one valid options, they are cycled each frame

If (self.origin + self.viewofs) is not in the PVS of the current target,
it is not returned at all.

name checkclient ()
=================
 find a new check if on a new frame return check if it might be visible	 if current entity can't possibly see the check entity, return 0 might be able to see it============================================================================
=================
PF_stuffcmd

Sends text over to the client's execution buffer

stuffcmd (clientent, value)
=================

=================
PF_localcmd

Sends text over to the client's execution buffer

localcmd (string)
=================

=================
PF_cvar

float cvar (string)
=================

=================
PF_cvar_set

float cvar (string)
=================

=================
PF_findradius

Returns a chain of entities that have origins within a spherical area

findradius (origin, radius)
=================

=========
PF_dprint
=========
 entity (entity start, .string field, string match) find = #5; precache_file is only used to copy files with qcc, it does nothing
===============
PF_walkmove

float(float yaw, float dist) walkmove
===============
 save program state, because SV_movestep may call other progs restore program state
===============
PF_droptofloor

void() droptofloor
===============

===============
PF_lightstyle

void(float style, string value) lightstyle
===============
 change the string in sv send message to all clients on this server
=============
PF_checkbottom
=============

=============
PF_pointcontents
=============

=============
PF_nextent

entity nextent(entity)
=============

=============
PF_aim

Pick a vector for the player to shoot along
vector aim(entity, missilespeed)
=============
 try sending a trace straight try all possible entities don't aim at teammate to far to turn can shoot at this one
==============
PF_changeyaw

This was a major timewaster in progs, so it was converted to C
==============

==============
PF_changepitch
==============

===============================================================================

MESSAGE WRITING

===============================================================================
 unreliable to all reliable to one (msg_entity) reliable to all write to the init string============================================================================= throw the entity away now=============================================================================
==============
PF_setspawnparms
==============
 copy spawn parms out of the client_t
==============
PF_changelevel
==============
 make sure we don't issue two changelevels					T_Damage (self, world, world, self.dmg, 0, FALSE);				sound (self, CHAN_VOICE, "player/gasp2.wav", 1, ATTN_NORM);				sound (self, CHAN_VOICE, "player/gasp1.wav", 1, ATTN_NORM); play leave water sound			sound (self, CHAN_BODY, "misc/outwater.wav", 1, ATTN_NORM); do damage				T_Damage (self, world, world, 10*self.waterlevel, 0, TRUE); do damage				T_Damage (self, world, world, 4*self.waterlevel, 0, TRUE); player enter water sound			sound (self, CHAN_BODY, "player/inlava.wav", 1, ATTN_NORM);			sound (self, CHAN_BODY, "player/inh2o.wav", 1, ATTN_NORM);			sound (self, CHAN_BODY, "player/slimbrn2.wav", 1, ATTN_NORM);		self.velocity = self.velocity - 0.8*self.waterlevel*frametime*self.velocity; void(entity e)	makevectors 		= #1; void(entity e, vector o) setorigin	= #2; void(entity e, string m) setmodel	= #3; void(entity e, vector min, vector max) setsize = #4; void(entity e, vector min, vector max) setabssize = #5; void() break						= #6; float() random						= #7; void(entity e, float chan, string samp) sound = #8; vector(vector v) normalize			= #9; void(string e) error				= #10; void(string e) objerror				= #11; float(vector v) vlen				= #12; float(vector v) vectoyaw		= #13; entity() spawn						= #14; void(entity e) remove				= #15; float(vector v1, vector v2, float tryents) traceline = #16; entity() clientlist					= #17; entity(entity start, .string fld, string match) find = #18; void(string s) precache_sound		= #19; void(string s) precache_model		= #20; void(entity client, string s)stuffcmd = #21; entity(vector org, float rad) findradius = #22; void(string s) bprint				= #23; void(entity client, string s) sprint = #24; void(string s) dprint				= #25; void(string s) ftos				= #26; void(string s) vtos				= #27; void(entity e) debug print an entire entity float(float yaw, float dist) walkmove float(float yaw, float dist) walkmove precache_sound2 is different only for qcc