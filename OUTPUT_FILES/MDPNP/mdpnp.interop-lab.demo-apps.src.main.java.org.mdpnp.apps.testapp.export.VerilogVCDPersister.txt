*
 *
 * The purpose of this component is to demonstrate persistence of the data in the standard IEEE-1364
 * format that could be read by a variety of tools http://en.wikipedia.org/wiki/Waveform_viewer.
 * Overview of the history of the format is http://en.wikipedia.org/wiki/Value_change_dump
 *
 * The document describing the format of the data (from cadence's Verilog-XL Reference, Product Version 5.6)
 * is included with the source of the project.
 *
 * MAYBE figure out the time sync and dump multiple traces into a single file.
    //
    static class MultiWaveHandler {
        public boolean start() throws Exception {
            return true;
        }

        public void stop() throws Exception {
            // bleed the buffer out
            while (!cache.isEmpty()) {
                long minT = cache.firstKey();
                Map<String, Float> data = cache.remove(minT);
                dump(minT, data);
            }
        }

        public void persist(Value value) throws Exception {

            long t = value.getNumeric().device_time.sec;

            if (cache.size() != 0) {
                long minT = cache.firstKey();
                long maxT = cache.lastKey();

                // we got the value that is too much in the past from what we can keep in the buffer
                if (maxT - t > bufferSize) {
                    log.warn("Some clocks must be off: got 'out of range' stale value: " + value.toString());
                    return;
                }

                buffer(value);

                // we have buffered enough data and the new sample is outside of the range. We
                // have to assume that the clocks are synchronized to some narrower range than the
                // cache that we are tracking.

                while (maxT - minT > bufferSize) {
                    Map<String, Float> data = cache.remove(minT);
                    dump(minT, data);
                    minT = cache.firstKey();
                }

            } else { // first tick
                buffer(value);
            }
        }

        void dump(long t, Map<String, Float> data) {

            PrintStream ps = System.out;

            if (headerDone == null) {

                headerDone = new ArrayList<String>(data.keySet());


                ps.println("$date");
                ps.println("Wed Jan 28 10:17:06 2015");
                ps.println("$end");
                ps.println("$version");
                ps.println("MDPNP V0.1 2015");
                ps.println("$end");
                ps.println("$timescale");
                ps.println("1sec");
                ps.println("$end");
                ps.println("$scope module top $end");

                for (String s : headerDone) {
                    ps.print("$var real 32 ");
                    ps.print(" *");
                    ps.print(headerDone.indexOf(s));
                    ps.print(" ");
                    ps.print(s);
                    ps.println(" $end");
                }

                firstTimeTic = t;
            }

            StringBuilder sb = new StringBuilder();
            sb.append("#").append(t - firstTimeTic).append("\n");
            for (Map.Entry<String, Float> entry : data.entrySet()) {
                float f = entry.getValue();
                sb.append("r").append(f).append(" *").append(headerDone.indexOf(entry.getKey())).append("\n");
            }
            ps.println(sb.toString());
        }

        void buffer(Value value) {

            long t = value.getNumeric().device_time.sec;

            Map<String, Float> data = cache.get(t);
            if (data == null) {
                data = new HashMap<>();
                cache.put(t, data);
            }

            String key = value.getMetricId() + "-" + value.getInstanceId();
            data.put(key, value.getNumeric().value);
        }

        TreeMap<Long, Map<String, Float>> cache = new TreeMap<>();

        public void setBuffetSize(int sz, TimeUnit tu) {
            bufferSize = (int) tu.toSeconds(sz);
        }

        long firstTimeTic;
        int bufferSize = 10;
        List<String> headerDone = null;
    }
    *
 *
 * The purpose of this component is to demonstrate persistence of the data in the standard IEEE-1364
 * format that could be read by a variety of tools http://en.wikipedia.org/wiki/Waveform_viewer.
 * Overview of the history of the format is http://en.wikipedia.org/wiki/Value_change_dump
 *
 * The document describing the format of the data (from cadence's Verilog-XL Reference, Product Version 5.6)
 * is included with the source of the project.
 *
 * MAYBE figure out the time sync and dump multiple traces into a single file.
    //
    static class MultiWaveHandler {
        public boolean start() throws Exception {
            return true;
        }

        public void stop() throws Exception {
            // bleed the buffer out
            while (!cache.isEmpty()) {
                long minT = cache.firstKey();
                Map<String, Float> data = cache.remove(minT);
                dump(minT, data);
            }
        }

        public void persist(Value value) throws Exception {

            long t = value.getNumeric().device_time.sec;

            if (cache.size() != 0) {
                long minT = cache.firstKey();
                long maxT = cache.lastKey();

                // we got the value that is too much in the past from what we can keep in the buffer
                if (maxT - t > bufferSize) {
                    log.warn("Some clocks must be off: got 'out of range' stale value: " + value.toString());
                    return;
                }

                buffer(value);

                // we have buffered enough data and the new sample is outside of the range. We
                // have to assume that the clocks are synchronized to some narrower range than the
                // cache that we are tracking.

                while (maxT - minT > bufferSize) {
                    Map<String, Float> data = cache.remove(minT);
                    dump(minT, data);
                    minT = cache.firstKey();
                }

            } else { // first tick
                buffer(value);
            }
        }

        void dump(long t, Map<String, Float> data) {

            PrintStream ps = System.out;

            if (headerDone == null) {

                headerDone = new ArrayList<String>(data.keySet());


                ps.println("$date");
                ps.println("Wed Jan 28 10:17:06 2015");
                ps.println("$end");
                ps.println("$version");
                ps.println("MDPNP V0.1 2015");
                ps.println("$end");
                ps.println("$timescale");
                ps.println("1sec");
                ps.println("$end");
                ps.println("$scope module top $end");

                for (String s : headerDone) {
                    ps.print("$var real 32 ");
                    ps.print(" *");
                    ps.print(headerDone.indexOf(s));
                    ps.print(" ");
                    ps.print(s);
                    ps.println(" $end");
                }

                firstTimeTic = t;
            }

            StringBuilder sb = new StringBuilder();
            sb.append("#").append(t - firstTimeTic).append("\n");
            for (Map.Entry<String, Float> entry : data.entrySet()) {
                float f = entry.getValue();
                sb.append("r").append(f).append(" *").append(headerDone.indexOf(entry.getKey())).append("\n");
            }
            ps.println(sb.toString());
        }

        void buffer(Value value) {

            long t = value.getNumeric().device_time.sec;

            Map<String, Float> data = cache.get(t);
            if (data == null) {
                data = new HashMap<>();
                cache.put(t, data);
            }

            String key = value.getMetricId() + "-" + value.getInstanceId();
            data.put(key, value.getNumeric().value);
        }

        TreeMap<Long, Map<String, Float>> cache = new TreeMap<>();

        public void setBuffetSize(int sz, TimeUnit tu) {
            bufferSize = (int) tu.toSeconds(sz);
        }

        long firstTimeTic;
        int bufferSize = 10;
        List<String> headerDone = null;
    }
    *
 *
 * The purpose of this component is to demonstrate persistence of the data in the standard IEEE-1364
 * format that could be read by a variety of tools http://en.wikipedia.org/wiki/Waveform_viewer.
 * Overview of the history of the format is http://en.wikipedia.org/wiki/Value_change_dump
 *
 * The document describing the format of the data (from cadence's Verilog-XL Reference, Product Version 5.6)
 * is included with the source of the project.
 *
 * MAYBE figure out the time sync and dump multiple traces into a single file.
    //
    static class MultiWaveHandler {
        public boolean start() throws Exception {
            return true;
        }

        public void stop() throws Exception {
            // bleed the buffer out
            while (!cache.isEmpty()) {
                long minT = cache.firstKey();
                Map<String, Float> data = cache.remove(minT);
                dump(minT, data);
            }
        }

        public void persist(Value value) throws Exception {

            long t = value.getNumeric().device_time.sec;

            if (cache.size() != 0) {
                long minT = cache.firstKey();
                long maxT = cache.lastKey();

                // we got the value that is too much in the past from what we can keep in the buffer
                if (maxT - t > bufferSize) {
                    log.warn("Some clocks must be off: got 'out of range' stale value: " + value.toString());
                    return;
                }

                buffer(value);

                // we have buffered enough data and the new sample is outside of the range. We
                // have to assume that the clocks are synchronized to some narrower range than the
                // cache that we are tracking.

                while (maxT - minT > bufferSize) {
                    Map<String, Float> data = cache.remove(minT);
                    dump(minT, data);
                    minT = cache.firstKey();
                }

            } else { // first tick
                buffer(value);
            }
        }

        void dump(long t, Map<String, Float> data) {

            PrintStream ps = System.out;

            if (headerDone == null) {

                headerDone = new ArrayList<String>(data.keySet());


                ps.println("$date");
                ps.println("Wed Jan 28 10:17:06 2015");
                ps.println("$end");
                ps.println("$version");
                ps.println("MDPNP V0.1 2015");
                ps.println("$end");
                ps.println("$timescale");
                ps.println("1sec");
                ps.println("$end");
                ps.println("$scope module top $end");

                for (String s : headerDone) {
                    ps.print("$var real 32 ");
                    ps.print(" *");
                    ps.print(headerDone.indexOf(s));
                    ps.print(" ");
                    ps.print(s);
                    ps.println(" $end");
                }

                firstTimeTic = t;
            }

            StringBuilder sb = new StringBuilder();
            sb.append("#").append(t - firstTimeTic).append("\n");
            for (Map.Entry<String, Float> entry : data.entrySet()) {
                float f = entry.getValue();
                sb.append("r").append(f).append(" *").append(headerDone.indexOf(entry.getKey())).append("\n");
            }
            ps.println(sb.toString());
        }

        void buffer(Value value) {

            long t = value.getNumeric().device_time.sec;

            Map<String, Float> data = cache.get(t);
            if (data == null) {
                data = new HashMap<>();
                cache.put(t, data);
            }

            String key = value.getMetricId() + "-" + value.getInstanceId();
            data.put(key, value.getNumeric().value);
        }

        TreeMap<Long, Map<String, Float>> cache = new TreeMap<>();

        public void setBuffetSize(int sz, TimeUnit tu) {
            bufferSize = (int) tu.toSeconds(sz);
        }

        long firstTimeTic;
        int bufferSize = 10;
        List<String> headerDone = null;
    }
    *
 *
 * The purpose of this component is to demonstrate persistence of the data in the standard IEEE-1364
 * format that could be read by a variety of tools http://en.wikipedia.org/wiki/Waveform_viewer.
 * Overview of the history of the format is http://en.wikipedia.org/wiki/Value_change_dump
 *
 * The document describing the format of the data (from cadence's Verilog-XL Reference, Product Version 5.6)
 * is included with the source of the project.
 *
 * MAYBE figure out the time sync and dump multiple traces into a single file.
    //
    static class MultiWaveHandler {
        public boolean start() throws Exception {
            return true;
        }

        public void stop() throws Exception {
            // bleed the buffer out
            while (!cache.isEmpty()) {
                long minT = cache.firstKey();
                Map<String, Float> data = cache.remove(minT);
                dump(minT, data);
            }
        }

        public void persist(Value value) throws Exception {

            long t = value.getNumeric().device_time.sec;

            if (cache.size() != 0) {
                long minT = cache.firstKey();
                long maxT = cache.lastKey();

                // we got the value that is too much in the past from what we can keep in the buffer
                if (maxT - t > bufferSize) {
                    log.warn("Some clocks must be off: got 'out of range' stale value: " + value.toString());
                    return;
                }

                buffer(value);

                // we have buffered enough data and the new sample is outside of the range. We
                // have to assume that the clocks are synchronized to some narrower range than the
                // cache that we are tracking.

                while (maxT - minT > bufferSize) {
                    Map<String, Float> data = cache.remove(minT);
                    dump(minT, data);
                    minT = cache.firstKey();
                }

            } else { // first tick
                buffer(value);
            }
        }

        void dump(long t, Map<String, Float> data) {

            PrintStream ps = System.out;

            if (headerDone == null) {

                headerDone = new ArrayList<String>(data.keySet());


                ps.println("$date");
                ps.println("Wed Jan 28 10:17:06 2015");
                ps.println("$end");
                ps.println("$version");
                ps.println("MDPNP V0.1 2015");
                ps.println("$end");
                ps.println("$timescale");
                ps.println("1sec");
                ps.println("$end");
                ps.println("$scope module top $end");

                for (String s : headerDone) {
                    ps.print("$var real 32 ");
                    ps.print(" *");
                    ps.print(headerDone.indexOf(s));
                    ps.print(" ");
                    ps.print(s);
                    ps.println(" $end");
                }

                firstTimeTic = t;
            }

            StringBuilder sb = new StringBuilder();
            sb.append("#").append(t - firstTimeTic).append("\n");
            for (Map.Entry<String, Float> entry : data.entrySet()) {
                float f = entry.getValue();
                sb.append("r").append(f).append(" *").append(headerDone.indexOf(entry.getKey())).append("\n");
            }
            ps.println(sb.toString());
        }

        void buffer(Value value) {

            long t = value.getNumeric().device_time.sec;

            Map<String, Float> data = cache.get(t);
            if (data == null) {
                data = new HashMap<>();
                cache.put(t, data);
            }

            String key = value.getMetricId() + "-" + value.getInstanceId();
            data.put(key, value.getNumeric().value);
        }

        TreeMap<Long, Map<String, Float>> cache = new TreeMap<>();

        public void setBuffetSize(int sz, TimeUnit tu) {
            bufferSize = (int) tu.toSeconds(sz);
        }

        long firstTimeTic;
        int bufferSize = 10;
        List<String> headerDone = null;
    }
    *
 *
 * The purpose of this component is to demonstrate persistence of the data in the standard IEEE-1364
 * format that could be read by a variety of tools http://en.wikipedia.org/wiki/Waveform_viewer.
 * Overview of the history of the format is http://en.wikipedia.org/wiki/Value_change_dump
 *
 * The document describing the format of the data (from cadence's Verilog-XL Reference, Product Version 5.6)
 * is included with the source of the project.
 *
 * MAYBE figure out the time sync and dump multiple traces into a single file.
    //
    static class MultiWaveHandler {
        public boolean start() throws Exception {
            return true;
        }

        public void stop() throws Exception {
            // bleed the buffer out
            while (!cache.isEmpty()) {
                long minT = cache.firstKey();
                Map<String, Float> data = cache.remove(minT);
                dump(minT, data);
            }
        }

        public void persist(Value value) throws Exception {

            long t = value.getNumeric().device_time.sec;

            if (cache.size() != 0) {
                long minT = cache.firstKey();
                long maxT = cache.lastKey();

                // we got the value that is too much in the past from what we can keep in the buffer
                if (maxT - t > bufferSize) {
                    log.warn("Some clocks must be off: got 'out of range' stale value: " + value.toString());
                    return;
                }

                buffer(value);

                // we have buffered enough data and the new sample is outside of the range. We
                // have to assume that the clocks are synchronized to some narrower range than the
                // cache that we are tracking.

                while (maxT - minT > bufferSize) {
                    Map<String, Float> data = cache.remove(minT);
                    dump(minT, data);
                    minT = cache.firstKey();
                }

            } else { // first tick
                buffer(value);
            }
        }

        void dump(long t, Map<String, Float> data) {

            PrintStream ps = System.out;

            if (headerDone == null) {

                headerDone = new ArrayList<String>(data.keySet());


                ps.println("$date");
                ps.println("Wed Jan 28 10:17:06 2015");
                ps.println("$end");
                ps.println("$version");
                ps.println("MDPNP V0.1 2015");
                ps.println("$end");
                ps.println("$timescale");
                ps.println("1sec");
                ps.println("$end");
                ps.println("$scope module top $end");

                for (String s : headerDone) {
                    ps.print("$var real 32 ");
                    ps.print(" *");
                    ps.print(headerDone.indexOf(s));
                    ps.print(" ");
                    ps.print(s);
                    ps.println(" $end");
                }

                firstTimeTic = t;
            }

            StringBuilder sb = new StringBuilder();
            sb.append("#").append(t - firstTimeTic).append("\n");
            for (Map.Entry<String, Float> entry : data.entrySet()) {
                float f = entry.getValue();
                sb.append("r").append(f).append(" *").append(headerDone.indexOf(entry.getKey())).append("\n");
            }
            ps.println(sb.toString());
        }

        void buffer(Value value) {

            long t = value.getNumeric().device_time.sec;

            Map<String, Float> data = cache.get(t);
            if (data == null) {
                data = new HashMap<>();
                cache.put(t, data);
            }

            String key = value.getMetricId() + "-" + value.getInstanceId();
            data.put(key, value.getNumeric().value);
        }

        TreeMap<Long, Map<String, Float>> cache = new TreeMap<>();

        public void setBuffetSize(int sz, TimeUnit tu) {
            bufferSize = (int) tu.toSeconds(sz);
        }

        long firstTimeTic;
        int bufferSize = 10;
        List<String> headerDone = null;
    }
    *
 *
 * The purpose of this component is to demonstrate persistence of the data in the standard IEEE-1364
 * format that could be read by a variety of tools http://en.wikipedia.org/wiki/Waveform_viewer.
 * Overview of the history of the format is http://en.wikipedia.org/wiki/Value_change_dump
 *
 * The document describing the format of the data (from cadence's Verilog-XL Reference, Product Version 5.6)
 * is included with the source of the project.
 *
 * MAYBE figure out the time sync and dump multiple traces into a single file.
    //
    static class MultiWaveHandler {
        public boolean start() throws Exception {
            return true;
        }

        public void stop() throws Exception {
            // bleed the buffer out
            while (!cache.isEmpty()) {
                long minT = cache.firstKey();
                Map<String, Float> data = cache.remove(minT);
                dump(minT, data);
            }
        }

        public void persist(Value value) throws Exception {

            long t = value.getNumeric().device_time.sec;

            if (cache.size() != 0) {
                long minT = cache.firstKey();
                long maxT = cache.lastKey();

                // we got the value that is too much in the past from what we can keep in the buffer
                if (maxT - t > bufferSize) {
                    log.warn("Some clocks must be off: got 'out of range' stale value: " + value.toString());
                    return;
                }

                buffer(value);

                // we have buffered enough data and the new sample is outside of the range. We
                // have to assume that the clocks are synchronized to some narrower range than the
                // cache that we are tracking.

                while (maxT - minT > bufferSize) {
                    Map<String, Float> data = cache.remove(minT);
                    dump(minT, data);
                    minT = cache.firstKey();
                }

            } else { // first tick
                buffer(value);
            }
        }

        void dump(long t, Map<String, Float> data) {

            PrintStream ps = System.out;

            if (headerDone == null) {

                headerDone = new ArrayList<String>(data.keySet());


                ps.println("$date");
                ps.println("Wed Jan 28 10:17:06 2015");
                ps.println("$end");
                ps.println("$version");
                ps.println("MDPNP V0.1 2015");
                ps.println("$end");
                ps.println("$timescale");
                ps.println("1sec");
                ps.println("$end");
                ps.println("$scope module top $end");

                for (String s : headerDone) {
                    ps.print("$var real 32 ");
                    ps.print(" *");
                    ps.print(headerDone.indexOf(s));
                    ps.print(" ");
                    ps.print(s);
                    ps.println(" $end");
                }

                firstTimeTic = t;
            }

            StringBuilder sb = new StringBuilder();
            sb.append("#").append(t - firstTimeTic).append("\n");
            for (Map.Entry<String, Float> entry : data.entrySet()) {
                float f = entry.getValue();
                sb.append("r").append(f).append(" *").append(headerDone.indexOf(entry.getKey())).append("\n");
            }
            ps.println(sb.toString());
        }

        void buffer(Value value) {

            long t = value.getNumeric().device_time.sec;

            Map<String, Float> data = cache.get(t);
            if (data == null) {
                data = new HashMap<>();
                cache.put(t, data);
            }

            String key = value.getMetricId() + "-" + value.getInstanceId();
            data.put(key, value.getNumeric().value);
        }

        TreeMap<Long, Map<String, Float>> cache = new TreeMap<>();

        public void setBuffetSize(int sz, TimeUnit tu) {
            bufferSize = (int) tu.toSeconds(sz);
        }

        long firstTimeTic;
        int bufferSize = 10;
        List<String> headerDone = null;
    }
    *
 *
 * The purpose of this component is to demonstrate persistence of the data in the standard IEEE-1364
 * format that could be read by a variety of tools http://en.wikipedia.org/wiki/Waveform_viewer.
 * Overview of the history of the format is http://en.wikipedia.org/wiki/Value_change_dump
 *
 * The document describing the format of the data (from cadence's Verilog-XL Reference, Product Version 5.6)
 * is included with the source of the project.
 *
 * MAYBE figure out the time sync and dump multiple traces into a single file.
    //
    static class MultiWaveHandler {
        public boolean start() throws Exception {
            return true;
        }

        public void stop() throws Exception {
            // bleed the buffer out
            while (!cache.isEmpty()) {
                long minT = cache.firstKey();
                Map<String, Float> data = cache.remove(minT);
                dump(minT, data);
            }
        }

        public void persist(Value value) throws Exception {

            long t = value.getNumeric().device_time.sec;

            if (cache.size() != 0) {
                long minT = cache.firstKey();
                long maxT = cache.lastKey();

                // we got the value that is too much in the past from what we can keep in the buffer
                if (maxT - t > bufferSize) {
                    log.warn("Some clocks must be off: got 'out of range' stale value: " + value.toString());
                    return;
                }

                buffer(value);

                // we have buffered enough data and the new sample is outside of the range. We
                // have to assume that the clocks are synchronized to some narrower range than the
                // cache that we are tracking.

                while (maxT - minT > bufferSize) {
                    Map<String, Float> data = cache.remove(minT);
                    dump(minT, data);
                    minT = cache.firstKey();
                }

            } else { // first tick
                buffer(value);
            }
        }

        void dump(long t, Map<String, Float> data) {

            PrintStream ps = System.out;

            if (headerDone == null) {

                headerDone = new ArrayList<String>(data.keySet());


                ps.println("$date");
                ps.println("Wed Jan 28 10:17:06 2015");
                ps.println("$end");
                ps.println("$version");
                ps.println("MDPNP V0.1 2015");
                ps.println("$end");
                ps.println("$timescale");
                ps.println("1sec");
                ps.println("$end");
                ps.println("$scope module top $end");

                for (String s : headerDone) {
                    ps.print("$var real 32 ");
                    ps.print(" *");
                    ps.print(headerDone.indexOf(s));
                    ps.print(" ");
                    ps.print(s);
                    ps.println(" $end");
                }

                firstTimeTic = t;
            }

            StringBuilder sb = new StringBuilder();
            sb.append("#").append(t - firstTimeTic).append("\n");
            for (Map.Entry<String, Float> entry : data.entrySet()) {
                float f = entry.getValue();
                sb.append("r").append(f).append(" *").append(headerDone.indexOf(entry.getKey())).append("\n");
            }
            ps.println(sb.toString());
        }

        void buffer(Value value) {

            long t = value.getNumeric().device_time.sec;

            Map<String, Float> data = cache.get(t);
            if (data == null) {
                data = new HashMap<>();
                cache.put(t, data);
            }

            String key = value.getMetricId() + "-" + value.getInstanceId();
            data.put(key, value.getNumeric().value);
        }

        TreeMap<Long, Map<String, Float>> cache = new TreeMap<>();

        public void setBuffetSize(int sz, TimeUnit tu) {
            bufferSize = (int) tu.toSeconds(sz);
        }

        long firstTimeTic;
        int bufferSize = 10;
        List<String> headerDone = null;
    }
    