**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 Dave Chapman
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** NOTE: WMADecodeContext is 120152 bytes (on x86)  this is the codec entry point  Generic codec initialisation  this is called for each file to process  Remember the resume position - when the codec is opened, the
       playback engine will reset it.  Proper reset of the decoder context.  Copy the format metadata we've stored in the id3 TOC field.  This
       saves us from parsing it again here.  Get start of current packet  Now advance the file position to the first frame  The main decoding loop flush the wma decoder statezero the frame out buffer so we don't overlap with a 
                stale samples Deal with any pending seek requests  Pretend you never saw this... DEBUGF("Seek returned %d\n", (int)elapsedtime); We'll try to recover from a parse error a certain number of
             * times. If we succeed, the error counter will be reset.
              File ended - not an error  Do the above, but for errors in decode. LOGF("WMA: Decoded %ld samples\n",elapsedtime*wfx.rate/1000);**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 Dave Chapman
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** NOTE: WMADecodeContext is 120152 bytes (on x86)  this is the codec entry point  Generic codec initialisation  this is called for each file to process  Remember the resume position - when the codec is opened, the
       playback engine will reset it.  Proper reset of the decoder context.  Copy the format metadata we've stored in the id3 TOC field.  This
       saves us from parsing it again here.  Get start of current packet  Now advance the file position to the first frame  The main decoding loop flush the wma decoder statezero the frame out buffer so we don't overlap with a 
                stale samples Deal with any pending seek requests  Pretend you never saw this... DEBUGF("Seek returned %d\n", (int)elapsedtime); We'll try to recover from a parse error a certain number of
             * times. If we succeed, the error counter will be reset.
              File ended - not an error  Do the above, but for errors in decode. LOGF("WMA: Decoded %ld samples\n",elapsedtime*wfx.rate/1000);**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 Dave Chapman
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** NOTE: WMADecodeContext is 120152 bytes (on x86)  this is the codec entry point  Generic codec initialisation  this is called for each file to process  Remember the resume position - when the codec is opened, the
       playback engine will reset it.  Proper reset of the decoder context.  Copy the format metadata we've stored in the id3 TOC field.  This
       saves us from parsing it again here.  Get start of current packet  Now advance the file position to the first frame  The main decoding loop flush the wma decoder statezero the frame out buffer so we don't overlap with a 
                stale samples Deal with any pending seek requests  Pretend you never saw this... DEBUGF("Seek returned %d\n", (int)elapsedtime); We'll try to recover from a parse error a certain number of
             * times. If we succeed, the error counter will be reset.
              File ended - not an error  Do the above, but for errors in decode. LOGF("WMA: Decoded %ld samples\n",elapsedtime*wfx.rate/1000);