 
 * Two Levels Segregate Fit memory allocator (TLSF)
 * Version 2.4.4
 *
 * Written by Miguel Masmano Tello <mimastel@doctor.upv.es>
 *
 * Thanks to Ismael Ripoll for his suggestions and reviews
 *
 * Copyright (C) 2008, 2007, 2006, 2005, 2004
 *
 * This code is released using a dual license strategy: GPL/LGPL
 * You can choose the licence that better fits your requirements.
 *
 * Released under the terms of the GNU General Public License Version 2.0
 * Released under the terms of the GNU Lesser General Public License Version 2.1
 *
 
 * Code contributions:
 *
 * (Jul 28 2007)  Herman ten Brugge <hermantenbrugge@home.nl>:
 *
 * - Add 64 bit support. It now runs on x86_64 and solaris64.
 * - I also tested this on vxworks/32and solaris/32 and i386/32 processors.
 * - Remove assembly code. I could not measure any performance difference 
 *   on my core2 processor. This also makes the code more portable.
 * - Moved defines/typedefs from tlsf.h to tlsf.c
 * - Changed MIN_BLOCK_SIZE to sizeof (free_ptr_t) and BHDR_OVERHEAD to 
 *   (sizeof (bhdr_t) - MIN_BLOCK_SIZE). This does not change the fact 
 *    that the minumum size is still sizeof 
 *   (bhdr_t).
 * - Changed all C++ comment style to C style. (// -> /.* ... *./)
 * - Used ls_bit instead of ffs and ms_bit instead of fls. I did this to 
 *   avoid confusion with the standard ffs function which returns 
 *   different values.
 * - Created set_bit/clear_bit fuctions because they are not present 
 *   on x86_64.
 * - Added locking support + extra file target.h to show how to use it.
 * - Added get_used_size function (REMOVED in 2.4)
 * - Added rtl_realloc and rtl_calloc function
 * - Implemented realloc clever support.
 * - Added some test code in the example directory.
 *        
 *
 * (Oct 23 2006) Adam Scislowicz: 
 *
 * - Support for ARMv5 implemented
 *
 #define USE_SBRK        (0) #define USE_MMAP        (0)  The  debug functions  only can  be used  when _DEBUG_TLSF_  is set. *********************************************************************** Definition of the structures used by TLSF  Some IMPORTANT TLSF parameters  Unlike the preview TLSF versions, now they are statics  MAX_SLI = 2^MAX_LOG2_SLI  tlsf structure just will manage blocks bigger  than 128 bytes  bit 0 of the block size  bit 1 of the block size  NOTE: Make sure that this type is 4 bytes long on your computer  NOTE: Make sure that this type is 1 byte on your computer  This pointer is just valid if the first bit of size is set  The size is stored in bytes  bit 0 indicates whether the block is used and  bit 1 allows to know whether the previous block is free sizeof(struct free_ptr_struct)];  This structure is embedded at the beginning of each area, giving us
 * enough information to cope with a set of areas  the TLSF's structure signature  These can not be calculated outside tlsf because we
     * do not know the sizes when freeing/reallocing memory.  A linked list holding all the existing areas  the first-level bitmap  This array should have a size of REAL_FLI bits  the second-level bitmap *****************************************************************************     Helping functions    *****************************************************************************************if ((*_fl -= FLI_OFFSET) < 0) // FL wil be always >0!
         *_fl = *_sl = 0;
          likely *********************************************************************************** Begin of the allocator code ******************************************************************************** Default memory pool. ******************************************************************************************************************************** Check if already initialised  Zeroing the memory pool ******************************************************************************************************************************** FW 28-10-17: disabled memset due to crashes on ARM. Functions
     * fine without it.  BILGUS 17-7-19 re-enabled after setting pluginbuf aligned to 8 bytes  Before inserting the new area, we have to merge this area with the
       already existing ones  Merging the new area with the next physically contigous one  Merging the new area with the previous physically contigous
           one  Inserting the area in the list of linked areasust a safety constant  Not enough system memoryounding up the requested size and calculating fl and sl  Searching a free block, recall that this function changes the values of fl and sl,
       so they are not longer valid when the function fails  Growing the pool size when needed  size plus enough room for the requered headers.  Call sbrk or mmap  Not enough system memory  Rounding up the requested size and calculating fl and sl  Searching a free block  Not found -- found:  Should the block be split?  Now it's used **************************************************************************************************************************************************************************************************************************************************************** We allways reenter this free block because tmp_size will
               be greater then sizeof (bhdr_t) **********************************************************************************************************************************************  DEBUG FUNCTIONS   ************* The following functions have been designed to ease the debugging of  the TLSF  structure.  For non-developing  purposes, it may  be they  haven't too much worth.  To enable them, _DEBUG_TLSF_ must be set.   
 * Two Levels Segregate Fit memory allocator (TLSF)
 * Version 2.4.4
 *
 * Written by Miguel Masmano Tello <mimastel@doctor.upv.es>
 *
 * Thanks to Ismael Ripoll for his suggestions and reviews
 *
 * Copyright (C) 2008, 2007, 2006, 2005, 2004
 *
 * This code is released using a dual license strategy: GPL/LGPL
 * You can choose the licence that better fits your requirements.
 *
 * Released under the terms of the GNU General Public License Version 2.0
 * Released under the terms of the GNU Lesser General Public License Version 2.1
 *
 
 * Code contributions:
 *
 * (Jul 28 2007)  Herman ten Brugge <hermantenbrugge@home.nl>:
 *
 * - Add 64 bit support. It now runs on x86_64 and solaris64.
 * - I also tested this on vxworks/32and solaris/32 and i386/32 processors.
 * - Remove assembly code. I could not measure any performance difference 
 *   on my core2 processor. This also makes the code more portable.
 * - Moved defines/typedefs from tlsf.h to tlsf.c
 * - Changed MIN_BLOCK_SIZE to sizeof (free_ptr_t) and BHDR_OVERHEAD to 
 *   (sizeof (bhdr_t) - MIN_BLOCK_SIZE). This does not change the fact 
 *    that the minumum size is still sizeof 
 *   (bhdr_t).
 * - Changed all C++ comment style to C style. (// -> /.* ... *./)
 * - Used ls_bit instead of ffs and ms_bit instead of fls. I did this to 
 *   avoid confusion with the standard ffs function which returns 
 *   different values.
 * - Created set_bit/clear_bit fuctions because they are not present 
 *   on x86_64.
 * - Added locking support + extra file target.h to show how to use it.
 * - Added get_used_size function (REMOVED in 2.4)
 * - Added rtl_realloc and rtl_calloc function
 * - Implemented realloc clever support.
 * - Added some test code in the example directory.
 *        
 *
 * (Oct 23 2006) Adam Scislowicz: 
 *
 * - Support for ARMv5 implemented
 *
 #define USE_SBRK        (0) #define USE_MMAP        (0)  The  debug functions  only can  be used  when _DEBUG_TLSF_  is set. *********************************************************************** Definition of the structures used by TLSF  Some IMPORTANT TLSF parameters  Unlike the preview TLSF versions, now they are statics  MAX_SLI = 2^MAX_LOG2_SLI  tlsf structure just will manage blocks bigger  than 128 bytes  bit 0 of the block size  bit 1 of the block size  NOTE: Make sure that this type is 4 bytes long on your computer  NOTE: Make sure that this type is 1 byte on your computer  This pointer is just valid if the first bit of size is set  The size is stored in bytes  bit 0 indicates whether the block is used and  bit 1 allows to know whether the previous block is free sizeof(struct free_ptr_struct)];  This structure is embedded at the beginning of each area, giving us
 * enough information to cope with a set of areas  the TLSF's structure signature  These can not be calculated outside tlsf because we
     * do not know the sizes when freeing/reallocing memory.  A linked list holding all the existing areas  the first-level bitmap  This array should have a size of REAL_FLI bits  the second-level bitmap *****************************************************************************     Helping functions    *****************************************************************************************if ((*_fl -= FLI_OFFSET) < 0) // FL wil be always >0!
         *_fl = *_sl = 0;
          likely *********************************************************************************** Begin of the allocator code ******************************************************************************** Default memory pool. ******************************************************************************************************************************** Check if already initialised  Zeroing the memory pool ******************************************************************************************************************************** FW 28-10-17: disabled memset due to crashes on ARM. Functions
     * fine without it.  BILGUS 17-7-19 re-enabled after setting pluginbuf aligned to 8 bytes  Before inserting the new area, we have to merge this area with the
       already existing ones  Merging the new area with the next physically contigous one  Merging the new area with the previous physically contigous
           one  Inserting the area in the list of linked areasust a safety constant  Not enough system memory ******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************** Rounding up the requested size and calculating fl and sl  Searching a free block, recall that this function changes the values of fl and sl,
       so they are not longer valid when the function fails  Growing the pool size when needed  size plus enough room for the requered headers.  Call sbrk or mmap  Not enough system memory  Rounding up the requested size and calculating fl and sl  Searching a free block  Not found -- found:  Should the block be split?  Now it's used **************************************************************************************************************************************************************************************************************************************************************** We allways reenter this free block because tmp_size will
               be greater then sizeof (bhdr_t) **********************************************************************************************************************************************  DEBUG FUNCTIONS   ************* The following functions have been designed to ease the debugging of  the TLSF  structure.  For non-developing  purposes, it may  be they  haven't too much worth.  To enable them, _DEBUG_TLSF_ must be set.   
 * Two Levels Segregate Fit memory allocator (TLSF)
 * Version 2.4.4
 *
 * Written by Miguel Masmano Tello <mimastel@doctor.upv.es>
 *
 * Thanks to Ismael Ripoll for his suggestions and reviews
 *
 * Copyright (C) 2008, 2007, 2006, 2005, 2004
 *
 * This code is released using a dual license strategy: GPL/LGPL
 * You can choose the licence that better fits your requirements.
 *
 * Released under the terms of the GNU General Public License Version 2.0
 * Released under the terms of the GNU Lesser General Public License Version 2.1
 *
 
 * Code contributions:
 *
 * (Jul 28 2007)  Herman ten Brugge <hermantenbrugge@home.nl>:
 *
 * - Add 64 bit support. It now runs on x86_64 and solaris64.
 * - I also tested this on vxworks/32and solaris/32 and i386/32 processors.
 * - Remove assembly code. I could not measure any performance difference 
 *   on my core2 processor. This also makes the code more portable.
 * - Moved defines/typedefs from tlsf.h to tlsf.c
 * - Changed MIN_BLOCK_SIZE to sizeof (free_ptr_t) and BHDR_OVERHEAD to 
 *   (sizeof (bhdr_t) - MIN_BLOCK_SIZE). This does not change the fact 
 *    that the minumum size is still sizeof 
 *   (bhdr_t).
 * - Changed all C++ comment style to C style. (// -> /.* ... *./)
 * - Used ls_bit instead of ffs and ms_bit instead of fls. I did this to 
 *   avoid confusion with the standard ffs function which returns 
 *   different values.
 * - Created set_bit/clear_bit fuctions because they are not present 
 *   on x86_64.
 * - Added locking support + extra file target.h to show how to use it.
 * - Added get_used_size function (REMOVED in 2.4)
 * - Added rtl_realloc and rtl_calloc function
 * - Implemented realloc clever support.
 * - Added some test code in the example directory.
 *        
 *
 * (Oct 23 2006) Adam Scislowicz: 
 *
 * - Support for ARMv5 implemented
 *
 #define USE_SBRK        (0) #define USE_MMAP        (0)  The  debug functions  only can  be used  when _DEBUG_TLSF_  is set. *********************************************************************** Definition of the structures used by TLSF  Some IMPORTANT TLSF parameters  Unlike the preview TLSF versions, now they are statics  MAX_SLI = 2^MAX_LOG2_SLI  tlsf structure just will manage blocks bigger  than 128 bytes  bit 0 of the block size  bit 1 of the block size  NOTE: Make sure that this type is 4 bytes long on your computer  NOTE: Make sure that this type is 1 byte on your computer  This pointer is just valid if the first bit of size is set  The size is stored in bytes  bit 0 indicates whether the block is used and  bit 1 allows to know whether the previous block is free sizeof(struct free_ptr_struct)];  This structure is embedded at the beginning of each area, giving us
 * enough information to cope with a set of areas  the TLSF's structure signature  These can not be calculated outside tlsf because we
     * do not know the sizes when freeing/reallocing memory.  A linked list holding all the existing areas  the first-level bitmap  This array should have a size of REAL_FLI bits  the second-level bitmap *****************************************************************************     Helping functions    *****************************************************************************************if ((*_fl -= FLI_OFFSET) < 0) // FL wil be always >0!
         *_fl = *_sl = 0;
          likely *********************************************************************************** Begin of the allocator code ******************************************************************************** Default memory pool. ******************************************************************************************************************************** Check if already initialised  Zeroing the memory pool ******************************************************************************************************************************** FW 28-10-17: disabled memset due to crashes on ARM. Functions
     * fine without it.  BILGUS 17-7-19 re-enabled after setting pluginbuf aligned to 8 bytes  Before inserting the new area, we have to merge this area with the
       already existing ones  Merging the new area with the next physically contigous one  Merging the new area with the previous physically contigous
           one  Inserting the area in the list of linked areasust a safety constant  Not enough system memoryounding up the requested size and calculating fl and sl  Searching a free block, recall that this function changes the values of fl and sl,
       so they are not longer valid when the function fails  Growing the pool size when needed  size plus enough room for the requered headers.  Call sbrk or mmap  Not enough system memory  Rounding up the requested size and calculating fl and sl  Searching a free block  Not found -- found:  Should the block be split?  Now it's used **************************************************************************************************************************************************************************************************************************************************************** We allways reenter this free block because tmp_size will
               be greater then sizeof (bhdr_t) **********************************************************************************************************************************************  DEBUG FUNCTIONS   ************* The following functions have been designed to ease the debugging of  the TLSF  structure.  For non-developing  purposes, it may  be they  haven't too much worth.  To enable them, _DEBUG_TLSF_ must be set.  