
Copyright (C) 1994-1995 Apogee Software, Ltd.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*********************************************************************
   module: IRQ.C

   author: James R. Dose
   date:   August 26, 1994

   Low level routines to set and restore IRQ's through DPMI.

   (c) Copyright 1994 James R. Dose.  All Rights Reserved.
********************************************************************* DPMI allocate DOS memory Number of paragraphs requested Failed Intermediary function: DPMI calls this, making it easier to write in C handle 16-bit incoming stack "Pop" the real mode return frame so we can resume where we left off Call protected-mode handler regs pushed in this order by prologue   unsigned short _far *stkp;   return;
static void _interrupt _cdecl callback_x
   (
   // regs pushed in this order by prologue

   int rgs,
   int rfs,
   int res,
   int rds,
   int rdi,
   int rsi,
   int rbp,
   int rsp,
   int rbx,
   int rdx,
   int rcx,
   int rax
   )

   {
   unsigned short _far *stkp;

   fixebp();
   stkp = MK_FP(rds, rsi);

   // "Pop" the real mode return frame so we
   // can resume where we left off
   rmregs.drip = *stkp++;
   rmregs.drcs = *stkp++;

   rmregs.drsp = FP_OFF(stkp);

   // Call protected-mode handler
   IRQ_Callback();
   }
 Save the starting real-mode and protected-mode handler addresses DPMI get protected mode vector */ DPMI get real mode vector Set up callback DPMI allocate real mode callback Allocate 6 bytes of low memory for real mode interrupt handler Free callback Poke code (to call callback) into real mode handler CALL FAR PTR (callback) IRET Install protected mode handler DPMI set protected mode vector Install callback address as real mode handler DPMI set real mode vector Restore original interrupt handlers DPMI set real mode vector Free callback
Copyright (C) 1994-1995 Apogee Software, Ltd.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*********************************************************************
   module: IRQ.C

   author: James R. Dose
   date:   August 26, 1994

   Low level routines to set and restore IRQ's through DPMI.

   (c) Copyright 1994 James R. Dose.  All Rights Reserved.
********************************************************************* DPMI allocate DOS memory Number of paragraphs requested Failed Intermediary function: DPMI calls this, making it easier to write in C handle 16-bit incoming stack "Pop" the real mode return frame so we can resume where we left off Call protected-mode handler regs pushed in this order by prologue   unsigned short _far *stkp;   return;
static void _interrupt _cdecl callback_x
   (
   // regs pushed in this order by prologue

   int rgs,
   int rfs,
   int res,
   int rds,
   int rdi,
   int rsi,
   int rbp,
   int rsp,
   int rbx,
   int rdx,
   int rcx,
   int rax
   )

   {
   unsigned short _far *stkp;

   fixebp();
   stkp = MK_FP(rds, rsi);

   // "Pop" the real mode return frame so we
   // can resume where we left off
   rmregs.drip = *stkp++;
   rmregs.drcs = *stkp++;

   rmregs.drsp = FP_OFF(stkp);

   // Call protected-mode handler
   IRQ_Callback();
   }
 Save the starting real-mode and protected-mode handler addresses DPMI get protected mode vector */ DPMI get real mode vector Set up callback DPMI allocate real mode callback Allocate 6 bytes of low memory for real mode interrupt handler Free callback Poke code (to call callback) into real mode handler CALL FAR PTR (callback) IRET Install protected mode handler DPMI set protected mode vector Install callback address as real mode handler DPMI set real mode vector Restore original interrupt handlers DPMI set real mode vector Free callback
Copyright (C) 1994-1995 Apogee Software, Ltd.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*********************************************************************
   module: IRQ.C

   author: James R. Dose
   date:   August 26, 1994

   Low level routines to set and restore IRQ's through DPMI.

   (c) Copyright 1994 James R. Dose.  All Rights Reserved.
********************************************************************* DPMI allocate DOS memory Number of paragraphs requested Failed Intermediary function: DPMI calls this, making it easier to write in C handle 16-bit incoming stack "Pop" the real mode return frame so we can resume where we left off Call protected-mode handler regs pushed in this order by prologue   unsigned short _far *stkp;   return;
static void _interrupt _cdecl callback_x
   (
   // regs pushed in this order by prologue

   int rgs,
   int rfs,
   int res,
   int rds,
   int rdi,
   int rsi,
   int rbp,
   int rsp,
   int rbx,
   int rdx,
   int rcx,
   int rax
   )

   {
   unsigned short _far *stkp;

   fixebp();
   stkp = MK_FP(rds, rsi);

   // "Pop" the real mode return frame so we
   // can resume where we left off
   rmregs.drip = *stkp++;
   rmregs.drcs = *stkp++;

   rmregs.drsp = FP_OFF(stkp);

   // Call protected-mode handler
   IRQ_Callback();
   }
 Save the starting real-mode and protected-mode handler addresses DPMI get protected mode vector */ DPMI get real mode vector Set up callback DPMI allocate real mode callback Allocate 6 bytes of low memory for real mode interrupt handler Free callback Poke code (to call callback) into real mode handler CALL FAR PTR (callback) IRET Install protected mode handler DPMI set protected mode vector Install callback address as real mode handler DPMI set real mode vector Restore original interrupt handlers DPMI set real mode vector Free callback