**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2011 Sean Bartell
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** htole64 from endian.h  TYPE_PACKET_AUDIO **************** EXPORTED ******************************** INTERNAL **************** Volume control **** MODE_WRITE **** The size fields are normally overwritten by write_quit(). If that fails,
     * this fake size ensures the file can still be played.  Write the correct size fields in the header. If lseek fails (e.g.
         * for a pipe) nothing is written.  TODO: be more portable **** MODE_PLAY **** MODE_PLAY uses a double buffer: one half is read by the playback thread and
 * the other half is written to by the main thread. When a thread is done with
 * its current half, it waits for the other thread and then switches. The main
 * advantage of this method is its simplicity; the main disadvantage is that it
 * has long latency. ALSA buffer underruns still occur sometimes, but this is
 * SDL's fault.  end of data **** ALL MODES **** TODO: equalizer, etc.  Convert to 32-bit interleaved. debugf("Time elapsed: %lu\n", value);
 * Read part of the input file into a provided buffer.
 *
 * The entire size requested will be provided except at the end of the file.
 * The current file position will be moved, just like with advance_buffer, but
 * the offset is not updated. This invalidates buffers returned by
 * request_buffer.
 
 * Request a buffer containing part of the input file.
 *
 * The size provided will be the requested size, or the remaining size of the
 * file, whichever is smaller. Packet audio has an additional maximum of 32
 * KiB. The returned buffer remains valid until the next time read_filebuf,
 * request_buffer, advance_buffer, or seek_buffer is called.
 
 * Advance the current position in the input file.
 *
 * This automatically updates the current offset. This invalidates buffers
 * returned by request_buffer.
 
 * Seek to a position in the input file.
 *
 * This invalidates buffers returned by request_buffer.
  filesize  curpos  id3  audio_hid  struct dsp_config *dsp  yield  commit_dcache  commit_discard_dcache  commit_discard_idcache  strings and memory  file  HAVE_RECORDING  TODO: replaygain; albumart; cuesheet  Initialize DSP before any sort of interaction  Set up global settings  Open file  Set up ci  Load codec  Run the codec  Close  fallthrough **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2011 Sean Bartell
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** htole64 from endian.h  TYPE_PACKET_AUDIO **************** EXPORTED ******************************** INTERNAL **************** Volume control **** MODE_WRITE **** The size fields are normally overwritten by write_quit(). If that fails,
     * this fake size ensures the file can still be played.  Write the correct size fields in the header. If lseek fails (e.g.
         * for a pipe) nothing is written.  TODO: be more portable **** MODE_PLAY **** MODE_PLAY uses a double buffer: one half is read by the playback thread and
 * the other half is written to by the main thread. When a thread is done with
 * its current half, it waits for the other thread and then switches. The main
 * advantage of this method is its simplicity; the main disadvantage is that it
 * has long latency. ALSA buffer underruns still occur sometimes, but this is
 * SDL's fault.  end of data **** ALL MODES **** TODO: equalizer, etc.  Convert to 32-bit interleaved. debugf("Time elapsed: %lu\n", value);
 * Read part of the input file into a provided buffer.
 *
 * The entire size requested will be provided except at the end of the file.
 * The current file position will be moved, just like with advance_buffer, but
 * the offset is not updated. This invalidates buffers returned by
 * request_buffer.
 
 * Request a buffer containing part of the input file.
 *
 * The size provided will be the requested size, or the remaining size of the
 * file, whichever is smaller. Packet audio has an additional maximum of 32
 * KiB. The returned buffer remains valid until the next time read_filebuf,
 * request_buffer, advance_buffer, or seek_buffer is called.
 
 * Advance the current position in the input file.
 *
 * This automatically updates the current offset. This invalidates buffers
 * returned by request_buffer.
 
 * Seek to a position in the input file.
 *
 * This invalidates buffers returned by request_buffer.
  filesize  curpos  id3  audio_hid  struct dsp_config *dsp  yield  commit_dcache  commit_discard_dcache  commit_discard_idcache  strings and memory  file  HAVE_RECORDING  TODO: replaygain; albumart; cuesheet  Initialize DSP before any sort of interaction  Set up global settings  Open file  Set up ci  Load codec  Run the codec  Close  fallthrough **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2011 Sean Bartell
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** htole64 from endian.h  TYPE_PACKET_AUDIO **************** EXPORTED ******************************** INTERNAL **************** Volume control **** MODE_WRITE **** The size fields are normally overwritten by write_quit(). If that fails,
     * this fake size ensures the file can still be played.  Write the correct size fields in the header. If lseek fails (e.g.
         * for a pipe) nothing is written.  TODO: be more portable **** MODE_PLAY **** MODE_PLAY uses a double buffer: one half is read by the playback thread and
 * the other half is written to by the main thread. When a thread is done with
 * its current half, it waits for the other thread and then switches. The main
 * advantage of this method is its simplicity; the main disadvantage is that it
 * has long latency. ALSA buffer underruns still occur sometimes, but this is
 * SDL's fault.  end of data **** ALL MODES **** TODO: equalizer, etc.  Convert to 32-bit interleaved. debugf("Time elapsed: %lu\n", value);
 * Read part of the input file into a provided buffer.
 *
 * The entire size requested will be provided except at the end of the file.
 * The current file position will be moved, just like with advance_buffer, but
 * the offset is not updated. This invalidates buffers returned by
 * request_buffer.
 
 * Request a buffer containing part of the input file.
 *
 * The size provided will be the requested size, or the remaining size of the
 * file, whichever is smaller. Packet audio has an additional maximum of 32
 * KiB. The returned buffer remains valid until the next time read_filebuf,
 * request_buffer, advance_buffer, or seek_buffer is called.
 
 * Advance the current position in the input file.
 *
 * This automatically updates the current offset. This invalidates buffers
 * returned by request_buffer.
 
 * Seek to a position in the input file.
 *
 * This invalidates buffers returned by request_buffer.
  filesize  curpos  id3  audio_hid  struct dsp_config *dsp  yield  commit_dcache  commit_discard_dcache  commit_discard_idcache  strings and memory  file  HAVE_RECORDING  TODO: replaygain; albumart; cuesheet  Initialize DSP before any sort of interaction  Set up global settings  Open file  Set up ci  Load codec  Run the codec  Close  fallthrough 