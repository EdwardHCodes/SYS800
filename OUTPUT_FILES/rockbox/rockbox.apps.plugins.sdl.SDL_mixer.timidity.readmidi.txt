
    TiMidity -- Experimental MIDI to WAVE converter
    Copyright (C) 1995 Tuukka Toivonen <toivonen@clinet.fi>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the Perl Artistic License, available in COPYING.
  to avoid some unnecessary parameter passing  These would both fit into 32 bits, but they are often added in
   large multiples, so it's simpler to have two roomy ints samples per MIDI delta-t Computes how many (fractional) samples one MIDI delta-time unit contains  Read variable-length number (7 bits per byte, MSB first) * return s[4]+(s[5]<<7); * dta==0 Insertion; dta==1 System  bank select MSB  bank select LSB  program number * MIDIEVENT(d->at, ME_PROGRAM, lastchan, a, 0); *   d->channel[adlo&0x0f].transpose = (char)(dta-64);  volume  pan  chorus send  reverb send  variation send  filter cutoff  filter resonance  Print a string from the file, followed by a newline. Any non-ASCII
   or unprintable characters will be converted to periods.  Read a MIDI event, returning a freshly allocated element that can
   be linked to the event list  one per channel  SysEx event  Meta event  MIDI port number  End of Track  Tempo  status byte  Note off  Note on  Key Pressure  Control change  These should be the SCC-1 tone bank switch
		       commands. I don't know why there are two, or
		       why the latter only allows switching to bank 0.
		       Also, some MIDI files use 0 as some sort of
		       continuous controller. This will cause lots of
		       warnings about undefined tone banks. 
			   case 0x63: envelope attack rate
			   case 0x64: envelope decay rate
			   case 0x66: envelope release rate
			
			   case 0x14: filter cutoff frequency
			   case 0x15: filter resonance
			   case 0x16: envelope attack rate
			   case 0x17: envelope decay rate
			   case 0x18: pitch coarse
			   case 0x19: pitch fine
			
			   case 0x1f: variation send level
			 Pitch bend sensitivity  RPN reset  reset pitch bend sensitivity to 2  Program change  Channel pressure - NOT IMPLEMENTED  Pitch wheel  Read a midi track into the linked list, either merging with any previous
   tracks or appending to them.  find the last event in the list  Check the formalities  Some kind of error   End-of-track Hack.  Count the event. (About one?)  Free the linked event list from memory.  Allocate an array of MidiEvents and fill it from the linked list of
   events, marking used instruments for loading. Convert event times to
   samples: handle tempo changes. Strip unnecessary events from the list.
   Free the linked list.  Or should each bank have its own current program?  This may allocate a bit more than we need  We strip any silence before the first NOTE ON.  note request for 2nd sfx rhythm kit  Is this a defined drumset?  percussion channel? if (current_config_pc42b) pcmap(&dset, &dnote, &mprog, &drumsflag); Mark this instrument to be loaded  not percussion if (current_config_pc42b) pcmap(&banknum, &dnote, &mprog, &drumsflag); Mark this instrument to be loaded  Mark this instrument to be loaded  Is this a defined tone bank?  Is this a defined tone bank?  Is this a defined tone bank?  Recompute time in samples Add the event to the list  Add an End-of-Track event  vol_table = def_vol_table;  if (ferror(fp))
	{
	  ctl->cmsg(CMSG_ERROR, VERB_NORMAL, "%s: %s", current_filename,
	       strerror(errno));
	}
      else SMPTE time -- totally untested. Got a MIDI file that uses this?  skip the excess  Put a do-nothing event first in the list for easier processing  We simply play the tracks sequentially 
    TiMidity -- Experimental MIDI to WAVE converter
    Copyright (C) 1995 Tuukka Toivonen <toivonen@clinet.fi>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the Perl Artistic License, available in COPYING.
  to avoid some unnecessary parameter passing  These would both fit into 32 bits, but they are often added in
   large multiples, so it's simpler to have two roomy ints samples per MIDI delta-t Computes how many (fractional) samples one MIDI delta-time unit contains  Read variable-length number (7 bits per byte, MSB first) * return s[4]+(s[5]<<7); * dta==0 Insertion; dta==1 System  bank select MSB  bank select LSB  program number * MIDIEVENT(d->at, ME_PROGRAM, lastchan, a, 0); *   d->channel[adlo&0x0f].transpose = (char)(dta-64);  volume  pan  chorus send  reverb send  variation send  filter cutoff  filter resonance  Print a string from the file, followed by a newline. Any non-ASCII
   or unprintable characters will be converted to periods.  Read a MIDI event, returning a freshly allocated element that can
   be linked to the event list  one per channel  SysEx event  Meta event  MIDI port number  End of Track  Tempo  status byte  Note off  Note on  Key Pressure  Control change  These should be the SCC-1 tone bank switch
		       commands. I don't know why there are two, or
		       why the latter only allows switching to bank 0.
		       Also, some MIDI files use 0 as some sort of
		       continuous controller. This will cause lots of
		       warnings about undefined tone banks. 
			   case 0x63: envelope attack rate
			   case 0x64: envelope decay rate
			   case 0x66: envelope release rate
			
			   case 0x14: filter cutoff frequency
			   case 0x15: filter resonance
			   case 0x16: envelope attack rate
			   case 0x17: envelope decay rate
			   case 0x18: pitch coarse
			   case 0x19: pitch fine
			
			   case 0x1f: variation send level
			 Pitch bend sensitivity  RPN reset  reset pitch bend sensitivity to 2  Program change  Channel pressure - NOT IMPLEMENTED  Pitch wheel  Read a midi track into the linked list, either merging with any previous
   tracks or appending to them.  find the last event in the list  Check the formalities  Some kind of error   End-of-track Hack.  Count the event. (About one?)  Free the linked event list from memory.  Allocate an array of MidiEvents and fill it from the linked list of
   events, marking used instruments for loading. Convert event times to
   samples: handle tempo changes. Strip unnecessary events from the list.
   Free the linked list.  Or should each bank have its own current program?  This may allocate a bit more than we need  We strip any silence before the first NOTE ON.  note request for 2nd sfx rhythm kit  Is this a defined drumset?  percussion channel? if (current_config_pc42b) pcmap(&dset, &dnote, &mprog, &drumsflag); Mark this instrument to be loaded  not percussion if (current_config_pc42b) pcmap(&banknum, &dnote, &mprog, &drumsflag); Mark this instrument to be loaded  Mark this instrument to be loaded  Is this a defined tone bank?  Is this a defined tone bank?  Is this a defined tone bank?  Recompute time in samples Add the event to the list  Add an End-of-Track event  vol_table = def_vol_table;  if (ferror(fp))
	{
	  ctl->cmsg(CMSG_ERROR, VERB_NORMAL, "%s: %s", current_filename,
	       strerror(errno));
	}
      else SMPTE time -- totally untested. Got a MIDI file that uses this?  skip the excess  Put a do-nothing event first in the list for easier processing  We simply play the tracks sequentially 
    TiMidity -- Experimental MIDI to WAVE converter
    Copyright (C) 1995 Tuukka Toivonen <toivonen@clinet.fi>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the Perl Artistic License, available in COPYING.
  to avoid some unnecessary parameter passing  These would both fit into 32 bits, but they are often added in
   large multiples, so it's simpler to have two roomy ints samples per MIDI delta-t Computes how many (fractional) samples one MIDI delta-time unit contains  Read variable-length number (7 bits per byte, MSB first) * return s[4]+(s[5]<<7); * dta==0 Insertion; dta==1 System  bank select MSB  bank select LSB  program number * MIDIEVENT(d->at, ME_PROGRAM, lastchan, a, 0); *   d->channel[adlo&0x0f].transpose = (char)(dta-64);  volume  pan  chorus send  reverb send  variation send  filter cutoff  filter resonance  Print a string from the file, followed by a newline. Any non-ASCII
   or unprintable characters will be converted to periods.  Read a MIDI event, returning a freshly allocated element that can
   be linked to the event list  one per channel  SysEx event  Meta event  MIDI port number  End of Track  Tempo  status byte  Note off  Note on  Key Pressure  Control change  These should be the SCC-1 tone bank switch
		       commands. I don't know why there are two, or
		       why the latter only allows switching to bank 0.
		       Also, some MIDI files use 0 as some sort of
		       continuous controller. This will cause lots of
		       warnings about undefined tone banks. 
			   case 0x63: envelope attack rate
			   case 0x64: envelope decay rate
			   case 0x66: envelope release rate
			
			   case 0x14: filter cutoff frequency
			   case 0x15: filter resonance
			   case 0x16: envelope attack rate
			   case 0x17: envelope decay rate
			   case 0x18: pitch coarse
			   case 0x19: pitch fine
			
			   case 0x1f: variation send level
			 Pitch bend sensitivity  RPN reset  reset pitch bend sensitivity to 2  Program change  Channel pressure - NOT IMPLEMENTED  Pitch wheel  Read a midi track into the linked list, either merging with any previous
   tracks or appending to them.  find the last event in the list  Check the formalities  Some kind of error   End-of-track Hack.  Count the event. (About one?)  Free the linked event list from memory.  Allocate an array of MidiEvents and fill it from the linked list of
   events, marking used instruments for loading. Convert event times to
   samples: handle tempo changes. Strip unnecessary events from the list.
   Free the linked list.  Or should each bank have its own current program?  This may allocate a bit more than we need  We strip any silence before the first NOTE ON.  note request for 2nd sfx rhythm kit  Is this a defined drumset?  percussion channel? if (current_config_pc42b) pcmap(&dset, &dnote, &mprog, &drumsflag); Mark this instrument to be loaded  not percussion if (current_config_pc42b) pcmap(&banknum, &dnote, &mprog, &drumsflag); Mark this instrument to be loaded  Mark this instrument to be loaded  Is this a defined tone bank?  Is this a defined tone bank?  Is this a defined tone bank?  Recompute time in samples Add the event to the list  Add an End-of-Track event  vol_table = def_vol_table;  if (ferror(fp))
	{
	  ctl->cmsg(CMSG_ERROR, VERB_NORMAL, "%s: %s", current_filename,
	       strerror(errno));
	}
      else SMPTE time -- totally untested. Got a MIDI file that uses this?  skip the excess  Put a do-nothing event first in the list for easier processing  We simply play the tracks sequentially 