**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id:$
 *
 * Copyright (C) 2010 by Marcin Bukat
 *
 * code taken mostly from mkboot.c 
 * Copyright (C) 2005 by Linus Nielsen Feltzing
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** size of the OF file  offset of the version string in OF  free space size  Descriptive name of this model  Model name used in the Rockbox header in ".mpio" files - these match the
       -add parameter to the "scramble" tool  Model number used to initialise the checksum in the Rockbox header in
       ".mpio" files - these are the same as MODEL_NUMBER in config-target.h  Strings which indentifies OF version  MPIO HD200 and HD300 firmware is plain binary image
 * 4 bytes of initial SP (loaded on reset)
 * 4 bytes of initial PC (loaded on reset)
 * binary image with entry point 0x00000008
 *
 * We put our bootloader code at 0x000e0000
 * and patch reset vector to jump directly
 * into our code on reset
  First, read the mpio original firmware into the image  Now check if we have OF file loaded based on presence
     * of the version string in firmware 
      Now, read the boot loader into the image  get bootloader size
     * excluding header
      Now check if the place we want to put
     * our bootloader is free
      get bootloader header omit header  calculate checksum and compare with data
     * from header
      Patch the stack pointer address  Patch the reset vector to start the boot loader **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id:$
 *
 * Copyright (C) 2010 by Marcin Bukat
 *
 * code taken mostly from mkboot.c 
 * Copyright (C) 2005 by Linus Nielsen Feltzing
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** size of the OF file  offset of the version string in OF  free space size  Descriptive name of this model  Model name used in the Rockbox header in ".mpio" files - these match the
       -add parameter to the "scramble" tool  Model number used to initialise the checksum in the Rockbox header in
       ".mpio" files - these are the same as MODEL_NUMBER in config-target.h  Strings which indentifies OF version  MPIO HD200 and HD300 firmware is plain binary image
 * 4 bytes of initial SP (loaded on reset)
 * 4 bytes of initial PC (loaded on reset)
 * binary image with entry point 0x00000008
 *
 * We put our bootloader code at 0x000e0000
 * and patch reset vector to jump directly
 * into our code on reset
  First, read the mpio original firmware into the image  Now check if we have OF file loaded based on presence
     * of the version string in firmware 
      Now, read the boot loader into the image  get bootloader size
     * excluding header
      Now check if the place we want to put
     * our bootloader is free
      get bootloader header omit header  calculate checksum and compare with data
     * from header
      Patch the stack pointer address  Patch the reset vector to start the boot loader **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id:$
 *
 * Copyright (C) 2010 by Marcin Bukat
 *
 * code taken mostly from mkboot.c 
 * Copyright (C) 2005 by Linus Nielsen Feltzing
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** size of the OF file  offset of the version string in OF  free space size  Descriptive name of this model  Model name used in the Rockbox header in ".mpio" files - these match the
       -add parameter to the "scramble" tool  Model number used to initialise the checksum in the Rockbox header in
       ".mpio" files - these are the same as MODEL_NUMBER in config-target.h  Strings which indentifies OF version  MPIO HD200 and HD300 firmware is plain binary image
 * 4 bytes of initial SP (loaded on reset)
 * 4 bytes of initial PC (loaded on reset)
 * binary image with entry point 0x00000008
 *
 * We put our bootloader code at 0x000e0000
 * and patch reset vector to jump directly
 * into our code on reset
  First, read the mpio original firmware into the image  Now check if we have OF file loaded based on presence
     * of the version string in firmware 
      Now, read the boot loader into the image  get bootloader size
     * excluding header
      Now check if the place we want to put
     * our bootloader is free
      get bootloader header omit header  calculate checksum and compare with data
     * from header
      Patch the stack pointer address  Patch the reset vector to start the boot loader 