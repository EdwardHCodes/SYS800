 Copyright (c) 1997-1999 Miller Puckette.
* For information on usage and redistribution, and for a DISCLAIMER OF ALL
* WARRANTIES, see the file, "LICENSE.txt," in this distribution.    scheduling stuff   LATER consider making this variable.  It's now the LCM of all sample
    rates we expect to see: 32000, 44100, 48000, 88200, 96000.  T.Grill - enable PD global thread locking - sys_lock, sys_unlock, sys_trylock functions  set the clock to call back at an absolute system time  set the clock to call back after a delay in msec  get current logical time.  We don't specify what units this is in;
    use clock_gettimesince() to measure intervals from time of this call. 
    This was previously, incorrectly named "clock_getsystime"; the old
    name is aliased to the new one in m_pd.h.  OBSOLETE NAME  elapsed time in milliseconds since the given system time  what value the system clock will have after a delay  the following routines maintain a real-execution-time histogram of the
various phases of real-time execution.  if there's no GUI but we're running in "realtime", here is
	where we arrange to ping the watchdog every 2 seconds.  ping every 2 seconds  ROCKBOX 
#ifdef SIMULATOR
printf("%f\n%f\n%f\n%f\n", (double)sys_time_per_dsp_tick, (double)TIMEUNITPERSEC, (double) sys_schedblocksize, (double)sys_dacsr);
#endif
 take the scheduler forward one DSP tick, also handling clock timeouts 
Here is Pd's "main loop."  This routine dispatches clock timeouts and DSP
"ticks" deterministically, and polls for input from MIDI and the GUI.  If
we're left idle we also poll for graphics updates; but these are considered
lower priority than the rest.

The time source is normally the audio I/O subsystem via the "sys_send_dacs()"
call.  This call returns true if samples were transferred; false means that
the audio I/O system is still busy with previous transfers.
 T.Grill - lock mutex  if dacs remain "idle" for 1 sec, they're hung up.  on 32nd idle, start a clock watch;  every
    	    	    	32 ensuing idles, check it 	sys_pollmidiqueue(); test for idle; if so, do graphics updates.  T.Grill - enter idle phase -> unlock thread lock  T.Grill - leave idle phase -> lock thread lock  T.Grill - done  ------------ thread locking -------------------  added by Thomas Grill  ------------ soft quit -------------------  added by Thomas Grill - 
	just set the quit flag for the scheduler loop
	this is useful for applications using the PD shared library to signal the scheduler to terminate
 ROCKBOX  Copyright (c) 1997-1999 Miller Puckette.
* For information on usage and redistribution, and for a DISCLAIMER OF ALL
* WARRANTIES, see the file, "LICENSE.txt," in this distribution.    scheduling stuff   LATER consider making this variable.  It's now the LCM of all sample
    rates we expect to see: 32000, 44100, 48000, 88200, 96000.  T.Grill - enable PD global thread locking - sys_lock, sys_unlock, sys_trylock functions  set the clock to call back at an absolute system time  set the clock to call back after a delay in msec  get current logical time.  We don't specify what units this is in;
    use clock_gettimesince() to measure intervals from time of this call. 
    This was previously, incorrectly named "clock_getsystime"; the old
    name is aliased to the new one in m_pd.h.  OBSOLETE NAME  elapsed time in milliseconds since the given system time  what value the system clock will have after a delay  the following routines maintain a real-execution-time histogram of the
various phases of real-time execution.  if there's no GUI but we're running in "realtime", here is
	where we arrange to ping the watchdog every 2 seconds.  ping every 2 seconds  ROCKBOX 
#ifdef SIMULATOR
printf("%f\n%f\n%f\n%f\n", (double)sys_time_per_dsp_tick, (double)TIMEUNITPERSEC, (double) sys_schedblocksize, (double)sys_dacsr);
#endif
 take the scheduler forward one DSP tick, also handling clock timeouts 
Here is Pd's "main loop."  This routine dispatches clock timeouts and DSP
"ticks" deterministically, and polls for input from MIDI and the GUI.  If
we're left idle we also poll for graphics updates; but these are considered
lower priority than the rest.

The time source is normally the audio I/O subsystem via the "sys_send_dacs()"
call.  This call returns true if samples were transferred; false means that
the audio I/O system is still busy with previous transfers.
 T.Grill - lock mutex  if dacs remain "idle" for 1 sec, they're hung up.  on 32nd idle, start a clock watch;  every
    	    	    	32 ensuing idles, check it 	sys_pollmidiqueue(); test for idle; if so, do graphics updates.  T.Grill - enter idle phase -> unlock thread lock  T.Grill - leave idle phase -> lock thread lock  T.Grill - done  ------------ thread locking -------------------  added by Thomas Grill  ------------ soft quit -------------------  added by Thomas Grill - 
	just set the quit flag for the scheduler loop
	this is useful for applications using the PD shared library to signal the scheduler to terminate
 ROCKBOX  Copyright (c) 1997-1999 Miller Puckette.
* For information on usage and redistribution, and for a DISCLAIMER OF ALL
* WARRANTIES, see the file, "LICENSE.txt," in this distribution.    scheduling stuff   LATER consider making this variable.  It's now the LCM of all sample
    rates we expect to see: 32000, 44100, 48000, 88200, 96000.  T.Grill - enable PD global thread locking - sys_lock, sys_unlock, sys_trylock functions  set the clock to call back at an absolute system time  set the clock to call back after a delay in msec  get current logical time.  We don't specify what units this is in;
    use clock_gettimesince() to measure intervals from time of this call. 
    This was previously, incorrectly named "clock_getsystime"; the old
    name is aliased to the new one in m_pd.h.  OBSOLETE NAME  elapsed time in milliseconds since the given system time  what value the system clock will have after a delay  the following routines maintain a real-execution-time histogram of the
various phases of real-time execution.  if there's no GUI but we're running in "realtime", here is
	where we arrange to ping the watchdog every 2 seconds.  ping every 2 seconds  ROCKBOX 
#ifdef SIMULATOR
printf("%f\n%f\n%f\n%f\n", (double)sys_time_per_dsp_tick, (double)TIMEUNITPERSEC, (double) sys_schedblocksize, (double)sys_dacsr);
#endif
 take the scheduler forward one DSP tick, also handling clock timeouts 
Here is Pd's "main loop."  This routine dispatches clock timeouts and DSP
"ticks" deterministically, and polls for input from MIDI and the GUI.  If
we're left idle we also poll for graphics updates; but these are considered
lower priority than the rest.

The time source is normally the audio I/O subsystem via the "sys_send_dacs()"
call.  This call returns true if samples were transferred; false means that
the audio I/O system is still busy with previous transfers.
 T.Grill - lock mutex  if dacs remain "idle" for 1 sec, they're hung up.  on 32nd idle, start a clock watch;  every
    	    	    	32 ensuing idles, check it 	sys_pollmidiqueue(); test for idle; if so, do graphics updates.  T.Grill - enter idle phase -> unlock thread lock  T.Grill - leave idle phase -> lock thread lock  T.Grill - done  ------------ thread locking -------------------  added by Thomas Grill  ------------ soft quit -------------------  added by Thomas Grill - 
	just set the quit flag for the scheduler loop
	this is useful for applications using the PD shared library to signal the scheduler to terminate
 ROCKBOX 