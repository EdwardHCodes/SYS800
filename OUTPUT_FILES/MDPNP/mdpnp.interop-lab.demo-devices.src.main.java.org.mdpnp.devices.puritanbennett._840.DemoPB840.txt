    protected Map<String, InstanceHolder<ice.AlarmSettings>> alarmSettingsInstances = new HashMap<String, InstanceHolder<ice.AlarmSettings>>(); TODO settings might not always be on the same topic as numerics TODO using FLOAT_MIN, FLOAT_MAX as reserved values because otherwise cannot publish AlarmSettings (now limits) with only one boundary conditionXXX possible values of Alarm settings PB_LIMIT_TOTAL_RESPIRATORY_RATE & PB_LIMIT_INSPIRED_TIDAL_VOLUME: numeric or OFFmetric_idparseFloat(value, null), TODO If this response is not a full MISCF don't expect updates to alert conditions TODO this is not threadsafe; assuming serial traffic always delivered on the same thread decrement because of response  TODO Refine this and externalize constant to keep in sync with max quiet time There is a request with no response There is no protocol negotiation for waveform data so there is no utility in interrupting the main parameter collection when waveform data is absent TODO I don't want to deal with this right now .. rest of the system shouldn't be messing with source_timestamp    protected Map<String, InstanceHolder<ice.AlarmSettings>> alarmSettingsInstances = new HashMap<String, InstanceHolder<ice.AlarmSettings>>(); TODO settings might not always be on the same topic as numerics TODO using FLOAT_MIN, FLOAT_MAX as reserved values because otherwise cannot publish AlarmSettings (now limits) with only one boundary conditionXXX possible values of Alarm settings PB_LIMIT_TOTAL_RESPIRATORY_RATE & PB_LIMIT_INSPIRED_TIDAL_VOLUME: numeric or OFFmetric_idparseFloat(value, null), TODO If this response is not a full MISCF don't expect updates to alert conditions TODO this is not threadsafe; assuming serial traffic always delivered on the same thread decrement because of response  TODO Refine this and externalize constant to keep in sync with max quiet time There is a request with no response There is no protocol negotiation for waveform data so there is no utility in interrupting the main parameter collection when waveform data is absent TODO I don't want to deal with this right now .. rest of the system shouldn't be messing with source_timestamp    protected Map<String, InstanceHolder<ice.AlarmSettings>> alarmSettingsInstances = new HashMap<String, InstanceHolder<ice.AlarmSettings>>(); TODO settings might not always be on the same topic as numerics TODO using FLOAT_MIN, FLOAT_MAX as reserved values because otherwise cannot publish AlarmSettings (now limits) with only one boundary conditionXXX possible values of Alarm settings PB_LIMIT_TOTAL_RESPIRATORY_RATE & PB_LIMIT_INSPIRED_TIDAL_VOLUME: numeric or OFFmetric_idparseFloat(value, null), TODO If this response is not a full MISCF don't expect updates to alert conditions TODO this is not threadsafe; assuming serial traffic always delivered on the same thread decrement because of response  TODO Refine this and externalize constant to keep in sync with max quiet time There is a request with no response There is no protocol negotiation for waveform data so there is no utility in interrupting the main parameter collection when waveform data is absent TODO I don't want to deal with this right now .. rest of the system shouldn't be messing with source_timestamp    protected Map<String, InstanceHolder<ice.AlarmSettings>> alarmSettingsInstances = new HashMap<String, InstanceHolder<ice.AlarmSettings>>(); TODO settings might not always be on the same topic as numerics TODO using FLOAT_MIN, FLOAT_MAX as reserved values because otherwise cannot publish AlarmSettings (now limits) with only one boundary conditionXXX possible values of Alarm settings PB_LIMIT_TOTAL_RESPIRATORY_RATE & PB_LIMIT_INSPIRED_TIDAL_VOLUME: numeric or OFFmetric_idparseFloat(value, null), TODO If this response is not a full MISCF don't expect updates to alert conditions TODO this is not threadsafe; assuming serial traffic always delivered on the same thread decrement because of response  TODO Refine this and externalize constant to keep in sync with max quiet time There is a request with no response There is no protocol negotiation for waveform data so there is no utility in interrupting the main parameter collection when waveform data is absent TODO I don't want to deal with this right now .. rest of the system shouldn't be messing with source_timestamp