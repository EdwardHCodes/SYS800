*******************************************************************
 *                                                                  *
 * THIS FILE IS PART OF THE OggVorbis 'TREMOR' CODEC SOURCE CODE.   *
 *                                                                  *
 * USE, DISTRIBUTION AND REPRODUCTION OF THIS LIBRARY SOURCE IS     *
 * GOVERNED BY A BSD-STYLE SOURCE LICENSE INCLUDED WITH THIS SOURCE *
 * IN 'COPYING'. PLEASE READ THESE TERMS BEFORE DISTRIBUTING.       *
 *                                                                  *
 * THE OggVorbis 'TREMOR' SOURCE CODE IS (C) COPYRIGHT 1994-2002    *
 * BY THE Xiph.Org FOUNDATION http://www.xiph.org/                  *
 *                                                                  *
 ********************************************************************

 function: PCM data vector blocking, windowing and dis/reassembly

 *******************************************************************#include <codecs/lib/codeclib.h> save original pointers returned by malloc so we can free it easily  pcm accumulator examples (not exhaustive):

 <-------------- lW ---------------->
                   <--------------- W ---------------->
:            .....|.....       _______________         |
:        .'''     |     '''_---      |       |\        |
:.....'''         |_____--- '''......|       | \_______|
:.................|__________________|_______|__|______|
                  |<------ Sl ------>|      > Sr <     |endW
                  |beginSl           |endSl  |  |endSr   
                  |beginW            |endlW  |beginSr


                      |< lW >|       
                   <--------------- W ---------------->
                  |   |  ..  ______________            |
                  |   | '  `/        |     ---_        |
                  |___.'___/`.       |         ---_____| 
                  |_______|__|_______|_________________|
                  |      >|Sl|<      |<------ Sr ----->|endW
                  |       |  |endSl  |beginSr          |endSr
                  |beginW |  |endlW                     
                  mult[0] |beginSl                     mult[n]

 <-------------- lW ----------------->
                          |<--W-->|                               
:            ..............  ___  |   |                    
:        .'''             |`/   \ |   |                       
:.....'''                 |/`....\|...|                    
:.........................|___|___|___|                  
                          |Sl |Sr |endW    
                          |   |   |endSr
                          |   |beginSr
                          |   |endSl
                          |beginSl
                          |beginW
 block abstraction setup ******************************************** can't just _ogg_realloc... there are outstanding pointers  highly conservative  reap the chain, pull the ripcord  reap the chain  consolidate storage  pull the ripcord  allocate IRAM buffer for the PCM data generated by synthesis  if we can get away with it, put a double buffer into IRAM too, so that
     overlap-add runs iram-to-iram and we avoid needing to memcpy  needed for the first overlap/add  Vorbis I uses only window type 0  allocate IRAM buffer for window tables too, if sufficient iram available  give preference to the larger window over the smaller window
     (on the assumption that both windows are equally likely used)  finish the codebooks  decode codebooks are now standalone after init  all 1 (large block) or 0 (small block)  explicitly set for the sake of clarity  previous window size  current window size  initialize all the mapping/backend lookups  pcm buffer came from oggmalloc rather than iram  free mode lookups; these are actually vorbis_look_mapping structs  Unlike in analysis, the window is only partially applied for each
   block.  The time domain envelope is not yet handled at the point of
   calling (as it relies on the previous block).  out of sequence; lose count  no pcm to process if vorbis_synthesis_trackonly 
                                  was called on block  deal with initial packet state; we do this using the explicit
       pcm_returned==-1 flag otherwise we're sensitive to first block
       being short or long  track the frame number... This is for convenience, but also
     making sure our last packet doesn't end with added padding.  If
     the last packet is partial, the number of samples we'll have to
     return will be past the vb->granulepos.
     
     This is not foolproof!  It will be confused if we begin
     decoding at the last page after a seek or hole.  In that case,
     we don't have a starting point to judge where the last frame
     is.  For this reason, vorbisfile will always try to make sure
     it reads the last two marked pages in proper sequence  only set if we have a position to set to  is this a short page?  corner case; if this is both the first and last audio page,
           then spec says the end is cut, not beginning  trim the end  no preceeding granulepos; assume we started at zero (we'd
             have to in a short single-page stream)  granulepos could be -1 due to a seek, but that would result
             in a long coun`t, not short count  trim the beginning  partial last frame.  Strip the extra samples off  else {Shouldn't happen *unless* the bitstream is out of
               spec.  Either way, believe the bitstream }  else {Shouldn't happen *unless* the bitstream is out of
           spec.  Either way, believe the bitstream }  Update, cleanup  pcm==NULL indicates we just want the pending samples, no more *******************************************************************
 *                                                                  *
 * THIS FILE IS PART OF THE OggVorbis 'TREMOR' CODEC SOURCE CODE.   *
 *                                                                  *
 * USE, DISTRIBUTION AND REPRODUCTION OF THIS LIBRARY SOURCE IS     *
 * GOVERNED BY A BSD-STYLE SOURCE LICENSE INCLUDED WITH THIS SOURCE *
 * IN 'COPYING'. PLEASE READ THESE TERMS BEFORE DISTRIBUTING.       *
 *                                                                  *
 * THE OggVorbis 'TREMOR' SOURCE CODE IS (C) COPYRIGHT 1994-2002    *
 * BY THE Xiph.Org FOUNDATION http://www.xiph.org/                  *
 *                                                                  *
 ********************************************************************

 function: PCM data vector blocking, windowing and dis/reassembly

 *******************************************************************#include <codecs/lib/codeclib.h> save original pointers returned by malloc so we can free it easily  pcm accumulator examples (not exhaustive):

 <-------------- lW ---------------->
                   <--------------- W ---------------->
:            .....|.....       _______________         |
:        .'''     |     '''_---      |       |\        |
:.....'''         |_____--- '''......|       | \_______|
:.................|__________________|_______|__|______|
                  |<------ Sl ------>|      > Sr <     |endW
                  |beginSl           |endSl  |  |endSr   
                  |beginW            |endlW  |beginSr


                      |< lW >|       
                   <--------------- W ---------------->
                  |   |  ..  ______________            |
                  |   | '  `/        |     ---_        |
                  |___.'___/`.       |         ---_____| 
                  |_______|__|_______|_________________|
                  |      >|Sl|<      |<------ Sr ----->|endW
                  |       |  |endSl  |beginSr          |endSr
                  |beginW |  |endlW                     
                  mult[0] |beginSl                     mult[n]

 <-------------- lW ----------------->
                          |<--W-->|                               
:            ..............  ___  |   |                    
:        .'''             |`/   \ |   |                       
:.....'''                 |/`....\|...|                    
:.........................|___|___|___|                  
                          |Sl |Sr |endW    
                          |   |   |endSr
                          |   |beginSr
                          |   |endSl
                          |beginSl
                          |beginW
 block abstraction setup ******************************************** can't just _ogg_realloc... there are outstanding pointers  highly conservative  reap the chain, pull the ripcord  reap the chain  consolidate storage  pull the ripcord  allocate IRAM buffer for the PCM data generated by synthesis  if we can get away with it, put a double buffer into IRAM too, so that
     overlap-add runs iram-to-iram and we avoid needing to memcpy  needed for the first overlap/add  Vorbis I uses only window type 0  allocate IRAM buffer for window tables too, if sufficient iram available  give preference to the larger window over the smaller window
     (on the assumption that both windows are equally likely used)  finish the codebooks  decode codebooks are now standalone after init  all 1 (large block) or 0 (small block)  explicitly set for the sake of clarity  previous window size  current window size  initialize all the mapping/backend lookups  pcm buffer came from oggmalloc rather than iram  free mode lookups; these are actually vorbis_look_mapping structs  Unlike in analysis, the window is only partially applied for each
   block.  The time domain envelope is not yet handled at the point of
   calling (as it relies on the previous block).  out of sequence; lose count  no pcm to process if vorbis_synthesis_trackonly 
                                  was called on block  deal with initial packet state; we do this using the explicit
       pcm_returned==-1 flag otherwise we're sensitive to first block
       being short or long  track the frame number... This is for convenience, but also
     making sure our last packet doesn't end with added padding.  If
     the last packet is partial, the number of samples we'll have to
     return will be past the vb->granulepos.
     
     This is not foolproof!  It will be confused if we begin
     decoding at the last page after a seek or hole.  In that case,
     we don't have a starting point to judge where the last frame
     is.  For this reason, vorbisfile will always try to make sure
     it reads the last two marked pages in proper sequence  only set if we have a position to set to  is this a short page?  corner case; if this is both the first and last audio page,
           then spec says the end is cut, not beginning  trim the end  no preceeding granulepos; assume we started at zero (we'd
             have to in a short single-page stream)  granulepos could be -1 due to a seek, but that would result
             in a long coun`t, not short count  trim the beginning  partial last frame.  Strip the extra samples off  else {Shouldn't happen *unless* the bitstream is out of
               spec.  Either way, believe the bitstream }  else {Shouldn't happen *unless* the bitstream is out of
           spec.  Either way, believe the bitstream }  Update, cleanup  pcm==NULL indicates we just want the pending samples, no more *******************************************************************
 *                                                                  *
 * THIS FILE IS PART OF THE OggVorbis 'TREMOR' CODEC SOURCE CODE.   *
 *                                                                  *
 * USE, DISTRIBUTION AND REPRODUCTION OF THIS LIBRARY SOURCE IS     *
 * GOVERNED BY A BSD-STYLE SOURCE LICENSE INCLUDED WITH THIS SOURCE *
 * IN 'COPYING'. PLEASE READ THESE TERMS BEFORE DISTRIBUTING.       *
 *                                                                  *
 * THE OggVorbis 'TREMOR' SOURCE CODE IS (C) COPYRIGHT 1994-2002    *
 * BY THE Xiph.Org FOUNDATION http://www.xiph.org/                  *
 *                                                                  *
 ********************************************************************

 function: PCM data vector blocking, windowing and dis/reassembly

 *******************************************************************#include <codecs/lib/codeclib.h> save original pointers returned by malloc so we can free it easily  pcm accumulator examples (not exhaustive):

 <-------------- lW ---------------->
                   <--------------- W ---------------->
:            .....|.....       _______________         |
:        .'''     |     '''_---      |       |\        |
:.....'''         |_____--- '''......|       | \_______|
:.................|__________________|_______|__|______|
                  |<------ Sl ------>|      > Sr <     |endW
                  |beginSl           |endSl  |  |endSr   
                  |beginW            |endlW  |beginSr


                      |< lW >|       
                   <--------------- W ---------------->
                  |   |  ..  ______________            |
                  |   | '  `/        |     ---_        |
                  |___.'___/`.       |         ---_____| 
                  |_______|__|_______|_________________|
                  |      >|Sl|<      |<------ Sr ----->|endW
                  |       |  |endSl  |beginSr          |endSr
                  |beginW |  |endlW                     
                  mult[0] |beginSl                     mult[n]

 <-------------- lW ----------------->
                          |<--W-->|                               
:            ..............  ___  |   |                    
:        .'''             |`/   \ |   |                       
:.....'''                 |/`....\|...|                    
:.........................|___|___|___|                  
                          |Sl |Sr |endW    
                          |   |   |endSr
                          |   |beginSr
                          |   |endSl
                          |beginSl
                          |beginW
 block abstraction setup ******************************************** can't just _ogg_realloc... there are outstanding pointers  highly conservative  reap the chain, pull the ripcord  reap the chain  consolidate storage  pull the ripcord  allocate IRAM buffer for the PCM data generated by synthesis  if we can get away with it, put a double buffer into IRAM too, so that
     overlap-add runs iram-to-iram and we avoid needing to memcpy  needed for the first overlap/add  Vorbis I uses only window type 0  allocate IRAM buffer for window tables too, if sufficient iram available  give preference to the larger window over the smaller window
     (on the assumption that both windows are equally likely used)  finish the codebooks  decode codebooks are now standalone after init  all 1 (large block) or 0 (small block)  explicitly set for the sake of clarity  previous window size  current window size  initialize all the mapping/backend lookups  pcm buffer came from oggmalloc rather than iram  free mode lookups; these are actually vorbis_look_mapping structs  Unlike in analysis, the window is only partially applied for each
   block.  The time domain envelope is not yet handled at the point of
   calling (as it relies on the previous block).  out of sequence; lose count  no pcm to process if vorbis_synthesis_trackonly 
                                  was called on block  deal with initial packet state; we do this using the explicit
       pcm_returned==-1 flag otherwise we're sensitive to first block
       being short or long  track the frame number... This is for convenience, but also
     making sure our last packet doesn't end with added padding.  If
     the last packet is partial, the number of samples we'll have to
     return will be past the vb->granulepos.
     
     This is not foolproof!  It will be confused if we begin
     decoding at the last page after a seek or hole.  In that case,
     we don't have a starting point to judge where the last frame
     is.  For this reason, vorbisfile will always try to make sure
     it reads the last two marked pages in proper sequence  only set if we have a position to set to  is this a short page?  corner case; if this is both the first and last audio page,
           then spec says the end is cut, not beginning  trim the end  no preceeding granulepos; assume we started at zero (we'd
             have to in a short single-page stream)  granulepos could be -1 due to a seek, but that would result
             in a long coun`t, not short count  trim the beginning  partial last frame.  Strip the extra samples off  else {Shouldn't happen *unless* the bitstream is out of
               spec.  Either way, believe the bitstream }  else {Shouldn't happen *unless* the bitstream is out of
           spec.  Either way, believe the bitstream }  Update, cleanup  pcm==NULL indicates we just want the pending samples, no more 