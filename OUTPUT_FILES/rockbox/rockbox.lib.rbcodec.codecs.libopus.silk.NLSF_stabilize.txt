**********************************************************************
Copyright (c) 2006-2011, Skype Limited. All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
- Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
- Neither the name of Internet Society, IETF or IETF Trust, nor the
names of specific contributors, may be used to endorse or promote
products derived from this software without specific prior written
permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
********************************************************************** NLSF stabilizer:                                                                                                    - Moves NLSFs further apart if they are too close         - Moves NLSFs away from borders if they are too close     - High effort to achieve a modification with minimum          Euclidean distance to input vector                    - Output are sorted NLSF coefficients                                                                               Constant Definitions  NLSF stabilizer, for a single input data vector  I/O   Unstable/stabilized normalized LSF vector in Q15 [L]        I     Min distance vector, NDeltaMin_Q15[L] must be >= 1 [L+1]    I     Number of NLSF parameters in the input vector               This is necessary to ensure an output within range of a opus_int16 ************************ Find smallest distance ************************ First element  Middle elements  Last element ************************************************* Now check if the smallest distance non-negative ************************************************* Move away from lower limit  Move away from higher limit  Find the lower extreme for the location of the current center frequency  Find the upper extreme for the location of the current center frequency  Move apart, sorted by value, keeping the same center frequency  Safe and simple fall back method, which is less ideal than the above  Insertion sort (fast for already almost sorted arrays):    Best case:  O(n)   for an already sorted array             Worst case: O(n^2) for an inversely sorted array           First NLSF should be no less than NDeltaMin[0]  Keep delta_min distance between the NLSFs  Last NLSF should be no higher than 1 - NDeltaMin[L]  Keep NDeltaMin distance between the NLSFs **********************************************************************
Copyright (c) 2006-2011, Skype Limited. All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
- Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
- Neither the name of Internet Society, IETF or IETF Trust, nor the
names of specific contributors, may be used to endorse or promote
products derived from this software without specific prior written
permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
********************************************************************** NLSF stabilizer:                                                                                                    - Moves NLSFs further apart if they are too close         - Moves NLSFs away from borders if they are too close     - High effort to achieve a modification with minimum          Euclidean distance to input vector                    - Output are sorted NLSF coefficients                                                                               Constant Definitions  NLSF stabilizer, for a single input data vector  I/O   Unstable/stabilized normalized LSF vector in Q15 [L]        I     Min distance vector, NDeltaMin_Q15[L] must be >= 1 [L+1]    I     Number of NLSF parameters in the input vector               This is necessary to ensure an output within range of a opus_int16 ************************ Find smallest distance ************************ First element  Middle elements  Last element ************************************************* Now check if the smallest distance non-negative ************************************************* Move away from lower limit  Move away from higher limit  Find the lower extreme for the location of the current center frequency  Find the upper extreme for the location of the current center frequency  Move apart, sorted by value, keeping the same center frequency  Safe and simple fall back method, which is less ideal than the above  Insertion sort (fast for already almost sorted arrays):    Best case:  O(n)   for an already sorted array             Worst case: O(n^2) for an inversely sorted array           First NLSF should be no less than NDeltaMin[0]  Keep delta_min distance between the NLSFs  Last NLSF should be no higher than 1 - NDeltaMin[L]  Keep NDeltaMin distance between the NLSFs **********************************************************************
Copyright (c) 2006-2011, Skype Limited. All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
- Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
- Neither the name of Internet Society, IETF or IETF Trust, nor the
names of specific contributors, may be used to endorse or promote
products derived from this software without specific prior written
permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
********************************************************************** NLSF stabilizer:                                                                                                    - Moves NLSFs further apart if they are too close         - Moves NLSFs away from borders if they are too close     - High effort to achieve a modification with minimum          Euclidean distance to input vector                    - Output are sorted NLSF coefficients                                                                               Constant Definitions  NLSF stabilizer, for a single input data vector  I/O   Unstable/stabilized normalized LSF vector in Q15 [L]        I     Min distance vector, NDeltaMin_Q15[L] must be >= 1 [L+1]    I     Number of NLSF parameters in the input vector               This is necessary to ensure an output within range of a opus_int16 ************************ Find smallest distance ************************ First element  Middle elements  Last element ************************************************* Now check if the smallest distance non-negative ************************************************* Move away from lower limit  Move away from higher limit  Find the lower extreme for the location of the current center frequency  Find the upper extreme for the location of the current center frequency  Move apart, sorted by value, keeping the same center frequency  Safe and simple fall back method, which is less ideal than the above  Insertion sort (fast for already almost sorted arrays):    Best case:  O(n)   for an already sorted array             Worst case: O(n^2) for an inversely sorted array           First NLSF should be no less than NDeltaMin[0]  Keep delta_min distance between the NLSFs  Last NLSF should be no higher than 1 - NDeltaMin[L]  Keep NDeltaMin distance between the NLSFs 