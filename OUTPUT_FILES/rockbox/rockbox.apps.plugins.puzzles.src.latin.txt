 --------------------------------------------------------
 * Solver.
 
 * Function called when we are certain that a particular square has
 * a particular number in it. The y-coordinate passed in here is
 * transformed.
 
     * Rule out all other numbers in this square.
     
     * Rule out this number in all other positions in the row.
     
     * Rule out this number in all other positions in the column.
     
     * Enter the number in the result grid.
     
     * Cross out this number from the list of numbers left to place
     * in its row, its column and its block.
     
     * Count the number of set bits within this section of the
     * cube.
     
     * We are passed a o-by-o matrix of booleans. Our first job
     * is to winnow it by finding any definite placements - i.e.
     * any row with a solitary 1 - and discarding that row and the
     * column containing the 1.
     
     * Convert each of rowidx/colidx from a list of 0s and 1s to a
     * list of the indices of the 1s.
     
     * And create the smaller matrix.
     
     * Having done that, we now have a matrix in which every row
     * has at least two 1s in. Now we search to see if we can find
     * a rectangle of zeroes (in the set-theoretic sense of
     * `rectangle', i.e. a subset of rows crossed with a subset of
     * columns) whose width and height add up to n.
     
         * We have a candidate set. If its size is <=1 or >=n-1
         * then we move on immediately.
         
             * The number of rows we need is n-count. See if we can
             * find that many rows which each have a zero in all
             * the positions listed in `set'.
             
             * We expect never to be able to get _more_ than
             * n-count suitable rows: this would imply that (for
             * example) there are four numbers which between them
             * have at most three possible positions, and hence it
             * indicates a faulty deduction before this point or
             * even a bogus clue.
             
                 * We've got one! Now, for each row which _doesn't_
                 * satisfy the criterion, eliminate all its set
                 * bits in the positions _not_ listed in `set'.
                 * Return +1 (meaning progress has been made) if we
                 * successfully eliminated anything at all.
                 *
                 * This involves referring back through
                 * rowidx/colidx in order to work out which actual
                 * positions in the cube to meddle with.
                 
         * Binary increment: change the rightmost 0 to a 1, and
         * change all 1s to the right of it to 0s.
          done 
 * Look for forcing chains. A forcing chain is a path of
 * pairwise-exclusive squares (i.e. each pair of adjacent squares
 * in the path are in the same row, column or block) with the
 * following properties:
 *
 *  (a) Each square on the path has precisely two possible numbers.
 *
 *  (b) Each pair of squares which are adjacent on the path share
 *      at least one possible number in common.
 *
 *  (c) Each square in the middle of the path shares _both_ of its
 *      numbers with at least one of its neighbours (not the same
 *      one with both neighbours).
 *
 * These together imply that at least one of the possible number
 * choices at one end of the path forces _all_ the rest of the
 * numbers along the path. In order to make real use of this, we
 * need further properties:
 *
 *  (c) Ruling out some number N from the square at one end
 *      of the path forces the square at the other end to
 *      take number N.
 *
 *  (d) The two end squares are both in line with some third
 *      square.
 *
 *  (e) That third square currently has N as a possibility.
 *
 * If we can find all of that lot, we can deduce that at least one
 * of the two ends of the forcing chain has number N, and that
 * therefore the mutually adjacent third square does not.
 *
 * To find forcing chains, we're going to start a bfs at each
 * suitable square, once for each of its two possible numbers.
 
             * If this square doesn't have exactly two candidate
             * numbers, don't try it.
             *
             * In this loop we also sum the candidate numbers,
             * which is a nasty hack to allow us to quickly find
             * `the other one' (since we will shortly know there
             * are exactly two).
             
             * Now attempt a bfs for each candidate.
             
                     * Begin a bfs.
                     
                         * Find neighbours of yy,xx.
                         
                         * Try visiting each of those neighbours.
                         
                             * We need this square to not be
                             * already visited, and to include
                             * currn as a possible number.
                             
                             * Don't visit _this_ square a second
                             * time!
                             
                             * To continue with the bfs, we need
                             * this square to have exactly two
                             * possible numbers.
                             
                             * One other possibility is that this
                             * might be the square in which we can
                             * make a real deduction: if it's
                             * adjacent to x,y, and currn is equal
                             * to the original number we ruled out.
                              write straight back to the input 
     * Row-wise positional elimination.
     
     * Column-wise positional elimination.
     
     * Numeric elimination.
     
         * Row-wise set elimination.
         
         * Column-wise set elimination.
         
         * Row-vs-column set elimination on a single number
         * (much tricker for a human to do!)
         
 * Returns:
 * 0 for 'didn't do anything' implying it was already solved.
 * -1 for 'impossible' (no solution)
 * 1 for 'single solution'
 * >1 for 'multiple solutions' (you don't get to know how many, and
 *     the first such solution found will be set.
 *
 * and this function may well assert if given an impossible board.
 
                 * An unfilled square. Count the number of
                 * possible digits in it.
                 
                 * We should have found any impossibilities
                 * already, so this can safely be an assert.
                  we were complete already.  no solution found yet 
         * Attempt recursion.
          Make a list of the possible digits. 
         * And step along the list, recursing back into the
         * main solver at every stage.
          we recurse as deep as we can, so we should never find
             * find ourselves giving up on a puzzle without declaring it
             * impossible.  
             * If we have our first solution, copy it into the
             * grid we will return.
              do not change our return value  the recursion turned up exactly one solution 
             * As soon as we've found more than one solution,
             * give up immediately.
             
     * Now loop over the grid repeatedly trying all permitted modes
     * of reasoning. The loop terminates if we complete an
     * iteration without making any progress; we then return
     * failure or success depending on whether the grid is full or
     * not.
     
         * If we reach here, we have made no deductions in this
         * iteration, so the algorithm terminates.
         
     * Last chance: if we haven't fully solved the puzzle yet, try
     * recursing based on guesses for a particular square. We pick
     * one of the most constrained empty squares we can find, which
     * has the effect of pruning the search tree as much as
     * possible.
      if nsol == 0 then we were complete anyway
         * (and thus don't need to change diff) 
         * We're forbidden to use recursion, so we just see whether
         * our grid is fully solved, and return diff_unfinished
         * otherwise.
          for cube() to work  --------------------------------------------------------
 * Generation.
 
     * To efficiently generate a latin square in such a way that
     * all possible squares are possible outputs from the function,
     * we make use of a theorem which states that any r x n latin
     * rectangle, with r < n, can be extended into an (r+1) x n
     * latin rectangle. In other words, we can reliably generate a
     * latin square row by row, by at every stage writing down any
     * row at all which doesn't conflict with previous rows, and
     * the theorem guarantees that we will never have to backtrack.
     *
     * To find a viable row at each stage, we can make use of the
     * support functions in matching.c.
     
     * matching.c will take care of randomising the generation of each
     * row of the square, but in case this entire method of generation
     * introduces a really subtle top-to-bottom directional bias,
     * we'll also generate the rows themselves in random order.
     
     * Set up the infrastructure for the matching subroutine.
     
     * Now generate each row of the latin square.
     
         * Make adjacency lists for a bipartite graph joining each
         * column to all the numbers not yet placed in that column.
         
	 * Run the matching algorithm.
	  by the above theorem, this must have succeeded 
	 * And use the output to set up the new row of the latin
	 * square.
	 
     * Done. Free our internal workspaces...
     
     * ... and return our completed latin square.
      --------------------------------------------------------
 * Checking.
  returns true if sq is not a latin square.  Use a tree234 as a simple hash table, go through the square
     * adding elements as we go or incrementing their counts.  There should be precisely 'order' letters in the alphabet,
     * each occurring 'order' times (making the OxO tree)  --------------------------------------------------------
 * Testing (and printing).
  finished options  vim: set shiftwidth=4 tabstop=8:  --------------------------------------------------------
 * Solver.
 
 * Function called when we are certain that a particular square has
 * a particular number in it. The y-coordinate passed in here is
 * transformed.
 
     * Rule out all other numbers in this square.
     
     * Rule out this number in all other positions in the row.
     
     * Rule out this number in all other positions in the column.
     
     * Enter the number in the result grid.
     
     * Cross out this number from the list of numbers left to place
     * in its row, its column and its block.
     
     * Count the number of set bits within this section of the
     * cube.
     
     * We are passed a o-by-o matrix of booleans. Our first job
     * is to winnow it by finding any definite placements - i.e.
     * any row with a solitary 1 - and discarding that row and the
     * column containing the 1.
     
     * Convert each of rowidx/colidx from a list of 0s and 1s to a
     * list of the indices of the 1s.
     
     * And create the smaller matrix.
     
     * Having done that, we now have a matrix in which every row
     * has at least two 1s in. Now we search to see if we can find
     * a rectangle of zeroes (in the set-theoretic sense of
     * `rectangle', i.e. a subset of rows crossed with a subset of
     * columns) whose width and height add up to n.
     
         * We have a candidate set. If its size is <=1 or >=n-1
         * then we move on immediately.
         
             * The number of rows we need is n-count. See if we can
             * find that many rows which each have a zero in all
             * the positions listed in `set'.
             
             * We expect never to be able to get _more_ than
             * n-count suitable rows: this would imply that (for
             * example) there are four numbers which between them
             * have at most three possible positions, and hence it
             * indicates a faulty deduction before this point or
             * even a bogus clue.
             
                 * We've got one! Now, for each row which _doesn't_
                 * satisfy the criterion, eliminate all its set
                 * bits in the positions _not_ listed in `set'.
                 * Return +1 (meaning progress has been made) if we
                 * successfully eliminated anything at all.
                 *
                 * This involves referring back through
                 * rowidx/colidx in order to work out which actual
                 * positions in the cube to meddle with.
                 
         * Binary increment: change the rightmost 0 to a 1, and
         * change all 1s to the right of it to 0s.
          done 
 * Look for forcing chains. A forcing chain is a path of
 * pairwise-exclusive squares (i.e. each pair of adjacent squares
 * in the path are in the same row, column or block) with the
 * following properties:
 *
 *  (a) Each square on the path has precisely two possible numbers.
 *
 *  (b) Each pair of squares which are adjacent on the path share
 *      at least one possible number in common.
 *
 *  (c) Each square in the middle of the path shares _both_ of its
 *      numbers with at least one of its neighbours (not the same
 *      one with both neighbours).
 *
 * These together imply that at least one of the possible number
 * choices at one end of the path forces _all_ the rest of the
 * numbers along the path. In order to make real use of this, we
 * need further properties:
 *
 *  (c) Ruling out some number N from the square at one end
 *      of the path forces the square at the other end to
 *      take number N.
 *
 *  (d) The two end squares are both in line with some third
 *      square.
 *
 *  (e) That third square currently has N as a possibility.
 *
 * If we can find all of that lot, we can deduce that at least one
 * of the two ends of the forcing chain has number N, and that
 * therefore the mutually adjacent third square does not.
 *
 * To find forcing chains, we're going to start a bfs at each
 * suitable square, once for each of its two possible numbers.
 
             * If this square doesn't have exactly two candidate
             * numbers, don't try it.
             *
             * In this loop we also sum the candidate numbers,
             * which is a nasty hack to allow us to quickly find
             * `the other one' (since we will shortly know there
             * are exactly two).
             
             * Now attempt a bfs for each candidate.
             
                     * Begin a bfs.
                     
                         * Find neighbours of yy,xx.
                         
                         * Try visiting each of those neighbours.
                         
                             * We need this square to not be
                             * already visited, and to include
                             * currn as a possible number.
                             
                             * Don't visit _this_ square a second
                             * time!
                             
                             * To continue with the bfs, we need
                             * this square to have exactly two
                             * possible numbers.
                             
                             * One other possibility is that this
                             * might be the square in which we can
                             * make a real deduction: if it's
                             * adjacent to x,y, and currn is equal
                             * to the original number we ruled out.
                              write straight back to the input 
     * Row-wise positional elimination.
     
     * Column-wise positional elimination.
     
     * Numeric elimination.
     
         * Row-wise set elimination.
         
         * Column-wise set elimination.
         
         * Row-vs-column set elimination on a single number
         * (much tricker for a human to do!)
         
 * Returns:
 * 0 for 'didn't do anything' implying it was already solved.
 * -1 for 'impossible' (no solution)
 * 1 for 'single solution'
 * >1 for 'multiple solutions' (you don't get to know how many, and
 *     the first such solution found will be set.
 *
 * and this function may well assert if given an impossible board.
 
                 * An unfilled square. Count the number of
                 * possible digits in it.
                 
                 * We should have found any impossibilities
                 * already, so this can safely be an assert.
                  we were complete already.  no solution found yet 
         * Attempt recursion.
          Make a list of the possible digits. 
         * And step along the list, recursing back into the
         * main solver at every stage.
          we recurse as deep as we can, so we should never find
             * find ourselves giving up on a puzzle without declaring it
             * impossible.  
             * If we have our first solution, copy it into the
             * grid we will return.
              do not change our return value  the recursion turned up exactly one solution 
             * As soon as we've found more than one solution,
             * give up immediately.
             
     * Now loop over the grid repeatedly trying all permitted modes
     * of reasoning. The loop terminates if we complete an
     * iteration without making any progress; we then return
     * failure or success depending on whether the grid is full or
     * not.
     
         * If we reach here, we have made no deductions in this
         * iteration, so the algorithm terminates.
         
     * Last chance: if we haven't fully solved the puzzle yet, try
     * recursing based on guesses for a particular square. We pick
     * one of the most constrained empty squares we can find, which
     * has the effect of pruning the search tree as much as
     * possible.
      if nsol == 0 then we were complete anyway
         * (and thus don't need to change diff) 
         * We're forbidden to use recursion, so we just see whether
         * our grid is fully solved, and return diff_unfinished
         * otherwise.
          for cube() to work  --------------------------------------------------------
 * Generation.
 
     * To efficiently generate a latin square in such a way that
     * all possible squares are possible outputs from the function,
     * we make use of a theorem which states that any r x n latin
     * rectangle, with r < n, can be extended into an (r+1) x n
     * latin rectangle. In other words, we can reliably generate a
     * latin square row by row, by at every stage writing down any
     * row at all which doesn't conflict with previous rows, and
     * the theorem guarantees that we will never have to backtrack.
     *
     * To find a viable row at each stage, we can make use of the
     * support functions in matching.c.
     
     * matching.c will take care of randomising the generation of each
     * row of the square, but in case this entire method of generation
     * introduces a really subtle top-to-bottom directional bias,
     * we'll also generate the rows themselves in random order.
     
     * Set up the infrastructure for the matching subroutine.
     
     * Now generate each row of the latin square.
     
         * Make adjacency lists for a bipartite graph joining each
         * column to all the numbers not yet placed in that column.
         
	 * Run the matching algorithm.
	  by the above theorem, this must have succeeded 
	 * And use the output to set up the new row of the latin
	 * square.
	 
     * Done. Free our internal workspaces...
     
     * ... and return our completed latin square.
      --------------------------------------------------------
 * Checking.
  returns true if sq is not a latin square.  Use a tree234 as a simple hash table, go through the square
     * adding elements as we go or incrementing their counts.  There should be precisely 'order' letters in the alphabet,
     * each occurring 'order' times (making the OxO tree)  --------------------------------------------------------
 * Testing (and printing).
  finished options  vim: set shiftwidth=4 tabstop=8:  --------------------------------------------------------
 * Solver.
 
 * Function called when we are certain that a particular square has
 * a particular number in it. The y-coordinate passed in here is
 * transformed.
 
     * Rule out all other numbers in this square.
     
     * Rule out this number in all other positions in the row.
     
     * Rule out this number in all other positions in the column.
     
     * Enter the number in the result grid.
     
     * Cross out this number from the list of numbers left to place
     * in its row, its column and its block.
     
     * Count the number of set bits within this section of the
     * cube.
     
     * We are passed a o-by-o matrix of booleans. Our first job
     * is to winnow it by finding any definite placements - i.e.
     * any row with a solitary 1 - and discarding that row and the
     * column containing the 1.
     
     * Convert each of rowidx/colidx from a list of 0s and 1s to a
     * list of the indices of the 1s.
     
     * And create the smaller matrix.
     
     * Having done that, we now have a matrix in which every row
     * has at least two 1s in. Now we search to see if we can find
     * a rectangle of zeroes (in the set-theoretic sense of
     * `rectangle', i.e. a subset of rows crossed with a subset of
     * columns) whose width and height add up to n.
     
         * We have a candidate set. If its size is <=1 or >=n-1
         * then we move on immediately.
         
             * The number of rows we need is n-count. See if we can
             * find that many rows which each have a zero in all
             * the positions listed in `set'.
             
             * We expect never to be able to get _more_ than
             * n-count suitable rows: this would imply that (for
             * example) there are four numbers which between them
             * have at most three possible positions, and hence it
             * indicates a faulty deduction before this point or
             * even a bogus clue.
             
                 * We've got one! Now, for each row which _doesn't_
                 * satisfy the criterion, eliminate all its set
                 * bits in the positions _not_ listed in `set'.
                 * Return +1 (meaning progress has been made) if we
                 * successfully eliminated anything at all.
                 *
                 * This involves referring back through
                 * rowidx/colidx in order to work out which actual
                 * positions in the cube to meddle with.
                 
         * Binary increment: change the rightmost 0 to a 1, and
         * change all 1s to the right of it to 0s.
          done 
 * Look for forcing chains. A forcing chain is a path of
 * pairwise-exclusive squares (i.e. each pair of adjacent squares
 * in the path are in the same row, column or block) with the
 * following properties:
 *
 *  (a) Each square on the path has precisely two possible numbers.
 *
 *  (b) Each pair of squares which are adjacent on the path share
 *      at least one possible number in common.
 *
 *  (c) Each square in the middle of the path shares _both_ of its
 *      numbers with at least one of its neighbours (not the same
 *      one with both neighbours).
 *
 * These together imply that at least one of the possible number
 * choices at one end of the path forces _all_ the rest of the
 * numbers along the path. In order to make real use of this, we
 * need further properties:
 *
 *  (c) Ruling out some number N from the square at one end
 *      of the path forces the square at the other end to
 *      take number N.
 *
 *  (d) The two end squares are both in line with some third
 *      square.
 *
 *  (e) That third square currently has N as a possibility.
 *
 * If we can find all of that lot, we can deduce that at least one
 * of the two ends of the forcing chain has number N, and that
 * therefore the mutually adjacent third square does not.
 *
 * To find forcing chains, we're going to start a bfs at each
 * suitable square, once for each of its two possible numbers.
 
             * If this square doesn't have exactly two candidate
             * numbers, don't try it.
             *
             * In this loop we also sum the candidate numbers,
             * which is a nasty hack to allow us to quickly find
             * `the other one' (since we will shortly know there
             * are exactly two).
             
             * Now attempt a bfs for each candidate.
             
                     * Begin a bfs.
                     
                         * Find neighbours of yy,xx.
                         
                         * Try visiting each of those neighbours.
                         
                             * We need this square to not be
                             * already visited, and to include
                             * currn as a possible number.
                             
                             * Don't visit _this_ square a second
                             * time!
                             
                             * To continue with the bfs, we need
                             * this square to have exactly two
                             * possible numbers.
                             
                             * One other possibility is that this
                             * might be the square in which we can
                             * make a real deduction: if it's
                             * adjacent to x,y, and currn is equal
                             * to the original number we ruled out.
                              write straight back to the input 
     * Row-wise positional elimination.
     
     * Column-wise positional elimination.
     
     * Numeric elimination.
     
         * Row-wise set elimination.
         
         * Column-wise set elimination.
         
         * Row-vs-column set elimination on a single number
         * (much tricker for a human to do!)
         
 * Returns:
 * 0 for 'didn't do anything' implying it was already solved.
 * -1 for 'impossible' (no solution)
 * 1 for 'single solution'
 * >1 for 'multiple solutions' (you don't get to know how many, and
 *     the first such solution found will be set.
 *
 * and this function may well assert if given an impossible board.
 
                 * An unfilled square. Count the number of
                 * possible digits in it.
                 
                 * We should have found any impossibilities
                 * already, so this can safely be an assert.
                  we were complete already.  no solution found yet 
         * Attempt recursion.
          Make a list of the possible digits. 
         * And step along the list, recursing back into the
         * main solver at every stage.
          we recurse as deep as we can, so we should never find
             * find ourselves giving up on a puzzle without declaring it
             * impossible.  
             * If we have our first solution, copy it into the
             * grid we will return.
              do not change our return value  the recursion turned up exactly one solution 
             * As soon as we've found more than one solution,
             * give up immediately.
             
     * Now loop over the grid repeatedly trying all permitted modes
     * of reasoning. The loop terminates if we complete an
     * iteration without making any progress; we then return
     * failure or success depending on whether the grid is full or
     * not.
     
         * If we reach here, we have made no deductions in this
         * iteration, so the algorithm terminates.
         
     * Last chance: if we haven't fully solved the puzzle yet, try
     * recursing based on guesses for a particular square. We pick
     * one of the most constrained empty squares we can find, which
     * has the effect of pruning the search tree as much as
     * possible.
      if nsol == 0 then we were complete anyway
         * (and thus don't need to change diff) 
         * We're forbidden to use recursion, so we just see whether
         * our grid is fully solved, and return diff_unfinished
         * otherwise.
          for cube() to work  --------------------------------------------------------
 * Generation.
 
     * To efficiently generate a latin square in such a way that
     * all possible squares are possible outputs from the function,
     * we make use of a theorem which states that any r x n latin
     * rectangle, with r < n, can be extended into an (r+1) x n
     * latin rectangle. In other words, we can reliably generate a
     * latin square row by row, by at every stage writing down any
     * row at all which doesn't conflict with previous rows, and
     * the theorem guarantees that we will never have to backtrack.
     *
     * To find a viable row at each stage, we can make use of the
     * support functions in matching.c.
     
     * matching.c will take care of randomising the generation of each
     * row of the square, but in case this entire method of generation
     * introduces a really subtle top-to-bottom directional bias,
     * we'll also generate the rows themselves in random order.
     
     * Set up the infrastructure for the matching subroutine.
     
     * Now generate each row of the latin square.
     
         * Make adjacency lists for a bipartite graph joining each
         * column to all the numbers not yet placed in that column.
         
	 * Run the matching algorithm.
	  by the above theorem, this must have succeeded 
	 * And use the output to set up the new row of the latin
	 * square.
	 
     * Done. Free our internal workspaces...
     
     * ... and return our completed latin square.
      --------------------------------------------------------
 * Checking.
  returns true if sq is not a latin square.  Use a tree234 as a simple hash table, go through the square
     * adding elements as we go or incrementing their counts.  There should be precisely 'order' letters in the alphabet,
     * each occurring 'order' times (making the OxO tree)  --------------------------------------------------------
 * Testing (and printing).
  finished options  vim: set shiftwidth=4 tabstop=8: 