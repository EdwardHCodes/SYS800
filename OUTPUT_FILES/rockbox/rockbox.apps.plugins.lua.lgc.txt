
** $Id: lgc.c,v 2.38.1.2 2011/03/18 18:05:38 roberto Exp $
** Garbage Collector
** See Copyright Notice in lua.h
 dead key; remove it  udata are never gray  closed?  open upvalues are never black  may be marked, if left from previous GC  move `dead' udata that need finalization to list `tmudata'  don't bother with them  don't need finalization  must call its gc method  link `curr' at the end of `tmudata' list  list is empty?  creates a circular list  is there a weak mode?  is really weak?  clear bits  must be cleared after GC, ...  ... so put in the appropriate list  remove empty entries 
** All marks are conditional because a GC may happen while the
** prototype is still being created
 mark literals  mark upvalue names  mark nested protos  mark local-variable names  mark its upvalues  mark its upvalues  number of `ci' in use  part of stack in use  handling overflow?  do not touch the stacks  still big enough...  still big enough...  no stack to traverse  if stack size is fixed, can't resize it. 
** traverse one gray object, turning it to black.
** Returns `quantity' traversed.
 table is weak?  keep it gray 
** The next function tells whether a key or value can be cleared from
** a weak table. Non-collectable objects are never removed from weak
** tables. Strings behave as `values', so are never removed too. for
** other objects: if really collected, cannot keep them; for userdata
** being finalized, keep them in keys, but not in values
 strings are `values', so are never weak 
** clear collected entries from weaktables
 value was collected?  remove value  non-empty entry?  remove value ...  remove entry from table  sweep open upvalues of each thread  not dead?  make it white (for next cycle)  must erase `curr'  check size of string hash  table is too big  it is not safe to re-size the buffer if it is in use.  check size of buffer  buffer too big?  get first element  remove udata from `tmudata'  last element?  return it to `root' list  stop debug hooks during GC tag method  avoid GC steps  restore hooks  restore threshold 
** Call all GC tag methods
 mask to collect all elements  free all string lists  mark root set  make global table be traversed before main stack  total size of userdata to be finalized  remark occasional upvalues of (maybe) dead threads  traverse objects cautch by write barrier and by 'remarkupvals'  remark weak tables  mark running thread  mark basic metatables (again)  remark gray again  separate userdata to be finalized  mark `preserved' userdata  remark, to propagate `preserveness'  remove collected objects from weak tables  flip current white  first estimate  nothing more to sweep?  end sweep-string phase lua_checkmemory(L); start a new collection  no more `gray' objects  finish mark phase  nothing more to sweep?  end sweep phase  end collection  no limit  - lim/g->gcstepmul; reset sweep marks to sweep all elements (returning them to white)  reset other collector lists  finish any pending sweep phase  must keep invariant?  restore invariant  don't mind  mark as white just to avoid other barriers  make table gray (again)  mark new objects as gray during propagate state.  link upvalue into `rootgc' list  closed upvalues need barrier  sweep phase: sweep it (turning it into white) 
** $Id: lgc.c,v 2.38.1.2 2011/03/18 18:05:38 roberto Exp $
** Garbage Collector
** See Copyright Notice in lua.h
 dead key; remove it  udata are never gray  closed?  open upvalues are never black  may be marked, if left from previous GC  move `dead' udata that need finalization to list `tmudata'  don't bother with them  don't need finalization  must call its gc method  link `curr' at the end of `tmudata' list  list is empty?  creates a circular list  is there a weak mode?  is really weak?  clear bits  must be cleared after GC, ...  ... so put in the appropriate list  remove empty entries 
** All marks are conditional because a GC may happen while the
** prototype is still being created
 mark literals  mark upvalue names  mark nested protos  mark local-variable names  mark its upvalues  mark its upvalues  number of `ci' in use  part of stack in use  handling overflow?  do not touch the stacks  still big enough...  still big enough...  no stack to traverse  if stack size is fixed, can't resize it. 
** traverse one gray object, turning it to black.
** Returns `quantity' traversed.
 table is weak?  keep it gray 
** The next function tells whether a key or value can be cleared from
** a weak table. Non-collectable objects are never removed from weak
** tables. Strings behave as `values', so are never removed too. for
** other objects: if really collected, cannot keep them; for userdata
** being finalized, keep them in keys, but not in values
 strings are `values', so are never weak 
** clear collected entries from weaktables
 value was collected?  remove value  non-empty entry?  remove value ...  remove entry from table  sweep open upvalues of each thread  not dead?  make it white (for next cycle)  must erase `curr'  check size of string hash  table is too big  it is not safe to re-size the buffer if it is in use.  check size of buffer  buffer too big?  get first element  remove udata from `tmudata'  last element?  return it to `root' list  stop debug hooks during GC tag method  avoid GC steps  restore hooks  restore threshold 
** Call all GC tag methods
 mask to collect all elements  free all string lists  mark root set  make global table be traversed before main stack  total size of userdata to be finalized  remark occasional upvalues of (maybe) dead threads  traverse objects cautch by write barrier and by 'remarkupvals'  remark weak tables  mark running thread  mark basic metatables (again)  remark gray again  separate userdata to be finalized  mark `preserved' userdata  remark, to propagate `preserveness'  remove collected objects from weak tables  flip current white  first estimate  nothing more to sweep?  end sweep-string phase lua_checkmemory(L); start a new collection  no more `gray' objects  finish mark phase  nothing more to sweep?  end sweep phase  end collection  no limit  - lim/g->gcstepmul; reset sweep marks to sweep all elements (returning them to white)  reset other collector lists  finish any pending sweep phase  must keep invariant?  restore invariant  don't mind  mark as white just to avoid other barriers  make table gray (again)  mark new objects as gray during propagate state.  link upvalue into `rootgc' list  closed upvalues need barrier  sweep phase: sweep it (turning it into white) 
** $Id: lgc.c,v 2.38.1.2 2011/03/18 18:05:38 roberto Exp $
** Garbage Collector
** See Copyright Notice in lua.h
 dead key; remove it  udata are never gray  closed?  open upvalues are never black  may be marked, if left from previous GC  move `dead' udata that need finalization to list `tmudata'  don't bother with them  don't need finalization  must call its gc method  link `curr' at the end of `tmudata' list  list is empty?  creates a circular list  is there a weak mode?  is really weak?  clear bits  must be cleared after GC, ...  ... so put in the appropriate list  remove empty entries 
** All marks are conditional because a GC may happen while the
** prototype is still being created
 mark literals  mark upvalue names  mark nested protos  mark local-variable names  mark its upvalues  mark its upvalues  number of `ci' in use  part of stack in use  handling overflow?  do not touch the stacks  still big enough...  still big enough...  no stack to traverse  if stack size is fixed, can't resize it. 
** traverse one gray object, turning it to black.
** Returns `quantity' traversed.
 table is weak?  keep it gray 
** The next function tells whether a key or value can be cleared from
** a weak table. Non-collectable objects are never removed from weak
** tables. Strings behave as `values', so are never removed too. for
** other objects: if really collected, cannot keep them; for userdata
** being finalized, keep them in keys, but not in values
 strings are `values', so are never weak 
** clear collected entries from weaktables
 value was collected?  remove value  non-empty entry?  remove value ...  remove entry from table  sweep open upvalues of each thread  not dead?  make it white (for next cycle)  must erase `curr'  check size of string hash  table is too big  it is not safe to re-size the buffer if it is in use.  check size of buffer  buffer too big?  get first element  remove udata from `tmudata'  last element?  return it to `root' list  stop debug hooks during GC tag method  avoid GC steps  restore hooks  restore threshold 
** Call all GC tag methods
 mask to collect all elements  free all string lists  mark root set  make global table be traversed before main stack  total size of userdata to be finalized  remark occasional upvalues of (maybe) dead threads  traverse objects cautch by write barrier and by 'remarkupvals'  remark weak tables  mark running thread  mark basic metatables (again)  remark gray again  separate userdata to be finalized  mark `preserved' userdata  remark, to propagate `preserveness'  remove collected objects from weak tables  flip current white  first estimate  nothing more to sweep?  end sweep-string phase lua_checkmemory(L); start a new collection  no more `gray' objects  finish mark phase  nothing more to sweep?  end sweep phase  end collection  no limit  - lim/g->gcstepmul; reset sweep marks to sweep all elements (returning them to white)  reset other collector lists  finish any pending sweep phase  must keep invariant?  restore invariant  don't mind  mark as white just to avoid other barriers  make table gray (again)  mark new objects as gray during propagate state.  link upvalue into `rootgc' list  closed upvalues need barrier  sweep phase: sweep it (turning it into white) 