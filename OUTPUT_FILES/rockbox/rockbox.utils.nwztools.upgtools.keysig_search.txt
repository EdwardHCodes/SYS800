**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2012 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** Generic search code  The generator sends chunks to the workers. The exact type of chunks depends
 * on the method used.  mutex for the whole structure  condition to signal available or stop  condition to signal request or stop  if true, stop searcg  pointer to chunk (NULL if not available)  chunk size  init producer  consumer get: called by worker to get a new chunk, return NULL to stop  loop until stop or new chunk  stop if requested  request a new chunk  wait for availability  request a new chunk, so that if other consumers are waiting, the producer
     * will also wake them up  stop: called by worker to stop the search  set stop  wake up everyone  producer yield: called by generator to give a new chunk, return true to stop  wait until stop or request  stop if requested  if the chunk is empty, fill it  otherwise wait for request  signal availability  if we are not already stopping and there is a chunk still waiting to
     * be consumed, wait until next request  set stop  wake up everyone  Key search methods
 *
 * This code tries to find the key and signature of a device using an upgrade
 * file. It more or less relies on brute force and makes the following assumptions.
 * It assumes the key and the signature are hexadecimal strings (it appears to be
 * true thus far). The code lists all possible keys and decrypts the first
 * 8 bytes of the file. If the decrypted signature happens to be an hex string,
 * the code reports the key and signature as potentially valid. Note that some
 * key/sig pairs may not be valid but since the likelyhood of decrypting a
 * random 8-byte sequence using an hex string key and to produce an hex string
 * is very small, there should be almost no false positive.
 *
 * Since the key is supposedly random, the code starts by looking at "balanced"
 * keys: keys with slightly more digits (0-9) than letters (a-f) and then moving
 * towards very unbalanced strings (only digits or only letters).
  result  result  make sure structure size is a multiple of 8 the signature looks correct, so decrypt the header futher to be sure  we expect the number of files to be small and the padding to be 0 * Hex search  partially pre-filled key  allow upper case in letters  we list the first 4 pos in generator, and remaining 4 in workers printf("yield(%.8s,%d,%d,%d)\n", ch->key, ch->pos, ch->rem_digits, ch->rem_letters); filled the key ?  list next possibilities
     *
     * NOTE (42) Since the cipher is DES, the key is actually 56-bit: the least
     * significant bit of each byte is an (unused) parity bit. We thus only
     * generate keys where the least significant bit is 0.  skip significant bit at positions 1, 3, 5 and 7 NOTE (42)  NOTE (42)  sorted by probability: 5 digits, 3 letters: 0.281632 6 digits, 2 letters: 0.234693 4 digits, 4 letters: 0.211224 7 digits, 1 letters: 0.111759 3 digits, 5 letters: 0.101388 2 digits, 6 letters: 0.030416 8 digits, 0 letters: 0.023283 1 digits, 7 letters: 0.005214 0 digits, 8 letters: 0.000391 sorted by probability: TODO sort 5 digits, 3 letters: 0.281632 6 digits, 2 letters: 0.234693 4 digits, 4 letters: 0.211224 7 digits, 1 letters: 0.111759 3 digits, 5 letters: 0.101388 2 digits, 6 letters: 0.030416 8 digits, 0 letters: 0.023283 1 digits, 7 letters: 0.005214 0 digits, 8 letters: 0.000391* Alphanumeric search  partially pre-filled key  we list the first 5 pos in generator, and remaining 3 in workers printf("yield(%.8s,%d)\n", ch->key, ch->pos); filled the key ?  list next possibilities
     *
     * NOTE (42) Since the cipher is DES, the key is actually 56-bit: the least
     * significant bit of each byte is an (unused) parity bit. We thus only
     * generate keys where the least significant bit is 0.  NOTE (42)  skip significant bit at positions 1, 3, 5 and 7 NOTE (42)  init producer  init search  get methods  create workers  wait for all threads **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2012 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** Generic search code  The generator sends chunks to the workers. The exact type of chunks depends
 * on the method used.  mutex for the whole structure  condition to signal available or stop  condition to signal request or stop  if true, stop searcg  pointer to chunk (NULL if not available)  chunk size  init producer  consumer get: called by worker to get a new chunk, return NULL to stop  loop until stop or new chunk  stop if requested  request a new chunk  wait for availability  request a new chunk, so that if other consumers are waiting, the producer
     * will also wake them up  stop: called by worker to stop the search  set stop  wake up everyone  producer yield: called by generator to give a new chunk, return true to stop  wait until stop or request  stop if requested  if the chunk is empty, fill it  otherwise wait for request  signal availability  if we are not already stopping and there is a chunk still waiting to
     * be consumed, wait until next request  set stop  wake up everyone  Key search methods
 *
 * This code tries to find the key and signature of a device using an upgrade
 * file. It more or less relies on brute force and makes the following assumptions.
 * It assumes the key and the signature are hexadecimal strings (it appears to be
 * true thus far). The code lists all possible keys and decrypts the first
 * 8 bytes of the file. If the decrypted signature happens to be an hex string,
 * the code reports the key and signature as potentially valid. Note that some
 * key/sig pairs may not be valid but since the likelyhood of decrypting a
 * random 8-byte sequence using an hex string key and to produce an hex string
 * is very small, there should be almost no false positive.
 *
 * Since the key is supposedly random, the code starts by looking at "balanced"
 * keys: keys with slightly more digits (0-9) than letters (a-f) and then moving
 * towards very unbalanced strings (only digits or only letters).
  result  result  make sure structure size is a multiple of 8 the signature looks correct, so decrypt the header futher to be sure  we expect the number of files to be small and the padding to be 0 * Hex search  partially pre-filled key  allow upper case in letters  we list the first 4 pos in generator, and remaining 4 in workers printf("yield(%.8s,%d,%d,%d)\n", ch->key, ch->pos, ch->rem_digits, ch->rem_letters); filled the key ?  list next possibilities
     *
     * NOTE (42) Since the cipher is DES, the key is actually 56-bit: the least
     * significant bit of each byte is an (unused) parity bit. We thus only
     * generate keys where the least significant bit is 0.  skip significant bit at positions 1, 3, 5 and 7 NOTE (42)  NOTE (42)  sorted by probability: 5 digits, 3 letters: 0.281632 6 digits, 2 letters: 0.234693 4 digits, 4 letters: 0.211224 7 digits, 1 letters: 0.111759 3 digits, 5 letters: 0.101388 2 digits, 6 letters: 0.030416 8 digits, 0 letters: 0.023283 1 digits, 7 letters: 0.005214 0 digits, 8 letters: 0.000391 sorted by probability: TODO sort 5 digits, 3 letters: 0.281632 6 digits, 2 letters: 0.234693 4 digits, 4 letters: 0.211224 7 digits, 1 letters: 0.111759 3 digits, 5 letters: 0.101388 2 digits, 6 letters: 0.030416 8 digits, 0 letters: 0.023283 1 digits, 7 letters: 0.005214 0 digits, 8 letters: 0.000391* Alphanumeric search  partially pre-filled key  we list the first 5 pos in generator, and remaining 3 in workers printf("yield(%.8s,%d)\n", ch->key, ch->pos); filled the key ?  list next possibilities
     *
     * NOTE (42) Since the cipher is DES, the key is actually 56-bit: the least
     * significant bit of each byte is an (unused) parity bit. We thus only
     * generate keys where the least significant bit is 0.  NOTE (42)  skip significant bit at positions 1, 3, 5 and 7 NOTE (42)  init producer  init search  get methods  create workers  wait for all threads **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2012 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** Generic search code  The generator sends chunks to the workers. The exact type of chunks depends
 * on the method used.  mutex for the whole structure  condition to signal available or stop  condition to signal request or stop  if true, stop searcg  pointer to chunk (NULL if not available)  chunk size  init producer  consumer get: called by worker to get a new chunk, return NULL to stop  loop until stop or new chunk  stop if requested  request a new chunk  wait for availability  request a new chunk, so that if other consumers are waiting, the producer
     * will also wake them up  stop: called by worker to stop the search  set stop  wake up everyone  producer yield: called by generator to give a new chunk, return true to stop  wait until stop or request  stop if requested  if the chunk is empty, fill it  otherwise wait for request  signal availability  if we are not already stopping and there is a chunk still waiting to
     * be consumed, wait until next request  set stop  wake up everyone  Key search methods
 *
 * This code tries to find the key and signature of a device using an upgrade
 * file. It more or less relies on brute force and makes the following assumptions.
 * It assumes the key and the signature are hexadecimal strings (it appears to be
 * true thus far). The code lists all possible keys and decrypts the first
 * 8 bytes of the file. If the decrypted signature happens to be an hex string,
 * the code reports the key and signature as potentially valid. Note that some
 * key/sig pairs may not be valid but since the likelyhood of decrypting a
 * random 8-byte sequence using an hex string key and to produce an hex string
 * is very small, there should be almost no false positive.
 *
 * Since the key is supposedly random, the code starts by looking at "balanced"
 * keys: keys with slightly more digits (0-9) than letters (a-f) and then moving
 * towards very unbalanced strings (only digits or only letters).
  result  result  make sure structure size is a multiple of 8 the signature looks correct, so decrypt the header futher to be sure  we expect the number of files to be small and the padding to be 0 * Hex search  partially pre-filled key  allow upper case in letters  we list the first 4 pos in generator, and remaining 4 in workers printf("yield(%.8s,%d,%d,%d)\n", ch->key, ch->pos, ch->rem_digits, ch->rem_letters); filled the key ?  list next possibilities
     *
     * NOTE (42) Since the cipher is DES, the key is actually 56-bit: the least
     * significant bit of each byte is an (unused) parity bit. We thus only
     * generate keys where the least significant bit is 0.  skip significant bit at positions 1, 3, 5 and 7 NOTE (42)  NOTE (42)  sorted by probability: 5 digits, 3 letters: 0.281632 6 digits, 2 letters: 0.234693 4 digits, 4 letters: 0.211224 7 digits, 1 letters: 0.111759 3 digits, 5 letters: 0.101388 2 digits, 6 letters: 0.030416 8 digits, 0 letters: 0.023283 1 digits, 7 letters: 0.005214 0 digits, 8 letters: 0.000391 sorted by probability: TODO sort 5 digits, 3 letters: 0.281632 6 digits, 2 letters: 0.234693 4 digits, 4 letters: 0.211224 7 digits, 1 letters: 0.111759 3 digits, 5 letters: 0.101388 2 digits, 6 letters: 0.030416 8 digits, 0 letters: 0.023283 1 digits, 7 letters: 0.005214 0 digits, 8 letters: 0.000391* Alphanumeric search  partially pre-filled key  we list the first 5 pos in generator, and remaining 3 in workers printf("yield(%.8s,%d)\n", ch->key, ch->pos); filled the key ?  list next possibilities
     *
     * NOTE (42) Since the cipher is DES, the key is actually 56-bit: the least
     * significant bit of each byte is an (unused) parity bit. We thus only
     * generate keys where the least significant bit is 0.  NOTE (42)  skip significant bit at positions 1, 3, 5 and 7 NOTE (42)  init producer  init search  get methods  create workers  wait for all threads 