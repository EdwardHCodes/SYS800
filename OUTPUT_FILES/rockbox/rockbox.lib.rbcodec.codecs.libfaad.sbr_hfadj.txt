
** FAAD2 - Freeware Advanced Audio (AAC) Decoder including SBR decoding
** Copyright (C) 2003-2004 M. Bakker, Ahead Software AG, http://www.nero.com
**  
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
** 
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
** 
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software 
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** Any non-GPL usage of this software or parts of this software is strictly
** forbidden.
**
** Commercial non-GPL licensing of this software is possible.
** For more info contact Ahead Software through Mpeg4AAClicense@nero.com.
**
** $Id$
* High Frequency adjustment  static function declarations  aliasing degree  in case of using f_table_high we just have 1 to 1 mapping
         * from bs_add_harmonic[l][k]
          in case of f_table_low we check if any of the HI_RES bands
         * within this LO_RES band has bs_add_harmonic[l][k] turned on
         * (note that borders in the LO_RES table are also present in
         * the HI_RES table)
          find first HI_RES band in current LO_RES band  find first HI_RES band in next LO_RES band  check all HI_RES bands in current LO_RES band for sinusoid  smallest number available in fixed point  log2 values of [0..63]  check for coupled energy/noise data  E[1] should always be even so shifting is OK  negative  positive  negative  positive  tmp / pan in log2  check for coupled energy/noise data  negative  positive  negative  positive  tmp / pan in log2  check for coupled energy/noise data  log2 values of limiter gains  bounds of current limiter bands  calculate the accumulated E_orig and E_curr over the limiter band  calculate the maximum gain  ratio of the energy of the original signal and the energy
             * of the HF generated signal
              check if m is on a noise band border  step to next noise band  check if m is on a resolution band border  accumulate a whole range of equal Q_Ms  step to next resolution band  if we move to a new resolution band, we should check if we are
                     * going to add a sinusoid in this band
                      check if m is on a HI_RES band border  step to next HI_RES band  find S_index_mapped
                 * S_index_mapped can only be 1 for the m in the middle of the
                 * current HI_RES band
                  find the middle subband of the HI_RES frequency band  find bitstream parameters  Q_M only depends on E_orig and Q_div2:
                 * since N_Q <= N_Low <= N_High we only need to recalculate Q_M on
                 * a change of current res band (HI or LO)
                  S_M only depends on E_orig, Q_div and S_index_mapped:
                 * S_index_mapped can only be non-zero once per HI_RES band
                  -inf  accumulate sinusoid part of the total energy  calculate gain  ratio of the energy of the original signal and the energy
                 * of the HF generated signal
                  E_curr here is officially E_curr+1 so the log2() of that can never be < 0  scaled by -10  G = G * 1/(1+Q)  G = G * Q/(1+Q)  limit the additional noise energy level  and apply the limiter  G > G_max  accumulate limited Q_M  accumulate the total energy  E_curr changes for every m so we do need to accumulate every m  accumulate last range of equal Q_Ms  calculate the final gain  G_boost: [0..2.51188643] + EPS log2(1.584893192 ^ 2)  apply compensation to gain, noise floor sf's and sinusoid levels  sqrt() will be done after the aliasing reduction to save a
                 * few multiplies
                 #define LOG2_TEST log2 values of [0..63]  check for coupled energy/noise data  negative  positive  negative  positive  tmp / pan in log2  check for coupled energy/noise data  negative  positive  negative  positive  tmp / pan in log2  check for coupled energy/noise data  log2 values of limiter gains  bounds of current limiter bands  calculate the accumulated E_orig and E_curr over the limiter band  calculate the maximum gain  ratio of the energy of the original signal and the energy
             * of the HF generated signal
              check if m is on a noise band border  step to next noise band  check if m is on a resolution band border  accumulate a whole range of equal Q_Ms  step to next resolution band  if we move to a new resolution band, we should check if we are
                     * going to add a sinusoid in this band
                      check if m is on a HI_RES band border  step to next HI_RES band  find S_index_mapped
                 * S_index_mapped can only be 1 for the m in the middle of the
                 * current HI_RES band
                  find the middle subband of the HI_RES frequency band  find bitstream parameters  Q_M only depends on E_orig and Q_div2:
                 * since N_Q <= N_Low <= N_High we only need to recalculate Q_M on
                 * a change of current res band (HI or LO)
                  S_M only depends on E_orig, Q_div and S_index_mapped:
                 * S_index_mapped can only be non-zero once per HI_RES band
                  -inf  accumulate sinusoid part of the total energy  calculate gain  ratio of the energy of the original signal and the energy
                 * of the HF generated signal
                  E_curr here is officially E_curr+1 so the log2() of that can never be < 0  scaled by -10  G = G * 1/(1+Q)  G = G * Q/(1+Q)  limit the additional noise energy level  and apply the limiter  G > G_max  accumulate limited Q_M  accumulate the total energy  E_curr changes for every m so we do need to accumulate every m  accumulate last range of equal Q_Ms  calculate the final gain  G_boost: [0..2.51188643]  log2(1.584893192 ^ 2)  apply compensation to gain, noise floor sf's and sinusoid levels  sqrt() will be done after the aliasing reduction to save a
                 * few multiplies
                  calculate the accumulated E_orig and E_curr over the limiter band  calculate the maximum gain  ratio of the energy of the original signal and the energy
             * of the HF generated signal
              check if m is on a noise band border  step to next noise band  check if m is on a resolution band border  step to next resolution band  if we move to a new resolution band, we should check if we are
                     * going to add a sinusoid in this band
                      check if m is on a HI_RES band border  step to next HI_RES band  find S_index_mapped
                 * S_index_mapped can only be 1 for the m in the middle of the
                 * current HI_RES band
                  find the middle subband of the HI_RES frequency band  Q_div: [0..1] (1/(1+Q_mapped))  Q_div2: [0..1] (Q_mapped/(1+Q_mapped))  Q_M only depends on E_orig and Q_div2:
                 * since N_Q <= N_Low <= N_High we only need to recalculate Q_M on
                 * a change of current noise band
                  S_M only depends on E_orig, Q_div and S_index_mapped:
                 * S_index_mapped can only be non-zero once per HI_RES band
                  accumulate sinusoid part of the total energy  calculate gain  ratio of the energy of the original signal and the energy
                 * of the HF generated signal
                  limit the additional noise energy level  and apply the limiter  accumulate the total energy  G_boost: [0..2.51188643]  1.584893192 ^ 2  apply compensation to gain, noise floor sf's and sinusoid levels  sqrt() will be done after the aliasing reduction to save a
                 * few multiplies
                  log2_test E_curr: integer  G_lim_boost: fixed point  E_total_est: integer  E_total: integer  G_target: fixed point  alpha: (COEF) fixed point  acc: integer  acc: fixed point  reset ringbuffer index  load new values into ringbuffer  add noise to the output  the smoothed gain values are applied to Xsbr  V is defined, not calculated  update the ringbuffer index used for filtering G and Q with h_smooth 
** FAAD2 - Freeware Advanced Audio (AAC) Decoder including SBR decoding
** Copyright (C) 2003-2004 M. Bakker, Ahead Software AG, http://www.nero.com
**  
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
** 
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
** 
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software 
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** Any non-GPL usage of this software or parts of this software is strictly
** forbidden.
**
** Commercial non-GPL licensing of this software is possible.
** For more info contact Ahead Software through Mpeg4AAClicense@nero.com.
**
** $Id$
* High Frequency adjustment  static function declarations  aliasing degree  in case of using f_table_high we just have 1 to 1 mapping
         * from bs_add_harmonic[l][k]
          in case of f_table_low we check if any of the HI_RES bands
         * within this LO_RES band has bs_add_harmonic[l][k] turned on
         * (note that borders in the LO_RES table are also present in
         * the HI_RES table)
          find first HI_RES band in current LO_RES band  find first HI_RES band in next LO_RES band  check all HI_RES bands in current LO_RES band for sinusoid  smallest number available in fixed point  log2 values of [0..63]  check for coupled energy/noise data  E[1] should always be even so shifting is OK  negative  positive  negative  positive  tmp / pan in log2  check for coupled energy/noise data  negative  positive  negative  positive  tmp / pan in log2  check for coupled energy/noise data  log2 values of limiter gains  bounds of current limiter bands  calculate the accumulated E_orig and E_curr over the limiter band  calculate the maximum gain  ratio of the energy of the original signal and the energy
             * of the HF generated signal
              check if m is on a noise band border  step to next noise band  check if m is on a resolution band border  accumulate a whole range of equal Q_Ms  step to next resolution band  if we move to a new resolution band, we should check if we are
                     * going to add a sinusoid in this band
                      check if m is on a HI_RES band border  step to next HI_RES band  find S_index_mapped
                 * S_index_mapped can only be 1 for the m in the middle of the
                 * current HI_RES band
                  find the middle subband of the HI_RES frequency band  find bitstream parameters  Q_M only depends on E_orig and Q_div2:
                 * since N_Q <= N_Low <= N_High we only need to recalculate Q_M on
                 * a change of current res band (HI or LO)
                  S_M only depends on E_orig, Q_div and S_index_mapped:
                 * S_index_mapped can only be non-zero once per HI_RES band
                  -inf  accumulate sinusoid part of the total energy  calculate gain  ratio of the energy of the original signal and the energy
                 * of the HF generated signal
                  E_curr here is officially E_curr+1 so the log2() of that can never be < 0  scaled by -10  G = G * 1/(1+Q)  G = G * Q/(1+Q)  limit the additional noise energy level  and apply the limiter  G > G_max  accumulate limited Q_M  accumulate the total energy  E_curr changes for every m so we do need to accumulate every m  accumulate last range of equal Q_Ms  calculate the final gain  G_boost: [0..2.51188643] + EPS log2(1.584893192 ^ 2)  apply compensation to gain, noise floor sf's and sinusoid levels  sqrt() will be done after the aliasing reduction to save a
                 * few multiplies
                 #define LOG2_TEST log2 values of [0..63]  check for coupled energy/noise data  negative  positive  negative  positive  tmp / pan in log2  check for coupled energy/noise data  negative  positive  negative  positive  tmp / pan in log2  check for coupled energy/noise data  log2 values of limiter gains  bounds of current limiter bands  calculate the accumulated E_orig and E_curr over the limiter band  calculate the maximum gain  ratio of the energy of the original signal and the energy
             * of the HF generated signal
              check if m is on a noise band border  step to next noise band  check if m is on a resolution band border  accumulate a whole range of equal Q_Ms  step to next resolution band  if we move to a new resolution band, we should check if we are
                     * going to add a sinusoid in this band
                      check if m is on a HI_RES band border  step to next HI_RES band  find S_index_mapped
                 * S_index_mapped can only be 1 for the m in the middle of the
                 * current HI_RES band
                  find the middle subband of the HI_RES frequency band  find bitstream parameters  Q_M only depends on E_orig and Q_div2:
                 * since N_Q <= N_Low <= N_High we only need to recalculate Q_M on
                 * a change of current res band (HI or LO)
                  S_M only depends on E_orig, Q_div and S_index_mapped:
                 * S_index_mapped can only be non-zero once per HI_RES band
                  -inf  accumulate sinusoid part of the total energy  calculate gain  ratio of the energy of the original signal and the energy
                 * of the HF generated signal
                  E_curr here is officially E_curr+1 so the log2() of that can never be < 0  scaled by -10  G = G * 1/(1+Q)  G = G * Q/(1+Q)  limit the additional noise energy level  and apply the limiter  G > G_max  accumulate limited Q_M  accumulate the total energy  E_curr changes for every m so we do need to accumulate every m  accumulate last range of equal Q_Ms  calculate the final gain  G_boost: [0..2.51188643]  log2(1.584893192 ^ 2)  apply compensation to gain, noise floor sf's and sinusoid levels  sqrt() will be done after the aliasing reduction to save a
                 * few multiplies
                  calculate the accumulated E_orig and E_curr over the limiter band  calculate the maximum gain  ratio of the energy of the original signal and the energy
             * of the HF generated signal
              check if m is on a noise band border  step to next noise band  check if m is on a resolution band border  step to next resolution band  if we move to a new resolution band, we should check if we are
                     * going to add a sinusoid in this band
                      check if m is on a HI_RES band border  step to next HI_RES band  find S_index_mapped
                 * S_index_mapped can only be 1 for the m in the middle of the
                 * current HI_RES band
                  find the middle subband of the HI_RES frequency band  Q_div: [0..1] (1/(1+Q_mapped))  Q_div2: [0..1] (Q_mapped/(1+Q_mapped))  Q_M only depends on E_orig and Q_div2:
                 * since N_Q <= N_Low <= N_High we only need to recalculate Q_M on
                 * a change of current noise band
                  S_M only depends on E_orig, Q_div and S_index_mapped:
                 * S_index_mapped can only be non-zero once per HI_RES band
                  accumulate sinusoid part of the total energy  calculate gain  ratio of the energy of the original signal and the energy
                 * of the HF generated signal
                  limit the additional noise energy level  and apply the limiter  accumulate the total energy  G_boost: [0..2.51188643]  1.584893192 ^ 2  apply compensation to gain, noise floor sf's and sinusoid levels  sqrt() will be done after the aliasing reduction to save a
                 * few multiplies
                  log2_test E_curr: integer  G_lim_boost: fixed point  E_total_est: integer  E_total: integer  G_target: fixed point  alpha: (COEF) fixed point  acc: integer  acc: fixed point  reset ringbuffer index  load new values into ringbuffer  add noise to the output  the smoothed gain values are applied to Xsbr  V is defined, not calculated  update the ringbuffer index used for filtering G and Q with h_smooth 
** FAAD2 - Freeware Advanced Audio (AAC) Decoder including SBR decoding
** Copyright (C) 2003-2004 M. Bakker, Ahead Software AG, http://www.nero.com
**  
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
** 
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
** 
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software 
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** Any non-GPL usage of this software or parts of this software is strictly
** forbidden.
**
** Commercial non-GPL licensing of this software is possible.
** For more info contact Ahead Software through Mpeg4AAClicense@nero.com.
**
** $Id$
* High Frequency adjustment  static function declarations  aliasing degree  in case of using f_table_high we just have 1 to 1 mapping
         * from bs_add_harmonic[l][k]
          in case of f_table_low we check if any of the HI_RES bands
         * within this LO_RES band has bs_add_harmonic[l][k] turned on
         * (note that borders in the LO_RES table are also present in
         * the HI_RES table)
          find first HI_RES band in current LO_RES band  find first HI_RES band in next LO_RES band  check all HI_RES bands in current LO_RES band for sinusoid  smallest number available in fixed point  log2 values of [0..63]  check for coupled energy/noise data  E[1] should always be even so shifting is OK  negative  positive  negative  positive  tmp / pan in log2  check for coupled energy/noise data  negative  positive  negative  positive  tmp / pan in log2  check for coupled energy/noise data  log2 values of limiter gains  bounds of current limiter bands  calculate the accumulated E_orig and E_curr over the limiter band  calculate the maximum gain  ratio of the energy of the original signal and the energy
             * of the HF generated signal
              check if m is on a noise band border  step to next noise band  check if m is on a resolution band border  accumulate a whole range of equal Q_Ms  step to next resolution band  if we move to a new resolution band, we should check if we are
                     * going to add a sinusoid in this band
                      check if m is on a HI_RES band border  step to next HI_RES band  find S_index_mapped
                 * S_index_mapped can only be 1 for the m in the middle of the
                 * current HI_RES band
                  find the middle subband of the HI_RES frequency band  find bitstream parameters  Q_M only depends on E_orig and Q_div2:
                 * since N_Q <= N_Low <= N_High we only need to recalculate Q_M on
                 * a change of current res band (HI or LO)
                  S_M only depends on E_orig, Q_div and S_index_mapped:
                 * S_index_mapped can only be non-zero once per HI_RES band
                  -inf  accumulate sinusoid part of the total energy  calculate gain  ratio of the energy of the original signal and the energy
                 * of the HF generated signal
                  E_curr here is officially E_curr+1 so the log2() of that can never be < 0  scaled by -10  G = G * 1/(1+Q)  G = G * Q/(1+Q)  limit the additional noise energy level  and apply the limiter  G > G_max  accumulate limited Q_M  accumulate the total energy  E_curr changes for every m so we do need to accumulate every m  accumulate last range of equal Q_Ms  calculate the final gain  G_boost: [0..2.51188643] + EPS log2(1.584893192 ^ 2)  apply compensation to gain, noise floor sf's and sinusoid levels  sqrt() will be done after the aliasing reduction to save a
                 * few multiplies
                 #define LOG2_TEST log2 values of [0..63]  check for coupled energy/noise data  negative  positive  negative  positive  tmp / pan in log2  check for coupled energy/noise data  negative  positive  negative  positive  tmp / pan in log2  check for coupled energy/noise data  log2 values of limiter gains  bounds of current limiter bands  calculate the accumulated E_orig and E_curr over the limiter band  calculate the maximum gain  ratio of the energy of the original signal and the energy
             * of the HF generated signal
              check if m is on a noise band border  step to next noise band  check if m is on a resolution band border  accumulate a whole range of equal Q_Ms  step to next resolution band  if we move to a new resolution band, we should check if we are
                     * going to add a sinusoid in this band
                      check if m is on a HI_RES band border  step to next HI_RES band  find S_index_mapped
                 * S_index_mapped can only be 1 for the m in the middle of the
                 * current HI_RES band
                  find the middle subband of the HI_RES frequency band  find bitstream parameters  Q_M only depends on E_orig and Q_div2:
                 * since N_Q <= N_Low <= N_High we only need to recalculate Q_M on
                 * a change of current res band (HI or LO)
                  S_M only depends on E_orig, Q_div and S_index_mapped:
                 * S_index_mapped can only be non-zero once per HI_RES band
                  -inf  accumulate sinusoid part of the total energy  calculate gain  ratio of the energy of the original signal and the energy
                 * of the HF generated signal
                  E_curr here is officially E_curr+1 so the log2() of that can never be < 0  scaled by -10  G = G * 1/(1+Q)  G = G * Q/(1+Q)  limit the additional noise energy level  and apply the limiter  G > G_max  accumulate limited Q_M  accumulate the total energy  E_curr changes for every m so we do need to accumulate every m  accumulate last range of equal Q_Ms  calculate the final gain  G_boost: [0..2.51188643]  log2(1.584893192 ^ 2)  apply compensation to gain, noise floor sf's and sinusoid levels  sqrt() will be done after the aliasing reduction to save a
                 * few multiplies
                  calculate the accumulated E_orig and E_curr over the limiter band  calculate the maximum gain  ratio of the energy of the original signal and the energy
             * of the HF generated signal
              check if m is on a noise band border  step to next noise band  check if m is on a resolution band border  step to next resolution band  if we move to a new resolution band, we should check if we are
                     * going to add a sinusoid in this band
                      check if m is on a HI_RES band border  step to next HI_RES band  find S_index_mapped
                 * S_index_mapped can only be 1 for the m in the middle of the
                 * current HI_RES band
                  find the middle subband of the HI_RES frequency band  Q_div: [0..1] (1/(1+Q_mapped))  Q_div2: [0..1] (Q_mapped/(1+Q_mapped))  Q_M only depends on E_orig and Q_div2:
                 * since N_Q <= N_Low <= N_High we only need to recalculate Q_M on
                 * a change of current noise band
                  S_M only depends on E_orig, Q_div and S_index_mapped:
                 * S_index_mapped can only be non-zero once per HI_RES band
                  accumulate sinusoid part of the total energy  calculate gain  ratio of the energy of the original signal and the energy
                 * of the HF generated signal
                  limit the additional noise energy level  and apply the limiter  accumulate the total energy  G_boost: [0..2.51188643]  1.584893192 ^ 2  apply compensation to gain, noise floor sf's and sinusoid levels  sqrt() will be done after the aliasing reduction to save a
                 * few multiplies
                  log2_test E_curr: integer  G_lim_boost: fixed point  E_total_est: integer  E_total: integer  G_target: fixed point  alpha: (COEF) fixed point  acc: integer  acc: fixed point  reset ringbuffer index  load new values into ringbuffer  add noise to the output  the smoothed gain values are applied to Xsbr  V is defined, not calculated  update the ringbuffer index used for filtering G and Q with h_smooth 