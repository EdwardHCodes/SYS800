
 * dest=0xFF00;
 * dest&=src;
 * dest=dest>>8;
 
 * dest&=0xFF;
 * src&=0xFF;
 * src=src<<8;
 * dest|=src;
 
 * movea.l &cpu.a, %a3
 * movem.l d1-d7/a0-a1 , (%a3)
 * jsr (n)
 * movea.l &cpu.a, %a3
 * movem.l (%a3), d1-d7/a0-a1
 
 * SUBQ 2, %a0                 decrease gb sp
 * PEA #(n)                    push n
 * PUSH %a0                    push gb sp
 * call_native writew(SP, (n))
 * ADDQ 8, %a7
 
 * PUSH %a0                push gb sp
 * call_native readw(SP);
 * addq 4, a7
 * addq 2, a0
 * movea.w %d0, (n)
  endianness?  NOP  LD BC,imm  warning (do we have endianness right?)  LD (BC),A  FIXME: Implement  INC BC  FIXME: Implement  INC B  Is this right?  DEC B  Is this right?  LD B,imm  RLCA  FIXME: Implement  LD imm,SP  FIXME: Implement  ADD HL,BC  FIXME: Implement  LD A,(BC)  FIXME: Implement  DEC BC  test C  dec B  jump here if not zero  dec C  INC C  Is this right?  DEC C  Is this right?  LD C,imm  RRCA  FIXME: Implement  STOP  FIXME: Implement  LD DE,imm  LD (DE),A  FIXME: Implement  INC DE  FIXME: Implement  INC D  Is this right?  DEC D  Is this right?  LD D,imm  RLA  FIXME: Implement  JR  FIXME: Implement  ADD HL,DE  FIXME: Implement  LD A,(DE)  FIXME: Implement  DEC DE  test E  dec D  jump here if not zero  dec E  INC E  Is this right?  DEC E  Is this right?  LD E,imm  RRA  FIXME: Implement  JR NZ  btst #8,d7  jump here if bit is not zero  LD HL,imm  LDI (HL), A               DYNA_PUSH_l_r(1,0);
                DYNA_PUSH_l_r(6,0);
                CALL_NATIVE(&writeb);
                DYNA_ADDQ_l_i_to_r(0,7,1);
                DYNA_INC_l_r(6,0); INC HL  FIXME: Implement  INC H  FIXME: Implement  DEC H  FIXME: Implement  LD H,imm  DAA  FIXME: Implement  JR Z  FIXME: Implement  ADD HL, HL  FIXME: Implement  LD A,(HLI)  FIXME: Implement  DEC HL  FIXME: Implement  INC L  FIXME: Implement  DEC L  FIXME: Implement  LD L,imm  CPL  FIXME: Implement  JR NC  FIXME: Implement  LD SP,imm  LD (HLD),A  FIXME: Implement  INC SP  FIXME: Implement  INC (HL)  FIXME: Implement  DEC (HL)  FIXME: Implement  LD (HD),imm  FIXME: Implement  SCF  FIXME: Implement  JR C  FIXME: Implement  ADD HL,SP  FIXME: Implement  LD A,(HLD)  FIXME: Implement  DEC SP  FIXME: Implement  INC A  Is this right?  DEC A  Is this right?  LD A,imm  CCF  FIXME: Implement  LD B,B  LD B,C  LD B,D  LD B,E  LD B,H  LD B,L  LD B,(HL)  FIXME: Implement  LD B,A  LD C,B  LD C,C  LD C,D  LD C,E  LD C,H  LD C,L  LD C,(HL)  FIXME: Implement  LD C,A  LD D,B  LD D,C  LD D,D  LD D,E  LD D,H  LD D,L  LD D,(HL)  FIXME: Implement  LD D,A  LD E,B  LD E,C  LD E,D  LD E,E  LD E,H  LD E,L  LD E,(HL)  FIXME: Implement  LD E,A  LD H,B  LD H,C  LD H,D  LD H,E  LD H,H  LD H,L  LD H,(HL)  FIXME: Implement  LD H,A  LD L,B  LD L,C  LD L,D  LD L,E  LD L,H  LD L,L  LD L,(HL)  FIXME: Implement  LD L,A  FIXME: Implement  LD (HL),B  FIXME: Implement  LD (HL),C  FIXME: Implement  LD (HL),D  FIXME: Implement  LD (HL),E  FIXME: Implement  LD (HL),H  FIXME: Implement  LD (HL),L  FIXME: Implement  HALT  FIXME: Implement  LD (HL),A  FIXME: Implement  LD A,B  LD A,C  LD A,D  LD A,E  LD A,H  LD A,L  LD A,HL  FIXME: Implement  LD A,A  ADD A,B  FIXME: Implement  ADD A,C  FIXME: Implement  ADD A,D  FIXME: Implement  ADD A,E  FIXME: Implement  ADD A,H  FIXME: Implement  ADD A,L  FIXME: Implement  ADD A,(HL)  FIXME: Implement  ADD A,A  code taken from gcc -O3 output by compiling;
                 *     c=(2*b)&0xFF;
                 *     a=(c) ? 0 : 0x80 |            zero flag 
                 *           (0x20 & (c) << 1) |     halfcarry
                 *           ((2*b)&0x100)>>4;       carry
                  move.l d1, d0  add.l d0, d0  and.l #510, d0  movea.l d0,a3  clr.b d7  tst.b d0  move.l d1,d0  lsr.l #3, d0  moveq #16,d1  and.l d1 d0  moveq #0x80,d7  or.l d0, d7  branch not equal, here  move.l a3,d1  and.l #0xFE,d1  and.l #0xB0,d7   ADC A,B  FIXME: Implement  ADC A,C  FIXME: Implement  ADC A,D  FIXME: Implement  ADC A,E  FIXME: Implement  ADC A,H  FIXME: Implement  ADC A,L  FIXME: Implement  ADC A,(HL)  FIXME: Implement  ADC A  FIXME: Implement  SUB B  FIXME: Implement  SUB C  FIXME: Implement  SUB D  FIXME: Implement  SUB E  FIXME: Implement  SUB H  FIXME: Implement  SUB L  FIXME: Implement  SUB (HL)  FIXME: Implement  SUB A (halfcarry ?)  SBC A,B  FIXME: Implement  SBC A,C  FIXME: Implement  SBC A,D  FIXME: Implement  SBC A,E  FIXME: Implement  SBC A,H  FIXME: Implement  SBC A,L  FIXME: Implement  SBC A,(HL)  FIXME: Implement  SBC A,A  FIXME: Implement  AND B  FIXME: Implement  AND C  FIXME: Implement  AND D  FIXME: Implement  AND E  FIXME: Implement  AND H  FIXME: Implement  AND L  FIXME: Implement  AND (HL)  FIXME: Implement  AND A  FIXME: Implement  XOR B  FIXME: Implement  XOR C  FIXME: Implement  XOR D  FIXME: Implement  XOR E  FIXME: Implement  XOR H  FIXME: Implement  XOR L  FIXME: Implement  XOR (HL)  FIXME: Implement  XOR A  FIXME: Implement  OR B  FIXME: Implement  OR C  FIXME: Implement  OR D  FIXME: Implement  OR E  FIXME: Implement  OR H  FIXME: Implement  OR L  FIXME: Implement  OR (HL)  FIXME: Implement  OR A  FIXME: Implement  CP B  FIXME: Implement  CP C  FIXME: Implement  CP D  FIXME: Implement  CP E  FIXME: Implement  CP H  FIXME: Implement  CP L  FIXME: Implement  CP (HL)  FIXME: Implement  CP A  FIXME: Implement  RET NZ  FIXME: Implement  POP BC  JP NZ  btst #8,d7  jump here if bit is not zero  JP (imm) PC = readw(PC)  CALL NZ  FIXME: Implement  PUSH BC  FIXME: Implement  ADD A,imm  FIXME: Implement  RST 0h  FIXME: Implement  RET Z  FIXME: Implement  RET  JP Z  FIXME: Implement  NULL  CALL Z  FIXME: Implement  CALL (imm) PUSH(PC+2) PC=readw(PC);  ADC A,imm  FIXME: Implement  RST 8h  FIXME: Implement  RET NC  btst #5,d7  POP %a1  jump here if bit is not zero  POP DE  FIXME: Implement  JP NC  FIXME: Implement  NULL  CALL NC  FIXME: Implement  PUSH DE  FIXME: Implement  SUB imm  FIXME: Implement  RST 10h  FIXME: Implement  RET C  FIXME: Implement  RETI  FIXME: Implement  JP C  FIXME: Implement  NULL  CALL NC  FIXME: Implement  NULL  SBC A,imm  FIXME: Implement  RST 18h  FIXME: Implement  LDH (imm),A writehi(FETCH, A);  POP HL  FIXME: Implement  LDH (imm),A  FIXME: Implement  NULL  NULL  PUSH HL  FIXME: Implement  AND imm  FIXME: Implement  RST 20h  FIXME: Implement  ADD SP  FIXME: Implement  JP HL  FIXME: Implement  LD A  FIXME: Implement  NULL  NULL  NULL  XOR imm  FIXME: Implement  RST 28h  FIXME: Implement  LDH A,(imm) A = readhi(FETCH) POP AF  FIXME: Implement  LDH A,(imm)  FIXME: Implement  DI  cpu.halt = cpu.ima = cpu.ime = 0;  NULL  PUSH AF  FIXME: Implement  OR imm  FIXME: Implement  RST 30h  FIXME: Implement  LD HL,SP  FIXME: Implement  LD SP,HL  LD A, (imm) DYNA_PEA_w_i(readw(xPC));
                PC+=2; \
                CALL_NATIVE(&readb); \
                DYNA_ADDQ_l_i_to_r(4,7,1); \
                DYNA_MOVE_l_r_to_r(0,1,0); EI cpu.ima=1;  NULL  NULL  CMP #<imm> TODO: can be (much) more efficient. movea.l %d2, %a3  moveq.l #<FETCH>,%d2  move.l %a3, %d2  RST 38h  FIXME: Implement 
 * dest=0xFF00;
 * dest&=src;
 * dest=dest>>8;
 
 * dest&=0xFF;
 * src&=0xFF;
 * src=src<<8;
 * dest|=src;
 
 * movea.l &cpu.a, %a3
 * movem.l d1-d7/a0-a1 , (%a3)
 * jsr (n)
 * movea.l &cpu.a, %a3
 * movem.l (%a3), d1-d7/a0-a1
 
 * SUBQ 2, %a0                 decrease gb sp
 * PEA #(n)                    push n
 * PUSH %a0                    push gb sp
 * call_native writew(SP, (n))
 * ADDQ 8, %a7
 
 * PUSH %a0                push gb sp
 * call_native readw(SP);
 * addq 4, a7
 * addq 2, a0
 * movea.w %d0, (n)
  endianness?  NOP  LD BC,imm  warning (do we have endianness right?)  LD (BC),A  FIXME: Implement  INC BC  FIXME: Implement  INC B  Is this right?  DEC B  Is this right?  LD B,imm  RLCA  FIXME: Implement  LD imm,SP  FIXME: Implement  ADD HL,BC  FIXME: Implement  LD A,(BC)  FIXME: Implement  DEC BC  test C  dec B  jump here if not zero  dec C  INC C  Is this right?  DEC C  Is this right?  LD C,imm  RRCA  FIXME: Implement  STOP  FIXME: Implement  LD DE,imm  LD (DE),A  FIXME: Implement  INC DE  FIXME: Implement  INC D  Is this right?  DEC D  Is this right?  LD D,imm  RLA  FIXME: Implement  JR  FIXME: Implement  ADD HL,DE  FIXME: Implement  LD A,(DE)  FIXME: Implement  DEC DE  test E  dec D  jump here if not zero  dec E  INC E  Is this right?  DEC E  Is this right?  LD E,imm  RRA  FIXME: Implement  JR NZ  btst #8,d7  jump here if bit is not zero  LD HL,imm  LDI (HL), A               DYNA_PUSH_l_r(1,0);
                DYNA_PUSH_l_r(6,0);
                CALL_NATIVE(&writeb);
                DYNA_ADDQ_l_i_to_r(0,7,1);
                DYNA_INC_l_r(6,0); INC HL  FIXME: Implement  INC H  FIXME: Implement  DEC H  FIXME: Implement  LD H,imm  DAA  FIXME: Implement  JR Z  FIXME: Implement  ADD HL, HL  FIXME: Implement  LD A,(HLI)  FIXME: Implement  DEC HL  FIXME: Implement  INC L  FIXME: Implement  DEC L  FIXME: Implement  LD L,imm  CPL  FIXME: Implement  JR NC  FIXME: Implement  LD SP,imm  LD (HLD),A  FIXME: Implement  INC SP  FIXME: Implement  INC (HL)  FIXME: Implement  DEC (HL)  FIXME: Implement  LD (HD),imm  FIXME: Implement  SCF  FIXME: Implement  JR C  FIXME: Implement  ADD HL,SP  FIXME: Implement  LD A,(HLD)  FIXME: Implement  DEC SP  FIXME: Implement  INC A  Is this right?  DEC A  Is this right?  LD A,imm  CCF  FIXME: Implement  LD B,B  LD B,C  LD B,D  LD B,E  LD B,H  LD B,L  LD B,(HL)  FIXME: Implement  LD B,A  LD C,B  LD C,C  LD C,D  LD C,E  LD C,H  LD C,L  LD C,(HL)  FIXME: Implement  LD C,A  LD D,B  LD D,C  LD D,D  LD D,E  LD D,H  LD D,L  LD D,(HL)  FIXME: Implement  LD D,A  LD E,B  LD E,C  LD E,D  LD E,E  LD E,H  LD E,L  LD E,(HL)  FIXME: Implement  LD E,A  LD H,B  LD H,C  LD H,D  LD H,E  LD H,H  LD H,L  LD H,(HL)  FIXME: Implement  LD H,A  LD L,B  LD L,C  LD L,D  LD L,E  LD L,H  LD L,L  LD L,(HL)  FIXME: Implement  LD L,A  FIXME: Implement  LD (HL),B  FIXME: Implement  LD (HL),C  FIXME: Implement  LD (HL),D  FIXME: Implement  LD (HL),E  FIXME: Implement  LD (HL),H  FIXME: Implement  LD (HL),L  FIXME: Implement  HALT  FIXME: Implement  LD (HL),A  FIXME: Implement  LD A,B  LD A,C  LD A,D  LD A,E  LD A,H  LD A,L  LD A,HL  FIXME: Implement  LD A,A  ADD A,B  FIXME: Implement  ADD A,C  FIXME: Implement  ADD A,D  FIXME: Implement  ADD A,E  FIXME: Implement  ADD A,H  FIXME: Implement  ADD A,L  FIXME: Implement  ADD A,(HL)  FIXME: Implement  ADD A,A  code taken from gcc -O3 output by compiling;
                 *     c=(2*b)&0xFF;
                 *     a=(c) ? 0 : 0x80 |            zero flag 
                 *           (0x20 & (c) << 1) |     halfcarry
                 *           ((2*b)&0x100)>>4;       carry
                  move.l d1, d0  add.l d0, d0  and.l #510, d0  movea.l d0,a3  clr.b d7  tst.b d0  move.l d1,d0  lsr.l #3, d0  moveq #16,d1  and.l d1 d0  moveq #0x80,d7  or.l d0, d7  branch not equal, here  move.l a3,d1  and.l #0xFE,d1  and.l #0xB0,d7   ADC A,B  FIXME: Implement  ADC A,C  FIXME: Implement  ADC A,D  FIXME: Implement  ADC A,E  FIXME: Implement  ADC A,H  FIXME: Implement  ADC A,L  FIXME: Implement  ADC A,(HL)  FIXME: Implement  ADC A  FIXME: Implement  SUB B  FIXME: Implement  SUB C  FIXME: Implement  SUB D  FIXME: Implement  SUB E  FIXME: Implement  SUB H  FIXME: Implement  SUB L  FIXME: Implement  SUB (HL)  FIXME: Implement  SUB A (halfcarry ?)  SBC A,B  FIXME: Implement  SBC A,C  FIXME: Implement  SBC A,D  FIXME: Implement  SBC A,E  FIXME: Implement  SBC A,H  FIXME: Implement  SBC A,L  FIXME: Implement  SBC A,(HL)  FIXME: Implement  SBC A,A  FIXME: Implement  AND B  FIXME: Implement  AND C  FIXME: Implement  AND D  FIXME: Implement  AND E  FIXME: Implement  AND H  FIXME: Implement  AND L  FIXME: Implement  AND (HL)  FIXME: Implement  AND A  FIXME: Implement  XOR B  FIXME: Implement  XOR C  FIXME: Implement  XOR D  FIXME: Implement  XOR E  FIXME: Implement  XOR H  FIXME: Implement  XOR L  FIXME: Implement  XOR (HL)  FIXME: Implement  XOR A  FIXME: Implement  OR B  FIXME: Implement  OR C  FIXME: Implement  OR D  FIXME: Implement  OR E  FIXME: Implement  OR H  FIXME: Implement  OR L  FIXME: Implement  OR (HL)  FIXME: Implement  OR A  FIXME: Implement  CP B  FIXME: Implement  CP C  FIXME: Implement  CP D  FIXME: Implement  CP E  FIXME: Implement  CP H  FIXME: Implement  CP L  FIXME: Implement  CP (HL)  FIXME: Implement  CP A  FIXME: Implement  RET NZ  FIXME: Implement  POP BC  JP NZ  btst #8,d7  jump here if bit is not zero  JP (imm) PC = readw(PC)  CALL NZ  FIXME: Implement  PUSH BC  FIXME: Implement  ADD A,imm  FIXME: Implement  RST 0h  FIXME: Implement  RET Z  FIXME: Implement  RET  JP Z  FIXME: Implement  NULL  CALL Z  FIXME: Implement  CALL (imm) PUSH(PC+2) PC=readw(PC);  ADC A,imm  FIXME: Implement  RST 8h  FIXME: Implement  RET NC  btst #5,d7  POP %a1  jump here if bit is not zero  POP DE  FIXME: Implement  JP NC  FIXME: Implement  NULL  CALL NC  FIXME: Implement  PUSH DE  FIXME: Implement  SUB imm  FIXME: Implement  RST 10h  FIXME: Implement  RET C  FIXME: Implement  RETI  FIXME: Implement  JP C  FIXME: Implement  NULL  CALL NC  FIXME: Implement  NULL  SBC A,imm  FIXME: Implement  RST 18h  FIXME: Implement  LDH (imm),A writehi(FETCH, A);  POP HL  FIXME: Implement  LDH (imm),A  FIXME: Implement  NULL  NULL  PUSH HL  FIXME: Implement  AND imm  FIXME: Implement  RST 20h  FIXME: Implement  ADD SP  FIXME: Implement  JP HL  FIXME: Implement  LD A  FIXME: Implement  NULL  NULL  NULL  XOR imm  FIXME: Implement  RST 28h  FIXME: Implement  LDH A,(imm) A = readhi(FETCH) POP AF  FIXME: Implement  LDH A,(imm)  FIXME: Implement  DI  cpu.halt = cpu.ima = cpu.ime = 0;  NULL  PUSH AF  FIXME: Implement  OR imm  FIXME: Implement  RST 30h  FIXME: Implement  LD HL,SP  FIXME: Implement  LD SP,HL  LD A, (imm) DYNA_PEA_w_i(readw(xPC));
                PC+=2; \
                CALL_NATIVE(&readb); \
                DYNA_ADDQ_l_i_to_r(4,7,1); \
                DYNA_MOVE_l_r_to_r(0,1,0); EI cpu.ima=1;  NULL  NULL  CMP #<imm> TODO: can be (much) more efficient. movea.l %d2, %a3  moveq.l #<FETCH>,%d2  move.l %a3, %d2  RST 38h  FIXME: Implement 
 * dest=0xFF00;
 * dest&=src;
 * dest=dest>>8;
 
 * dest&=0xFF;
 * src&=0xFF;
 * src=src<<8;
 * dest|=src;
 
 * movea.l &cpu.a, %a3
 * movem.l d1-d7/a0-a1 , (%a3)
 * jsr (n)
 * movea.l &cpu.a, %a3
 * movem.l (%a3), d1-d7/a0-a1
 
 * SUBQ 2, %a0                 decrease gb sp
 * PEA #(n)                    push n
 * PUSH %a0                    push gb sp
 * call_native writew(SP, (n))
 * ADDQ 8, %a7
 
 * PUSH %a0                push gb sp
 * call_native readw(SP);
 * addq 4, a7
 * addq 2, a0
 * movea.w %d0, (n)
  endianness?  NOP  LD BC,imm  warning (do we have endianness right?)  LD (BC),A  FIXME: Implement  INC BC  FIXME: Implement  INC B  Is this right?  DEC B  Is this right?  LD B,imm  RLCA  FIXME: Implement  LD imm,SP  FIXME: Implement  ADD HL,BC  FIXME: Implement  LD A,(BC)  FIXME: Implement  DEC BC  test C  dec B  jump here if not zero  dec C  INC C  Is this right?  DEC C  Is this right?  LD C,imm  RRCA  FIXME: Implement  STOP  FIXME: Implement  LD DE,imm  LD (DE),A  FIXME: Implement  INC DE  FIXME: Implement  INC D  Is this right?  DEC D  Is this right?  LD D,imm  RLA  FIXME: Implement  JR  FIXME: Implement  ADD HL,DE  FIXME: Implement  LD A,(DE)  FIXME: Implement  DEC DE  test E  dec D  jump here if not zero  dec E  INC E  Is this right?  DEC E  Is this right?  LD E,imm  RRA  FIXME: Implement  JR NZ  btst #8,d7  jump here if bit is not zero  LD HL,imm  LDI (HL), A               DYNA_PUSH_l_r(1,0);
                DYNA_PUSH_l_r(6,0);
                CALL_NATIVE(&writeb);
                DYNA_ADDQ_l_i_to_r(0,7,1);
                DYNA_INC_l_r(6,0); INC HL  FIXME: Implement  INC H  FIXME: Implement  DEC H  FIXME: Implement  LD H,imm  DAA  FIXME: Implement  JR Z  FIXME: Implement  ADD HL, HL  FIXME: Implement  LD A,(HLI)  FIXME: Implement  DEC HL  FIXME: Implement  INC L  FIXME: Implement  DEC L  FIXME: Implement  LD L,imm  CPL  FIXME: Implement  JR NC  FIXME: Implement  LD SP,imm  LD (HLD),A  FIXME: Implement  INC SP  FIXME: Implement  INC (HL)  FIXME: Implement  DEC (HL)  FIXME: Implement  LD (HD),imm  FIXME: Implement  SCF  FIXME: Implement  JR C  FIXME: Implement  ADD HL,SP  FIXME: Implement  LD A,(HLD)  FIXME: Implement  DEC SP  FIXME: Implement  INC A  Is this right?  DEC A  Is this right?  LD A,imm  CCF  FIXME: Implement  LD B,B  LD B,C  LD B,D  LD B,E  LD B,H  LD B,L  LD B,(HL)  FIXME: Implement  LD B,A  LD C,B  LD C,C  LD C,D  LD C,E  LD C,H  LD C,L  LD C,(HL)  FIXME: Implement  LD C,A  LD D,B  LD D,C  LD D,D  LD D,E  LD D,H  LD D,L  LD D,(HL)  FIXME: Implement  LD D,A  LD E,B  LD E,C  LD E,D  LD E,E  LD E,H  LD E,L  LD E,(HL)  FIXME: Implement  LD E,A  LD H,B  LD H,C  LD H,D  LD H,E  LD H,H  LD H,L  LD H,(HL)  FIXME: Implement  LD H,A  LD L,B  LD L,C  LD L,D  LD L,E  LD L,H  LD L,L  LD L,(HL)  FIXME: Implement  LD L,A  FIXME: Implement  LD (HL),B  FIXME: Implement  LD (HL),C  FIXME: Implement  LD (HL),D  FIXME: Implement  LD (HL),E  FIXME: Implement  LD (HL),H  FIXME: Implement  LD (HL),L  FIXME: Implement  HALT  FIXME: Implement  LD (HL),A  FIXME: Implement  LD A,B  LD A,C  LD A,D  LD A,E  LD A,H  LD A,L  LD A,HL  FIXME: Implement  LD A,A  ADD A,B  FIXME: Implement  ADD A,C  FIXME: Implement  ADD A,D  FIXME: Implement  ADD A,E  FIXME: Implement  ADD A,H  FIXME: Implement  ADD A,L  FIXME: Implement  ADD A,(HL)  FIXME: Implement  ADD A,A  code taken from gcc -O3 output by compiling;
                 *     c=(2*b)&0xFF;
                 *     a=(c) ? 0 : 0x80 |            zero flag 
                 *           (0x20 & (c) << 1) |     halfcarry
                 *           ((2*b)&0x100)>>4;       carry
                  move.l d1, d0  add.l d0, d0  and.l #510, d0  movea.l d0,a3  clr.b d7  tst.b d0  move.l d1,d0  lsr.l #3, d0  moveq #16,d1  and.l d1 d0  moveq #0x80,d7  or.l d0, d7  branch not equal, here  move.l a3,d1  and.l #0xFE,d1  and.l #0xB0,d7   ADC A,B  FIXME: Implement  ADC A,C  FIXME: Implement  ADC A,D  FIXME: Implement  ADC A,E  FIXME: Implement  ADC A,H  FIXME: Implement  ADC A,L  FIXME: Implement  ADC A,(HL)  FIXME: Implement  ADC A  FIXME: Implement  SUB B  FIXME: Implement  SUB C  FIXME: Implement  SUB D  FIXME: Implement  SUB E  FIXME: Implement  SUB H  FIXME: Implement  SUB L  FIXME: Implement  SUB (HL)  FIXME: Implement  SUB A (halfcarry ?)  SBC A,B  FIXME: Implement  SBC A,C  FIXME: Implement  SBC A,D  FIXME: Implement  SBC A,E  FIXME: Implement  SBC A,H  FIXME: Implement  SBC A,L  FIXME: Implement  SBC A,(HL)  FIXME: Implement  SBC A,A  FIXME: Implement  AND B  FIXME: Implement  AND C  FIXME: Implement  AND D  FIXME: Implement  AND E  FIXME: Implement  AND H  FIXME: Implement  AND L  FIXME: Implement  AND (HL)  FIXME: Implement  AND A  FIXME: Implement  XOR B  FIXME: Implement  XOR C  FIXME: Implement  XOR D  FIXME: Implement  XOR E  FIXME: Implement  XOR H  FIXME: Implement  XOR L  FIXME: Implement  XOR (HL)  FIXME: Implement  XOR A  FIXME: Implement  OR B  FIXME: Implement  OR C  FIXME: Implement  OR D  FIXME: Implement  OR E  FIXME: Implement  OR H  FIXME: Implement  OR L  FIXME: Implement  OR (HL)  FIXME: Implement  OR A  FIXME: Implement  CP B  FIXME: Implement  CP C  FIXME: Implement  CP D  FIXME: Implement  CP E  FIXME: Implement  CP H  FIXME: Implement  CP L  FIXME: Implement  CP (HL)  FIXME: Implement  CP A  FIXME: Implement  RET NZ  FIXME: Implement  POP BC  JP NZ  btst #8,d7  jump here if bit is not zero  JP (imm) PC = readw(PC)  CALL NZ  FIXME: Implement  PUSH BC  FIXME: Implement  ADD A,imm  FIXME: Implement  RST 0h  FIXME: Implement  RET Z  FIXME: Implement  RET  JP Z  FIXME: Implement  NULL  CALL Z  FIXME: Implement  CALL (imm) PUSH(PC+2) PC=readw(PC);  ADC A,imm  FIXME: Implement  RST 8h  FIXME: Implement  RET NC  btst #5,d7  POP %a1  jump here if bit is not zero  POP DE  FIXME: Implement  JP NC  FIXME: Implement  NULL  CALL NC  FIXME: Implement  PUSH DE  FIXME: Implement  SUB imm  FIXME: Implement  RST 10h  FIXME: Implement  RET C  FIXME: Implement  RETI  FIXME: Implement  JP C  FIXME: Implement  NULL  CALL NC  FIXME: Implement  NULL  SBC A,imm  FIXME: Implement  RST 18h  FIXME: Implement  LDH (imm),A writehi(FETCH, A);  POP HL  FIXME: Implement  LDH (imm),A  FIXME: Implement  NULL  NULL  PUSH HL  FIXME: Implement  AND imm  FIXME: Implement  RST 20h  FIXME: Implement  ADD SP  FIXME: Implement  JP HL  FIXME: Implement  LD A  FIXME: Implement  NULL  NULL  NULL  XOR imm  FIXME: Implement  RST 28h  FIXME: Implement  LDH A,(imm) A = readhi(FETCH) POP AF  FIXME: Implement  LDH A,(imm)  FIXME: Implement  DI  cpu.halt = cpu.ima = cpu.ime = 0;  NULL  PUSH AF  FIXME: Implement  OR imm  FIXME: Implement  RST 30h  FIXME: Implement  LD HL,SP  FIXME: Implement  LD SP,HL  LD A, (imm) DYNA_PEA_w_i(readw(xPC));
                PC+=2; \
                CALL_NATIVE(&readb); \
                DYNA_ADDQ_l_i_to_r(4,7,1); \
                DYNA_MOVE_l_r_to_r(0,1,0); EI cpu.ima=1;  NULL  NULL  CMP #<imm> TODO: can be (much) more efficient. movea.l %d2, %a3  moveq.l #<FETCH>,%d2  move.l %a3, %d2  RST 38h  FIXME: Implement 