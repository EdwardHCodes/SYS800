**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** emulate elftosb2 behaviour: generate 15 bytes (that's a safe maximum)  sb header  sections headers  key dictionary  sections  we need to make sure section starts on the right alignment,
         * and since each section starts with a boot tag, we need to ensure
         * that the boot tag is at address X such that X+BLOCK_SIZE is a
         * multiple of the alignment  update padding of previous section  each section has a preliminary TAG command  compute section size  load header  data + alignment  final signature  2000/1/1 0:00:00  Version 1.0 has 6 bytes of random padding,
     * Version 1.1 requires the last 4 bytes to be 'sgtl'  there is a catch here: in the section header at the beginning of the SB
     * file, we put the *useful* length of the section (without padding) but
     * the bootloader will not use those and only use the TAG commande which
     * need to give the *actual* length (with padding)  init CBC-MACs  fill gaps  find first bootable section  compute section offsets  generate random real key  global SHA-1  produce and write header  allocate image  update CBC-MACs  produce and write section headers  update CBC-MACs  produce key dictionary  HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK  Image crafting, don't use it unless you understand what you do  KCAH KCAH KCAH KCAH KCAH KCAH KCAH KCAH KCAH KCAH KCAH KCAH KCAH KCAH  the first section might not start right after the header, pad with
     * random data  setup real key  produce sections data  produce tag command  produce other commands  command  data  pad section with random data or NOP  write file SHA-1  Pretty print the content  data is padded to 16-byte boundary with random data and crc'ed with it  find greatest power of two which divides the offset  Check SHA1 sum  Sizes and offsets  Versions  2000/1/1 0:00:00  encryption cbc-mac  false until a matching key was found  check it  cbc mac  check it  decrypt  uses the first 16-bytes of SHA-1 sig as IV  assume the key is valid  setup real key if needed  sections  skip it if we cannot decrypt it  save it  advanced raw mode  restart with IV  skip it if we cannot decrypt it  save it  last one ?  final signature  decrypt it  check it  some weird images produced by some buggy tools have wrong SHA-1,
         * this probably gone unnoticed because the bootloader ignores the SHA-1
         * anyway  2000/1/1 0:00:00 **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** emulate elftosb2 behaviour: generate 15 bytes (that's a safe maximum)  sb header  sections headers  key dictionary  sections  we need to make sure section starts on the right alignment,
         * and since each section starts with a boot tag, we need to ensure
         * that the boot tag is at address X such that X+BLOCK_SIZE is a
         * multiple of the alignment  update padding of previous section  each section has a preliminary TAG command  compute section size  load header  data + alignment  final signature  2000/1/1 0:00:00  Version 1.0 has 6 bytes of random padding,
     * Version 1.1 requires the last 4 bytes to be 'sgtl'  there is a catch here: in the section header at the beginning of the SB
     * file, we put the *useful* length of the section (without padding) but
     * the bootloader will not use those and only use the TAG commande which
     * need to give the *actual* length (with padding)  init CBC-MACs  fill gaps  find first bootable section  compute section offsets  generate random real key  global SHA-1  produce and write header  allocate image  update CBC-MACs  produce and write section headers  update CBC-MACs  produce key dictionary  HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK  Image crafting, don't use it unless you understand what you do  KCAH KCAH KCAH KCAH KCAH KCAH KCAH KCAH KCAH KCAH KCAH KCAH KCAH KCAH  the first section might not start right after the header, pad with
     * random data  setup real key  produce sections data  produce tag command  produce other commands  command  data  pad section with random data or NOP  write file SHA-1  Pretty print the content  data is padded to 16-byte boundary with random data and crc'ed with it  find greatest power of two which divides the offset  Check SHA1 sum  Sizes and offsets  Versions  2000/1/1 0:00:00  encryption cbc-mac  false until a matching key was found  check it  cbc mac  check it  decrypt  uses the first 16-bytes of SHA-1 sig as IV  assume the key is valid  setup real key if needed  sections  skip it if we cannot decrypt it  save it  advanced raw mode  restart with IV  skip it if we cannot decrypt it  save it  last one ?  final signature  decrypt it  check it  some weird images produced by some buggy tools have wrong SHA-1,
         * this probably gone unnoticed because the bootloader ignores the SHA-1
         * anyway  2000/1/1 0:00:00 **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** emulate elftosb2 behaviour: generate 15 bytes (that's a safe maximum)  sb header  sections headers  key dictionary  sections  we need to make sure section starts on the right alignment,
         * and since each section starts with a boot tag, we need to ensure
         * that the boot tag is at address X such that X+BLOCK_SIZE is a
         * multiple of the alignment  update padding of previous section  each section has a preliminary TAG command  compute section size  load header  data + alignment  final signature  2000/1/1 0:00:00  Version 1.0 has 6 bytes of random padding,
     * Version 1.1 requires the last 4 bytes to be 'sgtl'  there is a catch here: in the section header at the beginning of the SB
     * file, we put the *useful* length of the section (without padding) but
     * the bootloader will not use those and only use the TAG commande which
     * need to give the *actual* length (with padding)  init CBC-MACs  fill gaps  find first bootable section  compute section offsets  generate random real key  global SHA-1  produce and write header  allocate image  update CBC-MACs  produce and write section headers  update CBC-MACs  produce key dictionary  HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK  Image crafting, don't use it unless you understand what you do  KCAH KCAH KCAH KCAH KCAH KCAH KCAH KCAH KCAH KCAH KCAH KCAH KCAH KCAH  the first section might not start right after the header, pad with
     * random data  setup real key  produce sections data  produce tag command  produce other commands  command  data  pad section with random data or NOP  write file SHA-1  Pretty print the content  data is padded to 16-byte boundary with random data and crc'ed with it  find greatest power of two which divides the offset  Check SHA1 sum  Sizes and offsets  Versions  2000/1/1 0:00:00  encryption cbc-mac  false until a matching key was found  check it  cbc mac  check it  decrypt  uses the first 16-bytes of SHA-1 sig as IV  assume the key is valid  setup real key if needed  sections  skip it if we cannot decrypt it  save it  advanced raw mode  restart with IV  skip it if we cannot decrypt it  save it  last one ?  final signature  decrypt it  check it  some weird images produced by some buggy tools have wrong SHA-1,
         * this probably gone unnoticed because the bootloader ignores the SHA-1
         * anyway  2000/1/1 0:00:00 