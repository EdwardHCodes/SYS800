**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 Dave Chapman
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** this set the context to use with PLA  Log functions copied from test_disk.c  Our local implementation of the codec API  TAG metadata  File total length   0 - ChunkID  4 - ChunkSize (filesize-8)  8 - Format 12 - SubChunkID 16 - SubChunk1ID  // 16 for PCM 20 - AudioFormat (1=16-bit) 22 - NumChannels 24 - SampleRate in Hz 28 - Byte Rate (SampleRate*NumChannels*(BitsPerSample/8) 32 - BlockAlign (== NumChannels * BitsPerSample/8) 34 - BitsPerSample 36 - Subchunk2ID 40 - Subchunk2Size Write WAV header - we go back and fill in the details at the end  TODO  We assume 16-bit, Stereo  ChunkSize  ByteRate  Subchunk2Size  Returns buffer to malloc array. Only codeclib should need this.  Dest is full or no input left and DSP purged  Null output  Prevent idle poweroff 
 *  Helper function used when the file is larger then the available memory. 
 *  Rebuffers the file by setting the start of the audio buffer to be 
 *  new_offset and filling from there.
 keep track of how much time we spent buffering WAV output or calculate crc32 of output Prevent idle poweroff  else  Set song position in WPS (value in ms).  Read next <size> amount bytes from file buffer to <ptr>.
   Will return number of bytes read or 0 if end of file.  check if we have enough bytes readyrebuffer so that we start at ci.curpos Request pointer to file buffer which can be used to read
   <realsize> amount of data. <reqsize> tells the buffer system
   how much data it should try to allocate. If <realsize> is 0,
   end of file is reached. check if we have enough bytes ready - requested > bufsize-currentbufposrebuffer so that we start at ci.curpos Advance file buffer position by <amount> amount of bytes.  Seek file buffer to position <newpos> beginning of file.  Codec should call this function when it has done the seeking.  Do nothing  Codec calls this to know what it should do next.  Some codecs call this to determine whether they should loop.  Configure different codec buffer parameters.  --- Our "fake" implementations of the codec API functions. ---  --- "Core" functions ---  kernel/ system  strings and memory  Load the codec  Decode the file  Clean up  Signal to the main thread that we are done  Display filename (excluding any path) Clear the id3 struct  Initialise the function pointers in the codec API  Prepare the codec struct for playing the whole file  Wait for codec thread to die  Be sure it is done  User aborted test  Display benchmark information  show effective clockrate in MHz needed for realtime decoding  viewport runtime initialized, rest false/NULL  button matches the bottom center in the grid  plugin entry point  Align codec_mallocbuf to pointer size, tlsf wants that  Map test runs with checksum calcualtion to standard runs 
     * SPEED_TEST and SPEED_TEST_DIR and set the 'checksum' flag.  Map test runs with DSP to standard runs SPEED_TEST, 
     * SPEED_TEST_DIR and WRITE_WAV and set the 'use_dsp' flag.  Only create a log file when we are testing a folder force unboost at start to be safe Test all files in the same directory as the file selected by the
           user  Read next entry  Just test the file  Close WAV file (if there was one) **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 Dave Chapman
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** this set the context to use with PLA  Log functions copied from test_disk.c  Our local implementation of the codec API  TAG metadata  File total length   0 - ChunkID  4 - ChunkSize (filesize-8)  8 - Format 12 - SubChunkID 16 - SubChunk1ID  // 16 for PCM 20 - AudioFormat (1=16-bit) 22 - NumChannels 24 - SampleRate in Hz 28 - Byte Rate (SampleRate*NumChannels*(BitsPerSample/8) 32 - BlockAlign (== NumChannels * BitsPerSample/8) 34 - BitsPerSample 36 - Subchunk2ID 40 - Subchunk2Size Write WAV header - we go back and fill in the details at the end  TODO  We assume 16-bit, Stereo  ChunkSize  ByteRate  Subchunk2Size  Returns buffer to malloc array. Only codeclib should need this.  Dest is full or no input left and DSP purged  Null output  Prevent idle poweroff 
 *  Helper function used when the file is larger then the available memory. 
 *  Rebuffers the file by setting the start of the audio buffer to be 
 *  new_offset and filling from there.
 keep track of how much time we spent buffering WAV output or calculate crc32 of output Prevent idle poweroff  else  Set song position in WPS (value in ms).  Read next <size> amount bytes from file buffer to <ptr>.
   Will return number of bytes read or 0 if end of file.  check if we have enough bytes readyrebuffer so that we start at ci.curpos Request pointer to file buffer which can be used to read
   <realsize> amount of data. <reqsize> tells the buffer system
   how much data it should try to allocate. If <realsize> is 0,
   end of file is reached. check if we have enough bytes ready - requested > bufsize-currentbufposrebuffer so that we start at ci.curpos Advance file buffer position by <amount> amount of bytes.  Seek file buffer to position <newpos> beginning of file.  Codec should call this function when it has done the seeking.  Do nothing  Codec calls this to know what it should do next.  Some codecs call this to determine whether they should loop.  Configure different codec buffer parameters.  --- Our "fake" implementations of the codec API functions. ---  --- "Core" functions ---  kernel/ system  strings and memory  Load the codec  Decode the file  Clean up  Signal to the main thread that we are done  Display filename (excluding any path) Clear the id3 struct  Initialise the function pointers in the codec API  Prepare the codec struct for playing the whole file  Wait for codec thread to die  Be sure it is done  User aborted test  Display benchmark information  show effective clockrate in MHz needed for realtime decoding  viewport runtime initialized, rest false/NULL  button matches the bottom center in the grid  plugin entry point  Align codec_mallocbuf to pointer size, tlsf wants that  Map test runs with checksum calcualtion to standard runs 
     * SPEED_TEST and SPEED_TEST_DIR and set the 'checksum' flag.  Map test runs with DSP to standard runs SPEED_TEST, 
     * SPEED_TEST_DIR and WRITE_WAV and set the 'use_dsp' flag.  Only create a log file when we are testing a folder force unboost at start to be safe Test all files in the same directory as the file selected by the
           user  Read next entry  Just test the file  Close WAV file (if there was one) **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 Dave Chapman
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** this set the context to use with PLA  Log functions copied from test_disk.c  Our local implementation of the codec API  TAG metadata  File total length   0 - ChunkID  4 - ChunkSize (filesize-8)  8 - Format 12 - SubChunkID 16 - SubChunk1ID  // 16 for PCM 20 - AudioFormat (1=16-bit) 22 - NumChannels 24 - SampleRate in Hz 28 - Byte Rate (SampleRate*NumChannels*(BitsPerSample/8) 32 - BlockAlign (== NumChannels * BitsPerSample/8) 34 - BitsPerSample 36 - Subchunk2ID 40 - Subchunk2Size Write WAV header - we go back and fill in the details at the end  TODO  We assume 16-bit, Stereo  ChunkSize  ByteRate  Subchunk2Size  Returns buffer to malloc array. Only codeclib should need this.  Dest is full or no input left and DSP purged  Null output  Prevent idle poweroff 
 *  Helper function used when the file is larger then the available memory. 
 *  Rebuffers the file by setting the start of the audio buffer to be 
 *  new_offset and filling from there.
 keep track of how much time we spent buffering WAV output or calculate crc32 of output Prevent idle poweroff  else  Set song position in WPS (value in ms).  Read next <size> amount bytes from file buffer to <ptr>.
   Will return number of bytes read or 0 if end of file.  check if we have enough bytes readyrebuffer so that we start at ci.curpos Request pointer to file buffer which can be used to read
   <realsize> amount of data. <reqsize> tells the buffer system
   how much data it should try to allocate. If <realsize> is 0,
   end of file is reached. check if we have enough bytes ready - requested > bufsize-currentbufposrebuffer so that we start at ci.curpos Advance file buffer position by <amount> amount of bytes.  Seek file buffer to position <newpos> beginning of file.  Codec should call this function when it has done the seeking.  Do nothing  Codec calls this to know what it should do next.  Some codecs call this to determine whether they should loop.  Configure different codec buffer parameters.  --- Our "fake" implementations of the codec API functions. ---  --- "Core" functions ---  kernel/ system  strings and memory  Load the codec  Decode the file  Clean up  Signal to the main thread that we are done  Display filename (excluding any path) Clear the id3 struct  Initialise the function pointers in the codec API  Prepare the codec struct for playing the whole file  Wait for codec thread to die  Be sure it is done  User aborted test  Display benchmark information  show effective clockrate in MHz needed for realtime decoding  viewport runtime initialized, rest false/NULL  button matches the bottom center in the grid  plugin entry point  Align codec_mallocbuf to pointer size, tlsf wants that  Map test runs with checksum calcualtion to standard runs 
     * SPEED_TEST and SPEED_TEST_DIR and set the 'checksum' flag.  Map test runs with DSP to standard runs SPEED_TEST, 
     * SPEED_TEST_DIR and WRITE_WAV and set the 'use_dsp' flag.  Only create a log file when we are testing a folder force unboost at start to be safe Test all files in the same directory as the file selected by the
           user  Read next entry  Just test the file  Close WAV file (if there was one) 