**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Dan Everton
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** memset()  Define this as 1 to show informational messages that are not errors.  Jump buffers for graceful exit - kernel threads don't stay neatly
 * in their start routines responding to messages so this is the only
 * way to get them back in there so they may exit  this mutex locks out other Rockbox threads while one runs,
 * that enables us to simulate a cooperative environment even if
 * the host is preemptive  This *has* to be a push operation from a thread not in the pool
       so that they may be dislodged from their blocking calls.  Tell all threads jump back to their start routines, unlock and exit
       gracefully - we'll check each one in turn for it's status. Threads
       _could_ terminate via thread_exit or multiple threads could exit
       on each unlock but that is safe.  Do this before trying to acquire lock  Take control  Signal all threads on delay or block  Wait for all threads to finish and cleanup old ones.  Wait for it to finish  Relock for next thread signal  Already waited and exiting thread would have waited .told,
             * replacing it with t.  Wait on any previous thread in this location-- could be one not
             * quite finished exiting but has just unlocked the mutex. If it's
             * NULL, the call returns immediately.
             *
             * See thread_exit below for more information.  Signal completion of operation  A way to yield and leave the threading system for extended periods  Any other thread waiting already will get it first  STATE_RUNNING:  STATE_BLOCKED:  Other signals from an explicit wake could have been made before
             * arriving here if we timed out waiting for the semaphore. Make
             * sure the count is reset.  STATE_BLOCKED_W_TMO:  STATE_SLEEPING:  Cannot access thread variables before locking the mutex as the
       data structures may not be filled-in yet.  Setup jump for exit  Run the thread routine  Thread routine returned - suicide  Unlock and exit  Wait the last thread here and keep this one or SDL will leak it since
     * it doesn't free its own library allocations unless a wait is performed.
     * Such behavior guards against the memory being invalid by the time
     * SDL_WaitThread is reached and also against two different threads having
     * the same pointer. It also makes SDL_WaitThread a non-concurrent function.
     *
     * However, see more below about SDL_KillThread.
      Do a graceful exit - perform the longjmp back into the thread
       function to return  This should never and must never be reached - if it is, the
     * state is corrupted  Initialize SDL threading  Slot 0 is reserved for the main thread - initialize it here and
       then create the SDL thread - it is possible to have a quick, early
       shutdown try to access the structure.  NULL for the implicit main thread  Tell all threads jump back to their start routines, unlock and exit
       gracefully - we'll check each one in turn for it's status. Threads
       _could_ terminate via thread_exit or multiple threads could exit
       on each unlock but that is safe.  Setup jump for exit  Set to 'COMMAND_DONE' when other rockbox threads have exited.  We're the main thead - perform exit - doesn't return. **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Dan Everton
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** memset()  Define this as 1 to show informational messages that are not errors.  Jump buffers for graceful exit - kernel threads don't stay neatly
 * in their start routines responding to messages so this is the only
 * way to get them back in there so they may exit  this mutex locks out other Rockbox threads while one runs,
 * that enables us to simulate a cooperative environment even if
 * the host is preemptive  This *has* to be a push operation from a thread not in the pool
       so that they may be dislodged from their blocking calls.  Tell all threads jump back to their start routines, unlock and exit
       gracefully - we'll check each one in turn for it's status. Threads
       _could_ terminate via thread_exit or multiple threads could exit
       on each unlock but that is safe.  Do this before trying to acquire lock  Take control  Signal all threads on delay or block  Wait for all threads to finish and cleanup old ones.  Wait for it to finish  Relock for next thread signal  Already waited and exiting thread would have waited .told,
             * replacing it with t.  Wait on any previous thread in this location-- could be one not
             * quite finished exiting but has just unlocked the mutex. If it's
             * NULL, the call returns immediately.
             *
             * See thread_exit below for more information.  Signal completion of operation  A way to yield and leave the threading system for extended periods  Any other thread waiting already will get it first  STATE_RUNNING:  STATE_BLOCKED:  Other signals from an explicit wake could have been made before
             * arriving here if we timed out waiting for the semaphore. Make
             * sure the count is reset.  STATE_BLOCKED_W_TMO:  STATE_SLEEPING:  Cannot access thread variables before locking the mutex as the
       data structures may not be filled-in yet.  Setup jump for exit  Run the thread routine  Thread routine returned - suicide  Unlock and exit  Wait the last thread here and keep this one or SDL will leak it since
     * it doesn't free its own library allocations unless a wait is performed.
     * Such behavior guards against the memory being invalid by the time
     * SDL_WaitThread is reached and also against two different threads having
     * the same pointer. It also makes SDL_WaitThread a non-concurrent function.
     *
     * However, see more below about SDL_KillThread.
      Do a graceful exit - perform the longjmp back into the thread
       function to return  This should never and must never be reached - if it is, the
     * state is corrupted  Initialize SDL threading  Slot 0 is reserved for the main thread - initialize it here and
       then create the SDL thread - it is possible to have a quick, early
       shutdown try to access the structure.  NULL for the implicit main thread  Tell all threads jump back to their start routines, unlock and exit
       gracefully - we'll check each one in turn for it's status. Threads
       _could_ terminate via thread_exit or multiple threads could exit
       on each unlock but that is safe.  Setup jump for exit  Set to 'COMMAND_DONE' when other rockbox threads have exited.  We're the main thead - perform exit - doesn't return. **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Dan Everton
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** memset()  Define this as 1 to show informational messages that are not errors.  Jump buffers for graceful exit - kernel threads don't stay neatly
 * in their start routines responding to messages so this is the only
 * way to get them back in there so they may exit  this mutex locks out other Rockbox threads while one runs,
 * that enables us to simulate a cooperative environment even if
 * the host is preemptive  This *has* to be a push operation from a thread not in the pool
       so that they may be dislodged from their blocking calls.  Tell all threads jump back to their start routines, unlock and exit
       gracefully - we'll check each one in turn for it's status. Threads
       _could_ terminate via thread_exit or multiple threads could exit
       on each unlock but that is safe.  Do this before trying to acquire lock  Take control  Signal all threads on delay or block  Wait for all threads to finish and cleanup old ones.  Wait for it to finish  Relock for next thread signal  Already waited and exiting thread would have waited .told,
             * replacing it with t.  Wait on any previous thread in this location-- could be one not
             * quite finished exiting but has just unlocked the mutex. If it's
             * NULL, the call returns immediately.
             *
             * See thread_exit below for more information.  Signal completion of operation  A way to yield and leave the threading system for extended periods  Any other thread waiting already will get it first  STATE_RUNNING:  STATE_BLOCKED:  Other signals from an explicit wake could have been made before
             * arriving here if we timed out waiting for the semaphore. Make
             * sure the count is reset.  STATE_BLOCKED_W_TMO:  STATE_SLEEPING:  Cannot access thread variables before locking the mutex as the
       data structures may not be filled-in yet.  Setup jump for exit  Run the thread routine  Thread routine returned - suicide  Unlock and exit  Wait the last thread here and keep this one or SDL will leak it since
     * it doesn't free its own library allocations unless a wait is performed.
     * Such behavior guards against the memory being invalid by the time
     * SDL_WaitThread is reached and also against two different threads having
     * the same pointer. It also makes SDL_WaitThread a non-concurrent function.
     *
     * However, see more below about SDL_KillThread.
      Do a graceful exit - perform the longjmp back into the thread
       function to return  This should never and must never be reached - if it is, the
     * state is corrupted  Initialize SDL threading  Slot 0 is reserved for the main thread - initialize it here and
       then create the SDL thread - it is possible to have a quick, early
       shutdown try to access the structure.  NULL for the implicit main thread  Tell all threads jump back to their start routines, unlock and exit
       gracefully - we'll check each one in turn for it's status. Threads
       _could_ terminate via thread_exit or multiple threads could exit
       on each unlock but that is safe.  Setup jump for exit  Set to 'COMMAND_DONE' when other rockbox threads have exited.  We're the main thead - perform exit - doesn't return. 