**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 Marcin Bukat
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * The format of the list is as follows
 * { Action Code,   Button code,    Prereq button code }
 * if there's no need to check the previous button's value, use BUTTON_NONE
 * Insert LAST_ITEM_IN_LIST at the end of each mapping
 ****************************************************************************
 *    Main control mappings 
 ****************************************************************************  { ACTION_STD_QUICKSCREEN,    BUTTON_,                       BUTTON_ },   { ACTION_STD_KEYLOCK,        BUTTON_,                       BUTTON_ },   { ACTION_STD_REC,            BUTTON_,                       BUTTON_ },   { ACTION_STD_HOTKEY,         BUTTON_,                       BUTTON_ },   { ACTION_F3,                 BUTTON_,                       BUTTON_ },  button_context_standard   { ACTION_TREE_ROOT_INIT,     BUTTON_,                       BUTTON_ },   { ACTION_TREE_PGLEFT,        BUTTON_,                       BUTTON_ },   { ACTION_TREE_PGRIGHT,       BUTTON_,                       BUTTON_ },   { ACTION_TREE_HOTKEY,        BUTTON_,                       BUTTON_ },  button_context_tree   { ACTION_WPS_PITCHSCREEN,    BUTTON_,                       BUTTON_ },   { ACTION_WPS_ID3SCREEN,      BUTTON_,                       BUTTON_ },   { ACTION_WPS_VIEW_PLAYLIST,  BUTTON_,                       BUTTON_ },   { ACTION_WPS_REC,            BUTTON_,                       BUTTON_ },   { ACTION_WPS_ABSETA_PREVDIR, BUTTON_,                       BUTTON_ },   { ACTION_WPS_ABSETB_NEXTDIR, BUTTON_,                       BUTTON_ },   { ACTION_WPS_ABRESET,        BUTTON_,                       BUTTON_ },   { ACTION_WPS_HOTKEY,         BUTTON_,                       BUTTON_ },  button_context_wps     { ACTION_SETTINGS_INCBIGSTEP,BUTTON_,                     BUTTON_ },   { ACTION_SETTINGS_DECBIGSTEP,BUTTON_,                       BUTTON_ },  button_context_settings  button_context_yesno  button_context_bmark 
static const struct button_mapping button_context_quickscreen[]  = {
    { ACTION_QS_LEFT,            BUTTON_VOL_DOWN,               BUTTON_NONE },
    { ACTION_QS_LEFT,            BUTTON_VOL_DOWN|BUTTON_REPEAT, BUTTON_NONE },
    { ACTION_QS_RIGHT,           BUTTON_VOL_UP,                 BUTTON_NONE },
    { ACTION_QS_RIGHT,           BUTTON_VOL_UP|BUTTON_REPEAT,   BUTTON_NONE },
    { ACTION_QS_DOWN,            BUTTON_FF,                     BUTTON_NONE },
    { ACTION_QS_DOWN,            BUTTON_FF|BUTTON_REPEAT,       BUTTON_NONE },
    { ACTION_QS_TOP,             BUTTON_REW,                    BUTTON_NONE },
    { ACTION_QS_TOP,             BUTTON_REW|BUTTON_REPEAT,      BUTTON_NONE },

    LAST_ITEM_IN_LIST__NEXTLIST(CONTEXT_STD)
}; button_context_quickscreen   { ACTION_PS_INC_SMALL,       BUTTON_VOL_UP,                 BUTTON_NONE },   { ACTION_PS_INC_BIG,         BUTTON_VOL_UP|BUTTON_REPEAT,   BUTTON_NONE },   { ACTION_PS_DEC_SMALL,       BUTTON_VOL_DOWN,               BUTTON_NONE },   { ACTION_PS_DEC_BIG,         BUTTON_VOL_DOWN|BUTTON_REPEAT, BUTTON_NONE },  button_context_pitchscreen   { ACTION_FM_RECORD,          BUTTON_,                       BUTTON_ },   { ACTION_FM_FREEZE,          BUTTON_,                       BUTTON_ },   { ACTION_FM_RECORD_DBLPRE,   BUTTON_,                       BUTTON_ },  button_context_radio   { ACTION_REC_LCD,            BUTTON_,                       BUTTON_ },   { ACTION_REC_F2,             BUTTON_,                       BUTTON_ },   { ACTION_REC_F3,             BUTTON_,                       BUTTON_ },  button_context_recscreen   { ACTION_KBD_CURSOR_LEFT,    BUTTON_,                       BUTTON_ },   { ACTION_KBD_CURSOR_RIGHT,   BUTTON_,                       BUTTON_ },  button_context_keyboard 
        case CONTEXT_QUICKSCREEN:
            return button_context_quickscreen;
**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 Marcin Bukat
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * The format of the list is as follows
 * { Action Code,   Button code,    Prereq button code }
 * if there's no need to check the previous button's value, use BUTTON_NONE
 * Insert LAST_ITEM_IN_LIST at the end of each mapping
 ****************************************************************************
 *    Main control mappings 
 ****************************************************************************  { ACTION_STD_QUICKSCREEN,    BUTTON_,                       BUTTON_ },   { ACTION_STD_KEYLOCK,        BUTTON_,                       BUTTON_ },   { ACTION_STD_REC,            BUTTON_,                       BUTTON_ },   { ACTION_STD_HOTKEY,         BUTTON_,                       BUTTON_ },   { ACTION_F3,                 BUTTON_,                       BUTTON_ },  button_context_standard   { ACTION_TREE_ROOT_INIT,     BUTTON_,                       BUTTON_ },   { ACTION_TREE_PGLEFT,        BUTTON_,                       BUTTON_ },   { ACTION_TREE_PGRIGHT,       BUTTON_,                       BUTTON_ },   { ACTION_TREE_HOTKEY,        BUTTON_,                       BUTTON_ },  button_context_tree   { ACTION_WPS_PITCHSCREEN,    BUTTON_,                       BUTTON_ },   { ACTION_WPS_ID3SCREEN,      BUTTON_,                       BUTTON_ },   { ACTION_WPS_VIEW_PLAYLIST,  BUTTON_,                       BUTTON_ },   { ACTION_WPS_REC,            BUTTON_,                       BUTTON_ },   { ACTION_WPS_ABSETA_PREVDIR, BUTTON_,                       BUTTON_ },   { ACTION_WPS_ABSETB_NEXTDIR, BUTTON_,                       BUTTON_ },   { ACTION_WPS_ABRESET,        BUTTON_,                       BUTTON_ },   { ACTION_WPS_HOTKEY,         BUTTON_,                       BUTTON_ },  button_context_wps     { ACTION_SETTINGS_INCBIGSTEP,BUTTON_,                     BUTTON_ },   { ACTION_SETTINGS_DECBIGSTEP,BUTTON_,                       BUTTON_ },  button_context_settings  button_context_yesno  button_context_bmark 
static const struct button_mapping button_context_quickscreen[]  = {
    { ACTION_QS_LEFT,            BUTTON_VOL_DOWN,               BUTTON_NONE },
    { ACTION_QS_LEFT,            BUTTON_VOL_DOWN|BUTTON_REPEAT, BUTTON_NONE },
    { ACTION_QS_RIGHT,           BUTTON_VOL_UP,                 BUTTON_NONE },
    { ACTION_QS_RIGHT,           BUTTON_VOL_UP|BUTTON_REPEAT,   BUTTON_NONE },
    { ACTION_QS_DOWN,            BUTTON_FF,                     BUTTON_NONE },
    { ACTION_QS_DOWN,            BUTTON_FF|BUTTON_REPEAT,       BUTTON_NONE },
    { ACTION_QS_TOP,             BUTTON_REW,                    BUTTON_NONE },
    { ACTION_QS_TOP,             BUTTON_REW|BUTTON_REPEAT,      BUTTON_NONE },

    LAST_ITEM_IN_LIST__NEXTLIST(CONTEXT_STD)
}; button_context_quickscreen   { ACTION_PS_INC_SMALL,       BUTTON_VOL_UP,                 BUTTON_NONE },   { ACTION_PS_INC_BIG,         BUTTON_VOL_UP|BUTTON_REPEAT,   BUTTON_NONE },   { ACTION_PS_DEC_SMALL,       BUTTON_VOL_DOWN,               BUTTON_NONE },   { ACTION_PS_DEC_BIG,         BUTTON_VOL_DOWN|BUTTON_REPEAT, BUTTON_NONE },  button_context_pitchscreen   { ACTION_FM_RECORD,          BUTTON_,                       BUTTON_ },   { ACTION_FM_FREEZE,          BUTTON_,                       BUTTON_ },   { ACTION_FM_RECORD_DBLPRE,   BUTTON_,                       BUTTON_ },  button_context_radio   { ACTION_REC_LCD,            BUTTON_,                       BUTTON_ },   { ACTION_REC_F2,             BUTTON_,                       BUTTON_ },   { ACTION_REC_F3,             BUTTON_,                       BUTTON_ },  button_context_recscreen   { ACTION_KBD_CURSOR_LEFT,    BUTTON_,                       BUTTON_ },   { ACTION_KBD_CURSOR_RIGHT,   BUTTON_,                       BUTTON_ },  button_context_keyboard 
        case CONTEXT_QUICKSCREEN:
            return button_context_quickscreen;
**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 Marcin Bukat
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * The format of the list is as follows
 * { Action Code,   Button code,    Prereq button code }
 * if there's no need to check the previous button's value, use BUTTON_NONE
 * Insert LAST_ITEM_IN_LIST at the end of each mapping
 ****************************************************************************
 *    Main control mappings 
 ****************************************************************************  { ACTION_STD_QUICKSCREEN,    BUTTON_,                       BUTTON_ },   { ACTION_STD_KEYLOCK,        BUTTON_,                       BUTTON_ },   { ACTION_STD_REC,            BUTTON_,                       BUTTON_ },   { ACTION_STD_HOTKEY,         BUTTON_,                       BUTTON_ },   { ACTION_F3,                 BUTTON_,                       BUTTON_ },  button_context_standard   { ACTION_TREE_ROOT_INIT,     BUTTON_,                       BUTTON_ },   { ACTION_TREE_PGLEFT,        BUTTON_,                       BUTTON_ },   { ACTION_TREE_PGRIGHT,       BUTTON_,                       BUTTON_ },   { ACTION_TREE_HOTKEY,        BUTTON_,                       BUTTON_ },  button_context_tree   { ACTION_WPS_PITCHSCREEN,    BUTTON_,                       BUTTON_ },   { ACTION_WPS_ID3SCREEN,      BUTTON_,                       BUTTON_ },   { ACTION_WPS_VIEW_PLAYLIST,  BUTTON_,                       BUTTON_ },   { ACTION_WPS_REC,            BUTTON_,                       BUTTON_ },   { ACTION_WPS_ABSETA_PREVDIR, BUTTON_,                       BUTTON_ },   { ACTION_WPS_ABSETB_NEXTDIR, BUTTON_,                       BUTTON_ },   { ACTION_WPS_ABRESET,        BUTTON_,                       BUTTON_ },   { ACTION_WPS_HOTKEY,         BUTTON_,                       BUTTON_ },  button_context_wps     { ACTION_SETTINGS_INCBIGSTEP,BUTTON_,                     BUTTON_ },   { ACTION_SETTINGS_DECBIGSTEP,BUTTON_,                       BUTTON_ },  button_context_settings  button_context_yesno  button_context_bmark 
static const struct button_mapping button_context_quickscreen[]  = {
    { ACTION_QS_LEFT,            BUTTON_VOL_DOWN,               BUTTON_NONE },
    { ACTION_QS_LEFT,            BUTTON_VOL_DOWN|BUTTON_REPEAT, BUTTON_NONE },
    { ACTION_QS_RIGHT,           BUTTON_VOL_UP,                 BUTTON_NONE },
    { ACTION_QS_RIGHT,           BUTTON_VOL_UP|BUTTON_REPEAT,   BUTTON_NONE },
    { ACTION_QS_DOWN,            BUTTON_FF,                     BUTTON_NONE },
    { ACTION_QS_DOWN,            BUTTON_FF|BUTTON_REPEAT,       BUTTON_NONE },
    { ACTION_QS_TOP,             BUTTON_REW,                    BUTTON_NONE },
    { ACTION_QS_TOP,             BUTTON_REW|BUTTON_REPEAT,      BUTTON_NONE },

    LAST_ITEM_IN_LIST__NEXTLIST(CONTEXT_STD)
}; button_context_quickscreen   { ACTION_PS_INC_SMALL,       BUTTON_VOL_UP,                 BUTTON_NONE },   { ACTION_PS_INC_BIG,         BUTTON_VOL_UP|BUTTON_REPEAT,   BUTTON_NONE },   { ACTION_PS_DEC_SMALL,       BUTTON_VOL_DOWN,               BUTTON_NONE },   { ACTION_PS_DEC_BIG,         BUTTON_VOL_DOWN|BUTTON_REPEAT, BUTTON_NONE },  button_context_pitchscreen   { ACTION_FM_RECORD,          BUTTON_,                       BUTTON_ },   { ACTION_FM_FREEZE,          BUTTON_,                       BUTTON_ },   { ACTION_FM_RECORD_DBLPRE,   BUTTON_,                       BUTTON_ },  button_context_radio   { ACTION_REC_LCD,            BUTTON_,                       BUTTON_ },   { ACTION_REC_F2,             BUTTON_,                       BUTTON_ },   { ACTION_REC_F3,             BUTTON_,                       BUTTON_ },  button_context_recscreen   { ACTION_KBD_CURSOR_LEFT,    BUTTON_,                       BUTTON_ },   { ACTION_KBD_CURSOR_RIGHT,   BUTTON_,                       BUTTON_ },  button_context_keyboard 
        case CONTEXT_QUICKSCREEN:
            return button_context_quickscreen;
