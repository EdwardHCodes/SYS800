
 * Copyright (c) 2011, Kustaa Nyholm / SpareTimeLabs
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list 
 * of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright notice, this 
 * list of conditions and the following disclaimer in the documentation and/or other
 * materials provided with the distribution.
 *  
 * Neither the name of the Kustaa Nyholm or SpareTimeLabs nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 *
 * JTermios provides a limited cross platform unix termios type interface to
 * serial ports.
 * 
 * @author nyholku
 * 
  Note About the read/write methods and the buffers This library provides read/write(byte[] buffer,int length) without an offset to the buffer. This is because it appears that there is a bug in JNA's use of ByteBuffer.wrap(byte[] buffer,int offset,int length) in that the offset gets ignored. So this needs to be handled in the JTermiosImpl classes or somewhere else. Handling the offset requires a buffer to hold  temporarily the bytes. I deemed that it is better to pass the buck ie burden  to the clients of JTermios as they know better what size of buffer (if any)  is best and because then the implementation of that buffer is in one place,  not in each of the JTermiosImpl classes. In this way Mac OS X (and presumably Linux/Unix) does need not a buffer at all in JTermiosImpl. Windows needs a JNA Memory buffer anyway because of the limitations inherent in using  Overlapped I/O with JNA. The 'constants' here, which are equivalent to the corresponding #defines in C come from Mac OS X 10.6.6 / x86_64 architecture Every implementing class for each architecture needs to initialize them in  their JTermiosImpl constructor. For Windows the termios functionality is totally emulated so jtermios.windows.JTermiosImpl can just use these default values as can obviously jtermios.macosx.JTermiosImpl (at least for x86_64 architecture). Much as we liked these cannot be defined 'final' but should be treated immutable all the same. sys/filio.h stuff fcntl.h stuff errno.h stuff termios.h stuff Is this standard ? Not available on Mac OS Xpublic static int CCTS_OFLOW = 0x00010000; // Not linuxpublic static int CRTS_IFLOW = 0x00020000; // Not linuxpublic static int CDTR_IFLOW = 0x00040000; // Not linuxpublic static int CDSR_OFLOW = 0x00080000; // Not linuxpublic static int CCAR_OFLOW = 0x00100000; // Not linux Not Linux Not Linux Not Linux Not Linux poll.h stuffpublic static short POLLRDNORM = 0x0040; // Not Linuxpublic static short POLLRDBAND = 0x0080; // Not Linuxpublic static short POLLWRNORM = 0x0004; // Not Linuxpublic static short POLLWRBAND = 0x0100; // Not Linux misc stuff Ctrl-Q; Ctrl-S; reference to single arc/os specific implementation*
                     *
                     *
			 * Size of a size_t integer, in bytes.
			 Platform.is64Bit() ? 8 : 4;*
			 * Create a zero-valued Size.
			 *
			 * Create a Size with the given value.
			 *
		 * poll() on Windows has not been implemented and while implemented on
		 * Mac OS X, does not work for devices.
		  INSTANTIATION *
	 * Unlike Linux select this does not modify 'timeout' so it can be re-used.
	 * 
	  initialization 
 * Copyright (c) 2011, Kustaa Nyholm / SpareTimeLabs
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list 
 * of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright notice, this 
 * list of conditions and the following disclaimer in the documentation and/or other
 * materials provided with the distribution.
 *  
 * Neither the name of the Kustaa Nyholm or SpareTimeLabs nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 *
 * JTermios provides a limited cross platform unix termios type interface to
 * serial ports.
 * 
 * @author nyholku
 * 
  Note About the read/write methods and the buffers This library provides read/write(byte[] buffer,int length) without an offset to the buffer. This is because it appears that there is a bug in JNA's use of ByteBuffer.wrap(byte[] buffer,int offset,int length) in that the offset gets ignored. So this needs to be handled in the JTermiosImpl classes or somewhere else. Handling the offset requires a buffer to hold  temporarily the bytes. I deemed that it is better to pass the buck ie burden  to the clients of JTermios as they know better what size of buffer (if any)  is best and because then the implementation of that buffer is in one place,  not in each of the JTermiosImpl classes. In this way Mac OS X (and presumably Linux/Unix) does need not a buffer at all in JTermiosImpl. Windows needs a JNA Memory buffer anyway because of the limitations inherent in using  Overlapped I/O with JNA. The 'constants' here, which are equivalent to the corresponding #defines in C come from Mac OS X 10.6.6 / x86_64 architecture Every implementing class for each architecture needs to initialize them in  their JTermiosImpl constructor. For Windows the termios functionality is totally emulated so jtermios.windows.JTermiosImpl can just use these default values as can obviously jtermios.macosx.JTermiosImpl (at least for x86_64 architecture). Much as we liked these cannot be defined 'final' but should be treated immutable all the same. sys/filio.h stuff fcntl.h stuff errno.h stuff termios.h stuff Is this standard ? Not available on Mac OS Xpublic static int CCTS_OFLOW = 0x00010000; // Not linuxpublic static int CRTS_IFLOW = 0x00020000; // Not linuxpublic static int CDTR_IFLOW = 0x00040000; // Not linuxpublic static int CDSR_OFLOW = 0x00080000; // Not linuxpublic static int CCAR_OFLOW = 0x00100000; // Not linux Not Linux Not Linux Not Linux Not Linux poll.h stuffpublic static short POLLRDNORM = 0x0040; // Not Linuxpublic static short POLLRDBAND = 0x0080; // Not Linuxpublic static short POLLWRNORM = 0x0004; // Not Linuxpublic static short POLLWRBAND = 0x0100; // Not Linux misc stuff Ctrl-Q; Ctrl-S; reference to single arc/os specific implementation*
                     *
                     *
			 * Size of a size_t integer, in bytes.
			 Platform.is64Bit() ? 8 : 4;*
			 * Create a zero-valued Size.
			 *
			 * Create a Size with the given value.
			 *
		 * poll() on Windows has not been implemented and while implemented on
		 * Mac OS X, does not work for devices.
		  INSTANTIATION *
	 * Unlike Linux select this does not modify 'timeout' so it can be re-used.
	 * 
	  initialization 
 * Copyright (c) 2011, Kustaa Nyholm / SpareTimeLabs
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list 
 * of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright notice, this 
 * list of conditions and the following disclaimer in the documentation and/or other
 * materials provided with the distribution.
 *  
 * Neither the name of the Kustaa Nyholm or SpareTimeLabs nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 *
 * JTermios provides a limited cross platform unix termios type interface to
 * serial ports.
 * 
 * @author nyholku
 * 
  Note About the read/write methods and the buffers This library provides read/write(byte[] buffer,int length) without an offset to the buffer. This is because it appears that there is a bug in JNA's use of ByteBuffer.wrap(byte[] buffer,int offset,int length) in that the offset gets ignored. So this needs to be handled in the JTermiosImpl classes or somewhere else. Handling the offset requires a buffer to hold  temporarily the bytes. I deemed that it is better to pass the buck ie burden  to the clients of JTermios as they know better what size of buffer (if any)  is best and because then the implementation of that buffer is in one place,  not in each of the JTermiosImpl classes. In this way Mac OS X (and presumably Linux/Unix) does need not a buffer at all in JTermiosImpl. Windows needs a JNA Memory buffer anyway because of the limitations inherent in using  Overlapped I/O with JNA. The 'constants' here, which are equivalent to the corresponding #defines in C come from Mac OS X 10.6.6 / x86_64 architecture Every implementing class for each architecture needs to initialize them in  their JTermiosImpl constructor. For Windows the termios functionality is totally emulated so jtermios.windows.JTermiosImpl can just use these default values as can obviously jtermios.macosx.JTermiosImpl (at least for x86_64 architecture). Much as we liked these cannot be defined 'final' but should be treated immutable all the same. sys/filio.h stuff fcntl.h stuff errno.h stuff termios.h stuff Is this standard ? Not available on Mac OS Xpublic static int CCTS_OFLOW = 0x00010000; // Not linuxpublic static int CRTS_IFLOW = 0x00020000; // Not linuxpublic static int CDTR_IFLOW = 0x00040000; // Not linuxpublic static int CDSR_OFLOW = 0x00080000; // Not linuxpublic static int CCAR_OFLOW = 0x00100000; // Not linux Not Linux Not Linux Not Linux Not Linux poll.h stuffpublic static short POLLRDNORM = 0x0040; // Not Linuxpublic static short POLLRDBAND = 0x0080; // Not Linuxpublic static short POLLWRNORM = 0x0004; // Not Linuxpublic static short POLLWRBAND = 0x0100; // Not Linux misc stuff Ctrl-Q; Ctrl-S; reference to single arc/os specific implementation*
                     *
                     *
			 * Size of a size_t integer, in bytes.
			 Platform.is64Bit() ? 8 : 4;*
			 * Create a zero-valued Size.
			 *
			 * Create a Size with the given value.
			 *
		 * poll() on Windows has not been implemented and while implemented on
		 * Mac OS X, does not work for devices.
		  INSTANTIATION *
	 * Unlike Linux select this does not modify 'timeout' so it can be re-used.
	 * 
	  initialization 
 * Copyright (c) 2011, Kustaa Nyholm / SpareTimeLabs
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list 
 * of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright notice, this 
 * list of conditions and the following disclaimer in the documentation and/or other
 * materials provided with the distribution.
 *  
 * Neither the name of the Kustaa Nyholm or SpareTimeLabs nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 *
 * JTermios provides a limited cross platform unix termios type interface to
 * serial ports.
 * 
 * @author nyholku
 * 
  Note About the read/write methods and the buffers This library provides read/write(byte[] buffer,int length) without an offset to the buffer. This is because it appears that there is a bug in JNA's use of ByteBuffer.wrap(byte[] buffer,int offset,int length) in that the offset gets ignored. So this needs to be handled in the JTermiosImpl classes or somewhere else. Handling the offset requires a buffer to hold  temporarily the bytes. I deemed that it is better to pass the buck ie burden  to the clients of JTermios as they know better what size of buffer (if any)  is best and because then the implementation of that buffer is in one place,  not in each of the JTermiosImpl classes. In this way Mac OS X (and presumably Linux/Unix) does need not a buffer at all in JTermiosImpl. Windows needs a JNA Memory buffer anyway because of the limitations inherent in using  Overlapped I/O with JNA. The 'constants' here, which are equivalent to the corresponding #defines in C come from Mac OS X 10.6.6 / x86_64 architecture Every implementing class for each architecture needs to initialize them in  their JTermiosImpl constructor. For Windows the termios functionality is totally emulated so jtermios.windows.JTermiosImpl can just use these default values as can obviously jtermios.macosx.JTermiosImpl (at least for x86_64 architecture). Much as we liked these cannot be defined 'final' but should be treated immutable all the same. sys/filio.h stuff fcntl.h stuff errno.h stuff termios.h stuff Is this standard ? Not available on Mac OS Xpublic static int CCTS_OFLOW = 0x00010000; // Not linuxpublic static int CRTS_IFLOW = 0x00020000; // Not linuxpublic static int CDTR_IFLOW = 0x00040000; // Not linuxpublic static int CDSR_OFLOW = 0x00080000; // Not linuxpublic static int CCAR_OFLOW = 0x00100000; // Not linux Not Linux Not Linux Not Linux Not Linux poll.h stuffpublic static short POLLRDNORM = 0x0040; // Not Linuxpublic static short POLLRDBAND = 0x0080; // Not Linuxpublic static short POLLWRNORM = 0x0004; // Not Linuxpublic static short POLLWRBAND = 0x0100; // Not Linux misc stuff Ctrl-Q; Ctrl-S; reference to single arc/os specific implementation*
                     *
                     *
			 * Size of a size_t integer, in bytes.
			 Platform.is64Bit() ? 8 : 4;*
			 * Create a zero-valued Size.
			 *
			 * Create a Size with the given value.
			 *
		 * poll() on Windows has not been implemented and while implemented on
		 * Mac OS X, does not work for devices.
		  INSTANTIATION *
	 * Unlike Linux select this does not modify 'timeout' so it can be re-used.
	 * 
	  initialization 