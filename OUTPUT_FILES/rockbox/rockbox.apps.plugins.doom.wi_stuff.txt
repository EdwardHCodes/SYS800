 Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *  Intermission screens.
 *
 *-----------------------------------------------------------------------------
  Data needed to add patches to full screen intermission pics. Patches are statistics messages, and animations. Loads of by-pixel layout and placement, offsets etc. Different vetween registered DOOM (1994) and  Ultimate DOOM - Final edition (retail, 1995?). This is supposedly ignored for commercial  release (aka DOOM II), which had 34 maps  in one episode. So there. Not used in ticsU #define PAUSELEN    (TICRATE*2)U #define SCORESTEP    100U #define ANIMPERIOD    32 pixel distance from "(YOU)" to "PLAYER N"U #define STARDIST  10U #define WK 1 GLOBAL LOCATIONS SINGLE-PLAYER STUFF proff/nicolas 09/20/98 -- changed for hi-res#define SP_TIMEY      (SCREENHEIGHT-32) NET GAME STUFF Used to display the frags matrix at endgame DEATHMATCH STUFF These animation variables, structures, etc. are used for the DOOM/Ultimate DOOM intermission screen animations.  This is totally different from any sprite or texture/flat animations determined by patch entry occasional continuous x/y coordinate pair structure Animation. There is another anim_t used in p_spec. period in tics between animations number of animation frames location of animation ALWAYS: n/a, RANDOM: period deviation (<256), LEVEL: level ALWAYS: n/a, RANDOM: random base period, LEVEL: n/a actual graphics for frames of animations
    * cphipps - const
     following must be initialized to zero before use! next value of bcnt (used in conjunction with period) last drawn animation frame next frame number to animate used by RANDOM and LEVEL when animating Episode 0 World Map location of level 0 (CJ) location of level 1 (CJ) location of level 2 (CJ) location of level 3 (CJ) location of level 4 (CJ) location of level 5 (CJ) location of level 6 (CJ) location of level 7 (CJ) location of level 8 (CJ) Episode 1 World Map should go here location of level 0 (CJ) location of level 1 (CJ) location of level 2 (CJ) location of level 3 (CJ) location of level 4 (CJ) location of level 5 (CJ) location of level 6 (CJ) location of level 7 (CJ) location of level 8 (CJ) Episode 2 World Map should go here location of level 0 (CJ) location of level 1 (CJ) location of level 2 (CJ) location of level 3 (CJ) location of level 4 (CJ) location of level 5 (CJ) location of level 6 (CJ) location of level 7 (CJ) location of level 8 (CJ) Animation locations for episode 0 (1). Using patches saves a lot of space,  as they replace 320x200 full screen frames. GENERAL DATA Locally used stuff. States for single-player in seconds#define SHOWLASTLOCDELAY  SHOWNEXTLOCDELAY used to accelerate or skip a stage killough 3/28/98: made global wbs->pnum specifies current state contains information passed into intermission wbs->plyr[] used for general timing used for timing of background animation signals to refresh everything for one frame  GRAPHICS You Are Here graphic splat %, : graphics 0-9 graphic minus sign "Finished!" graphics "Entering" graphic "secret" "Kills", "Scrt", "Items", "Frags" Time sucks. "killers", "victims" "Total", your face, your dead face "red P[1..MAXPLAYERS]" CODE ====================================================================
 * WI_levelNameLump
 * Purpore: Returns the name of the graphic lump containing the name of
 *          the given level.
 * Args:    Episode and level, and buffer (must by 9 chars) to write to
 * Returns: void
  ==================================================================== WI_slamBackground Purpose: Put the full-screen background up prior to patches Args:    none Returns: void limited to 8 characters background ==================================================================== WI_Responder Purpose: Draw animations on intermission background screen Args:    ev    -- event pointer, not actually used here. Returns: False -- dummy routine The ticker is used to detect keys  because of timing issues in netgames. ==================================================================== WI_drawLF Purpose: Draw the "Finished" level name before showing stats Args:    none Returns: void draw <LevelName> cph - get the graphic lump name and use it  CPhipps - patch drawing updated draw "Finished!" CPhipps - patch drawing updated ==================================================================== WI_drawEL Purpose: Draw introductory "Entering" and level name Args:    none Returns: void cph - get the graphic lump name  draw "Entering" CPhipps - patch drawing updated draw level CPhipps - patch drawing updated ====================================================================
 * WI_drawOnLnode
 * Purpose: Draw patches at a location based on episode/map
 * Args:    n   -- index to map# within episode
 *          c[] -- array of names of patches to be drawn
 * Returns: void
  draw stuff at a location by episode/map# CPhipps - patch drawing updated DEBUGjff 8/3/98 use logical output routine ==================================================================== WI_initAnimatedBack Purpose: Initialize pointers and styles for background animation Args:    none Returns: void no animation for DOOM2 init variables specify the next time to draw it ==================================================================== WI_updateAnimatedBack Purpose: Figure out what animation we do on this iteration Args:    none Returns: void gawd-awful hack for level anims ==================================================================== WI_drawAnimatedBack Purpose: Actually do the animation (whew!) Args:    none Returns: voidjff 4/25/98 Someone forgot commercial an enum CPhipps - patch drawing updated ==================================================================== WI_drawNum Purpose: Draws a number.  If digits > 0, then use that many digits          minimum, otherwise only use as many as necessary Args:    x, y   -- location          n      -- the number to be drawn          digits -- number of digits minimum or zero Returns: new x position after drawing (note we are going to the left) CPhipps - static make variable-length zeros 1 digit long figure out # of digits in # if non-number, do not draw it draw the new number CPhipps - patch drawing updated draw a minus sign if necessary CPhipps - patch drawing updated ==================================================================== WI_drawPercent Purpose: Draws a percentage, really just a call to WI_drawNum          after putting a percent sign out there Args:    x, y   -- location          p      -- the percentage value to be drawn, no negatives Returns: void CPhipps - static CPhipps - patch drawing updated ==================================================================== WI_drawTime Purpose: Draws the level completion time or par time, or "Sucks"          if 1 hour or more Args:    x, y   -- location          t      -- the time value to be drawn Returns: void CPhipps - static         - largely rewritten to display hours and use slightly better algorithm draw CPhipps - patch drawing updated "sucks" (maybe should be "addicted", even I've never had a 100 hour game ;) ==================================================================== WI_End Purpose: Unloads data structures (inverse of WI_Start) Args:    none Returns: void ==================================================================== WI_initNoState Purpose: Clear state, ready for end of level activity Args:    none Returns: void ==================================================================== WI_drawTimeStats Purpose: Put the times on the screen Args:    time, total time, par time, in seconds Returns: void cph - pulled from WI_drawStats below Ty 04/11/98: redid logic: should skip only if with pwad but without deh patch killough 2/22/98: skip drawing par times on pwads Ty 03/17/98: unless pars changed with deh patch&& !deh_pars)) ==================================================================== WI_updateNoState Purpose: Cycle until end of level activity is done Args:    none Returns: void ==================================================================== WI_initShowNextLoc Purpose: Prepare to show the next level's location Args:    none Returns: void ==================================================================== WI_updateShowNextLoc Purpose: Prepare to show the next level's location Args:    none Returns: void ==================================================================== WI_drawShowNextLoc Purpose: Show the next level's location on animated backgrounds Args:    none Returns: void draw animated background "Entering..." if not E1 or E2 draw a splat on taken cities. splat the secret level? draw flashing ptr draws which level you are entering.. check for MAP30 end game ==================================================================== WI_drawNoState Purpose: Draw the pointer and next location Args:    none Returns: void ==================================================================== WI_fragSum Purpose: Calculate frags for this player based on the current totals          of all the other players.  Subtract self-frags. Args:    playernum -- the player to be calculated Returns: the total frags for this player is this player playing? and it's not the player we're calculating JDC hack - negative frags. CPhipps - short, dynamically allocated frags matrix totals by player ==================================================================== WI_initDeathmatchStats Purpose: Set up to display DM stats at end of level.  Calculate          frags for all players. Args:    none Returns: void looping variables CPhipps - allocate data structures needed We're doing stats count how many times we've done a complete stat CPhipps - allocate frags line set all counts to zero ==================================================================== CPhipps - WI_endDeathmatchStats Purpose: Deallocate dynamically allocated DM stats data Args:    none Returns: void ==================================================================== WI_updateDeathmatchStats Purpose: Advance Deathmatch stats screen animation.  Calculate          frags for all players.  Lots of noise and drama around          the presentation. Args:    none Returns: void still ticking bang we're done with all 4 (or all we have to do) noise while counting Ty 03/17/98 3-digit frag count Ty 03/17/98 end 3-digit frag count ==================================================================== WI_drawDeathmatchStats Purpose: Draw the stats on the screen in a matrix Args:    none Returns: void proff/nicolas 09/20/98 -- changed for hi-res CPhipps - patch drawing updated draw animated background draw stat titles (top line) draw P?int trans = playernumtotrans[i]; draw stats Note: The term "Netgame" means a coop game ==================================================================== CPhipps - WI_endNetgameStats Purpose: Clean up coop game stats Args:    none Returns: void ==================================================================== WI_initNetgameStats Purpose: Prepare for coop game stats Args:    none Returns: void CPhipps - allocate these dynamically, blank with calloc set to true or false - did we have frags? ==================================================================== WI_updateNetgameStats Purpose: Calculate coop stats as we display them with noise and fury Args:    none Returns: void Comment: This stuff sure is complicated for what it does killough 2/22/98: Make secrets = 100% if maxsecret = 0: we had frags bang pop still got stuff to tally killough 2/22/98: Make secrets = 100% if maxsecret = 0: ==================================================================== WI_drawNetgameStats Purpose: Put the coop stats on the screen Args:    none Returns: void proff/nicolas 09/20/98 -- changed for hi-res CPhipps - patch drawing updated draw animated background draw stat titles (top line) draw statsint trans = playernumtotrans[i]; cph - show times in coop on the entering screen ==================================================================== WI_initStats Purpose: Get ready for single player stats Args:    none Returns: void Comment: Seems like we could do all these stats in a more generic          set of routines that weren't duplicated for dm, coop, sp CPhipps - allocate (awful code, I know, but saves changing it all) and initialise ==================================================================== WI_updateStats Purpose: Calculate solo stats Args:    none Returns: void killough 2/22/98: Make secrets = 100% if maxsecret = 0: killough 2/22/98: Make secrets = 100% if maxsecret = 0: ==================================================================== WI_drawStats Purpose: Put the solo stats on the screen Args:    none Returns: void proff/nicolas 09/20/98 -- changed for hi-res CPhipps - patch drawing updated line height draw animated background ==================================================================== WI_checkForAccelerate Purpose: See if the player has hit either the attack or use key          or mouse button.  If so we set acceleratestage to 1 and          all those display routines above jump right to the end. Args:    none Returns: void check for button presses to skip delays ==================================================================== WI_Ticker Purpose: Do various updates every gametic, for stats, animation,          checking that intermission music is running, etc. Args:    none Returns: void counter for general background animation intermission music ====================================================================
 * WI_loadData
 * Purpose: Initialize intermission data such as background graphics,
 *          patches, map names, etc.
 * Args:    none
 * Returns: void
 *
 * CPhipps - modified for new wad lump handling.
 *         - no longer preload most graphics, other funcs can use
 *           them by name
  limited to 8 characters MONDO HACK! animations HACK ALERT! numbers 0-9 ==================================================================== WI_unloadData Purpose: Free up the space allocated during WI_loadData Args:    none Returns: void CPhipps - reverse of WI_loadData, goes through the same lumps, but unlocking limited to 8 characters cph - unlock gamemode dependent stuff here MONDO HACK! animations numbers 0-9 ==================================================================== WI_Drawer Purpose: Call the appropriate stats drawing routine depending on          what kind of game is being played (DM, coop, solo) Args:    none Returns: void ==================================================================== WI_initVariables Purpose: Initialize the intermission information structure          Note: wbstartstruct_t is defined in d_player.h Args:    wbstartstruct -- pointer to the structure with the data Returns: void probably only useful in MAP30 ==================================================================== WI_Start Purpose: Call the various init routines          Note: wbstartstruct_t is defined in d_player.h Args:    wbstartstruct -- pointer to the structure with the          intermission data Returns: void Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *  Intermission screens.
 *
 *-----------------------------------------------------------------------------
  Data needed to add patches to full screen intermission pics. Patches are statistics messages, and animations. Loads of by-pixel layout and placement, offsets etc. Different vetween registered DOOM (1994) and  Ultimate DOOM - Final edition (retail, 1995?). This is supposedly ignored for commercial  release (aka DOOM II), which had 34 maps  in one episode. So there. Not used in ticsU #define PAUSELEN    (TICRATE*2)U #define SCORESTEP    100U #define ANIMPERIOD    32 pixel distance from "(YOU)" to "PLAYER N"U #define STARDIST  10U #define WK 1 GLOBAL LOCATIONS SINGLE-PLAYER STUFF proff/nicolas 09/20/98 -- changed for hi-res#define SP_TIMEY      (SCREENHEIGHT-32) NET GAME STUFF Used to display the frags matrix at endgame DEATHMATCH STUFF These animation variables, structures, etc. are used for the DOOM/Ultimate DOOM intermission screen animations.  This is totally different from any sprite or texture/flat animations determined by patch entry occasional continuous x/y coordinate pair structure Animation. There is another anim_t used in p_spec. period in tics between animations number of animation frames location of animation ALWAYS: n/a, RANDOM: period deviation (<256), LEVEL: level ALWAYS: n/a, RANDOM: random base period, LEVEL: n/a actual graphics for frames of animations
    * cphipps - const
     following must be initialized to zero before use! next value of bcnt (used in conjunction with period) last drawn animation frame next frame number to animate used by RANDOM and LEVEL when animating Episode 0 World Map location of level 0 (CJ) location of level 1 (CJ) location of level 2 (CJ) location of level 3 (CJ) location of level 4 (CJ) location of level 5 (CJ) location of level 6 (CJ) location of level 7 (CJ) location of level 8 (CJ) Episode 1 World Map should go here location of level 0 (CJ) location of level 1 (CJ) location of level 2 (CJ) location of level 3 (CJ) location of level 4 (CJ) location of level 5 (CJ) location of level 6 (CJ) location of level 7 (CJ) location of level 8 (CJ) Episode 2 World Map should go here location of level 0 (CJ) location of level 1 (CJ) location of level 2 (CJ) location of level 3 (CJ) location of level 4 (CJ) location of level 5 (CJ) location of level 6 (CJ) location of level 7 (CJ) location of level 8 (CJ) Animation locations for episode 0 (1). Using patches saves a lot of space,  as they replace 320x200 full screen frames. GENERAL DATA Locally used stuff. States for single-player in seconds#define SHOWLASTLOCDELAY  SHOWNEXTLOCDELAY used to accelerate or skip a stage killough 3/28/98: made global wbs->pnum specifies current state contains information passed into intermission wbs->plyr[] used for general timing used for timing of background animation signals to refresh everything for one frame  GRAPHICS You Are Here graphic splat %, : graphics 0-9 graphic minus sign "Finished!" graphics "Entering" graphic "secret" "Kills", "Scrt", "Items", "Frags" Time sucks. "killers", "victims" "Total", your face, your dead face "red P[1..MAXPLAYERS]" CODE ====================================================================
 * WI_levelNameLump
 * Purpore: Returns the name of the graphic lump containing the name of
 *          the given level.
 * Args:    Episode and level, and buffer (must by 9 chars) to write to
 * Returns: void
  ==================================================================== WI_slamBackground Purpose: Put the full-screen background up prior to patches Args:    none Returns: void limited to 8 characters background ==================================================================== WI_Responder Purpose: Draw animations on intermission background screen Args:    ev    -- event pointer, not actually used here. Returns: False -- dummy routine The ticker is used to detect keys  because of timing issues in netgames. ==================================================================== WI_drawLF Purpose: Draw the "Finished" level name before showing stats Args:    none Returns: void draw <LevelName> cph - get the graphic lump name and use it  CPhipps - patch drawing updated draw "Finished!" CPhipps - patch drawing updated ==================================================================== WI_drawEL Purpose: Draw introductory "Entering" and level name Args:    none Returns: void cph - get the graphic lump name  draw "Entering" CPhipps - patch drawing updated draw level CPhipps - patch drawing updated ====================================================================
 * WI_drawOnLnode
 * Purpose: Draw patches at a location based on episode/map
 * Args:    n   -- index to map# within episode
 *          c[] -- array of names of patches to be drawn
 * Returns: void
  draw stuff at a location by episode/map# CPhipps - patch drawing updated DEBUGjff 8/3/98 use logical output routine ==================================================================== WI_initAnimatedBack Purpose: Initialize pointers and styles for background animation Args:    none Returns: void no animation for DOOM2 init variables specify the next time to draw it ==================================================================== WI_updateAnimatedBack Purpose: Figure out what animation we do on this iteration Args:    none Returns: void gawd-awful hack for level anims ==================================================================== WI_drawAnimatedBack Purpose: Actually do the animation (whew!) Args:    none Returns: voidjff 4/25/98 Someone forgot commercial an enum CPhipps - patch drawing updated ==================================================================== WI_drawNum Purpose: Draws a number.  If digits > 0, then use that many digits          minimum, otherwise only use as many as necessary Args:    x, y   -- location          n      -- the number to be drawn          digits -- number of digits minimum or zero Returns: new x position after drawing (note we are going to the left) CPhipps - static make variable-length zeros 1 digit long figure out # of digits in # if non-number, do not draw it draw the new number CPhipps - patch drawing updated draw a minus sign if necessary CPhipps - patch drawing updated ==================================================================== WI_drawPercent Purpose: Draws a percentage, really just a call to WI_drawNum          after putting a percent sign out there Args:    x, y   -- location          p      -- the percentage value to be drawn, no negatives Returns: void CPhipps - static CPhipps - patch drawing updated ==================================================================== WI_drawTime Purpose: Draws the level completion time or par time, or "Sucks"          if 1 hour or more Args:    x, y   -- location          t      -- the time value to be drawn Returns: void CPhipps - static         - largely rewritten to display hours and use slightly better algorithm draw CPhipps - patch drawing updated "sucks" (maybe should be "addicted", even I've never had a 100 hour game ;) ==================================================================== WI_End Purpose: Unloads data structures (inverse of WI_Start) Args:    none Returns: void ==================================================================== WI_initNoState Purpose: Clear state, ready for end of level activity Args:    none Returns: void ==================================================================== WI_drawTimeStats Purpose: Put the times on the screen Args:    time, total time, par time, in seconds Returns: void cph - pulled from WI_drawStats below Ty 04/11/98: redid logic: should skip only if with pwad but without deh patch killough 2/22/98: skip drawing par times on pwads Ty 03/17/98: unless pars changed with deh patch&& !deh_pars)) ==================================================================== WI_updateNoState Purpose: Cycle until end of level activity is done Args:    none Returns: void ==================================================================== WI_initShowNextLoc Purpose: Prepare to show the next level's location Args:    none Returns: void ==================================================================== WI_updateShowNextLoc Purpose: Prepare to show the next level's location Args:    none Returns: void ==================================================================== WI_drawShowNextLoc Purpose: Show the next level's location on animated backgrounds Args:    none Returns: void draw animated background "Entering..." if not E1 or E2 draw a splat on taken cities. splat the secret level? draw flashing ptr draws which level you are entering.. check for MAP30 end game ==================================================================== WI_drawNoState Purpose: Draw the pointer and next location Args:    none Returns: void ==================================================================== WI_fragSum Purpose: Calculate frags for this player based on the current totals          of all the other players.  Subtract self-frags. Args:    playernum -- the player to be calculated Returns: the total frags for this player is this player playing? and it's not the player we're calculating JDC hack - negative frags. CPhipps - short, dynamically allocated frags matrix totals by player ==================================================================== WI_initDeathmatchStats Purpose: Set up to display DM stats at end of level.  Calculate          frags for all players. Args:    none Returns: void looping variables CPhipps - allocate data structures needed We're doing stats count how many times we've done a complete stat CPhipps - allocate frags line set all counts to zero ==================================================================== CPhipps - WI_endDeathmatchStats Purpose: Deallocate dynamically allocated DM stats data Args:    none Returns: void ==================================================================== WI_updateDeathmatchStats Purpose: Advance Deathmatch stats screen animation.  Calculate          frags for all players.  Lots of noise and drama around          the presentation. Args:    none Returns: void still ticking bang we're done with all 4 (or all we have to do) noise while counting Ty 03/17/98 3-digit frag count Ty 03/17/98 end 3-digit frag count ==================================================================== WI_drawDeathmatchStats Purpose: Draw the stats on the screen in a matrix Args:    none Returns: void proff/nicolas 09/20/98 -- changed for hi-res CPhipps - patch drawing updated draw animated background draw stat titles (top line) draw P?int trans = playernumtotrans[i]; draw stats Note: The term "Netgame" means a coop game ==================================================================== CPhipps - WI_endNetgameStats Purpose: Clean up coop game stats Args:    none Returns: void ==================================================================== WI_initNetgameStats Purpose: Prepare for coop game stats Args:    none Returns: void CPhipps - allocate these dynamically, blank with calloc set to true or false - did we have frags? ==================================================================== WI_updateNetgameStats Purpose: Calculate coop stats as we display them with noise and fury Args:    none Returns: void Comment: This stuff sure is complicated for what it does killough 2/22/98: Make secrets = 100% if maxsecret = 0: we had frags bang pop still got stuff to tally killough 2/22/98: Make secrets = 100% if maxsecret = 0: ==================================================================== WI_drawNetgameStats Purpose: Put the coop stats on the screen Args:    none Returns: void proff/nicolas 09/20/98 -- changed for hi-res CPhipps - patch drawing updated draw animated background draw stat titles (top line) draw statsint trans = playernumtotrans[i]; cph - show times in coop on the entering screen ==================================================================== WI_initStats Purpose: Get ready for single player stats Args:    none Returns: void Comment: Seems like we could do all these stats in a more generic          set of routines that weren't duplicated for dm, coop, sp CPhipps - allocate (awful code, I know, but saves changing it all) and initialise ==================================================================== WI_updateStats Purpose: Calculate solo stats Args:    none Returns: void killough 2/22/98: Make secrets = 100% if maxsecret = 0: killough 2/22/98: Make secrets = 100% if maxsecret = 0: ==================================================================== WI_drawStats Purpose: Put the solo stats on the screen Args:    none Returns: void proff/nicolas 09/20/98 -- changed for hi-res CPhipps - patch drawing updated line height draw animated background ==================================================================== WI_checkForAccelerate Purpose: See if the player has hit either the attack or use key          or mouse button.  If so we set acceleratestage to 1 and          all those display routines above jump right to the end. Args:    none Returns: void check for button presses to skip delays ==================================================================== WI_Ticker Purpose: Do various updates every gametic, for stats, animation,          checking that intermission music is running, etc. Args:    none Returns: void counter for general background animation intermission music ====================================================================
 * WI_loadData
 * Purpose: Initialize intermission data such as background graphics,
 *          patches, map names, etc.
 * Args:    none
 * Returns: void
 *
 * CPhipps - modified for new wad lump handling.
 *         - no longer preload most graphics, other funcs can use
 *           them by name
  limited to 8 characters MONDO HACK! animations HACK ALERT! numbers 0-9 ==================================================================== WI_unloadData Purpose: Free up the space allocated during WI_loadData Args:    none Returns: void CPhipps - reverse of WI_loadData, goes through the same lumps, but unlocking limited to 8 characters cph - unlock gamemode dependent stuff here MONDO HACK! animations numbers 0-9 ==================================================================== WI_Drawer Purpose: Call the appropriate stats drawing routine depending on          what kind of game is being played (DM, coop, solo) Args:    none Returns: void ==================================================================== WI_initVariables Purpose: Initialize the intermission information structure          Note: wbstartstruct_t is defined in d_player.h Args:    wbstartstruct -- pointer to the structure with the data Returns: void probably only useful in MAP30 ==================================================================== WI_Start Purpose: Call the various init routines          Note: wbstartstruct_t is defined in d_player.h Args:    wbstartstruct -- pointer to the structure with the          intermission data Returns: void Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *  Intermission screens.
 *
 *-----------------------------------------------------------------------------
  Data needed to add patches to full screen intermission pics. Patches are statistics messages, and animations. Loads of by-pixel layout and placement, offsets etc. Different vetween registered DOOM (1994) and  Ultimate DOOM - Final edition (retail, 1995?). This is supposedly ignored for commercial  release (aka DOOM II), which had 34 maps  in one episode. So there. Not used in ticsU #define PAUSELEN    (TICRATE*2)U #define SCORESTEP    100U #define ANIMPERIOD    32 pixel distance from "(YOU)" to "PLAYER N"U #define STARDIST  10U #define WK 1 GLOBAL LOCATIONS SINGLE-PLAYER STUFF proff/nicolas 09/20/98 -- changed for hi-res#define SP_TIMEY      (SCREENHEIGHT-32) NET GAME STUFF Used to display the frags matrix at endgame DEATHMATCH STUFF These animation variables, structures, etc. are used for the DOOM/Ultimate DOOM intermission screen animations.  This is totally different from any sprite or texture/flat animations determined by patch entry occasional continuous x/y coordinate pair structure Animation. There is another anim_t used in p_spec. period in tics between animations number of animation frames location of animation ALWAYS: n/a, RANDOM: period deviation (<256), LEVEL: level ALWAYS: n/a, RANDOM: random base period, LEVEL: n/a actual graphics for frames of animations
    * cphipps - const
     following must be initialized to zero before use! next value of bcnt (used in conjunction with period) last drawn animation frame next frame number to animate used by RANDOM and LEVEL when animating Episode 0 World Map location of level 0 (CJ) location of level 1 (CJ) location of level 2 (CJ) location of level 3 (CJ) location of level 4 (CJ) location of level 5 (CJ) location of level 6 (CJ) location of level 7 (CJ) location of level 8 (CJ) Episode 1 World Map should go here location of level 0 (CJ) location of level 1 (CJ) location of level 2 (CJ) location of level 3 (CJ) location of level 4 (CJ) location of level 5 (CJ) location of level 6 (CJ) location of level 7 (CJ) location of level 8 (CJ) Episode 2 World Map should go here location of level 0 (CJ) location of level 1 (CJ) location of level 2 (CJ) location of level 3 (CJ) location of level 4 (CJ) location of level 5 (CJ) location of level 6 (CJ) location of level 7 (CJ) location of level 8 (CJ) Animation locations for episode 0 (1). Using patches saves a lot of space,  as they replace 320x200 full screen frames. GENERAL DATA Locally used stuff. States for single-player in seconds#define SHOWLASTLOCDELAY  SHOWNEXTLOCDELAY used to accelerate or skip a stage killough 3/28/98: made global wbs->pnum specifies current state contains information passed into intermission wbs->plyr[] used for general timing used for timing of background animation signals to refresh everything for one frame  GRAPHICS You Are Here graphic splat %, : graphics 0-9 graphic minus sign "Finished!" graphics "Entering" graphic "secret" "Kills", "Scrt", "Items", "Frags" Time sucks. "killers", "victims" "Total", your face, your dead face "red P[1..MAXPLAYERS]" CODE ====================================================================
 * WI_levelNameLump
 * Purpore: Returns the name of the graphic lump containing the name of
 *          the given level.
 * Args:    Episode and level, and buffer (must by 9 chars) to write to
 * Returns: void
  ==================================================================== WI_slamBackground Purpose: Put the full-screen background up prior to patches Args:    none Returns: void limited to 8 characters background ==================================================================== WI_Responder Purpose: Draw animations on intermission background screen Args:    ev    -- event pointer, not actually used here. Returns: False -- dummy routine The ticker is used to detect keys  because of timing issues in netgames. ==================================================================== WI_drawLF Purpose: Draw the "Finished" level name before showing stats Args:    none Returns: void draw <LevelName> cph - get the graphic lump name and use it  CPhipps - patch drawing updated draw "Finished!" CPhipps - patch drawing updated ==================================================================== WI_drawEL Purpose: Draw introductory "Entering" and level name Args:    none Returns: void cph - get the graphic lump name  draw "Entering" CPhipps - patch drawing updated draw level CPhipps - patch drawing updated ====================================================================
 * WI_drawOnLnode
 * Purpose: Draw patches at a location based on episode/map
 * Args:    n   -- index to map# within episode
 *          c[] -- array of names of patches to be drawn
 * Returns: void
  draw stuff at a location by episode/map# CPhipps - patch drawing updated DEBUGjff 8/3/98 use logical output routine ==================================================================== WI_initAnimatedBack Purpose: Initialize pointers and styles for background animation Args:    none Returns: void no animation for DOOM2 init variables specify the next time to draw it ==================================================================== WI_updateAnimatedBack Purpose: Figure out what animation we do on this iteration Args:    none Returns: void gawd-awful hack for level anims ==================================================================== WI_drawAnimatedBack Purpose: Actually do the animation (whew!) Args:    none Returns: voidjff 4/25/98 Someone forgot commercial an enum CPhipps - patch drawing updated ==================================================================== WI_drawNum Purpose: Draws a number.  If digits > 0, then use that many digits          minimum, otherwise only use as many as necessary Args:    x, y   -- location          n      -- the number to be drawn          digits -- number of digits minimum or zero Returns: new x position after drawing (note we are going to the left) CPhipps - static make variable-length zeros 1 digit long figure out # of digits in # if non-number, do not draw it draw the new number CPhipps - patch drawing updated draw a minus sign if necessary CPhipps - patch drawing updated ==================================================================== WI_drawPercent Purpose: Draws a percentage, really just a call to WI_drawNum          after putting a percent sign out there Args:    x, y   -- location          p      -- the percentage value to be drawn, no negatives Returns: void CPhipps - static CPhipps - patch drawing updated ==================================================================== WI_drawTime Purpose: Draws the level completion time or par time, or "Sucks"          if 1 hour or more Args:    x, y   -- location          t      -- the time value to be drawn Returns: void CPhipps - static         - largely rewritten to display hours and use slightly better algorithm draw CPhipps - patch drawing updated "sucks" (maybe should be "addicted", even I've never had a 100 hour game ;) ==================================================================== WI_End Purpose: Unloads data structures (inverse of WI_Start) Args:    none Returns: void ==================================================================== WI_initNoState Purpose: Clear state, ready for end of level activity Args:    none Returns: void ==================================================================== WI_drawTimeStats Purpose: Put the times on the screen Args:    time, total time, par time, in seconds Returns: void cph - pulled from WI_drawStats below Ty 04/11/98: redid logic: should skip only if with pwad but without deh patch killough 2/22/98: skip drawing par times on pwads Ty 03/17/98: unless pars changed with deh patch&& !deh_pars)) ==================================================================== WI_updateNoState Purpose: Cycle until end of level activity is done Args:    none Returns: void ==================================================================== WI_initShowNextLoc Purpose: Prepare to show the next level's location Args:    none Returns: void ==================================================================== WI_updateShowNextLoc Purpose: Prepare to show the next level's location Args:    none Returns: void ==================================================================== WI_drawShowNextLoc Purpose: Show the next level's location on animated backgrounds Args:    none Returns: void draw animated background "Entering..." if not E1 or E2 draw a splat on taken cities. splat the secret level? draw flashing ptr draws which level you are entering.. check for MAP30 end game ==================================================================== WI_drawNoState Purpose: Draw the pointer and next location Args:    none Returns: void ==================================================================== WI_fragSum Purpose: Calculate frags for this player based on the current totals          of all the other players.  Subtract self-frags. Args:    playernum -- the player to be calculated Returns: the total frags for this player is this player playing? and it's not the player we're calculating JDC hack - negative frags. CPhipps - short, dynamically allocated frags matrix totals by player ==================================================================== WI_initDeathmatchStats Purpose: Set up to display DM stats at end of level.  Calculate          frags for all players. Args:    none Returns: void looping variables CPhipps - allocate data structures needed We're doing stats count how many times we've done a complete stat CPhipps - allocate frags line set all counts to zero ==================================================================== CPhipps - WI_endDeathmatchStats Purpose: Deallocate dynamically allocated DM stats data Args:    none Returns: void ==================================================================== WI_updateDeathmatchStats Purpose: Advance Deathmatch stats screen animation.  Calculate          frags for all players.  Lots of noise and drama around          the presentation. Args:    none Returns: void still ticking bang we're done with all 4 (or all we have to do) noise while counting Ty 03/17/98 3-digit frag count Ty 03/17/98 end 3-digit frag count ==================================================================== WI_drawDeathmatchStats Purpose: Draw the stats on the screen in a matrix Args:    none Returns: void proff/nicolas 09/20/98 -- changed for hi-res CPhipps - patch drawing updated draw animated background draw stat titles (top line) draw P?int trans = playernumtotrans[i]; draw stats Note: The term "Netgame" means a coop game ==================================================================== CPhipps - WI_endNetgameStats Purpose: Clean up coop game stats Args:    none Returns: void ==================================================================== WI_initNetgameStats Purpose: Prepare for coop game stats Args:    none Returns: void CPhipps - allocate these dynamically, blank with calloc set to true or false - did we have frags? ==================================================================== WI_updateNetgameStats Purpose: Calculate coop stats as we display them with noise and fury Args:    none Returns: void Comment: This stuff sure is complicated for what it does killough 2/22/98: Make secrets = 100% if maxsecret = 0: we had frags bang pop still got stuff to tally killough 2/22/98: Make secrets = 100% if maxsecret = 0: ==================================================================== WI_drawNetgameStats Purpose: Put the coop stats on the screen Args:    none Returns: void proff/nicolas 09/20/98 -- changed for hi-res CPhipps - patch drawing updated draw animated background draw stat titles (top line) draw statsint trans = playernumtotrans[i]; cph - show times in coop on the entering screen ==================================================================== WI_initStats Purpose: Get ready for single player stats Args:    none Returns: void Comment: Seems like we could do all these stats in a more generic          set of routines that weren't duplicated for dm, coop, sp CPhipps - allocate (awful code, I know, but saves changing it all) and initialise ==================================================================== WI_updateStats Purpose: Calculate solo stats Args:    none Returns: void killough 2/22/98: Make secrets = 100% if maxsecret = 0: killough 2/22/98: Make secrets = 100% if maxsecret = 0: ==================================================================== WI_drawStats Purpose: Put the solo stats on the screen Args:    none Returns: void proff/nicolas 09/20/98 -- changed for hi-res CPhipps - patch drawing updated line height draw animated background ==================================================================== WI_checkForAccelerate Purpose: See if the player has hit either the attack or use key          or mouse button.  If so we set acceleratestage to 1 and          all those display routines above jump right to the end. Args:    none Returns: void check for button presses to skip delays ==================================================================== WI_Ticker Purpose: Do various updates every gametic, for stats, animation,          checking that intermission music is running, etc. Args:    none Returns: void counter for general background animation intermission music ====================================================================
 * WI_loadData
 * Purpose: Initialize intermission data such as background graphics,
 *          patches, map names, etc.
 * Args:    none
 * Returns: void
 *
 * CPhipps - modified for new wad lump handling.
 *         - no longer preload most graphics, other funcs can use
 *           them by name
  limited to 8 characters MONDO HACK! animations HACK ALERT! numbers 0-9 ==================================================================== WI_unloadData Purpose: Free up the space allocated during WI_loadData Args:    none Returns: void CPhipps - reverse of WI_loadData, goes through the same lumps, but unlocking limited to 8 characters cph - unlock gamemode dependent stuff here MONDO HACK! animations numbers 0-9 ==================================================================== WI_Drawer Purpose: Call the appropriate stats drawing routine depending on          what kind of game is being played (DM, coop, solo) Args:    none Returns: void ==================================================================== WI_initVariables Purpose: Initialize the intermission information structure          Note: wbstartstruct_t is defined in d_player.h Args:    wbstartstruct -- pointer to the structure with the data Returns: void probably only useful in MAP30 ==================================================================== WI_Start Purpose: Call the various init routines          Note: wbstartstruct_t is defined in d_player.h Args:    wbstartstruct -- pointer to the structure with the          intermission data Returns: void