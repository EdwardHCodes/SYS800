*
     * Receives and parses a MISCA or MISCF response from the PB840
     * @return
     * @throws IOException
      I want to generate the receiveStartResponse/receiveEndResponse sequence on EVERY LINE In this way consumers of this class can safely chain new requests to prior responses even where the response is not understood#bytes between <STX> and <CR>#fields between <STX> and <CR> This will keep field numbers consistent for consistency Generate this sequence for every CR terminated line!*
     * Receives the response for a command type
     * e.g. MISCF - request for ventilator settings, 
     *              monitored data and alarm information
     *      MISCA - request for ventilator settings 
     *              and monitored data
     * @param fieldValues
         public void receiveAlarmSetting(String name, String lower, String upper) {            }String AlarmType, String unitID, String AlrmThreshold, String valueinexistent limits are fields -1 in the PB840.fields	    		 receiveAlarmLimit(name, units, value < 0 ? null:fieldValues.get(value), limitType);	                    lowFieldNumber < 0 ? null : fieldValues.get(lowFieldNumber), 	                    highFieldNumber < 0 ? null : fieldValues.get(highFieldNumber)); A header row is included*
     * Receives and parses a MISCA or MISCF response from the PB840
     * @return
     * @throws IOException
      I want to generate the receiveStartResponse/receiveEndResponse sequence on EVERY LINE In this way consumers of this class can safely chain new requests to prior responses even where the response is not understood#bytes between <STX> and <CR>#fields between <STX> and <CR> This will keep field numbers consistent for consistency Generate this sequence for every CR terminated line!*
     * Receives the response for a command type
     * e.g. MISCF - request for ventilator settings, 
     *              monitored data and alarm information
     *      MISCA - request for ventilator settings 
     *              and monitored data
     * @param fieldValues
         public void receiveAlarmSetting(String name, String lower, String upper) {            }String AlarmType, String unitID, String AlrmThreshold, String valueinexistent limits are fields -1 in the PB840.fields	    		 receiveAlarmLimit(name, units, value < 0 ? null:fieldValues.get(value), limitType);	                    lowFieldNumber < 0 ? null : fieldValues.get(lowFieldNumber), 	                    highFieldNumber < 0 ? null : fieldValues.get(highFieldNumber)); A header row is included*
     * Receives and parses a MISCA or MISCF response from the PB840
     * @return
     * @throws IOException
      I want to generate the receiveStartResponse/receiveEndResponse sequence on EVERY LINE In this way consumers of this class can safely chain new requests to prior responses even where the response is not understood#bytes between <STX> and <CR>#fields between <STX> and <CR> This will keep field numbers consistent for consistency Generate this sequence for every CR terminated line!*
     * Receives the response for a command type
     * e.g. MISCF - request for ventilator settings, 
     *              monitored data and alarm information
     *      MISCA - request for ventilator settings 
     *              and monitored data
     * @param fieldValues
         public void receiveAlarmSetting(String name, String lower, String upper) {            }String AlarmType, String unitID, String AlrmThreshold, String valueinexistent limits are fields -1 in the PB840.fields	    		 receiveAlarmLimit(name, units, value < 0 ? null:fieldValues.get(value), limitType);	                    lowFieldNumber < 0 ? null : fieldValues.get(lowFieldNumber), 	                    highFieldNumber < 0 ? null : fieldValues.get(highFieldNumber)); A header row is included*
     * Receives and parses a MISCA or MISCF response from the PB840
     * @return
     * @throws IOException
      I want to generate the receiveStartResponse/receiveEndResponse sequence on EVERY LINE In this way consumers of this class can safely chain new requests to prior responses even where the response is not understood#bytes between <STX> and <CR>#fields between <STX> and <CR> This will keep field numbers consistent for consistency Generate this sequence for every CR terminated line!*
     * Receives the response for a command type
     * e.g. MISCF - request for ventilator settings, 
     *              monitored data and alarm information
     *      MISCA - request for ventilator settings 
     *              and monitored data
     * @param fieldValues
         public void receiveAlarmSetting(String name, String lower, String upper) {            }String AlarmType, String unitID, String AlrmThreshold, String valueinexistent limits are fields -1 in the PB840.fields	    		 receiveAlarmLimit(name, units, value < 0 ? null:fieldValues.get(value), limitType);	                    lowFieldNumber < 0 ? null : fieldValues.get(lowFieldNumber), 	                    highFieldNumber < 0 ? null : fieldValues.get(highFieldNumber)); A header row is included