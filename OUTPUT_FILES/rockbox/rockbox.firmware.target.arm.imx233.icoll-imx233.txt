**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2012 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** helpers  STMP3700+ specific  STMP3780+ specific  ms  allows irq / delay  return the priority level  read vector and notify as side effect  check for IRQ storm  do some regular stat  enable interrupts again enable_irq(); process interrupt  acknowledge completion of IRQ  save stuff  This part is in IRQ mode (with IRQ stack)  Create return address  Save what gets clobbered  Save HW_DIGCTL_SCRATCH0  and store instruction pointer  in it (for debug)  Save SPSR_irq  Push it on the stack  Switch to SVC mode, IRQ disabled  This part is in SVC mode (with SVC stack)  Copy SPSR_irq to SPSR_svc (for __get_sp)  Save lr_SVC  Align SVC stack  on 8-byte boundary  Process IRQ  Undo alignement  Restore lr_SVC  Mask IRQ, return to IRQ mode  This part is in IRQ mode (with IRQ stack)  Reload saved value  Restore HW_DIGCTL_SCRATCH0  using saved value  Restore SPSR_irq  Restore regs, and RFE  enable read side-effect mode for nested interrupts  disable all interrupts  priority = 0, disable, disable fiq  setup vbase as isr_table  enable final irq bit **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2012 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** helpers  STMP3700+ specific  STMP3780+ specific  ms  allows irq / delay  return the priority level  read vector and notify as side effect  check for IRQ storm  do some regular stat  enable interrupts again enable_irq(); process interrupt  acknowledge completion of IRQ  save stuff  This part is in IRQ mode (with IRQ stack)  Create return address  Save what gets clobbered  Save HW_DIGCTL_SCRATCH0  and store instruction pointer  in it (for debug)  Save SPSR_irq  Push it on the stack  Switch to SVC mode, IRQ disabled  This part is in SVC mode (with SVC stack)  Copy SPSR_irq to SPSR_svc (for __get_sp)  Save lr_SVC  Align SVC stack  on 8-byte boundary  Process IRQ  Undo alignement  Restore lr_SVC  Mask IRQ, return to IRQ mode  This part is in IRQ mode (with IRQ stack)  Reload saved value  Restore HW_DIGCTL_SCRATCH0  using saved value  Restore SPSR_irq  Restore regs, and RFE  enable read side-effect mode for nested interrupts  disable all interrupts  priority = 0, disable, disable fiq  setup vbase as isr_table  enable final irq bit **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2012 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** helpers  STMP3700+ specific  STMP3780+ specific  ms  allows irq / delay  return the priority level  read vector and notify as side effect  check for IRQ storm  do some regular stat  enable interrupts again enable_irq(); process interrupt  acknowledge completion of IRQ  save stuff  This part is in IRQ mode (with IRQ stack)  Create return address  Save what gets clobbered  Save HW_DIGCTL_SCRATCH0  and store instruction pointer  in it (for debug)  Save SPSR_irq  Push it on the stack  Switch to SVC mode, IRQ disabled  This part is in SVC mode (with SVC stack)  Copy SPSR_irq to SPSR_svc (for __get_sp)  Save lr_SVC  Align SVC stack  on 8-byte boundary  Process IRQ  Undo alignement  Restore lr_SVC  Mask IRQ, return to IRQ mode  This part is in IRQ mode (with IRQ stack)  Reload saved value  Restore HW_DIGCTL_SCRATCH0  using saved value  Restore SPSR_irq  Restore regs, and RFE  enable read side-effect mode for nested interrupts  disable all interrupts  priority = 0, disable, disable fiq  setup vbase as isr_table  enable final irq bit 