
FUNCTION
        <<memmove>>---move possibly overlapping memory

INDEX
        memmove

ANSI_SYNOPSIS
        #include <string.h>
        void *memmove(void *<[dst]>, const void *<[src]>, size_t <[length]>);

TRAD_SYNOPSIS
        #include <string.h>
        void *memmove(<[dst]>, <[src]>, <[length]>)
        void *<[dst]>;
        void *<[src]>;
        size_t <[length]>;

DESCRIPTION
        This function moves <[length]> characters from the block of
        memory starting at <<*<[src]>>> to the memory starting at
        <<*<[dst]>>>. <<memmove>> reproduces the characters correctly
        at <<*<[dst]>>> even if the two areas overlap.


RETURNS
        The function returns <[dst]> as passed.

PORTABILITY
<<memmove>> is ANSI C.

<<memmove>> requires no supporting OS subroutines.

QUICKREF
        memmove ansi pure
 Nonzero if either X or Y is not aligned on a "long" boundary.   How many bytes are copied each iteration of the 4X unrolled loop.   How many bytes are copied each iteration of the word copy loop.   Threshhold for punting to the byte copier.   Have to copy backwards  Destructive overlap...have to copy backwards  Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.   Copy 4X long words at a time if possible.   Copy one long word at a time if possible.   Pick up any residual with a byte copier.   not PREFER_SIZE_OVER_SPEED 
FUNCTION
        <<memmove>>---move possibly overlapping memory

INDEX
        memmove

ANSI_SYNOPSIS
        #include <string.h>
        void *memmove(void *<[dst]>, const void *<[src]>, size_t <[length]>);

TRAD_SYNOPSIS
        #include <string.h>
        void *memmove(<[dst]>, <[src]>, <[length]>)
        void *<[dst]>;
        void *<[src]>;
        size_t <[length]>;

DESCRIPTION
        This function moves <[length]> characters from the block of
        memory starting at <<*<[src]>>> to the memory starting at
        <<*<[dst]>>>. <<memmove>> reproduces the characters correctly
        at <<*<[dst]>>> even if the two areas overlap.


RETURNS
        The function returns <[dst]> as passed.

PORTABILITY
<<memmove>> is ANSI C.

<<memmove>> requires no supporting OS subroutines.

QUICKREF
        memmove ansi pure
 Nonzero if either X or Y is not aligned on a "long" boundary.   How many bytes are copied each iteration of the 4X unrolled loop.   How many bytes are copied each iteration of the word copy loop.   Threshhold for punting to the byte copier.   Have to copy backwards  Destructive overlap...have to copy backwards  Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.   Copy 4X long words at a time if possible.   Copy one long word at a time if possible.   Pick up any residual with a byte copier.   not PREFER_SIZE_OVER_SPEED 
FUNCTION
        <<memmove>>---move possibly overlapping memory

INDEX
        memmove

ANSI_SYNOPSIS
        #include <string.h>
        void *memmove(void *<[dst]>, const void *<[src]>, size_t <[length]>);

TRAD_SYNOPSIS
        #include <string.h>
        void *memmove(<[dst]>, <[src]>, <[length]>)
        void *<[dst]>;
        void *<[src]>;
        size_t <[length]>;

DESCRIPTION
        This function moves <[length]> characters from the block of
        memory starting at <<*<[src]>>> to the memory starting at
        <<*<[dst]>>>. <<memmove>> reproduces the characters correctly
        at <<*<[dst]>>> even if the two areas overlap.


RETURNS
        The function returns <[dst]> as passed.

PORTABILITY
<<memmove>> is ANSI C.

<<memmove>> requires no supporting OS subroutines.

QUICKREF
        memmove ansi pure
 Nonzero if either X or Y is not aligned on a "long" boundary.   How many bytes are copied each iteration of the 4X unrolled loop.   How many bytes are copied each iteration of the word copy loop.   Threshhold for punting to the byte copier.   Have to copy backwards  Destructive overlap...have to copy backwards  Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.   Copy 4X long words at a time if possible.   Copy one long word at a time if possible.   Pick up any residual with a byte copier.   not PREFER_SIZE_OVER_SPEED 