**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Transfer completion signal  Mutual exclusion  Next byte to transfer  Number of bytes remaining to transfer  Generate STOP  No more interrupts, clear pending interrupt to continue  Turn on I2C clock  Set mode to master transmitter and enable lines  Set buffer start and count  Send slave address and then data  Load slave address into shift register  Generate START  Something went wrong - stop transmission  Go back to slave receive mode and disable lines  Turn off I2C clock  Init kernel objects  Clear pending source  Enable i2c interrupt in controller  Turn on I2C clock  Set GPE15 (IICSDA) and GPE14 (IICSCL) to IIC  Bus ACK, IICCLK: fPCLK / 16, Rx/Tx Int: Disable, Tx clock: IICCLK/8  OF PCLK: 49.1568MHz / 16 / 8 = 384.0375 kHz  SDA line delayed 0 PCLKs  Turn off I2C clock  If ack was received from last byte and bytes are remaining  Write next byte to shift register  Clear pending interrupt to continue  Finished  Generate STOP  Signal thread  Ack **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Transfer completion signal  Mutual exclusion  Next byte to transfer  Number of bytes remaining to transfer  Generate STOP  No more interrupts, clear pending interrupt to continue  Turn on I2C clock  Set mode to master transmitter and enable lines  Set buffer start and count  Send slave address and then data  Load slave address into shift register  Generate START  Something went wrong - stop transmission  Go back to slave receive mode and disable lines  Turn off I2C clock  Init kernel objects  Clear pending source  Enable i2c interrupt in controller  Turn on I2C clock  Set GPE15 (IICSDA) and GPE14 (IICSCL) to IIC  Bus ACK, IICCLK: fPCLK / 16, Rx/Tx Int: Disable, Tx clock: IICCLK/8  OF PCLK: 49.1568MHz / 16 / 8 = 384.0375 kHz  SDA line delayed 0 PCLKs  Turn off I2C clock  If ack was received from last byte and bytes are remaining  Write next byte to shift register  Clear pending interrupt to continue  Finished  Generate STOP  Signal thread  Ack **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Transfer completion signal  Mutual exclusion  Next byte to transfer  Number of bytes remaining to transfer  Generate STOP  No more interrupts, clear pending interrupt to continue  Turn on I2C clock  Set mode to master transmitter and enable lines  Set buffer start and count  Send slave address and then data  Load slave address into shift register  Generate START  Something went wrong - stop transmission  Go back to slave receive mode and disable lines  Turn off I2C clock  Init kernel objects  Clear pending source  Enable i2c interrupt in controller  Turn on I2C clock  Set GPE15 (IICSDA) and GPE14 (IICSCL) to IIC  Bus ACK, IICCLK: fPCLK / 16, Rx/Tx Int: Disable, Tx clock: IICCLK/8  OF PCLK: 49.1568MHz / 16 / 8 = 384.0375 kHz  SDA line delayed 0 PCLKs  Turn off I2C clock  If ack was received from last byte and bytes are remaining  Write next byte to shift register  Clear pending interrupt to continue  Finished  Generate STOP  Signal thread  Ack 