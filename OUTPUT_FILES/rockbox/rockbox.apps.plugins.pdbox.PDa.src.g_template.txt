 Copyright (c) 1997-1999 Miller Puckette.
* For information on usage and redistribution, and for a DISCLAIMER OF ALL
* WARRANTIES, see the file, "LICENSE.txt," in this distribution.   ROCKBOX  for sys_hostfontsize  ROCKBOX 
This file contains text objects you would put in a canvas to define a
template.  Templates describe objects of type "array" (g_array.c) and
"scalar" (g_scalar.c).
 T.Grill - changed the _template.t_pd member to t_pdobj to avoid name clashes
with the t_pd type  the structure of a "struct" object (also the obsolete "gtemplate"
    you get when using the name "template" in a box.)  ---------------- forward definitions ----------------  ---------------------- storage -------------------------  there's a pre-defined "float" template.  LATER should we bind this
to a symbol such as "pd-float"???  class -- fill in in setup routine  list of "struct"/t_gtemplate objects  name  number of items  return true if two dataslot definitions match  -- templates, the active ingredient in gtemplates defined below. -------  stringent check to see if a "saved" template, x2, matches the current
    	one (x1).  It's OK if x1 has additional scalar elements but not (yet)
	arrays or lists.  This is used for reading in "data files".  --------------- CONFORMING TO CHANGES IN A TEMPLATE ------------  the following routines handle updating scalars to agree with changes
in their template.  The old template is assumed to be the "installed" one
so we can delete old items; but making new ones we have to avoid scalar_new
which would make an old one whereas we will want a new one (but whose array
elements might still be old ones. 
    LATER deal with graphics updates too...  conform the word vector of a scalar to the new template  we swap the two, in case it's an array or list, so that
		when "wfrom" is deleted the old one gets cleaned up.  conform a scalar, recursively conforming sublists and arrays   post("conform scalar");  possibly replace the scalar  see scalar_new() for comment about the gpointer.  Here we initialize to the new template, but array and list
	    elements will still belong to old template.  replace the old one with the new one in the list  burn the old one  convert all array elements and sublists  conform an array, recursively conforming sublists and arrays   the array elements must all be conformed  go through item by item conforming subarrays and sublists...  this routine searches for every scalar in the glist that belongs
    to the "from" template and makes it belong to the "to" template.  Descend
    glists recursively.
    We don't handle redrawing here; this is to be filled in LATER...  post("conform glist %s", glist->gl_name->s_name);  globally conform all scalars from one template to another  post("conforming template '%s' to new structure",
	    tfrom->t_sym->s_name);
	for (i = 0; i < nto; i++)
	    post("... %d", conformaction[i]);  return ((t_canvas *)pd_findbyclass(template->t_sym, canvas_class));  call this when reading a patch from a file to declare what templates
    we'll need.  If there's already a template, check if it matches.
    If it doesn't it's still OK as long as there are no "struct" (gtemplate)
    objects hanging from it; we just conform everyone to the new template.
    If there are still struct objects belonging to the other template, we're
    in trouble.  LATER we'll figure out how to conform the new patch's objects
    to the pre-existing struct.  check if there's already a template by this name.  If the new template is the same as the old one,
	    there's nothing to do.   Are there "struct" objects upholding this template?  don't know what to do here!  conform everyone to the new template  otherwise, just make one.  here we assume someone has already cleaned up all instances of this.  ---------------- gtemplates.  One per canvas. -----------  this is a "text" object that searches for, and if necessary creates, 
a "template" (above).  Other objects in the canvas then can give drawing
instructions for the template.  The template doesn't go away when the
gtemplate is deleted, so that you can replace it with
another one to add new fields, for example.  already have a template by this name?  if it's already got a "struct" or "gtemplate" object we
	    just tack this one to the end of the list and leave it
	    there.  if there's none, we just replace the template with
		our own and conform it.  Unless the new template is different from the old one,
		there's nothing to do.   conform everyone to the new template  otherwise make a new one and we're the only struct on it.  old version (0.34) -- delete 2003 or so  get off the template's list  if we were first on the list, and there are others on
		the list, make a new template corresponding to the new
		first-on-list and replace teh existing template with it.  ---------------  FIELD DESCRIPTORS ----------------------  a field descriptor can hold a constant or a variable; if a variable,
it's the name of a field in the template we belong to.  LATER, we might
want to cache the offset of the field so we don't have to search for it
every single time we draw the object.
 LATER consider removing this?  the field is a constant float  the field is a constant symbol  the field is variable and this is the name  LATER decide whether to enshrine this in m_pd.h  ---------------- curves and polygons (joined segments) ---------------- 
curves belong to templates and describe how the data in the template are to
be drawn.  The coordinates of the curve (and other display features) can
be attached to fields in the template.
 CLOSED and/or BEZ  -------------------- widget behavior for curve ------------  refuse  fill in later  fill in later  0 to 9 in 5 steps  0 to 4  0 to 256 in 5 steps  LATER protect against the template changing or the scalar disappearing
    probably by attaching a gpointer here ...  --------- plots for showing arrays ---------------  -------------------- widget behavior for plot ------------  get everything we'll need from the owner template of the array being
    plotted. Not used for garrays, but see below  find the data and verify it's an array  get everything else you could possibly need about a plot,
    either for plot's own purposes or for plotting a "garray"  the "float" template is special in not having to have a canvas;
	template_findbyname is hardwired to return a predefined 
	template.  fill in slots for return values  not yet  not yet  not yet  draw the trace  found "w" field which controls linewidth.  The trace is
    	    	a filled polygon with 2n points.  TK will complain if there aren't at least 3 points.  There
		should be at least two already.  ROCKBOX  ROCKBOX  no "w" field.  If the linewidth is positive, draw a
    	    	segmented line with the requested width; otherwise don't
    	    	draw the trace at all.  TK will complain if there aren't at least 2 points...  We're done with the outline; now draw all the points.
    	    This code is inefficient since the template has to be
    	    searched for drawing instructions for every last point.  un-draw the individual points  and then the trace  ---------------- drawnumber: draw a number ---------------- 
    drawnumbers draw numeric fields at controllable locations, with
    controllable color and label  .
    	invocation: (drawnumber|drawsymbol) variable x y color label
 -------------------- widget behavior for drawnumber ------------  refuse  fill in later  LATER protect against the template changing or the scalar disappearing
    probably by attaching a gpointer here ...  ---------------------- setup function ----------------------------  Copyright (c) 1997-1999 Miller Puckette.
* For information on usage and redistribution, and for a DISCLAIMER OF ALL
* WARRANTIES, see the file, "LICENSE.txt," in this distribution.   ROCKBOX  for sys_hostfontsize  ROCKBOX 
This file contains text objects you would put in a canvas to define a
template.  Templates describe objects of type "array" (g_array.c) and
"scalar" (g_scalar.c).
 T.Grill - changed the _template.t_pd member to t_pdobj to avoid name clashes
with the t_pd type  the structure of a "struct" object (also the obsolete "gtemplate"
    you get when using the name "template" in a box.)  ---------------- forward definitions ----------------  ---------------------- storage -------------------------  there's a pre-defined "float" template.  LATER should we bind this
to a symbol such as "pd-float"???  class -- fill in in setup routine  list of "struct"/t_gtemplate objects  name  number of items  return true if two dataslot definitions match  -- templates, the active ingredient in gtemplates defined below. -------  stringent check to see if a "saved" template, x2, matches the current
    	one (x1).  It's OK if x1 has additional scalar elements but not (yet)
	arrays or lists.  This is used for reading in "data files".  --------------- CONFORMING TO CHANGES IN A TEMPLATE ------------  the following routines handle updating scalars to agree with changes
in their template.  The old template is assumed to be the "installed" one
so we can delete old items; but making new ones we have to avoid scalar_new
which would make an old one whereas we will want a new one (but whose array
elements might still be old ones. 
    LATER deal with graphics updates too...  conform the word vector of a scalar to the new template  we swap the two, in case it's an array or list, so that
		when "wfrom" is deleted the old one gets cleaned up.  conform a scalar, recursively conforming sublists and arrays   post("conform scalar");  possibly replace the scalar  see scalar_new() for comment about the gpointer.  Here we initialize to the new template, but array and list
	    elements will still belong to old template.  replace the old one with the new one in the list  burn the old one  convert all array elements and sublists  conform an array, recursively conforming sublists and arrays   the array elements must all be conformed  go through item by item conforming subarrays and sublists...  this routine searches for every scalar in the glist that belongs
    to the "from" template and makes it belong to the "to" template.  Descend
    glists recursively.
    We don't handle redrawing here; this is to be filled in LATER...  post("conform glist %s", glist->gl_name->s_name);  globally conform all scalars from one template to another  post("conforming template '%s' to new structure",
	    tfrom->t_sym->s_name);
	for (i = 0; i < nto; i++)
	    post("... %d", conformaction[i]);  return ((t_canvas *)pd_findbyclass(template->t_sym, canvas_class));  call this when reading a patch from a file to declare what templates
    we'll need.  If there's already a template, check if it matches.
    If it doesn't it's still OK as long as there are no "struct" (gtemplate)
    objects hanging from it; we just conform everyone to the new template.
    If there are still struct objects belonging to the other template, we're
    in trouble.  LATER we'll figure out how to conform the new patch's objects
    to the pre-existing struct.  check if there's already a template by this name.  If the new template is the same as the old one,
	    there's nothing to do.   Are there "struct" objects upholding this template?  don't know what to do here!  conform everyone to the new template  otherwise, just make one.  here we assume someone has already cleaned up all instances of this.  ---------------- gtemplates.  One per canvas. -----------  this is a "text" object that searches for, and if necessary creates, 
a "template" (above).  Other objects in the canvas then can give drawing
instructions for the template.  The template doesn't go away when the
gtemplate is deleted, so that you can replace it with
another one to add new fields, for example.  already have a template by this name?  if it's already got a "struct" or "gtemplate" object we
	    just tack this one to the end of the list and leave it
	    there.  if there's none, we just replace the template with
		our own and conform it.  Unless the new template is different from the old one,
		there's nothing to do.   conform everyone to the new template  otherwise make a new one and we're the only struct on it.  old version (0.34) -- delete 2003 or so  get off the template's list  if we were first on the list, and there are others on
		the list, make a new template corresponding to the new
		first-on-list and replace teh existing template with it.  ---------------  FIELD DESCRIPTORS ----------------------  a field descriptor can hold a constant or a variable; if a variable,
it's the name of a field in the template we belong to.  LATER, we might
want to cache the offset of the field so we don't have to search for it
every single time we draw the object.
 LATER consider removing this?  the field is a constant float  the field is a constant symbol  the field is variable and this is the name  LATER decide whether to enshrine this in m_pd.h  ---------------- curves and polygons (joined segments) ---------------- 
curves belong to templates and describe how the data in the template are to
be drawn.  The coordinates of the curve (and other display features) can
be attached to fields in the template.
 CLOSED and/or BEZ  -------------------- widget behavior for curve ------------  refuse  fill in later  fill in later  0 to 9 in 5 steps  0 to 4  0 to 256 in 5 steps  LATER protect against the template changing or the scalar disappearing
    probably by attaching a gpointer here ...  --------- plots for showing arrays ---------------  -------------------- widget behavior for plot ------------  get everything we'll need from the owner template of the array being
    plotted. Not used for garrays, but see below  find the data and verify it's an array  get everything else you could possibly need about a plot,
    either for plot's own purposes or for plotting a "garray"  the "float" template is special in not having to have a canvas;
	template_findbyname is hardwired to return a predefined 
	template.  fill in slots for return values  not yet  not yet  not yet  draw the trace  found "w" field which controls linewidth.  The trace is
    	    	a filled polygon with 2n points.  TK will complain if there aren't at least 3 points.  There
		should be at least two already.  ROCKBOX  ROCKBOX  no "w" field.  If the linewidth is positive, draw a
    	    	segmented line with the requested width; otherwise don't
    	    	draw the trace at all.  TK will complain if there aren't at least 2 points...  We're done with the outline; now draw all the points.
    	    This code is inefficient since the template has to be
    	    searched for drawing instructions for every last point.  un-draw the individual points  and then the trace  ---------------- drawnumber: draw a number ---------------- 
    drawnumbers draw numeric fields at controllable locations, with
    controllable color and label  .
    	invocation: (drawnumber|drawsymbol) variable x y color label
 -------------------- widget behavior for drawnumber ------------  refuse  fill in later  LATER protect against the template changing or the scalar disappearing
    probably by attaching a gpointer here ...  ---------------------- setup function ----------------------------  Copyright (c) 1997-1999 Miller Puckette.
* For information on usage and redistribution, and for a DISCLAIMER OF ALL
* WARRANTIES, see the file, "LICENSE.txt," in this distribution.   ROCKBOX  for sys_hostfontsize  ROCKBOX 
This file contains text objects you would put in a canvas to define a
template.  Templates describe objects of type "array" (g_array.c) and
"scalar" (g_scalar.c).
 T.Grill - changed the _template.t_pd member to t_pdobj to avoid name clashes
with the t_pd type  the structure of a "struct" object (also the obsolete "gtemplate"
    you get when using the name "template" in a box.)  ---------------- forward definitions ----------------  ---------------------- storage -------------------------  there's a pre-defined "float" template.  LATER should we bind this
to a symbol such as "pd-float"???  class -- fill in in setup routine  list of "struct"/t_gtemplate objects  name  number of items  return true if two dataslot definitions match  -- templates, the active ingredient in gtemplates defined below. -------  stringent check to see if a "saved" template, x2, matches the current
    	one (x1).  It's OK if x1 has additional scalar elements but not (yet)
	arrays or lists.  This is used for reading in "data files".  --------------- CONFORMING TO CHANGES IN A TEMPLATE ------------  the following routines handle updating scalars to agree with changes
in their template.  The old template is assumed to be the "installed" one
so we can delete old items; but making new ones we have to avoid scalar_new
which would make an old one whereas we will want a new one (but whose array
elements might still be old ones. 
    LATER deal with graphics updates too...  conform the word vector of a scalar to the new template  we swap the two, in case it's an array or list, so that
		when "wfrom" is deleted the old one gets cleaned up.  conform a scalar, recursively conforming sublists and arrays   post("conform scalar");  possibly replace the scalar  see scalar_new() for comment about the gpointer.  Here we initialize to the new template, but array and list
	    elements will still belong to old template.  replace the old one with the new one in the list  burn the old one  convert all array elements and sublists  conform an array, recursively conforming sublists and arrays   the array elements must all be conformed  go through item by item conforming subarrays and sublists...  this routine searches for every scalar in the glist that belongs
    to the "from" template and makes it belong to the "to" template.  Descend
    glists recursively.
    We don't handle redrawing here; this is to be filled in LATER...  post("conform glist %s", glist->gl_name->s_name);  globally conform all scalars from one template to another  post("conforming template '%s' to new structure",
	    tfrom->t_sym->s_name);
	for (i = 0; i < nto; i++)
	    post("... %d", conformaction[i]);  return ((t_canvas *)pd_findbyclass(template->t_sym, canvas_class));  call this when reading a patch from a file to declare what templates
    we'll need.  If there's already a template, check if it matches.
    If it doesn't it's still OK as long as there are no "struct" (gtemplate)
    objects hanging from it; we just conform everyone to the new template.
    If there are still struct objects belonging to the other template, we're
    in trouble.  LATER we'll figure out how to conform the new patch's objects
    to the pre-existing struct.  check if there's already a template by this name.  If the new template is the same as the old one,
	    there's nothing to do.   Are there "struct" objects upholding this template?  don't know what to do here!  conform everyone to the new template  otherwise, just make one.  here we assume someone has already cleaned up all instances of this.  ---------------- gtemplates.  One per canvas. -----------  this is a "text" object that searches for, and if necessary creates, 
a "template" (above).  Other objects in the canvas then can give drawing
instructions for the template.  The template doesn't go away when the
gtemplate is deleted, so that you can replace it with
another one to add new fields, for example.  already have a template by this name?  if it's already got a "struct" or "gtemplate" object we
	    just tack this one to the end of the list and leave it
	    there.  if there's none, we just replace the template with
		our own and conform it.  Unless the new template is different from the old one,
		there's nothing to do.   conform everyone to the new template  otherwise make a new one and we're the only struct on it.  old version (0.34) -- delete 2003 or so  get off the template's list  if we were first on the list, and there are others on
		the list, make a new template corresponding to the new
		first-on-list and replace teh existing template with it.  ---------------  FIELD DESCRIPTORS ----------------------  a field descriptor can hold a constant or a variable; if a variable,
it's the name of a field in the template we belong to.  LATER, we might
want to cache the offset of the field so we don't have to search for it
every single time we draw the object.
 LATER consider removing this?  the field is a constant float  the field is a constant symbol  the field is variable and this is the name  LATER decide whether to enshrine this in m_pd.h  ---------------- curves and polygons (joined segments) ---------------- 
curves belong to templates and describe how the data in the template are to
be drawn.  The coordinates of the curve (and other display features) can
be attached to fields in the template.
 CLOSED and/or BEZ  -------------------- widget behavior for curve ------------  refuse  fill in later  fill in later  0 to 9 in 5 steps  0 to 4  0 to 256 in 5 steps  LATER protect against the template changing or the scalar disappearing
    probably by attaching a gpointer here ...  --------- plots for showing arrays ---------------  -------------------- widget behavior for plot ------------  get everything we'll need from the owner template of the array being
    plotted. Not used for garrays, but see below  find the data and verify it's an array  get everything else you could possibly need about a plot,
    either for plot's own purposes or for plotting a "garray"  the "float" template is special in not having to have a canvas;
	template_findbyname is hardwired to return a predefined 
	template.  fill in slots for return values  not yet  not yet  not yet  draw the trace  found "w" field which controls linewidth.  The trace is
    	    	a filled polygon with 2n points.  TK will complain if there aren't at least 3 points.  There
		should be at least two already.  ROCKBOX  ROCKBOX  no "w" field.  If the linewidth is positive, draw a
    	    	segmented line with the requested width; otherwise don't
    	    	draw the trace at all.  TK will complain if there aren't at least 2 points...  We're done with the outline; now draw all the points.
    	    This code is inefficient since the template has to be
    	    searched for drawing instructions for every last point.  un-draw the individual points  and then the trace  ---------------- drawnumber: draw a number ---------------- 
    drawnumbers draw numeric fields at controllable locations, with
    controllable color and label  .
    	invocation: (drawnumber|drawsymbol) variable x y color label
 -------------------- widget behavior for drawnumber ------------  refuse  fill in later  LATER protect against the template changing or the scalar disappearing
    probably by attaching a gpointer here ...  ---------------------- setup function ---------------------------- 