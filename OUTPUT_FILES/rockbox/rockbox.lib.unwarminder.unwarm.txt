**************************************************************************
 * ARM Stack Unwinder, Michael.McTernan.2001@cs.bris.ac.uk
 *
 * This program is PUBLIC DOMAIN.
 * This means that there is no copyright and anyone is able to take a copy
 * for free and use it as they wish, with or without modifications, and in
 * any context, commercially or otherwise. The only limitation is that I
 * don't guarantee that the software is fit for any purpose or accept any
 * liability for it's use or misuse - this software is without warranty.
 ***************************************************************************
 * File Description: Utility functions and glue for ARM unwinding sub-modules.
 ***************************************************************************************************************************************************
 * Include Files
 ***************************************************************************************************************************************************
 * Manifest Constants
 ***************************************************************************************************************************************************
 * Type Definitions
 ***************************************************************************************************************************************************
 * Variables
 ***************************************************************************************************************************************************
 * Macros
 ***************************************************************************************************************************************************
 * Local Functions
 ***************************************************************************************************************************************************
 * Global Functions
 ************************************************************************** Printf wrapper.
 * This is used such that alternative outputs for any output can be selected
 * by modification of this wrapper function.
 * Invalidate all general purpose registers.
 * Initialise the data used for unwinding.
 *< Pointer to structure to fill. *< Callbacks. *< Data to pass to report function. *< PC at which to start unwinding. *< SP at which to start unwinding.  Store the pointer to the callbacks  Setup the SP and PC  Invalidate all memory addresses * Call the report function to indicate some return address.
 * This returns the value of the report function, which if TRUE
 * indicates that unwinding may continue.
  Cast away const from reportData.
     *  The const is only to prevent the unw module modifying the data.
     * Write some register to memory.
 * This will store some register and meta data onto the virtual stack.
 * The address for the write
 * \param state [in/out]  The unwinding state.
 * \param wAddr [in]  The address at which to write the data.
 * \param reg   [in]  The register to store.
 * \return TRUE if the write was successful, FALSE otherwise.
 * Read a register from memory.
 * This will read a register from memory, and setup the meta data.
 * If the register has been previously written to memory using
 * UnwMemWriteRegister, the local hash will be used to return the
 * value while respecting whether the data was valid or not.  If the
 * register was previously written and was invalid at that point,
 * REG_VAL_INVALID will be returned in *reg.
 * \param state [in]  The unwinding state.
 * \param addr  [in]  The address to read.
 * \param reg   [out] The result, containing the data value and the origin
 *                     which will be REG_VAL_FROM_MEMORY, or REG_VAL_INVALID.
 * \return TRUE if the address could be read and *reg has been filled in.
 *         FALSE is the data could not be read.
  Check if the value can be found in the hash  Not in the hash, so read from real memory  Not in the hash, and failed to read from memory  END OF FILE **************************************************************************
 * ARM Stack Unwinder, Michael.McTernan.2001@cs.bris.ac.uk
 *
 * This program is PUBLIC DOMAIN.
 * This means that there is no copyright and anyone is able to take a copy
 * for free and use it as they wish, with or without modifications, and in
 * any context, commercially or otherwise. The only limitation is that I
 * don't guarantee that the software is fit for any purpose or accept any
 * liability for it's use or misuse - this software is without warranty.
 ***************************************************************************
 * File Description: Utility functions and glue for ARM unwinding sub-modules.
 ***************************************************************************************************************************************************
 * Include Files
 ***************************************************************************************************************************************************
 * Manifest Constants
 ***************************************************************************************************************************************************
 * Type Definitions
 ***************************************************************************************************************************************************
 * Variables
 ***************************************************************************************************************************************************
 * Macros
 ***************************************************************************************************************************************************
 * Local Functions
 ***************************************************************************************************************************************************
 * Global Functions
 ************************************************************************** Printf wrapper.
 * This is used such that alternative outputs for any output can be selected
 * by modification of this wrapper function.
 * Invalidate all general purpose registers.
 * Initialise the data used for unwinding.
 *< Pointer to structure to fill. *< Callbacks. *< Data to pass to report function. *< PC at which to start unwinding. *< SP at which to start unwinding.  Store the pointer to the callbacks  Setup the SP and PC  Invalidate all memory addresses * Call the report function to indicate some return address.
 * This returns the value of the report function, which if TRUE
 * indicates that unwinding may continue.
  Cast away const from reportData.
     *  The const is only to prevent the unw module modifying the data.
     * Write some register to memory.
 * This will store some register and meta data onto the virtual stack.
 * The address for the write
 * \param state [in/out]  The unwinding state.
 * \param wAddr [in]  The address at which to write the data.
 * \param reg   [in]  The register to store.
 * \return TRUE if the write was successful, FALSE otherwise.
 * Read a register from memory.
 * This will read a register from memory, and setup the meta data.
 * If the register has been previously written to memory using
 * UnwMemWriteRegister, the local hash will be used to return the
 * value while respecting whether the data was valid or not.  If the
 * register was previously written and was invalid at that point,
 * REG_VAL_INVALID will be returned in *reg.
 * \param state [in]  The unwinding state.
 * \param addr  [in]  The address to read.
 * \param reg   [out] The result, containing the data value and the origin
 *                     which will be REG_VAL_FROM_MEMORY, or REG_VAL_INVALID.
 * \return TRUE if the address could be read and *reg has been filled in.
 *         FALSE is the data could not be read.
  Check if the value can be found in the hash  Not in the hash, so read from real memory  Not in the hash, and failed to read from memory  END OF FILE **************************************************************************
 * ARM Stack Unwinder, Michael.McTernan.2001@cs.bris.ac.uk
 *
 * This program is PUBLIC DOMAIN.
 * This means that there is no copyright and anyone is able to take a copy
 * for free and use it as they wish, with or without modifications, and in
 * any context, commercially or otherwise. The only limitation is that I
 * don't guarantee that the software is fit for any purpose or accept any
 * liability for it's use or misuse - this software is without warranty.
 ***************************************************************************
 * File Description: Utility functions and glue for ARM unwinding sub-modules.
 ***************************************************************************************************************************************************
 * Include Files
 ***************************************************************************************************************************************************
 * Manifest Constants
 ***************************************************************************************************************************************************
 * Type Definitions
 ***************************************************************************************************************************************************
 * Variables
 ***************************************************************************************************************************************************
 * Macros
 ***************************************************************************************************************************************************
 * Local Functions
 ***************************************************************************************************************************************************
 * Global Functions
 ************************************************************************** Printf wrapper.
 * This is used such that alternative outputs for any output can be selected
 * by modification of this wrapper function.
 * Invalidate all general purpose registers.
 * Initialise the data used for unwinding.
 *< Pointer to structure to fill. *< Callbacks. *< Data to pass to report function. *< PC at which to start unwinding. *< SP at which to start unwinding.  Store the pointer to the callbacks  Setup the SP and PC  Invalidate all memory addresses * Call the report function to indicate some return address.
 * This returns the value of the report function, which if TRUE
 * indicates that unwinding may continue.
  Cast away const from reportData.
     *  The const is only to prevent the unw module modifying the data.
     * Write some register to memory.
 * This will store some register and meta data onto the virtual stack.
 * The address for the write
 * \param state [in/out]  The unwinding state.
 * \param wAddr [in]  The address at which to write the data.
 * \param reg   [in]  The register to store.
 * \return TRUE if the write was successful, FALSE otherwise.
 * Read a register from memory.
 * This will read a register from memory, and setup the meta data.
 * If the register has been previously written to memory using
 * UnwMemWriteRegister, the local hash will be used to return the
 * value while respecting whether the data was valid or not.  If the
 * register was previously written and was invalid at that point,
 * REG_VAL_INVALID will be returned in *reg.
 * \param state [in]  The unwinding state.
 * \param addr  [in]  The address to read.
 * \param reg   [out] The result, containing the data value and the origin
 *                     which will be REG_VAL_FROM_MEMORY, or REG_VAL_INVALID.
 * \return TRUE if the address could be read and *reg has been filled in.
 *         FALSE is the data could not be read.
  Check if the value can be found in the hash  Not in the hash, so read from real memory  Not in the hash, and failed to read from memory  END OF FILE 