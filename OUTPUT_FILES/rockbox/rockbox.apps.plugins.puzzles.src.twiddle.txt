
 * twiddle.c: Puzzle involving rearranging a grid of squares by
 * rotating subsquares. Adapted and generalised from a
 * door-unlocking puzzle in Metroid Prime 2 (the one in the Main
 * Gyro Chamber).
  used to suppress completion flash  coordinates of last rotation  structure copy  Shuffle limit is part of the limited parameters, because we have to
     * supply the target move count. 
 * This function actually performs a rotation on a grid. The `x'
 * and `y' coordinates passed in are the coordinates of the _top
 * left corner_ of the rotated region. (Using the centre would have
 * involved half-integers and been annoyingly fiddly. Clicking in
 * the centre is good for a user interface, but too inconvenient to
 * use internally.)
  nothing to do  translate region to top corner 
     * If we were leaving the result of the rotation in a separate
     * grid, the simple thing to do would be to loop over each
     * square within the rotated region and assign it from its
     * source square. However, to do it in place without taking
     * O(n^2) memory, we need to be marginally more clever. What
     * I'm going to do is loop over about one _quarter_ of the
     * rotated region and permute each element within that quarter
     * with its rotational coset.
     * 
     * The size of the region I need to loop over is (n+1)/2 by
     * n/2, which is an obvious exact quarter for even n and is a
     * rectangle for odd n. (For odd n, this technique leaves out
     * one element of the square, which is of course the central
     * one that never moves anyway.)
      alter orientation 
     * Don't forget the orientation on the centre square, if n is
     * odd.
      alter orientation 
     * Set up a solved grid.
     
     * Shuffle it. This game is complex enough that I don't feel up
     * to analysing its full symmetry properties (particularly at
     * n=4 and above!), so I'm going to do it the pedestrian way
     * and simply shuffle the grid by making a long sequence of
     * randomly chosen moves.
      Add a random move to avoid parity issues.  w/h of rotation centre space 
                 * See if any previous rotations has happened at
                 * this point which nothing has overlapped since.
                 * If so, ensure we haven't either undone a
                 * previous move or repeated one so many times that
                 * it turns into fewer moves in the inverse
                 * direction (i.e. three identical rotations).
                 
                 * Special case here for w==h==n, in which case
                 * there is actually no way to _avoid_ all moves
                 * repeating or undoing previous ones.
                 
             * Log the rotation we've just performed at this point,
             * for inversion detection in the next move.
             * 
             * Also zero a section of the prevmoves array, because
             * any rotation area which _overlaps_ this one is now
             * entirely safe to perform further moves in.
             * 
             * Two rotation areas overlap if their top left
             * coordinates differ by strictly less than n in both
             * directions
             
     * Now construct the game description, by describing the grid
     * as a simple sequence of integers. They're comma-separated,
     * unless the puzzle is orientable in which case they're
     * separated by orientation letters `u', `d', `l' and `r'.
      delete last comma  eat comma  Pedantic check: ensure buf is large enough to format an int in
     * decimal, using the bound log10(2) < 1/3. (Obviously in practice
     * int is not going to be larger than even 32 bits any time soon,
     * but.) 
     * First work out how many characters we need to display each
     * number. We're pretty flexible on grid contents here, so we
     * have to scan the entire grid.
      Reassure sprintf-checking compilers like gcc that the field
     * width we've just computed is not now excessive 
     * Now we know the exact total size of the grid we're going to
     * produce: it's got h rows, each containing w lots of col+o,
     * w-1 spaces and a trailing newline.
      , wh = w*h 
	 * Determine the coordinates of the click. We offset by n-1
	 * half-blocks so that the user must click at the centre of
	 * a rotation region rather than at the corner.
	  no move to be made 
     * If we reach here, we have a valid move.
     
	 * Simply replace the grid with a solved one. For this game,
	 * this isn't a useful operation for actually telling the user
	 * what they should have done, but it is useful for
	 * conveniently being able to get hold of a clean state from
	 * which to practise manoeuvres.
	  can't parse this move string 
     * See if the game has been completed. To do this we simply
     * test that the grid contents are in increasing order.
      ----------------------------------------------------------------------
 * Drawing routines.
  Ick: fake up `ds->tilesize' for macro expansion purposes  cursor is light-background with a red tinge.  haven't decided yet  clip region  rotation origin  cos and sin of rotation angle  colours of tile edges  round to nearest  round to nearest 
     * If we've been passed a rotation region but we're drawing a
     * tile which is outside it, we must draw it normally. This can
     * occur if we're cleaning up after a completion flash while a
     * new move is also being made.
     
     * We must draw each side of the tile's highlight separately,
     * because in some cases (during rotation) they will all need
     * to be different colours.
      The centre point is common to all sides.  Right side.  Bottom side.  Left side.  Top side. 
     * Now the main blank area in the centre of the tile.
     
     * Next, the triangles for orientation.
      case 3 
     * Our game_anim_length doesn't need to modify its game_ui, so
     * this is the real function which declares ui as const. We must
     * wrap this for the backend structure with a version that has ui
     * non-const, but we still need this version to call from within
     * game_redraw which only has a const ui available.
     
         * Recessed area containing the whole puzzle.
         
     * If we're drawing any rotated tiles, sort out the rotation
     * parameters, and also zap the rotation region to the
     * background colour before doing anything else.
     
	 * Sort out the colours of the various sides of the tile.
	 
     * Now draw each tile.
     
	 * Figure out what should be displayed at this location.
	 * Usually it will be state->grid[i], unless we're in the
	 * middle of animating an actual rotation and this cell is
	 * within the rotation region, in which case we set -1
	 * (always display).
	  cursor has moved (or changed visibility)...  ...we're on new cursor, redraw  ...we were on old cursor, redraw  always redraw when flashing 
     * Update the status bar.
     
         * Don't show the new status until we're also showing the
         * new _state_ - after the game animation is complete.
          game_request_keys  wants_statusbar  flags  vim: set shiftwidth=4 tabstop=8: 
 * twiddle.c: Puzzle involving rearranging a grid of squares by
 * rotating subsquares. Adapted and generalised from a
 * door-unlocking puzzle in Metroid Prime 2 (the one in the Main
 * Gyro Chamber).
  used to suppress completion flash  coordinates of last rotation  structure copy  Shuffle limit is part of the limited parameters, because we have to
     * supply the target move count. 
 * This function actually performs a rotation on a grid. The `x'
 * and `y' coordinates passed in are the coordinates of the _top
 * left corner_ of the rotated region. (Using the centre would have
 * involved half-integers and been annoyingly fiddly. Clicking in
 * the centre is good for a user interface, but too inconvenient to
 * use internally.)
  nothing to do  translate region to top corner 
     * If we were leaving the result of the rotation in a separate
     * grid, the simple thing to do would be to loop over each
     * square within the rotated region and assign it from its
     * source square. However, to do it in place without taking
     * O(n^2) memory, we need to be marginally more clever. What
     * I'm going to do is loop over about one _quarter_ of the
     * rotated region and permute each element within that quarter
     * with its rotational coset.
     * 
     * The size of the region I need to loop over is (n+1)/2 by
     * n/2, which is an obvious exact quarter for even n and is a
     * rectangle for odd n. (For odd n, this technique leaves out
     * one element of the square, which is of course the central
     * one that never moves anyway.)
      alter orientation 
     * Don't forget the orientation on the centre square, if n is
     * odd.
      alter orientation 
     * Set up a solved grid.
     
     * Shuffle it. This game is complex enough that I don't feel up
     * to analysing its full symmetry properties (particularly at
     * n=4 and above!), so I'm going to do it the pedestrian way
     * and simply shuffle the grid by making a long sequence of
     * randomly chosen moves.
      Add a random move to avoid parity issues.  w/h of rotation centre space 
                 * See if any previous rotations has happened at
                 * this point which nothing has overlapped since.
                 * If so, ensure we haven't either undone a
                 * previous move or repeated one so many times that
                 * it turns into fewer moves in the inverse
                 * direction (i.e. three identical rotations).
                 
                 * Special case here for w==h==n, in which case
                 * there is actually no way to _avoid_ all moves
                 * repeating or undoing previous ones.
                 
             * Log the rotation we've just performed at this point,
             * for inversion detection in the next move.
             * 
             * Also zero a section of the prevmoves array, because
             * any rotation area which _overlaps_ this one is now
             * entirely safe to perform further moves in.
             * 
             * Two rotation areas overlap if their top left
             * coordinates differ by strictly less than n in both
             * directions
             
     * Now construct the game description, by describing the grid
     * as a simple sequence of integers. They're comma-separated,
     * unless the puzzle is orientable in which case they're
     * separated by orientation letters `u', `d', `l' and `r'.
      delete last comma  eat comma  Pedantic check: ensure buf is large enough to format an int in
     * decimal, using the bound log10(2) < 1/3. (Obviously in practice
     * int is not going to be larger than even 32 bits any time soon,
     * but.) 
     * First work out how many characters we need to display each
     * number. We're pretty flexible on grid contents here, so we
     * have to scan the entire grid.
      Reassure sprintf-checking compilers like gcc that the field
     * width we've just computed is not now excessive 
     * Now we know the exact total size of the grid we're going to
     * produce: it's got h rows, each containing w lots of col+o,
     * w-1 spaces and a trailing newline.
      , wh = w*h 
	 * Determine the coordinates of the click. We offset by n-1
	 * half-blocks so that the user must click at the centre of
	 * a rotation region rather than at the corner.
	  no move to be made 
     * If we reach here, we have a valid move.
     
	 * Simply replace the grid with a solved one. For this game,
	 * this isn't a useful operation for actually telling the user
	 * what they should have done, but it is useful for
	 * conveniently being able to get hold of a clean state from
	 * which to practise manoeuvres.
	  can't parse this move string 
     * See if the game has been completed. To do this we simply
     * test that the grid contents are in increasing order.
      ----------------------------------------------------------------------
 * Drawing routines.
  Ick: fake up `ds->tilesize' for macro expansion purposes  cursor is light-background with a red tinge.  haven't decided yet  clip region  rotation origin  cos and sin of rotation angle  colours of tile edges  round to nearest  round to nearest 
     * If we've been passed a rotation region but we're drawing a
     * tile which is outside it, we must draw it normally. This can
     * occur if we're cleaning up after a completion flash while a
     * new move is also being made.
     
     * We must draw each side of the tile's highlight separately,
     * because in some cases (during rotation) they will all need
     * to be different colours.
      The centre point is common to all sides.  Right side.  Bottom side.  Left side.  Top side. 
     * Now the main blank area in the centre of the tile.
     
     * Next, the triangles for orientation.
      case 3 
     * Our game_anim_length doesn't need to modify its game_ui, so
     * this is the real function which declares ui as const. We must
     * wrap this for the backend structure with a version that has ui
     * non-const, but we still need this version to call from within
     * game_redraw which only has a const ui available.
     
         * Recessed area containing the whole puzzle.
         
     * If we're drawing any rotated tiles, sort out the rotation
     * parameters, and also zap the rotation region to the
     * background colour before doing anything else.
     
	 * Sort out the colours of the various sides of the tile.
	 
     * Now draw each tile.
     
	 * Figure out what should be displayed at this location.
	 * Usually it will be state->grid[i], unless we're in the
	 * middle of animating an actual rotation and this cell is
	 * within the rotation region, in which case we set -1
	 * (always display).
	  cursor has moved (or changed visibility)...  ...we're on new cursor, redraw  ...we were on old cursor, redraw  always redraw when flashing 
     * Update the status bar.
     
         * Don't show the new status until we're also showing the
         * new _state_ - after the game animation is complete.
          game_request_keys  wants_statusbar  flags  vim: set shiftwidth=4 tabstop=8: 
 * twiddle.c: Puzzle involving rearranging a grid of squares by
 * rotating subsquares. Adapted and generalised from a
 * door-unlocking puzzle in Metroid Prime 2 (the one in the Main
 * Gyro Chamber).
  used to suppress completion flash  coordinates of last rotation  structure copy  Shuffle limit is part of the limited parameters, because we have to
     * supply the target move count. 
 * This function actually performs a rotation on a grid. The `x'
 * and `y' coordinates passed in are the coordinates of the _top
 * left corner_ of the rotated region. (Using the centre would have
 * involved half-integers and been annoyingly fiddly. Clicking in
 * the centre is good for a user interface, but too inconvenient to
 * use internally.)
  nothing to do  translate region to top corner 
     * If we were leaving the result of the rotation in a separate
     * grid, the simple thing to do would be to loop over each
     * square within the rotated region and assign it from its
     * source square. However, to do it in place without taking
     * O(n^2) memory, we need to be marginally more clever. What
     * I'm going to do is loop over about one _quarter_ of the
     * rotated region and permute each element within that quarter
     * with its rotational coset.
     * 
     * The size of the region I need to loop over is (n+1)/2 by
     * n/2, which is an obvious exact quarter for even n and is a
     * rectangle for odd n. (For odd n, this technique leaves out
     * one element of the square, which is of course the central
     * one that never moves anyway.)
      alter orientation 
     * Don't forget the orientation on the centre square, if n is
     * odd.
      alter orientation 
     * Set up a solved grid.
     
     * Shuffle it. This game is complex enough that I don't feel up
     * to analysing its full symmetry properties (particularly at
     * n=4 and above!), so I'm going to do it the pedestrian way
     * and simply shuffle the grid by making a long sequence of
     * randomly chosen moves.
      Add a random move to avoid parity issues.  w/h of rotation centre space 
                 * See if any previous rotations has happened at
                 * this point which nothing has overlapped since.
                 * If so, ensure we haven't either undone a
                 * previous move or repeated one so many times that
                 * it turns into fewer moves in the inverse
                 * direction (i.e. three identical rotations).
                 
                 * Special case here for w==h==n, in which case
                 * there is actually no way to _avoid_ all moves
                 * repeating or undoing previous ones.
                 
             * Log the rotation we've just performed at this point,
             * for inversion detection in the next move.
             * 
             * Also zero a section of the prevmoves array, because
             * any rotation area which _overlaps_ this one is now
             * entirely safe to perform further moves in.
             * 
             * Two rotation areas overlap if their top left
             * coordinates differ by strictly less than n in both
             * directions
             
     * Now construct the game description, by describing the grid
     * as a simple sequence of integers. They're comma-separated,
     * unless the puzzle is orientable in which case they're
     * separated by orientation letters `u', `d', `l' and `r'.
      delete last comma  eat comma  Pedantic check: ensure buf is large enough to format an int in
     * decimal, using the bound log10(2) < 1/3. (Obviously in practice
     * int is not going to be larger than even 32 bits any time soon,
     * but.) 
     * First work out how many characters we need to display each
     * number. We're pretty flexible on grid contents here, so we
     * have to scan the entire grid.
      Reassure sprintf-checking compilers like gcc that the field
     * width we've just computed is not now excessive 
     * Now we know the exact total size of the grid we're going to
     * produce: it's got h rows, each containing w lots of col+o,
     * w-1 spaces and a trailing newline.
      , wh = w*h 
	 * Determine the coordinates of the click. We offset by n-1
	 * half-blocks so that the user must click at the centre of
	 * a rotation region rather than at the corner.
	  no move to be made 
     * If we reach here, we have a valid move.
     
	 * Simply replace the grid with a solved one. For this game,
	 * this isn't a useful operation for actually telling the user
	 * what they should have done, but it is useful for
	 * conveniently being able to get hold of a clean state from
	 * which to practise manoeuvres.
	  can't parse this move string 
     * See if the game has been completed. To do this we simply
     * test that the grid contents are in increasing order.
      ----------------------------------------------------------------------
 * Drawing routines.
  Ick: fake up `ds->tilesize' for macro expansion purposes  cursor is light-background with a red tinge.  haven't decided yet  clip region  rotation origin  cos and sin of rotation angle  colours of tile edges  round to nearest  round to nearest 
     * If we've been passed a rotation region but we're drawing a
     * tile which is outside it, we must draw it normally. This can
     * occur if we're cleaning up after a completion flash while a
     * new move is also being made.
     
     * We must draw each side of the tile's highlight separately,
     * because in some cases (during rotation) they will all need
     * to be different colours.
      The centre point is common to all sides.  Right side.  Bottom side.  Left side.  Top side. 
     * Now the main blank area in the centre of the tile.
     
     * Next, the triangles for orientation.
      case 3 
     * Our game_anim_length doesn't need to modify its game_ui, so
     * this is the real function which declares ui as const. We must
     * wrap this for the backend structure with a version that has ui
     * non-const, but we still need this version to call from within
     * game_redraw which only has a const ui available.
     
         * Recessed area containing the whole puzzle.
         
     * If we're drawing any rotated tiles, sort out the rotation
     * parameters, and also zap the rotation region to the
     * background colour before doing anything else.
     
	 * Sort out the colours of the various sides of the tile.
	 
     * Now draw each tile.
     
	 * Figure out what should be displayed at this location.
	 * Usually it will be state->grid[i], unless we're in the
	 * middle of animating an actual rotation and this cell is
	 * within the rotation region, in which case we set -1
	 * (always display).
	  cursor has moved (or changed visibility)...  ...we're on new cursor, redraw  ...we were on old cursor, redraw  always redraw when flashing 
     * Update the status bar.
     
         * Don't show the new status until we're also showing the
         * new _state_ - after the game animation is complete.
          game_request_keys  wants_statusbar  flags  vim: set shiftwidth=4 tabstop=8: 