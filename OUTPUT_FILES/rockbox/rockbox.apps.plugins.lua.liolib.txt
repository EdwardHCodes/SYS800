
** $Id: liolib.c,v 2.73.1.3 2008/01/18 17:47:43 roberto Exp $
** Standard I/O (and system) library
** See Copyright Notice in lua.h
 not a file 
** When creating file handles, always creates a `closed' file handle
** before opening the actual file; so, if there is a memory error, the
** file is not left opened.
 file handle is currently `closed' 
** function to close regular files
 make sure argument is a file  ignore closed files  check that it's a valid file handle  return current value  close/not close file when finished  check that it's a valid file handle  no arguments?  will iterate over default input 
** {======================================================
** READ
** =======================================================
 was fscanf(f, LUA_NUMBER_SCAN, &d) "result" to be removed  read fails  Rockbox already defines read_line()  does not include `eol'  eof?  close buffer  check whether read something  more to read  close buffer  we read at least 1 character  how much to read  number of chars actually read  try to read that much each time  cannot read more than asked  still have to read `n' chars  until end of count or eof  close buffer  no arguments?  to return 1 result  ensure stack space for all results and for auxlib's buffer  number  line  file  read MAX_SIZE_T chars  always success  remove last result  push nil instead  file is already closed?  EOF  generator created file?  close it  }======================================================  optimization: could be done exactly as for strings  signed limit  error  create metatable for file handles  push metatable  metatable.__index = metatable  file methods  open library  create (and set) default files  pop environment for default files 
** $Id: liolib.c,v 2.73.1.3 2008/01/18 17:47:43 roberto Exp $
** Standard I/O (and system) library
** See Copyright Notice in lua.h
 not a file 
** When creating file handles, always creates a `closed' file handle
** before opening the actual file; so, if there is a memory error, the
** file is not left opened.
 file handle is currently `closed' 
** function to close regular files
 make sure argument is a file  ignore closed files  check that it's a valid file handle  return current value  close/not close file when finished  check that it's a valid file handle  no arguments?  will iterate over default input 
** {======================================================
** READ
** =======================================================
 was fscanf(f, LUA_NUMBER_SCAN, &d) "result" to be removed  read fails  Rockbox already defines read_line()  does not include `eol'  eof?  close buffer  check whether read something  more to read  close buffer  we read at least 1 character  how much to read  number of chars actually read  try to read that much each time  cannot read more than asked  still have to read `n' chars  until end of count or eof  close buffer  no arguments?  to return 1 result  ensure stack space for all results and for auxlib's buffer  number  line  file  read MAX_SIZE_T chars  always success  remove last result  push nil instead  file is already closed?  EOF  generator created file?  close it  }======================================================  optimization: could be done exactly as for strings  signed limit  error  create metatable for file handles  push metatable  metatable.__index = metatable  file methods  open library  create (and set) default files  pop environment for default files 
** $Id: liolib.c,v 2.73.1.3 2008/01/18 17:47:43 roberto Exp $
** Standard I/O (and system) library
** See Copyright Notice in lua.h
 not a file 
** When creating file handles, always creates a `closed' file handle
** before opening the actual file; so, if there is a memory error, the
** file is not left opened.
 file handle is currently `closed' 
** function to close regular files
 make sure argument is a file  ignore closed files  check that it's a valid file handle  return current value  close/not close file when finished  check that it's a valid file handle  no arguments?  will iterate over default input 
** {======================================================
** READ
** =======================================================
 was fscanf(f, LUA_NUMBER_SCAN, &d) "result" to be removed  read fails  Rockbox already defines read_line()  does not include `eol'  eof?  close buffer  check whether read something  more to read  close buffer  we read at least 1 character  how much to read  number of chars actually read  try to read that much each time  cannot read more than asked  still have to read `n' chars  until end of count or eof  close buffer  no arguments?  to return 1 result  ensure stack space for all results and for auxlib's buffer  number  line  file  read MAX_SIZE_T chars  always success  remove last result  push nil instead  file is already closed?  EOF  generator created file?  close it  }======================================================  optimization: could be done exactly as for strings  signed limit  error  create metatable for file handles  push metatable  metatable.__index = metatable  file methods  open library  create (and set) default files  pop environment for default files 