**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2004-2007 Antoine Cellerier <dionoea @t videolan d.t org>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************
 * Key definitions
 #ifndef SOL_QUIT#   define SOL_QUIT          BUTTON_TOPLEFTendif*
 * Misc constants, graphics and other defines
  background color  number of cards per suit  number of suits  number of columns  pseudo column numbers to be used for cursor coordinates  columns COL_NUM to COL_NUM + SUITS - 1 correspond to the final stacks  column COL_NUM + SUITS corresponds to the remains' stack  this is what is used when dealing cards *
 * LCD card drawing routines
  Draw a card's border, select it if it's selected and draw the cursor
 * if the cursor is currently over the card  Draw a card's inner graphics  Draw an empty stack  Help *
 * Custom menu / options
  menu return codes *
 * Global variables
  player's cursor  player's cursor column num  selected card  the deck  the remaining cards  first card of the remains' stack  upper visible card from the remains' stack  number of cards drawn from the remains stack - 1  number of cards per draw of the remains' stack  the 7 game columns  the 4 final stacks *
 * Card handling routines
  initialize the game  number of cards that are drawn on the remains' stack (by pressing F2)  init deck  deal the cards ...  ... in the columns  ... shuffle what's left of the deck  we now finished dealing the cards. The game can start ! (at last)  init the stack  the cursor starts on upper left card  no card is selected  init the remainder  find the column number in which 'card' can be found  find the card preceding 'card'  if it doesn't exist, return NOT_A_CARD  find the last card of a given column  the column on which to take src_card  the last card of dest_col  the card under src_card  you can't move no card (at least, it doesn't have any consequence)  you can't put a card back on the remains' stack  you can't move an unknown card  you can't move more than one card at a time from the final stack  to the rest of the game  if we (that means dest) are on one of the 7 columns ...  ... check is we are on an empty color and that the src is a king  this is a winning combination  ... or check if the cards follow one another and have
         * different colorsuit  this is a winning combination  ... or, humpf, well that's not good news  this is not a winning combination  if we are on one of the 4 final stacks ...  ... check if we are on an empty stack...  ... and the src is an ace and this is the correct final stack  this is a winning combination  this is not a winning combination  non-empty stack  ...check if the cards follow one another, have the same suit and
             * {that src has no .next element or is from the remains' stack}  this is a winning combination  ... or, well that's not good news  this is not a winning combination  if we are on the remains' stack  you can't move a card back to the remains' stack  if the src card is from the remains' stack, we don't want to take
     * the following cards  if src card is the first card from the stack  if src card is not the first card from the stack  if the src card is from somewhere else, just take everything  tada ! *
 * Bouncing cards at the end of the game
  flush the button queue  fun stuff :) *
 * Game save/load routines
  Assume good case *
 * The main game loop
 *
 * If skipmenu is defined to SOLITAIRE_QUIT, the menu will be skipped and
 * game will resume.
  get the biggest column length so that display can be "optimized"  don't include the last card in the column length.  no successor: get outta here.  make column distinguishable from an empty column,
                 * and avoid division by zero while displaying  check if there are cards remaining in the game.  if there aren't any, that means you won :)  draw the columns  draw the cursor on empty columns  This is where we change the spacing between cards so that
                 * they don't overflow out of the LCD  draw the stacks  draw the remains  gruik ! (we want to display a card back)  what to do when a key is pressed ...  move cursor to the last card of the previous column
             * or to the previous final stack
             * or to the remains stack  move cursor to the last card of the next column
             * or to the next final stack
             * or to the remains stack  move cursor to card that's bellow  move cursor to card that's above  Try to put card under cursor on one of the stacks  Move cards arround, Uncover cards, ...  reveal a hidden card  select a card  unselect card or try putting card on
                     * one of the 4 stacks  try moving cards  The flexible move must not be used from the remains stack.  If the card on the top of the remains can be put where
             * the cursor is, go ahead  If the card on top of the remains can be put on one
             * of the stacks, do so  unselect selected card  unselect selected card or ...
             * draw new cards from the remains of the deck  unselect selected card  draw new cards form the remains of the deck if the cursor card is null test if any cards are really left on
                     * the remains' stack  if cursor was on remains' stack when new cards were
                     * drawn, put cursor on top of remains' stack  Show the menu  fix incoherences concerning cur_col and cur_card *
 * Plugin entry point
  plugin init  copy to running config  play the game :)
     * Keep playing if a game was won (that means display the menu after
     * winning instead of quiting)  result == SOLITAIRE_USB || result == SOLITAIRE_SAVE_AND_QUIT  save settings if changed  Exit the plugin **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2004-2007 Antoine Cellerier <dionoea @t videolan d.t org>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************
 * Key definitions
 #ifndef SOL_QUIT#   define SOL_QUIT          BUTTON_TOPLEFTendif*
 * Misc constants, graphics and other defines
  background color  number of cards per suit  number of suits  number of columns  pseudo column numbers to be used for cursor coordinates  columns COL_NUM to COL_NUM + SUITS - 1 correspond to the final stacks  column COL_NUM + SUITS corresponds to the remains' stack  this is what is used when dealing cards *
 * LCD card drawing routines
  Draw a card's border, select it if it's selected and draw the cursor
 * if the cursor is currently over the card  Draw a card's inner graphics  Draw an empty stack  Help *
 * Custom menu / options
  menu return codes *
 * Global variables
  player's cursor  player's cursor column num  selected card  the deck  the remaining cards  first card of the remains' stack  upper visible card from the remains' stack  number of cards drawn from the remains stack - 1  number of cards per draw of the remains' stack  the 7 game columns  the 4 final stacks *
 * Card handling routines
  initialize the game  number of cards that are drawn on the remains' stack (by pressing F2)  init deck  deal the cards ...  ... in the columns  ... shuffle what's left of the deck  we now finished dealing the cards. The game can start ! (at last)  init the stack  the cursor starts on upper left card  no card is selected  init the remainder  find the column number in which 'card' can be found  find the card preceding 'card'  if it doesn't exist, return NOT_A_CARD  find the last card of a given column  the column on which to take src_card  the last card of dest_col  the card under src_card  you can't move no card (at least, it doesn't have any consequence)  you can't put a card back on the remains' stack  you can't move an unknown card  you can't move more than one card at a time from the final stack  to the rest of the game  if we (that means dest) are on one of the 7 columns ...  ... check is we are on an empty color and that the src is a king  this is a winning combination  ... or check if the cards follow one another and have
         * different colorsuit  this is a winning combination  ... or, humpf, well that's not good news  this is not a winning combination  if we are on one of the 4 final stacks ...  ... check if we are on an empty stack...  ... and the src is an ace and this is the correct final stack  this is a winning combination  this is not a winning combination  non-empty stack  ...check if the cards follow one another, have the same suit and
             * {that src has no .next element or is from the remains' stack}  this is a winning combination  ... or, well that's not good news  this is not a winning combination  if we are on the remains' stack  you can't move a card back to the remains' stack  if the src card is from the remains' stack, we don't want to take
     * the following cards  if src card is the first card from the stack  if src card is not the first card from the stack  if the src card is from somewhere else, just take everything  tada ! *
 * Bouncing cards at the end of the game
  flush the button queue  fun stuff :) *
 * Game save/load routines
  Assume good case *
 * The main game loop
 *
 * If skipmenu is defined to SOLITAIRE_QUIT, the menu will be skipped and
 * game will resume.
  get the biggest column length so that display can be "optimized"  don't include the last card in the column length.  no successor: get outta here.  make column distinguishable from an empty column,
                 * and avoid division by zero while displaying  check if there are cards remaining in the game.  if there aren't any, that means you won :)  draw the columns  draw the cursor on empty columns  This is where we change the spacing between cards so that
                 * they don't overflow out of the LCD  draw the stacks  draw the remains  gruik ! (we want to display a card back)  what to do when a key is pressed ...  move cursor to the last card of the previous column
             * or to the previous final stack
             * or to the remains stack  move cursor to the last card of the next column
             * or to the next final stack
             * or to the remains stack  move cursor to card that's bellow  move cursor to card that's above  Try to put card under cursor on one of the stacks  Move cards arround, Uncover cards, ...  reveal a hidden card  select a card  unselect card or try putting card on
                     * one of the 4 stacks  try moving cards  The flexible move must not be used from the remains stack.  If the card on the top of the remains can be put where
             * the cursor is, go ahead  If the card on top of the remains can be put on one
             * of the stacks, do so  unselect selected card  unselect selected card or ...
             * draw new cards from the remains of the deck  unselect selected card  draw new cards form the remains of the deck if the cursor card is null test if any cards are really left on
                     * the remains' stack  if cursor was on remains' stack when new cards were
                     * drawn, put cursor on top of remains' stack  Show the menu  fix incoherences concerning cur_col and cur_card *
 * Plugin entry point
  plugin init  copy to running config  play the game :)
     * Keep playing if a game was won (that means display the menu after
     * winning instead of quiting)  result == SOLITAIRE_USB || result == SOLITAIRE_SAVE_AND_QUIT  save settings if changed  Exit the plugin **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2004-2007 Antoine Cellerier <dionoea @t videolan d.t org>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************
 * Key definitions
 #ifndef SOL_QUIT#   define SOL_QUIT          BUTTON_TOPLEFTendif*
 * Misc constants, graphics and other defines
  background color  number of cards per suit  number of suits  number of columns  pseudo column numbers to be used for cursor coordinates  columns COL_NUM to COL_NUM + SUITS - 1 correspond to the final stacks  column COL_NUM + SUITS corresponds to the remains' stack  this is what is used when dealing cards *
 * LCD card drawing routines
  Draw a card's border, select it if it's selected and draw the cursor
 * if the cursor is currently over the card  Draw a card's inner graphics  Draw an empty stack  Help *
 * Custom menu / options
  menu return codes *
 * Global variables
  player's cursor  player's cursor column num  selected card  the deck  the remaining cards  first card of the remains' stack  upper visible card from the remains' stack  number of cards drawn from the remains stack - 1  number of cards per draw of the remains' stack  the 7 game columns  the 4 final stacks *
 * Card handling routines
  initialize the game  number of cards that are drawn on the remains' stack (by pressing F2)  init deck  deal the cards ...  ... in the columns  ... shuffle what's left of the deck  we now finished dealing the cards. The game can start ! (at last)  init the stack  the cursor starts on upper left card  no card is selected  init the remainder  find the column number in which 'card' can be found  find the card preceding 'card'  if it doesn't exist, return NOT_A_CARD  find the last card of a given column  the column on which to take src_card  the last card of dest_col  the card under src_card  you can't move no card (at least, it doesn't have any consequence)  you can't put a card back on the remains' stack  you can't move an unknown card  you can't move more than one card at a time from the final stack  to the rest of the game  if we (that means dest) are on one of the 7 columns ...  ... check is we are on an empty color and that the src is a king  this is a winning combination  ... or check if the cards follow one another and have
         * different colorsuit  this is a winning combination  ... or, humpf, well that's not good news  this is not a winning combination  if we are on one of the 4 final stacks ...  ... check if we are on an empty stack...  ... and the src is an ace and this is the correct final stack  this is a winning combination  this is not a winning combination  non-empty stack  ...check if the cards follow one another, have the same suit and
             * {that src has no .next element or is from the remains' stack}  this is a winning combination  ... or, well that's not good news  this is not a winning combination  if we are on the remains' stack  you can't move a card back to the remains' stack  if the src card is from the remains' stack, we don't want to take
     * the following cards  if src card is the first card from the stack  if src card is not the first card from the stack  if the src card is from somewhere else, just take everything  tada ! *
 * Bouncing cards at the end of the game
  flush the button queue  fun stuff :) *
 * Game save/load routines
  Assume good case *
 * The main game loop
 *
 * If skipmenu is defined to SOLITAIRE_QUIT, the menu will be skipped and
 * game will resume.
  get the biggest column length so that display can be "optimized"  don't include the last card in the column length.  no successor: get outta here.  make column distinguishable from an empty column,
                 * and avoid division by zero while displaying  check if there are cards remaining in the game.  if there aren't any, that means you won :)  draw the columns  draw the cursor on empty columns  This is where we change the spacing between cards so that
                 * they don't overflow out of the LCD  draw the stacks  draw the remains  gruik ! (we want to display a card back)  what to do when a key is pressed ...  move cursor to the last card of the previous column
             * or to the previous final stack
             * or to the remains stack  move cursor to the last card of the next column
             * or to the next final stack
             * or to the remains stack  move cursor to card that's bellow  move cursor to card that's above  Try to put card under cursor on one of the stacks  Move cards arround, Uncover cards, ...  reveal a hidden card  select a card  unselect card or try putting card on
                     * one of the 4 stacks  try moving cards  The flexible move must not be used from the remains stack.  If the card on the top of the remains can be put where
             * the cursor is, go ahead  If the card on top of the remains can be put on one
             * of the stacks, do so  unselect selected card  unselect selected card or ...
             * draw new cards from the remains of the deck  unselect selected card  draw new cards form the remains of the deck if the cursor card is null test if any cards are really left on
                     * the remains' stack  if cursor was on remains' stack when new cards were
                     * drawn, put cursor on top of remains' stack  Show the menu  fix incoherences concerning cur_col and cur_card *
 * Plugin entry point
  plugin init  copy to running config  play the game :)
     * Keep playing if a game was won (that means display the menu after
     * winning instead of quiting)  result == SOLITAIRE_USB || result == SOLITAIRE_SAVE_AND_QUIT  save settings if changed  Exit the plugin 