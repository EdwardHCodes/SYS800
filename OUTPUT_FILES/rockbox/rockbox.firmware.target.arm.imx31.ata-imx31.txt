**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Will Robertson
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** PIO modes timing info  t2 during write  t2 during read  tA  t1  t4  t9  PIO mode 0  PIO mode 1  PIO mode 2  PIO mode 3  PIO mode 4  Track first init  One DMA channel for reads, the other for writes othewise one channel would
 * have to be reinitialized every time the direction changed. (Different
 * SDMA scripts are used for reading or writing)  Use default priority for these channels (1) - ATA isn't realtime urgent.  Maximum DMA size per buffer descriptor (32-byte aligned)  65504  Number of buffer descriptors required for a maximum sector count trasfer.
 * NOTE: Assumes LBA28 and 512-byte sectors!  tM  tH  tD  tKW  MDMA mode 0  MDMA mode 1  MDMA mode 2  tACK  tENV  tRP  tZAH  tMLI  tDVH  tDVS+tDVH?  tDVS  ??  tSS  tCYC  UDMA mode 0  UDMA mode 1  UDMA mode 2  UDMA mode 3  UDMA mode 4  UDMA mode 5 (bus clock 80MHz or higher only) * Threading * Signal to tell thread when DMA is done * SDMA * Array of buffer descriptors for large transfers and alignnment  ATA channel descriptors  Read/write channels share buffer descriptors and callbacks  read channel  write channel  DMA channel to be started for transfer * Buffers * Scatter buffer for first and last 32 bytes of a non cache-aligned transfer
 * to cached RAM.  Address of ends in destination buffer for unaligned reads - copied after
 * DMA completes. * Modes * Using multiword DMA  Using Ultra DMA  Using PIO  DMA init error - use PIO  HAVE_ATA_DMA  T = ATA clock period in nanoseconds  Route the INTRQ to either the MCU or SDMA depending upon whether there is
 * a DMA transfer in progress.  Setup the timing for PIO mode  1.5 + tAX  Be sure we're not busy  Unconditionally clock module before writing regs  Disable off - unclock ATA module  Configuration error - no DMA  Using Ultra DMA  Using Multiword DMA  Don't understand this - force PIO.  Called by SDMA when transfer is complete  Clear FIFO if not empty - shouldn't happen  Clear FIFO interrupts (the only ones that can be)  Return INTRQ to MCU  Signal waiting thread  Too much? Implies BD count should be reevaluated since this
         * shouldn't be reached based upon size. Otherwise we simply didn't
         * understand the DMA mode setup. Force PIO in both cases.  Assume not needed  No cache alignment concerns  addr is virtual  Setup ATA controller for DMA transmit  Setup ATA controller for DMA receive  addr is virtual  Not cache aligned, must use scatter buffers for first and
                 * last 32 bytes.  There will be exactly 32 bytes left  Final buffer - wrap to base bd, interrupt  Setup buffer descriptors for both cache-aligned reads and all write
     * operations.  Final buffer - wrap to base bd, interrupt  Give INTRQ to DMA  Kick the channel to wait for events  Epic fail - timed out - maybe.  Strip INTRQ from DMA  Stop DMA  DMA really did finish after timeout  Reset everything + clear error  Channel error in one or more descriptors  Reset everything + clear error  NOTE: This requires that unaligned access support be enabled!  Prefetch at DMA-direct boundaries  Copy the 32-bytes to destination  stmia doesn't work unaligned  Copy the 32-bytes to destination  stmia doesn't work unaligned  HAVE_ATA_DMA  timed out  BSY = 0  RDY = 1 && BSY = 0  Make sure we're not in reset mode  All modes use same tOFF/tON  Setup mode 0 for all by default
     * Mode may be switched later once identify info is ready in which
     * case the main driver calls back  Called for first time at startup  Channel init error - disable DMA forever  HAVE_ATA_DMA **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Will Robertson
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** PIO modes timing info  t2 during write  t2 during read  tA  t1  t4  t9  PIO mode 0  PIO mode 1  PIO mode 2  PIO mode 3  PIO mode 4  Track first init  One DMA channel for reads, the other for writes othewise one channel would
 * have to be reinitialized every time the direction changed. (Different
 * SDMA scripts are used for reading or writing)  Use default priority for these channels (1) - ATA isn't realtime urgent.  Maximum DMA size per buffer descriptor (32-byte aligned)  65504  Number of buffer descriptors required for a maximum sector count trasfer.
 * NOTE: Assumes LBA28 and 512-byte sectors!  tM  tH  tD  tKW  MDMA mode 0  MDMA mode 1  MDMA mode 2  tACK  tENV  tRP  tZAH  tMLI  tDVH  tDVS+tDVH?  tDVS  ??  tSS  tCYC  UDMA mode 0  UDMA mode 1  UDMA mode 2  UDMA mode 3  UDMA mode 4  UDMA mode 5 (bus clock 80MHz or higher only) * Threading * Signal to tell thread when DMA is done * SDMA * Array of buffer descriptors for large transfers and alignnment  ATA channel descriptors  Read/write channels share buffer descriptors and callbacks  read channel  write channel  DMA channel to be started for transfer * Buffers * Scatter buffer for first and last 32 bytes of a non cache-aligned transfer
 * to cached RAM.  Address of ends in destination buffer for unaligned reads - copied after
 * DMA completes. * Modes * Using multiword DMA  Using Ultra DMA  Using PIO  DMA init error - use PIO  HAVE_ATA_DMA  T = ATA clock period in nanoseconds  Route the INTRQ to either the MCU or SDMA depending upon whether there is
 * a DMA transfer in progress.  Setup the timing for PIO mode  1.5 + tAX  Be sure we're not busy  Unconditionally clock module before writing regs  Disable off - unclock ATA module  Configuration error - no DMA  Using Ultra DMA  Using Multiword DMA  Don't understand this - force PIO.  Called by SDMA when transfer is complete  Clear FIFO if not empty - shouldn't happen  Clear FIFO interrupts (the only ones that can be)  Return INTRQ to MCU  Signal waiting thread  Too much? Implies BD count should be reevaluated since this
         * shouldn't be reached based upon size. Otherwise we simply didn't
         * understand the DMA mode setup. Force PIO in both cases.  Assume not needed  No cache alignment concerns  addr is virtual  Setup ATA controller for DMA transmit  Setup ATA controller for DMA receive  addr is virtual  Not cache aligned, must use scatter buffers for first and
                 * last 32 bytes.  There will be exactly 32 bytes left  Final buffer - wrap to base bd, interrupt  Setup buffer descriptors for both cache-aligned reads and all write
     * operations.  Final buffer - wrap to base bd, interrupt  Give INTRQ to DMA  Kick the channel to wait for events  Epic fail - timed out - maybe.  Strip INTRQ from DMA  Stop DMA  DMA really did finish after timeout  Reset everything + clear error  Channel error in one or more descriptors  Reset everything + clear error  NOTE: This requires that unaligned access support be enabled!  Prefetch at DMA-direct boundaries  Copy the 32-bytes to destination  stmia doesn't work unaligned  Copy the 32-bytes to destination  stmia doesn't work unaligned  HAVE_ATA_DMA  timed out  BSY = 0  RDY = 1 && BSY = 0  Make sure we're not in reset mode  All modes use same tOFF/tON  Setup mode 0 for all by default
     * Mode may be switched later once identify info is ready in which
     * case the main driver calls back  Called for first time at startup  Channel init error - disable DMA forever  HAVE_ATA_DMA **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Will Robertson
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** PIO modes timing info  t2 during write  t2 during read  tA  t1  t4  t9  PIO mode 0  PIO mode 1  PIO mode 2  PIO mode 3  PIO mode 4  Track first init  One DMA channel for reads, the other for writes othewise one channel would
 * have to be reinitialized every time the direction changed. (Different
 * SDMA scripts are used for reading or writing)  Use default priority for these channels (1) - ATA isn't realtime urgent.  Maximum DMA size per buffer descriptor (32-byte aligned)  65504  Number of buffer descriptors required for a maximum sector count trasfer.
 * NOTE: Assumes LBA28 and 512-byte sectors!  tM  tH  tD  tKW  MDMA mode 0  MDMA mode 1  MDMA mode 2  tACK  tENV  tRP  tZAH  tMLI  tDVH  tDVS+tDVH?  tDVS  ??  tSS  tCYC  UDMA mode 0  UDMA mode 1  UDMA mode 2  UDMA mode 3  UDMA mode 4  UDMA mode 5 (bus clock 80MHz or higher only) * Threading * Signal to tell thread when DMA is done * SDMA * Array of buffer descriptors for large transfers and alignnment  ATA channel descriptors  Read/write channels share buffer descriptors and callbacks  read channel  write channel  DMA channel to be started for transfer * Buffers * Scatter buffer for first and last 32 bytes of a non cache-aligned transfer
 * to cached RAM.  Address of ends in destination buffer for unaligned reads - copied after
 * DMA completes. * Modes * Using multiword DMA  Using Ultra DMA  Using PIO  DMA init error - use PIO  HAVE_ATA_DMA  T = ATA clock period in nanoseconds  Route the INTRQ to either the MCU or SDMA depending upon whether there is
 * a DMA transfer in progress.  Setup the timing for PIO mode  1.5 + tAX  Be sure we're not busy  Unconditionally clock module before writing regs  Disable off - unclock ATA module  Configuration error - no DMA  Using Ultra DMA  Using Multiword DMA  Don't understand this - force PIO.  Called by SDMA when transfer is complete  Clear FIFO if not empty - shouldn't happen  Clear FIFO interrupts (the only ones that can be)  Return INTRQ to MCU  Signal waiting thread  Too much? Implies BD count should be reevaluated since this
         * shouldn't be reached based upon size. Otherwise we simply didn't
         * understand the DMA mode setup. Force PIO in both cases.  Assume not needed  No cache alignment concerns  addr is virtual  Setup ATA controller for DMA transmit  Setup ATA controller for DMA receive  addr is virtual  Not cache aligned, must use scatter buffers for first and
                 * last 32 bytes.  There will be exactly 32 bytes left  Final buffer - wrap to base bd, interrupt  Setup buffer descriptors for both cache-aligned reads and all write
     * operations.  Final buffer - wrap to base bd, interrupt  Give INTRQ to DMA  Kick the channel to wait for events  Epic fail - timed out - maybe.  Strip INTRQ from DMA  Stop DMA  DMA really did finish after timeout  Reset everything + clear error  Channel error in one or more descriptors  Reset everything + clear error  NOTE: This requires that unaligned access support be enabled!  Prefetch at DMA-direct boundaries  Copy the 32-bytes to destination  stmia doesn't work unaligned  Copy the 32-bytes to destination  stmia doesn't work unaligned  HAVE_ATA_DMA  timed out  BSY = 0  RDY = 1 && BSY = 0  Make sure we're not in reset mode  All modes use same tOFF/tON  Setup mode 0 for all by default
     * Mode may be switched later once identify info is ready in which
     * case the main driver calls back  Called for first time at startup  Channel init error - disable DMA forever  HAVE_ATA_DMA 