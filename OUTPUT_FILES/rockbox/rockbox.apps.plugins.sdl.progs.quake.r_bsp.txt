
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 r_bsp.c current entity info modelorg is the viewpoint reletive to the currently rendering entity the currently rendering entity in world coordinates 6K 12K===========================================================================
================
R_EntityRotate
================

================
R_RotateBmodel
================
 TODO: should use a look-up table TODO: should really be stored with the entity instead of being reconstructed TODO: could cache lazily, stored in the entity TODO: share work with R_SetUpAliasTransform yaw pitch roll rotate modelorg and the transformation matrix
================
R_RecursiveClipBPoly
================
 transform the BSP plane into model space FIXME: cache these? clip edges to BSP plane set the status for the last point as the previous point FIXME: cache this stuff somehow? clipped generate the clipped vertex split into two edges, one on each side, and remember entering and exiting points FIXME: share the clip edge by having a winding direction flag? entering for front, exiting for back add the edge to the appropriate side if anything was clipped, reconstitute and add the edges along the clip plane to both sides (but in opposite directions) draw or recurse further draw if we've reached a non-solid leaf, done if all that's left is a solid leaf, and continue down the tree if it's not a leaf we're done with this branch if the node or leaf isn't in the PVS
================
R_DrawSolidClippedSubmodelPolygons
================
 FIXME: use bounding-box-based frustum clipping info? find which side of the node we are on draw the polygon FIXME: use bounding-box-based frustum clipping info? copy the edges to bedges, flipping if necessary so always clockwise winding FIXME: if edges and vertices get caches, these assignments must move outside the loop, and overflow checking must be done here mark end of edges
================
R_DrawSubmodelPolygons
================
 FIXME: use bounding-box-based frustum clipping info? find which side of the node we are on draw the polygon FIXME: use bounding-box-based frustum clipping info?
================
R_RecursiveWorldNode
================
 solid cull the clipping planes if not trivial accept FIXME: the compiler is doing a lousy job of optimizing here; it could be  twice as fast in ASM don't need to clip against it generate accept and reject points FIXME: do with fast look-ups or integer tests based on the sign bit of the floating point values node is entirely on screen node is entirely on screen if a leaf node, draw stuff deal with model fragments in this leaf all bmodels in a leaf share the same key node is just a decision point, so go down the apropriate sides find which side of the node we are on recurse down the children, front side first draw stuff all surfaces on the same node share the same sequence number recurse down the back side
================
R_RenderWorld
================
modelorg_fxp[0]=(int)(r_origin[0]*65536.0);modelorg_fxp[1]=(int)(r_origin[1]*65536.0);modelorg_fxp[2]=(int)(r_origin[2]*65536.0);Dan Fixed point conversion stuff if the driver wants the polygons back to front, play the visible ones back in that order
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 r_bsp.c current entity info modelorg is the viewpoint reletive to the currently rendering entity the currently rendering entity in world coordinates 6K 12K===========================================================================
================
R_EntityRotate
================

================
R_RotateBmodel
================
 TODO: should use a look-up table TODO: should really be stored with the entity instead of being reconstructed TODO: could cache lazily, stored in the entity TODO: share work with R_SetUpAliasTransform yaw pitch roll rotate modelorg and the transformation matrix
================
R_RecursiveClipBPoly
================
 transform the BSP plane into model space FIXME: cache these? clip edges to BSP plane set the status for the last point as the previous point FIXME: cache this stuff somehow? clipped generate the clipped vertex split into two edges, one on each side, and remember entering and exiting points FIXME: share the clip edge by having a winding direction flag? entering for front, exiting for back add the edge to the appropriate side if anything was clipped, reconstitute and add the edges along the clip plane to both sides (but in opposite directions) draw or recurse further draw if we've reached a non-solid leaf, done if all that's left is a solid leaf, and continue down the tree if it's not a leaf we're done with this branch if the node or leaf isn't in the PVS
================
R_DrawSolidClippedSubmodelPolygons
================
 FIXME: use bounding-box-based frustum clipping info? find which side of the node we are on draw the polygon FIXME: use bounding-box-based frustum clipping info? copy the edges to bedges, flipping if necessary so always clockwise winding FIXME: if edges and vertices get caches, these assignments must move outside the loop, and overflow checking must be done here mark end of edges
================
R_DrawSubmodelPolygons
================
 FIXME: use bounding-box-based frustum clipping info? find which side of the node we are on draw the polygon FIXME: use bounding-box-based frustum clipping info?
================
R_RecursiveWorldNode
================
 solid cull the clipping planes if not trivial accept FIXME: the compiler is doing a lousy job of optimizing here; it could be  twice as fast in ASM don't need to clip against it generate accept and reject points FIXME: do with fast look-ups or integer tests based on the sign bit of the floating point values node is entirely on screen node is entirely on screen if a leaf node, draw stuff deal with model fragments in this leaf all bmodels in a leaf share the same key node is just a decision point, so go down the apropriate sides find which side of the node we are on recurse down the children, front side first draw stuff all surfaces on the same node share the same sequence number recurse down the back side
================
R_RenderWorld
================
modelorg_fxp[0]=(int)(r_origin[0]*65536.0);modelorg_fxp[1]=(int)(r_origin[1]*65536.0);modelorg_fxp[2]=(int)(r_origin[2]*65536.0);Dan Fixed point conversion stuff if the driver wants the polygons back to front, play the visible ones back in that order
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 r_bsp.c current entity info modelorg is the viewpoint reletive to the currently rendering entity the currently rendering entity in world coordinates 6K 12K===========================================================================
================
R_EntityRotate
================

================
R_RotateBmodel
================
 TODO: should use a look-up table TODO: should really be stored with the entity instead of being reconstructed TODO: could cache lazily, stored in the entity TODO: share work with R_SetUpAliasTransform yaw pitch roll rotate modelorg and the transformation matrix
================
R_RecursiveClipBPoly
================
 transform the BSP plane into model space FIXME: cache these? clip edges to BSP plane set the status for the last point as the previous point FIXME: cache this stuff somehow? clipped generate the clipped vertex split into two edges, one on each side, and remember entering and exiting points FIXME: share the clip edge by having a winding direction flag? entering for front, exiting for back add the edge to the appropriate side if anything was clipped, reconstitute and add the edges along the clip plane to both sides (but in opposite directions) draw or recurse further draw if we've reached a non-solid leaf, done if all that's left is a solid leaf, and continue down the tree if it's not a leaf we're done with this branch if the node or leaf isn't in the PVS
================
R_DrawSolidClippedSubmodelPolygons
================
 FIXME: use bounding-box-based frustum clipping info? find which side of the node we are on draw the polygon FIXME: use bounding-box-based frustum clipping info? copy the edges to bedges, flipping if necessary so always clockwise winding FIXME: if edges and vertices get caches, these assignments must move outside the loop, and overflow checking must be done here mark end of edges
================
R_DrawSubmodelPolygons
================
 FIXME: use bounding-box-based frustum clipping info? find which side of the node we are on draw the polygon FIXME: use bounding-box-based frustum clipping info?
================
R_RecursiveWorldNode
================
 solid cull the clipping planes if not trivial accept FIXME: the compiler is doing a lousy job of optimizing here; it could be  twice as fast in ASM don't need to clip against it generate accept and reject points FIXME: do with fast look-ups or integer tests based on the sign bit of the floating point values node is entirely on screen node is entirely on screen if a leaf node, draw stuff deal with model fragments in this leaf all bmodels in a leaf share the same key node is just a decision point, so go down the apropriate sides find which side of the node we are on recurse down the children, front side first draw stuff all surfaces on the same node share the same sequence number recurse down the back side
================
R_RenderWorld
================
modelorg_fxp[0]=(int)(r_origin[0]*65536.0);modelorg_fxp[1]=(int)(r_origin[1]*65536.0);modelorg_fxp[2]=(int)(r_origin[2]*65536.0);Dan Fixed point conversion stuff if the driver wants the polygons back to front, play the visible ones back in that order