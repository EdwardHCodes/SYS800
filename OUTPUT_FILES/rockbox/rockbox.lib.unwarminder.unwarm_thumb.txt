**************************************************************************
 * ARM Stack Unwinder, Michael.McTernan.2001@cs.bris.ac.uk
 *
 * This program is PUBLIC DOMAIN.
 * This means that there is no copyright and anyone is able to take a copy
 * for free and use it as they wish, with or without modifications, and in
 * any context, commercially or otherwise. The only limitation is that I
 * don't guarantee that the software is fit for any purpose or accept any
 * liability for it's use or misuse - this software is without warranty.
 ***************************************************************************
 * File Description: Abstract interpretation for Thumb mode.
 ***************************************************************************************************************************************************
 * Include Files
 ***************************************************************************************************************************************************
 * Manifest Constants
 ***************************************************************************************************************************************************
 * Type Definitions
 ***************************************************************************************************************************************************
 * Variables
 ***************************************************************************************************************************************************
 * Macros
 ***************************************************************************************************************************************************
 * Local Functions
 ************************************************************************** Sign extend an 11 bit value.
 * This function simply inspects bit 11 of the input \a value, and if
 * set, the top 5 bits are set to give a 2's compliment signed value.
 * \param value   The value to sign extend.
 * \return The signed-11 bit value stored in a 16bit data type.
 **************************************************************************
 * Global Functions
 ************************************************************************* Attempt to read the instruction  Check that the PC is still on Thumb alignment  Check that the SP and PC have not been invalidated  Format 1: Move shifted register
         *  LSL Rd, Rs, #Offset5
         *  LSR Rd, Rs, #Offset5
         *  ASR Rd, Rs, #Offset5
          LSL  LSR  ASR  Format 2: add/subtract
         *  ADD Rd, Rs, Rn
         *  ADD Rd, Rs, #Offset3
         *  SUB Rd, Rs, Rn
         *  SUB Rd, Rs, #Offset3
          Print decoding  Perform calculation  Propagate the origin  Perform calculation  Propagate the origin  Format 3: move/compare/add/subtract immediate
         *  MOV Rd, #Offset8
         *  CMP Rd, #Offset8
         *  ADD Rd, #Offset8
         *  SUB Rd, #Offset8
          MOV  CMP  Irrelevant to unwinding  ADD  SUB  Format 4: ALU operations
         *  AND Rd, Rs
         *  EOR Rd, Rs
         *  LSL Rd, Rs
         *  LSR Rd, Rs
         *  ASR Rd, Rs
         *  ADC Rd, Rs
         *  SBC Rd, Rs
         *  ROR Rd, Rs
         *  TST Rd, Rs
         *  NEG Rd, Rs
         *  CMP Rd, Rs
         *  CMN Rd, Rs
         *  ORR Rd, Rs
         *  MUL Rd, Rs
         *  BIC Rd, Rs
         *  MVN Rd, Rs
          Print the mnemonic and registers  AND  EOR  LSL  LSR  ASR  ROR  NEG  ORR  MUL  MVN  ADC  SBC  TST  CMP  CMN  Irrelevant to unwinding  BIC  Perform operation  AND  EOR  LSL  LSR  ASR  ADC  SBC  TST  CMP  CMN  ROR  NEG  ORR  MUL  BIC  MVN  Propagate data origins  AND  EOR  LSL  LSR  ASR  ROR  ORR  MUL  BIC  ADC  SBC  C-bit not tracked  TST  CMP  CMN  Nothing propagated  NEG  MVN  Format 5: Hi register operations/branch exchange
         *  ADD Rd, Hs
         *  ADD Hd, Rs
         *  ADD Hd, Hs
          Adjust the register numbers  ADD  CMP  Irrelevant to unwinding  MOV  BX  Only follow BX if the data was from the stack  Report the return address, including mode bit  Update the PC  Determine the new mode  Branching to THUMB  Account for the auto-increment which isn't needed  Branch to ARM  Format 9: PC-relative load
         *  LDR Rd,[PC, #imm]
          Compute load address, adding a word to account for prefetch  Format 13: add offset to Stack Pointer
         *  ADD sp,#+imm
         *  ADD sp,#-imm
          Check the negative bit  Format 14: push/pop registers
         *  PUSH {Rlist}
         *  PUSH {Rlist, LR}
         *  POP {Rlist}
         *  POP {Rlist, PC}
          Load from memory: POP  Read the word  Alter the origin to be from the stack if it was valid  Check if the PC is to be popped  Get the return address  Alter the origin to be from the stack if it was valid  Return address is not valid  The bottom bit should have been set to indicate that
                         *  the caller was from Thumb.  This would allow return
                         *  by BX for interworking APCS.
                          Pop into the PC will not switch mode  Store the return address  Now have the return address  Update the pc  Compensate for the auto-increment, which isn't needed here  Store to memory: PUSH  Check if the LR is to be pushed  Write the register value to memory  Format 18: unconditional branch
         *  B label
          Branch distance is twice that specified in the instruction.  Update PC  Need to advance by a word to account for pre-fetch.
             *  Advance by a half word here, allowing the normal address
             *  advance to account for the other half word.
              Display PC of next instruction  Unknown/undecoded.  May alter some register, so invalidate file  Should never hit the reset vector  Check next address  Garbage collect the memory hash (used only for the stack)  UPGRADE_ARM_STACK_UNWIND  END OF FILE **************************************************************************
 * ARM Stack Unwinder, Michael.McTernan.2001@cs.bris.ac.uk
 *
 * This program is PUBLIC DOMAIN.
 * This means that there is no copyright and anyone is able to take a copy
 * for free and use it as they wish, with or without modifications, and in
 * any context, commercially or otherwise. The only limitation is that I
 * don't guarantee that the software is fit for any purpose or accept any
 * liability for it's use or misuse - this software is without warranty.
 ***************************************************************************
 * File Description: Abstract interpretation for Thumb mode.
 ***************************************************************************************************************************************************
 * Include Files
 ***************************************************************************************************************************************************
 * Manifest Constants
 ***************************************************************************************************************************************************
 * Type Definitions
 ***************************************************************************************************************************************************
 * Variables
 ***************************************************************************************************************************************************
 * Macros
 ***************************************************************************************************************************************************
 * Local Functions
 ************************************************************************** Sign extend an 11 bit value.
 * This function simply inspects bit 11 of the input \a value, and if
 * set, the top 5 bits are set to give a 2's compliment signed value.
 * \param value   The value to sign extend.
 * \return The signed-11 bit value stored in a 16bit data type.
 **************************************************************************
 * Global Functions
 ************************************************************************* Attempt to read the instruction  Check that the PC is still on Thumb alignment  Check that the SP and PC have not been invalidated  Format 1: Move shifted register
         *  LSL Rd, Rs, #Offset5
         *  LSR Rd, Rs, #Offset5
         *  ASR Rd, Rs, #Offset5
          LSL  LSR  ASR  Format 2: add/subtract
         *  ADD Rd, Rs, Rn
         *  ADD Rd, Rs, #Offset3
         *  SUB Rd, Rs, Rn
         *  SUB Rd, Rs, #Offset3
          Print decoding  Perform calculation  Propagate the origin  Perform calculation  Propagate the origin  Format 3: move/compare/add/subtract immediate
         *  MOV Rd, #Offset8
         *  CMP Rd, #Offset8
         *  ADD Rd, #Offset8
         *  SUB Rd, #Offset8
          MOV  CMP  Irrelevant to unwinding  ADD  SUB  Format 4: ALU operations
         *  AND Rd, Rs
         *  EOR Rd, Rs
         *  LSL Rd, Rs
         *  LSR Rd, Rs
         *  ASR Rd, Rs
         *  ADC Rd, Rs
         *  SBC Rd, Rs
         *  ROR Rd, Rs
         *  TST Rd, Rs
         *  NEG Rd, Rs
         *  CMP Rd, Rs
         *  CMN Rd, Rs
         *  ORR Rd, Rs
         *  MUL Rd, Rs
         *  BIC Rd, Rs
         *  MVN Rd, Rs
          Print the mnemonic and registers  AND  EOR  LSL  LSR  ASR  ROR  NEG  ORR  MUL  MVN  ADC  SBC  TST  CMP  CMN  Irrelevant to unwinding  BIC  Perform operation  AND  EOR  LSL  LSR  ASR  ADC  SBC  TST  CMP  CMN  ROR  NEG  ORR  MUL  BIC  MVN  Propagate data origins  AND  EOR  LSL  LSR  ASR  ROR  ORR  MUL  BIC  ADC  SBC  C-bit not tracked  TST  CMP  CMN  Nothing propagated  NEG  MVN  Format 5: Hi register operations/branch exchange
         *  ADD Rd, Hs
         *  ADD Hd, Rs
         *  ADD Hd, Hs
          Adjust the register numbers  ADD  CMP  Irrelevant to unwinding  MOV  BX  Only follow BX if the data was from the stack  Report the return address, including mode bit  Update the PC  Determine the new mode  Branching to THUMB  Account for the auto-increment which isn't needed  Branch to ARM  Format 9: PC-relative load
         *  LDR Rd,[PC, #imm]
          Compute load address, adding a word to account for prefetch  Format 13: add offset to Stack Pointer
         *  ADD sp,#+imm
         *  ADD sp,#-imm
          Check the negative bit  Format 14: push/pop registers
         *  PUSH {Rlist}
         *  PUSH {Rlist, LR}
         *  POP {Rlist}
         *  POP {Rlist, PC}
          Load from memory: POP  Read the word  Alter the origin to be from the stack if it was valid  Check if the PC is to be popped  Get the return address  Alter the origin to be from the stack if it was valid  Return address is not valid  The bottom bit should have been set to indicate that
                         *  the caller was from Thumb.  This would allow return
                         *  by BX for interworking APCS.
                          Pop into the PC will not switch mode  Store the return address  Now have the return address  Update the pc  Compensate for the auto-increment, which isn't needed here  Store to memory: PUSH  Check if the LR is to be pushed  Write the register value to memory  Format 18: unconditional branch
         *  B label
          Branch distance is twice that specified in the instruction.  Update PC  Need to advance by a word to account for pre-fetch.
             *  Advance by a half word here, allowing the normal address
             *  advance to account for the other half word.
              Display PC of next instruction  Unknown/undecoded.  May alter some register, so invalidate file  Should never hit the reset vector  Check next address  Garbage collect the memory hash (used only for the stack)  UPGRADE_ARM_STACK_UNWIND  END OF FILE **************************************************************************
 * ARM Stack Unwinder, Michael.McTernan.2001@cs.bris.ac.uk
 *
 * This program is PUBLIC DOMAIN.
 * This means that there is no copyright and anyone is able to take a copy
 * for free and use it as they wish, with or without modifications, and in
 * any context, commercially or otherwise. The only limitation is that I
 * don't guarantee that the software is fit for any purpose or accept any
 * liability for it's use or misuse - this software is without warranty.
 ***************************************************************************
 * File Description: Abstract interpretation for Thumb mode.
 ***************************************************************************************************************************************************
 * Include Files
 ***************************************************************************************************************************************************
 * Manifest Constants
 ***************************************************************************************************************************************************
 * Type Definitions
 ***************************************************************************************************************************************************
 * Variables
 ***************************************************************************************************************************************************
 * Macros
 ***************************************************************************************************************************************************
 * Local Functions
 ************************************************************************** Sign extend an 11 bit value.
 * This function simply inspects bit 11 of the input \a value, and if
 * set, the top 5 bits are set to give a 2's compliment signed value.
 * \param value   The value to sign extend.
 * \return The signed-11 bit value stored in a 16bit data type.
 **************************************************************************
 * Global Functions
 ************************************************************************* Attempt to read the instruction  Check that the PC is still on Thumb alignment  Check that the SP and PC have not been invalidated  Format 1: Move shifted register
         *  LSL Rd, Rs, #Offset5
         *  LSR Rd, Rs, #Offset5
         *  ASR Rd, Rs, #Offset5
          LSL  LSR  ASR  Format 2: add/subtract
         *  ADD Rd, Rs, Rn
         *  ADD Rd, Rs, #Offset3
         *  SUB Rd, Rs, Rn
         *  SUB Rd, Rs, #Offset3
          Print decoding  Perform calculation  Propagate the origin  Perform calculation  Propagate the origin  Format 3: move/compare/add/subtract immediate
         *  MOV Rd, #Offset8
         *  CMP Rd, #Offset8
         *  ADD Rd, #Offset8
         *  SUB Rd, #Offset8
          MOV  CMP  Irrelevant to unwinding  ADD  SUB  Format 4: ALU operations
         *  AND Rd, Rs
         *  EOR Rd, Rs
         *  LSL Rd, Rs
         *  LSR Rd, Rs
         *  ASR Rd, Rs
         *  ADC Rd, Rs
         *  SBC Rd, Rs
         *  ROR Rd, Rs
         *  TST Rd, Rs
         *  NEG Rd, Rs
         *  CMP Rd, Rs
         *  CMN Rd, Rs
         *  ORR Rd, Rs
         *  MUL Rd, Rs
         *  BIC Rd, Rs
         *  MVN Rd, Rs
          Print the mnemonic and registers  AND  EOR  LSL  LSR  ASR  ROR  NEG  ORR  MUL  MVN  ADC  SBC  TST  CMP  CMN  Irrelevant to unwinding  BIC  Perform operation  AND  EOR  LSL  LSR  ASR  ADC  SBC  TST  CMP  CMN  ROR  NEG  ORR  MUL  BIC  MVN  Propagate data origins  AND  EOR  LSL  LSR  ASR  ROR  ORR  MUL  BIC  ADC  SBC  C-bit not tracked  TST  CMP  CMN  Nothing propagated  NEG  MVN  Format 5: Hi register operations/branch exchange
         *  ADD Rd, Hs
         *  ADD Hd, Rs
         *  ADD Hd, Hs
          Adjust the register numbers  ADD  CMP  Irrelevant to unwinding  MOV  BX  Only follow BX if the data was from the stack  Report the return address, including mode bit  Update the PC  Determine the new mode  Branching to THUMB  Account for the auto-increment which isn't needed  Branch to ARM  Format 9: PC-relative load
         *  LDR Rd,[PC, #imm]
          Compute load address, adding a word to account for prefetch  Format 13: add offset to Stack Pointer
         *  ADD sp,#+imm
         *  ADD sp,#-imm
          Check the negative bit  Format 14: push/pop registers
         *  PUSH {Rlist}
         *  PUSH {Rlist, LR}
         *  POP {Rlist}
         *  POP {Rlist, PC}
          Load from memory: POP  Read the word  Alter the origin to be from the stack if it was valid  Check if the PC is to be popped  Get the return address  Alter the origin to be from the stack if it was valid  Return address is not valid  The bottom bit should have been set to indicate that
                         *  the caller was from Thumb.  This would allow return
                         *  by BX for interworking APCS.
                          Pop into the PC will not switch mode  Store the return address  Now have the return address  Update the pc  Compensate for the auto-increment, which isn't needed here  Store to memory: PUSH  Check if the LR is to be pushed  Write the register value to memory  Format 18: unconditional branch
         *  B label
          Branch distance is twice that specified in the instruction.  Update PC  Need to advance by a word to account for pre-fetch.
             *  Advance by a half word here, allowing the normal address
             *  advance to account for the other half word.
              Display PC of next instruction  Unknown/undecoded.  May alter some register, so invalidate file  Should never hit the reset vector  Check next address  Garbage collect the memory hash (used only for the stack)  UPGRADE_ARM_STACK_UNWIND  END OF FILE 