
 * undead: Implementation of Haunted Mirror Mazes
 *
 * http://www.janko.at/Raetsel/Spukschloss/index.htm
 *
 * Puzzle definition is the total number of each monster type, the
 * grid definition, and the list of sightings (clockwise, starting
 * from top left corner)
 *
 * Example: (Janko puzzle No. 1,
 * http://www.janko.at/Raetsel/Spukschloss/001.a.htm )
 *
 *   Ghosts: 0 Vampires: 2 Zombies: 6
 *
 *     2 1 1 1
 *   1 \ \ . / 2
 *   0 \ . / . 2
 *   0 / . / . 2
 *   3 . . . \ 2
 *     3 3 2 2
 *
 *  would be encoded into: 
 *     4x4:0,2,6,LLaRLaRaRaRdL,2,1,1,1,2,2,2,2,2,2,3,3,3,0,0,1
 *
 *  Additionally, the game description can contain monsters fixed at a
 *  certain grid position. The internal generator does not (yet) use
 *  this feature, but this is needed to enter puzzles like Janko No.
 *  14, which is encoded as:
 *  8x5:12,12,0,LaRbLaRaLaRLbRaVaVaGRaRaRaLbLaRbRLb,0,2,0,2,2,1,2,1,3,1,0,1,8,4,3,0,0,2,3,2,7,2,1,6,2,1
 * 
  Grid width  Grid height  Puzzle difficulty  struct copy  structure copy  ---------------------------------------------------------------  Game state allocation, deallocation.  ---------------------------------------------------------------  Puzzle generator  cell states  grid walk directions  Check whether inverse path is already in list  We found a new path through the mirror maze  Count unique monster entries in each path  Generate mapping vector   extract single entries from view list  Choose one unique guess per random  While we are busy with looping through single_views, we
         * conveniently free the linked list single_view  Modify state_guess according to path_guess.mapping  Variables for puzzle generation algorithm  Variables for solver algorithm  Variables for game description generation  Fill grid with random mirrors and (later to be populated)
         * empty monster cells  Total number of monsters in maze  Puzzle is boring if it has too few monster cells. Discard
         * grid, make new grid  Monsters / Mirrors ratio should be balanced  Assign clue identifiers  The four corners don't matter at all for the game. Set them
         * all to zero, just to have a nice data structure  Initialize solution vector  Initialize fixed flag from common. Not needed for the
         * puzzle generator; initialize it for having clean code  paths generation  Grid is invalid if max. path length > threshold. Discard
         * grid, make new one  Grid monster initialization   For easy puzzles, we try to fill nearly the whole grid
            with unique solution paths (up to 2) For more difficult
            puzzles, we fill only roughly half the grid, and choose
            random monsters for the rest For hard puzzles, we fill
            even less paths with unique solutions  Fill any remaining ambiguous entries with random monsters   Determine all hints  Puzzle is trivial if it has only one type of monster. Discard.  Discard puzzle if difficulty Tricky, and it has only 1
         * member of any monster type  Prepare path information needed by the solver (containing all hints)  Try to solve the puzzle with the iterative solver  If necessary, try to solve the puzzle with the brute-force solver   Determine puzzle difficulty level           printf("Puzzle level: EASY Level %d Ratio %f Ambiguous %d (Found after %i tries)\n",iterative_depth, ratio, count_ambiguous, i);           printf("Puzzle level: NORMAL Level %d Ratio %f Ambiguous %d (Found after %d tries)\n", iterative_depth, ratio, count_ambiguous, i);           printf("Puzzle level: TRICKY Level %d Ratio %f Ambiguous %d (Found after %d tries)\n", iterative_depth, ratio, count_ambiguous, i);  If puzzle is not solvable or does not satisfy the desired
         * difficulty level, free memory and start from scratch  We have a valid puzzle!  Encode monster counts  Encode grid  Encode hints  Try to solve the puzzle with the iterative solver  If necessary, try to solve the puzzle with the brute-force solver   printf("Puzzle solved at level %s, iterations %d, ambiguous %d\n", (solved_bruteforce ? "TRICKY" : "NORMAL"), iterative_depth, count_ambiguous);  as for solo.c, highlight pos  show state, type, and ?cursor.  See solo.c; if we were pencil-mode highlighting and
     * somehow a square has just been properly filled, cancel
     * pencil mode.  as for game_ui. 
             * Fill in absolutely all pencil marks in unfilled
             * squares, for those who like to play by the rigorous
             * approach of starting off in that state and eliminating
             * things.
              ----------------------------------------------------------------------
 * Drawing routines.
  Ick: fake up `ds->tilesize' for macro expansion purposes  ghost  vampire  zombie  Upper-left corner of the "tile"  Center of the "tile"  Avoid wiping out the borders of the puzzle  Draw static grid components at startup  Draw monster count hints  Draw path count hints  Draw puzzle grid contents  wants_statusbar  flags 
 * undead: Implementation of Haunted Mirror Mazes
 *
 * http://www.janko.at/Raetsel/Spukschloss/index.htm
 *
 * Puzzle definition is the total number of each monster type, the
 * grid definition, and the list of sightings (clockwise, starting
 * from top left corner)
 *
 * Example: (Janko puzzle No. 1,
 * http://www.janko.at/Raetsel/Spukschloss/001.a.htm )
 *
 *   Ghosts: 0 Vampires: 2 Zombies: 6
 *
 *     2 1 1 1
 *   1 \ \ . / 2
 *   0 \ . / . 2
 *   0 / . / . 2
 *   3 . . . \ 2
 *     3 3 2 2
 *
 *  would be encoded into: 
 *     4x4:0,2,6,LLaRLaRaRaRdL,2,1,1,1,2,2,2,2,2,2,3,3,3,0,0,1
 *
 *  Additionally, the game description can contain monsters fixed at a
 *  certain grid position. The internal generator does not (yet) use
 *  this feature, but this is needed to enter puzzles like Janko No.
 *  14, which is encoded as:
 *  8x5:12,12,0,LaRbLaRaLaRLbRaVaVaGRaRaRaLbLaRbRLb,0,2,0,2,2,1,2,1,3,1,0,1,8,4,3,0,0,2,3,2,7,2,1,6,2,1
 * 
  Grid width  Grid height  Puzzle difficulty  struct copy  structure copy  ---------------------------------------------------------------  Game state allocation, deallocation.  ---------------------------------------------------------------  Puzzle generator  cell states  grid walk directions  Check whether inverse path is already in list  We found a new path through the mirror maze  Count unique monster entries in each path  Generate mapping vector   extract single entries from view list  Choose one unique guess per random  While we are busy with looping through single_views, we
         * conveniently free the linked list single_view  Modify state_guess according to path_guess.mapping  Variables for puzzle generation algorithm  Variables for solver algorithm  Variables for game description generation  Fill grid with random mirrors and (later to be populated)
         * empty monster cells  Total number of monsters in maze  Puzzle is boring if it has too few monster cells. Discard
         * grid, make new grid  Monsters / Mirrors ratio should be balanced  Assign clue identifiers  The four corners don't matter at all for the game. Set them
         * all to zero, just to have a nice data structure  Initialize solution vector  Initialize fixed flag from common. Not needed for the
         * puzzle generator; initialize it for having clean code  paths generation  Grid is invalid if max. path length > threshold. Discard
         * grid, make new one  Grid monster initialization   For easy puzzles, we try to fill nearly the whole grid
            with unique solution paths (up to 2) For more difficult
            puzzles, we fill only roughly half the grid, and choose
            random monsters for the rest For hard puzzles, we fill
            even less paths with unique solutions  Fill any remaining ambiguous entries with random monsters   Determine all hints  Puzzle is trivial if it has only one type of monster. Discard.  Discard puzzle if difficulty Tricky, and it has only 1
         * member of any monster type  Prepare path information needed by the solver (containing all hints)  Try to solve the puzzle with the iterative solver  If necessary, try to solve the puzzle with the brute-force solver   Determine puzzle difficulty level           printf("Puzzle level: EASY Level %d Ratio %f Ambiguous %d (Found after %i tries)\n",iterative_depth, ratio, count_ambiguous, i);           printf("Puzzle level: NORMAL Level %d Ratio %f Ambiguous %d (Found after %d tries)\n", iterative_depth, ratio, count_ambiguous, i);           printf("Puzzle level: TRICKY Level %d Ratio %f Ambiguous %d (Found after %d tries)\n", iterative_depth, ratio, count_ambiguous, i);  If puzzle is not solvable or does not satisfy the desired
         * difficulty level, free memory and start from scratch  We have a valid puzzle!  Encode monster counts  Encode grid  Encode hints  Try to solve the puzzle with the iterative solver  If necessary, try to solve the puzzle with the brute-force solver   printf("Puzzle solved at level %s, iterations %d, ambiguous %d\n", (solved_bruteforce ? "TRICKY" : "NORMAL"), iterative_depth, count_ambiguous);  as for solo.c, highlight pos  show state, type, and ?cursor.  See solo.c; if we were pencil-mode highlighting and
     * somehow a square has just been properly filled, cancel
     * pencil mode.  as for game_ui. 
             * Fill in absolutely all pencil marks in unfilled
             * squares, for those who like to play by the rigorous
             * approach of starting off in that state and eliminating
             * things.
              ----------------------------------------------------------------------
 * Drawing routines.
  Ick: fake up `ds->tilesize' for macro expansion purposes  ghost  vampire  zombie  Upper-left corner of the "tile"  Center of the "tile"  Avoid wiping out the borders of the puzzle  Draw static grid components at startup  Draw monster count hints  Draw path count hints  Draw puzzle grid contents  wants_statusbar  flags 
 * undead: Implementation of Haunted Mirror Mazes
 *
 * http://www.janko.at/Raetsel/Spukschloss/index.htm
 *
 * Puzzle definition is the total number of each monster type, the
 * grid definition, and the list of sightings (clockwise, starting
 * from top left corner)
 *
 * Example: (Janko puzzle No. 1,
 * http://www.janko.at/Raetsel/Spukschloss/001.a.htm )
 *
 *   Ghosts: 0 Vampires: 2 Zombies: 6
 *
 *     2 1 1 1
 *   1 \ \ . / 2
 *   0 \ . / . 2
 *   0 / . / . 2
 *   3 . . . \ 2
 *     3 3 2 2
 *
 *  would be encoded into: 
 *     4x4:0,2,6,LLaRLaRaRaRdL,2,1,1,1,2,2,2,2,2,2,3,3,3,0,0,1
 *
 *  Additionally, the game description can contain monsters fixed at a
 *  certain grid position. The internal generator does not (yet) use
 *  this feature, but this is needed to enter puzzles like Janko No.
 *  14, which is encoded as:
 *  8x5:12,12,0,LaRbLaRaLaRLbRaVaVaGRaRaRaLbLaRbRLb,0,2,0,2,2,1,2,1,3,1,0,1,8,4,3,0,0,2,3,2,7,2,1,6,2,1
 * 
  Grid width  Grid height  Puzzle difficulty  struct copy  structure copy  ---------------------------------------------------------------  Game state allocation, deallocation.  ---------------------------------------------------------------  Puzzle generator  cell states  grid walk directions  Check whether inverse path is already in list  We found a new path through the mirror maze  Count unique monster entries in each path  Generate mapping vector   extract single entries from view list  Choose one unique guess per random  While we are busy with looping through single_views, we
         * conveniently free the linked list single_view  Modify state_guess according to path_guess.mapping  Variables for puzzle generation algorithm  Variables for solver algorithm  Variables for game description generation  Fill grid with random mirrors and (later to be populated)
         * empty monster cells  Total number of monsters in maze  Puzzle is boring if it has too few monster cells. Discard
         * grid, make new grid  Monsters / Mirrors ratio should be balanced  Assign clue identifiers  The four corners don't matter at all for the game. Set them
         * all to zero, just to have a nice data structure  Initialize solution vector  Initialize fixed flag from common. Not needed for the
         * puzzle generator; initialize it for having clean code  paths generation  Grid is invalid if max. path length > threshold. Discard
         * grid, make new one  Grid monster initialization   For easy puzzles, we try to fill nearly the whole grid
            with unique solution paths (up to 2) For more difficult
            puzzles, we fill only roughly half the grid, and choose
            random monsters for the rest For hard puzzles, we fill
            even less paths with unique solutions  Fill any remaining ambiguous entries with random monsters   Determine all hints  Puzzle is trivial if it has only one type of monster. Discard.  Discard puzzle if difficulty Tricky, and it has only 1
         * member of any monster type  Prepare path information needed by the solver (containing all hints)  Try to solve the puzzle with the iterative solver  If necessary, try to solve the puzzle with the brute-force solver   Determine puzzle difficulty level           printf("Puzzle level: EASY Level %d Ratio %f Ambiguous %d (Found after %i tries)\n",iterative_depth, ratio, count_ambiguous, i);           printf("Puzzle level: NORMAL Level %d Ratio %f Ambiguous %d (Found after %d tries)\n", iterative_depth, ratio, count_ambiguous, i);           printf("Puzzle level: TRICKY Level %d Ratio %f Ambiguous %d (Found after %d tries)\n", iterative_depth, ratio, count_ambiguous, i);  If puzzle is not solvable or does not satisfy the desired
         * difficulty level, free memory and start from scratch  We have a valid puzzle!  Encode monster counts  Encode grid  Encode hints  Try to solve the puzzle with the iterative solver  If necessary, try to solve the puzzle with the brute-force solver   printf("Puzzle solved at level %s, iterations %d, ambiguous %d\n", (solved_bruteforce ? "TRICKY" : "NORMAL"), iterative_depth, count_ambiguous);  as for solo.c, highlight pos  show state, type, and ?cursor.  See solo.c; if we were pencil-mode highlighting and
     * somehow a square has just been properly filled, cancel
     * pencil mode.  as for game_ui. 
             * Fill in absolutely all pencil marks in unfilled
             * squares, for those who like to play by the rigorous
             * approach of starting off in that state and eliminating
             * things.
              ----------------------------------------------------------------------
 * Drawing routines.
  Ick: fake up `ds->tilesize' for macro expansion purposes  ghost  vampire  zombie  Upper-left corner of the "tile"  Center of the "tile"  Avoid wiping out the borders of the puzzle  Draw static grid components at startup  Draw monster count hints  Draw path count hints  Draw puzzle grid contents  wants_statusbar  flags 