**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Stepan Moskovchenko
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Note frequencies in milliHz, base A = 440000
 * Calculated using:
 *  double base_a=440000;
 *  double offset;
 *  for(offset=-69;offset<=58;offset++)
 *  {
 *      int value = (int)round(base_a*pow(2,offset/12));
 *      printf("%d, ",value);
 *  }
  C,       C#,      D,       D#,      E,        F,        F#,       G,       G#,      A,       A#,      B  | (readChar(file)<<8) | (readChar(file)<<0);    printf("\nWAVE NAME = [%s]", wav->name);     printf("\nScaleFreq = %d   ScaleFactor = %d   RootFreq = %d", wav->scaleFreq, wav->scaleFactor, wav->rootFreq);  half baked 8 bit conversion  UNFINISHED
    if(wav->mode & 1 == 0)  //Whoops, 8 bit
    {
        wav->numSamples = wav->wavSize;

        //Allocate a block for the rest of it
        //It should end up right after the previous one.
        wav->wavSize = wav->wavSize * 2;
        void * foo = allocate(wav->wavSize);


        for(a=0; a<1000; a++)
            printf("\n!!!!!!!!!!!!!!!!!!!!!!!!!!!");


        for(a=wav->wavSize-1; a>0; a-=2)
        {

        }
    //  int b1=wf->data[s]+((wf->mode & 2) << 6);
    //  return b1<<8;
    }
     Byte-swap if necessary. Gus files are little endian   Convert unsigned to signed by subtracting 32768  We divide by 100 here because everyone's freq formula is slightly different  Comparison     printf("\nFILE: %s", filename);     printf("\nlayerSamples=%d", gp->numWaves);     printf("\nPrecomputing note table"); **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Stepan Moskovchenko
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Note frequencies in milliHz, base A = 440000
 * Calculated using:
 *  double base_a=440000;
 *  double offset;
 *  for(offset=-69;offset<=58;offset++)
 *  {
 *      int value = (int)round(base_a*pow(2,offset/12));
 *      printf("%d, ",value);
 *  }
  C,       C#,      D,       D#,      E,        F,        F#,       G,       G#,      A,       A#,      B  | (readChar(file)<<8) | (readChar(file)<<0);    printf("\nWAVE NAME = [%s]", wav->name);     printf("\nScaleFreq = %d   ScaleFactor = %d   RootFreq = %d", wav->scaleFreq, wav->scaleFactor, wav->rootFreq);  half baked 8 bit conversion  UNFINISHED
    if(wav->mode & 1 == 0)  //Whoops, 8 bit
    {
        wav->numSamples = wav->wavSize;

        //Allocate a block for the rest of it
        //It should end up right after the previous one.
        wav->wavSize = wav->wavSize * 2;
        void * foo = allocate(wav->wavSize);


        for(a=0; a<1000; a++)
            printf("\n!!!!!!!!!!!!!!!!!!!!!!!!!!!");


        for(a=wav->wavSize-1; a>0; a-=2)
        {

        }
    //  int b1=wf->data[s]+((wf->mode & 2) << 6);
    //  return b1<<8;
    }
     Byte-swap if necessary. Gus files are little endian   Convert unsigned to signed by subtracting 32768  We divide by 100 here because everyone's freq formula is slightly different  Comparison     printf("\nFILE: %s", filename);     printf("\nlayerSamples=%d", gp->numWaves);     printf("\nPrecomputing note table"); **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Stepan Moskovchenko
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Note frequencies in milliHz, base A = 440000
 * Calculated using:
 *  double base_a=440000;
 *  double offset;
 *  for(offset=-69;offset<=58;offset++)
 *  {
 *      int value = (int)round(base_a*pow(2,offset/12));
 *      printf("%d, ",value);
 *  }
  C,       C#,      D,       D#,      E,        F,        F#,       G,       G#,      A,       A#,      B  | (readChar(file)<<8) | (readChar(file)<<0);    printf("\nWAVE NAME = [%s]", wav->name);     printf("\nScaleFreq = %d   ScaleFactor = %d   RootFreq = %d", wav->scaleFreq, wav->scaleFactor, wav->rootFreq);  half baked 8 bit conversion  UNFINISHED
    if(wav->mode & 1 == 0)  //Whoops, 8 bit
    {
        wav->numSamples = wav->wavSize;

        //Allocate a block for the rest of it
        //It should end up right after the previous one.
        wav->wavSize = wav->wavSize * 2;
        void * foo = allocate(wav->wavSize);


        for(a=0; a<1000; a++)
            printf("\n!!!!!!!!!!!!!!!!!!!!!!!!!!!");


        for(a=wav->wavSize-1; a>0; a-=2)
        {

        }
    //  int b1=wf->data[s]+((wf->mode & 2) << 6);
    //  return b1<<8;
    }
     Byte-swap if necessary. Gus files are little endian   Convert unsigned to signed by subtracting 32768  We divide by 100 here because everyone's freq formula is slightly different  Comparison     printf("\nFILE: %s", filename);     printf("\nlayerSamples=%d", gp->numWaves);     printf("\nPrecomputing note table"); 