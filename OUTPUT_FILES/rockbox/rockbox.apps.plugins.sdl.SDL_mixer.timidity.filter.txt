
    TiMidity -- Experimental MIDI to WAVE converter
    Copyright (C) 1995 Tuukka Toivonen <toivonen@clinet.fi>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the Perl Artistic License, available in COPYING.

   filter.c: written by Vincent Pagel ( pagel@loria.fr ) 
 
   implements fir antialiasing filter : should help when setting sample
   rates as low as 8Khz.

   April 95
      - first draft

   22/5/95
      - modify "filter" so that it simulate leading and trailing 0 in the buffer
     bessel  function    Kaiser Window (symetric) 
 * fir coef in g, cuttoff frequency in fc
  attenuation  in  db  Matrix product 
 * FIR filtering -> apply the filter given by coef[] to the data buffer
 * Note that we simulate leading and trailing 0 at the border of the 
 * data buffer
  Simulate leading 0 at the begining of the buffer  Saturation ???  The core of the buffer   Saturation ???  Simulate 0 at the end of the buffer  Saturation ??? ********************************************************************* Prevent aliasing by filtering any freq above the output_rate                                                                              I don't worry about looping point -> they will remain soft if they   were already                                                        ********************************************************************* cutoff frequency [0..1.0] FREQ_CUT/SAMP_FREQ No oversampling   Make the filter symetric  We apply the filter we have designed on a copy of the patch 
    TiMidity -- Experimental MIDI to WAVE converter
    Copyright (C) 1995 Tuukka Toivonen <toivonen@clinet.fi>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the Perl Artistic License, available in COPYING.

   filter.c: written by Vincent Pagel ( pagel@loria.fr ) 
 
   implements fir antialiasing filter : should help when setting sample
   rates as low as 8Khz.

   April 95
      - first draft

   22/5/95
      - modify "filter" so that it simulate leading and trailing 0 in the buffer
     bessel  function    Kaiser Window (symetric) 
 * fir coef in g, cuttoff frequency in fc
  attenuation  in  db  Matrix product 
 * FIR filtering -> apply the filter given by coef[] to the data buffer
 * Note that we simulate leading and trailing 0 at the border of the 
 * data buffer
  Simulate leading 0 at the begining of the buffer  Saturation ???  The core of the buffer   Saturation ???  Simulate 0 at the end of the buffer  Saturation ??? ********************************************************************* Prevent aliasing by filtering any freq above the output_rate                                                                              I don't worry about looping point -> they will remain soft if they   were already                                                        ********************************************************************* cutoff frequency [0..1.0] FREQ_CUT/SAMP_FREQ No oversampling   Make the filter symetric  We apply the filter we have designed on a copy of the patch 
    TiMidity -- Experimental MIDI to WAVE converter
    Copyright (C) 1995 Tuukka Toivonen <toivonen@clinet.fi>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the Perl Artistic License, available in COPYING.

   filter.c: written by Vincent Pagel ( pagel@loria.fr ) 
 
   implements fir antialiasing filter : should help when setting sample
   rates as low as 8Khz.

   April 95
      - first draft

   22/5/95
      - modify "filter" so that it simulate leading and trailing 0 in the buffer
     bessel  function    Kaiser Window (symetric) 
 * fir coef in g, cuttoff frequency in fc
  attenuation  in  db  Matrix product 
 * FIR filtering -> apply the filter given by coef[] to the data buffer
 * Note that we simulate leading and trailing 0 at the border of the 
 * data buffer
  Simulate leading 0 at the begining of the buffer  Saturation ???  The core of the buffer   Saturation ???  Simulate 0 at the end of the buffer  Saturation ??? ********************************************************************* Prevent aliasing by filtering any freq above the output_rate                                                                              I don't worry about looping point -> they will remain soft if they   were already                                                        ********************************************************************* cutoff frequency [0..1.0] FREQ_CUT/SAMP_FREQ No oversampling   Make the filter symetric  We apply the filter we have designed on a copy of the patch 