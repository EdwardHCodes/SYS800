
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 sv_main.c -- server main program inline model names for precache============================================================================
===============
SV_Init
===============

=============================================================================

EVENT MESSAGES

=============================================================================
  
==================
SV_StartParticle

Make sure the event gets sent to all clients
==================
  
==================
SV_StartSound

Each entity can have eight independant sound sources, like voice,
weapon, feet, etc.

Channel 0 is an auto-allocate channel, the others override anything
allready running on that entity/channel pair.

An attenuation of 0 will play full volume everywhere in the level.
Larger attenuations will drop off.  (max 4 attenuation)

==================
 find precache number for sound directed messages go only to the entity the are targeted on
==============================================================================

CLIENT SPAWNING

==============================================================================

================
SV_SendServerinfo

Sends the first message from the server to a connected client.
This will be sent on the initial connection and upon each server load.
================
 send music set view	 need prespawn, spawn, etc
================
SV_ConnectClient

Initializes a client_t for a new net connection.  This will only be called
once for a player each game, not once for each level change.
================
 set up the client_t we can catch it call the progs to get default spawn parms for the new client
===================
SV_CheckForNewClients

===================
 check for new connections  init a new client structure	
===============================================================================

FRAME UPDATES

===============================================================================

==================
SV_ClearDatagram

==================

=============================================================================

The PVS must include a small area around the client to allow head bobbing
or other small motion on the client side.  Otherwise, a bob might cause an
entity that should be visible to not show up, especially when the bob
crosses a waterline.

=============================================================================
 if this is a leaf, accumulate the pvs bits go down both
=============
SV_FatPVS

Calculates a PVS that is the inclusive or of all leafs within 8 pixels of the
given point.
=============
=============================================================================
=============
SV_WriteEntitiesToClient

=============
 find the client's PVS send over all entities (excpet the client) that touch the pvs don't send if flagged for NODRAW and there are no lighting effects ignore if not touching a PV leaf clent is ALLWAYS sent ignore ents without visible models not visible send an update don't mess up the step animation write the message
=============
SV_CleanupEnts

=============

==================
SV_WriteClientdataToMessage

==================
 send a damage message send the current viewpos offset from the view entity how much to look up / down ideally a fixangle might get lost in a dropped packet.  Oh well. stuff the sigil bits into the high bits of items for sbar, or else mix in items2	if (ent->v.weapon) send the data [always sent]	if (bits & SU_ITEMS)
=======================
SV_SendClientDatagram
=======================
 add the client specific data to the datagram copy the server datagram if there is space send the datagram if the message couldn't send, kick off
=======================
SV_UpdateToReliableMessages
=======================
 check for changes to be sent over the reliable streams
=======================
SV_SendNop

Send a nop message without trashing or sending the accumulated client
message buffer
=======================
 if the message couldn't send, kick off
=======================
SV_SendClientMessages
=======================
 update frags, names, etc build individual updates the player isn't totally in the game yet send small keepalive messages if too much time has passed send a full message when the next signon stage has been requested some other message data (name changes, etc) may accumulate  between signon stages don't send out non-signon messages check for an overflowed message.  Should only happen on a very fucked up connection that backs up a lot, then changes level				I_Printf ("can't write\n"); went to another level if the message couldn't send, kick off clear muzzle flashes
==============================================================================

SERVER SPAWNING

==============================================================================

================
SV_ModelIndex

================

================
SV_CreateBaseline

================
 get the current server version create entity baseline add to the message
================
SV_SendReconnect

Tell all the clients that the server is changing levels
================

================
SV_SaveSpawnparms

Grabs the current state of each client for saving across the
transition to another level
================
 call the progs to get default spawn parms for the new client
================
SV_SpawnServer

This is called at the start of each level
================
 let's not have any servers with no name now safe to issue another tell all connected clients that we are going to a new level make cvars consistant set up the new server load progs to get entity field countprintf("progs 1");printf("progs 2"); allocate server memoryprintf("progs 3"); leave slots at start for clients only clear world interaction linksprintf("progs 4");printf("progs 5"); load the rest of the entities	printf("progs 6");printf("progs 7"); world model serverflags are for cross level information (sigils)printf("progs 8");printf("progs 9"); all setup is completed, any further precache statements are errors run two frames to allow everything to settle create a baseline for more efficient communications send serverinfo to all connected clients
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 sv_main.c -- server main program inline model names for precache============================================================================
===============
SV_Init
===============

=============================================================================

EVENT MESSAGES

=============================================================================
  
==================
SV_StartParticle

Make sure the event gets sent to all clients
==================
  
==================
SV_StartSound

Each entity can have eight independant sound sources, like voice,
weapon, feet, etc.

Channel 0 is an auto-allocate channel, the others override anything
allready running on that entity/channel pair.

An attenuation of 0 will play full volume everywhere in the level.
Larger attenuations will drop off.  (max 4 attenuation)

==================
 find precache number for sound directed messages go only to the entity the are targeted on
==============================================================================

CLIENT SPAWNING

==============================================================================

================
SV_SendServerinfo

Sends the first message from the server to a connected client.
This will be sent on the initial connection and upon each server load.
================
 send music set view	 need prespawn, spawn, etc
================
SV_ConnectClient

Initializes a client_t for a new net connection.  This will only be called
once for a player each game, not once for each level change.
================
 set up the client_t we can catch it call the progs to get default spawn parms for the new client
===================
SV_CheckForNewClients

===================
 check for new connections  init a new client structure	
===============================================================================

FRAME UPDATES

===============================================================================

==================
SV_ClearDatagram

==================

=============================================================================

The PVS must include a small area around the client to allow head bobbing
or other small motion on the client side.  Otherwise, a bob might cause an
entity that should be visible to not show up, especially when the bob
crosses a waterline.

=============================================================================
 if this is a leaf, accumulate the pvs bits go down both
=============
SV_FatPVS

Calculates a PVS that is the inclusive or of all leafs within 8 pixels of the
given point.
=============
=============================================================================
=============
SV_WriteEntitiesToClient

=============
 find the client's PVS send over all entities (excpet the client) that touch the pvs don't send if flagged for NODRAW and there are no lighting effects ignore if not touching a PV leaf clent is ALLWAYS sent ignore ents without visible models not visible send an update don't mess up the step animation write the message
=============
SV_CleanupEnts

=============

==================
SV_WriteClientdataToMessage

==================
 send a damage message send the current viewpos offset from the view entity how much to look up / down ideally a fixangle might get lost in a dropped packet.  Oh well. stuff the sigil bits into the high bits of items for sbar, or else mix in items2	if (ent->v.weapon) send the data [always sent]	if (bits & SU_ITEMS)
=======================
SV_SendClientDatagram
=======================
 add the client specific data to the datagram copy the server datagram if there is space send the datagram if the message couldn't send, kick off
=======================
SV_UpdateToReliableMessages
=======================
 check for changes to be sent over the reliable streams
=======================
SV_SendNop

Send a nop message without trashing or sending the accumulated client
message buffer
=======================
 if the message couldn't send, kick off
=======================
SV_SendClientMessages
=======================
 update frags, names, etc build individual updates the player isn't totally in the game yet send small keepalive messages if too much time has passed send a full message when the next signon stage has been requested some other message data (name changes, etc) may accumulate  between signon stages don't send out non-signon messages check for an overflowed message.  Should only happen on a very fucked up connection that backs up a lot, then changes level				I_Printf ("can't write\n"); went to another level if the message couldn't send, kick off clear muzzle flashes
==============================================================================

SERVER SPAWNING

==============================================================================

================
SV_ModelIndex

================

================
SV_CreateBaseline

================
 get the current server version create entity baseline add to the message
================
SV_SendReconnect

Tell all the clients that the server is changing levels
================

================
SV_SaveSpawnparms

Grabs the current state of each client for saving across the
transition to another level
================
 call the progs to get default spawn parms for the new client
================
SV_SpawnServer

This is called at the start of each level
================
 let's not have any servers with no name now safe to issue another tell all connected clients that we are going to a new level make cvars consistant set up the new server load progs to get entity field countprintf("progs 1");printf("progs 2"); allocate server memoryprintf("progs 3"); leave slots at start for clients only clear world interaction linksprintf("progs 4");printf("progs 5"); load the rest of the entities	printf("progs 6");printf("progs 7"); world model serverflags are for cross level information (sigils)printf("progs 8");printf("progs 9"); all setup is completed, any further precache statements are errors run two frames to allow everything to settle create a baseline for more efficient communications send serverinfo to all connected clients
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 sv_main.c -- server main program inline model names for precache============================================================================
===============
SV_Init
===============

=============================================================================

EVENT MESSAGES

=============================================================================
  
==================
SV_StartParticle

Make sure the event gets sent to all clients
==================
  
==================
SV_StartSound

Each entity can have eight independant sound sources, like voice,
weapon, feet, etc.

Channel 0 is an auto-allocate channel, the others override anything
allready running on that entity/channel pair.

An attenuation of 0 will play full volume everywhere in the level.
Larger attenuations will drop off.  (max 4 attenuation)

==================
 find precache number for sound directed messages go only to the entity the are targeted on
==============================================================================

CLIENT SPAWNING

==============================================================================

================
SV_SendServerinfo

Sends the first message from the server to a connected client.
This will be sent on the initial connection and upon each server load.
================
 send music set view	 need prespawn, spawn, etc
================
SV_ConnectClient

Initializes a client_t for a new net connection.  This will only be called
once for a player each game, not once for each level change.
================
 set up the client_t we can catch it call the progs to get default spawn parms for the new client
===================
SV_CheckForNewClients

===================
 check for new connections  init a new client structure	
===============================================================================

FRAME UPDATES

===============================================================================

==================
SV_ClearDatagram

==================

=============================================================================

The PVS must include a small area around the client to allow head bobbing
or other small motion on the client side.  Otherwise, a bob might cause an
entity that should be visible to not show up, especially when the bob
crosses a waterline.

=============================================================================
 if this is a leaf, accumulate the pvs bits go down both
=============
SV_FatPVS

Calculates a PVS that is the inclusive or of all leafs within 8 pixels of the
given point.
=============
=============================================================================
=============
SV_WriteEntitiesToClient

=============
 find the client's PVS send over all entities (excpet the client) that touch the pvs don't send if flagged for NODRAW and there are no lighting effects ignore if not touching a PV leaf clent is ALLWAYS sent ignore ents without visible models not visible send an update don't mess up the step animation write the message
=============
SV_CleanupEnts

=============

==================
SV_WriteClientdataToMessage

==================
 send a damage message send the current viewpos offset from the view entity how much to look up / down ideally a fixangle might get lost in a dropped packet.  Oh well. stuff the sigil bits into the high bits of items for sbar, or else mix in items2	if (ent->v.weapon) send the data [always sent]	if (bits & SU_ITEMS)
=======================
SV_SendClientDatagram
=======================
 add the client specific data to the datagram copy the server datagram if there is space send the datagram if the message couldn't send, kick off
=======================
SV_UpdateToReliableMessages
=======================
 check for changes to be sent over the reliable streams
=======================
SV_SendNop

Send a nop message without trashing or sending the accumulated client
message buffer
=======================
 if the message couldn't send, kick off
=======================
SV_SendClientMessages
=======================
 update frags, names, etc build individual updates the player isn't totally in the game yet send small keepalive messages if too much time has passed send a full message when the next signon stage has been requested some other message data (name changes, etc) may accumulate  between signon stages don't send out non-signon messages check for an overflowed message.  Should only happen on a very fucked up connection that backs up a lot, then changes level				I_Printf ("can't write\n"); went to another level if the message couldn't send, kick off clear muzzle flashes
==============================================================================

SERVER SPAWNING

==============================================================================

================
SV_ModelIndex

================

================
SV_CreateBaseline

================
 get the current server version create entity baseline add to the message
================
SV_SendReconnect

Tell all the clients that the server is changing levels
================

================
SV_SaveSpawnparms

Grabs the current state of each client for saving across the
transition to another level
================
 call the progs to get default spawn parms for the new client
================
SV_SpawnServer

This is called at the start of each level
================
 let's not have any servers with no name now safe to issue another tell all connected clients that we are going to a new level make cvars consistant set up the new server load progs to get entity field countprintf("progs 1");printf("progs 2"); allocate server memoryprintf("progs 3"); leave slots at start for clients only clear world interaction linksprintf("progs 4");printf("progs 5"); load the rest of the entities	printf("progs 6");printf("progs 7"); world model serverflags are for cross level information (sigils)printf("progs 8");printf("progs 9"); all setup is completed, any further precache statements are errors run two frames to allow everything to settle create a baseline for more efficient communications send serverinfo to all connected clients