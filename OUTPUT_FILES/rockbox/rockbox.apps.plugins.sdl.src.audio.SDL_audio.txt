
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org
 Allow access to a raw mixing buffer  We'll need the DosSetPriority() API!  Available audio drivers  Various local functions  The general mixing thread function  Perform any thread setup  Set up the mixing function  Increase the priority of this thread to make sure that
           the audio will be continuous all the time!  Loop, filling the audio buffers  Fill the current buffer with sound  Convert the audio if necessary  Ready current buffer for play and change current buffer  Wait for an audio buffer to become available  Wait for the audio to drain..  Check to make sure we don't overwrite 'current_audio'  Select the proper audio driver  Ahem, we know that if ESPEAKER is set, user probably wants
		   to use ESD, but don't start it if it's not already running.
		   This probably isn't the place to do this, but... Shh! :)
		  Don't start ESD if it's not running  SDL_AUDIO_DRIVER_ESD  This will be replaced with a better driver selection API  Don't fail SDL_Init() if audio isn't available.
         SDL_OpenAudio() will handle it at that point.  *sigh*
        Start up the audio driver, if necessary  Verify some parameters  Pick some default audio frequency  Pick some default audio format  Pick a default number of channels  Mono  Stereo  surround  surround with center and lfe  Pick a default of ~46 ms at desired frequency  Uses interrupt driven audio, without thread  Create a semaphore for locking the sound buffers  SDL_THREADS_DISABLED  Calculate the silence and size of the audio specification  Open the audio subsystem  If the audio driver changes the buffer size, accept it  Allocate a fake audio memory buffer  See if we need to do any conversion  Build an audio conversion block  Start the audio thread if necessary  Start the audio thread  The audio is now playing  Obtain a lock on the mixing buffers  Release lock on the mixing buffers  Free the driver data 
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org
 Allow access to a raw mixing buffer  We'll need the DosSetPriority() API!  Available audio drivers  Various local functions  The general mixing thread function  Perform any thread setup  Set up the mixing function  Increase the priority of this thread to make sure that
           the audio will be continuous all the time!  Loop, filling the audio buffers  Fill the current buffer with sound  Convert the audio if necessary  Ready current buffer for play and change current buffer  Wait for an audio buffer to become available  Wait for the audio to drain..  Check to make sure we don't overwrite 'current_audio'  Select the proper audio driver  Ahem, we know that if ESPEAKER is set, user probably wants
		   to use ESD, but don't start it if it's not already running.
		   This probably isn't the place to do this, but... Shh! :)
		  Don't start ESD if it's not running  SDL_AUDIO_DRIVER_ESD  This will be replaced with a better driver selection API  Don't fail SDL_Init() if audio isn't available.
         SDL_OpenAudio() will handle it at that point.  *sigh*
        Start up the audio driver, if necessary  Verify some parameters  Pick some default audio frequency  Pick some default audio format  Pick a default number of channels  Mono  Stereo  surround  surround with center and lfe  Pick a default of ~46 ms at desired frequency  Uses interrupt driven audio, without thread  Create a semaphore for locking the sound buffers  SDL_THREADS_DISABLED  Calculate the silence and size of the audio specification  Open the audio subsystem  If the audio driver changes the buffer size, accept it  Allocate a fake audio memory buffer  See if we need to do any conversion  Build an audio conversion block  Start the audio thread if necessary  Start the audio thread  The audio is now playing  Obtain a lock on the mixing buffers  Release lock on the mixing buffers  Free the driver data 
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org
 Allow access to a raw mixing buffer  We'll need the DosSetPriority() API!  Available audio drivers  Various local functions  The general mixing thread function  Perform any thread setup  Set up the mixing function  Increase the priority of this thread to make sure that
           the audio will be continuous all the time!  Loop, filling the audio buffers  Fill the current buffer with sound  Convert the audio if necessary  Ready current buffer for play and change current buffer  Wait for an audio buffer to become available  Wait for the audio to drain..  Check to make sure we don't overwrite 'current_audio'  Select the proper audio driver  Ahem, we know that if ESPEAKER is set, user probably wants
		   to use ESD, but don't start it if it's not already running.
		   This probably isn't the place to do this, but... Shh! :)
		  Don't start ESD if it's not running  SDL_AUDIO_DRIVER_ESD  This will be replaced with a better driver selection API  Don't fail SDL_Init() if audio isn't available.
         SDL_OpenAudio() will handle it at that point.  *sigh*
        Start up the audio driver, if necessary  Verify some parameters  Pick some default audio frequency  Pick some default audio format  Pick a default number of channels  Mono  Stereo  surround  surround with center and lfe  Pick a default of ~46 ms at desired frequency  Uses interrupt driven audio, without thread  Create a semaphore for locking the sound buffers  SDL_THREADS_DISABLED  Calculate the silence and size of the audio specification  Open the audio subsystem  If the audio driver changes the buffer size, accept it  Allocate a fake audio memory buffer  See if we need to do any conversion  Build an audio conversion block  Start the audio thread if necessary  Start the audio thread  The audio is now playing  Obtain a lock on the mixing buffers  Release lock on the mixing buffers  Free the driver data 