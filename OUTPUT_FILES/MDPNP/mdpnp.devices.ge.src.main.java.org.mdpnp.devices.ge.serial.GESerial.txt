******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * @author Jeff Plourde
 *
  use network byte order dst_addr 6 src_addr, 12 fun_code 14 sub_code subfunction code 16 version version of bed_msg 18 seq_num response sequence number 20 req_res request response flag 22 proc_id requestors process id 24  origin location name 56 return status 58  data count 60 70 8090 100104 IS THERE A CRC here?        System.err.println("Wrote " + request_packet.length + " bytes");        System.err.println("At " + System.currentTimeMillis() + " received " + b + " bytes");                log.warn("Data:"+HexUtil.dump(buffer)); For now we're not differentiating            System.err.println(buffer.remaining() + " bytes in " + HexUtil.dump(buffer)); In case of error or incomplete message                System.err.println("Insufficient bytes for bedmessage" + buffer.remaining()); Malhereusement this protocol is not framed so like what to do, eh? I guess just ditch if the message isn't entirely there so much fun . .. code sub_code                System.err.println("Unknown message type " + fun_code + " " + sub_code);            if(buffer.remaining()<6*data_count) {                System.err.println("Insufficient bytes for data " + buffer.remaining());                return;            }            for(short i = 0; i < data_count; i++) {                    System.err.println("Insufficient bytes for parameter " + buffer.remaining()); struct PAR_UPD struct EXTENDED_PAR_UPD struct SETUP_N_LIM struct PAR_MSSG_S struct MORE_SETUP  Process this here.            }