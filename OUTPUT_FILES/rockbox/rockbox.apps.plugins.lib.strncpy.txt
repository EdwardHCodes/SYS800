
FUNCTION
	<<strncpy>>---counted copy string

INDEX
	strncpy

ANSI_SYNOPSIS
	#include <string.h>
	char *strncpy(char *<[dst]>, const char *<[src]>, size_t <[length]>);

TRAD_SYNOPSIS
	#include <string.h>
	char *strncpy(<[dst]>, <[src]>, <[length]>)
	char *<[dst]>;
	char *<[src]>;
	size_t <[length]>;

DESCRIPTION
	<<strncpy>> copies not more than <[length]> characters from the
	the string pointed to by <[src]> (including the terminating
	null character) to the array pointed to by <[dst]>.  If the
	string pointed to by <[src]> is shorter than <[length]>
	characters, null characters are appended to the destination
	array until a total of <[length]> characters have been
	written.

RETURNS
	This function returns the initial value of <[dst]>.

PORTABILITY
<<strncpy>> is ANSI C.

<<strncpy>> requires no supporting OS subroutines.

QUICKREF
	strncpy ansi pure
SUPPRESS 560SUPPRESS 530 Nonzero if either X or Y is not aligned on a "long" boundary.   Nonzero if X (a long int) contains a NULL byte.  If SRC and DEST is aligned and count large enough, then copy words.   SRC and DEST are both "long int" aligned, try to do "long int"
	 sized copies.   not PREFER_SIZE_OVER_SPEED 
FUNCTION
	<<strncpy>>---counted copy string

INDEX
	strncpy

ANSI_SYNOPSIS
	#include <string.h>
	char *strncpy(char *<[dst]>, const char *<[src]>, size_t <[length]>);

TRAD_SYNOPSIS
	#include <string.h>
	char *strncpy(<[dst]>, <[src]>, <[length]>)
	char *<[dst]>;
	char *<[src]>;
	size_t <[length]>;

DESCRIPTION
	<<strncpy>> copies not more than <[length]> characters from the
	the string pointed to by <[src]> (including the terminating
	null character) to the array pointed to by <[dst]>.  If the
	string pointed to by <[src]> is shorter than <[length]>
	characters, null characters are appended to the destination
	array until a total of <[length]> characters have been
	written.

RETURNS
	This function returns the initial value of <[dst]>.

PORTABILITY
<<strncpy>> is ANSI C.

<<strncpy>> requires no supporting OS subroutines.

QUICKREF
	strncpy ansi pure
SUPPRESS 560SUPPRESS 530 Nonzero if either X or Y is not aligned on a "long" boundary.   Nonzero if X (a long int) contains a NULL byte.  If SRC and DEST is aligned and count large enough, then copy words.   SRC and DEST are both "long int" aligned, try to do "long int"
	 sized copies.   not PREFER_SIZE_OVER_SPEED 
FUNCTION
	<<strncpy>>---counted copy string

INDEX
	strncpy

ANSI_SYNOPSIS
	#include <string.h>
	char *strncpy(char *<[dst]>, const char *<[src]>, size_t <[length]>);

TRAD_SYNOPSIS
	#include <string.h>
	char *strncpy(<[dst]>, <[src]>, <[length]>)
	char *<[dst]>;
	char *<[src]>;
	size_t <[length]>;

DESCRIPTION
	<<strncpy>> copies not more than <[length]> characters from the
	the string pointed to by <[src]> (including the terminating
	null character) to the array pointed to by <[dst]>.  If the
	string pointed to by <[src]> is shorter than <[length]>
	characters, null characters are appended to the destination
	array until a total of <[length]> characters have been
	written.

RETURNS
	This function returns the initial value of <[dst]>.

PORTABILITY
<<strncpy>> is ANSI C.

<<strncpy>> requires no supporting OS subroutines.

QUICKREF
	strncpy ansi pure
SUPPRESS 560SUPPRESS 530 Nonzero if either X or Y is not aligned on a "long" boundary.   Nonzero if X (a long int) contains a NULL byte.  If SRC and DEST is aligned and count large enough, then copy words.   SRC and DEST are both "long int" aligned, try to do "long int"
	 sized copies.   not PREFER_SIZE_OVER_SPEED 