
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 r_sprite.c
================
R_RotateSprite
================

=============
R_ClipSpriteFace

Clips the winding at clip_verts[clip_current] and changes clip_current
Throws out the back side
==============
 calc dists handle wraparound case clip the winding split it into a new vertex
================
R_SetupAndDrawSprite
================
 backface cull build the sprite poster in worldspace clip to the frustum in worldspace transform vertices into viewspace and project draw it
================
R_GetSpriteframe
================
 when loading in Mod_LoadSpriteGroup, we guaranteed all interval values are positive, so we don't have to worry about division by 0
================
R_DrawSprite
================
 TODO: make this caller-selectable generate the sprite's axes, with vup straight up in worldspace, and r_spritedesc.vright perpendicular to modelorg. This will not work if the view direction is very close to straight up or down, because the cross product will be between two nearly parallel vectors and starts to approach an undefined state, so we don't draw if the two vectors are less than 1 degree apart same as DotProduct (tvec, r_spritedesc.vup) because  r_spritedesc.vup is 0, 0, 1 cos(1 degree) = 0.999848 CrossProduct(r_spritedesc.vup, -modelorg,              r_spritedesc.vright) CrossProduct (r_spritedesc.vright, r_spritedesc.vup,  r_spritedesc.vpn) generate the sprite's axes, completely parallel to the viewplane. There are no problem situations, because the sprite is always in the same position relative to the viewer generate the sprite's axes, with vup straight up in worldspace, and r_spritedesc.vright parallel to the viewplane. This will not work if the view direction is very close to straight up or down, because the cross product will be between two nearly parallel vectors and starts to approach an undefined state, so we don't draw if the two vectors are less than 1 degree apart same as DotProduct (vpn, r_spritedesc.vup) because  r_spritedesc.vup is 0, 0, 1 cos(1 degree) = 0.999848 CrossProduct (r_spritedesc.vup, vpn,  r_spritedesc.vright) CrossProduct (r_spritedesc.vright, r_spritedesc.vup,  r_spritedesc.vpn) generate the sprite's axes, according to the sprite's world orientation generate the sprite's axes, parallel to the viewplane, but rotated in that plane around the center according to the sprite entity's roll angle. So vpn stays the same, but vright and vup rotate
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 r_sprite.c
================
R_RotateSprite
================

=============
R_ClipSpriteFace

Clips the winding at clip_verts[clip_current] and changes clip_current
Throws out the back side
==============
 calc dists handle wraparound case clip the winding split it into a new vertex
================
R_SetupAndDrawSprite
================
 backface cull build the sprite poster in worldspace clip to the frustum in worldspace transform vertices into viewspace and project draw it
================
R_GetSpriteframe
================
 when loading in Mod_LoadSpriteGroup, we guaranteed all interval values are positive, so we don't have to worry about division by 0
================
R_DrawSprite
================
 TODO: make this caller-selectable generate the sprite's axes, with vup straight up in worldspace, and r_spritedesc.vright perpendicular to modelorg. This will not work if the view direction is very close to straight up or down, because the cross product will be between two nearly parallel vectors and starts to approach an undefined state, so we don't draw if the two vectors are less than 1 degree apart same as DotProduct (tvec, r_spritedesc.vup) because  r_spritedesc.vup is 0, 0, 1 cos(1 degree) = 0.999848 CrossProduct(r_spritedesc.vup, -modelorg,              r_spritedesc.vright) CrossProduct (r_spritedesc.vright, r_spritedesc.vup,  r_spritedesc.vpn) generate the sprite's axes, completely parallel to the viewplane. There are no problem situations, because the sprite is always in the same position relative to the viewer generate the sprite's axes, with vup straight up in worldspace, and r_spritedesc.vright parallel to the viewplane. This will not work if the view direction is very close to straight up or down, because the cross product will be between two nearly parallel vectors and starts to approach an undefined state, so we don't draw if the two vectors are less than 1 degree apart same as DotProduct (vpn, r_spritedesc.vup) because  r_spritedesc.vup is 0, 0, 1 cos(1 degree) = 0.999848 CrossProduct (r_spritedesc.vup, vpn,  r_spritedesc.vright) CrossProduct (r_spritedesc.vright, r_spritedesc.vup,  r_spritedesc.vpn) generate the sprite's axes, according to the sprite's world orientation generate the sprite's axes, parallel to the viewplane, but rotated in that plane around the center according to the sprite entity's roll angle. So vpn stays the same, but vright and vup rotate
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 r_sprite.c
================
R_RotateSprite
================

=============
R_ClipSpriteFace

Clips the winding at clip_verts[clip_current] and changes clip_current
Throws out the back side
==============
 calc dists handle wraparound case clip the winding split it into a new vertex
================
R_SetupAndDrawSprite
================
 backface cull build the sprite poster in worldspace clip to the frustum in worldspace transform vertices into viewspace and project draw it
================
R_GetSpriteframe
================
 when loading in Mod_LoadSpriteGroup, we guaranteed all interval values are positive, so we don't have to worry about division by 0
================
R_DrawSprite
================
 TODO: make this caller-selectable generate the sprite's axes, with vup straight up in worldspace, and r_spritedesc.vright perpendicular to modelorg. This will not work if the view direction is very close to straight up or down, because the cross product will be between two nearly parallel vectors and starts to approach an undefined state, so we don't draw if the two vectors are less than 1 degree apart same as DotProduct (tvec, r_spritedesc.vup) because  r_spritedesc.vup is 0, 0, 1 cos(1 degree) = 0.999848 CrossProduct(r_spritedesc.vup, -modelorg,              r_spritedesc.vright) CrossProduct (r_spritedesc.vright, r_spritedesc.vup,  r_spritedesc.vpn) generate the sprite's axes, completely parallel to the viewplane. There are no problem situations, because the sprite is always in the same position relative to the viewer generate the sprite's axes, with vup straight up in worldspace, and r_spritedesc.vright parallel to the viewplane. This will not work if the view direction is very close to straight up or down, because the cross product will be between two nearly parallel vectors and starts to approach an undefined state, so we don't draw if the two vectors are less than 1 degree apart same as DotProduct (vpn, r_spritedesc.vup) because  r_spritedesc.vup is 0, 0, 1 cos(1 degree) = 0.999848 CrossProduct (r_spritedesc.vup, vpn,  r_spritedesc.vright) CrossProduct (r_spritedesc.vright, r_spritedesc.vup,  r_spritedesc.vpn) generate the sprite's axes, according to the sprite's world orientation generate the sprite's axes, parallel to the viewplane, but rotated in that plane around the center according to the sprite entity's roll angle. So vpn stays the same, but vright and vup rotate