*****************************************************************************
**
** FILE NAME    : ifxmips_md5.c
** PROJECT      : IFX UEIP
** MODULES      : DEU Module for UEIP
**
** DATE         : September 8, 2009
** AUTHOR       : Mohammad Firdaus
** DESCRIPTION  : Data Encryption Unit Driver
** COPYRIGHT    :       Copyright (c) 2009
**                      Infineon Technologies AG
**                      Am Campeon 1-12, 85579 Neubiberg, Germany
**
**    This program is free software; you can redistribute it and/or modify
**    it under the terms of the GNU General Public License as published by
**    the Free Software Foundation; either version 2 of the License, or
**    (at your option) any later version.
**
** HISTORY
** $Date        $Author             $Comment
** 08,Sept 2009 Mohammad Firdaus    Initial UEIP release
******************************************************************************!
  \defgroup    IFX_DEU IFX_DEU_DRIVERS
  \ingroup API
  \brief ifx deu driver module
!
  \file		ifxmips_md5.c
  \ingroup 	IFX_DEU
  \brief 	MD5 encryption deu driver file 
!
  \defgroup IFX_MD5_FUNCTIONS IFX_MD5_FUNCTIONS
  \ingroup IFX_DEU
  \brief ifx deu MD5 functions
Project header files  Project header #define CRYPTO_DEBUG! \fn static u32 endian_swap(u32 input)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief perform dword level endian swap   
 *  \param input value of dword that requires to be swapped  
! \fn static void md5_transform(u32 *hash, u32 const *in)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief main interface to md5 hardware   
 *  \param hash current hash value  
 *  \param in 64-byte block of input  
	printk("in[%d]: %08x\n", i, endian_swap(in[i]));wait for processing this will not take long! \fn static inline void md5_transform_helper(struct md5_ctx *ctx)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief interfacing function for md5_transform()   
 *  \param ctx crypto context  
le32_to_cpu_array(ctx->block, sizeof(ctx->block) / sizeof(u32));! \fn static void md5_init(struct crypto_tfm *tfm)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief initialize md5 hardware   
 *  \param tfm linux crypto algo transform  
 1 = md5  0 = sha1 Initialize the hash operation by writing a '1' to the INIT bit.! \fn static void md5_update(struct crypto_tfm *tfm, const u8 *data, unsigned int len)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief on-the-fly md5 computation   
 *  \param tfm linux crypto algo transform  
 *  \param data input data  
 *  \param len size of input data  
! \fn static void md5_final(struct crypto_tfm *tfm, u8 *out)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief compute final md5 value   
 *  \param tfm linux crypto algo transform  
 *  \param out final md5 output value  
 Wipe context
 * \brief MD5 function mappings
! \fn int ifxdeu_init_md5 (void)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief initialize md5 driver   
! \fn void ifxdeu_fini_md5 (void)
  * \ingroup IFX_MD5_FUNCTIONS
  * \brief unregister md5 driver   
*****************************************************************************
**
** FILE NAME    : ifxmips_md5.c
** PROJECT      : IFX UEIP
** MODULES      : DEU Module for UEIP
**
** DATE         : September 8, 2009
** AUTHOR       : Mohammad Firdaus
** DESCRIPTION  : Data Encryption Unit Driver
** COPYRIGHT    :       Copyright (c) 2009
**                      Infineon Technologies AG
**                      Am Campeon 1-12, 85579 Neubiberg, Germany
**
**    This program is free software; you can redistribute it and/or modify
**    it under the terms of the GNU General Public License as published by
**    the Free Software Foundation; either version 2 of the License, or
**    (at your option) any later version.
**
** HISTORY
** $Date        $Author             $Comment
** 08,Sept 2009 Mohammad Firdaus    Initial UEIP release
******************************************************************************!
  \defgroup    IFX_DEU IFX_DEU_DRIVERS
  \ingroup API
  \brief ifx deu driver module
!
  \file		ifxmips_md5.c
  \ingroup 	IFX_DEU
  \brief 	MD5 encryption deu driver file 
!
  \defgroup IFX_MD5_FUNCTIONS IFX_MD5_FUNCTIONS
  \ingroup IFX_DEU
  \brief ifx deu MD5 functions
Project header files  Project header #define CRYPTO_DEBUG! \fn static u32 endian_swap(u32 input)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief perform dword level endian swap   
 *  \param input value of dword that requires to be swapped  
! \fn static void md5_transform(u32 *hash, u32 const *in)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief main interface to md5 hardware   
 *  \param hash current hash value  
 *  \param in 64-byte block of input  
	printk("in[%d]: %08x\n", i, endian_swap(in[i]));wait for processing this will not take long! \fn static inline void md5_transform_helper(struct md5_ctx *ctx)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief interfacing function for md5_transform()   
 *  \param ctx crypto context  
le32_to_cpu_array(ctx->block, sizeof(ctx->block) / sizeof(u32));! \fn static void md5_init(struct crypto_tfm *tfm)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief initialize md5 hardware   
 *  \param tfm linux crypto algo transform  
 1 = md5  0 = sha1 Initialize the hash operation by writing a '1' to the INIT bit.! \fn static void md5_update(struct crypto_tfm *tfm, const u8 *data, unsigned int len)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief on-the-fly md5 computation   
 *  \param tfm linux crypto algo transform  
 *  \param data input data  
 *  \param len size of input data  
! \fn static void md5_final(struct crypto_tfm *tfm, u8 *out)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief compute final md5 value   
 *  \param tfm linux crypto algo transform  
 *  \param out final md5 output value  
 Wipe context
 * \brief MD5 function mappings
! \fn int ifxdeu_init_md5 (void)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief initialize md5 driver   
! \fn void ifxdeu_fini_md5 (void)
  * \ingroup IFX_MD5_FUNCTIONS
  * \brief unregister md5 driver   
*****************************************************************************
**
** FILE NAME    : ifxmips_md5.c
** PROJECT      : IFX UEIP
** MODULES      : DEU Module for UEIP
**
** DATE         : September 8, 2009
** AUTHOR       : Mohammad Firdaus
** DESCRIPTION  : Data Encryption Unit Driver
** COPYRIGHT    :       Copyright (c) 2009
**                      Infineon Technologies AG
**                      Am Campeon 1-12, 85579 Neubiberg, Germany
**
**    This program is free software; you can redistribute it and/or modify
**    it under the terms of the GNU General Public License as published by
**    the Free Software Foundation; either version 2 of the License, or
**    (at your option) any later version.
**
** HISTORY
** $Date        $Author             $Comment
** 08,Sept 2009 Mohammad Firdaus    Initial UEIP release
******************************************************************************!
  \defgroup    IFX_DEU IFX_DEU_DRIVERS
  \ingroup API
  \brief ifx deu driver module
!
  \file		ifxmips_md5.c
  \ingroup 	IFX_DEU
  \brief 	MD5 encryption deu driver file 
!
  \defgroup IFX_MD5_FUNCTIONS IFX_MD5_FUNCTIONS
  \ingroup IFX_DEU
  \brief ifx deu MD5 functions
Project header files  Project header #define CRYPTO_DEBUG! \fn static u32 endian_swap(u32 input)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief perform dword level endian swap   
 *  \param input value of dword that requires to be swapped  
! \fn static void md5_transform(u32 *hash, u32 const *in)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief main interface to md5 hardware   
 *  \param hash current hash value  
 *  \param in 64-byte block of input  
	printk("in[%d]: %08x\n", i, endian_swap(in[i]));wait for processing this will not take long! \fn static inline void md5_transform_helper(struct md5_ctx *ctx)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief interfacing function for md5_transform()   
 *  \param ctx crypto context  
le32_to_cpu_array(ctx->block, sizeof(ctx->block) / sizeof(u32));! \fn static void md5_init(struct crypto_tfm *tfm)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief initialize md5 hardware   
 *  \param tfm linux crypto algo transform  
 1 = md5  0 = sha1 Initialize the hash operation by writing a '1' to the INIT bit.! \fn static void md5_update(struct crypto_tfm *tfm, const u8 *data, unsigned int len)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief on-the-fly md5 computation   
 *  \param tfm linux crypto algo transform  
 *  \param data input data  
 *  \param len size of input data  
! \fn static void md5_final(struct crypto_tfm *tfm, u8 *out)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief compute final md5 value   
 *  \param tfm linux crypto algo transform  
 *  \param out final md5 output value  
 Wipe context
 * \brief MD5 function mappings
! \fn int ifxdeu_init_md5 (void)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief initialize md5 driver   
! \fn void ifxdeu_fini_md5 (void)
  * \ingroup IFX_MD5_FUNCTIONS
  * \brief unregister md5 driver   
*****************************************************************************
**
** FILE NAME    : ifxmips_md5.c
** PROJECT      : IFX UEIP
** MODULES      : DEU Module for UEIP
**
** DATE         : September 8, 2009
** AUTHOR       : Mohammad Firdaus
** DESCRIPTION  : Data Encryption Unit Driver
** COPYRIGHT    :       Copyright (c) 2009
**                      Infineon Technologies AG
**                      Am Campeon 1-12, 85579 Neubiberg, Germany
**
**    This program is free software; you can redistribute it and/or modify
**    it under the terms of the GNU General Public License as published by
**    the Free Software Foundation; either version 2 of the License, or
**    (at your option) any later version.
**
** HISTORY
** $Date        $Author             $Comment
** 08,Sept 2009 Mohammad Firdaus    Initial UEIP release
******************************************************************************!
  \defgroup    IFX_DEU IFX_DEU_DRIVERS
  \ingroup API
  \brief ifx deu driver module
!
  \file		ifxmips_md5.c
  \ingroup 	IFX_DEU
  \brief 	MD5 encryption deu driver file 
!
  \defgroup IFX_MD5_FUNCTIONS IFX_MD5_FUNCTIONS
  \ingroup IFX_DEU
  \brief ifx deu MD5 functions
Project header files  Project header #define CRYPTO_DEBUG! \fn static u32 endian_swap(u32 input)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief perform dword level endian swap   
 *  \param input value of dword that requires to be swapped  
! \fn static void md5_transform(u32 *hash, u32 const *in)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief main interface to md5 hardware   
 *  \param hash current hash value  
 *  \param in 64-byte block of input  
	printk("in[%d]: %08x\n", i, endian_swap(in[i]));wait for processing this will not take long! \fn static inline void md5_transform_helper(struct md5_ctx *ctx)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief interfacing function for md5_transform()   
 *  \param ctx crypto context  
le32_to_cpu_array(ctx->block, sizeof(ctx->block) / sizeof(u32));! \fn static void md5_init(struct crypto_tfm *tfm)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief initialize md5 hardware   
 *  \param tfm linux crypto algo transform  
 1 = md5  0 = sha1 Initialize the hash operation by writing a '1' to the INIT bit.! \fn static void md5_update(struct crypto_tfm *tfm, const u8 *data, unsigned int len)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief on-the-fly md5 computation   
 *  \param tfm linux crypto algo transform  
 *  \param data input data  
 *  \param len size of input data  
! \fn static void md5_final(struct crypto_tfm *tfm, u8 *out)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief compute final md5 value   
 *  \param tfm linux crypto algo transform  
 *  \param out final md5 output value  
 Wipe context
 * \brief MD5 function mappings
! \fn int ifxdeu_init_md5 (void)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief initialize md5 driver   
! \fn void ifxdeu_fini_md5 (void)
  * \ingroup IFX_MD5_FUNCTIONS
  * \brief unregister md5 driver   
*****************************************************************************
**
** FILE NAME    : ifxmips_md5.c
** PROJECT      : IFX UEIP
** MODULES      : DEU Module for UEIP
**
** DATE         : September 8, 2009
** AUTHOR       : Mohammad Firdaus
** DESCRIPTION  : Data Encryption Unit Driver
** COPYRIGHT    :       Copyright (c) 2009
**                      Infineon Technologies AG
**                      Am Campeon 1-12, 85579 Neubiberg, Germany
**
**    This program is free software; you can redistribute it and/or modify
**    it under the terms of the GNU General Public License as published by
**    the Free Software Foundation; either version 2 of the License, or
**    (at your option) any later version.
**
** HISTORY
** $Date        $Author             $Comment
** 08,Sept 2009 Mohammad Firdaus    Initial UEIP release
******************************************************************************!
  \defgroup    IFX_DEU IFX_DEU_DRIVERS
  \ingroup API
  \brief ifx deu driver module
!
  \file		ifxmips_md5.c
  \ingroup 	IFX_DEU
  \brief 	MD5 encryption deu driver file 
!
  \defgroup IFX_MD5_FUNCTIONS IFX_MD5_FUNCTIONS
  \ingroup IFX_DEU
  \brief ifx deu MD5 functions
Project header files  Project header #define CRYPTO_DEBUG! \fn static u32 endian_swap(u32 input)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief perform dword level endian swap   
 *  \param input value of dword that requires to be swapped  
! \fn static void md5_transform(u32 *hash, u32 const *in)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief main interface to md5 hardware   
 *  \param hash current hash value  
 *  \param in 64-byte block of input  
	printk("in[%d]: %08x\n", i, endian_swap(in[i]));wait for processing this will not take long! \fn static inline void md5_transform_helper(struct md5_ctx *ctx)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief interfacing function for md5_transform()   
 *  \param ctx crypto context  
le32_to_cpu_array(ctx->block, sizeof(ctx->block) / sizeof(u32));! \fn static void md5_init(struct crypto_tfm *tfm)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief initialize md5 hardware   
 *  \param tfm linux crypto algo transform  
 1 = md5  0 = sha1 Initialize the hash operation by writing a '1' to the INIT bit.! \fn static void md5_update(struct crypto_tfm *tfm, const u8 *data, unsigned int len)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief on-the-fly md5 computation   
 *  \param tfm linux crypto algo transform  
 *  \param data input data  
 *  \param len size of input data  
! \fn static void md5_final(struct crypto_tfm *tfm, u8 *out)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief compute final md5 value   
 *  \param tfm linux crypto algo transform  
 *  \param out final md5 output value  
 Wipe context
 * \brief MD5 function mappings
! \fn int ifxdeu_init_md5 (void)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief initialize md5 driver   
! \fn void ifxdeu_fini_md5 (void)
  * \ingroup IFX_MD5_FUNCTIONS
  * \brief unregister md5 driver   
*****************************************************************************
**
** FILE NAME    : ifxmips_md5.c
** PROJECT      : IFX UEIP
** MODULES      : DEU Module for UEIP
**
** DATE         : September 8, 2009
** AUTHOR       : Mohammad Firdaus
** DESCRIPTION  : Data Encryption Unit Driver
** COPYRIGHT    :       Copyright (c) 2009
**                      Infineon Technologies AG
**                      Am Campeon 1-12, 85579 Neubiberg, Germany
**
**    This program is free software; you can redistribute it and/or modify
**    it under the terms of the GNU General Public License as published by
**    the Free Software Foundation; either version 2 of the License, or
**    (at your option) any later version.
**
** HISTORY
** $Date        $Author             $Comment
** 08,Sept 2009 Mohammad Firdaus    Initial UEIP release
******************************************************************************!
  \defgroup    IFX_DEU IFX_DEU_DRIVERS
  \ingroup API
  \brief ifx deu driver module
!
  \file		ifxmips_md5.c
  \ingroup 	IFX_DEU
  \brief 	MD5 encryption deu driver file 
!
  \defgroup IFX_MD5_FUNCTIONS IFX_MD5_FUNCTIONS
  \ingroup IFX_DEU
  \brief ifx deu MD5 functions
Project header files  Project header #define CRYPTO_DEBUG! \fn static u32 endian_swap(u32 input)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief perform dword level endian swap   
 *  \param input value of dword that requires to be swapped  
! \fn static void md5_transform(u32 *hash, u32 const *in)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief main interface to md5 hardware   
 *  \param hash current hash value  
 *  \param in 64-byte block of input  
	printk("in[%d]: %08x\n", i, endian_swap(in[i]));wait for processing this will not take long! \fn static inline void md5_transform_helper(struct md5_ctx *ctx)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief interfacing function for md5_transform()   
 *  \param ctx crypto context  
le32_to_cpu_array(ctx->block, sizeof(ctx->block) / sizeof(u32));! \fn static void md5_init(struct crypto_tfm *tfm)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief initialize md5 hardware   
 *  \param tfm linux crypto algo transform  
 1 = md5  0 = sha1 Initialize the hash operation by writing a '1' to the INIT bit.! \fn static void md5_update(struct crypto_tfm *tfm, const u8 *data, unsigned int len)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief on-the-fly md5 computation   
 *  \param tfm linux crypto algo transform  
 *  \param data input data  
 *  \param len size of input data  
! \fn static void md5_final(struct crypto_tfm *tfm, u8 *out)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief compute final md5 value   
 *  \param tfm linux crypto algo transform  
 *  \param out final md5 output value  
 Wipe context
 * \brief MD5 function mappings
! \fn int ifxdeu_init_md5 (void)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief initialize md5 driver   
! \fn void ifxdeu_fini_md5 (void)
  * \ingroup IFX_MD5_FUNCTIONS
  * \brief unregister md5 driver   
*****************************************************************************
**
** FILE NAME    : ifxmips_md5.c
** PROJECT      : IFX UEIP
** MODULES      : DEU Module for UEIP
**
** DATE         : September 8, 2009
** AUTHOR       : Mohammad Firdaus
** DESCRIPTION  : Data Encryption Unit Driver
** COPYRIGHT    :       Copyright (c) 2009
**                      Infineon Technologies AG
**                      Am Campeon 1-12, 85579 Neubiberg, Germany
**
**    This program is free software; you can redistribute it and/or modify
**    it under the terms of the GNU General Public License as published by
**    the Free Software Foundation; either version 2 of the License, or
**    (at your option) any later version.
**
** HISTORY
** $Date        $Author             $Comment
** 08,Sept 2009 Mohammad Firdaus    Initial UEIP release
******************************************************************************!
  \defgroup    IFX_DEU IFX_DEU_DRIVERS
  \ingroup API
  \brief ifx deu driver module
!
  \file		ifxmips_md5.c
  \ingroup 	IFX_DEU
  \brief 	MD5 encryption deu driver file 
!
  \defgroup IFX_MD5_FUNCTIONS IFX_MD5_FUNCTIONS
  \ingroup IFX_DEU
  \brief ifx deu MD5 functions
Project header files  Project header #define CRYPTO_DEBUG! \fn static u32 endian_swap(u32 input)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief perform dword level endian swap   
 *  \param input value of dword that requires to be swapped  
! \fn static void md5_transform(u32 *hash, u32 const *in)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief main interface to md5 hardware   
 *  \param hash current hash value  
 *  \param in 64-byte block of input  
	printk("in[%d]: %08x\n", i, endian_swap(in[i]));wait for processing this will not take long! \fn static inline void md5_transform_helper(struct md5_ctx *ctx)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief interfacing function for md5_transform()   
 *  \param ctx crypto context  
le32_to_cpu_array(ctx->block, sizeof(ctx->block) / sizeof(u32));! \fn static void md5_init(struct crypto_tfm *tfm)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief initialize md5 hardware   
 *  \param tfm linux crypto algo transform  
 1 = md5  0 = sha1 Initialize the hash operation by writing a '1' to the INIT bit.! \fn static void md5_update(struct crypto_tfm *tfm, const u8 *data, unsigned int len)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief on-the-fly md5 computation   
 *  \param tfm linux crypto algo transform  
 *  \param data input data  
 *  \param len size of input data  
! \fn static void md5_final(struct crypto_tfm *tfm, u8 *out)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief compute final md5 value   
 *  \param tfm linux crypto algo transform  
 *  \param out final md5 output value  
 Wipe context
 * \brief MD5 function mappings
! \fn int ifxdeu_init_md5 (void)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief initialize md5 driver   
! \fn void ifxdeu_fini_md5 (void)
  * \ingroup IFX_MD5_FUNCTIONS
  * \brief unregister md5 driver   
*****************************************************************************
**
** FILE NAME    : ifxmips_md5.c
** PROJECT      : IFX UEIP
** MODULES      : DEU Module for UEIP
**
** DATE         : September 8, 2009
** AUTHOR       : Mohammad Firdaus
** DESCRIPTION  : Data Encryption Unit Driver
** COPYRIGHT    :       Copyright (c) 2009
**                      Infineon Technologies AG
**                      Am Campeon 1-12, 85579 Neubiberg, Germany
**
**    This program is free software; you can redistribute it and/or modify
**    it under the terms of the GNU General Public License as published by
**    the Free Software Foundation; either version 2 of the License, or
**    (at your option) any later version.
**
** HISTORY
** $Date        $Author             $Comment
** 08,Sept 2009 Mohammad Firdaus    Initial UEIP release
******************************************************************************!
  \defgroup    IFX_DEU IFX_DEU_DRIVERS
  \ingroup API
  \brief ifx deu driver module
!
  \file		ifxmips_md5.c
  \ingroup 	IFX_DEU
  \brief 	MD5 encryption deu driver file 
!
  \defgroup IFX_MD5_FUNCTIONS IFX_MD5_FUNCTIONS
  \ingroup IFX_DEU
  \brief ifx deu MD5 functions
Project header files  Project header #define CRYPTO_DEBUG! \fn static u32 endian_swap(u32 input)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief perform dword level endian swap   
 *  \param input value of dword that requires to be swapped  
! \fn static void md5_transform(u32 *hash, u32 const *in)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief main interface to md5 hardware   
 *  \param hash current hash value  
 *  \param in 64-byte block of input  
	printk("in[%d]: %08x\n", i, endian_swap(in[i]));wait for processing this will not take long! \fn static inline void md5_transform_helper(struct md5_ctx *ctx)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief interfacing function for md5_transform()   
 *  \param ctx crypto context  
le32_to_cpu_array(ctx->block, sizeof(ctx->block) / sizeof(u32));! \fn static void md5_init(struct crypto_tfm *tfm)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief initialize md5 hardware   
 *  \param tfm linux crypto algo transform  
 1 = md5  0 = sha1 Initialize the hash operation by writing a '1' to the INIT bit.! \fn static void md5_update(struct crypto_tfm *tfm, const u8 *data, unsigned int len)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief on-the-fly md5 computation   
 *  \param tfm linux crypto algo transform  
 *  \param data input data  
 *  \param len size of input data  
! \fn static void md5_final(struct crypto_tfm *tfm, u8 *out)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief compute final md5 value   
 *  \param tfm linux crypto algo transform  
 *  \param out final md5 output value  
 Wipe context
 * \brief MD5 function mappings
! \fn int ifxdeu_init_md5 (void)
 *  \ingroup IFX_MD5_FUNCTIONS
 *  \brief initialize md5 driver   
! \fn void ifxdeu_fini_md5 (void)
  * \ingroup IFX_MD5_FUNCTIONS
  * \brief unregister md5 driver   
