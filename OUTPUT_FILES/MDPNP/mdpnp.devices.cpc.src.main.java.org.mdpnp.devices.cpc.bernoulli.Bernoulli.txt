******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * @author Jeff Plourde
 *
 *
     * Send command a command
     * 
     * @param out
     *            to write command
     * @param in
     *            to read response
     * @param bid
     *            bed identifier
     * @param cmd
     *            command identifier
     * @return true if success
     * @throws IOException
      CPCSubscription cpc = new CPCSubscription(); JAXBContext jc = JAXBContext.newInstance(CPCSubscription.class, CPCSubscription.Device.class); Marshaller m = jc.createMarshaller(); m.marshal(cpc, out); out.flush(); We're going to make this look like a regular XML document by injecting a root element // First eliminate the processing directive if(!consumeProcessingDirective(is)) { throw new IOException("No xml processing directive found"); } Then create a stream that will first deliver our root element; then the rest of the stream log.trace("setDocumentLocator("+locator+")"); log.trace("startDocument"); log.trace("endDocument"); saxParser.reset(); log.trace("startPrefixMapping("+prefix+","+uri+")"); log.trace("endPrefixMapping("+prefix+")"); TODO alarms log.trace("startElement("+uri+","+localName+","+qName+","+atts+")"); TODO alarms log.trace("endElement("+uri+","+localName+","+qName+")"); log.trace("characters("+Arrays.toString(ch)+","+start+","+length+")"); log.trace("ignorableWhitespace("+Arrays.toString(ch)+","+start+","+length+")");******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * @author Jeff Plourde
 *
 *
     * Send command a command
     * 
     * @param out
     *            to write command
     * @param in
     *            to read response
     * @param bid
     *            bed identifier
     * @param cmd
     *            command identifier
     * @return true if success
     * @throws IOException
      CPCSubscription cpc = new CPCSubscription(); JAXBContext jc = JAXBContext.newInstance(CPCSubscription.class, CPCSubscription.Device.class); Marshaller m = jc.createMarshaller(); m.marshal(cpc, out); out.flush(); We're going to make this look like a regular XML document by injecting a root element // First eliminate the processing directive if(!consumeProcessingDirective(is)) { throw new IOException("No xml processing directive found"); } Then create a stream that will first deliver our root element; then the rest of the stream log.trace("setDocumentLocator("+locator+")"); log.trace("startDocument"); log.trace("endDocument"); saxParser.reset(); log.trace("startPrefixMapping("+prefix+","+uri+")"); log.trace("endPrefixMapping("+prefix+")"); TODO alarms log.trace("startElement("+uri+","+localName+","+qName+","+atts+")"); TODO alarms log.trace("endElement("+uri+","+localName+","+qName+")"); log.trace("characters("+Arrays.toString(ch)+","+start+","+length+")"); log.trace("ignorableWhitespace("+Arrays.toString(ch)+","+start+","+length+")");******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * @author Jeff Plourde
 *
 *
     * Send command a command
     * 
     * @param out
     *            to write command
     * @param in
     *            to read response
     * @param bid
     *            bed identifier
     * @param cmd
     *            command identifier
     * @return true if success
     * @throws IOException
      CPCSubscription cpc = new CPCSubscription(); JAXBContext jc = JAXBContext.newInstance(CPCSubscription.class, CPCSubscription.Device.class); Marshaller m = jc.createMarshaller(); m.marshal(cpc, out); out.flush(); We're going to make this look like a regular XML document by injecting a root element // First eliminate the processing directive if(!consumeProcessingDirective(is)) { throw new IOException("No xml processing directive found"); } Then create a stream that will first deliver our root element; then the rest of the stream log.trace("setDocumentLocator("+locator+")"); log.trace("startDocument"); log.trace("endDocument"); saxParser.reset(); log.trace("startPrefixMapping("+prefix+","+uri+")"); log.trace("endPrefixMapping("+prefix+")"); TODO alarms log.trace("startElement("+uri+","+localName+","+qName+","+atts+")"); TODO alarms log.trace("endElement("+uri+","+localName+","+qName+")"); log.trace("characters("+Arrays.toString(ch)+","+start+","+length+")"); log.trace("ignorableWhitespace("+Arrays.toString(ch)+","+start+","+length+")");******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * @author Jeff Plourde
 *
 *
     * Send command a command
     * 
     * @param out
     *            to write command
     * @param in
     *            to read response
     * @param bid
     *            bed identifier
     * @param cmd
     *            command identifier
     * @return true if success
     * @throws IOException
      CPCSubscription cpc = new CPCSubscription(); JAXBContext jc = JAXBContext.newInstance(CPCSubscription.class, CPCSubscription.Device.class); Marshaller m = jc.createMarshaller(); m.marshal(cpc, out); out.flush(); We're going to make this look like a regular XML document by injecting a root element // First eliminate the processing directive if(!consumeProcessingDirective(is)) { throw new IOException("No xml processing directive found"); } Then create a stream that will first deliver our root element; then the rest of the stream log.trace("setDocumentLocator("+locator+")"); log.trace("startDocument"); log.trace("endDocument"); saxParser.reset(); log.trace("startPrefixMapping("+prefix+","+uri+")"); log.trace("endPrefixMapping("+prefix+")"); TODO alarms log.trace("startElement("+uri+","+localName+","+qName+","+atts+")"); TODO alarms log.trace("endElement("+uri+","+localName+","+qName+")"); log.trace("characters("+Arrays.toString(ch)+","+start+","+length+")"); log.trace("ignorableWhitespace("+Arrays.toString(ch)+","+start+","+length+")");