**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 1999 Robert Hak (rhak@ramapo.edu)
 *
 * Heavily modified for embedded use by Björn Stenberg (bjorn@haxx.se)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** I hacked this function to be placed inside because I figure we will need
   something like it eventually.

   Args are fairly straight forward. 
   int xbase: location of "bottom" of battery on screen 
   int ybase: location of "left" edge of battery on screen 
   int len: how long is the battery to be (in pixels) 
   int wid: how tall is the battery to be (in pixels) 
   int percent: what percentage of the charge has been used 

   Note: I am making use of the Logf() function until logging is 
         straightened out. 
 We only worry about length and width because if you place 
       the battery off the screen, its your own damn fault. We log 
       and then just draw an empty battery        debug("Error: Battery data invalid");   top batt. edge  bot batt. edge  left batt. edge  right batt. edge  2 dots that account for the nub on the right side of the battery  % battery is full, 100% is length-bar_xoffset-1 pixels **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 1999 Robert Hak (rhak@ramapo.edu)
 *
 * Heavily modified for embedded use by Björn Stenberg (bjorn@haxx.se)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** I hacked this function to be placed inside because I figure we will need
   something like it eventually.

   Args are fairly straight forward. 
   int xbase: location of "bottom" of battery on screen 
   int ybase: location of "left" edge of battery on screen 
   int len: how long is the battery to be (in pixels) 
   int wid: how tall is the battery to be (in pixels) 
   int percent: what percentage of the charge has been used 

   Note: I am making use of the Logf() function until logging is 
         straightened out. 
 We only worry about length and width because if you place 
       the battery off the screen, its your own damn fault. We log 
       and then just draw an empty battery        debug("Error: Battery data invalid");   top batt. edge  bot batt. edge  left batt. edge  right batt. edge  2 dots that account for the nub on the right side of the battery  % battery is full, 100% is length-bar_xoffset-1 pixels **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 1999 Robert Hak (rhak@ramapo.edu)
 *
 * Heavily modified for embedded use by Björn Stenberg (bjorn@haxx.se)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** I hacked this function to be placed inside because I figure we will need
   something like it eventually.

   Args are fairly straight forward. 
   int xbase: location of "bottom" of battery on screen 
   int ybase: location of "left" edge of battery on screen 
   int len: how long is the battery to be (in pixels) 
   int wid: how tall is the battery to be (in pixels) 
   int percent: what percentage of the charge has been used 

   Note: I am making use of the Logf() function until logging is 
         straightened out. 
 We only worry about length and width because if you place 
       the battery off the screen, its your own damn fault. We log 
       and then just draw an empty battery        debug("Error: Battery data invalid");   top batt. edge  bot batt. edge  left batt. edge  right batt. edge  2 dots that account for the nub on the right side of the battery  % battery is full, 100% is length-bar_xoffset-1 pixels 