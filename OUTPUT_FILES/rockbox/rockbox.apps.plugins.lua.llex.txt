
** $Id: llex.c,v 2.20.1.2 2009/11/23 14:58:22 roberto Exp $
** Lexical Analyzer
** See Copyright Notice in lua.h
 #include <locale.h>  ORDER RESERVED  reserved words are never collected  reserved word  entry for `str'  make sure `str' will not be collected  skip `\n' or `\r'  skip `\n\r' or `\r\n'  no look-ahead token  initialize buffer  read first char 
** =======================================================
** LEXICAL ANALYZER
** =======================================================
 format error: try to update decimal point separator  struct lconv *cv = localeconv();  (cv ? cv->decimal_point[0] : '.');  try updated decimal separator  format error with correct decimal point: no more options  undo change (for error message)  LUA_NUMBER  `E'?  optional exponent sign  follow locale for decimal point  format error?  try to update decimal point separator  avoid warnings when `cont' is not used  skip 2nd `['  string starts with a newline?  skip it  to avoid warnings  skip 2nd `['  skip 2nd `]'  avoid wasting space  to avoid warnings  to avoid warnings  do not save the `\'  go through  will raise an error next loop  handles \\, \", \', and \?  \xxx  skip delimiter  else is a comment  `skip_sep' may dirty the buffer  long comment  else short comment  ...  ..  identifier or reserved word  reserved word?  single-char tokens (+ - / ...)  is there a look-ahead token?  use this one  and discharge it  read next token 
** $Id: llex.c,v 2.20.1.2 2009/11/23 14:58:22 roberto Exp $
** Lexical Analyzer
** See Copyright Notice in lua.h
 #include <locale.h>  ORDER RESERVED  reserved words are never collected  reserved word  entry for `str'  make sure `str' will not be collected  skip `\n' or `\r'  skip `\n\r' or `\r\n'  no look-ahead token  initialize buffer  read first char 
** =======================================================
** LEXICAL ANALYZER
** =======================================================
 format error: try to update decimal point separator  struct lconv *cv = localeconv();  (cv ? cv->decimal_point[0] : '.');  try updated decimal separator  format error with correct decimal point: no more options  undo change (for error message)  LUA_NUMBER  `E'?  optional exponent sign  follow locale for decimal point  format error?  try to update decimal point separator  avoid warnings when `cont' is not used  skip 2nd `['  string starts with a newline?  skip it  to avoid warnings  skip 2nd `['  skip 2nd `]'  avoid wasting space  to avoid warnings  to avoid warnings  do not save the `\'  go through  will raise an error next loop  handles \\, \", \', and \?  \xxx  skip delimiter  else is a comment  `skip_sep' may dirty the buffer  long comment  else short comment  ...  ..  identifier or reserved word  reserved word?  single-char tokens (+ - / ...)  is there a look-ahead token?  use this one  and discharge it  read next token 
** $Id: llex.c,v 2.20.1.2 2009/11/23 14:58:22 roberto Exp $
** Lexical Analyzer
** See Copyright Notice in lua.h
 #include <locale.h>  ORDER RESERVED  reserved words are never collected  reserved word  entry for `str'  make sure `str' will not be collected  skip `\n' or `\r'  skip `\n\r' or `\r\n'  no look-ahead token  initialize buffer  read first char 
** =======================================================
** LEXICAL ANALYZER
** =======================================================
 format error: try to update decimal point separator  struct lconv *cv = localeconv();  (cv ? cv->decimal_point[0] : '.');  try updated decimal separator  format error with correct decimal point: no more options  undo change (for error message)  LUA_NUMBER  `E'?  optional exponent sign  follow locale for decimal point  format error?  try to update decimal point separator  avoid warnings when `cont' is not used  skip 2nd `['  string starts with a newline?  skip it  to avoid warnings  skip 2nd `['  skip 2nd `]'  avoid wasting space  to avoid warnings  to avoid warnings  do not save the `\'  go through  will raise an error next loop  handles \\, \", \', and \?  \xxx  skip delimiter  else is a comment  `skip_sep' may dirty the buffer  long comment  else short comment  ...  ..  identifier or reserved word  reserved word?  single-char tokens (+ - / ...)  is there a look-ahead token?  use this one  and discharge it  read next token 