*******************************************************************
 *                                                                  *
 * THIS FILE IS PART OF THE OggVorbis 'TREMOR' CODEC SOURCE CODE.   *
 *                                                                  *
 * USE, DISTRIBUTION AND REPRODUCTION OF THIS LIBRARY SOURCE IS     *
 * GOVERNED BY A BSD-STYLE SOURCE LICENSE INCLUDED WITH THIS SOURCE *
 * IN 'COPYING'. PLEASE READ THESE TERMS BEFORE DISTRIBUTING.       *
 *                                                                  *
 * THE OggVorbis 'TREMOR' SOURCE CODE IS (C) COPYRIGHT 1994-2002    *
 * BY THE Xiph.Org FOUNDATION http://www.xiph.org/                  *
 *                                                                  *
 ********************************************************************

 function: floor backend 1 implementation

 ******************************************************************* floor 1 fixed at -140dB to 0dB range *********************************************memset(info,0,sizeof(*info));memset(look,0,sizeof(*look)); read partitions  only 0 to 31 legal  only 0 to 15 legal  read partition classes  1 to 8  0,1,2,3 bits  read the post list  only 1,2,3,4 legal now  don't allow repeated values in post list as they'd result in
     zero-length segments  we drop each position value in-between already decoded values,
     and use linear interpolation to predict each new value past the
     edges.  The positions are read in the order of the position
     list... we precompute the bounding positions in the lookup.  Of
     course, the neighbors can change (if a position is declined), but
     this is an initial mapping  also store a sorted position index  points from sort order back to range number  quantize values to multiplier spec  1024 -> 256  1024 -> 128  1024 -> 86  1024 -> 64  discover our neighbors for decode where we don't use fit flags
     (that would push the neighbors outward)  mask off flag  keep the floor lookup table in fast IRAM  unpack wrapped/predicted values from stream  partition by partition  partition by partition  decode the partition's first stage cascade value  unwrap positive values and reconsitute via linear interpolation  render the lines  guard lookup against out-of-range values  guard lookup against out-of-range values  be certain  export hooks *******************************************************************
 *                                                                  *
 * THIS FILE IS PART OF THE OggVorbis 'TREMOR' CODEC SOURCE CODE.   *
 *                                                                  *
 * USE, DISTRIBUTION AND REPRODUCTION OF THIS LIBRARY SOURCE IS     *
 * GOVERNED BY A BSD-STYLE SOURCE LICENSE INCLUDED WITH THIS SOURCE *
 * IN 'COPYING'. PLEASE READ THESE TERMS BEFORE DISTRIBUTING.       *
 *                                                                  *
 * THE OggVorbis 'TREMOR' SOURCE CODE IS (C) COPYRIGHT 1994-2002    *
 * BY THE Xiph.Org FOUNDATION http://www.xiph.org/                  *
 *                                                                  *
 ********************************************************************

 function: floor backend 1 implementation

 ******************************************************************* floor 1 fixed at -140dB to 0dB range *********************************************memset(info,0,sizeof(*info));memset(look,0,sizeof(*look)); read partitions  only 0 to 31 legal  only 0 to 15 legal  read partition classes  1 to 8  0,1,2,3 bits  read the post list  only 1,2,3,4 legal now  don't allow repeated values in post list as they'd result in
     zero-length segments  we drop each position value in-between already decoded values,
     and use linear interpolation to predict each new value past the
     edges.  The positions are read in the order of the position
     list... we precompute the bounding positions in the lookup.  Of
     course, the neighbors can change (if a position is declined), but
     this is an initial mapping  also store a sorted position index  points from sort order back to range number  quantize values to multiplier spec  1024 -> 256  1024 -> 128  1024 -> 86  1024 -> 64  discover our neighbors for decode where we don't use fit flags
     (that would push the neighbors outward)  mask off flag  keep the floor lookup table in fast IRAM  unpack wrapped/predicted values from stream  partition by partition  partition by partition  decode the partition's first stage cascade value  unwrap positive values and reconsitute via linear interpolation  render the lines  guard lookup against out-of-range values  guard lookup against out-of-range values  be certain  export hooks *******************************************************************
 *                                                                  *
 * THIS FILE IS PART OF THE OggVorbis 'TREMOR' CODEC SOURCE CODE.   *
 *                                                                  *
 * USE, DISTRIBUTION AND REPRODUCTION OF THIS LIBRARY SOURCE IS     *
 * GOVERNED BY A BSD-STYLE SOURCE LICENSE INCLUDED WITH THIS SOURCE *
 * IN 'COPYING'. PLEASE READ THESE TERMS BEFORE DISTRIBUTING.       *
 *                                                                  *
 * THE OggVorbis 'TREMOR' SOURCE CODE IS (C) COPYRIGHT 1994-2002    *
 * BY THE Xiph.Org FOUNDATION http://www.xiph.org/                  *
 *                                                                  *
 ********************************************************************

 function: floor backend 1 implementation

 ******************************************************************* floor 1 fixed at -140dB to 0dB range *********************************************memset(info,0,sizeof(*info));memset(look,0,sizeof(*look)); read partitions  only 0 to 31 legal  only 0 to 15 legal  read partition classes  1 to 8  0,1,2,3 bits  read the post list  only 1,2,3,4 legal now  don't allow repeated values in post list as they'd result in
     zero-length segments  we drop each position value in-between already decoded values,
     and use linear interpolation to predict each new value past the
     edges.  The positions are read in the order of the position
     list... we precompute the bounding positions in the lookup.  Of
     course, the neighbors can change (if a position is declined), but
     this is an initial mapping  also store a sorted position index  points from sort order back to range number  quantize values to multiplier spec  1024 -> 256  1024 -> 128  1024 -> 86  1024 -> 64  discover our neighbors for decode where we don't use fit flags
     (that would push the neighbors outward)  mask off flag  keep the floor lookup table in fast IRAM  unpack wrapped/predicted values from stream  partition by partition  partition by partition  decode the partition's first stage cascade value  unwrap positive values and reconsitute via linear interpolation  render the lines  guard lookup against out-of-range values  guard lookup against out-of-range values  be certain  export hooks 