**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Daniel Stenberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied. *
 *************************************************************************** we got NULL input so then we get our last position instead  pass all letters that are including in the separator string  so this is where the next piece of string starts  set the end pointer to the first byte after the start  scan through the string to find where it ends, it ends on a
           null byte or a character that exists in the separator string  the end is not a null byte  zero terminate it!  advance last pointer to beyond the null byte  return the position where the string starts  we ended up on a null byte, there are no more strings to find!  this was only compiled if strtok_r wasn't present **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Daniel Stenberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied. *
 *************************************************************************** we got NULL input so then we get our last position instead  pass all letters that are including in the separator string  so this is where the next piece of string starts  set the end pointer to the first byte after the start  scan through the string to find where it ends, it ends on a
           null byte or a character that exists in the separator string  the end is not a null byte  zero terminate it!  advance last pointer to beyond the null byte  return the position where the string starts  we ended up on a null byte, there are no more strings to find!  this was only compiled if strtok_r wasn't present **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Daniel Stenberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied. *
 *************************************************************************** we got NULL input so then we get our last position instead  pass all letters that are including in the separator string  so this is where the next piece of string starts  set the end pointer to the first byte after the start  scan through the string to find where it ends, it ends on a
           null byte or a character that exists in the separator string  the end is not a null byte  zero terminate it!  advance last pointer to beyond the null byte  return the position where the string starts  we ended up on a null byte, there are no more strings to find!  this was only compiled if strtok_r wasn't present 