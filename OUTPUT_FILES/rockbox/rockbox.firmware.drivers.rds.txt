**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2011 by Bertrik Sikken
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Driver keeps strings in native character format, translating on demand  copy of final message  timeout to discard programme service name  copy of final message  time to discard radio text  current programme identifier code  date/time (not robust; not essential)  timeout before text times out  timeout before RDS is considered idle and is reset  timeout until rds is thought idle  if active, timeouts are monitored  timeout before group segment obsolescence  programme identification (not robust; not really used anyway)  previously read code  programme service name  round-robin driver work queue  next expected segment  timeout to receive full group  ps_data[0 or 1]  radio text  round-robin driver work queue  next expected segment  timeout to receive full group  message change flag  rt_data[0 or 1]  (CONFIG_RDS & RDS_CFG_PROCESS)  Functions are called in ISR context  !(CONFIG_RDS & RDS_CFG_ISR)  (CONFIG_RDS & RDS_CFG_ISR)  RDS code table G0 to UTF-8 translation  codes 0x00 .. 0x1F are omitted because they are identities and not
     * actually spec'ed as part of the character maps anyway  0       1       2       3       4       5       6       7           20  28  30  38  40  48  50  58  60  68  70  78  80  88  90  98  A0  A8  B0  B8  C0  C8  D0  D8  E0  E8  F0  F8  could add tables G1 and G2 without much trouble  write one UTF-8 character; returns original 'dst' if insufficient space  U+0000 .. U+007F -> 0xxx xxxx  U+0080 .. U+07FF -> 110x xxxx 10 xx xxxx  if (u <= 0xFFFF)  U+0800 .. U+FFFF -> 1110 xxxx 10xx xxxx 10xx xxxx  No four-byte characters are used right now  U+10000 .. U+10FFFF -> 11110xxx 10xx xxxx 10xx xxxx 10xx xxxx  0  Copy RDS character string with conversion to UTF-8
 * Acts like strlcpy but won't split multibyte characters  indicate recent processing activity  resets the rds parser  reset general info  reset driver info  (CONFIG_RDS & RDS_CFG_PROCESS)  initialises the rds parser  sync RDS state  handles a group 0 packet, returns true if a new message was received  store data  don't have all segments yet  two messages in a row must be the same  handles a radio text characters, returns true if end-of-line found  end of line  optional line break  end of headline  regular character  unprintable  soft hyphen  handles a group 2 packet, returns true if a new message was received  reset parsing if the message type changed  store data  there are two cases for completion:
     * - we got all 16 segments
     * - we found an end of line  two messages in a row must be the same  handles a group 4a packet (clock-time)  invalid date, before 2012-01-01  invalid time  invalid local time offset  convert modified julian day + time to UTC  processes one rds packet  process programme identification (PI) code  handle rds data based on group  group 0A: basic info  group 0B: basic info  group 2A: radio text  group 2B: radio text  group 4A: clock-time  (CONFIG_RDS & RDS_CFG_PROCESS)  pushes preprocesed RDS information  nothing doing for now  (CONFIG_RDS & RDS_CFG_PUSH)  read fully-processed RDS data  nothing doing for now **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2011 by Bertrik Sikken
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Driver keeps strings in native character format, translating on demand  copy of final message  timeout to discard programme service name  copy of final message  time to discard radio text  current programme identifier code  date/time (not robust; not essential)  timeout before text times out  timeout before RDS is considered idle and is reset  timeout until rds is thought idle  if active, timeouts are monitored  timeout before group segment obsolescence  programme identification (not robust; not really used anyway)  previously read code  programme service name  round-robin driver work queue  next expected segment  timeout to receive full group  ps_data[0 or 1]  radio text  round-robin driver work queue  next expected segment  timeout to receive full group  message change flag  rt_data[0 or 1]  (CONFIG_RDS & RDS_CFG_PROCESS)  Functions are called in ISR context  !(CONFIG_RDS & RDS_CFG_ISR)  (CONFIG_RDS & RDS_CFG_ISR)  RDS code table G0 to UTF-8 translation  codes 0x00 .. 0x1F are omitted because they are identities and not
     * actually spec'ed as part of the character maps anyway  0       1       2       3       4       5       6       7           20  28  30  38  40  48  50  58  60  68  70  78  80  88  90  98  A0  A8  B0  B8  C0  C8  D0  D8  E0  E8  F0  F8  could add tables G1 and G2 without much trouble  write one UTF-8 character; returns original 'dst' if insufficient space  U+0000 .. U+007F -> 0xxx xxxx  U+0080 .. U+07FF -> 110x xxxx 10 xx xxxx  if (u <= 0xFFFF)  U+0800 .. U+FFFF -> 1110 xxxx 10xx xxxx 10xx xxxx  No four-byte characters are used right now  U+10000 .. U+10FFFF -> 11110xxx 10xx xxxx 10xx xxxx 10xx xxxx  0  Copy RDS character string with conversion to UTF-8
 * Acts like strlcpy but won't split multibyte characters  indicate recent processing activity  resets the rds parser  reset general info  reset driver info  (CONFIG_RDS & RDS_CFG_PROCESS)  initialises the rds parser  sync RDS state  handles a group 0 packet, returns true if a new message was received  store data  don't have all segments yet  two messages in a row must be the same  handles a radio text characters, returns true if end-of-line found  end of line  optional line break  end of headline  regular character  unprintable  soft hyphen  handles a group 2 packet, returns true if a new message was received  reset parsing if the message type changed  store data  there are two cases for completion:
     * - we got all 16 segments
     * - we found an end of line  two messages in a row must be the same  handles a group 4a packet (clock-time)  invalid date, before 2012-01-01  invalid time  invalid local time offset  convert modified julian day + time to UTC  processes one rds packet  process programme identification (PI) code  handle rds data based on group  group 0A: basic info  group 0B: basic info  group 2A: radio text  group 2B: radio text  group 4A: clock-time  (CONFIG_RDS & RDS_CFG_PROCESS)  pushes preprocesed RDS information  nothing doing for now  (CONFIG_RDS & RDS_CFG_PUSH)  read fully-processed RDS data  nothing doing for now **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2011 by Bertrik Sikken
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Driver keeps strings in native character format, translating on demand  copy of final message  timeout to discard programme service name  copy of final message  time to discard radio text  current programme identifier code  date/time (not robust; not essential)  timeout before text times out  timeout before RDS is considered idle and is reset  timeout until rds is thought idle  if active, timeouts are monitored  timeout before group segment obsolescence  programme identification (not robust; not really used anyway)  previously read code  programme service name  round-robin driver work queue  next expected segment  timeout to receive full group  ps_data[0 or 1]  radio text  round-robin driver work queue  next expected segment  timeout to receive full group  message change flag  rt_data[0 or 1]  (CONFIG_RDS & RDS_CFG_PROCESS)  Functions are called in ISR context  !(CONFIG_RDS & RDS_CFG_ISR)  (CONFIG_RDS & RDS_CFG_ISR)  RDS code table G0 to UTF-8 translation  codes 0x00 .. 0x1F are omitted because they are identities and not
     * actually spec'ed as part of the character maps anyway  0       1       2       3       4       5       6       7           20  28  30  38  40  48  50  58  60  68  70  78  80  88  90  98  A0  A8  B0  B8  C0  C8  D0  D8  E0  E8  F0  F8  could add tables G1 and G2 without much trouble  write one UTF-8 character; returns original 'dst' if insufficient space  U+0000 .. U+007F -> 0xxx xxxx  U+0080 .. U+07FF -> 110x xxxx 10 xx xxxx  if (u <= 0xFFFF)  U+0800 .. U+FFFF -> 1110 xxxx 10xx xxxx 10xx xxxx  No four-byte characters are used right now  U+10000 .. U+10FFFF -> 11110xxx 10xx xxxx 10xx xxxx 10xx xxxx  0  Copy RDS character string with conversion to UTF-8
 * Acts like strlcpy but won't split multibyte characters  indicate recent processing activity  resets the rds parser  reset general info  reset driver info  (CONFIG_RDS & RDS_CFG_PROCESS)  initialises the rds parser  sync RDS state  handles a group 0 packet, returns true if a new message was received  store data  don't have all segments yet  two messages in a row must be the same  handles a radio text characters, returns true if end-of-line found  end of line  optional line break  end of headline  regular character  unprintable  soft hyphen  handles a group 2 packet, returns true if a new message was received  reset parsing if the message type changed  store data  there are two cases for completion:
     * - we got all 16 segments
     * - we found an end of line  two messages in a row must be the same  handles a group 4a packet (clock-time)  invalid date, before 2012-01-01  invalid time  invalid local time offset  convert modified julian day + time to UTC  processes one rds packet  process programme identification (PI) code  handle rds data based on group  group 0A: basic info  group 0B: basic info  group 2A: radio text  group 2B: radio text  group 4A: clock-time  (CONFIG_RDS & RDS_CFG_PROCESS)  pushes preprocesed RDS information  nothing doing for now  (CONFIG_RDS & RDS_CFG_PUSH)  read fully-processed RDS data  nothing doing for now 