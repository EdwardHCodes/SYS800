**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 by Andy Young
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************  The UDA1380 requires a clock signal at a multiple of the sample rate
    (256Fs, 384Fs, 512Fs or 768Fs, where Fs = sample rate).
    Some targets are able to supply this clock directly to the SYSCLK input.
    The H100 and H300 coldfire targets are limited in the selection of
    frequencies for this clock signal so they use a PLL inside the UDA1380
    (called the WSPLL) to regenerate it from the LRCK signal off the IIS bus.
 convert tenth of dB volume (-840..0) to master volume register value  1.5 dB steps  0.75 dB steps  0.5 dB steps  0.25 dB steps  convert tenth of dB volume (-780..0) to mixer volume register value  1.5 dB steps  0.75 dB steps  0.5 dB steps  0.25 dB steps  -------------------------------------------------  Local functions and variables  -------------------------------------------------  Internal control of WSPLL  Definition of a playback configuration to start with  PON_HP & PON_DAC is enabled later  00=max, 3f=mute  00=max, ff=mute  00=max, ff=mute  Bass and treble = 0 dB  Mute everything to start with  Enable mixer and 4x oversampling  Returns 0 if register was written or -1 if write failed *
 * Sets left and right master volume  (0(max) to 252(muted))
 *
 * Sets the bass value (0-12)
 *
 * Sets the treble value (0-3)
  Returns 0 if successful or -1 if some register failed  Initialize all registers *
 * Sets frequency settings for DAC and ADC relative to MCLK
 *
 * Selection for frequency ranges:
 *  Fs:        range:       with:
 *  11025: 0 = 6.25 to 12.5 MCLK/2 SCLK, LRCK: Audio Clk / 16
 *  22050: 1 = 12.5 to 25   MCLK/2 SCLK, LRCK: Audio Clk / 8
 *  44100: 2 = 25   to 50   MCLK   SCLK, LRCK: Audio Clk / 4 (default)
 *  88200: 3 = 50   to 100  MCLK   SCLK, LRCK: Audio Clk / 2
  Fs:    Enable WSPLL if needed (for Iriver H100 and H300 series)  Only at this case we need use WSPLL on DAC part for Iriver H100 and H300 series, because Coldfire work
       at 11289600 Hz frequency and SYSCLK of UDA1380 can only be 256fs, 384fs, 512fs and 768fs. But in this case SYSCLK
       is 128fs : 11289600 / 88200 = 128   At this case WSPLL clock and SYSCLK has same value and we don't use WSPLL to avoid WSPLL errors  Set WSPLL input frequency range or SYSCLK divider  Choose 3rd order or 5th order noise shaper  Initialize UDA1380 codec with default register values (uda1380_defaults)  this shoud never (!) happen.  Sleep a while so the power can stabilize (especially a long
       delay is needed for the line out connector).  Power on FSDAC and HP amp.  UDA1380: Unmute the master channel
       (DAC should be at zero point now).  Nice shutdown of UDA1380 codec  First enable mute and sleep a while  Then power off the rest of the chip  Disable codec    *
 * Calling this function enables the UDA1380 to send
 * sound samples over the I2S bus, which is connected
 * to the processor's IIS1 interface. 
 *
 * source_mic: true=record from microphone, false=record from line-in (or radio)
  VGA_GAIN: 0=0 dB, F=30dB  Output of left ADC is fed into right bitstream  PGA_GAIN: 0=0 dB, F=24dB * 
 * Stop sending samples on the I2S bus
 *
 * Set recording gain and volume
 * 
 * type:                params:        ranges:
 * AUDIO_GAIN_MIC:      left           -128 .. 108 -> -64 .. 54 dB gain
 * AUDIO_GAIN_LINEIN    left & right   -128 ..  96 -> -64 .. 48 dB gain
 *
 * Note: - For all types the value 0 gives 0 dB gain.
 *       - order of setting both values determines if the small glitch will
           be a peak or a dip. The small glitch is caused by the time between
           setting the two gains
  for this order we can combine both registers,
                    making the glitch even smaller * 
 * Enable or disable recording monitor (so one can listen to the recording)
 * 
  enable channel 2  mute channel 2 **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 by Andy Young
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************  The UDA1380 requires a clock signal at a multiple of the sample rate
    (256Fs, 384Fs, 512Fs or 768Fs, where Fs = sample rate).
    Some targets are able to supply this clock directly to the SYSCLK input.
    The H100 and H300 coldfire targets are limited in the selection of
    frequencies for this clock signal so they use a PLL inside the UDA1380
    (called the WSPLL) to regenerate it from the LRCK signal off the IIS bus.
 convert tenth of dB volume (-840..0) to master volume register value  1.5 dB steps  0.75 dB steps  0.5 dB steps  0.25 dB steps  convert tenth of dB volume (-780..0) to mixer volume register value  1.5 dB steps  0.75 dB steps  0.5 dB steps  0.25 dB steps  -------------------------------------------------  Local functions and variables  -------------------------------------------------  Internal control of WSPLL  Definition of a playback configuration to start with  PON_HP & PON_DAC is enabled later  00=max, 3f=mute  00=max, ff=mute  00=max, ff=mute  Bass and treble = 0 dB  Mute everything to start with  Enable mixer and 4x oversampling  Returns 0 if register was written or -1 if write failed *
 * Sets left and right master volume  (0(max) to 252(muted))
 *
 * Sets the bass value (0-12)
 *
 * Sets the treble value (0-3)
  Returns 0 if successful or -1 if some register failed  Initialize all registers *
 * Sets frequency settings for DAC and ADC relative to MCLK
 *
 * Selection for frequency ranges:
 *  Fs:        range:       with:
 *  11025: 0 = 6.25 to 12.5 MCLK/2 SCLK, LRCK: Audio Clk / 16
 *  22050: 1 = 12.5 to 25   MCLK/2 SCLK, LRCK: Audio Clk / 8
 *  44100: 2 = 25   to 50   MCLK   SCLK, LRCK: Audio Clk / 4 (default)
 *  88200: 3 = 50   to 100  MCLK   SCLK, LRCK: Audio Clk / 2
  Fs:    Enable WSPLL if needed (for Iriver H100 and H300 series)  Only at this case we need use WSPLL on DAC part for Iriver H100 and H300 series, because Coldfire work
       at 11289600 Hz frequency and SYSCLK of UDA1380 can only be 256fs, 384fs, 512fs and 768fs. But in this case SYSCLK
       is 128fs : 11289600 / 88200 = 128   At this case WSPLL clock and SYSCLK has same value and we don't use WSPLL to avoid WSPLL errors  Set WSPLL input frequency range or SYSCLK divider  Choose 3rd order or 5th order noise shaper  Initialize UDA1380 codec with default register values (uda1380_defaults)  this shoud never (!) happen.  Sleep a while so the power can stabilize (especially a long
       delay is needed for the line out connector).  Power on FSDAC and HP amp.  UDA1380: Unmute the master channel
       (DAC should be at zero point now).  Nice shutdown of UDA1380 codec  First enable mute and sleep a while  Then power off the rest of the chip  Disable codec    *
 * Calling this function enables the UDA1380 to send
 * sound samples over the I2S bus, which is connected
 * to the processor's IIS1 interface. 
 *
 * source_mic: true=record from microphone, false=record from line-in (or radio)
  VGA_GAIN: 0=0 dB, F=30dB  Output of left ADC is fed into right bitstream  PGA_GAIN: 0=0 dB, F=24dB * 
 * Stop sending samples on the I2S bus
 *
 * Set recording gain and volume
 * 
 * type:                params:        ranges:
 * AUDIO_GAIN_MIC:      left           -128 .. 108 -> -64 .. 54 dB gain
 * AUDIO_GAIN_LINEIN    left & right   -128 ..  96 -> -64 .. 48 dB gain
 *
 * Note: - For all types the value 0 gives 0 dB gain.
 *       - order of setting both values determines if the small glitch will
           be a peak or a dip. The small glitch is caused by the time between
           setting the two gains
  for this order we can combine both registers,
                    making the glitch even smaller * 
 * Enable or disable recording monitor (so one can listen to the recording)
 * 
  enable channel 2  mute channel 2 **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 by Andy Young
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************  The UDA1380 requires a clock signal at a multiple of the sample rate
    (256Fs, 384Fs, 512Fs or 768Fs, where Fs = sample rate).
    Some targets are able to supply this clock directly to the SYSCLK input.
    The H100 and H300 coldfire targets are limited in the selection of
    frequencies for this clock signal so they use a PLL inside the UDA1380
    (called the WSPLL) to regenerate it from the LRCK signal off the IIS bus.
 convert tenth of dB volume (-840..0) to master volume register value  1.5 dB steps  0.75 dB steps  0.5 dB steps  0.25 dB steps  convert tenth of dB volume (-780..0) to mixer volume register value  1.5 dB steps  0.75 dB steps  0.5 dB steps  0.25 dB steps  -------------------------------------------------  Local functions and variables  -------------------------------------------------  Internal control of WSPLL  Definition of a playback configuration to start with  PON_HP & PON_DAC is enabled later  00=max, 3f=mute  00=max, ff=mute  00=max, ff=mute  Bass and treble = 0 dB  Mute everything to start with  Enable mixer and 4x oversampling  Returns 0 if register was written or -1 if write failed *
 * Sets left and right master volume  (0(max) to 252(muted))
 *
 * Sets the bass value (0-12)
 *
 * Sets the treble value (0-3)
  Returns 0 if successful or -1 if some register failed  Initialize all registers *
 * Sets frequency settings for DAC and ADC relative to MCLK
 *
 * Selection for frequency ranges:
 *  Fs:        range:       with:
 *  11025: 0 = 6.25 to 12.5 MCLK/2 SCLK, LRCK: Audio Clk / 16
 *  22050: 1 = 12.5 to 25   MCLK/2 SCLK, LRCK: Audio Clk / 8
 *  44100: 2 = 25   to 50   MCLK   SCLK, LRCK: Audio Clk / 4 (default)
 *  88200: 3 = 50   to 100  MCLK   SCLK, LRCK: Audio Clk / 2
  Fs:    Enable WSPLL if needed (for Iriver H100 and H300 series)  Only at this case we need use WSPLL on DAC part for Iriver H100 and H300 series, because Coldfire work
       at 11289600 Hz frequency and SYSCLK of UDA1380 can only be 256fs, 384fs, 512fs and 768fs. But in this case SYSCLK
       is 128fs : 11289600 / 88200 = 128   At this case WSPLL clock and SYSCLK has same value and we don't use WSPLL to avoid WSPLL errors  Set WSPLL input frequency range or SYSCLK divider  Choose 3rd order or 5th order noise shaper  Initialize UDA1380 codec with default register values (uda1380_defaults)  this shoud never (!) happen.  Sleep a while so the power can stabilize (especially a long
       delay is needed for the line out connector).  Power on FSDAC and HP amp.  UDA1380: Unmute the master channel
       (DAC should be at zero point now).  Nice shutdown of UDA1380 codec  First enable mute and sleep a while  Then power off the rest of the chip  Disable codec    *
 * Calling this function enables the UDA1380 to send
 * sound samples over the I2S bus, which is connected
 * to the processor's IIS1 interface. 
 *
 * source_mic: true=record from microphone, false=record from line-in (or radio)
  VGA_GAIN: 0=0 dB, F=30dB  Output of left ADC is fed into right bitstream  PGA_GAIN: 0=0 dB, F=24dB * 
 * Stop sending samples on the I2S bus
 *
 * Set recording gain and volume
 * 
 * type:                params:        ranges:
 * AUDIO_GAIN_MIC:      left           -128 .. 108 -> -64 .. 54 dB gain
 * AUDIO_GAIN_LINEIN    left & right   -128 ..  96 -> -64 .. 48 dB gain
 *
 * Note: - For all types the value 0 gives 0 dB gain.
 *       - order of setting both values determines if the small glitch will
           be a peak or a dip. The small glitch is caused by the time between
           setting the two gains
  for this order we can combine both registers,
                    making the glitch even smaller * 
 * Enable or disable recording monitor (so one can listen to the recording)
 * 
  enable channel 2  mute channel 2 