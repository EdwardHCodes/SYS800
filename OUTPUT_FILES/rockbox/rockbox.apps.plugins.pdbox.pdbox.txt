**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2009, 2010 Wincent Balin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Welcome to the PDBox plugin  Name of the file to open.  Running time.  Variables for Pure Data.  References for scheduler variables and functions.  LATER consider making this variable.  It's now the LCM of all sample
rates we expect to see: 32000, 44100, 48000, 88200, 96000.  Quit flag.  Stack sizes for threads.  Thread stacks.  Thread IDs.  GUI thread  Initialize GUI.  Load PD patch.  Draw initial state of UI.  GUI loop  Reset update flag.  Apply timer to widgets.  Process buttons.  Receive and parse datagrams.  If there is something to update in GUI, do so.  Core thread  Add the directory the called .pd file resides in to lib directories.  Open the PD design file.  Fake a GUI start.  Core scheduler loop  Receive datagrams.  Use sys_send_dacs() function as timer.  Plug-in entry point  Memory pool variables.  Get the file name; check whether parameter contains no file name.  Initialize memory pool.  Initialize net.  Initialize Pure Data, as does sys_main in s_main.c  Set audio API.  Initialize audio subsystem.  No sound input yet  No sound input yet  One sound output device  Use the default amount (2) of channels  Sample rate  Scheduler advance  Enable  Initialize scheduler time variables.  Create stacks for threads.  Boost CPU.  Start threads.  FIXME Which flags?  FIXME Which flags?  If having an error creating threads, bail out.  Make backlight remain on -- making music requires attention.  Main loop.  Add time slice in milliseconds.  Sleep to the next time slice.  Restore backlight.  Wait for threads to complete.  Unboost CPU.  Close audio subsystem.  Destroy net.  Clear memory pool. **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2009, 2010 Wincent Balin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Welcome to the PDBox plugin  Name of the file to open.  Running time.  Variables for Pure Data.  References for scheduler variables and functions.  LATER consider making this variable.  It's now the LCM of all sample
rates we expect to see: 32000, 44100, 48000, 88200, 96000.  Quit flag.  Stack sizes for threads.  Thread stacks.  Thread IDs.  GUI thread  Initialize GUI.  Load PD patch.  Draw initial state of UI.  GUI loop  Reset update flag.  Apply timer to widgets.  Process buttons.  Receive and parse datagrams.  If there is something to update in GUI, do so.  Core thread  Add the directory the called .pd file resides in to lib directories.  Open the PD design file.  Fake a GUI start.  Core scheduler loop  Receive datagrams.  Use sys_send_dacs() function as timer.  Plug-in entry point  Memory pool variables.  Get the file name; check whether parameter contains no file name.  Initialize memory pool.  Initialize net.  Initialize Pure Data, as does sys_main in s_main.c  Set audio API.  Initialize audio subsystem.  No sound input yet  No sound input yet  One sound output device  Use the default amount (2) of channels  Sample rate  Scheduler advance  Enable  Initialize scheduler time variables.  Create stacks for threads.  Boost CPU.  Start threads.  FIXME Which flags?  FIXME Which flags?  If having an error creating threads, bail out.  Make backlight remain on -- making music requires attention.  Main loop.  Add time slice in milliseconds.  Sleep to the next time slice.  Restore backlight.  Wait for threads to complete.  Unboost CPU.  Close audio subsystem.  Destroy net.  Clear memory pool. **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2009, 2010 Wincent Balin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Welcome to the PDBox plugin  Name of the file to open.  Running time.  Variables for Pure Data.  References for scheduler variables and functions.  LATER consider making this variable.  It's now the LCM of all sample
rates we expect to see: 32000, 44100, 48000, 88200, 96000.  Quit flag.  Stack sizes for threads.  Thread stacks.  Thread IDs.  GUI thread  Initialize GUI.  Load PD patch.  Draw initial state of UI.  GUI loop  Reset update flag.  Apply timer to widgets.  Process buttons.  Receive and parse datagrams.  If there is something to update in GUI, do so.  Core thread  Add the directory the called .pd file resides in to lib directories.  Open the PD design file.  Fake a GUI start.  Core scheduler loop  Receive datagrams.  Use sys_send_dacs() function as timer.  Plug-in entry point  Memory pool variables.  Get the file name; check whether parameter contains no file name.  Initialize memory pool.  Initialize net.  Initialize Pure Data, as does sys_main in s_main.c  Set audio API.  Initialize audio subsystem.  No sound input yet  No sound input yet  One sound output device  Use the default amount (2) of channels  Sample rate  Scheduler advance  Enable  Initialize scheduler time variables.  Create stacks for threads.  Boost CPU.  Start threads.  FIXME Which flags?  FIXME Which flags?  If having an error creating threads, bail out.  Make backlight remain on -- making music requires attention.  Main loop.  Add time slice in milliseconds.  Sleep to the next time slice.  Restore backlight.  Wait for threads to complete.  Unboost CPU.  Close audio subsystem.  Destroy net.  Clear memory pool. 