**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** SSI2 shared with SDMA core  The pcm locking relies on the fact the interrupt handlers run to completion
 * before lower-priority modes proceed. We don't have to touch hardware
 * registers. Disabling SDMA interrupt would disable DMA callbacks systemwide
 * and that is not something that is desireable.
 *
 * Lock explanation [++.locked]:
 * Trivial, just increment .locked.
 *
 * Unlock explanation [if (--.locked == 0 && .state != 0)]:
 * If int occurred and saw .locked as nonzero, we'll get a pending
 * and it will have taken no action other than to set the flag to the
 * value of .state. If it saw zero for .locked, it will have proceeded
 * normally into the pcm callbacks. If cb set the pending flag, it has
 * to be called to kickstart the callback mechanism and DMA. If the unlock
 * came after a stop, we won't be in the block and DMA will be off. If
 * we're still doing transfers, cb will see 0 for .locked and if pending,
 * it won't be called by DMA again.  DMA interrupt happened while locked  Initialize to an unlocked, stopped state  Callback is locked out  Inform of status and get new buffer  Init DMA channel information  Init audio interfaces  Stop transmission (if in progress)  Enable SSI  Enable TX FIFO  Check callback on unlock  Do prefill to prevent swapped channels (see TLSbo61214 in MCIMX31CE).
     * No actual solution was offered but this appears to work.  Enable DMA req.  Start transmitting  Disable DMA req.  Set state before pending to prevent race with interrupt  Wait for FIFO to empty  Disable TX  Disable transmission, SSI  Stopping: clear buffer info to ensure 0-size readbacks when
         * stopped  Clear any pending callback  Disable transmission  Begin I2S transmission  Begin DMA transfer  Return the number of bytes waiting - full L-R sample pairs only  read burst dma source address register in channel context  Be addresses are coherent (no buffer change during read)  Return a pointer to the samples and the number of them in *count  read burst dma source address register in channel context  Be addresses are coherent (no buffer change during read)  Initialize to an unlocked, stopped state  Callback is locked out  Inform middle layer  Disable DMA req.  Set state before pending to prevent race with interrupt  Stop receiving data  Disable RX  Disable RX FIFO  Stopping: clear buffer info to ensure 0-size readbacks when
         * stopped  Clear any pending callback  Enable RX FIFO  Ensure clear FIFO  Enable receive  Enable DMA req.  Begin DMA transfer  Check callback on unlock  Init channel information  read burst dma destination address register in channel context  Be addresses are coherent (no buffer change during read)  HAVE_RECORDING **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** SSI2 shared with SDMA core  The pcm locking relies on the fact the interrupt handlers run to completion
 * before lower-priority modes proceed. We don't have to touch hardware
 * registers. Disabling SDMA interrupt would disable DMA callbacks systemwide
 * and that is not something that is desireable.
 *
 * Lock explanation [++.locked]:
 * Trivial, just increment .locked.
 *
 * Unlock explanation [if (--.locked == 0 && .state != 0)]:
 * If int occurred and saw .locked as nonzero, we'll get a pending
 * and it will have taken no action other than to set the flag to the
 * value of .state. If it saw zero for .locked, it will have proceeded
 * normally into the pcm callbacks. If cb set the pending flag, it has
 * to be called to kickstart the callback mechanism and DMA. If the unlock
 * came after a stop, we won't be in the block and DMA will be off. If
 * we're still doing transfers, cb will see 0 for .locked and if pending,
 * it won't be called by DMA again.  DMA interrupt happened while locked  Initialize to an unlocked, stopped state  Callback is locked out  Inform of status and get new buffer  Init DMA channel information  Init audio interfaces  Stop transmission (if in progress)  Enable SSI  Enable TX FIFO  Check callback on unlock  Do prefill to prevent swapped channels (see TLSbo61214 in MCIMX31CE).
     * No actual solution was offered but this appears to work.  Enable DMA req.  Start transmitting  Disable DMA req.  Set state before pending to prevent race with interrupt  Wait for FIFO to empty  Disable TX  Disable transmission, SSI  Stopping: clear buffer info to ensure 0-size readbacks when
         * stopped  Clear any pending callback  Disable transmission  Begin I2S transmission  Begin DMA transfer  Return the number of bytes waiting - full L-R sample pairs only  read burst dma source address register in channel context  Be addresses are coherent (no buffer change during read)  Return a pointer to the samples and the number of them in *count  read burst dma source address register in channel context  Be addresses are coherent (no buffer change during read)  Initialize to an unlocked, stopped state  Callback is locked out  Inform middle layer  Disable DMA req.  Set state before pending to prevent race with interrupt  Stop receiving data  Disable RX  Disable RX FIFO  Stopping: clear buffer info to ensure 0-size readbacks when
         * stopped  Clear any pending callback  Enable RX FIFO  Ensure clear FIFO  Enable receive  Enable DMA req.  Begin DMA transfer  Check callback on unlock  Init channel information  read burst dma destination address register in channel context  Be addresses are coherent (no buffer change during read)  HAVE_RECORDING **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** SSI2 shared with SDMA core  The pcm locking relies on the fact the interrupt handlers run to completion
 * before lower-priority modes proceed. We don't have to touch hardware
 * registers. Disabling SDMA interrupt would disable DMA callbacks systemwide
 * and that is not something that is desireable.
 *
 * Lock explanation [++.locked]:
 * Trivial, just increment .locked.
 *
 * Unlock explanation [if (--.locked == 0 && .state != 0)]:
 * If int occurred and saw .locked as nonzero, we'll get a pending
 * and it will have taken no action other than to set the flag to the
 * value of .state. If it saw zero for .locked, it will have proceeded
 * normally into the pcm callbacks. If cb set the pending flag, it has
 * to be called to kickstart the callback mechanism and DMA. If the unlock
 * came after a stop, we won't be in the block and DMA will be off. If
 * we're still doing transfers, cb will see 0 for .locked and if pending,
 * it won't be called by DMA again.  DMA interrupt happened while locked  Initialize to an unlocked, stopped state  Callback is locked out  Inform of status and get new buffer  Init DMA channel information  Init audio interfaces  Stop transmission (if in progress)  Enable SSI  Enable TX FIFO  Check callback on unlock  Do prefill to prevent swapped channels (see TLSbo61214 in MCIMX31CE).
     * No actual solution was offered but this appears to work.  Enable DMA req.  Start transmitting  Disable DMA req.  Set state before pending to prevent race with interrupt  Wait for FIFO to empty  Disable TX  Disable transmission, SSI  Stopping: clear buffer info to ensure 0-size readbacks when
         * stopped  Clear any pending callback  Disable transmission  Begin I2S transmission  Begin DMA transfer  Return the number of bytes waiting - full L-R sample pairs only  read burst dma source address register in channel context  Be addresses are coherent (no buffer change during read)  Return a pointer to the samples and the number of them in *count  read burst dma source address register in channel context  Be addresses are coherent (no buffer change during read)  Initialize to an unlocked, stopped state  Callback is locked out  Inform middle layer  Disable DMA req.  Set state before pending to prevent race with interrupt  Stop receiving data  Disable RX  Disable RX FIFO  Stopping: clear buffer info to ensure 0-size readbacks when
         * stopped  Clear any pending callback  Enable RX FIFO  Ensure clear FIFO  Enable receive  Enable DMA req.  Begin DMA transfer  Check callback on unlock  Init channel information  read burst dma destination address register in channel context  Be addresses are coherent (no buffer change during read)  HAVE_RECORDING 