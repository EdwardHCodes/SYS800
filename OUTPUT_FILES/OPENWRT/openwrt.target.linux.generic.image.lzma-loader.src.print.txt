
 * Copyright (C) 2001 MontaVista Software Inc.
 * Author: Jun Sun, jsun@mvista.com or jsun@junsun.net
 *
 * This program is free software; you can redistribute  it and/or modify it
 * under  the terms of  the GNU General  Public License as published by the
 * Free Software Foundation;  either version 2 of the  License, or (at your
 * option) any later version.
 *
  macros  forward declaration  private variable  -*-
 * A low level printf() function.
  scan for the next '%'  flush the string found so far  are we hitting the end?  we found a '%'  check for long  check for other prefixes  check format flag  output this char as it is  switch (*fmt)  for(;;)  special termination call  --------------- local help functions ---------------------  algorithm :
     *  1. prints the number from left to right in reverse form.
     *  2. fill the remaining spaces with padc if length is longer than
     *     the actual length
     *     TRICKY : if left adjusted, no "0" padding.
     *		    if negtive, insert  "0" padding between "0" and number.
     *  3. if (!ladjust) we reverse the whole string including paddings
     *  4. otherwise we only reverse the actual string representing the num.
      figure out actual length and adjust the maximum length  add padding  prepare to reverse the string  adjust the string pointer 
 * Copyright (C) 2001 MontaVista Software Inc.
 * Author: Jun Sun, jsun@mvista.com or jsun@junsun.net
 *
 * This program is free software; you can redistribute  it and/or modify it
 * under  the terms of  the GNU General  Public License as published by the
 * Free Software Foundation;  either version 2 of the  License, or (at your
 * option) any later version.
 *
  macros  forward declaration  private variable  -*-
 * A low level printf() function.
  scan for the next '%'  flush the string found so far  are we hitting the end?  we found a '%'  check for long  check for other prefixes  check format flag  output this char as it is  switch (*fmt)  for(;;)  special termination call  --------------- local help functions ---------------------  algorithm :
     *  1. prints the number from left to right in reverse form.
     *  2. fill the remaining spaces with padc if length is longer than
     *     the actual length
     *     TRICKY : if left adjusted, no "0" padding.
     *		    if negtive, insert  "0" padding between "0" and number.
     *  3. if (!ladjust) we reverse the whole string including paddings
     *  4. otherwise we only reverse the actual string representing the num.
      figure out actual length and adjust the maximum length  add padding  prepare to reverse the string  adjust the string pointer 
 * Copyright (C) 2001 MontaVista Software Inc.
 * Author: Jun Sun, jsun@mvista.com or jsun@junsun.net
 *
 * This program is free software; you can redistribute  it and/or modify it
 * under  the terms of  the GNU General  Public License as published by the
 * Free Software Foundation;  either version 2 of the  License, or (at your
 * option) any later version.
 *
  macros  forward declaration  private variable  -*-
 * A low level printf() function.
  scan for the next '%'  flush the string found so far  are we hitting the end?  we found a '%'  check for long  check for other prefixes  check format flag  output this char as it is  switch (*fmt)  for(;;)  special termination call  --------------- local help functions ---------------------  algorithm :
     *  1. prints the number from left to right in reverse form.
     *  2. fill the remaining spaces with padc if length is longer than
     *     the actual length
     *     TRICKY : if left adjusted, no "0" padding.
     *		    if negtive, insert  "0" padding between "0" and number.
     *  3. if (!ladjust) we reverse the whole string including paddings
     *  4. otherwise we only reverse the actual string representing the num.
      figure out actual length and adjust the maximum length  add padding  prepare to reverse the string  adjust the string pointer 