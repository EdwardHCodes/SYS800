******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * @author Jeff Plourde
 *
         heightProperty().addListener(listener);        widthProperty().addListener(listener); Image we use to create a blur effect This is wasteful in memory space, but this image will render much better via drawImage on mac retina displays Build a compositing buffer if necessary (reset when camera or size changes) We must drive these state transitions regardless of the camera state Somebody called setWebcam, let's accept it No currently selected webcam Nothing to do! There's been a resize                repaint(); cam holds references to these dimensions Get the camera open Image from the camera Straight to frozen; no pass through Freezing Finish First pass in freezing state, build a graphics to use for compositing *after* a baseline image copied Add to the composite                renderCameraGraphics.drawImage(bufferedCameraImage, 0, 0, this);            bufferedCameraImage = grabFrame();        repaint();    private final Dimension paintSize = new Dimension();    @Override    protected void paintComponent(Graphics g) {        super.paintComponent(g);        getSize(paintSize);        BufferedImage imageToPaint = null;        switch (stateMachine.getState()) {        case Freezing:        case Thawing:        case Frozen:            imageToPaint = renderCameraImage;            break;        case Thawed:        default:            imageToPaint = bufferedCameraImage;            break;        }        if (paintSize.width > 0 && paintSize.height > 0) {            if (null != imageToPaint && imageToPaint.getWidth() > 0 && imageToPaint.getHeight() > 0) {                g.drawImage(imageToPaint, (paintSize.width - imageToPaint.getWidth()) / 2, (paintSize.height - imageToPaint.getHeight()) / 2, this);            } else {                Color c = g.getColor();                g.setColor(Color.gray);                g.fillRect(0, 0, paintSize.width, paintSize.height);                g.setColor(c);            }        }    }