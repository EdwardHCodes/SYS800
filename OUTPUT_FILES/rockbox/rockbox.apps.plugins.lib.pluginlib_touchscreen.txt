**************************************************************************
*             __________               __   ___.
*   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
*   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
*   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
*   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
*                     \/            \/     \/    \/            \/
* $Id$
*
* Copyright (C) 2008 by Maurus Cuelenaere
* Copyright (C) 2009 by Karl Kurbjun
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
* KIND, either express or implied.
*
*********************************************************************************************************************************************************
 * Touchbutton functions: These functions allow the plugin to specify a button
 *  location that, in turn gets mapped to a button press return value.
 ***************************************************************************** touchbutton_check_button:
 *  This function checks the touchbutton structure passed to it for hits.  When
 *  one is found it returns action. It doesn't block because it doesn't actually
 *  call button_get. You need to call it before and pass its result.
 *  inputs:
 *      struct touchbutton *data: This is intended to be an array of
 *          touchbuttons of size num_buttons.  Each element in the array defines
 *          one button.
 *      int button: This is the button return value from a button_get() call.
 *          It is used to determine REPEAT/RELEASE events. This way
 *          this function can be mixed with other buttons
 *      int num_buttons: This tells touchbutton_get how many elements are in
 *          data.
 *  return:
 *      If a touch occured over one of the defined buttons, return action, else
 *          return 0.
  Get the x/y location of the button press, this is set by button_get when
     *  a button is pulled from the queue.
      Loop over the data array to check if any of the buttons were pressed  See if the point is inside the button viewport  touchbutton_get_w_tmo:
 *  This function checks the touchbutton structure passed to it for hits.  When
 *  one is found it returns the corresponding action.
 *  inputs:
 *      struct touchbutton *data: This is intended to be an array of
 *          touchbuttons of size num_buttons.  Each element in the array defines
 *          one button.
 *      int tmo: Timeout when waiting for input.
 *      int num_buttons: This tells touchbutton_get how many elements are in
 *          data.
 *  return:
 *      If a touch occured over one of the defined buttons, return action, else
 *          return 0.
  touchbutton_get:
 *  This function checks the touchbutton structure passed to it for hits.  When
 *  one is found it returns the corresponding action.
 *  inputs:
 *      struct touchbutton *data: This is intended to be an array of
 *          touchbuttons of size num_buttons.  Each element in the array defines
 *          one button.
 *      int num_buttons: This tells touchbutton_get how many elements are in
 *          data.
 *  return:
 *      If a touch occured over one of the defined buttons, return action, else
 *          return 0.
  touchbutton_draw: 
 *  This function draws the button with the associated text as long as the
 *      invisible flag is not set.  Support for pixmaps needs to be added.
 *  inputs:
 *      struct touchbutton *data: This is intended to be an array of
 *          touchbuttons of size num_buttons.  Each element in the array defines
 *          one button.
 *      int num_buttons: This tells touchbutton_get how many elements are in
 *          data.
 *  return:
 *      If a touch occured over one of the defined buttons, return action, else
 *          return 0.
  Loop over all the elements in data  Is this a visible button?  Set the current viewport to the button so that all drawing
             *  operations are within the button location.
              TODO: Center text vert If the width offset was 0, use a scrolling puts, else center and
             *  print the title.
              Draw bounding box around the button location.  Go back to the default viewport ******************************************************************************
 * Touchmap functions: Not sure how exactly these functions are used, comments
 *  needed!!!
 ***************************************************************************** pen hit a raster boundary **************************************************************************
*             __________               __   ___.
*   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
*   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
*   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
*   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
*                     \/            \/     \/    \/            \/
* $Id$
*
* Copyright (C) 2008 by Maurus Cuelenaere
* Copyright (C) 2009 by Karl Kurbjun
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
* KIND, either express or implied.
*
*********************************************************************************************************************************************************
 * Touchbutton functions: These functions allow the plugin to specify a button
 *  location that, in turn gets mapped to a button press return value.
 ***************************************************************************** touchbutton_check_button:
 *  This function checks the touchbutton structure passed to it for hits.  When
 *  one is found it returns action. It doesn't block because it doesn't actually
 *  call button_get. You need to call it before and pass its result.
 *  inputs:
 *      struct touchbutton *data: This is intended to be an array of
 *          touchbuttons of size num_buttons.  Each element in the array defines
 *          one button.
 *      int button: This is the button return value from a button_get() call.
 *          It is used to determine REPEAT/RELEASE events. This way
 *          this function can be mixed with other buttons
 *      int num_buttons: This tells touchbutton_get how many elements are in
 *          data.
 *  return:
 *      If a touch occured over one of the defined buttons, return action, else
 *          return 0.
  Get the x/y location of the button press, this is set by button_get when
     *  a button is pulled from the queue.
      Loop over the data array to check if any of the buttons were pressed  See if the point is inside the button viewport  touchbutton_get_w_tmo:
 *  This function checks the touchbutton structure passed to it for hits.  When
 *  one is found it returns the corresponding action.
 *  inputs:
 *      struct touchbutton *data: This is intended to be an array of
 *          touchbuttons of size num_buttons.  Each element in the array defines
 *          one button.
 *      int tmo: Timeout when waiting for input.
 *      int num_buttons: This tells touchbutton_get how many elements are in
 *          data.
 *  return:
 *      If a touch occured over one of the defined buttons, return action, else
 *          return 0.
  touchbutton_get:
 *  This function checks the touchbutton structure passed to it for hits.  When
 *  one is found it returns the corresponding action.
 *  inputs:
 *      struct touchbutton *data: This is intended to be an array of
 *          touchbuttons of size num_buttons.  Each element in the array defines
 *          one button.
 *      int num_buttons: This tells touchbutton_get how many elements are in
 *          data.
 *  return:
 *      If a touch occured over one of the defined buttons, return action, else
 *          return 0.
  touchbutton_draw: 
 *  This function draws the button with the associated text as long as the
 *      invisible flag is not set.  Support for pixmaps needs to be added.
 *  inputs:
 *      struct touchbutton *data: This is intended to be an array of
 *          touchbuttons of size num_buttons.  Each element in the array defines
 *          one button.
 *      int num_buttons: This tells touchbutton_get how many elements are in
 *          data.
 *  return:
 *      If a touch occured over one of the defined buttons, return action, else
 *          return 0.
  Loop over all the elements in data  Is this a visible button?  Set the current viewport to the button so that all drawing
             *  operations are within the button location.
              TODO: Center text vert If the width offset was 0, use a scrolling puts, else center and
             *  print the title.
              Draw bounding box around the button location.  Go back to the default viewport ******************************************************************************
 * Touchmap functions: Not sure how exactly these functions are used, comments
 *  needed!!!
 ***************************************************************************** pen hit a raster boundary **************************************************************************
*             __________               __   ___.
*   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
*   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
*   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
*   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
*                     \/            \/     \/    \/            \/
* $Id$
*
* Copyright (C) 2008 by Maurus Cuelenaere
* Copyright (C) 2009 by Karl Kurbjun
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
* KIND, either express or implied.
*
*********************************************************************************************************************************************************
 * Touchbutton functions: These functions allow the plugin to specify a button
 *  location that, in turn gets mapped to a button press return value.
 ***************************************************************************** touchbutton_check_button:
 *  This function checks the touchbutton structure passed to it for hits.  When
 *  one is found it returns action. It doesn't block because it doesn't actually
 *  call button_get. You need to call it before and pass its result.
 *  inputs:
 *      struct touchbutton *data: This is intended to be an array of
 *          touchbuttons of size num_buttons.  Each element in the array defines
 *          one button.
 *      int button: This is the button return value from a button_get() call.
 *          It is used to determine REPEAT/RELEASE events. This way
 *          this function can be mixed with other buttons
 *      int num_buttons: This tells touchbutton_get how many elements are in
 *          data.
 *  return:
 *      If a touch occured over one of the defined buttons, return action, else
 *          return 0.
  Get the x/y location of the button press, this is set by button_get when
     *  a button is pulled from the queue.
      Loop over the data array to check if any of the buttons were pressed  See if the point is inside the button viewport  touchbutton_get_w_tmo:
 *  This function checks the touchbutton structure passed to it for hits.  When
 *  one is found it returns the corresponding action.
 *  inputs:
 *      struct touchbutton *data: This is intended to be an array of
 *          touchbuttons of size num_buttons.  Each element in the array defines
 *          one button.
 *      int tmo: Timeout when waiting for input.
 *      int num_buttons: This tells touchbutton_get how many elements are in
 *          data.
 *  return:
 *      If a touch occured over one of the defined buttons, return action, else
 *          return 0.
  touchbutton_get:
 *  This function checks the touchbutton structure passed to it for hits.  When
 *  one is found it returns the corresponding action.
 *  inputs:
 *      struct touchbutton *data: This is intended to be an array of
 *          touchbuttons of size num_buttons.  Each element in the array defines
 *          one button.
 *      int num_buttons: This tells touchbutton_get how many elements are in
 *          data.
 *  return:
 *      If a touch occured over one of the defined buttons, return action, else
 *          return 0.
  touchbutton_draw: 
 *  This function draws the button with the associated text as long as the
 *      invisible flag is not set.  Support for pixmaps needs to be added.
 *  inputs:
 *      struct touchbutton *data: This is intended to be an array of
 *          touchbuttons of size num_buttons.  Each element in the array defines
 *          one button.
 *      int num_buttons: This tells touchbutton_get how many elements are in
 *          data.
 *  return:
 *      If a touch occured over one of the defined buttons, return action, else
 *          return 0.
  Loop over all the elements in data  Is this a visible button?  Set the current viewport to the button so that all drawing
             *  operations are within the button location.
              TODO: Center text vert If the width offset was 0, use a scrolling puts, else center and
             *  print the title.
              Draw bounding box around the button location.  Go back to the default viewport ******************************************************************************
 * Touchmap functions: Not sure how exactly these functions are used, comments
 *  needed!!!
 ***************************************************************************** pen hit a raster boundary 