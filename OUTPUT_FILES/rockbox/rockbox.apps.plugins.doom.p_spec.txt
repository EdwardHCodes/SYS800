 Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *   -Loads and initializes texture and flat animation sequences
 *   -Implements utility functions for all linedef/sector special handlers
 *   -Dispatches walkover and gun line triggers
 *   -Initializes and implements special sector types
 *   -Implements donut linedef triggers
 *   -Initializes and implements BOOM linedef triggers for
 *     Scrollers/Conveyors
 *     Friction
 *     Wind/Current
 *
 *----------------------------------------------------------------------------- phares 3/20/98 Animating textures and planes There is another anim_t used in wi_stuff, unrelated.      source animation definition proff: This is the same as __attribute__ ((packed)) in GNUC_MSC_VERjff 3/23/98 make char for comparison // cph - make signed  if false, it is a flatjff 3/23/98 pack to read from memory no longer a strict limit -- killough new structure w/o limits -- killough killough 3/7/98: Initialize generalized scrolling phares 3/16/98 phares 3/20/98 phares 3/20/98 P_InitPicAnims Load the table of animation definitions, checking for existence of the start and end of each frame. If the start doesn't exist the sequence is skipped, if the last doesn't exist, BOOM exits. Wall/Flat animation sequences, defined by name of first and last frame, The full animation sequence is given using all lumps between the start and end entry, in the order found in the WAD file. This routine modified to read its data from a predefined lump or PWAD lump called ANIMATED rather than a static table in this module to allow wad designers to insert or modify animation sequences. Lump format is an array of byte packed animdef_t structures, terminated by a structure with istexture == -1. The lump can be generated from a text source file using SWANTBLS.EXE, distributed with the BOOM utils. The standard list of switches and animations is contained in the example source text file DEFSWANI.DAT also in the BOOM util distribution.jff 3/23/98 pointer to animation lump cph - new wad lump handling  Init animationjff 3/23/98 read from predefined or wad lump instead of table 1/11/98 killough -- removed limit by array-doubling killough different episode ? killough 4/17/98 killough 5/5/98: add LONG()///////////////////////////////////////////////////////////// Linedef and Sector Special Implementation Utility Functions///////////////////////////////////////////////////////////// getSide() Will return a side_t*  given the number of the current sector,  the line number, and the side (0/1) that you want. Note: if side=1 is specified, it must exist or results undefined getSector() Will return a sector_t*  given the number of the current sector,  the line number and the side (0/1) that you want. Note: if side=1 is specified, it must exist or results undefined twoSided() Given the sector number and the line number,  it will tell you whether the line is two-sided or not. modified to return actual two-sidedness rather than presence of 2S flag unless compatibility optionedjff 1/26/98 return what is actually needed, whether the linehas two sidedefs, rather than whether the 2S flag is set getNextSector() Return sector_t * of sector next to current across line. Note: returns NULL if not two-sided line, or both sides refer to sectorjff 1/26/98 check unneeded since line->backsector alreadyreturns NULL if the line is not two sided, and does so fromthe actual two-sidedness of the line, rather than its 2S flagjff 5/3/98 don't retn sec unless compatibility fixes an intra-sector line breaking functions like floor->highest floor P_FindLowestFloorSurrounding() Returns the fixed point value of the lowest floor height in the sector passed or its surrounding sectors. P_FindHighestFloorSurrounding() Passed a sector, returns the fixed point value of the largest floor height in the surrounding sectors, not including that passed NOTE: if no surrounding sector exists -32000*FRACUINT is returned       if compatibility then -500*FRACUNIT is the smallest return possiblejff 1/26/98 Fix initial value for floor to not act differentlyin sections of wad that are below -500 units jff 3/12/98 avoid ovf  in height calculations P_FindNextHighestFloor() Passed a sector and a floor height, returns the fixed point value of the smallest floor height in a surrounding sector larger than the floor height passed. If no such height exists the floorheight passed is returned. Rewritten by Lee Killough to avoid fixed array and to be faster P_FindNextLowestFloor() Passed a sector and a floor height, returns the fixed point value of the largest floor height in a surrounding sector smaller than the floor height passed. If no such height exists the floorheight passed is returned. jff 02/03/98 Twiddled Lee's P_FindNextHighestFloor to make this P_FindNextLowestCeiling() Passed a sector and a ceiling height, returns the fixed point value of the largest ceiling height in a surrounding sector smaller than the ceiling height passed. If no such height exists the ceiling height passed is returned. jff 02/03/98 Twiddled Lee's P_FindNextHighestFloor to make this P_FindNextHighestCeiling() Passed a sector and a ceiling height, returns the fixed point value of the smallest ceiling height in a surrounding sector larger than the ceiling height passed. If no such height exists the ceiling height passed is returned. jff 02/03/98 Twiddled Lee's P_FindNextHighestFloor to make this P_FindLowestCeilingSurrounding() Passed a sector, returns the fixed point value of the smallest ceiling height in the surrounding sectors, not including that passed NOTE: if no surrounding sector exists 32000*FRACUINT is returned       but if compatibility then INT_MAX is the return jff 3/12/98 avoid ovf in height calculations  P_FindHighestCeilingSurrounding() Passed a sector, returns the fixed point value of the largest ceiling height in the surrounding sectors, not including that passed NOTE: if no surrounding sector exists -32000*FRACUINT is returned       but if compatibility then 0 is the smallest return possible jff 1/26/98 Fix initial value for floor to not act differently
    * in sections of wad that are below 0 units
    * jff 3/12/98 avoid ovf in height calculations  P_FindShortestTextureAround() Passed a sector number, returns the shortest lower texture on a linedef bounding the sector. Note: If no lower texture exists 32000*FRACUNIT is returned.       but if compatibility then INT_MAX is returned jff 02/03/98 Add routine to find shortest lower texturejff 3/13/98 prevent overflow in height calcsjff 8/14/98 texture 0 is a placeholderjff 8/14/98 texture 0 is a placeholder P_FindShortestUpperAround() Passed a sector number, returns the shortest upper texture on a linedef bounding the sector. Note: If no upper texture exists 32000*FRACUNIT is returned.       but if compatibility then INT_MAX is returned jff 03/20/98 Add routine to find shortest upper texturejff 3/13/98 prevent overflow in height calcsjff 8/14/98 texture 0 is a placeholderjff 8/14/98 texture 0 is a placeholder P_FindModelFloorSector() Passed a floor height and a sector number, return a pointer to a a sector with that floor height across the lowest numbered two sided line surrounding the sector. Note: If no sector at that height bounds the sector passed, return NULL jff 02/03/98 Add routine to find numeric model floor  around a sector specified by sector number jff 3/14/98 change first parameter to plain height to allow call  from routine not using floormove_tjff 3/2/98 woops! better do thisjff 5/23/98 don't disturb sec->linecount while searching but allow early exit in old demos P_FindModelCeilingSector() Passed a ceiling height and a sector number, return a pointer to a a sector with that ceiling height across the lowest numbered two sided line surrounding the sector. Note: If no sector at that height bounds the sector passed, return NULL jff 02/03/98 Add routine to find numeric model ceiling  around a sector specified by sector number  used only from generalized ceiling types jff 3/14/98 change first parameter to plain height to allow call  from routine not using ceiling_tjff 3/2/98 woops! better do thisjff 5/23/98 don't disturb sec->linecount while searching but allow early exit in old demos RETURN NEXT SECTOR # THAT LINE TAG REFERS TO Find the next sector with the same tag as a linedef. Rewritten by Lee Killough to use chained hashing to improve speed killough 4/16/98: Same thing, only for linedefs Hash the sector tags across the sectors and linedefs. Initially make all slots empty. Proceed from last to first sector so that lower sectors appear first Hash func Prepend sector to chain killough 4/17/98: same thing, only for linedefs Initially make all slots empty. Proceed from last to first linedef so that lower linedefs appear first Hash func Prepend linedef to chain P_FindMinSurroundingLight() Passed a sector and a light level, returns the smallest light level in a surrounding sector less than that passed. If no smaller light level exists, the light level passed is returned. P_CanUnlockGenDoor() Passed a generalized locked door linedef and a player, returns whether the player has the keys necessary to unlock that door. Note: The linedef passed MUST be a generalized locked door type       or results are undefined. jff 02/05/98 routine added to test for unlockability of  generalized locked doors does this line special distinguish between skulls and keys? determine for each case of lock type if player's keys are adequate Ty 03/27/98 - externalized killough 3/20/98 Ty 03/27/98 - externalized killough 3/20/98 Ty 03/27/98 - externalized killough 3/20/98 Ty 03/27/98 - externalized killough 3/20/98 Ty 03/27/98 - externalized killough 3/20/98 Ty 03/27/98 - externalized killough 3/20/98 Ty 03/27/98 - externalized killough 3/20/98 Ty 03/27/98 - externalized killough 3/20/98 Ty 03/27/98 - externalized killough 3/20/98 P_SectorActive() Passed a linedef special class (floor, ceiling, lighting) and a sector returns whether the sector is already busy with a linedef special of the same class. If old demo compatibility true, all linedef special classes are the same. jff 2/23/98 added to prevent old demos from  succeeding in starting multiple specials on one sector return whether any thinker is active return whether thinker of same type is active don't know which special, must be active, shouldn't be here P_CheckTag() Passed a line, returns true if the tag is non-zero or the line special allows no tag without harm. If compatibility, all linedef specials are allowed to have zero tag. Note: Only line specials activated by walkover, pushing, or shooting are       checked by this routine. jff 2/27/98 Added to check for zero tag allowed for regular special types tag not zero, allowed, or
    * killough 11/98: compatibility option  Manual door specials Lighting specials Thing teleporters Exits Scrolling walls zero tag allowed zero tag not allowed P_IsSecret() Passed a sector, returns if the sector secret type is still active, i.e. secret type is set and the secret has not yet been obtained. jff 3/14/98 added to simplify checks for whether sector is secret  in automap and other places P_WasSecret() Passed a sector, returns if the sector secret type is was active, i.e. secret type was set and the secret has been obtained already. jff 3/14/98 added to simplify checks for whether sector is secret  in automap and other places//////////////////////////////////////////////////////////////////////// Events Events are operations triggered by using, crossing, or shooting special lines, or by timed thinkers./////////////////////////////////////////////////////////////////////// P_CrossSpecialLine - Walkover Trigger Dispatcher Called every time a thing origin is about  to cross a line with a non 0 special, whether a walkover type or not. jff 02/12/98 all W1 lines were fixed to check the result from the EV_  function before clearing the special. This avoids losing the function  of the line, should the sector already be active when the line is  crossed. Change is qualified by demo_compatibility. CPhipps - take a line_t pointer instead of a line number, as in MBF  Things that should never trigger lines Things that should NOT trigger specials...jff 02/04/98 add check here for generalized lindef types generalized types not recognized if old demo pointer to line function is NULL by default, set non-null if line special is walkover generalized linedef type check each range of generalized linedefs Out of range for GenFloors FloorModel is "Allow Monsters" if FloorChange is 0jff 2/27/98 all walk generalized types require tag CeilingModel is "Allow Monsters" if CeilingChange is 0jff 2/27/98 all walk generalized types require tag monsters disallowed from this door they can't open secret doors either3/2/98 move outside the monster check monsters disallowed from unlocking doorsjff 4/1/98 check for being a walk type before reporting door type monsters disallowedjff 2/27/98 all walk generalized types require tag monsters disallowedjff 2/27/98 all walk generalized types require tag if it was a valid generalized type clear special if a walk once type if not a walk type, do nothing here teleport trigger teleport retrigger teleport monsteronly trigger teleport monsteronly retrigger raise door plat down-wait-up-stay trigger plat down-wait-up-stay retriggerjff 3/5/98 add ability of monsters etc. to use teleporterssilent thing teleporterssilent line-line teleporterjff 3/6/98 make fit within DCK's 256 linedef typesjff 4/14/98 add monster onlyjff 4/14/98 silent thing,line,line rev typesjff 4/14/98 plus player/monster silent line            reversed typesjff 2/27/98 disallow zero tag on some types Dispatch on the line special value to the line's action routine If a once only function, and successful, clear the line special Regular walk once triggers Open Door Close Door Raise Door Raise Floor Fast Ceiling Crush & Raise Build Stairs PlatDownWaitUp Light Turn On - brightest near Light Turn On 255 Close Door 30 Start Light Strobing Lower Floor Raise floor to nearest height and change texture Ceiling Crush and Raise Raise floor to shortest texture height  on either side of lines. Lights Very Dark Lower Floor (TURBO) LowerAndChange Lower Floor To Lowest TELEPORT! //jff 02/09/98 fix using up with wrong side crossing RaiseCeilingLowerFloorjff 02/12/98 doesn't work Ceiling Crush EXIT! killough 10/98: prevent zombies from exiting levels Perpetual Platform Raise Platform Stop Raise Floor Crush Ceiling Crush Stop Raise Floor 24 Raise Floor 24 And Change Build Stairs Turbo 16 Turn lights off in sector(tag) Blazing Door Raise (faster than TURBO!) Blazing Door Open (faster than TURBO!) Blazing Door Close (faster than TURBO!) Raise floor to nearest surr. floor Blazing PlatDownWaitUpStay Secret EXIT killough 10/98: prevent zombies from exiting levels CPhipps - change for lxdoom's compatibility handling TELEPORT MonsterONLY Raise Floor Turbo Silent Ceiling Crush & Raise Regular walk many retriggerable Ceiling Crush Ceiling Crush and Raise Ceiling Crush Stop Close Door Close Door 30 Fast Ceiling Crush & Raise Lights Very Dark Light Turn On - brightest near Light Turn On 255 Lower Floor To Lowest Lower Floor LowerAndChange Open Door Perpetual Platform Raise PlatDownWaitUp Platform Stop Raise Door Raise Floor Raise Floor 24 Raise Floor 24 And Change Raise Floor Crush Raise floor to nearest height and change texture. Raise floor to shortest texture height on either side of lines. TELEPORT! Lower Floor (TURBO) Blazing Door Raise (faster than TURBO!) Blazing Door Open (faster than TURBO!) Blazing Door Close (faster than TURBO!) Blazing PlatDownWaitUpStay. TELEPORT MonsterONLY. Raise To Nearest Floor Raise Floor Turbo Extended walk triggers jff 1/29/98 added new linedef types to fill all functions out so that all have varieties SR, S1, WR, W1 killough 1/31/98: "factor out" compatibility test, by adding inner switch qualified by compatibility flag. relax test to demo_compatibility killough 2/16/98: Fix problems with W1 types being cleared too early Extended walk once triggers Raise Floor 512 142 W1  EV_DoFloor(raiseFloor512) Raise Floor 24 and change 143 W1  EV_DoPlat(raiseAndChange,24) Raise Floor 32 and change 144 W1  EV_DoPlat(raiseAndChange,32) Lower Ceiling to Floor 145 W1  EV_DoCeiling(lowerToFloor) Lower Pillar, Raise Donut 146 W1  EV_DoDonut() Lower ceiling to lowest surrounding ceiling 199 W1 EV_DoCeiling(lowerToLowest) Lower ceiling to highest surrounding floor 200 W1 EV_DoCeiling(lowerToMaxFloor) killough 2/16/98: W1 silent teleporter (normal kind)jff 3/16/98 renumber 215->153jff 3/15/98 create texture change no motion type Texture/Type Change Only (Trig) 153 W1 Change Texture/Type Onlyjff 3/15/98 create texture change no motion type Texture/Type Change Only (Numeric) 239 W1 Change Texture/Type Only Lower floor to next lower neighbor 219 W1 Lower Floor Next Lower Neighbor Raise elevator next floor 227 W1 Raise Elevator next floor Lower elevator next floor 231 W1 Lower Elevator next floor Elevator to current floor 235 W1 Elevator to current floorjff 3/6/98 make fit within DCK's 256 linedef types killough 2/16/98: W1 silent teleporter (linedef-linedef kind)jff 4/14/98 add silent line-line reversedjff 4/14/98 add monster-only silent line-line reversedjff 4/14/98 add monster-only silent line-linejff 4/14/98 add monster-only silentjff 1/29/98 end of added W1 linedef types Extended walk many retriggerablejff 1/29/98 added new linedef types to fill all functionsout so that all have varieties SR, S1, WR, W1 Raise Floor 512 147 WR  EV_DoFloor(raiseFloor512) Raise Floor 24 and Change 148 WR  EV_DoPlat(raiseAndChange,24) Raise Floor 32 and Change 149 WR  EV_DoPlat(raiseAndChange,32) Start slow silent crusher 150 WR  EV_DoCeiling(silentCrushAndRaise) RaiseCeilingLowerFloor 151 WR  EV_DoCeiling(raiseToHighest),         EV_DoFloor(lowerFloortoLowest) Lower Ceiling to Floor 152 WR  EV_DoCeiling(lowerToFloor)jff 3/16/98 renumber 153->256 Build stairs, step 8 256 WR EV_BuildStairs(build8)jff 3/16/98 renumber 154->257 Build stairs, step 16 257 WR EV_BuildStairs(turbo16) Lower Pillar, Raise Donut 155 WR  EV_DoDonut() Start lights strobing 156 WR Lights EV_StartLightStrobing() Lights to dimmest near 157 WR Lights EV_TurnTagLightsOff() Lower ceiling to lowest surrounding ceiling 201 WR EV_DoCeiling(lowerToLowest) Lower ceiling to highest surrounding floor 202 WR EV_DoCeiling(lowerToMaxFloor) killough 2/16/98: WR silent teleporter (normal kind)jff 3/14/98 create instant toggle floor type Toggle floor between C and F instantly 212 WR Instant Toggle Floorjff 3/16/98 renumber 216->154jff 3/15/98 create texture change no motion type Texture/Type Change Only (Trigger) 154 WR Change Texture/Type Onlyjff 3/15/98 create texture change no motion type Texture/Type Change Only (Numeric) 240 WR Change Texture/Type Only Lower floor to next lower neighbor 220 WR Lower Floor Next Lower Neighbor Raise elevator next floor 228 WR Raise Elevator next floor Lower elevator next floor 232 WR Lower Elevator next floor Elevator to current floor 236 WR Elevator to current floorjff 3/6/98 make fit within DCK's 256 linedef types killough 2/16/98: WR silent teleporter (linedef-linedef kind)jff 4/14/98 add silent line-line reversedjff 4/14/98 add monster-only silent line-line reversedjff 4/14/98 add monster-only silent line-linejff 4/14/98 add monster-only silentjff 1/29/98 end of added WR linedef types P_ShootSpecialLine - Gun trigger special dispatcher Called when a thing shoots a special line with bullet, shell, saw, or fist. jff 02/12/98 all G1 lines were fixed to check the result from the EV_ function before clearing the special. This avoids losing the function of the line, should the sector already be in motion when the line is impacted. Change is qualified by demo_compatibility.jff 02/04/98 add check here for generalized linedef pointer to line function is NULL by default, set non-null if line special is gun triggered generalized linedef type check each range of generalized linedefs Out of range for GenFloors FloorModel is "Allow Monsters" if FloorChange is 0jff 2/27/98 all gun generalized types require tag CeilingModel is "Allow Monsters" if CeilingChange is 0jff 2/27/98 all gun generalized types require tag monsters disallowed from this door they can't open secret doors eitherjff 3/2/98 all gun generalized types require tag monsters disallowed from unlocking doorsjff 4/1/98 check for being a gun type before reporting door typejff 2/27/98 all gun generalized types require tag monsters disallowed monsters disallowedjff 2/27/98 all gun generalized types require tag monsters disallowedjff 2/27/98 all gun generalized types require tag if not a gun type, do nothing here Impacts that other things can activate. 46 GR Open door on impact weapon is monster activatablejff 2/27/98 disallow zero tag on some types 24 G1 raise floor to highest adjacent 46 GR open door, stay open 47 G1 raise floor to nearest and change texture and typejff 1/30/98 added new gun linedefs here killough 1/31/98: added demo_compatibility check, added inner switch Exit to next level killough 10/98: prevent zombies from exiting levels Exit to secret level killough 10/98: prevent zombies from exiting levelsjff end addition of new gun linedefs P_PlayerInSpecialSector() Called every tick frame  that the player origin is in a special sector Changed to ignore sector types the engine does not recognize Falling, not all the way down yet? Sector specials don't apply in mid-air Has hit ground.jff add if to handle old vs generalized types regular sector specials 5/10 unit damage per 31 ticks 2/5 unit damage per 31 ticks 10/20 unit damage per 31 ticks 10/20 unit damage plus blinking light (light already spawned) even with suit, take damage Tally player in secret sector, clear secret special Exit on health < 11, take 10/20 damage per 31 ticks killough 2/21/98: add compatibility switch  on godmode cheat clearing does not affect invulnerabilityjff 1/24/98 Don't exit as DOOM2 did, just ignorejff 3/14/98 handle extended sector types for secrets and damage no damage 2/5 damage per 31 ticks 5/10 damage per 31 ticks 10/20 damage per 31 ticks take damage even with suit if all extended bits clear, sector is not special anymore phares 3/19/98: If FRICTION_MASK or PUSH_MASK is set, we don't care at this point, since the code to deal with those situations is handled by Thinkers. P_UpdateSpecials() Check level timer, frag counter, animate flats, scroll walls, change button textures Reads and modifies globals:  levelTimer, levelTimeCount,  levelFragLimit, levelFragLimitCount Ty 03/18/98 Added -frags support Ty 03/18/98 Added -frags support Downcount level timer, exit level if elapsed Check frag counters, if frag limit reached, exit level // Ty 03/18/98  Seems like the total frags should be kept in a simple  array somewhere, but until they are... we used -frags so compare count skip out of the loop--we're done Animate flats and textures globally Check buttons (retriggerable switches) and change texture on timeout//////////////////////////////////////////////////////////////////// Sector and Line special thinker spawning at level startup//////////////////////////////////////////////////////////////////// P_SpawnSpecials After the map has been loaded,  scan for specials that spawn thinkers Parses command line parameters. See if -timer needs to be used. Austin Virtual Gaming 20 min timer on DM play user defined timer on game play See if -frags has been used Ty 03/18/98 Added -frags support default 10 if no count provided  Init special sectors.jff 3/15/98 count extended secret sectors too random off strobe fast strobe slow strobe fast/death slimejff 3/14/98 put damage bits in glowing light secret sectorjff 3/14/98 bits don't count unless not a generalized sector type door close in 30 seconds sync strobe slow sync strobe fast door raise in 5 minutes fire flickering jff 2/22/98 use killough's scheme killough P_InitTagLists() must be called before P_FindSectorFromLineTag() or P_FindLineFromLineTag() can be called. killough 1/30/98: Create xref tables for tags killough 3/7/98: Add generalized scrollers phares 3/12/98: New friction model using linedefs phares 3/20/98: New pusher model using linedefs killough 3/7/98: support for drawn heights coming from different sector killough 3/16/98: Add support for setting floor lighting independently (e.g. lava) killough 4/11/98: Add support for setting ceiling lighting independently killough 10/98: Support for sky textures being transferred from sidedefs. Allows scrolling and other effects (but if scrolling is used, then the same sector tag needs to be used for the sky sector, the sky-transfer linedef, and the scroll-effect linedef). Still requires user to use F_SKY1 for the floor or ceiling texture, to distinguish floor and ceiling sky. Regular sky Same, only flipped killough 2/28/98: This function, with the help of r_plane.c and r_bsp.c, supports generalized scrolling floors and walls, with optional mobj-carrying properties, e.g. conveyor belts, rivers, etc. A linedef with a special type affects all tagged sectors the same way, by creating scrolling and/or object-carrying properties. Multiple linedefs may be used on the same sector and are cumulative, although the special case of scrolling a floor and carrying things on it, requires only one linedef. The linedef's direction determines the scrolling direction, and the linedef's length determines the scrolling speed. This was designed so that an edge around the sector could be used to control the direction of the sector's scrolling, which is usually what is desired. Process the active scrollers. This is the main scrolling code killough 3/7/98 compute scroll amounts based on a sector's height changes killough 3/14/98: Add acceleration no-op if both (x,y) offsets 0 killough 4/4/98: add waterheight killough 3/7/98: Scroll wall texture killough 3/7/98: Scroll floor texture killough 3/7/98: Scroll ceiling texture killough 3/7/98: Carry things on floor killough 3/20/98: use new sector list which reflects true members killough 3/27/98: fix carrier bug killough 4/4/98: Underwater, carry things even w/o gravity Move objects only if on floor or underwater, non-floating, and clipped. to be added later Add_Scroller() Add a generalized scroller to the thinker list. type: the enumerated type of scrolling: floor, ceiling, floor carrier,   wall, floor carrier & scroller (dx,dy): the direction and speed of the scrolling or its acceleration control: the sector whose heights control this scroller's effect   remotely, or -1 if no control sector affectee: the index of the affected object (sector or sidedef) accel: non-zero if this is an accelerative effect Adds wall scroller. Scroll amount is rotated with respect to wall's linedef first, so that scrolling towards the wall in a perpendicular direction is translated into vertical motion, while scrolling along the wall in a parallel direction is translated into horizontal motion. killough 5/25/98: cleaned up arithmetic to avoid drift due to roundoff killough 10/98: fix scrolling aliasing problems, caused by long linedefs causing overflowing CPhipps - Import scroller calc overflow fix, compatibility optioned killough 10/98: Use long long arithmetic Amount (dx,dy) vector linedef is shifted right to get scroll amount Factor to scale scrolling effect into mobj-carrying properties = 3/32. (This is so scrolling floors and objects on them can move at same speed.) Initialize the scrollers direction and speed of scrolling no control sector or acceleration killough 3/7/98: Types 245-249 are same as 250-254 except that the first side's sector's heights cause scrolling when they change, and this linedef controls the direction and speed of the scrolling. The most complicated linedef since donuts, but powerful :) killough 3/15/98: Add acceleration. Types 214-218 are the same but are accelerative. displacement scrollers accelerative scrollers scroll effect ceiling scroll effect floor scroll and carry objects on floor carry objects on floor killough 3/1/98: scroll wall according to linedef (same direction and speed as scrolling floors) killough 3/2/98: scroll according to sidedef offsets scroll first side jff 1/30/98 2-way scroll killough 3/7/98 -- end generalized scroll effects////////////////////////////////////////////////////////////////////////// FRICTION EFFECTS phares 3/12/98: Start of friction effects As the player moves, friction is applied by decreasing the x and y momentum values on each tic. By varying the percentage of decrease, we can simulate muddy or icy conditions. In mud, the player slows down faster. In ice, the player slows down more slowly. The amount of friction change is controlled by the length of a linedef with type 223. A length < 100 gives you mud. A length > 100 gives you ice. Also, each sector where these effects are to take place is given a new special type _______. Changing the type value at runtime allows these effects to be turned on or off. Sector boundaries present problems. The player should experience these friction changes only when his feet are touching the sector floor. At sector boundaries where floor height changes, the player can find himself still 'in' one sector, but with his feet at the floor level of the next sector (steps up or down). To handle this, Thinkers are used in icy/muddy sectors. These thinkers examine each object that is touching their sectors, looking for players whose feet are at the same level as their floors. Players satisfying this condition are given new friction values that are applied by the player movement code later. killough 8/28/98: Completely redid code, which did not need thinkers, and which put a heavy drag on CPU. Friction is now a property of sectors, NOT objects inside them. All objects, not just players, are affected by it, if they touch the sector's floor. Code simpler and faster, only calling on friction calculations when an object needs friction considered, instead of doing friction calculations on every sector during every tic. Although this -might- ruin Boom demo sync involving friction, it's the only way, short of code explosion, to fix the original design bug. Fixing the design bug in Boom's original friction code, while maintaining demo sync under every conceivable circumstance, would double or triple code size, and would require maintenance of buggy legacy code which is only useful for old demos. Doom demos, which are more important IMO, are not affected by this change./////////////////////////// Initialize the sectors where friction is increased or decreased killough 8/28/98: initialize all sectors to normal friction first The following check might seem odd. At the time of movement, the move distance is multiplied by 'friction/0x10000', so a higher friction value actually means 'less friction'. ice killough 8/28/98: prevent odd situations killough 8/28/98: Instead of spawning thinkers, which are slow and expensive, modify the sector's own friction values. Friction should be a property of sectors, not objects which reside inside them. Original code scanned every object in every friction sector on every tic, adjusting its friction, putting unnecessary drag on CPU. New code adjusts friction of sector only once at level startup, and then uses this friction value. phares 3/12/98: End of friction effects//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// PUSH/PULL EFFECT phares 3/20/98: Start of push/pull effects This is where push/pull effects are applied to objects in the sectors. There are four kinds of push effects 1) Pushing Away    Pushes you away from a point source defined by the location of an    MT_PUSH Thing. The force decreases linearly with distance from the    source. This force crosses sector boundaries and is felt w/in a circle    whose center is at the MT_PUSH. The force is felt only if the point    MT_PUSH can see the target object. 2) Pulling toward    Same as Pushing Away except you're pulled toward an MT_PULL point    source. This force crosses sector boundaries and is felt w/in a circle    whose center is at the MT_PULL. The force is felt only if the point    MT_PULL can see the target object. 3) Wind    Pushes you in a constant direction. Full force above ground, half    force on the ground, nothing if you're below it (water). 4) Current    Pushes you in a constant direction. No force above ground, full    force if on the ground or below it (water). The magnitude of the force is controlled by the length of a controlling linedef. The force vector for types 3 & 4 is determined by the angle of the linedef, and is constant. For each sector where these effects occur, the sector special type has to have the PUSH_MASK bit set. If this bit is turned off by a switch at run-time, the effect will not occur. The controlling sector for types 1 & 2 is the sector containing the MT_PUSH/MT_PULL Thing./////////////////////////// Add a push thinker to the thinker list point source exist? where force goes to zero/////////////////////////// PIT_PushThing determines the angle and magnitude of the effect. The object's x and y momentum values are changed. tmpusher belongs to the point source (MT_PUSH/MT_PULL). killough 10/98: allow to affect things besides players pusher structure for blockmap searches killough 10/98: made more general  killough 10/98: make magnitude decrease with square of distance, making it more in line with real nature, so long as it's still in range with original formula. Removes angular distortion, and makes effort required to stay close to source, grow increasingly hard as you get closer, as expected. Still, it doesn't consider z :( If speed <= 0, you're outside the effective radius. You also have to be able to see the push/pull source point. away/////////////////////////// T_Pusher looks for all objects that are inside the radius of the effect. Be sure the special sector type is still turned on. If so, proceed. Else, bail out; the sector type has been changed on us. For constant pushers (wind/current) there are 3 situations: 1) Affected Thing is above the floor.    Apply the full force if wind, no force if current. 2) Affected Thing is on the ground.    Apply half force if wind, full force if current. 3) Affected Thing is below the ground (underwater effect).    Apply no force if wind, full force if current. Seek out all pushable things within the force radius of this point pusher. Crosses sectors, so use blockmap. MT_PUSH/MT_PULL point source where force goes to zero constant pushers p_wind and p_current special water sector? things touching this sector NOT special water sector above ground full force on ground half force special water sector above ground full force underwater no force wading in water half force p_current NOT special water sector above ground no force on ground full force special water sector above ground no force underwater full force/////////////////////////// P_GetPushThing() returns a pointer to an MT_PUSH or MT_PULL thing, NULL otherwise./////////////////////////// Initialize the sectors where pushers are present wind current push/pull No MT_P* means no effect phares 3/20/98: End of Pusher effects////////////////////////////////////////////////////////////////////////// Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *   -Loads and initializes texture and flat animation sequences
 *   -Implements utility functions for all linedef/sector special handlers
 *   -Dispatches walkover and gun line triggers
 *   -Initializes and implements special sector types
 *   -Implements donut linedef triggers
 *   -Initializes and implements BOOM linedef triggers for
 *     Scrollers/Conveyors
 *     Friction
 *     Wind/Current
 *
 *----------------------------------------------------------------------------- phares 3/20/98 Animating textures and planes There is another anim_t used in wi_stuff, unrelated.      source animation definition proff: This is the same as __attribute__ ((packed)) in GNUC_MSC_VERjff 3/23/98 make char for comparison // cph - make signed  if false, it is a flatjff 3/23/98 pack to read from memory no longer a strict limit -- killough new structure w/o limits -- killough killough 3/7/98: Initialize generalized scrolling phares 3/16/98 phares 3/20/98 phares 3/20/98 P_InitPicAnims Load the table of animation definitions, checking for existence of the start and end of each frame. If the start doesn't exist the sequence is skipped, if the last doesn't exist, BOOM exits. Wall/Flat animation sequences, defined by name of first and last frame, The full animation sequence is given using all lumps between the start and end entry, in the order found in the WAD file. This routine modified to read its data from a predefined lump or PWAD lump called ANIMATED rather than a static table in this module to allow wad designers to insert or modify animation sequences. Lump format is an array of byte packed animdef_t structures, terminated by a structure with istexture == -1. The lump can be generated from a text source file using SWANTBLS.EXE, distributed with the BOOM utils. The standard list of switches and animations is contained in the example source text file DEFSWANI.DAT also in the BOOM util distribution.jff 3/23/98 pointer to animation lump cph - new wad lump handling  Init animationjff 3/23/98 read from predefined or wad lump instead of table 1/11/98 killough -- removed limit by array-doubling killough different episode ? killough 4/17/98 killough 5/5/98: add LONG()///////////////////////////////////////////////////////////// Linedef and Sector Special Implementation Utility Functions///////////////////////////////////////////////////////////// getSide() Will return a side_t*  given the number of the current sector,  the line number, and the side (0/1) that you want. Note: if side=1 is specified, it must exist or results undefined getSector() Will return a sector_t*  given the number of the current sector,  the line number and the side (0/1) that you want. Note: if side=1 is specified, it must exist or results undefined twoSided() Given the sector number and the line number,  it will tell you whether the line is two-sided or not. modified to return actual two-sidedness rather than presence of 2S flag unless compatibility optionedjff 1/26/98 return what is actually needed, whether the linehas two sidedefs, rather than whether the 2S flag is set getNextSector() Return sector_t * of sector next to current across line. Note: returns NULL if not two-sided line, or both sides refer to sectorjff 1/26/98 check unneeded since line->backsector alreadyreturns NULL if the line is not two sided, and does so fromthe actual two-sidedness of the line, rather than its 2S flagjff 5/3/98 don't retn sec unless compatibility fixes an intra-sector line breaking functions like floor->highest floor P_FindLowestFloorSurrounding() Returns the fixed point value of the lowest floor height in the sector passed or its surrounding sectors. P_FindHighestFloorSurrounding() Passed a sector, returns the fixed point value of the largest floor height in the surrounding sectors, not including that passed NOTE: if no surrounding sector exists -32000*FRACUINT is returned       if compatibility then -500*FRACUNIT is the smallest return possiblejff 1/26/98 Fix initial value for floor to not act differentlyin sections of wad that are below -500 units jff 3/12/98 avoid ovf  in height calculations P_FindNextHighestFloor() Passed a sector and a floor height, returns the fixed point value of the smallest floor height in a surrounding sector larger than the floor height passed. If no such height exists the floorheight passed is returned. Rewritten by Lee Killough to avoid fixed array and to be faster P_FindNextLowestFloor() Passed a sector and a floor height, returns the fixed point value of the largest floor height in a surrounding sector smaller than the floor height passed. If no such height exists the floorheight passed is returned. jff 02/03/98 Twiddled Lee's P_FindNextHighestFloor to make this P_FindNextLowestCeiling() Passed a sector and a ceiling height, returns the fixed point value of the largest ceiling height in a surrounding sector smaller than the ceiling height passed. If no such height exists the ceiling height passed is returned. jff 02/03/98 Twiddled Lee's P_FindNextHighestFloor to make this P_FindNextHighestCeiling() Passed a sector and a ceiling height, returns the fixed point value of the smallest ceiling height in a surrounding sector larger than the ceiling height passed. If no such height exists the ceiling height passed is returned. jff 02/03/98 Twiddled Lee's P_FindNextHighestFloor to make this P_FindLowestCeilingSurrounding() Passed a sector, returns the fixed point value of the smallest ceiling height in the surrounding sectors, not including that passed NOTE: if no surrounding sector exists 32000*FRACUINT is returned       but if compatibility then INT_MAX is the return jff 3/12/98 avoid ovf in height calculations  P_FindHighestCeilingSurrounding() Passed a sector, returns the fixed point value of the largest ceiling height in the surrounding sectors, not including that passed NOTE: if no surrounding sector exists -32000*FRACUINT is returned       but if compatibility then 0 is the smallest return possible jff 1/26/98 Fix initial value for floor to not act differently
    * in sections of wad that are below 0 units
    * jff 3/12/98 avoid ovf in height calculations  P_FindShortestTextureAround() Passed a sector number, returns the shortest lower texture on a linedef bounding the sector. Note: If no lower texture exists 32000*FRACUNIT is returned.       but if compatibility then INT_MAX is returned jff 02/03/98 Add routine to find shortest lower texturejff 3/13/98 prevent overflow in height calcsjff 8/14/98 texture 0 is a placeholderjff 8/14/98 texture 0 is a placeholder P_FindShortestUpperAround() Passed a sector number, returns the shortest upper texture on a linedef bounding the sector. Note: If no upper texture exists 32000*FRACUNIT is returned.       but if compatibility then INT_MAX is returned jff 03/20/98 Add routine to find shortest upper texturejff 3/13/98 prevent overflow in height calcsjff 8/14/98 texture 0 is a placeholderjff 8/14/98 texture 0 is a placeholder P_FindModelFloorSector() Passed a floor height and a sector number, return a pointer to a a sector with that floor height across the lowest numbered two sided line surrounding the sector. Note: If no sector at that height bounds the sector passed, return NULL jff 02/03/98 Add routine to find numeric model floor  around a sector specified by sector number jff 3/14/98 change first parameter to plain height to allow call  from routine not using floormove_tjff 3/2/98 woops! better do thisjff 5/23/98 don't disturb sec->linecount while searching but allow early exit in old demos P_FindModelCeilingSector() Passed a ceiling height and a sector number, return a pointer to a a sector with that ceiling height across the lowest numbered two sided line surrounding the sector. Note: If no sector at that height bounds the sector passed, return NULL jff 02/03/98 Add routine to find numeric model ceiling  around a sector specified by sector number  used only from generalized ceiling types jff 3/14/98 change first parameter to plain height to allow call  from routine not using ceiling_tjff 3/2/98 woops! better do thisjff 5/23/98 don't disturb sec->linecount while searching but allow early exit in old demos RETURN NEXT SECTOR # THAT LINE TAG REFERS TO Find the next sector with the same tag as a linedef. Rewritten by Lee Killough to use chained hashing to improve speed killough 4/16/98: Same thing, only for linedefs Hash the sector tags across the sectors and linedefs. Initially make all slots empty. Proceed from last to first sector so that lower sectors appear first Hash func Prepend sector to chain killough 4/17/98: same thing, only for linedefs Initially make all slots empty. Proceed from last to first linedef so that lower linedefs appear first Hash func Prepend linedef to chain P_FindMinSurroundingLight() Passed a sector and a light level, returns the smallest light level in a surrounding sector less than that passed. If no smaller light level exists, the light level passed is returned. P_CanUnlockGenDoor() Passed a generalized locked door linedef and a player, returns whether the player has the keys necessary to unlock that door. Note: The linedef passed MUST be a generalized locked door type       or results are undefined. jff 02/05/98 routine added to test for unlockability of  generalized locked doors does this line special distinguish between skulls and keys? determine for each case of lock type if player's keys are adequate Ty 03/27/98 - externalized killough 3/20/98 Ty 03/27/98 - externalized killough 3/20/98 Ty 03/27/98 - externalized killough 3/20/98 Ty 03/27/98 - externalized killough 3/20/98 Ty 03/27/98 - externalized killough 3/20/98 Ty 03/27/98 - externalized killough 3/20/98 Ty 03/27/98 - externalized killough 3/20/98 Ty 03/27/98 - externalized killough 3/20/98 Ty 03/27/98 - externalized killough 3/20/98 P_SectorActive() Passed a linedef special class (floor, ceiling, lighting) and a sector returns whether the sector is already busy with a linedef special of the same class. If old demo compatibility true, all linedef special classes are the same. jff 2/23/98 added to prevent old demos from  succeeding in starting multiple specials on one sector return whether any thinker is active return whether thinker of same type is active don't know which special, must be active, shouldn't be here P_CheckTag() Passed a line, returns true if the tag is non-zero or the line special allows no tag without harm. If compatibility, all linedef specials are allowed to have zero tag. Note: Only line specials activated by walkover, pushing, or shooting are       checked by this routine. jff 2/27/98 Added to check for zero tag allowed for regular special types tag not zero, allowed, or
    * killough 11/98: compatibility option  Manual door specials Lighting specials Thing teleporters Exits Scrolling walls zero tag allowed zero tag not allowed P_IsSecret() Passed a sector, returns if the sector secret type is still active, i.e. secret type is set and the secret has not yet been obtained. jff 3/14/98 added to simplify checks for whether sector is secret  in automap and other places P_WasSecret() Passed a sector, returns if the sector secret type is was active, i.e. secret type was set and the secret has been obtained already. jff 3/14/98 added to simplify checks for whether sector is secret  in automap and other places//////////////////////////////////////////////////////////////////////// Events Events are operations triggered by using, crossing, or shooting special lines, or by timed thinkers./////////////////////////////////////////////////////////////////////// P_CrossSpecialLine - Walkover Trigger Dispatcher Called every time a thing origin is about  to cross a line with a non 0 special, whether a walkover type or not. jff 02/12/98 all W1 lines were fixed to check the result from the EV_  function before clearing the special. This avoids losing the function  of the line, should the sector already be active when the line is  crossed. Change is qualified by demo_compatibility. CPhipps - take a line_t pointer instead of a line number, as in MBF  Things that should never trigger lines Things that should NOT trigger specials...jff 02/04/98 add check here for generalized lindef types generalized types not recognized if old demo pointer to line function is NULL by default, set non-null if line special is walkover generalized linedef type check each range of generalized linedefs Out of range for GenFloors FloorModel is "Allow Monsters" if FloorChange is 0jff 2/27/98 all walk generalized types require tag CeilingModel is "Allow Monsters" if CeilingChange is 0jff 2/27/98 all walk generalized types require tag monsters disallowed from this door they can't open secret doors either3/2/98 move outside the monster check monsters disallowed from unlocking doorsjff 4/1/98 check for being a walk type before reporting door type monsters disallowedjff 2/27/98 all walk generalized types require tag monsters disallowedjff 2/27/98 all walk generalized types require tag if it was a valid generalized type clear special if a walk once type if not a walk type, do nothing here teleport trigger teleport retrigger teleport monsteronly trigger teleport monsteronly retrigger raise door plat down-wait-up-stay trigger plat down-wait-up-stay retriggerjff 3/5/98 add ability of monsters etc. to use teleporterssilent thing teleporterssilent line-line teleporterjff 3/6/98 make fit within DCK's 256 linedef typesjff 4/14/98 add monster onlyjff 4/14/98 silent thing,line,line rev typesjff 4/14/98 plus player/monster silent line            reversed typesjff 2/27/98 disallow zero tag on some types Dispatch on the line special value to the line's action routine If a once only function, and successful, clear the line special Regular walk once triggers Open Door Close Door Raise Door Raise Floor Fast Ceiling Crush & Raise Build Stairs PlatDownWaitUp Light Turn On - brightest near Light Turn On 255 Close Door 30 Start Light Strobing Lower Floor Raise floor to nearest height and change texture Ceiling Crush and Raise Raise floor to shortest texture height  on either side of lines. Lights Very Dark Lower Floor (TURBO) LowerAndChange Lower Floor To Lowest TELEPORT! //jff 02/09/98 fix using up with wrong side crossing RaiseCeilingLowerFloorjff 02/12/98 doesn't work Ceiling Crush EXIT! killough 10/98: prevent zombies from exiting levels Perpetual Platform Raise Platform Stop Raise Floor Crush Ceiling Crush Stop Raise Floor 24 Raise Floor 24 And Change Build Stairs Turbo 16 Turn lights off in sector(tag) Blazing Door Raise (faster than TURBO!) Blazing Door Open (faster than TURBO!) Blazing Door Close (faster than TURBO!) Raise floor to nearest surr. floor Blazing PlatDownWaitUpStay Secret EXIT killough 10/98: prevent zombies from exiting levels CPhipps - change for lxdoom's compatibility handling TELEPORT MonsterONLY Raise Floor Turbo Silent Ceiling Crush & Raise Regular walk many retriggerable Ceiling Crush Ceiling Crush and Raise Ceiling Crush Stop Close Door Close Door 30 Fast Ceiling Crush & Raise Lights Very Dark Light Turn On - brightest near Light Turn On 255 Lower Floor To Lowest Lower Floor LowerAndChange Open Door Perpetual Platform Raise PlatDownWaitUp Platform Stop Raise Door Raise Floor Raise Floor 24 Raise Floor 24 And Change Raise Floor Crush Raise floor to nearest height and change texture. Raise floor to shortest texture height on either side of lines. TELEPORT! Lower Floor (TURBO) Blazing Door Raise (faster than TURBO!) Blazing Door Open (faster than TURBO!) Blazing Door Close (faster than TURBO!) Blazing PlatDownWaitUpStay. TELEPORT MonsterONLY. Raise To Nearest Floor Raise Floor Turbo Extended walk triggers jff 1/29/98 added new linedef types to fill all functions out so that all have varieties SR, S1, WR, W1 killough 1/31/98: "factor out" compatibility test, by adding inner switch qualified by compatibility flag. relax test to demo_compatibility killough 2/16/98: Fix problems with W1 types being cleared too early Extended walk once triggers Raise Floor 512 142 W1  EV_DoFloor(raiseFloor512) Raise Floor 24 and change 143 W1  EV_DoPlat(raiseAndChange,24) Raise Floor 32 and change 144 W1  EV_DoPlat(raiseAndChange,32) Lower Ceiling to Floor 145 W1  EV_DoCeiling(lowerToFloor) Lower Pillar, Raise Donut 146 W1  EV_DoDonut() Lower ceiling to lowest surrounding ceiling 199 W1 EV_DoCeiling(lowerToLowest) Lower ceiling to highest surrounding floor 200 W1 EV_DoCeiling(lowerToMaxFloor) killough 2/16/98: W1 silent teleporter (normal kind)jff 3/16/98 renumber 215->153jff 3/15/98 create texture change no motion type Texture/Type Change Only (Trig) 153 W1 Change Texture/Type Onlyjff 3/15/98 create texture change no motion type Texture/Type Change Only (Numeric) 239 W1 Change Texture/Type Only Lower floor to next lower neighbor 219 W1 Lower Floor Next Lower Neighbor Raise elevator next floor 227 W1 Raise Elevator next floor Lower elevator next floor 231 W1 Lower Elevator next floor Elevator to current floor 235 W1 Elevator to current floorjff 3/6/98 make fit within DCK's 256 linedef types killough 2/16/98: W1 silent teleporter (linedef-linedef kind)jff 4/14/98 add silent line-line reversedjff 4/14/98 add monster-only silent line-line reversedjff 4/14/98 add monster-only silent line-linejff 4/14/98 add monster-only silentjff 1/29/98 end of added W1 linedef types Extended walk many retriggerablejff 1/29/98 added new linedef types to fill all functionsout so that all have varieties SR, S1, WR, W1 Raise Floor 512 147 WR  EV_DoFloor(raiseFloor512) Raise Floor 24 and Change 148 WR  EV_DoPlat(raiseAndChange,24) Raise Floor 32 and Change 149 WR  EV_DoPlat(raiseAndChange,32) Start slow silent crusher 150 WR  EV_DoCeiling(silentCrushAndRaise) RaiseCeilingLowerFloor 151 WR  EV_DoCeiling(raiseToHighest),         EV_DoFloor(lowerFloortoLowest) Lower Ceiling to Floor 152 WR  EV_DoCeiling(lowerToFloor)jff 3/16/98 renumber 153->256 Build stairs, step 8 256 WR EV_BuildStairs(build8)jff 3/16/98 renumber 154->257 Build stairs, step 16 257 WR EV_BuildStairs(turbo16) Lower Pillar, Raise Donut 155 WR  EV_DoDonut() Start lights strobing 156 WR Lights EV_StartLightStrobing() Lights to dimmest near 157 WR Lights EV_TurnTagLightsOff() Lower ceiling to lowest surrounding ceiling 201 WR EV_DoCeiling(lowerToLowest) Lower ceiling to highest surrounding floor 202 WR EV_DoCeiling(lowerToMaxFloor) killough 2/16/98: WR silent teleporter (normal kind)jff 3/14/98 create instant toggle floor type Toggle floor between C and F instantly 212 WR Instant Toggle Floorjff 3/16/98 renumber 216->154jff 3/15/98 create texture change no motion type Texture/Type Change Only (Trigger) 154 WR Change Texture/Type Onlyjff 3/15/98 create texture change no motion type Texture/Type Change Only (Numeric) 240 WR Change Texture/Type Only Lower floor to next lower neighbor 220 WR Lower Floor Next Lower Neighbor Raise elevator next floor 228 WR Raise Elevator next floor Lower elevator next floor 232 WR Lower Elevator next floor Elevator to current floor 236 WR Elevator to current floorjff 3/6/98 make fit within DCK's 256 linedef types killough 2/16/98: WR silent teleporter (linedef-linedef kind)jff 4/14/98 add silent line-line reversedjff 4/14/98 add monster-only silent line-line reversedjff 4/14/98 add monster-only silent line-linejff 4/14/98 add monster-only silentjff 1/29/98 end of added WR linedef types P_ShootSpecialLine - Gun trigger special dispatcher Called when a thing shoots a special line with bullet, shell, saw, or fist. jff 02/12/98 all G1 lines were fixed to check the result from the EV_ function before clearing the special. This avoids losing the function of the line, should the sector already be in motion when the line is impacted. Change is qualified by demo_compatibility.jff 02/04/98 add check here for generalized linedef pointer to line function is NULL by default, set non-null if line special is gun triggered generalized linedef type check each range of generalized linedefs Out of range for GenFloors FloorModel is "Allow Monsters" if FloorChange is 0jff 2/27/98 all gun generalized types require tag CeilingModel is "Allow Monsters" if CeilingChange is 0jff 2/27/98 all gun generalized types require tag monsters disallowed from this door they can't open secret doors eitherjff 3/2/98 all gun generalized types require tag monsters disallowed from unlocking doorsjff 4/1/98 check for being a gun type before reporting door typejff 2/27/98 all gun generalized types require tag monsters disallowed monsters disallowedjff 2/27/98 all gun generalized types require tag monsters disallowedjff 2/27/98 all gun generalized types require tag if not a gun type, do nothing here Impacts that other things can activate. 46 GR Open door on impact weapon is monster activatablejff 2/27/98 disallow zero tag on some types 24 G1 raise floor to highest adjacent 46 GR open door, stay open 47 G1 raise floor to nearest and change texture and typejff 1/30/98 added new gun linedefs here killough 1/31/98: added demo_compatibility check, added inner switch Exit to next level killough 10/98: prevent zombies from exiting levels Exit to secret level killough 10/98: prevent zombies from exiting levelsjff end addition of new gun linedefs P_PlayerInSpecialSector() Called every tick frame  that the player origin is in a special sector Changed to ignore sector types the engine does not recognize Falling, not all the way down yet? Sector specials don't apply in mid-air Has hit ground.jff add if to handle old vs generalized types regular sector specials 5/10 unit damage per 31 ticks 2/5 unit damage per 31 ticks 10/20 unit damage per 31 ticks 10/20 unit damage plus blinking light (light already spawned) even with suit, take damage Tally player in secret sector, clear secret special Exit on health < 11, take 10/20 damage per 31 ticks killough 2/21/98: add compatibility switch  on godmode cheat clearing does not affect invulnerabilityjff 1/24/98 Don't exit as DOOM2 did, just ignorejff 3/14/98 handle extended sector types for secrets and damage no damage 2/5 damage per 31 ticks 5/10 damage per 31 ticks 10/20 damage per 31 ticks take damage even with suit if all extended bits clear, sector is not special anymore phares 3/19/98: If FRICTION_MASK or PUSH_MASK is set, we don't care at this point, since the code to deal with those situations is handled by Thinkers. P_UpdateSpecials() Check level timer, frag counter, animate flats, scroll walls, change button textures Reads and modifies globals:  levelTimer, levelTimeCount,  levelFragLimit, levelFragLimitCount Ty 03/18/98 Added -frags support Ty 03/18/98 Added -frags support Downcount level timer, exit level if elapsed Check frag counters, if frag limit reached, exit level // Ty 03/18/98  Seems like the total frags should be kept in a simple  array somewhere, but until they are... we used -frags so compare count skip out of the loop--we're done Animate flats and textures globally Check buttons (retriggerable switches) and change texture on timeout//////////////////////////////////////////////////////////////////// Sector and Line special thinker spawning at level startup//////////////////////////////////////////////////////////////////// P_SpawnSpecials After the map has been loaded,  scan for specials that spawn thinkers Parses command line parameters. See if -timer needs to be used. Austin Virtual Gaming 20 min timer on DM play user defined timer on game play See if -frags has been used Ty 03/18/98 Added -frags support default 10 if no count provided  Init special sectors.jff 3/15/98 count extended secret sectors too random off strobe fast strobe slow strobe fast/death slimejff 3/14/98 put damage bits in glowing light secret sectorjff 3/14/98 bits don't count unless not a generalized sector type door close in 30 seconds sync strobe slow sync strobe fast door raise in 5 minutes fire flickering jff 2/22/98 use killough's scheme killough P_InitTagLists() must be called before P_FindSectorFromLineTag() or P_FindLineFromLineTag() can be called. killough 1/30/98: Create xref tables for tags killough 3/7/98: Add generalized scrollers phares 3/12/98: New friction model using linedefs phares 3/20/98: New pusher model using linedefs killough 3/7/98: support for drawn heights coming from different sector killough 3/16/98: Add support for setting floor lighting independently (e.g. lava) killough 4/11/98: Add support for setting ceiling lighting independently killough 10/98: Support for sky textures being transferred from sidedefs. Allows scrolling and other effects (but if scrolling is used, then the same sector tag needs to be used for the sky sector, the sky-transfer linedef, and the scroll-effect linedef). Still requires user to use F_SKY1 for the floor or ceiling texture, to distinguish floor and ceiling sky. Regular sky Same, only flipped killough 2/28/98: This function, with the help of r_plane.c and r_bsp.c, supports generalized scrolling floors and walls, with optional mobj-carrying properties, e.g. conveyor belts, rivers, etc. A linedef with a special type affects all tagged sectors the same way, by creating scrolling and/or object-carrying properties. Multiple linedefs may be used on the same sector and are cumulative, although the special case of scrolling a floor and carrying things on it, requires only one linedef. The linedef's direction determines the scrolling direction, and the linedef's length determines the scrolling speed. This was designed so that an edge around the sector could be used to control the direction of the sector's scrolling, which is usually what is desired. Process the active scrollers. This is the main scrolling code killough 3/7/98 compute scroll amounts based on a sector's height changes killough 3/14/98: Add acceleration no-op if both (x,y) offsets 0 killough 4/4/98: add waterheight killough 3/7/98: Scroll wall texture killough 3/7/98: Scroll floor texture killough 3/7/98: Scroll ceiling texture killough 3/7/98: Carry things on floor killough 3/20/98: use new sector list which reflects true members killough 3/27/98: fix carrier bug killough 4/4/98: Underwater, carry things even w/o gravity Move objects only if on floor or underwater, non-floating, and clipped. to be added later Add_Scroller() Add a generalized scroller to the thinker list. type: the enumerated type of scrolling: floor, ceiling, floor carrier,   wall, floor carrier & scroller (dx,dy): the direction and speed of the scrolling or its acceleration control: the sector whose heights control this scroller's effect   remotely, or -1 if no control sector affectee: the index of the affected object (sector or sidedef) accel: non-zero if this is an accelerative effect Adds wall scroller. Scroll amount is rotated with respect to wall's linedef first, so that scrolling towards the wall in a perpendicular direction is translated into vertical motion, while scrolling along the wall in a parallel direction is translated into horizontal motion. killough 5/25/98: cleaned up arithmetic to avoid drift due to roundoff killough 10/98: fix scrolling aliasing problems, caused by long linedefs causing overflowing CPhipps - Import scroller calc overflow fix, compatibility optioned killough 10/98: Use long long arithmetic Amount (dx,dy) vector linedef is shifted right to get scroll amount Factor to scale scrolling effect into mobj-carrying properties = 3/32. (This is so scrolling floors and objects on them can move at same speed.) Initialize the scrollers direction and speed of scrolling no control sector or acceleration killough 3/7/98: Types 245-249 are same as 250-254 except that the first side's sector's heights cause scrolling when they change, and this linedef controls the direction and speed of the scrolling. The most complicated linedef since donuts, but powerful :) killough 3/15/98: Add acceleration. Types 214-218 are the same but are accelerative. displacement scrollers accelerative scrollers scroll effect ceiling scroll effect floor scroll and carry objects on floor carry objects on floor killough 3/1/98: scroll wall according to linedef (same direction and speed as scrolling floors) killough 3/2/98: scroll according to sidedef offsets scroll first side jff 1/30/98 2-way scroll killough 3/7/98 -- end generalized scroll effects////////////////////////////////////////////////////////////////////////// FRICTION EFFECTS phares 3/12/98: Start of friction effects As the player moves, friction is applied by decreasing the x and y momentum values on each tic. By varying the percentage of decrease, we can simulate muddy or icy conditions. In mud, the player slows down faster. In ice, the player slows down more slowly. The amount of friction change is controlled by the length of a linedef with type 223. A length < 100 gives you mud. A length > 100 gives you ice. Also, each sector where these effects are to take place is given a new special type _______. Changing the type value at runtime allows these effects to be turned on or off. Sector boundaries present problems. The player should experience these friction changes only when his feet are touching the sector floor. At sector boundaries where floor height changes, the player can find himself still 'in' one sector, but with his feet at the floor level of the next sector (steps up or down). To handle this, Thinkers are used in icy/muddy sectors. These thinkers examine each object that is touching their sectors, looking for players whose feet are at the same level as their floors. Players satisfying this condition are given new friction values that are applied by the player movement code later. killough 8/28/98: Completely redid code, which did not need thinkers, and which put a heavy drag on CPU. Friction is now a property of sectors, NOT objects inside them. All objects, not just players, are affected by it, if they touch the sector's floor. Code simpler and faster, only calling on friction calculations when an object needs friction considered, instead of doing friction calculations on every sector during every tic. Although this -might- ruin Boom demo sync involving friction, it's the only way, short of code explosion, to fix the original design bug. Fixing the design bug in Boom's original friction code, while maintaining demo sync under every conceivable circumstance, would double or triple code size, and would require maintenance of buggy legacy code which is only useful for old demos. Doom demos, which are more important IMO, are not affected by this change./////////////////////////// Initialize the sectors where friction is increased or decreased killough 8/28/98: initialize all sectors to normal friction first The following check might seem odd. At the time of movement, the move distance is multiplied by 'friction/0x10000', so a higher friction value actually means 'less friction'. ice killough 8/28/98: prevent odd situations killough 8/28/98: Instead of spawning thinkers, which are slow and expensive, modify the sector's own friction values. Friction should be a property of sectors, not objects which reside inside them. Original code scanned every object in every friction sector on every tic, adjusting its friction, putting unnecessary drag on CPU. New code adjusts friction of sector only once at level startup, and then uses this friction value. phares 3/12/98: End of friction effects//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// PUSH/PULL EFFECT phares 3/20/98: Start of push/pull effects This is where push/pull effects are applied to objects in the sectors. There are four kinds of push effects 1) Pushing Away    Pushes you away from a point source defined by the location of an    MT_PUSH Thing. The force decreases linearly with distance from the    source. This force crosses sector boundaries and is felt w/in a circle    whose center is at the MT_PUSH. The force is felt only if the point    MT_PUSH can see the target object. 2) Pulling toward    Same as Pushing Away except you're pulled toward an MT_PULL point    source. This force crosses sector boundaries and is felt w/in a circle    whose center is at the MT_PULL. The force is felt only if the point    MT_PULL can see the target object. 3) Wind    Pushes you in a constant direction. Full force above ground, half    force on the ground, nothing if you're below it (water). 4) Current    Pushes you in a constant direction. No force above ground, full    force if on the ground or below it (water). The magnitude of the force is controlled by the length of a controlling linedef. The force vector for types 3 & 4 is determined by the angle of the linedef, and is constant. For each sector where these effects occur, the sector special type has to have the PUSH_MASK bit set. If this bit is turned off by a switch at run-time, the effect will not occur. The controlling sector for types 1 & 2 is the sector containing the MT_PUSH/MT_PULL Thing./////////////////////////// Add a push thinker to the thinker list point source exist? where force goes to zero/////////////////////////// PIT_PushThing determines the angle and magnitude of the effect. The object's x and y momentum values are changed. tmpusher belongs to the point source (MT_PUSH/MT_PULL). killough 10/98: allow to affect things besides players pusher structure for blockmap searches killough 10/98: made more general  killough 10/98: make magnitude decrease with square of distance, making it more in line with real nature, so long as it's still in range with original formula. Removes angular distortion, and makes effort required to stay close to source, grow increasingly hard as you get closer, as expected. Still, it doesn't consider z :( If speed <= 0, you're outside the effective radius. You also have to be able to see the push/pull source point. away/////////////////////////// T_Pusher looks for all objects that are inside the radius of the effect. Be sure the special sector type is still turned on. If so, proceed. Else, bail out; the sector type has been changed on us. For constant pushers (wind/current) there are 3 situations: 1) Affected Thing is above the floor.    Apply the full force if wind, no force if current. 2) Affected Thing is on the ground.    Apply half force if wind, full force if current. 3) Affected Thing is below the ground (underwater effect).    Apply no force if wind, full force if current. Seek out all pushable things within the force radius of this point pusher. Crosses sectors, so use blockmap. MT_PUSH/MT_PULL point source where force goes to zero constant pushers p_wind and p_current special water sector? things touching this sector NOT special water sector above ground full force on ground half force special water sector above ground full force underwater no force wading in water half force p_current NOT special water sector above ground no force on ground full force special water sector above ground no force underwater full force/////////////////////////// P_GetPushThing() returns a pointer to an MT_PUSH or MT_PULL thing, NULL otherwise./////////////////////////// Initialize the sectors where pushers are present wind current push/pull No MT_P* means no effect phares 3/20/98: End of Pusher effects////////////////////////////////////////////////////////////////////////// Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *   -Loads and initializes texture and flat animation sequences
 *   -Implements utility functions for all linedef/sector special handlers
 *   -Dispatches walkover and gun line triggers
 *   -Initializes and implements special sector types
 *   -Implements donut linedef triggers
 *   -Initializes and implements BOOM linedef triggers for
 *     Scrollers/Conveyors
 *     Friction
 *     Wind/Current
 *
 *----------------------------------------------------------------------------- phares 3/20/98 Animating textures and planes There is another anim_t used in wi_stuff, unrelated.      source animation definition proff: This is the same as __attribute__ ((packed)) in GNUC_MSC_VERjff 3/23/98 make char for comparison // cph - make signed  if false, it is a flatjff 3/23/98 pack to read from memory no longer a strict limit -- killough new structure w/o limits -- killough killough 3/7/98: Initialize generalized scrolling phares 3/16/98 phares 3/20/98 phares 3/20/98 P_InitPicAnims Load the table of animation definitions, checking for existence of the start and end of each frame. If the start doesn't exist the sequence is skipped, if the last doesn't exist, BOOM exits. Wall/Flat animation sequences, defined by name of first and last frame, The full animation sequence is given using all lumps between the start and end entry, in the order found in the WAD file. This routine modified to read its data from a predefined lump or PWAD lump called ANIMATED rather than a static table in this module to allow wad designers to insert or modify animation sequences. Lump format is an array of byte packed animdef_t structures, terminated by a structure with istexture == -1. The lump can be generated from a text source file using SWANTBLS.EXE, distributed with the BOOM utils. The standard list of switches and animations is contained in the example source text file DEFSWANI.DAT also in the BOOM util distribution.jff 3/23/98 pointer to animation lump cph - new wad lump handling  Init animationjff 3/23/98 read from predefined or wad lump instead of table 1/11/98 killough -- removed limit by array-doubling killough different episode ? killough 4/17/98 killough 5/5/98: add LONG()///////////////////////////////////////////////////////////// Linedef and Sector Special Implementation Utility Functions///////////////////////////////////////////////////////////// getSide() Will return a side_t*  given the number of the current sector,  the line number, and the side (0/1) that you want. Note: if side=1 is specified, it must exist or results undefined getSector() Will return a sector_t*  given the number of the current sector,  the line number and the side (0/1) that you want. Note: if side=1 is specified, it must exist or results undefined twoSided() Given the sector number and the line number,  it will tell you whether the line is two-sided or not. modified to return actual two-sidedness rather than presence of 2S flag unless compatibility optionedjff 1/26/98 return what is actually needed, whether the linehas two sidedefs, rather than whether the 2S flag is set getNextSector() Return sector_t * of sector next to current across line. Note: returns NULL if not two-sided line, or both sides refer to sectorjff 1/26/98 check unneeded since line->backsector alreadyreturns NULL if the line is not two sided, and does so fromthe actual two-sidedness of the line, rather than its 2S flagjff 5/3/98 don't retn sec unless compatibility fixes an intra-sector line breaking functions like floor->highest floor P_FindLowestFloorSurrounding() Returns the fixed point value of the lowest floor height in the sector passed or its surrounding sectors. P_FindHighestFloorSurrounding() Passed a sector, returns the fixed point value of the largest floor height in the surrounding sectors, not including that passed NOTE: if no surrounding sector exists -32000*FRACUINT is returned       if compatibility then -500*FRACUNIT is the smallest return possiblejff 1/26/98 Fix initial value for floor to not act differentlyin sections of wad that are below -500 units jff 3/12/98 avoid ovf  in height calculations P_FindNextHighestFloor() Passed a sector and a floor height, returns the fixed point value of the smallest floor height in a surrounding sector larger than the floor height passed. If no such height exists the floorheight passed is returned. Rewritten by Lee Killough to avoid fixed array and to be faster P_FindNextLowestFloor() Passed a sector and a floor height, returns the fixed point value of the largest floor height in a surrounding sector smaller than the floor height passed. If no such height exists the floorheight passed is returned. jff 02/03/98 Twiddled Lee's P_FindNextHighestFloor to make this P_FindNextLowestCeiling() Passed a sector and a ceiling height, returns the fixed point value of the largest ceiling height in a surrounding sector smaller than the ceiling height passed. If no such height exists the ceiling height passed is returned. jff 02/03/98 Twiddled Lee's P_FindNextHighestFloor to make this P_FindNextHighestCeiling() Passed a sector and a ceiling height, returns the fixed point value of the smallest ceiling height in a surrounding sector larger than the ceiling height passed. If no such height exists the ceiling height passed is returned. jff 02/03/98 Twiddled Lee's P_FindNextHighestFloor to make this P_FindLowestCeilingSurrounding() Passed a sector, returns the fixed point value of the smallest ceiling height in the surrounding sectors, not including that passed NOTE: if no surrounding sector exists 32000*FRACUINT is returned       but if compatibility then INT_MAX is the return jff 3/12/98 avoid ovf in height calculations  P_FindHighestCeilingSurrounding() Passed a sector, returns the fixed point value of the largest ceiling height in the surrounding sectors, not including that passed NOTE: if no surrounding sector exists -32000*FRACUINT is returned       but if compatibility then 0 is the smallest return possible jff 1/26/98 Fix initial value for floor to not act differently
    * in sections of wad that are below 0 units
    * jff 3/12/98 avoid ovf in height calculations  P_FindShortestTextureAround() Passed a sector number, returns the shortest lower texture on a linedef bounding the sector. Note: If no lower texture exists 32000*FRACUNIT is returned.       but if compatibility then INT_MAX is returned jff 02/03/98 Add routine to find shortest lower texturejff 3/13/98 prevent overflow in height calcsjff 8/14/98 texture 0 is a placeholderjff 8/14/98 texture 0 is a placeholder P_FindShortestUpperAround() Passed a sector number, returns the shortest upper texture on a linedef bounding the sector. Note: If no upper texture exists 32000*FRACUNIT is returned.       but if compatibility then INT_MAX is returned jff 03/20/98 Add routine to find shortest upper texturejff 3/13/98 prevent overflow in height calcsjff 8/14/98 texture 0 is a placeholderjff 8/14/98 texture 0 is a placeholder P_FindModelFloorSector() Passed a floor height and a sector number, return a pointer to a a sector with that floor height across the lowest numbered two sided line surrounding the sector. Note: If no sector at that height bounds the sector passed, return NULL jff 02/03/98 Add routine to find numeric model floor  around a sector specified by sector number jff 3/14/98 change first parameter to plain height to allow call  from routine not using floormove_tjff 3/2/98 woops! better do thisjff 5/23/98 don't disturb sec->linecount while searching but allow early exit in old demos P_FindModelCeilingSector() Passed a ceiling height and a sector number, return a pointer to a a sector with that ceiling height across the lowest numbered two sided line surrounding the sector. Note: If no sector at that height bounds the sector passed, return NULL jff 02/03/98 Add routine to find numeric model ceiling  around a sector specified by sector number  used only from generalized ceiling types jff 3/14/98 change first parameter to plain height to allow call  from routine not using ceiling_tjff 3/2/98 woops! better do thisjff 5/23/98 don't disturb sec->linecount while searching but allow early exit in old demos RETURN NEXT SECTOR # THAT LINE TAG REFERS TO Find the next sector with the same tag as a linedef. Rewritten by Lee Killough to use chained hashing to improve speed killough 4/16/98: Same thing, only for linedefs Hash the sector tags across the sectors and linedefs. Initially make all slots empty. Proceed from last to first sector so that lower sectors appear first Hash func Prepend sector to chain killough 4/17/98: same thing, only for linedefs Initially make all slots empty. Proceed from last to first linedef so that lower linedefs appear first Hash func Prepend linedef to chain P_FindMinSurroundingLight() Passed a sector and a light level, returns the smallest light level in a surrounding sector less than that passed. If no smaller light level exists, the light level passed is returned. P_CanUnlockGenDoor() Passed a generalized locked door linedef and a player, returns whether the player has the keys necessary to unlock that door. Note: The linedef passed MUST be a generalized locked door type       or results are undefined. jff 02/05/98 routine added to test for unlockability of  generalized locked doors does this line special distinguish between skulls and keys? determine for each case of lock type if player's keys are adequate Ty 03/27/98 - externalized killough 3/20/98 Ty 03/27/98 - externalized killough 3/20/98 Ty 03/27/98 - externalized killough 3/20/98 Ty 03/27/98 - externalized killough 3/20/98 Ty 03/27/98 - externalized killough 3/20/98 Ty 03/27/98 - externalized killough 3/20/98 Ty 03/27/98 - externalized killough 3/20/98 Ty 03/27/98 - externalized killough 3/20/98 Ty 03/27/98 - externalized killough 3/20/98 P_SectorActive() Passed a linedef special class (floor, ceiling, lighting) and a sector returns whether the sector is already busy with a linedef special of the same class. If old demo compatibility true, all linedef special classes are the same. jff 2/23/98 added to prevent old demos from  succeeding in starting multiple specials on one sector return whether any thinker is active return whether thinker of same type is active don't know which special, must be active, shouldn't be here P_CheckTag() Passed a line, returns true if the tag is non-zero or the line special allows no tag without harm. If compatibility, all linedef specials are allowed to have zero tag. Note: Only line specials activated by walkover, pushing, or shooting are       checked by this routine. jff 2/27/98 Added to check for zero tag allowed for regular special types tag not zero, allowed, or
    * killough 11/98: compatibility option  Manual door specials Lighting specials Thing teleporters Exits Scrolling walls zero tag allowed zero tag not allowed P_IsSecret() Passed a sector, returns if the sector secret type is still active, i.e. secret type is set and the secret has not yet been obtained. jff 3/14/98 added to simplify checks for whether sector is secret  in automap and other places P_WasSecret() Passed a sector, returns if the sector secret type is was active, i.e. secret type was set and the secret has been obtained already. jff 3/14/98 added to simplify checks for whether sector is secret  in automap and other places//////////////////////////////////////////////////////////////////////// Events Events are operations triggered by using, crossing, or shooting special lines, or by timed thinkers./////////////////////////////////////////////////////////////////////// P_CrossSpecialLine - Walkover Trigger Dispatcher Called every time a thing origin is about  to cross a line with a non 0 special, whether a walkover type or not. jff 02/12/98 all W1 lines were fixed to check the result from the EV_  function before clearing the special. This avoids losing the function  of the line, should the sector already be active when the line is  crossed. Change is qualified by demo_compatibility. CPhipps - take a line_t pointer instead of a line number, as in MBF  Things that should never trigger lines Things that should NOT trigger specials...jff 02/04/98 add check here for generalized lindef types generalized types not recognized if old demo pointer to line function is NULL by default, set non-null if line special is walkover generalized linedef type check each range of generalized linedefs Out of range for GenFloors FloorModel is "Allow Monsters" if FloorChange is 0jff 2/27/98 all walk generalized types require tag CeilingModel is "Allow Monsters" if CeilingChange is 0jff 2/27/98 all walk generalized types require tag monsters disallowed from this door they can't open secret doors either3/2/98 move outside the monster check monsters disallowed from unlocking doorsjff 4/1/98 check for being a walk type before reporting door type monsters disallowedjff 2/27/98 all walk generalized types require tag monsters disallowedjff 2/27/98 all walk generalized types require tag if it was a valid generalized type clear special if a walk once type if not a walk type, do nothing here teleport trigger teleport retrigger teleport monsteronly trigger teleport monsteronly retrigger raise door plat down-wait-up-stay trigger plat down-wait-up-stay retriggerjff 3/5/98 add ability of monsters etc. to use teleporterssilent thing teleporterssilent line-line teleporterjff 3/6/98 make fit within DCK's 256 linedef typesjff 4/14/98 add monster onlyjff 4/14/98 silent thing,line,line rev typesjff 4/14/98 plus player/monster silent line            reversed typesjff 2/27/98 disallow zero tag on some types Dispatch on the line special value to the line's action routine If a once only function, and successful, clear the line special Regular walk once triggers Open Door Close Door Raise Door Raise Floor Fast Ceiling Crush & Raise Build Stairs PlatDownWaitUp Light Turn On - brightest near Light Turn On 255 Close Door 30 Start Light Strobing Lower Floor Raise floor to nearest height and change texture Ceiling Crush and Raise Raise floor to shortest texture height  on either side of lines. Lights Very Dark Lower Floor (TURBO) LowerAndChange Lower Floor To Lowest TELEPORT! //jff 02/09/98 fix using up with wrong side crossing RaiseCeilingLowerFloorjff 02/12/98 doesn't work Ceiling Crush EXIT! killough 10/98: prevent zombies from exiting levels Perpetual Platform Raise Platform Stop Raise Floor Crush Ceiling Crush Stop Raise Floor 24 Raise Floor 24 And Change Build Stairs Turbo 16 Turn lights off in sector(tag) Blazing Door Raise (faster than TURBO!) Blazing Door Open (faster than TURBO!) Blazing Door Close (faster than TURBO!) Raise floor to nearest surr. floor Blazing PlatDownWaitUpStay Secret EXIT killough 10/98: prevent zombies from exiting levels CPhipps - change for lxdoom's compatibility handling TELEPORT MonsterONLY Raise Floor Turbo Silent Ceiling Crush & Raise Regular walk many retriggerable Ceiling Crush Ceiling Crush and Raise Ceiling Crush Stop Close Door Close Door 30 Fast Ceiling Crush & Raise Lights Very Dark Light Turn On - brightest near Light Turn On 255 Lower Floor To Lowest Lower Floor LowerAndChange Open Door Perpetual Platform Raise PlatDownWaitUp Platform Stop Raise Door Raise Floor Raise Floor 24 Raise Floor 24 And Change Raise Floor Crush Raise floor to nearest height and change texture. Raise floor to shortest texture height on either side of lines. TELEPORT! Lower Floor (TURBO) Blazing Door Raise (faster than TURBO!) Blazing Door Open (faster than TURBO!) Blazing Door Close (faster than TURBO!) Blazing PlatDownWaitUpStay. TELEPORT MonsterONLY. Raise To Nearest Floor Raise Floor Turbo Extended walk triggers jff 1/29/98 added new linedef types to fill all functions out so that all have varieties SR, S1, WR, W1 killough 1/31/98: "factor out" compatibility test, by adding inner switch qualified by compatibility flag. relax test to demo_compatibility killough 2/16/98: Fix problems with W1 types being cleared too early Extended walk once triggers Raise Floor 512 142 W1  EV_DoFloor(raiseFloor512) Raise Floor 24 and change 143 W1  EV_DoPlat(raiseAndChange,24) Raise Floor 32 and change 144 W1  EV_DoPlat(raiseAndChange,32) Lower Ceiling to Floor 145 W1  EV_DoCeiling(lowerToFloor) Lower Pillar, Raise Donut 146 W1  EV_DoDonut() Lower ceiling to lowest surrounding ceiling 199 W1 EV_DoCeiling(lowerToLowest) Lower ceiling to highest surrounding floor 200 W1 EV_DoCeiling(lowerToMaxFloor) killough 2/16/98: W1 silent teleporter (normal kind)jff 3/16/98 renumber 215->153jff 3/15/98 create texture change no motion type Texture/Type Change Only (Trig) 153 W1 Change Texture/Type Onlyjff 3/15/98 create texture change no motion type Texture/Type Change Only (Numeric) 239 W1 Change Texture/Type Only Lower floor to next lower neighbor 219 W1 Lower Floor Next Lower Neighbor Raise elevator next floor 227 W1 Raise Elevator next floor Lower elevator next floor 231 W1 Lower Elevator next floor Elevator to current floor 235 W1 Elevator to current floorjff 3/6/98 make fit within DCK's 256 linedef types killough 2/16/98: W1 silent teleporter (linedef-linedef kind)jff 4/14/98 add silent line-line reversedjff 4/14/98 add monster-only silent line-line reversedjff 4/14/98 add monster-only silent line-linejff 4/14/98 add monster-only silentjff 1/29/98 end of added W1 linedef types Extended walk many retriggerablejff 1/29/98 added new linedef types to fill all functionsout so that all have varieties SR, S1, WR, W1 Raise Floor 512 147 WR  EV_DoFloor(raiseFloor512) Raise Floor 24 and Change 148 WR  EV_DoPlat(raiseAndChange,24) Raise Floor 32 and Change 149 WR  EV_DoPlat(raiseAndChange,32) Start slow silent crusher 150 WR  EV_DoCeiling(silentCrushAndRaise) RaiseCeilingLowerFloor 151 WR  EV_DoCeiling(raiseToHighest),         EV_DoFloor(lowerFloortoLowest) Lower Ceiling to Floor 152 WR  EV_DoCeiling(lowerToFloor)jff 3/16/98 renumber 153->256 Build stairs, step 8 256 WR EV_BuildStairs(build8)jff 3/16/98 renumber 154->257 Build stairs, step 16 257 WR EV_BuildStairs(turbo16) Lower Pillar, Raise Donut 155 WR  EV_DoDonut() Start lights strobing 156 WR Lights EV_StartLightStrobing() Lights to dimmest near 157 WR Lights EV_TurnTagLightsOff() Lower ceiling to lowest surrounding ceiling 201 WR EV_DoCeiling(lowerToLowest) Lower ceiling to highest surrounding floor 202 WR EV_DoCeiling(lowerToMaxFloor) killough 2/16/98: WR silent teleporter (normal kind)jff 3/14/98 create instant toggle floor type Toggle floor between C and F instantly 212 WR Instant Toggle Floorjff 3/16/98 renumber 216->154jff 3/15/98 create texture change no motion type Texture/Type Change Only (Trigger) 154 WR Change Texture/Type Onlyjff 3/15/98 create texture change no motion type Texture/Type Change Only (Numeric) 240 WR Change Texture/Type Only Lower floor to next lower neighbor 220 WR Lower Floor Next Lower Neighbor Raise elevator next floor 228 WR Raise Elevator next floor Lower elevator next floor 232 WR Lower Elevator next floor Elevator to current floor 236 WR Elevator to current floorjff 3/6/98 make fit within DCK's 256 linedef types killough 2/16/98: WR silent teleporter (linedef-linedef kind)jff 4/14/98 add silent line-line reversedjff 4/14/98 add monster-only silent line-line reversedjff 4/14/98 add monster-only silent line-linejff 4/14/98 add monster-only silentjff 1/29/98 end of added WR linedef types P_ShootSpecialLine - Gun trigger special dispatcher Called when a thing shoots a special line with bullet, shell, saw, or fist. jff 02/12/98 all G1 lines were fixed to check the result from the EV_ function before clearing the special. This avoids losing the function of the line, should the sector already be in motion when the line is impacted. Change is qualified by demo_compatibility.jff 02/04/98 add check here for generalized linedef pointer to line function is NULL by default, set non-null if line special is gun triggered generalized linedef type check each range of generalized linedefs Out of range for GenFloors FloorModel is "Allow Monsters" if FloorChange is 0jff 2/27/98 all gun generalized types require tag CeilingModel is "Allow Monsters" if CeilingChange is 0jff 2/27/98 all gun generalized types require tag monsters disallowed from this door they can't open secret doors eitherjff 3/2/98 all gun generalized types require tag monsters disallowed from unlocking doorsjff 4/1/98 check for being a gun type before reporting door typejff 2/27/98 all gun generalized types require tag monsters disallowed monsters disallowedjff 2/27/98 all gun generalized types require tag monsters disallowedjff 2/27/98 all gun generalized types require tag if not a gun type, do nothing here Impacts that other things can activate. 46 GR Open door on impact weapon is monster activatablejff 2/27/98 disallow zero tag on some types 24 G1 raise floor to highest adjacent 46 GR open door, stay open 47 G1 raise floor to nearest and change texture and typejff 1/30/98 added new gun linedefs here killough 1/31/98: added demo_compatibility check, added inner switch Exit to next level killough 10/98: prevent zombies from exiting levels Exit to secret level killough 10/98: prevent zombies from exiting levelsjff end addition of new gun linedefs P_PlayerInSpecialSector() Called every tick frame  that the player origin is in a special sector Changed to ignore sector types the engine does not recognize Falling, not all the way down yet? Sector specials don't apply in mid-air Has hit ground.jff add if to handle old vs generalized types regular sector specials 5/10 unit damage per 31 ticks 2/5 unit damage per 31 ticks 10/20 unit damage per 31 ticks 10/20 unit damage plus blinking light (light already spawned) even with suit, take damage Tally player in secret sector, clear secret special Exit on health < 11, take 10/20 damage per 31 ticks killough 2/21/98: add compatibility switch  on godmode cheat clearing does not affect invulnerabilityjff 1/24/98 Don't exit as DOOM2 did, just ignorejff 3/14/98 handle extended sector types for secrets and damage no damage 2/5 damage per 31 ticks 5/10 damage per 31 ticks 10/20 damage per 31 ticks take damage even with suit if all extended bits clear, sector is not special anymore phares 3/19/98: If FRICTION_MASK or PUSH_MASK is set, we don't care at this point, since the code to deal with those situations is handled by Thinkers. P_UpdateSpecials() Check level timer, frag counter, animate flats, scroll walls, change button textures Reads and modifies globals:  levelTimer, levelTimeCount,  levelFragLimit, levelFragLimitCount Ty 03/18/98 Added -frags support Ty 03/18/98 Added -frags support Downcount level timer, exit level if elapsed Check frag counters, if frag limit reached, exit level // Ty 03/18/98  Seems like the total frags should be kept in a simple  array somewhere, but until they are... we used -frags so compare count skip out of the loop--we're done Animate flats and textures globally Check buttons (retriggerable switches) and change texture on timeout//////////////////////////////////////////////////////////////////// Sector and Line special thinker spawning at level startup//////////////////////////////////////////////////////////////////// P_SpawnSpecials After the map has been loaded,  scan for specials that spawn thinkers Parses command line parameters. See if -timer needs to be used. Austin Virtual Gaming 20 min timer on DM play user defined timer on game play See if -frags has been used Ty 03/18/98 Added -frags support default 10 if no count provided  Init special sectors.jff 3/15/98 count extended secret sectors too random off strobe fast strobe slow strobe fast/death slimejff 3/14/98 put damage bits in glowing light secret sectorjff 3/14/98 bits don't count unless not a generalized sector type door close in 30 seconds sync strobe slow sync strobe fast door raise in 5 minutes fire flickering jff 2/22/98 use killough's scheme killough P_InitTagLists() must be called before P_FindSectorFromLineTag() or P_FindLineFromLineTag() can be called. killough 1/30/98: Create xref tables for tags killough 3/7/98: Add generalized scrollers phares 3/12/98: New friction model using linedefs phares 3/20/98: New pusher model using linedefs killough 3/7/98: support for drawn heights coming from different sector killough 3/16/98: Add support for setting floor lighting independently (e.g. lava) killough 4/11/98: Add support for setting ceiling lighting independently killough 10/98: Support for sky textures being transferred from sidedefs. Allows scrolling and other effects (but if scrolling is used, then the same sector tag needs to be used for the sky sector, the sky-transfer linedef, and the scroll-effect linedef). Still requires user to use F_SKY1 for the floor or ceiling texture, to distinguish floor and ceiling sky. Regular sky Same, only flipped killough 2/28/98: This function, with the help of r_plane.c and r_bsp.c, supports generalized scrolling floors and walls, with optional mobj-carrying properties, e.g. conveyor belts, rivers, etc. A linedef with a special type affects all tagged sectors the same way, by creating scrolling and/or object-carrying properties. Multiple linedefs may be used on the same sector and are cumulative, although the special case of scrolling a floor and carrying things on it, requires only one linedef. The linedef's direction determines the scrolling direction, and the linedef's length determines the scrolling speed. This was designed so that an edge around the sector could be used to control the direction of the sector's scrolling, which is usually what is desired. Process the active scrollers. This is the main scrolling code killough 3/7/98 compute scroll amounts based on a sector's height changes killough 3/14/98: Add acceleration no-op if both (x,y) offsets 0 killough 4/4/98: add waterheight killough 3/7/98: Scroll wall texture killough 3/7/98: Scroll floor texture killough 3/7/98: Scroll ceiling texture killough 3/7/98: Carry things on floor killough 3/20/98: use new sector list which reflects true members killough 3/27/98: fix carrier bug killough 4/4/98: Underwater, carry things even w/o gravity Move objects only if on floor or underwater, non-floating, and clipped. to be added later Add_Scroller() Add a generalized scroller to the thinker list. type: the enumerated type of scrolling: floor, ceiling, floor carrier,   wall, floor carrier & scroller (dx,dy): the direction and speed of the scrolling or its acceleration control: the sector whose heights control this scroller's effect   remotely, or -1 if no control sector affectee: the index of the affected object (sector or sidedef) accel: non-zero if this is an accelerative effect Adds wall scroller. Scroll amount is rotated with respect to wall's linedef first, so that scrolling towards the wall in a perpendicular direction is translated into vertical motion, while scrolling along the wall in a parallel direction is translated into horizontal motion. killough 5/25/98: cleaned up arithmetic to avoid drift due to roundoff killough 10/98: fix scrolling aliasing problems, caused by long linedefs causing overflowing CPhipps - Import scroller calc overflow fix, compatibility optioned killough 10/98: Use long long arithmetic Amount (dx,dy) vector linedef is shifted right to get scroll amount Factor to scale scrolling effect into mobj-carrying properties = 3/32. (This is so scrolling floors and objects on them can move at same speed.) Initialize the scrollers direction and speed of scrolling no control sector or acceleration killough 3/7/98: Types 245-249 are same as 250-254 except that the first side's sector's heights cause scrolling when they change, and this linedef controls the direction and speed of the scrolling. The most complicated linedef since donuts, but powerful :) killough 3/15/98: Add acceleration. Types 214-218 are the same but are accelerative. displacement scrollers accelerative scrollers scroll effect ceiling scroll effect floor scroll and carry objects on floor carry objects on floor killough 3/1/98: scroll wall according to linedef (same direction and speed as scrolling floors) killough 3/2/98: scroll according to sidedef offsets scroll first side jff 1/30/98 2-way scroll killough 3/7/98 -- end generalized scroll effects////////////////////////////////////////////////////////////////////////// FRICTION EFFECTS phares 3/12/98: Start of friction effects As the player moves, friction is applied by decreasing the x and y momentum values on each tic. By varying the percentage of decrease, we can simulate muddy or icy conditions. In mud, the player slows down faster. In ice, the player slows down more slowly. The amount of friction change is controlled by the length of a linedef with type 223. A length < 100 gives you mud. A length > 100 gives you ice. Also, each sector where these effects are to take place is given a new special type _______. Changing the type value at runtime allows these effects to be turned on or off. Sector boundaries present problems. The player should experience these friction changes only when his feet are touching the sector floor. At sector boundaries where floor height changes, the player can find himself still 'in' one sector, but with his feet at the floor level of the next sector (steps up or down). To handle this, Thinkers are used in icy/muddy sectors. These thinkers examine each object that is touching their sectors, looking for players whose feet are at the same level as their floors. Players satisfying this condition are given new friction values that are applied by the player movement code later. killough 8/28/98: Completely redid code, which did not need thinkers, and which put a heavy drag on CPU. Friction is now a property of sectors, NOT objects inside them. All objects, not just players, are affected by it, if they touch the sector's floor. Code simpler and faster, only calling on friction calculations when an object needs friction considered, instead of doing friction calculations on every sector during every tic. Although this -might- ruin Boom demo sync involving friction, it's the only way, short of code explosion, to fix the original design bug. Fixing the design bug in Boom's original friction code, while maintaining demo sync under every conceivable circumstance, would double or triple code size, and would require maintenance of buggy legacy code which is only useful for old demos. Doom demos, which are more important IMO, are not affected by this change./////////////////////////// Initialize the sectors where friction is increased or decreased killough 8/28/98: initialize all sectors to normal friction first The following check might seem odd. At the time of movement, the move distance is multiplied by 'friction/0x10000', so a higher friction value actually means 'less friction'. ice killough 8/28/98: prevent odd situations killough 8/28/98: Instead of spawning thinkers, which are slow and expensive, modify the sector's own friction values. Friction should be a property of sectors, not objects which reside inside them. Original code scanned every object in every friction sector on every tic, adjusting its friction, putting unnecessary drag on CPU. New code adjusts friction of sector only once at level startup, and then uses this friction value. phares 3/12/98: End of friction effects//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// PUSH/PULL EFFECT phares 3/20/98: Start of push/pull effects This is where push/pull effects are applied to objects in the sectors. There are four kinds of push effects 1) Pushing Away    Pushes you away from a point source defined by the location of an    MT_PUSH Thing. The force decreases linearly with distance from the    source. This force crosses sector boundaries and is felt w/in a circle    whose center is at the MT_PUSH. The force is felt only if the point    MT_PUSH can see the target object. 2) Pulling toward    Same as Pushing Away except you're pulled toward an MT_PULL point    source. This force crosses sector boundaries and is felt w/in a circle    whose center is at the MT_PULL. The force is felt only if the point    MT_PULL can see the target object. 3) Wind    Pushes you in a constant direction. Full force above ground, half    force on the ground, nothing if you're below it (water). 4) Current    Pushes you in a constant direction. No force above ground, full    force if on the ground or below it (water). The magnitude of the force is controlled by the length of a controlling linedef. The force vector for types 3 & 4 is determined by the angle of the linedef, and is constant. For each sector where these effects occur, the sector special type has to have the PUSH_MASK bit set. If this bit is turned off by a switch at run-time, the effect will not occur. The controlling sector for types 1 & 2 is the sector containing the MT_PUSH/MT_PULL Thing./////////////////////////// Add a push thinker to the thinker list point source exist? where force goes to zero/////////////////////////// PIT_PushThing determines the angle and magnitude of the effect. The object's x and y momentum values are changed. tmpusher belongs to the point source (MT_PUSH/MT_PULL). killough 10/98: allow to affect things besides players pusher structure for blockmap searches killough 10/98: made more general  killough 10/98: make magnitude decrease with square of distance, making it more in line with real nature, so long as it's still in range with original formula. Removes angular distortion, and makes effort required to stay close to source, grow increasingly hard as you get closer, as expected. Still, it doesn't consider z :( If speed <= 0, you're outside the effective radius. You also have to be able to see the push/pull source point. away/////////////////////////// T_Pusher looks for all objects that are inside the radius of the effect. Be sure the special sector type is still turned on. If so, proceed. Else, bail out; the sector type has been changed on us. For constant pushers (wind/current) there are 3 situations: 1) Affected Thing is above the floor.    Apply the full force if wind, no force if current. 2) Affected Thing is on the ground.    Apply half force if wind, full force if current. 3) Affected Thing is below the ground (underwater effect).    Apply no force if wind, full force if current. Seek out all pushable things within the force radius of this point pusher. Crosses sectors, so use blockmap. MT_PUSH/MT_PULL point source where force goes to zero constant pushers p_wind and p_current special water sector? things touching this sector NOT special water sector above ground full force on ground half force special water sector above ground full force underwater no force wading in water half force p_current NOT special water sector above ground no force on ground full force special water sector above ground no force underwater full force/////////////////////////// P_GetPushThing() returns a pointer to an MT_PUSH or MT_PULL thing, NULL otherwise./////////////////////////// Initialize the sectors where pushers are present wind current push/pull No MT_P* means no effect phares 3/20/98: End of Pusher effects//////////////////////////////////////////////////////////////////////////