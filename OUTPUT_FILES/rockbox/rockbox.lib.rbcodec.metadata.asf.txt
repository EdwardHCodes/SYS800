**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * $Id$
 *
 * Copyright (C) 2007 Dave Chapman
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** TODO: Just read the GUIDs into a 16-byte array, and use memcmp to compare  top level object guids  header level object guids  stream type guids  Read the 16 byte GUID from a file  Parse an integer from the extended content object - we always
   convert to an int, regardless of native format.
 Decode a LE utf16 string from a disk buffer into a fixed-sized
   utf8 buffer.
 Check for a surrogate pair  Run out of utf16 bytes, read some more  Truncated utf16 string, abort  We have run out of utf16 bytes, read more if available  Skip any remaining bytes DEBUGF("header.size=%d\n",(int)header.size); invalid size for header object  Two reserved bytes - do we need to read them? DEBUGF("Read header - size=%d, subobjects=%d\n",(int)header.size, (int)subobjects); TODO: Check that we have datalen bytes left in the file DEBUGF("Parsing header object %d - datalen=%d\n",i,(int)datalen);DEBUGF("not enough data for reading object\n");DEBUGF("invalid object size - current.size=%d, datalen=%d\n",(int)current.size,(int)datalen); multiple file properties objects not allowed  Get the number of logical packets - uint64_t at offset 32
                     * (little endian byte order) DEBUGF("read packets:  %llx %lld\n", wfx->numpackets, wfx->numpackets); Now get the play duration - uint64_t at offset 40 DEBUGF("****** length = %lums\n", id3->length); Read the packet size - uint32_t at offset 68  Skip bytes remaining in object DEBUGF("Found stream properties for non audio stream, skipping\n");DEBUGF("Found stream properties for audio stream %d\n",flags&0x7f);sanity check the included bitrate by comparing to file size and lengthin theory we could just use the estimated bitrate always,
                          but its safer to underestimate Round bitrate to the nearest kbit  Round bitrate to the nearest kbit DEBUGF("bitrate:  %d estimated:  %d\n", wfx->bitrate, estimated_bitrate); wma pro decoder needs the extra-data  Correct codectype to redirect playback to the proper .codec  Object contains five 16-bit string lengths, followed by the five strings:
                       title, artist, copyright, description, rating
                     DEBUGF("Found GUID_CONTENT_DESCRIPTION - size=%d\n",(int)(current.size - 24)); Read the 5 string lengths - number of bytes included trailing zero DEBUGF("strlength = %u\n",strlength[i]); 0 - Title  1 - Artist  2 - copyright  3 - description  4 - rating DEBUGF("Found GUID_EXTENDED_CONTENT_DESCRIPTION\n");DEBUGF("extended metadata count = %u\n",count); Expected is either "01 00 xx xx 03 yy yy yy yy" or
                             * "03 yy yy yy yy". xx is the size of the WM/Picture 
                             * container in bytes. yy equals the raw data length of 
                             * the embedded image.  In case the parsing will fail in the next step we 
                                 * might at least be able to skip the whole section.  Read the raw data length of the embedded image.  Reset utf8 buffer  Gather the album art format, this string has a
                                 * double zero-termination.  image/jpg is technically invalid,
                                     * but it does occur in the wild  Set the album art size and position. DEBUGF("File is encrypted\n");DEBUGF("Skipping %d bytes of object\n",(int)(current.size - 24));DEBUGF("Parsed object - size = %d\n",(int)current.size);DEBUGF("header data doesn't match given subobject count\n");DEBUGF("%d subobjects read successfully\n", i); header read ok but doesn't validate correctly DEBUGF("header validated correctly\n"); Store the current file position - no need to parse the header
       again in the codec.  The +26 skips the rest of the data object
       header.
      We copy the wfx struct to the MP3 TOC field in the id3 struct so
       the codec doesn't need to parse the header object again **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * $Id$
 *
 * Copyright (C) 2007 Dave Chapman
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** TODO: Just read the GUIDs into a 16-byte array, and use memcmp to compare  top level object guids  header level object guids  stream type guids  Read the 16 byte GUID from a file  Parse an integer from the extended content object - we always
   convert to an int, regardless of native format.
 Decode a LE utf16 string from a disk buffer into a fixed-sized
   utf8 buffer.
 Check for a surrogate pair  Run out of utf16 bytes, read some more  Truncated utf16 string, abort  We have run out of utf16 bytes, read more if available  Skip any remaining bytes DEBUGF("header.size=%d\n",(int)header.size); invalid size for header object  Two reserved bytes - do we need to read them? DEBUGF("Read header - size=%d, subobjects=%d\n",(int)header.size, (int)subobjects); TODO: Check that we have datalen bytes left in the file DEBUGF("Parsing header object %d - datalen=%d\n",i,(int)datalen);DEBUGF("not enough data for reading object\n");DEBUGF("invalid object size - current.size=%d, datalen=%d\n",(int)current.size,(int)datalen); multiple file properties objects not allowed  Get the number of logical packets - uint64_t at offset 32
                     * (little endian byte order) DEBUGF("read packets:  %llx %lld\n", wfx->numpackets, wfx->numpackets); Now get the play duration - uint64_t at offset 40 DEBUGF("****** length = %lums\n", id3->length); Read the packet size - uint32_t at offset 68  Skip bytes remaining in object DEBUGF("Found stream properties for non audio stream, skipping\n");DEBUGF("Found stream properties for audio stream %d\n",flags&0x7f);sanity check the included bitrate by comparing to file size and lengthin theory we could just use the estimated bitrate always,
                          but its safer to underestimate Round bitrate to the nearest kbit  Round bitrate to the nearest kbit DEBUGF("bitrate:  %d estimated:  %d\n", wfx->bitrate, estimated_bitrate); wma pro decoder needs the extra-data  Correct codectype to redirect playback to the proper .codec  Object contains five 16-bit string lengths, followed by the five strings:
                       title, artist, copyright, description, rating
                     DEBUGF("Found GUID_CONTENT_DESCRIPTION - size=%d\n",(int)(current.size - 24)); Read the 5 string lengths - number of bytes included trailing zero DEBUGF("strlength = %u\n",strlength[i]); 0 - Title  1 - Artist  2 - copyright  3 - description  4 - rating DEBUGF("Found GUID_EXTENDED_CONTENT_DESCRIPTION\n");DEBUGF("extended metadata count = %u\n",count); Expected is either "01 00 xx xx 03 yy yy yy yy" or
                             * "03 yy yy yy yy". xx is the size of the WM/Picture 
                             * container in bytes. yy equals the raw data length of 
                             * the embedded image.  In case the parsing will fail in the next step we 
                                 * might at least be able to skip the whole section.  Read the raw data length of the embedded image.  Reset utf8 buffer  Gather the album art format, this string has a
                                 * double zero-termination.  image/jpg is technically invalid,
                                     * but it does occur in the wild  Set the album art size and position. DEBUGF("File is encrypted\n");DEBUGF("Skipping %d bytes of object\n",(int)(current.size - 24));DEBUGF("Parsed object - size = %d\n",(int)current.size);DEBUGF("header data doesn't match given subobject count\n");DEBUGF("%d subobjects read successfully\n", i); header read ok but doesn't validate correctly DEBUGF("header validated correctly\n"); Store the current file position - no need to parse the header
       again in the codec.  The +26 skips the rest of the data object
       header.
      We copy the wfx struct to the MP3 TOC field in the id3 struct so
       the codec doesn't need to parse the header object again **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * $Id$
 *
 * Copyright (C) 2007 Dave Chapman
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** TODO: Just read the GUIDs into a 16-byte array, and use memcmp to compare  top level object guids  header level object guids  stream type guids  Read the 16 byte GUID from a file  Parse an integer from the extended content object - we always
   convert to an int, regardless of native format.
 Decode a LE utf16 string from a disk buffer into a fixed-sized
   utf8 buffer.
 Check for a surrogate pair  Run out of utf16 bytes, read some more  Truncated utf16 string, abort  We have run out of utf16 bytes, read more if available  Skip any remaining bytes DEBUGF("header.size=%d\n",(int)header.size); invalid size for header object  Two reserved bytes - do we need to read them? DEBUGF("Read header - size=%d, subobjects=%d\n",(int)header.size, (int)subobjects); TODO: Check that we have datalen bytes left in the file DEBUGF("Parsing header object %d - datalen=%d\n",i,(int)datalen);DEBUGF("not enough data for reading object\n");DEBUGF("invalid object size - current.size=%d, datalen=%d\n",(int)current.size,(int)datalen); multiple file properties objects not allowed  Get the number of logical packets - uint64_t at offset 32
                     * (little endian byte order) DEBUGF("read packets:  %llx %lld\n", wfx->numpackets, wfx->numpackets); Now get the play duration - uint64_t at offset 40 DEBUGF("****** length = %lums\n", id3->length); Read the packet size - uint32_t at offset 68  Skip bytes remaining in object DEBUGF("Found stream properties for non audio stream, skipping\n");DEBUGF("Found stream properties for audio stream %d\n",flags&0x7f);sanity check the included bitrate by comparing to file size and lengthin theory we could just use the estimated bitrate always,
                          but its safer to underestimate Round bitrate to the nearest kbit  Round bitrate to the nearest kbit DEBUGF("bitrate:  %d estimated:  %d\n", wfx->bitrate, estimated_bitrate); wma pro decoder needs the extra-data  Correct codectype to redirect playback to the proper .codec  Object contains five 16-bit string lengths, followed by the five strings:
                       title, artist, copyright, description, rating
                     DEBUGF("Found GUID_CONTENT_DESCRIPTION - size=%d\n",(int)(current.size - 24)); Read the 5 string lengths - number of bytes included trailing zero DEBUGF("strlength = %u\n",strlength[i]); 0 - Title  1 - Artist  2 - copyright  3 - description  4 - rating DEBUGF("Found GUID_EXTENDED_CONTENT_DESCRIPTION\n");DEBUGF("extended metadata count = %u\n",count); Expected is either "01 00 xx xx 03 yy yy yy yy" or
                             * "03 yy yy yy yy". xx is the size of the WM/Picture 
                             * container in bytes. yy equals the raw data length of 
                             * the embedded image.  In case the parsing will fail in the next step we 
                                 * might at least be able to skip the whole section.  Read the raw data length of the embedded image.  Reset utf8 buffer  Gather the album art format, this string has a
                                 * double zero-termination.  image/jpg is technically invalid,
                                     * but it does occur in the wild  Set the album art size and position. DEBUGF("File is encrypted\n");DEBUGF("Skipping %d bytes of object\n",(int)(current.size - 24));DEBUGF("Parsed object - size = %d\n",(int)current.size);DEBUGF("header data doesn't match given subobject count\n");DEBUGF("%d subobjects read successfully\n", i); header read ok but doesn't validate correctly DEBUGF("header validated correctly\n"); Store the current file position - no need to parse the header
       again in the codec.  The +26 skips the rest of the data object
       header.
      We copy the wfx struct to the MP3 TOC field in the id3 struct so
       the codec doesn't need to parse the header object again 