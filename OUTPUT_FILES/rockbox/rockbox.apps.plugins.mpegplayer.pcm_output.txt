**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * PCM output buffer definitions
 *
 * Copyright (c) 2007 Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** PCM channel we're using  Pointers  Start of buffer  End of buffer (not guard)  Read pointer  Write pointer  Bytes  Size of currently playing frame  Number of bytes read by DMA  Number of bytes written by source  Non-silence threshold  Clock  Clock at playback start  Our base clock  Timestamp adjusted  Small silence clip. ~5.80ms @ 44.1kHz  Delete all buffer contents  Advance a PCM buffer pointer by size bytes circularly  Return physical space used  wrap-safe  Return physical space free  Audio DMA handler  Free-up the last frame played frame if any  Just show a warning about this - will never happen
                 * without a corrupted buffer  Frame more than 100ms late - drop it  Ran out so revert to default watermark  Frame less than 100ms early - play it  Audio is time master - keep clock synchronized  Update base clock  Frame will be dropped - play silence clip  Ran out so revert to default watermark  Keep clock going at all times * Public interface * Return a buffer pointer if at least size bytes are available and if so,
 * give the actual free space  return actual free space (- header)  Leave *size alone so caller doesn't have to reinit  Commit the buffer returned by pcm_ouput_get_buffer; timestamp is PCM
 * clock time units, not video format time units  invalid  too big  Returns 'true' if the buffer is completely empty  Flushes the buffer - clock keeps counting  Stop PCM to clear current buffer  Restart if playing state was current  Seek the reference clock to the specified time - next audio data ready to
   go to DMA should be on the buffer with the same time index or else the PCM
   buffer should be empty  Return the clock as synchronized by audio frame timestamps  Reread if data race detected - rem will be 0 if driver hasn't yet
     * updated to the new buffer size. Also be sure pcm state doesn't
     * cause indefinite loop.
     *
     * FYI: NOT scrutinized for rd/wr reordering on different cores.  Return the raw clock as counted from the last pcm_output_set_clock
 * call  Same procedure as pcm_output_get_clock  Pauses/Starts pcm playback - and the clock  Stops all playback and resets the clock  Drains any data if the start threshold hasn't been reached  Select playback  Make the silence clip a square wave **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * PCM output buffer definitions
 *
 * Copyright (c) 2007 Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** PCM channel we're using  Pointers  Start of buffer  End of buffer (not guard)  Read pointer  Write pointer  Bytes  Size of currently playing frame  Number of bytes read by DMA  Number of bytes written by source  Non-silence threshold  Clock  Clock at playback start  Our base clock  Timestamp adjusted  Small silence clip. ~5.80ms @ 44.1kHz  Delete all buffer contents  Advance a PCM buffer pointer by size bytes circularly  Return physical space used  wrap-safe  Return physical space free  Audio DMA handler  Free-up the last frame played frame if any  Just show a warning about this - will never happen
                 * without a corrupted buffer  Frame more than 100ms late - drop it  Ran out so revert to default watermark  Frame less than 100ms early - play it  Audio is time master - keep clock synchronized  Update base clock  Frame will be dropped - play silence clip  Ran out so revert to default watermark  Keep clock going at all times * Public interface * Return a buffer pointer if at least size bytes are available and if so,
 * give the actual free space  return actual free space (- header)  Leave *size alone so caller doesn't have to reinit  Commit the buffer returned by pcm_ouput_get_buffer; timestamp is PCM
 * clock time units, not video format time units  invalid  too big  Returns 'true' if the buffer is completely empty  Flushes the buffer - clock keeps counting  Stop PCM to clear current buffer  Restart if playing state was current  Seek the reference clock to the specified time - next audio data ready to
   go to DMA should be on the buffer with the same time index or else the PCM
   buffer should be empty  Return the clock as synchronized by audio frame timestamps  Reread if data race detected - rem will be 0 if driver hasn't yet
     * updated to the new buffer size. Also be sure pcm state doesn't
     * cause indefinite loop.
     *
     * FYI: NOT scrutinized for rd/wr reordering on different cores.  Return the raw clock as counted from the last pcm_output_set_clock
 * call  Same procedure as pcm_output_get_clock  Pauses/Starts pcm playback - and the clock  Stops all playback and resets the clock  Drains any data if the start threshold hasn't been reached  Select playback  Make the silence clip a square wave **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * PCM output buffer definitions
 *
 * Copyright (c) 2007 Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** PCM channel we're using  Pointers  Start of buffer  End of buffer (not guard)  Read pointer  Write pointer  Bytes  Size of currently playing frame  Number of bytes read by DMA  Number of bytes written by source  Non-silence threshold  Clock  Clock at playback start  Our base clock  Timestamp adjusted  Small silence clip. ~5.80ms @ 44.1kHz  Delete all buffer contents  Advance a PCM buffer pointer by size bytes circularly  Return physical space used  wrap-safe  Return physical space free  Audio DMA handler  Free-up the last frame played frame if any  Just show a warning about this - will never happen
                 * without a corrupted buffer  Frame more than 100ms late - drop it  Ran out so revert to default watermark  Frame less than 100ms early - play it  Audio is time master - keep clock synchronized  Update base clock  Frame will be dropped - play silence clip  Ran out so revert to default watermark  Keep clock going at all times * Public interface * Return a buffer pointer if at least size bytes are available and if so,
 * give the actual free space  return actual free space (- header)  Leave *size alone so caller doesn't have to reinit  Commit the buffer returned by pcm_ouput_get_buffer; timestamp is PCM
 * clock time units, not video format time units  invalid  too big  Returns 'true' if the buffer is completely empty  Flushes the buffer - clock keeps counting  Stop PCM to clear current buffer  Restart if playing state was current  Seek the reference clock to the specified time - next audio data ready to
   go to DMA should be on the buffer with the same time index or else the PCM
   buffer should be empty  Return the clock as synchronized by audio frame timestamps  Reread if data race detected - rem will be 0 if driver hasn't yet
     * updated to the new buffer size. Also be sure pcm state doesn't
     * cause indefinite loop.
     *
     * FYI: NOT scrutinized for rd/wr reordering on different cores.  Return the raw clock as counted from the last pcm_output_set_clock
 * call  Same procedure as pcm_output_get_clock  Pauses/Starts pcm playback - and the clock  Stops all playback and resets the clock  Drains any data if the start threshold hasn't been reached  Select playback  Make the silence clip a square wave 