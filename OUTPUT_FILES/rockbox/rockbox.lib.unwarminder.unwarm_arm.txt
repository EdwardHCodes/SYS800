**************************************************************************
 * ARM Stack Unwinder, Michael.McTernan.2001@cs.bris.ac.uk
 *
 * This program is PUBLIC DOMAIN.
 * This means that there is no copyright and anyone is able to take a copy
 * for free and use it as they wish, with or without modifications, and in
 * any context, commercially or otherwise. The only limitation is that I
 * don't guarantee that the software is fit for any purpose or accept any
 * liability for it's use or misuse - this software is without warranty.
 ***************************************************************************
 * File Description: Abstract interpreter for ARM mode.
 ***************************************************************************************************************************************************
 * Include Files
 ***************************************************************************************************************************************************
 * Manifest Constants
 ***************************************************************************************************************************************************
 * Type Definitions
 ***************************************************************************************************************************************************
 * Variables
 ***************************************************************************************************************************************************
 * Macros
 ***************************************************************************************************************************************************
 * Local Functions
 ************************************************************************** Check if some instruction is a data-processing instruction.
 * Decodes the passed instruction, checks if it is a data-processing and
 * verifies that the parameters and operation really indicate a data-
 * processing instruction.  This is needed because some parts of the
 * instruction space under this instruction can be extended or represent
 * other operations such as MRS, MSR.
 *
 * \param[in] inst  The instruction word.
 * \retval TRUE  Further decoding of the instruction indicates that this is
 *                a valid data-processing instruction.
 * \retval FALSE This is not a data-processing instruction,
  TST, TEQ, CMP and CMN all require S to be set **************************************************************************
 * Global Functions
 ************************************************************************* Attempt to read the instruction  Check that the PC is still on Arm alignment  Check that the SP and PC have not been invalidated  Branch and Exchange (BX)
         *  This is tested prior to data processing to prevent
         *  mis-interpretation as an invalid TEQ instruction.
          Set the new PC value  Check if the return value is from the stack  Now have the return address  Report the return address  Determine the return mode  Branching to THUMB  Branch to ARM  Account for the auto-increment which isn't needed  Branch  Shift value  Sign extend if needed  Adjust PC  Account for pre-fetch, where normally the PC is 8 bytes
             *  ahead of the instruction just executed.
              MRS  Status registers untracked  MSR  Status registers untracked.
             *  Potentially this could change processor mode and switch
             *  banked registers r8-r14.  Most likely is that r13 (sp) will
             *  be banked.  However, invalidating r13 will stop unwinding
             *  when potentially this write is being used to disable/enable
             *  interrupts (a common case).  Therefore no invalidation is
             *  performed.
              Data processing  Decode operand 2  rotate const right by 2 * shiftDist  Register and shift  Get the shift distance  Get shift distance  Apply the shift type to the source register  logical left  logical right  arithmetic right  Register shifts maybe greater than 32  rotate right  Rotate right with extend.
                             *  This uses the carry bit and so always has an
                             *  untracked result.
                              Limit shift distance to 0-31 incase of register shift  Decide the data origin  Propagate register validity  AND: Rd := Op1 AND Op2  EOR: Rd := Op1 EOR Op2  SUB: Rd:= Op1 - Op2  RSB: Rd:= Op2 - Op1  ADD: Rd:= Op1 + Op2  ORR: Rd:= Op1 OR Op2  BIC: Rd:= Op1 AND NOT Op2  ADC: Rd:= Op1 + Op2 + C  SBC: Rd:= Op1 - Op2 + C  RSC: Rd:= Op2 - Op1 + C  CPSR is not tracked  TST: set condition codes on Op1 AND Op2  TEQ: set condition codes on Op1 EOR Op2  CMP: set condition codes on Op1 - Op2  CMN: set condition codes on Op1 + Op2  MOV: Rd:= Op2  MVN: Rd:= NOT Op2  Account for pre-fetch by temporarily adjusting PC  If the shift amount is specified in the instruction,
                 *  the PC will be 8 bytes ahead. If a register is used
                 *  to specify the shift amount the PC will be 12 bytes
                 *  ahead.
                  Compute values  AND: Rd := Op1 AND Op2  EOR: Rd := Op1 EOR Op2  SUB: Rd:= Op1 - Op2  RSB: Rd:= Op2 - Op1  ADD: Rd:= Op1 + Op2  ADC: Rd:= Op1 + Op2 + C  SBC: Rd:= Op1 - Op2 + C  RSC: Rd:= Op2 - Op1 + C  TST: set condition codes on Op1 AND Op2  TEQ: set condition codes on Op1 EOR Op2  CMP: set condition codes on Op1 - Op2  CMN: set condition codes on Op1 + Op2  ORR: Rd:= Op1 OR Op2  MOV: Rd:= Op2  BIC: Rd:= Op1 AND NOT Op2  MVN: Rd:= NOT Op2  Remove the prefetch offset from the PC  Block Data Transfer
         *  LDM, STM
          Display the instruction  S indicates that banked registers (untracked) are used, unless
             *  this is a load including the PC when the S-bit indicates that
             *  that CPSR is loaded from SPSR (also untracked, but ignored).
              Check if ascending or descending.
             *  Registers are loaded/stored in order of address.
             *  i.e. r0 is at the lowest address, r15 at the highest.
              Check if the register is to be transferred  Update the origin if read via the stack pointer  Invalidate the register as the base reg was invalid  Check the next register  Check the writeback bit  Check if the PC was loaded  Return address is not valid  Store the return address  Determine the return mode  Branching to THUMB  Branch to ARM  Account for the auto-increment which isn't needed  Unknown/undecoded.  May alter some register, so invalidate file  Should never hit the reset vector  Check next address  Garbage collect the memory hash (used only for the stack)  UPGRADE_ARM_STACK_UNWIND  END OF FILE **************************************************************************
 * ARM Stack Unwinder, Michael.McTernan.2001@cs.bris.ac.uk
 *
 * This program is PUBLIC DOMAIN.
 * This means that there is no copyright and anyone is able to take a copy
 * for free and use it as they wish, with or without modifications, and in
 * any context, commercially or otherwise. The only limitation is that I
 * don't guarantee that the software is fit for any purpose or accept any
 * liability for it's use or misuse - this software is without warranty.
 ***************************************************************************
 * File Description: Abstract interpreter for ARM mode.
 ***************************************************************************************************************************************************
 * Include Files
 ***************************************************************************************************************************************************
 * Manifest Constants
 ***************************************************************************************************************************************************
 * Type Definitions
 ***************************************************************************************************************************************************
 * Variables
 ***************************************************************************************************************************************************
 * Macros
 ***************************************************************************************************************************************************
 * Local Functions
 ************************************************************************** Check if some instruction is a data-processing instruction.
 * Decodes the passed instruction, checks if it is a data-processing and
 * verifies that the parameters and operation really indicate a data-
 * processing instruction.  This is needed because some parts of the
 * instruction space under this instruction can be extended or represent
 * other operations such as MRS, MSR.
 *
 * \param[in] inst  The instruction word.
 * \retval TRUE  Further decoding of the instruction indicates that this is
 *                a valid data-processing instruction.
 * \retval FALSE This is not a data-processing instruction,
  TST, TEQ, CMP and CMN all require S to be set **************************************************************************
 * Global Functions
 ************************************************************************* Attempt to read the instruction  Check that the PC is still on Arm alignment  Check that the SP and PC have not been invalidated  Branch and Exchange (BX)
         *  This is tested prior to data processing to prevent
         *  mis-interpretation as an invalid TEQ instruction.
          Set the new PC value  Check if the return value is from the stack  Now have the return address  Report the return address  Determine the return mode  Branching to THUMB  Branch to ARM  Account for the auto-increment which isn't needed  Branch  Shift value  Sign extend if needed  Adjust PC  Account for pre-fetch, where normally the PC is 8 bytes
             *  ahead of the instruction just executed.
              MRS  Status registers untracked  MSR  Status registers untracked.
             *  Potentially this could change processor mode and switch
             *  banked registers r8-r14.  Most likely is that r13 (sp) will
             *  be banked.  However, invalidating r13 will stop unwinding
             *  when potentially this write is being used to disable/enable
             *  interrupts (a common case).  Therefore no invalidation is
             *  performed.
              Data processing  Decode operand 2  rotate const right by 2 * shiftDist  Register and shift  Get the shift distance  Get shift distance  Apply the shift type to the source register  logical left  logical right  arithmetic right  Register shifts maybe greater than 32  rotate right  Rotate right with extend.
                             *  This uses the carry bit and so always has an
                             *  untracked result.
                              Limit shift distance to 0-31 incase of register shift  Decide the data origin  Propagate register validity  AND: Rd := Op1 AND Op2  EOR: Rd := Op1 EOR Op2  SUB: Rd:= Op1 - Op2  RSB: Rd:= Op2 - Op1  ADD: Rd:= Op1 + Op2  ORR: Rd:= Op1 OR Op2  BIC: Rd:= Op1 AND NOT Op2  ADC: Rd:= Op1 + Op2 + C  SBC: Rd:= Op1 - Op2 + C  RSC: Rd:= Op2 - Op1 + C  CPSR is not tracked  TST: set condition codes on Op1 AND Op2  TEQ: set condition codes on Op1 EOR Op2  CMP: set condition codes on Op1 - Op2  CMN: set condition codes on Op1 + Op2  MOV: Rd:= Op2  MVN: Rd:= NOT Op2  Account for pre-fetch by temporarily adjusting PC  If the shift amount is specified in the instruction,
                 *  the PC will be 8 bytes ahead. If a register is used
                 *  to specify the shift amount the PC will be 12 bytes
                 *  ahead.
                  Compute values  AND: Rd := Op1 AND Op2  EOR: Rd := Op1 EOR Op2  SUB: Rd:= Op1 - Op2  RSB: Rd:= Op2 - Op1  ADD: Rd:= Op1 + Op2  ADC: Rd:= Op1 + Op2 + C  SBC: Rd:= Op1 - Op2 + C  RSC: Rd:= Op2 - Op1 + C  TST: set condition codes on Op1 AND Op2  TEQ: set condition codes on Op1 EOR Op2  CMP: set condition codes on Op1 - Op2  CMN: set condition codes on Op1 + Op2  ORR: Rd:= Op1 OR Op2  MOV: Rd:= Op2  BIC: Rd:= Op1 AND NOT Op2  MVN: Rd:= NOT Op2  Remove the prefetch offset from the PC  Block Data Transfer
         *  LDM, STM
          Display the instruction  S indicates that banked registers (untracked) are used, unless
             *  this is a load including the PC when the S-bit indicates that
             *  that CPSR is loaded from SPSR (also untracked, but ignored).
              Check if ascending or descending.
             *  Registers are loaded/stored in order of address.
             *  i.e. r0 is at the lowest address, r15 at the highest.
              Check if the register is to be transferred  Update the origin if read via the stack pointer  Invalidate the register as the base reg was invalid  Check the next register  Check the writeback bit  Check if the PC was loaded  Return address is not valid  Store the return address  Determine the return mode  Branching to THUMB  Branch to ARM  Account for the auto-increment which isn't needed  Unknown/undecoded.  May alter some register, so invalidate file  Should never hit the reset vector  Check next address  Garbage collect the memory hash (used only for the stack)  UPGRADE_ARM_STACK_UNWIND  END OF FILE **************************************************************************
 * ARM Stack Unwinder, Michael.McTernan.2001@cs.bris.ac.uk
 *
 * This program is PUBLIC DOMAIN.
 * This means that there is no copyright and anyone is able to take a copy
 * for free and use it as they wish, with or without modifications, and in
 * any context, commercially or otherwise. The only limitation is that I
 * don't guarantee that the software is fit for any purpose or accept any
 * liability for it's use or misuse - this software is without warranty.
 ***************************************************************************
 * File Description: Abstract interpreter for ARM mode.
 ***************************************************************************************************************************************************
 * Include Files
 ***************************************************************************************************************************************************
 * Manifest Constants
 ***************************************************************************************************************************************************
 * Type Definitions
 ***************************************************************************************************************************************************
 * Variables
 ***************************************************************************************************************************************************
 * Macros
 ***************************************************************************************************************************************************
 * Local Functions
 ************************************************************************** Check if some instruction is a data-processing instruction.
 * Decodes the passed instruction, checks if it is a data-processing and
 * verifies that the parameters and operation really indicate a data-
 * processing instruction.  This is needed because some parts of the
 * instruction space under this instruction can be extended or represent
 * other operations such as MRS, MSR.
 *
 * \param[in] inst  The instruction word.
 * \retval TRUE  Further decoding of the instruction indicates that this is
 *                a valid data-processing instruction.
 * \retval FALSE This is not a data-processing instruction,
  TST, TEQ, CMP and CMN all require S to be set **************************************************************************
 * Global Functions
 ************************************************************************* Attempt to read the instruction  Check that the PC is still on Arm alignment  Check that the SP and PC have not been invalidated  Branch and Exchange (BX)
         *  This is tested prior to data processing to prevent
         *  mis-interpretation as an invalid TEQ instruction.
          Set the new PC value  Check if the return value is from the stack  Now have the return address  Report the return address  Determine the return mode  Branching to THUMB  Branch to ARM  Account for the auto-increment which isn't needed  Branch  Shift value  Sign extend if needed  Adjust PC  Account for pre-fetch, where normally the PC is 8 bytes
             *  ahead of the instruction just executed.
              MRS  Status registers untracked  MSR  Status registers untracked.
             *  Potentially this could change processor mode and switch
             *  banked registers r8-r14.  Most likely is that r13 (sp) will
             *  be banked.  However, invalidating r13 will stop unwinding
             *  when potentially this write is being used to disable/enable
             *  interrupts (a common case).  Therefore no invalidation is
             *  performed.
              Data processing  Decode operand 2  rotate const right by 2 * shiftDist  Register and shift  Get the shift distance  Get shift distance  Apply the shift type to the source register  logical left  logical right  arithmetic right  Register shifts maybe greater than 32  rotate right  Rotate right with extend.
                             *  This uses the carry bit and so always has an
                             *  untracked result.
                              Limit shift distance to 0-31 incase of register shift  Decide the data origin  Propagate register validity  AND: Rd := Op1 AND Op2  EOR: Rd := Op1 EOR Op2  SUB: Rd:= Op1 - Op2  RSB: Rd:= Op2 - Op1  ADD: Rd:= Op1 + Op2  ORR: Rd:= Op1 OR Op2  BIC: Rd:= Op1 AND NOT Op2  ADC: Rd:= Op1 + Op2 + C  SBC: Rd:= Op1 - Op2 + C  RSC: Rd:= Op2 - Op1 + C  CPSR is not tracked  TST: set condition codes on Op1 AND Op2  TEQ: set condition codes on Op1 EOR Op2  CMP: set condition codes on Op1 - Op2  CMN: set condition codes on Op1 + Op2  MOV: Rd:= Op2  MVN: Rd:= NOT Op2  Account for pre-fetch by temporarily adjusting PC  If the shift amount is specified in the instruction,
                 *  the PC will be 8 bytes ahead. If a register is used
                 *  to specify the shift amount the PC will be 12 bytes
                 *  ahead.
                  Compute values  AND: Rd := Op1 AND Op2  EOR: Rd := Op1 EOR Op2  SUB: Rd:= Op1 - Op2  RSB: Rd:= Op2 - Op1  ADD: Rd:= Op1 + Op2  ADC: Rd:= Op1 + Op2 + C  SBC: Rd:= Op1 - Op2 + C  RSC: Rd:= Op2 - Op1 + C  TST: set condition codes on Op1 AND Op2  TEQ: set condition codes on Op1 EOR Op2  CMP: set condition codes on Op1 - Op2  CMN: set condition codes on Op1 + Op2  ORR: Rd:= Op1 OR Op2  MOV: Rd:= Op2  BIC: Rd:= Op1 AND NOT Op2  MVN: Rd:= NOT Op2  Remove the prefetch offset from the PC  Block Data Transfer
         *  LDM, STM
          Display the instruction  S indicates that banked registers (untracked) are used, unless
             *  this is a load including the PC when the S-bit indicates that
             *  that CPSR is loaded from SPSR (also untracked, but ignored).
              Check if ascending or descending.
             *  Registers are loaded/stored in order of address.
             *  i.e. r0 is at the lowest address, r15 at the highest.
              Check if the register is to be transferred  Update the origin if read via the stack pointer  Invalidate the register as the base reg was invalid  Check the next register  Check the writeback bit  Check if the PC was loaded  Return address is not valid  Store the return address  Determine the return mode  Branching to THUMB  Branch to ARM  Account for the auto-increment which isn't needed  Unknown/undecoded.  May alter some register, so invalidate file  Should never hit the reset vector  Check next address  Garbage collect the memory hash (used only for the stack)  UPGRADE_ARM_STACK_UNWIND  END OF FILE 