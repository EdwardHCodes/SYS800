static	long IIR_ALPHA, ACC_COEF_A, ACC_COEF_B, ACC_COEF_C, ACC_COEF_D, IIR_COEF, FB_ALPHA, FB_X,		IN_COEF_L, IN_COEF_R;static const double fp_scale = (double) (1 << FRACBITS); no need for 64-bit ints here  src can be no greater than 2^16-1, which allows sample rates up
     * to 65KHz  static char err[256]; extern __stdcall OutputDebugStringA(char *);		sprintf(err + strlen(err), ", new_delay: %d, MV_ReverbDelay: %d", new_delay, MV_ReverbDelay); get_buffer content helper: takes care about wraps set_buffer content helper: takes care about wraps and clipping set_buffer (+1 sample) content helper: takes care about wraps and clippingrb->splashf(HZ, "SLOW CODE!!!");	sprintf(err, "count: %d, old_delay: %d", count, delay);EnterCriticalSection(&reverbCS); DAVEget out now!!!	OutputDebugStringA(err); evaluation order matters LeaveCriticalSection(&reverbCS);EnterCriticalSection(&reverbCS);LeaveCriticalSection(&reverbCS);
void MV_16BitReverbFast( const char *src, char *dest, int count, int shift )
{
	int i;

	short *pdest = (short *)dest;
	const short *psrc = (const short *)src;

	for (i = 0; i < count; i++) {
            pdest[i] = readLE16(psrc + i) >> shift;
	}
}

void MV_8BitReverbFast( const signed char *src, signed char *dest, int count, int shift )
{
	int i;

	unsigned char sh = 0x80 - (0x80 >> shift);

	for (i = 0; i < count; i++) {
		unsigned char a = ((unsigned char) src[i]) >> shift;
		unsigned char c = (((unsigned char) src[i]) ^ 0x80) >> 7;

		dest[i] = (signed char) (a + sh + c);
	}
}
static	long IIR_ALPHA, ACC_COEF_A, ACC_COEF_B, ACC_COEF_C, ACC_COEF_D, IIR_COEF, FB_ALPHA, FB_X,		IN_COEF_L, IN_COEF_R;static const double fp_scale = (double) (1 << FRACBITS); no need for 64-bit ints here  src can be no greater than 2^16-1, which allows sample rates up
     * to 65KHz  static char err[256]; extern __stdcall OutputDebugStringA(char *);		sprintf(err + strlen(err), ", new_delay: %d, MV_ReverbDelay: %d", new_delay, MV_ReverbDelay); get_buffer content helper: takes care about wraps set_buffer content helper: takes care about wraps and clipping set_buffer (+1 sample) content helper: takes care about wraps and clippingrb->splashf(HZ, "SLOW CODE!!!");	sprintf(err, "count: %d, old_delay: %d", count, delay);EnterCriticalSection(&reverbCS); DAVEget out now!!!	OutputDebugStringA(err); evaluation order matters LeaveCriticalSection(&reverbCS);EnterCriticalSection(&reverbCS);LeaveCriticalSection(&reverbCS);
void MV_16BitReverbFast( const char *src, char *dest, int count, int shift )
{
	int i;

	short *pdest = (short *)dest;
	const short *psrc = (const short *)src;

	for (i = 0; i < count; i++) {
            pdest[i] = readLE16(psrc + i) >> shift;
	}
}

void MV_8BitReverbFast( const signed char *src, signed char *dest, int count, int shift )
{
	int i;

	unsigned char sh = 0x80 - (0x80 >> shift);

	for (i = 0; i < count; i++) {
		unsigned char a = ((unsigned char) src[i]) >> shift;
		unsigned char c = (((unsigned char) src[i]) ^ 0x80) >> 7;

		dest[i] = (signed char) (a + sh + c);
	}
}
static	long IIR_ALPHA, ACC_COEF_A, ACC_COEF_B, ACC_COEF_C, ACC_COEF_D, IIR_COEF, FB_ALPHA, FB_X,		IN_COEF_L, IN_COEF_R;static const double fp_scale = (double) (1 << FRACBITS); no need for 64-bit ints here  src can be no greater than 2^16-1, which allows sample rates up
     * to 65KHz  static char err[256]; extern __stdcall OutputDebugStringA(char *);		sprintf(err + strlen(err), ", new_delay: %d, MV_ReverbDelay: %d", new_delay, MV_ReverbDelay); get_buffer content helper: takes care about wraps set_buffer content helper: takes care about wraps and clipping set_buffer (+1 sample) content helper: takes care about wraps and clippingrb->splashf(HZ, "SLOW CODE!!!");	sprintf(err, "count: %d, old_delay: %d", count, delay);EnterCriticalSection(&reverbCS); DAVEget out now!!!	OutputDebugStringA(err); evaluation order matters LeaveCriticalSection(&reverbCS);EnterCriticalSection(&reverbCS);LeaveCriticalSection(&reverbCS);
void MV_16BitReverbFast( const char *src, char *dest, int count, int shift )
{
	int i;

	short *pdest = (short *)dest;
	const short *psrc = (const short *)src;

	for (i = 0; i < count; i++) {
            pdest[i] = readLE16(psrc + i) >> shift;
	}
}

void MV_8BitReverbFast( const signed char *src, signed char *dest, int count, int shift )
{
	int i;

	unsigned char sh = 0x80 - (0x80 >> shift);

	for (i = 0; i < count; i++) {
		unsigned char a = ((unsigned char) src[i]) >> shift;
		unsigned char c = (((unsigned char) src[i]) ^ 0x80) >> 7;

		dest[i] = (signed char) (a + sh + c);
	}
}
