
 * Copyright © 2008 Rafaël Carré <rafael.carre@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 *
  snprintf()  ANSI colors  disable colors  byte swapping  all blocks are sized as a multiple of 0x1ff  If you find a firmware that breaks the known format ^^  globals  file size  file content  1st block description  malloc helper  checksums the firmware (the firmware header contains the verification)  verify the firmware header  no whole file checksum  no whole file checksum  verify whole file checksum  0x200 * bs_multiplier  variable  the 2nd block is identical, except that the 1st byte has been incremented  first word: char*  library block hacking  assert(stop > start);  assert(stop - start == size);  ?  nmbr of functions  if 1 function is exported, it's empty  printf("0x%.4x ",fptr);  reset counters if needed  print only the number of following blocks  same  for other block types, always print the offset  unknown\0 , 10K max  do not dump unknown blocks  some blocks begin with 0xdeadbeef but aren't padded with that value  XXX: we should check that the address at which
									* the string is located is included in this
									* library block's size, but we only know the
									* block's size after we confirmed that this is 
									* a library block (by looking at the 11 chars
									* ASCII string).  library block  first 4 bytes le are the block size  look at the next 0x200 bytes if we can recognize a block type  then skip its real size  and look at the next block ;)  statistics  load the whole file into memory  verify header and checksums  split in blocks 
 * Copyright © 2008 Rafaël Carré <rafael.carre@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 *
  snprintf()  ANSI colors  disable colors  byte swapping  all blocks are sized as a multiple of 0x1ff  If you find a firmware that breaks the known format ^^  globals  file size  file content  1st block description  malloc helper  checksums the firmware (the firmware header contains the verification)  verify the firmware header  no whole file checksum  no whole file checksum  verify whole file checksum  0x200 * bs_multiplier  variable  the 2nd block is identical, except that the 1st byte has been incremented  first word: char*  library block hacking  assert(stop > start);  assert(stop - start == size);  ?  nmbr of functions  if 1 function is exported, it's empty  printf("0x%.4x ",fptr);  reset counters if needed  print only the number of following blocks  same  for other block types, always print the offset  unknown\0 , 10K max  do not dump unknown blocks  some blocks begin with 0xdeadbeef but aren't padded with that value  XXX: we should check that the address at which
									* the string is located is included in this
									* library block's size, but we only know the
									* block's size after we confirmed that this is 
									* a library block (by looking at the 11 chars
									* ASCII string).  library block  first 4 bytes le are the block size  look at the next 0x200 bytes if we can recognize a block type  then skip its real size  and look at the next block ;)  statistics  load the whole file into memory  verify header and checksums  split in blocks 
 * Copyright © 2008 Rafaël Carré <rafael.carre@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 *
  snprintf()  ANSI colors  disable colors  byte swapping  all blocks are sized as a multiple of 0x1ff  If you find a firmware that breaks the known format ^^  globals  file size  file content  1st block description  malloc helper  checksums the firmware (the firmware header contains the verification)  verify the firmware header  no whole file checksum  no whole file checksum  verify whole file checksum  0x200 * bs_multiplier  variable  the 2nd block is identical, except that the 1st byte has been incremented  first word: char*  library block hacking  assert(stop > start);  assert(stop - start == size);  ?  nmbr of functions  if 1 function is exported, it's empty  printf("0x%.4x ",fptr);  reset counters if needed  print only the number of following blocks  same  for other block types, always print the offset  unknown\0 , 10K max  do not dump unknown blocks  some blocks begin with 0xdeadbeef but aren't padded with that value  XXX: we should check that the address at which
									* the string is located is included in this
									* library block's size, but we only know the
									* block's size after we confirmed that this is 
									* a library block (by looking at the 11 chars
									* ASCII string).  library block  first 4 bytes le are the block size  look at the next 0x200 bytes if we can recognize a block type  then skip its real size  and look at the next block ;)  statistics  load the whole file into memory  verify header and checksums  split in blocks 