**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2008 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Extend the basic SPI transfer descriptor with our own fields  Pick _either_ data or semaphore  Enabled ints  Enabled sense reading  ISR transfer descriptor  Current event in callback  Prevent SPI callback from
                                                     unmasking GPIO interrupt
                                                     (lockout)  Called when a transfer is finished and data is ready/written  Efficient interrupt status and acking  Restore PMIC interrupt events  Call handlers  Only clear interrupts with handlers  Setup the write packets with status(es) to clear  Only read sense if any pending interrupts have them enabled  GPIO interrupt handler for mc13783  Mask the interrupt (unmasked after final read services it).  Setup the read packets  Do these without intervening transfers  Start this provisionally and fill-in actual values during the
           first transfer's callback - set whatever could be known  Serial interface must have been initialized first!  Enable the PMIC SPI module  Mask any PMIC interrupts for now - modules will enable them as
     * required  Mask GPIO while changing bits around  Called when the first transfer of mc13783_write_masked is complete  & ~mask  Queue up two transfers in a row **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2008 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Extend the basic SPI transfer descriptor with our own fields  Pick _either_ data or semaphore  Enabled ints  Enabled sense reading  ISR transfer descriptor  Current event in callback  Prevent SPI callback from
                                                     unmasking GPIO interrupt
                                                     (lockout)  Called when a transfer is finished and data is ready/written  Efficient interrupt status and acking  Restore PMIC interrupt events  Call handlers  Only clear interrupts with handlers  Setup the write packets with status(es) to clear  Only read sense if any pending interrupts have them enabled  GPIO interrupt handler for mc13783  Mask the interrupt (unmasked after final read services it).  Setup the read packets  Do these without intervening transfers  Start this provisionally and fill-in actual values during the
           first transfer's callback - set whatever could be known  Serial interface must have been initialized first!  Enable the PMIC SPI module  Mask any PMIC interrupts for now - modules will enable them as
     * required  Mask GPIO while changing bits around  Called when the first transfer of mc13783_write_masked is complete  & ~mask  Queue up two transfers in a row **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2008 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Extend the basic SPI transfer descriptor with our own fields  Pick _either_ data or semaphore  Enabled ints  Enabled sense reading  ISR transfer descriptor  Current event in callback  Prevent SPI callback from
                                                     unmasking GPIO interrupt
                                                     (lockout)  Called when a transfer is finished and data is ready/written  Efficient interrupt status and acking  Restore PMIC interrupt events  Call handlers  Only clear interrupts with handlers  Setup the write packets with status(es) to clear  Only read sense if any pending interrupts have them enabled  GPIO interrupt handler for mc13783  Mask the interrupt (unmasked after final read services it).  Setup the read packets  Do these without intervening transfers  Start this provisionally and fill-in actual values during the
           first transfer's callback - set whatever could be known  Serial interface must have been initialized first!  Enable the PMIC SPI module  Mask any PMIC interrupts for now - modules will enable them as
     * required  Mask GPIO while changing bits around  Called when the first transfer of mc13783_write_masked is complete  & ~mask  Queue up two transfers in a row 