*
     * UI callback from the table when row is selected.
     * @param oldValue
     * @param newValue
      passing device as 3rd argument will create transient patient info objects based on the device information. Passing null will only lookup existing patients and will not handle devices assigned to unknown partitions. deviceAssignments get populated listening to the MDS assignments; those notification could arrive before the list of devices is build. As device connectivity flickers, it will rebroadcast its availability, but the patient assignment will not be repeated. So we do not remove it from the pendingAssociation list as it will be consulted every time device reconnects to the network.*
     * @return current device association or null
     *
     * A table cell containing a button deleting the row.
     * pads and centers the add button in the cell.*
         * places a button in the row only if the row is not empty.
         **
     * called by the IOC framework when the component is all wired up and ready to go
     * @throws Exception when things go wrong
      Set the person into the controller Show the dialog and wait until the user closes it*
     * called by the IOC framework when the component is about to be shut down.
     * @throws Exception when things go wrong
     *
     * The app will listen for all devices advertise their patient association.
     * @param evt
     *
     * UI callback from the table when row is selected.
     * @param oldValue
     * @param newValue
      passing device as 3rd argument will create transient patient info objects based on the device information. Passing null will only lookup existing patients and will not handle devices assigned to unknown partitions. deviceAssignments get populated listening to the MDS assignments; those notification could arrive before the list of devices is build. As device connectivity flickers, it will rebroadcast its availability, but the patient assignment will not be repeated. So we do not remove it from the pendingAssociation list as it will be consulted every time device reconnects to the network.*
     * @return current device association or null
     *
     * A table cell containing a button deleting the row.
     * pads and centers the add button in the cell.*
         * places a button in the row only if the row is not empty.
         **
     * called by the IOC framework when the component is all wired up and ready to go
     * @throws Exception when things go wrong
      Set the person into the controller Show the dialog and wait until the user closes it*
     * called by the IOC framework when the component is about to be shut down.
     * @throws Exception when things go wrong
     *
     * The app will listen for all devices advertise their patient association.
     * @param evt
     *
     * UI callback from the table when row is selected.
     * @param oldValue
     * @param newValue
      passing device as 3rd argument will create transient patient info objects based on the device information. Passing null will only lookup existing patients and will not handle devices assigned to unknown partitions. deviceAssignments get populated listening to the MDS assignments; those notification could arrive before the list of devices is build. As device connectivity flickers, it will rebroadcast its availability, but the patient assignment will not be repeated. So we do not remove it from the pendingAssociation list as it will be consulted every time device reconnects to the network.*
     * @return current device association or null
     *
     * A table cell containing a button deleting the row.
     * pads and centers the add button in the cell.*
         * places a button in the row only if the row is not empty.
         **
     * called by the IOC framework when the component is all wired up and ready to go
     * @throws Exception when things go wrong
      Set the person into the controller Show the dialog and wait until the user closes it*
     * called by the IOC framework when the component is about to be shut down.
     * @throws Exception when things go wrong
     *
     * The app will listen for all devices advertise their patient association.
     * @param evt
     *
     * UI callback from the table when row is selected.
     * @param oldValue
     * @param newValue
      passing device as 3rd argument will create transient patient info objects based on the device information. Passing null will only lookup existing patients and will not handle devices assigned to unknown partitions. deviceAssignments get populated listening to the MDS assignments; those notification could arrive before the list of devices is build. As device connectivity flickers, it will rebroadcast its availability, but the patient assignment will not be repeated. So we do not remove it from the pendingAssociation list as it will be consulted every time device reconnects to the network.*
     * @return current device association or null
     *
     * A table cell containing a button deleting the row.
     * pads and centers the add button in the cell.*
         * places a button in the row only if the row is not empty.
         **
     * called by the IOC framework when the component is all wired up and ready to go
     * @throws Exception when things go wrong
      Set the person into the controller Show the dialog and wait until the user closes it*
     * called by the IOC framework when the component is about to be shut down.
     * @throws Exception when things go wrong
     *
     * The app will listen for all devices advertise their patient association.
     * @param evt
     