**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Pacbox - a Pacman Emulator for Rockbox
 *
 * Based on PIE - Pacman Instructional Emulator
 *
 * Copyright (c) 1997-2003,2004 Alessandro Scotti
 * http://www.ascotti.org/
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Table with parity, sign and zero flags precomputed for each byte value Interrupt flags Interrupts enabled/disabled Copy of IFF1 (used by non-maskable interrupts) Internal use: signals that the CPU is halted Implements an opcode Implements an opcode for instructions that use the form (IX/IY + b)* *  Interrupt mode (bits 0 and 1) and flags Number of CPU cycles elapsed so far Registers@- B register@- C register@- D register@- E register@- H register@- L register@- A register (accumulator)@- Flags register@- Alternate B register (B')@- Alternate C register (C')@- Alternate D register (D')@- Alternate E register (E')@- Alternate H register (H')@- Alternate L register (L')@- Alternate A register (A')@- Alternate flags register (F')@- Index register X@- Index register Y@- Program counter@- Stack pointer@- Interrupt register@- Refresh register* Returns the 16 bit register BC. * 
    Returns the number of Z80 CPU cycles elapsed so far. 

    The cycle count is reset to zero when reset() is called, or
    it can be set to any value with setCycles(). It is updated after
    a CPU instruction is executed, for example by calling step()
    or interrupt().
* Sets the CPU cycle counter to the specified value. * Returns the current interrupt mode. * Sets the interrupt mode to the specified value. * Returns non-zero if the CPU is halted, otherwise zero. 
    Sets the interrupt mode to IM0, IM1 or IM2.

    Calls a subroutine at the specified address.
 Save current program counter in the stack Jump to the specified address
    Decrements a byte value by one. 
    Note that this is different from subtracting one from the byte value,
    because flags behave differently.
 Preserve the carry flag
    Increments a byte value by one. 
    Note that this is different from adding one to the byte value,
    because flags behave differently.
 Preserve the carry flag
    Reads one byte from port C, updating flags according to the rules of "IN r,(C)".

    Performs a relative jump to the specified offset.

    Returns from a subroutine, popping the saved Program Counter from the stack.

    Rotates left one byte thru the carry flag.

    Rotates left one byte copying the most significant bit (bit 7) in the carry flag.

    Rotates right one byte thru the carry flag.

    Rotates right one byte copying the least significant bit (bit 0) in the carry flag.

    Shifts left one byte.

    Shifts right one byte, preserving its sign (most significant bit).

    Shifts right one byte.

    Tests whether the specified bit of op is set.
 Flags for a bit test operation are: S, P: unknown Z: set if bit is zero, reset otherwise N: reset H: set C: unaffected However, it seems that parity is always set like Z, so we emulate that as well. Bit is not set, so set the zero flag
    Adds the specified byte op to the accumulator, adding
    carry.
 Add carry
        Halfcarry is set on carry from the low order four bits.

        To see how to compute it, let's take a look at the following table, which
        shows the binary addition of two binary numbers:

        A   B   A+B
        -----------
        0   0   0
        0   1   1
        1   0   1
        1   1   0

        Note that if only the lowest bit is used, then A+B, A-B and A^B yield the same 
        value. If we know A, B and the sum A+B+C, then C is easily derived:
            C = A+B+C - A - B,  that is
            C = A+B+C ^ A ^ B.

        For the halfcarry, A and B above are the fifth bit of a byte, which corresponds
        to the value 0x10. So:

            Halfcarry = ((accumulator+operand+halfcarry) ^ accumulator ^ operand) & 0x10

        Note that masking off all bits but one is important because we have worked all
        the math by using one bit only.
    
        The overflow bit is set when the result is too large to fit into the destination
        register, causing a change in the sign bit.

        For a sum, we can only have overflow when adding two numbers that are both positive
        or both negative. For example 0x5E + 0x4B (94 + 75) yields 0xA9 (169), which fits
        into an 8-bit register only if it is interpreted as an unsigned number. If we 
        consider the result as a signed integer, then 0xA9 corresponds to decimal -87 and
        we have overflow.
        Note that if we add two signed numbers of opposite sign then we cannot overflow
        the destination register, because the absolute value of the result will always fit
        in 7 bits, leaving the most significant bit free for use as a sign bit.

        We can code all the above concisely by noting that:

            ~(A ^ op) & 0x80

        is true if and only if A and op have the same sign. Also:

            (x ^ op) & 0x80

        is true if and only if the sum of A and op has taken a sign opposite to that
        of its operands.

        Thus the expression:

            ~(A ^ op) & (x ^ op) & 0x80

        reads "A has the same sign as op, and the opposite as x", where x is the sum of
        A and op (and an optional carry).
    
    Subtracts the specified byte op from the accumulator, using carry as
    borrow from a previous operation.
 See addByte() for an explanation of the halfcarry bit See addByte() for an explanation of the overflow bit. The only difference here is that for a subtraction we must check that the two operands have different sign, because in fact A-B is A+(-B). Note however that since subtraction is not symmetric, we have to use (x ^ A) to get the correct result, whereas for the addition (x ^ A) is equivalent to (x ^ op)* Compares the accumulator and the specified operand (CP op) * Fetches a byte from the program counter location * Fetches a 16 bit word from the program counter location * Sets the parity, sign and zero flags from the accumulator value * Sets the parity, sign, zero, 3rd and 5th flag bits from the accumulator value *  Resets the CPU  Program counter is zero Interrupt register cleared Memory refresh register cleared IFF1 and IFF2 cleared, IM0 enabled Could that be 2 (according to some Zilog docs)? There is no official documentation for the following! 8-bit registers I R IX IY PC SP iflags_ cycles_     RLC B RLC C RLC D RLC E RLC H RLC L RLC (HL) RLC A RRC B RRC C RRC D RRC E RRC H RRC L RRC (HL) RRC A RL B RL C RL D RL E RL H RL L RL (HL) RL A RR B RR C RR D RR E RR H RR L RR (HL) RR A SLA B SLA C SLA D SLA E SLA H SLA L SLA (HL) SLA A SRA B SRA C SRA D SRA E SRA H SRA L SRA (HL) SRA A SLL B  SLL C  SLL D  SLL E  SLL H  SLL L  SLL (HL) SLL A SRL B SRL C SRL D SRL E SRL H SRL L SRL (HL) SRL A BIT 0, B BIT 0, C BIT 0, D BIT 0, E BIT 0, H BIT 0, L BIT 0, (HL) BIT 0, A BIT 1, B BIT 1, C BIT 1, D BIT 1, E BIT 1, H BIT 1, L BIT 1, (HL) BIT 1, A BIT 2, B BIT 2, C BIT 2, D BIT 2, E BIT 2, H BIT 2, L BIT 2, (HL) BIT 2, A BIT 3, B BIT 3, C BIT 3, D BIT 3, E BIT 3, H BIT 3, L BIT 3, (HL) BIT 3, A BIT 4, B BIT 4, C BIT 4, D BIT 4, E BIT 4, H BIT 4, L BIT 4, (HL) BIT 4, A BIT 5, B BIT 5, C BIT 5, D BIT 5, E BIT 5, H BIT 5, L BIT 5, (HL) BIT 5, A BIT 6, B BIT 6, C BIT 6, D BIT 6, E BIT 6, H BIT 6, L BIT 6, (HL) BIT 6, A BIT 7, B BIT 7, C BIT 7, D BIT 7, E BIT 7, H BIT 7, L BIT 7, (HL) BIT 7, A RES 0, B RES 0, C RES 0, D RES 0, E RES 0, H RES 0, L RES 0, (HL) RES 0, A RES 1, B RES 1, C RES 1, D RES 1, E RES 1, H RES 1, L RES 1, (HL) RES 1, A RES 2, B RES 2, C RES 2, D RES 2, E RES 2, H RES 2, L RES 2, (HL) RES 2, A RES 3, B RES 3, C RES 3, D RES 3, E RES 3, H RES 3, L RES 3, (HL) RES 3, A RES 4, B RES 4, C RES 4, D RES 4, E RES 4, H RES 4, L RES 4, (HL) RES 4, A RES 5, B RES 5, C RES 5, D RES 5, E RES 5, H RES 5, L RES 5, (HL) RES 5, A RES 6, B RES 6, C RES 6, D RES 6, E RES 6, H RES 6, L RES 6, (HL) RES 6, A RES 7, B RES 7, C RES 7, D RES 7, E RES 7, H RES 7, L RES 7, (HL) RES 7, A SET 0, B SET 0, C SET 0, D SET 0, E SET 0, H SET 0, L SET 0, (HL) SET 0, A SET 1, B SET 1, C SET 1, D SET 1, E SET 1, H SET 1, L SET 1, (HL) SET 1, A SET 2, B SET 2, C SET 2, D SET 2, E SET 2, H SET 2, L SET 2, (HL) SET 2, A SET 3, B SET 3, C SET 3, D SET 3, E SET 3, H SET 3, L SET 3, (HL) SET 3, A SET 4, B SET 4, C SET 4, D SET 4, E SET 4, H SET 4, L SET 4, (HL) SET 4, A SET 5, B SET 5, C SET 5, D SET 5, E SET 5, H SET 5, L SET 5, (HL) SET 5, A SET 6, B SET 6, C SET 6, D SET 6, E SET 6, H SET 6, L SET 6, (HL) SET 6, A SET 7, B SET 7, C SET 7, D SET 7, E SET 7, H SET 7, L SET 7, (HL) SET 7, A RLC B RLC C RLC D RLC E RLC H RLC L RLC (HL) RLC A RRC B RRC C RRC D RRC E RRC H RRC L RRC (HL) RRC A RL B RL C RL D RL E RL H RL L RL (HL) RL A RR B RR C RR D RR E RR H RR L RR (HL) RR A SLA B SLA C SLA D SLA E SLA H SLA L SLA (HL) SLA A SRA B SRA C SRA D SRA E SRA H SRA L SRA (HL) SRA A SLL B SLL C SLL D SLL E SLL H SLL L SLL (HL) SLL A SRL B SRL C SRL D SRL E SRL H SRL L SRL (HL) SRL A BIT 0, B BIT 0, C BIT 0, D BIT 0, E BIT 0, H BIT 0, L BIT 0, (HL) BIT 0, A BIT 1, B BIT 1, C BIT 1, D BIT 1, E BIT 1, H BIT 1, L BIT 1, (HL) BIT 1, A BIT 2, B BIT 2, C BIT 2, D BIT 2, E BIT 2, H BIT 2, L BIT 2, (HL) BIT 2, A BIT 3, B BIT 3, C BIT 3, D BIT 3, E BIT 3, H BIT 3, L BIT 3, (HL) BIT 3, A BIT 4, B BIT 4, C BIT 4, D BIT 4, E BIT 4, H BIT 4, L BIT 4, (HL) BIT 4, A BIT 5, B BIT 5, C BIT 5, D BIT 5, E BIT 5, H BIT 5, L BIT 5, (HL) BIT 5, A BIT 6, B BIT 6, C BIT 6, D BIT 6, E BIT 6, H BIT 6, L BIT 6, (HL) BIT 6, A BIT 7, B BIT 7, C BIT 7, D BIT 7, E BIT 7, H BIT 7, L BIT 7, (HL) BIT 7, A RES 0, B RES 0, C RES 0, D RES 0, E RES 0, H RES 0, L RES 0, (HL) RES 0, A RES 1, B RES 1, C RES 1, D RES 1, E RES 1, H RES 1, L RES 1, (HL) RES 1, A RES 2, B RES 2, C RES 2, D RES 2, E RES 2, H RES 2, L RES 2, (HL) RES 2, A RES 3, B RES 3, C RES 3, D RES 3, E RES 3, H RES 3, L RES 3, (HL) RES 3, A RES 4, B RES 4, C RES 4, D RES 4, E RES 4, H RES 4, L RES 4, (HL) RES 4, A RES 5, B RES 5, C RES 5, D RES 5, E RES 5, H RES 5, L RES 5, (HL) RES 5, A RES 6, B RES 6, C RES 6, D RES 6, E RES 6, H RES 6, L RES 6, (HL) RES 6, A RES 7, B RES 7, C RES 7, D RES 7, E RES 7, H RES 7, L RES 7, (HL) RES 7, A SET 0, B SET 0, C SET 0, D SET 0, E SET 0, H SET 0, L SET 0, (HL) SET 0, A SET 1, B SET 1, C SET 1, D SET 1, E SET 1, H SET 1, L SET 1, (HL) SET 1, A SET 2, B SET 2, C SET 2, D SET 2, E SET 2, H SET 2, L SET 2, (HL) SET 2, A SET 3, B SET 3, C SET 3, D SET 3, E SET 3, H SET 3, L SET 3, (HL) SET 3, A SET 4, B SET 4, C SET 4, D SET 4, E SET 4, H SET 4, L SET 4, (HL) SET 4, A SET 5, B SET 5, C SET 5, D SET 5, E SET 5, H SET 5, L SET 5, (HL) SET 5, A SET 6, B SET 6, C SET 6, D SET 6, E SET 6, H SET 6, L SET 6, (HL) SET 6, A SET 7, B SET 7, C SET 7, D SET 7, E SET 7, H SET 7, L SET 7, (HL) SET 7, A 0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x07 0x08 ADD IX, BC 0x0A 0x0B 0x0C 0x0D 0x0E 0x0F 0x10 0x11 0x12 0x13 0x14 0x15 0x16 0x17 0x18 ADD IX, DE 0x1A 0x1B 0x1C 0x1D 0x1E 0x1F 0x20 LD IX, nn LD (nn), IX INC IX INC IXH DEC IXH LD IXH, n 0x27 0x28 ADD IX, IX LD IX, (nn) DEC IX INC IXL DEC IXL LD IXL, n 0x2F 0x30 0x31 0x32 0x33 INC (IX + d) DEC (IX + d) LD (IX + d), n 0x37 0x38 ADD IX, SP 0x3A 0x3B 0x3C 0x3D 0x3E 0x3F 0x40 0x41 0x42 0x43 LD B, IXH LD B, IXL LD B, (IX + d) 0x47 0x48 0x49 0x4A 0x4B LD C, IXH LD C, IXL LD C, (IX + d) 0x4F 0x50 0x51 0x52 0x53 LD D, IXH LD D, IXL LD D, (IX + d) 0x57 0x58 0x59 0x5A 0x5B LD E, IXH LD E, IXL LD E, (IX + d) 0x5F LD IXH, B LD IXH, C LD IXH, D LD IXH, E LD IXH, IXH LD IXH, IXL LD H, (IX + d) LD IXH, A LD IXL, B LD IXL, C LD IXL, D LD IXL, E LD IXL, IXH LD IXL, IXL LD L, (IX + d) LD IXL, A LD (IX + d), B LD (IX + d), C LD (IX + d), D LD (IX + d), E LD (IX + d), H LD (IX + d), L 0x76 LD (IX + d), A 0x78 0x79 0x7A 0x7B LD A, IXH LD A, IXL LD A, (IX + d) 0x7F 0x80 0x81 0x82 0x83 ADD A, IXH ADD A, IXL ADD A, (IX + d) 0x87 0x88 0x89 0x8A 0x8B ADC A, IXH ADC A, IXL ADC A, (IX + d) 0x8F 0x90 0x91 0x92 0x93 SUB IXH SUB IXL SUB (IX + d) 0x97 0x98 0x99 0x9A 0x9B SBC A, IXH SBC A, IXL SBC A, (IX + d) 0x9F 0xA0 0xA1 0xA2 0xA3 AND IXH AND IXL AND (IX + d) 0xA7 0xA8 0xA9 0xAA 0xAB XOR IXH XOR IXL XOR (IX + d) 0xAF 0xB0 0xB1 0xB2 0xB3 OR IXH OR IXL OR (IX + d) 0xB7 0xB8 0xB9 0xBA 0xBB CP IXH CP IXL CP (IX + d) 0xBF 0xC0 0xC1 0xC2 0xC3 0xC4 0xC5 0xC6 0xC7 0xC8 0xC9 0xCA  0xCC 0xCD 0xCE 0xCF 0xD0 0xD1 0xD2 0xD3 0xD4 0xD5 0xD6 0xD7 0xD8 0xD9 0xDA 0xDB 0xDC 0xDD 0xDE 0xDF 0xE0 POP IX 0xE2 EX (SP), IX 0xE4 PUSH IX 0xE6 0xE7 0xE8 JP (IX) 0xEA 0xEB 0xEC 0xED 0xEE 0xEF 0xF0 0xF1 0xF2 0xF3 0xF4 0xF5 0xF6 0xF7 0xF8 LD SP, IX 0xFA 0xFB 0xFC 0xFD 0xFE 0xFF ADD IX, BC ADD IX, DE LD IX, nn LD (nn), IX INC IX INC IXH DEC IXH LD IXH, n ADD IX, IX LD IX, (nn) DEC IX INC IXL DEC IXL LD IXL, n INC (IX + d) DEC (IX + d) LD (IX + d), n ADD IX, SP LD B, IXH LD B, IXL LD B, (IX + d) LD C, IXH LD C, IXL LD C, (IX + d) LD D, IXH LD D, IXL LD D, (IX + d) LD E, IXH LD E, IXL LD E, (IX + d) LD IXH, B LD IXH, C LD IXH, D LD IXH, E LD IXH, IXH LD IXH, IXL LD H, (IX + d) LD IXH, A LD IXL, B LD IXL, C LD IXL, D LD IXL, E LD IXL, IXH LD IXL, IXL LD L, (IX + d) LD IXL, A LD (IX + d), B LD (IX + d), C LD (IX + d), D LD (IX + d), E LD (IX + d), H LD (IX + d), L LD (IX + d), A LD A, IXH LD A, IXL LD A, (IX + d) ADD A, IXH ADD A, IXL ADD A, (IX + d) ADC A, IXH ADC A, IXL ADC A, (IX + d) SUB IXH SUB IXL SUB (IX + d) SBC A, IXH SBC A, IXL SBC A, (IX + d) AND IXH AND IXL AND (IX + d) XOR IXH XOR IXL XOR (IX + d) OR IXH OR IXL OR (IX + d) CP IXH CP IXL CP (IX + d)  POP IX EX (SP), IX PUSH IX JP (IX) LD SP, IX 0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x07 0x08 0x09 0x0A 0x0B 0x0C 0x0D 0x0E 0x0F 0x10 0x11 0x12 0x13 0x14 0x15 0x16 0x17 0x18 0x19 0x1A 0x1B 0x1C 0x1D 0x1E 0x1F 0x20 0x21 0x22 0x23 0x24 0x25 0x26 0x27 0x28 0x29 0x2A 0x2B 0x2C 0x2D 0x2E 0x2F 0x30 0x31 0x32 0x33 0x34 0x35 0x36 0x37 0x38 0x39 0x3A 0x3B 0x3C 0x3D 0x3E 0x3F IN B, (C) OUT (C), B SBC HL, BC LD (nn), BC NEG RETN IM 0 LD I, A IN C, (C) OUT (C), C ADC HL, BC LD BC, (nn) NEG RETI IM 0/1 LD R, A IN D, (C) OUT (C), D SBC HL, DE LD (nn), DE NEG RETN IM 1 LD A, I IN E, (C) OUT (C), E ADC HL, DE LD DE, (nn) NEG RETN IM 2 LD A, R IN H, (C) OUT (C), H SBC HL, HL LD (nn), HL NEG RETN IM 0 RRD IN L, (C) OUT (C), L ADC HL, HL LD HL, (nn) NEG RETN IM 0/1 RLD IN (C) / IN F, (C) OUT (C), 0 SBC HL, SP LD (nn), SP NEG RETN IM 1 0x77 IN A, (C) OUT (C), A ADC HL, SP LD SP, (nn) NEG RETN IM 2 0x7F 0x80 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8A 0x8B 0x8C 0x8D 0x8E 0x8F 0x90 0x91 0x92 0x93 0x94 0x95 0x96 0x97 0x98 0x99 0x9A 0x9B 0x9C 0x9D 0x9E 0x9F LDI CPI INI OUTI 0xA4 0xA5 0xA6 0xA7 LDD CPD IND OUTD 0xAC 0xAD 0xAE 0xAF LDIR CPIR INIR OTIR 0xB4 0xB5 0xB6 0xB7 LDDR CPDR INDR OTDR 0xBC 0xBD 0xBE 0xBF 0xC0 0xC1 0xC2 0xC3 0xC4 0xC5 0xC6 0xC7 0xC8 0xC9 0xCA 0xCB 0xCC 0xCD 0xCE 0xCF 0xD0 0xD1 0xD2 0xD3 0xD4 0xD5 0xD6 0xD7 0xD8 0xD9 0xDA 0xDB 0xDC 0xDD 0xDE 0xDF 0xE0 0xE1 0xE2 0xE3 0xE4 0xE5 0xE6 0xE7 0xE8 0xE9 0xEA 0xEB 0xEC 0xED 0xEE 0xEF 0xF0 0xF1 0xF2 0xF3 0xF4 0xF5 0xF6 0xF7 0xF8 0xF9 0xFA 0xFB 0xFC 0xFD 0xFE 0xFF IN B, (C) OUT (C), B SBC HL, BC LD (nn), BC NEG RETN IM 0 LD I, A IN C, (C) OUT (C), C ADC HL, BC LD BC, (nn) NEG RETIonReturnFromInterrupt(); IM 0/1 LD R, A IN D, (C) OUT (C), D SBC HL, DE LD (nn), DE NEG RETN IM 1 LD A, I IN E, (C) OUT (C), E ADC HL, DE LD DE, (nn) NEG RETN IM 2 LD A, R IN H, (C) OUT (C), H SBC HL, HL LD (nn), HL NEG RETN IM 0 RRD IN L, (C) OUT (C), L ADC HL, HL LD HL, (nn) NEG RETN IM 0/1 RLD IN (C) / IN F, (C) OUT (C), 0 SBC HL, SP LD (nn), SP NEG RETN IM 1 IN A, (C) OUT (C), A ADC HL, SP LD SP, (nn) NEG RETN IM 2 LDI HL++ DE++ BC-- CPI HL++ BC-- INI HL++ OUTI HL++ LDD HL-- DE-- BC-- CPD HL-- BC-- IND HL-- OUTD HL-- LDIR LDI After LDI, the Parity flag will be zero when BC=0 Decrement PC so that instruction is re-executed at next step (this allows interrupts to occur) CPIR CPI Parity clear when BC=0, Zero set when A=(HL) Decrement PC so that instruction is re-executed at next step (this allows interrupts to occur) INIR INI Decrement PC so that instruction is re-executed at next step (this allows interrupts to occur) OTIR OUTI Decrement PC so that instruction is re-executed at next step (this allows interrupts to occur) LDDR LDD After LDD, the Parity flag will be zero when BC=0 Decrement PC so that instruction is re-executed at next step (this allows interrupts to occur) CPDR CPD Parity clear when BC=0, Zero set when A=(HL) Decrement PC so that instruction is re-executed at next step (this allows interrupts to occur) INDR IND Decrement PC so that instruction is re-executed at next step (this allows interrupts to occur) OTDR OUTD Decrement PC so that instruction is re-executed at next step (this allows interrupts to occur) 0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x07 0x08 ADD IY, BC 0x0A 0x0B 0x0C 0x0D 0x0E 0x0F 0x10 0x11 0x12 0x13 0x14 0x15 0x16 0x17 0x18 ADD IY, DE 0x1A 0x1B 0x1C 0x1D 0x1E 0x1F 0x20 LD IY, nn LD (nn), IY INC IY INC IYH DEC IYH LD IYH, n 0x27 0x28 ADD IY, IY LD IY, (nn) DEC IY INC IYL DEC IYL LD IYL, n 0x2F 0x30 0x31 0x32 0x33 INC (IY + d) DEC (IY + d) LD (IY + d), n 0x37 0x38 ADD IY, SP 0x3A 0x3B 0x3C 0x3D 0x3E 0x3F 0x40 0x41 0x42 0x43 LD B, IYH LD B, IYL LD B, (IY + d) 0x47 0x48 0x49 0x4A 0x4B LD C, IYH LD C, IYL LD C, (IY + d) 0x4F 0x50 0x51 0x52 0x53 LD D, IYH LD D, IYL LD D, (IY + d) 0x57 0x58 0x59 0x5A 0x5B LD E, IYH LD E, IYL LD E, (IY + d) 0x5F LD IYH, B LD IYH, C LD IYH, D LD IYH, E LD IYH, IYH LD IYH, IYL LD H, (IY + d) LD IYH, A LD IYL, B LD IYL, C LD IYL, D LD IYL, E LD IYL, IYH LD IYL, IYL LD L, (IY + d) LD IYL, A LD (IY + d), B LD (IY + d), C LD (IY + d), D LD (IY + d), E LD (IY + d), H LD (IY + d), L 0x76 LD (IY + d), A 0x78 0x79 0x7A 0x7B LD A, IYH LD A, IYL LD A, (IY + d) 0x7F 0x80 0x81 0x82 0x83 ADD A, IYH ADD A, IYL ADD A, (IY + d) 0x87 0x88 0x89 0x8A 0x8B ADC A, IYH ADC A, IYL ADC A, (IY + d) 0x8F 0x90 0x91 0x92 0x93 SUB IYH SUB IYL SUB (IY + d) 0x97 0x98 0x99 0x9A 0x9B SBC A, IYH SBC A, IYL SBC A, (IY + d) 0x9F 0xA0 0xA1 0xA2 0xA3 AND IYH AND IYL AND (IY + d) 0xA7 0xA8 0xA9 0xAA 0xAB XOR IYH XOR IYL XOR (IY + d) 0xAF 0xB0 0xB1 0xB2 0xB3 OR IYH OR IYL OR (IY + d) 0xB7 0xB8 0xB9 0xBA 0xBB CP IYH CP IYL CP (IY + d) 0xBF 0xC0 0xC1 0xC2 0xC3 0xC4 0xC5 0xC6 0xC7 0xC8 0xC9 0xCA  0xCC 0xCD 0xCE 0xCF 0xD0 0xD1 0xD2 0xD3 0xD4 0xD5 0xD6 0xD7 0xD8 0xD9 0xDA 0xDB 0xDC 0xDD 0xDE 0xDF 0xE0 POP IY 0xE2 EX (SP), IY 0xE4 PUSH IY 0xE6 0xE7 0xE8 JP (IY) 0xEA 0xEB 0xEC 0xED 0xEE 0xEF 0xF0 0xF1 0xF2 0xF3 0xF4 0xF5 0xF6 0xF7 0xF8 LD SP, IY 0xFA 0xFB 0xFC 0xFD 0xFE 0xFF ADD IY, BC ADD IY, DE LD IY, nn LD (nn), IY INC IY INC IYH DEC IYH LD IYH, n ADD IY, IY LD IY, (nn) DEC IY INC IYL DEC IYL LD IYL, n INC (IY + d) DEC (IY + d) LD (IY + d), n ADD IY, SP LD B, IYH LD B, IYL LD B, (IY + d) LD C, IYH LD C, IYL LD C, (IY + d) LD D, IYH LD D, IYL LD D, (IY + d) LD E, IYH LD E, IYL LD E, (IY + d) LD IYH, B LD IYH, C LD IYH, D LD IYH, E LD IYH, IYH LD IYH, IYL LD H, (IY + d) LD IYH, A LD IYL, B LD IYL, C LD IYL, D LD IYL, E LD IYL, IYH LD IYL, IYL LD L, (IY + d) LD IYL, A LD (IY + d), B LD (IY + d), C LD (IY + d), D LD (IY + d), E LD (IY + d), H LD (IY + d), L LD (IY + d), A LD A, IYH LD A, IYL LD A, (IY + d) ADD A, IYH ADD A, IYL ADD A, (IY + d) ADC A, IYH ADC A, IYL ADC A, (IY + d) SUB IYH SUB IYL SUB (IY + d) SBC A, IYH SBC A, IYL SBC A, (IY + d) AND IYH AND IYL AND (IY + d) XOR IYH XOR IYL XOR (IY + d) OR IYH OR IYL OR (IY + d) CP IYH CP IYL CP (IY + d)  POP IY EX (SP), IY PUSH IY JP (IY) LD SP, IY LD B, RLC (IX + d) LD C, RLC (IX + d) LD D, RLC (IX + d) LD E, RLC (IX + d) LD H, RLC (IX + d) LD L, RLC (IX + d) RLC (IX + d) LD A, RLC (IX + d) LD B, RRC (IX + d) LD C, RRC (IX + d) LD D, RRC (IX + d) LD E, RRC (IX + d) LD H, RRC (IX + d) LD L, RRC (IX + d) RRC (IX + d) LD A, RRC (IX + d) LD B, RL (IX + d) LD C, RL (IX + d) LD D, RL (IX + d) LD E, RL (IX + d) LD H, RL (IX + d) LD L, RL (IX + d) RL (IX + d) LD A, RL (IX + d) LD B, RR (IX + d) LD C, RR (IX + d) LD D, RR (IX + d) LD E, RR (IX + d) LD H, RR (IX + d) LD L, RR (IX + d) RR (IX + d) LD A, RR (IX + d) LD B, SLA (IX + d) LD C, SLA (IX + d) LD D, SLA (IX + d) LD E, SLA (IX + d) LD H, SLA (IX + d) LD L, SLA (IX + d) SLA (IX + d) LD A, SLA (IX + d) LD B, SRA (IX + d) LD C, SRA (IX + d) LD D, SRA (IX + d) LD E, SRA (IX + d) LD H, SRA (IX + d) LD L, SRA (IX + d) SRA (IX + d) LD A, SRA (IX + d) LD B, SLL (IX + d) LD C, SLL (IX + d) LD D, SLL (IX + d) LD E, SLL (IX + d) LD H, SLL (IX + d) LD L, SLL (IX + d) SLL (IX + d) LD A, SLL (IX + d) LD B, SRL (IX + d) LD C, SRL (IX + d) LD D, SRL (IX + d) LD E, SRL (IX + d) LD H, SRL (IX + d) LD L, SRL (IX + d) SRL (IX + d) LD A, SRL (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) LD B, RES 0, (IX + d) LD C, RES 0, (IX + d) LD D, RES 0, (IX + d) LD E, RES 0, (IX + d) LD H, RES 0, (IX + d) LD L, RES 0, (IX + d) RES 0, (IX + d) LD A, RES 0, (IX + d) LD B, RES 1, (IX + d) LD C, RES 1, (IX + d) LD D, RES 1, (IX + d) LD E, RES 1, (IX + d) LD H, RES 1, (IX + d) LD L, RES 1, (IX + d) RES 1, (IX + d) LD A, RES 1, (IX + d) LD B, RES 2, (IX + d) LD C, RES 2, (IX + d) LD D, RES 2, (IX + d) LD E, RES 2, (IX + d) LD H, RES 2, (IX + d) LD L, RES 2, (IX + d) RES 2, (IX + d) LD A, RES 2, (IX + d) LD B, RES 3, (IX + d) LD C, RES 3, (IX + d) LD D, RES 3, (IX + d) LD E, RES 3, (IX + d) LD H, RES 3, (IX + d) LD L, RES 3, (IX + d) RES 3, (IX + d) LD A, RES 3, (IX + d) LD B, RES 4, (IX + d) LD C, RES 4, (IX + d) LD D, RES 4, (IX + d) LD E, RES 4, (IX + d) LD H, RES 4, (IX + d) LD L, RES 4, (IX + d) RES 4, (IX + d) LD A, RES 4, (IX + d) LD B, RES 5, (IX + d) LD C, RES 5, (IX + d) LD D, RES 5, (IX + d) LD E, RES 5, (IX + d) LD H, RES 5, (IX + d) LD L, RES 5, (IX + d) RES 5, (IX + d) LD A, RES 5, (IX + d) LD B, RES 6, (IX + d) LD C, RES 6, (IX + d) LD D, RES 6, (IX + d) LD E, RES 6, (IX + d) LD H, RES 6, (IX + d) LD L, RES 6, (IX + d) RES 6, (IX + d) LD A, RES 6, (IX + d) LD B, RES 7, (IX + d) LD C, RES 7, (IX + d) LD D, RES 7, (IX + d) LD E, RES 7, (IX + d) LD H, RES 7, (IX + d) LD L, RES 7, (IX + d) RES 7, (IX + d) LD A, RES 7, (IX + d) LD B, SET 0, (IX + d) LD C, SET 0, (IX + d) LD D, SET 0, (IX + d) LD E, SET 0, (IX + d) LD H, SET 0, (IX + d) LD L, SET 0, (IX + d) SET 0, (IX + d) LD A, SET 0, (IX + d) LD B, SET 1, (IX + d) LD C, SET 1, (IX + d) LD D, SET 1, (IX + d) LD E, SET 1, (IX + d) LD H, SET 1, (IX + d) LD L, SET 1, (IX + d) SET 1, (IX + d) LD A, SET 1, (IX + d) LD B, SET 2, (IX + d) LD C, SET 2, (IX + d) LD D, SET 2, (IX + d) LD E, SET 2, (IX + d) LD H, SET 2, (IX + d) LD L, SET 2, (IX + d) SET 2, (IX + d) LD A, SET 2, (IX + d) LD B, SET 3, (IX + d) LD C, SET 3, (IX + d) LD D, SET 3, (IX + d) LD E, SET 3, (IX + d) LD H, SET 3, (IX + d) LD L, SET 3, (IX + d) SET 3, (IX + d) LD A, SET 3, (IX + d) LD B, SET 4, (IX + d) LD C, SET 4, (IX + d) LD D, SET 4, (IX + d) LD E, SET 4, (IX + d) LD H, SET 4, (IX + d) LD L, SET 4, (IX + d) SET 4, (IX + d) LD A, SET 4, (IX + d) LD B, SET 5, (IX + d) LD C, SET 5, (IX + d) LD D, SET 5, (IX + d) LD E, SET 5, (IX + d) LD H, SET 5, (IX + d) LD L, SET 5, (IX + d) SET 5, (IX + d) LD A, SET 5, (IX + d) LD B, SET 6, (IX + d) LD C, SET 6, (IX + d) LD D, SET 6, (IX + d) LD E, SET 6, (IX + d) LD H, SET 6, (IX + d) LD L, SET 6, (IX + d) SET 6, (IX + d) LD A, SET 6, (IX + d) LD B, SET 7, (IX + d) LD C, SET 7, (IX + d) LD D, SET 7, (IX + d) LD E, SET 7, (IX + d) LD H, SET 7, (IX + d) LD L, SET 7, (IX + d) SET 7, (IX + d) LD A, SET 7, (IX + d) LD B, RLC (IX + d) LD C, RLC (IX + d) LD D, RLC (IX + d) LD E, RLC (IX + d) LD H, RLC (IX + d) LD L, RLC (IX + d) RLC (IX + d) LD A, RLC (IX + d) LD B, RRC (IX + d) LD C, RRC (IX + d) LD D, RRC (IX + d) LD E, RRC (IX + d) LD H, RRC (IX + d) LD L, RRC (IX + d) RRC (IX + d) LD A, RRC (IX + d) LD B, RL (IX + d) LD C, RL (IX + d) LD D, RL (IX + d) LD E, RL (IX + d) LD H, RL (IX + d) LD L, RL (IX + d) RL (IX + d) LD A, RL (IX + d) LD B, RR (IX + d) LD C, RR (IX + d) LD D, RR (IX + d) LD E, RR (IX + d) LD H, RR (IX + d) LD L, RR (IX + d) RR (IX + d) LD A, RR (IX + d) LD B, SLA (IX + d) LD C, SLA (IX + d) LD D, SLA (IX + d) LD E, SLA (IX + d) LD H, SLA (IX + d) LD L, SLA (IX + d) SLA (IX + d) LD A, SLA (IX + d) LD B, SRA (IX + d) LD C, SRA (IX + d) LD D, SRA (IX + d) LD E, SRA (IX + d) LD H, SRA (IX + d) LD L, SRA (IX + d) SRA (IX + d) LD A, SRA (IX + d) LD B, SLL (IX + d) LD C, SLL (IX + d) LD D, SLL (IX + d) LD E, SLL (IX + d) LD H, SLL (IX + d) LD L, SLL (IX + d) SLL (IX + d) LD A, SLL (IX + d) LD B, SRL (IX + d) LD C, SRL (IX + d) LD D, SRL (IX + d) LD E, SRL (IX + d) LD H, SRL (IX + d) LD L, SRL (IX + d) SRL (IX + d) LD A, SRL (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) LD B, RES 0, (IX + d) LD C, RES 0, (IX + d) LD D, RES 0, (IX + d) LD E, RES 0, (IX + d) LD H, RES 0, (IX + d) LD L, RES 0, (IX + d) RES 0, (IX + d) LD A, RES 0, (IX + d) LD B, RES 1, (IX + d) LD C, RES 1, (IX + d) LD D, RES 1, (IX + d) LD E, RES 1, (IX + d) LD H, RES 1, (IX + d) LD L, RES 1, (IX + d) RES 1, (IX + d) LD A, RES 1, (IX + d) LD B, RES 2, (IX + d) LD C, RES 2, (IX + d) LD D, RES 2, (IX + d) LD E, RES 2, (IX + d) LD H, RES 2, (IX + d) LD L, RES 2, (IX + d) RES 2, (IX + d) LD A, RES 2, (IX + d) LD B, RES 3, (IX + d) LD C, RES 3, (IX + d) LD D, RES 3, (IX + d) LD E, RES 3, (IX + d) LD H, RES 3, (IX + d) LD L, RES 3, (IX + d) RES 3, (IX + d) LD A, RES 3, (IX + d) LD B, RES 4, (IX + d) LD C, RES 4, (IX + d) LD D, RES 4, (IX + d) LD E, RES 4, (IX + d) LD H, RES 4, (IX + d) LD L, RES 4, (IX + d) RES 4, (IX + d) LD A, RES 4, (IX + d) LD B, RES 5, (IX + d) LD C, RES 5, (IX + d) LD D, RES 5, (IX + d) LD E, RES 5, (IX + d) LD H, RES 5, (IX + d) LD L, RES 5, (IX + d) RES 5, (IX + d) LD A, RES 5, (IX + d) LD B, RES 6, (IX + d) LD C, RES 6, (IX + d) LD D, RES 6, (IX + d) LD E, RES 6, (IX + d) LD H, RES 6, (IX + d) LD L, RES 6, (IX + d) RES 6, (IX + d) LD A, RES 6, (IX + d) LD B, RES 7, (IX + d) LD C, RES 7, (IX + d) LD D, RES 7, (IX + d) LD E, RES 7, (IX + d) LD H, RES 7, (IX + d) LD L, RES 7, (IX + d) RES 7, (IX + d) LD A, RES 7, (IX + d) LD B, SET 0, (IX + d) LD C, SET 0, (IX + d) LD D, SET 0, (IX + d) LD E, SET 0, (IX + d) LD H, SET 0, (IX + d) LD L, SET 0, (IX + d) SET 0, (IX + d) LD A, SET 0, (IX + d) LD B, SET 1, (IX + d) LD C, SET 1, (IX + d) LD D, SET 1, (IX + d) LD E, SET 1, (IX + d) LD H, SET 1, (IX + d) LD L, SET 1, (IX + d) SET 1, (IX + d) LD A, SET 1, (IX + d) LD B, SET 2, (IX + d) LD C, SET 2, (IX + d) LD D, SET 2, (IX + d) LD E, SET 2, (IX + d) LD H, SET 2, (IX + d) LD L, SET 2, (IX + d) SET 2, (IX + d) LD A, SET 2, (IX + d) LD B, SET 3, (IX + d) LD C, SET 3, (IX + d) LD D, SET 3, (IX + d) LD E, SET 3, (IX + d) LD H, SET 3, (IX + d) LD L, SET 3, (IX + d) SET 3, (IX + d) LD A, SET 3, (IX + d) LD B, SET 4, (IX + d) LD C, SET 4, (IX + d) LD D, SET 4, (IX + d) LD E, SET 4, (IX + d) LD H, SET 4, (IX + d) LD L, SET 4, (IX + d) SET 4, (IX + d) LD A, SET 4, (IX + d) LD B, SET 5, (IX + d) LD C, SET 5, (IX + d) LD D, SET 5, (IX + d) LD E, SET 5, (IX + d) LD H, SET 5, (IX + d) LD L, SET 5, (IX + d) SET 5, (IX + d) LD A, SET 5, (IX + d) LD B, SET 6, (IX + d) LD C, SET 6, (IX + d) LD D, SET 6, (IX + d) LD E, SET 6, (IX + d) LD H, SET 6, (IX + d) LD L, SET 6, (IX + d) SET 6, (IX + d) LD A, SET 6, (IX + d) LD B, SET 7, (IX + d) LD C, SET 7, (IX + d) LD D, SET 7, (IX + d) LD E, SET 7, (IX + d) LD H, SET 7, (IX + d) LD L, SET 7, (IX + d) SET 7, (IX + d) LD A, SET 7, (IX + d) NOP LD   BC,nn LD   (BC),A INC  BC INC  B DEC  B LD   B,n RLCA EX   AF,AF' ADD  HL,BC LD   A,(BC) DEC  BC INC  C DEC  C LD   C,n RRCA DJNZ d LD   DE,nn LD   (DE),A INC  DE INC  D DEC  D LD   D,n RLA JR   d ADD  HL,DE LD   A,(DE) DEC  DE INC  E DEC  E LD   E,n RRA JR   NZ,d LD   HL,nn LD   (nn),HL INC  HL INC  H DEC  H LD   H,n DAA JR   Z,d ADD  HL,HL LD   HL,(nn) DEC  HL INC  L DEC  L LD   L,n CPL JR   NC,d LD   SP,nn LD   (nn),A INC  SP INC  (HL) DEC  (HL) LD   (HL),n SCF JR   C,d ADD  HL,SP LD   A,(nn) DEC  SP INC  A DEC  A LD   A,n CCF LD   B,B LD   B,C LD   B,D LD   B,E LD   B,H LD   B,L LD   B,(HL) LD   B,A LD   C,B LD   C,C LD   C,D LD   C,E LD   C,H LD   C,L LD   C,(HL) LD   C,A LD   D,B LD   D,C LD   D,D LD   D,E LD   D,H LD   D,L LD   D,(HL) LD   D,A LD   E,B LD   E,C LD   E,D LD   E,E LD   E,H LD   E,L LD   E,(HL) LD   E,A LD   H,B LD   H,C LD   H,D LD   H,E LD   H,H LD   H,L LD   H,(HL) LD   H,A LD   L,B LD   L,C LD   L,D LD   L,E LD   L,H LD   L,L LD   L,(HL) LD   L,A LD   (HL),B LD   (HL),C LD   (HL),D LD   (HL),E LD   (HL),H LD   (HL),L HALT LD   (HL),A LD   A,B LD   A,C LD   A,D LD   A,E LD   A,H LD   A,L LD   A,(HL) LD   A,A ADD  A,B ADD  A,C ADD  A,D ADD  A,E ADD  A,H ADD  A,L ADD  A,(HL) ADD  A,A ADC  A,B ADC  A,C ADC  A,D ADC  A,E ADC  A,H ADC  A,L ADC  A,(HL) ADC  A,A SUB  B SUB  C SUB  D SUB  E SUB  H SUB  L SUB  (HL) SUB  A SBC  A,B SBC  A,C SBC  A,D SBC  A,E SBC  A,H SBC  A,L SBC  A,(HL) SBC  A,A AND  B AND  C AND  D AND  E AND  H AND  L AND  (HL) AND  A XOR  B XOR  C XOR  D XOR  E XOR  H XOR  L XOR  (HL) XOR  A OR   B OR   C OR   D OR   E OR   H OR   L OR   (HL) OR   A CP   B CP   C CP   D CP   E CP   H CP   L CP   (HL) CP   A RET  NZ POP  BC JP   NZ,nn JP   nn CALL NZ,nn PUSH BC ADD  A,n RST  0 RET  Z RET JP   Z,nn [Prefix] CALL Z,nn CALL nn ADC  A,n RST  8 RET  NC POP  DE JP   NC,nn OUT  (n),A CALL NC,nn PUSH DE SUB  n RST  10H RET  C EXX JP   C,nn IN   A,(n) CALL C,nn [IX Prefix] SBC  A,n RST  18H RET  PO POP  HL JP   PO,nn EX   (SP),HL CALL PO,nn PUSH HL AND  n RST  20H RET  PE JP   (HL) JP   PE,nn EX   DE,HL CALL PE,nn [Prefix] XOR  n RST  28H RET  P POP  AF JP   P,nn DI CALL P,nn PUSH AF OR   n RST  30H RET  M LD   SP,HL JP   M,nn EI CALL M,nn [IY Prefix] CP   n RST  38H NOP LD   BC,nn LD   (BC),A INC  BC INC  B DEC  B LD   B,n RLCA EX   AF,AF' ADD  HL,BC LD   A,(BC) DEC  BC INC  C DEC  C LD   C,n RRCA DJNZ d LD   DE,nn LD   (DE),A INC  DE INC  D DEC  D LD   D,n RLA JR   d ADD  HL,DE LD   A,(DE) DEC  DE INC  E DEC  E LD   E,n RRA JR   NZ,d LD   HL,nn LD   (nn),HL INC  HL INC  H DEC  H LD   H,n
    DAA is computed using the following table to get a diff value
    that is added to or subtracted (according to the N flag) from A:

        C Upper H Lower Diff
        -+-----+-+-----+----
        1   *   0  0-9   60
        1   *   1  0-9   66
        1   *   *  A-F   66
        0  0-9  0  0-9   00
        0  0-9  1  0-9   06
        0  0-8  *  A-F   06
        0  A-F  0  0-9   60
        0  9-F  *  A-F   66
        0  A-F  1  0-9   66

    The carry and halfcarry flags are then updated using similar tables.

    These tables were found by Stefano Donati of Ramsoft and are
    published in the "Undocumented Z80 Documented" paper by Sean Young,
    the following is an algorithmical implementation with no lookups.
 DAA JR   Z,d ADD  HL,HL LD   HL,(nn) DEC  HL INC  L DEC  L LD   L,n CPL JR   NC,d LD   SP,nn LD   (nn),A INC  SP INC  (HL) DEC  (HL) LD   (HL),n SCF JR   C,d ADD  HL,SP LD   A,(nn) DEC  SP INC  A DEC  A LD   A,n CCF Halfcarry holds previous carry LD   B,B LD   B,C LD   B,D LD   B,E LD   B,H LD   B,L LD   B,(HL) LD   B,A LD   C,B LD   C,C LD   C,D LD   C,E LD   C,H LD   C,L LD   C,(HL) LD   C,A LD   D,B LD   D,C LD   D,D LD   D,E LD   D,H LD   D,L LD   D,(HL) LD   D,A LD   E,B LD   E,C LD   E,D LD   E,E LD   E,H LD   E,L LD   E,(HL) LD   E,A LD   H,B LD   H,C LD   H,D LD   H,E LD   H,H LD   H,L LD   H,(HL) LD   H,A LD   L,B LD   L,C LD   L,D LD   L,E LD   L,H LD   L,L LD   L,(HL) LD   L,A LD   (HL),B LD   (HL),C LD   (HL),D LD   (HL),E LD   (HL),H LD   (HL),L HALT LD   (HL),A LD   A,B LD   A,C LD   A,D LD   A,E LD   A,H LD   A,L LD   A,(HL) LD   A,A ADD  A,B ADD  A,C ADD  A,D ADD  A,E ADD  A,H ADD  A,L ADD  A,(HL) ADD  A,A ADC  A,B ADC  A,C ADC  A,D ADC  A,E ADC  A,H ADC  A,L ADC  A,(HL) ADC  A,A SUB  B SUB  C SUB  D SUB  E SUB  H SUB  L SUB  (HL) SUB  A SBC  A,B SBC  A,C SBC  A,D SBC  A,E SBC  A,H SBC  A,L SBC  A,(HL) SBC  A,A AND  B AND  C AND  D AND  E AND  H AND  L AND  (HL) AND  A XOR  B XOR  C XOR  D XOR  E XOR  H XOR  L XOR  (HL) XOR  A OR   B OR   C OR   D OR   E OR   H OR   L OR   (HL) OR   A CP   B CP   C CP   D CP   E CP   H CP   L CP   (HL) CP   A RET  NZ POP  BC JP   NZ,nn JP   nn CALL NZ,nn PUSH BC ADD  A,n RST  0 RET  Z RET JP   Z,nn [Prefix] CALL Z,nn CALL nn ADC  A,n RST  8 RET  NC POP  DE JP   NC,nn OUT  (n),A CALL NC,nn PUSH DE SUB  n RST  10H RET  C EXX JP   C,nn IN   A,(n) CALL C,nn [IX Prefix] SBC  A,n RST  18H RET  PO POP  HL JP   PO,nn EX   (SP),HL CALL PO,nn PUSH HL AND  n RST  20H RET  PE JP   (HL) JP   PE,nn EX   DE,HL CALL PE,nn [Prefix] NOP XOR  n RST  28H RET  P POP  AF JP   P,nn DI CALL P,nn PUSH AF OR   n RST  30H RET  M LD   SP,HL JP   M,nn EI CALL M,nn [IY Prefix] CP   n RST  38H Executes one instruction  Update memory refresh register (not strictly needed but...) CPU is halted, do a NOP instruction NOP Get the opcode to execute Update the cycles counter with the number of cycles for this opcode Execute the opcode handler Update registers Clip program counter Clip stack pointer
    Runs the CPU for the specified number of cycles.

    Note: the memory refresh register is not updated!
 Execute instructions until the specified number of cycles has elapsed CPU is halted, do NOPs for the rest of cycles (this may be off by a few cycles) Get the opcode to execute Update the cycles counter with the number of cycles for this opcode Execute the opcode handler Update registers Clip program counter Clip stack pointer Return the number of extra cycles executed Interrupt  Execute interrupt only if interrupts are enabled Disable maskable interrupts and restart the CPU if halted Non-maskable interrupt  Disable maskable interrupts but preserve IFF2 (that is a copy of IFF1), also restart the CPU if halted Exit now, to avoid possible infinite loops NOP IX or IY prefix is ignored for this opcode Handle IX or IY prefix if possible Extended opcode is valid Extended opcode not valid, fall back to standard opcode**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Pacbox - a Pacman Emulator for Rockbox
 *
 * Based on PIE - Pacman Instructional Emulator
 *
 * Copyright (c) 1997-2003,2004 Alessandro Scotti
 * http://www.ascotti.org/
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Table with parity, sign and zero flags precomputed for each byte value Interrupt flags Interrupts enabled/disabled Copy of IFF1 (used by non-maskable interrupts) Internal use: signals that the CPU is halted Implements an opcode Implements an opcode for instructions that use the form (IX/IY + b)* *  Interrupt mode (bits 0 and 1) and flags Number of CPU cycles elapsed so far Registers@- B register@- C register@- D register@- E register@- H register@- L register@- A register (accumulator)@- Flags register@- Alternate B register (B')@- Alternate C register (C')@- Alternate D register (D')@- Alternate E register (E')@- Alternate H register (H')@- Alternate L register (L')@- Alternate A register (A')@- Alternate flags register (F')@- Index register X@- Index register Y@- Program counter@- Stack pointer@- Interrupt register@- Refresh register* Returns the 16 bit register BC. * 
    Returns the number of Z80 CPU cycles elapsed so far. 

    The cycle count is reset to zero when reset() is called, or
    it can be set to any value with setCycles(). It is updated after
    a CPU instruction is executed, for example by calling step()
    or interrupt().
* Sets the CPU cycle counter to the specified value. * Returns the current interrupt mode. * Sets the interrupt mode to the specified value. * Returns non-zero if the CPU is halted, otherwise zero. 
    Sets the interrupt mode to IM0, IM1 or IM2.

    Calls a subroutine at the specified address.
 Save current program counter in the stack Jump to the specified address
    Decrements a byte value by one. 
    Note that this is different from subtracting one from the byte value,
    because flags behave differently.
 Preserve the carry flag
    Increments a byte value by one. 
    Note that this is different from adding one to the byte value,
    because flags behave differently.
 Preserve the carry flag
    Reads one byte from port C, updating flags according to the rules of "IN r,(C)".

    Performs a relative jump to the specified offset.

    Returns from a subroutine, popping the saved Program Counter from the stack.

    Rotates left one byte thru the carry flag.

    Rotates left one byte copying the most significant bit (bit 7) in the carry flag.

    Rotates right one byte thru the carry flag.

    Rotates right one byte copying the least significant bit (bit 0) in the carry flag.

    Shifts left one byte.

    Shifts right one byte, preserving its sign (most significant bit).

    Shifts right one byte.

    Tests whether the specified bit of op is set.
 Flags for a bit test operation are: S, P: unknown Z: set if bit is zero, reset otherwise N: reset H: set C: unaffected However, it seems that parity is always set like Z, so we emulate that as well. Bit is not set, so set the zero flag
    Adds the specified byte op to the accumulator, adding
    carry.
 Add carry
        Halfcarry is set on carry from the low order four bits.

        To see how to compute it, let's take a look at the following table, which
        shows the binary addition of two binary numbers:

        A   B   A+B
        -----------
        0   0   0
        0   1   1
        1   0   1
        1   1   0

        Note that if only the lowest bit is used, then A+B, A-B and A^B yield the same 
        value. If we know A, B and the sum A+B+C, then C is easily derived:
            C = A+B+C - A - B,  that is
            C = A+B+C ^ A ^ B.

        For the halfcarry, A and B above are the fifth bit of a byte, which corresponds
        to the value 0x10. So:

            Halfcarry = ((accumulator+operand+halfcarry) ^ accumulator ^ operand) & 0x10

        Note that masking off all bits but one is important because we have worked all
        the math by using one bit only.
    
        The overflow bit is set when the result is too large to fit into the destination
        register, causing a change in the sign bit.

        For a sum, we can only have overflow when adding two numbers that are both positive
        or both negative. For example 0x5E + 0x4B (94 + 75) yields 0xA9 (169), which fits
        into an 8-bit register only if it is interpreted as an unsigned number. If we 
        consider the result as a signed integer, then 0xA9 corresponds to decimal -87 and
        we have overflow.
        Note that if we add two signed numbers of opposite sign then we cannot overflow
        the destination register, because the absolute value of the result will always fit
        in 7 bits, leaving the most significant bit free for use as a sign bit.

        We can code all the above concisely by noting that:

            ~(A ^ op) & 0x80

        is true if and only if A and op have the same sign. Also:

            (x ^ op) & 0x80

        is true if and only if the sum of A and op has taken a sign opposite to that
        of its operands.

        Thus the expression:

            ~(A ^ op) & (x ^ op) & 0x80

        reads "A has the same sign as op, and the opposite as x", where x is the sum of
        A and op (and an optional carry).
    
    Subtracts the specified byte op from the accumulator, using carry as
    borrow from a previous operation.
 See addByte() for an explanation of the halfcarry bit See addByte() for an explanation of the overflow bit. The only difference here is that for a subtraction we must check that the two operands have different sign, because in fact A-B is A+(-B). Note however that since subtraction is not symmetric, we have to use (x ^ A) to get the correct result, whereas for the addition (x ^ A) is equivalent to (x ^ op)* Compares the accumulator and the specified operand (CP op) * Fetches a byte from the program counter location * Fetches a 16 bit word from the program counter location * Sets the parity, sign and zero flags from the accumulator value * Sets the parity, sign, zero, 3rd and 5th flag bits from the accumulator value *  Resets the CPU  Program counter is zero Interrupt register cleared Memory refresh register cleared IFF1 and IFF2 cleared, IM0 enabled Could that be 2 (according to some Zilog docs)? There is no official documentation for the following! 8-bit registers I R IX IY PC SP iflags_ cycles_     RLC B RLC C RLC D RLC E RLC H RLC L RLC (HL) RLC A RRC B RRC C RRC D RRC E RRC H RRC L RRC (HL) RRC A RL B RL C RL D RL E RL H RL L RL (HL) RL A RR B RR C RR D RR E RR H RR L RR (HL) RR A SLA B SLA C SLA D SLA E SLA H SLA L SLA (HL) SLA A SRA B SRA C SRA D SRA E SRA H SRA L SRA (HL) SRA A SLL B  SLL C  SLL D  SLL E  SLL H  SLL L  SLL (HL) SLL A SRL B SRL C SRL D SRL E SRL H SRL L SRL (HL) SRL A BIT 0, B BIT 0, C BIT 0, D BIT 0, E BIT 0, H BIT 0, L BIT 0, (HL) BIT 0, A BIT 1, B BIT 1, C BIT 1, D BIT 1, E BIT 1, H BIT 1, L BIT 1, (HL) BIT 1, A BIT 2, B BIT 2, C BIT 2, D BIT 2, E BIT 2, H BIT 2, L BIT 2, (HL) BIT 2, A BIT 3, B BIT 3, C BIT 3, D BIT 3, E BIT 3, H BIT 3, L BIT 3, (HL) BIT 3, A BIT 4, B BIT 4, C BIT 4, D BIT 4, E BIT 4, H BIT 4, L BIT 4, (HL) BIT 4, A BIT 5, B BIT 5, C BIT 5, D BIT 5, E BIT 5, H BIT 5, L BIT 5, (HL) BIT 5, A BIT 6, B BIT 6, C BIT 6, D BIT 6, E BIT 6, H BIT 6, L BIT 6, (HL) BIT 6, A BIT 7, B BIT 7, C BIT 7, D BIT 7, E BIT 7, H BIT 7, L BIT 7, (HL) BIT 7, A RES 0, B RES 0, C RES 0, D RES 0, E RES 0, H RES 0, L RES 0, (HL) RES 0, A RES 1, B RES 1, C RES 1, D RES 1, E RES 1, H RES 1, L RES 1, (HL) RES 1, A RES 2, B RES 2, C RES 2, D RES 2, E RES 2, H RES 2, L RES 2, (HL) RES 2, A RES 3, B RES 3, C RES 3, D RES 3, E RES 3, H RES 3, L RES 3, (HL) RES 3, A RES 4, B RES 4, C RES 4, D RES 4, E RES 4, H RES 4, L RES 4, (HL) RES 4, A RES 5, B RES 5, C RES 5, D RES 5, E RES 5, H RES 5, L RES 5, (HL) RES 5, A RES 6, B RES 6, C RES 6, D RES 6, E RES 6, H RES 6, L RES 6, (HL) RES 6, A RES 7, B RES 7, C RES 7, D RES 7, E RES 7, H RES 7, L RES 7, (HL) RES 7, A SET 0, B SET 0, C SET 0, D SET 0, E SET 0, H SET 0, L SET 0, (HL) SET 0, A SET 1, B SET 1, C SET 1, D SET 1, E SET 1, H SET 1, L SET 1, (HL) SET 1, A SET 2, B SET 2, C SET 2, D SET 2, E SET 2, H SET 2, L SET 2, (HL) SET 2, A SET 3, B SET 3, C SET 3, D SET 3, E SET 3, H SET 3, L SET 3, (HL) SET 3, A SET 4, B SET 4, C SET 4, D SET 4, E SET 4, H SET 4, L SET 4, (HL) SET 4, A SET 5, B SET 5, C SET 5, D SET 5, E SET 5, H SET 5, L SET 5, (HL) SET 5, A SET 6, B SET 6, C SET 6, D SET 6, E SET 6, H SET 6, L SET 6, (HL) SET 6, A SET 7, B SET 7, C SET 7, D SET 7, E SET 7, H SET 7, L SET 7, (HL) SET 7, A RLC B RLC C RLC D RLC E RLC H RLC L RLC (HL) RLC A RRC B RRC C RRC D RRC E RRC H RRC L RRC (HL) RRC A RL B RL C RL D RL E RL H RL L RL (HL) RL A RR B RR C RR D RR E RR H RR L RR (HL) RR A SLA B SLA C SLA D SLA E SLA H SLA L SLA (HL) SLA A SRA B SRA C SRA D SRA E SRA H SRA L SRA (HL) SRA A SLL B SLL C SLL D SLL E SLL H SLL L SLL (HL) SLL A SRL B SRL C SRL D SRL E SRL H SRL L SRL (HL) SRL A BIT 0, B BIT 0, C BIT 0, D BIT 0, E BIT 0, H BIT 0, L BIT 0, (HL) BIT 0, A BIT 1, B BIT 1, C BIT 1, D BIT 1, E BIT 1, H BIT 1, L BIT 1, (HL) BIT 1, A BIT 2, B BIT 2, C BIT 2, D BIT 2, E BIT 2, H BIT 2, L BIT 2, (HL) BIT 2, A BIT 3, B BIT 3, C BIT 3, D BIT 3, E BIT 3, H BIT 3, L BIT 3, (HL) BIT 3, A BIT 4, B BIT 4, C BIT 4, D BIT 4, E BIT 4, H BIT 4, L BIT 4, (HL) BIT 4, A BIT 5, B BIT 5, C BIT 5, D BIT 5, E BIT 5, H BIT 5, L BIT 5, (HL) BIT 5, A BIT 6, B BIT 6, C BIT 6, D BIT 6, E BIT 6, H BIT 6, L BIT 6, (HL) BIT 6, A BIT 7, B BIT 7, C BIT 7, D BIT 7, E BIT 7, H BIT 7, L BIT 7, (HL) BIT 7, A RES 0, B RES 0, C RES 0, D RES 0, E RES 0, H RES 0, L RES 0, (HL) RES 0, A RES 1, B RES 1, C RES 1, D RES 1, E RES 1, H RES 1, L RES 1, (HL) RES 1, A RES 2, B RES 2, C RES 2, D RES 2, E RES 2, H RES 2, L RES 2, (HL) RES 2, A RES 3, B RES 3, C RES 3, D RES 3, E RES 3, H RES 3, L RES 3, (HL) RES 3, A RES 4, B RES 4, C RES 4, D RES 4, E RES 4, H RES 4, L RES 4, (HL) RES 4, A RES 5, B RES 5, C RES 5, D RES 5, E RES 5, H RES 5, L RES 5, (HL) RES 5, A RES 6, B RES 6, C RES 6, D RES 6, E RES 6, H RES 6, L RES 6, (HL) RES 6, A RES 7, B RES 7, C RES 7, D RES 7, E RES 7, H RES 7, L RES 7, (HL) RES 7, A SET 0, B SET 0, C SET 0, D SET 0, E SET 0, H SET 0, L SET 0, (HL) SET 0, A SET 1, B SET 1, C SET 1, D SET 1, E SET 1, H SET 1, L SET 1, (HL) SET 1, A SET 2, B SET 2, C SET 2, D SET 2, E SET 2, H SET 2, L SET 2, (HL) SET 2, A SET 3, B SET 3, C SET 3, D SET 3, E SET 3, H SET 3, L SET 3, (HL) SET 3, A SET 4, B SET 4, C SET 4, D SET 4, E SET 4, H SET 4, L SET 4, (HL) SET 4, A SET 5, B SET 5, C SET 5, D SET 5, E SET 5, H SET 5, L SET 5, (HL) SET 5, A SET 6, B SET 6, C SET 6, D SET 6, E SET 6, H SET 6, L SET 6, (HL) SET 6, A SET 7, B SET 7, C SET 7, D SET 7, E SET 7, H SET 7, L SET 7, (HL) SET 7, A 0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x07 0x08 ADD IX, BC 0x0A 0x0B 0x0C 0x0D 0x0E 0x0F 0x10 0x11 0x12 0x13 0x14 0x15 0x16 0x17 0x18 ADD IX, DE 0x1A 0x1B 0x1C 0x1D 0x1E 0x1F 0x20 LD IX, nn LD (nn), IX INC IX INC IXH DEC IXH LD IXH, n 0x27 0x28 ADD IX, IX LD IX, (nn) DEC IX INC IXL DEC IXL LD IXL, n 0x2F 0x30 0x31 0x32 0x33 INC (IX + d) DEC (IX + d) LD (IX + d), n 0x37 0x38 ADD IX, SP 0x3A 0x3B 0x3C 0x3D 0x3E 0x3F 0x40 0x41 0x42 0x43 LD B, IXH LD B, IXL LD B, (IX + d) 0x47 0x48 0x49 0x4A 0x4B LD C, IXH LD C, IXL LD C, (IX + d) 0x4F 0x50 0x51 0x52 0x53 LD D, IXH LD D, IXL LD D, (IX + d) 0x57 0x58 0x59 0x5A 0x5B LD E, IXH LD E, IXL LD E, (IX + d) 0x5F LD IXH, B LD IXH, C LD IXH, D LD IXH, E LD IXH, IXH LD IXH, IXL LD H, (IX + d) LD IXH, A LD IXL, B LD IXL, C LD IXL, D LD IXL, E LD IXL, IXH LD IXL, IXL LD L, (IX + d) LD IXL, A LD (IX + d), B LD (IX + d), C LD (IX + d), D LD (IX + d), E LD (IX + d), H LD (IX + d), L 0x76 LD (IX + d), A 0x78 0x79 0x7A 0x7B LD A, IXH LD A, IXL LD A, (IX + d) 0x7F 0x80 0x81 0x82 0x83 ADD A, IXH ADD A, IXL ADD A, (IX + d) 0x87 0x88 0x89 0x8A 0x8B ADC A, IXH ADC A, IXL ADC A, (IX + d) 0x8F 0x90 0x91 0x92 0x93 SUB IXH SUB IXL SUB (IX + d) 0x97 0x98 0x99 0x9A 0x9B SBC A, IXH SBC A, IXL SBC A, (IX + d) 0x9F 0xA0 0xA1 0xA2 0xA3 AND IXH AND IXL AND (IX + d) 0xA7 0xA8 0xA9 0xAA 0xAB XOR IXH XOR IXL XOR (IX + d) 0xAF 0xB0 0xB1 0xB2 0xB3 OR IXH OR IXL OR (IX + d) 0xB7 0xB8 0xB9 0xBA 0xBB CP IXH CP IXL CP (IX + d) 0xBF 0xC0 0xC1 0xC2 0xC3 0xC4 0xC5 0xC6 0xC7 0xC8 0xC9 0xCA  0xCC 0xCD 0xCE 0xCF 0xD0 0xD1 0xD2 0xD3 0xD4 0xD5 0xD6 0xD7 0xD8 0xD9 0xDA 0xDB 0xDC 0xDD 0xDE 0xDF 0xE0 POP IX 0xE2 EX (SP), IX 0xE4 PUSH IX 0xE6 0xE7 0xE8 JP (IX) 0xEA 0xEB 0xEC 0xED 0xEE 0xEF 0xF0 0xF1 0xF2 0xF3 0xF4 0xF5 0xF6 0xF7 0xF8 LD SP, IX 0xFA 0xFB 0xFC 0xFD 0xFE 0xFF ADD IX, BC ADD IX, DE LD IX, nn LD (nn), IX INC IX INC IXH DEC IXH LD IXH, n ADD IX, IX LD IX, (nn) DEC IX INC IXL DEC IXL LD IXL, n INC (IX + d) DEC (IX + d) LD (IX + d), n ADD IX, SP LD B, IXH LD B, IXL LD B, (IX + d) LD C, IXH LD C, IXL LD C, (IX + d) LD D, IXH LD D, IXL LD D, (IX + d) LD E, IXH LD E, IXL LD E, (IX + d) LD IXH, B LD IXH, C LD IXH, D LD IXH, E LD IXH, IXH LD IXH, IXL LD H, (IX + d) LD IXH, A LD IXL, B LD IXL, C LD IXL, D LD IXL, E LD IXL, IXH LD IXL, IXL LD L, (IX + d) LD IXL, A LD (IX + d), B LD (IX + d), C LD (IX + d), D LD (IX + d), E LD (IX + d), H LD (IX + d), L LD (IX + d), A LD A, IXH LD A, IXL LD A, (IX + d) ADD A, IXH ADD A, IXL ADD A, (IX + d) ADC A, IXH ADC A, IXL ADC A, (IX + d) SUB IXH SUB IXL SUB (IX + d) SBC A, IXH SBC A, IXL SBC A, (IX + d) AND IXH AND IXL AND (IX + d) XOR IXH XOR IXL XOR (IX + d) OR IXH OR IXL OR (IX + d) CP IXH CP IXL CP (IX + d)  POP IX EX (SP), IX PUSH IX JP (IX) LD SP, IX 0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x07 0x08 0x09 0x0A 0x0B 0x0C 0x0D 0x0E 0x0F 0x10 0x11 0x12 0x13 0x14 0x15 0x16 0x17 0x18 0x19 0x1A 0x1B 0x1C 0x1D 0x1E 0x1F 0x20 0x21 0x22 0x23 0x24 0x25 0x26 0x27 0x28 0x29 0x2A 0x2B 0x2C 0x2D 0x2E 0x2F 0x30 0x31 0x32 0x33 0x34 0x35 0x36 0x37 0x38 0x39 0x3A 0x3B 0x3C 0x3D 0x3E 0x3F IN B, (C) OUT (C), B SBC HL, BC LD (nn), BC NEG RETN IM 0 LD I, A IN C, (C) OUT (C), C ADC HL, BC LD BC, (nn) NEG RETI IM 0/1 LD R, A IN D, (C) OUT (C), D SBC HL, DE LD (nn), DE NEG RETN IM 1 LD A, I IN E, (C) OUT (C), E ADC HL, DE LD DE, (nn) NEG RETN IM 2 LD A, R IN H, (C) OUT (C), H SBC HL, HL LD (nn), HL NEG RETN IM 0 RRD IN L, (C) OUT (C), L ADC HL, HL LD HL, (nn) NEG RETN IM 0/1 RLD IN (C) / IN F, (C) OUT (C), 0 SBC HL, SP LD (nn), SP NEG RETN IM 1 0x77 IN A, (C) OUT (C), A ADC HL, SP LD SP, (nn) NEG RETN IM 2 0x7F 0x80 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8A 0x8B 0x8C 0x8D 0x8E 0x8F 0x90 0x91 0x92 0x93 0x94 0x95 0x96 0x97 0x98 0x99 0x9A 0x9B 0x9C 0x9D 0x9E 0x9F LDI CPI INI OUTI 0xA4 0xA5 0xA6 0xA7 LDD CPD IND OUTD 0xAC 0xAD 0xAE 0xAF LDIR CPIR INIR OTIR 0xB4 0xB5 0xB6 0xB7 LDDR CPDR INDR OTDR 0xBC 0xBD 0xBE 0xBF 0xC0 0xC1 0xC2 0xC3 0xC4 0xC5 0xC6 0xC7 0xC8 0xC9 0xCA 0xCB 0xCC 0xCD 0xCE 0xCF 0xD0 0xD1 0xD2 0xD3 0xD4 0xD5 0xD6 0xD7 0xD8 0xD9 0xDA 0xDB 0xDC 0xDD 0xDE 0xDF 0xE0 0xE1 0xE2 0xE3 0xE4 0xE5 0xE6 0xE7 0xE8 0xE9 0xEA 0xEB 0xEC 0xED 0xEE 0xEF 0xF0 0xF1 0xF2 0xF3 0xF4 0xF5 0xF6 0xF7 0xF8 0xF9 0xFA 0xFB 0xFC 0xFD 0xFE 0xFF IN B, (C) OUT (C), B SBC HL, BC LD (nn), BC NEG RETN IM 0 LD I, A IN C, (C) OUT (C), C ADC HL, BC LD BC, (nn) NEG RETIonReturnFromInterrupt(); IM 0/1 LD R, A IN D, (C) OUT (C), D SBC HL, DE LD (nn), DE NEG RETN IM 1 LD A, I IN E, (C) OUT (C), E ADC HL, DE LD DE, (nn) NEG RETN IM 2 LD A, R IN H, (C) OUT (C), H SBC HL, HL LD (nn), HL NEG RETN IM 0 RRD IN L, (C) OUT (C), L ADC HL, HL LD HL, (nn) NEG RETN IM 0/1 RLD IN (C) / IN F, (C) OUT (C), 0 SBC HL, SP LD (nn), SP NEG RETN IM 1 IN A, (C) OUT (C), A ADC HL, SP LD SP, (nn) NEG RETN IM 2 LDI HL++ DE++ BC-- CPI HL++ BC-- INI HL++ OUTI HL++ LDD HL-- DE-- BC-- CPD HL-- BC-- IND HL-- OUTD HL-- LDIR LDI After LDI, the Parity flag will be zero when BC=0 Decrement PC so that instruction is re-executed at next step (this allows interrupts to occur) CPIR CPI Parity clear when BC=0, Zero set when A=(HL) Decrement PC so that instruction is re-executed at next step (this allows interrupts to occur) INIR INI Decrement PC so that instruction is re-executed at next step (this allows interrupts to occur) OTIR OUTI Decrement PC so that instruction is re-executed at next step (this allows interrupts to occur) LDDR LDD After LDD, the Parity flag will be zero when BC=0 Decrement PC so that instruction is re-executed at next step (this allows interrupts to occur) CPDR CPD Parity clear when BC=0, Zero set when A=(HL) Decrement PC so that instruction is re-executed at next step (this allows interrupts to occur) INDR IND Decrement PC so that instruction is re-executed at next step (this allows interrupts to occur) OTDR OUTD Decrement PC so that instruction is re-executed at next step (this allows interrupts to occur) 0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x07 0x08 ADD IY, BC 0x0A 0x0B 0x0C 0x0D 0x0E 0x0F 0x10 0x11 0x12 0x13 0x14 0x15 0x16 0x17 0x18 ADD IY, DE 0x1A 0x1B 0x1C 0x1D 0x1E 0x1F 0x20 LD IY, nn LD (nn), IY INC IY INC IYH DEC IYH LD IYH, n 0x27 0x28 ADD IY, IY LD IY, (nn) DEC IY INC IYL DEC IYL LD IYL, n 0x2F 0x30 0x31 0x32 0x33 INC (IY + d) DEC (IY + d) LD (IY + d), n 0x37 0x38 ADD IY, SP 0x3A 0x3B 0x3C 0x3D 0x3E 0x3F 0x40 0x41 0x42 0x43 LD B, IYH LD B, IYL LD B, (IY + d) 0x47 0x48 0x49 0x4A 0x4B LD C, IYH LD C, IYL LD C, (IY + d) 0x4F 0x50 0x51 0x52 0x53 LD D, IYH LD D, IYL LD D, (IY + d) 0x57 0x58 0x59 0x5A 0x5B LD E, IYH LD E, IYL LD E, (IY + d) 0x5F LD IYH, B LD IYH, C LD IYH, D LD IYH, E LD IYH, IYH LD IYH, IYL LD H, (IY + d) LD IYH, A LD IYL, B LD IYL, C LD IYL, D LD IYL, E LD IYL, IYH LD IYL, IYL LD L, (IY + d) LD IYL, A LD (IY + d), B LD (IY + d), C LD (IY + d), D LD (IY + d), E LD (IY + d), H LD (IY + d), L 0x76 LD (IY + d), A 0x78 0x79 0x7A 0x7B LD A, IYH LD A, IYL LD A, (IY + d) 0x7F 0x80 0x81 0x82 0x83 ADD A, IYH ADD A, IYL ADD A, (IY + d) 0x87 0x88 0x89 0x8A 0x8B ADC A, IYH ADC A, IYL ADC A, (IY + d) 0x8F 0x90 0x91 0x92 0x93 SUB IYH SUB IYL SUB (IY + d) 0x97 0x98 0x99 0x9A 0x9B SBC A, IYH SBC A, IYL SBC A, (IY + d) 0x9F 0xA0 0xA1 0xA2 0xA3 AND IYH AND IYL AND (IY + d) 0xA7 0xA8 0xA9 0xAA 0xAB XOR IYH XOR IYL XOR (IY + d) 0xAF 0xB0 0xB1 0xB2 0xB3 OR IYH OR IYL OR (IY + d) 0xB7 0xB8 0xB9 0xBA 0xBB CP IYH CP IYL CP (IY + d) 0xBF 0xC0 0xC1 0xC2 0xC3 0xC4 0xC5 0xC6 0xC7 0xC8 0xC9 0xCA  0xCC 0xCD 0xCE 0xCF 0xD0 0xD1 0xD2 0xD3 0xD4 0xD5 0xD6 0xD7 0xD8 0xD9 0xDA 0xDB 0xDC 0xDD 0xDE 0xDF 0xE0 POP IY 0xE2 EX (SP), IY 0xE4 PUSH IY 0xE6 0xE7 0xE8 JP (IY) 0xEA 0xEB 0xEC 0xED 0xEE 0xEF 0xF0 0xF1 0xF2 0xF3 0xF4 0xF5 0xF6 0xF7 0xF8 LD SP, IY 0xFA 0xFB 0xFC 0xFD 0xFE 0xFF ADD IY, BC ADD IY, DE LD IY, nn LD (nn), IY INC IY INC IYH DEC IYH LD IYH, n ADD IY, IY LD IY, (nn) DEC IY INC IYL DEC IYL LD IYL, n INC (IY + d) DEC (IY + d) LD (IY + d), n ADD IY, SP LD B, IYH LD B, IYL LD B, (IY + d) LD C, IYH LD C, IYL LD C, (IY + d) LD D, IYH LD D, IYL LD D, (IY + d) LD E, IYH LD E, IYL LD E, (IY + d) LD IYH, B LD IYH, C LD IYH, D LD IYH, E LD IYH, IYH LD IYH, IYL LD H, (IY + d) LD IYH, A LD IYL, B LD IYL, C LD IYL, D LD IYL, E LD IYL, IYH LD IYL, IYL LD L, (IY + d) LD IYL, A LD (IY + d), B LD (IY + d), C LD (IY + d), D LD (IY + d), E LD (IY + d), H LD (IY + d), L LD (IY + d), A LD A, IYH LD A, IYL LD A, (IY + d) ADD A, IYH ADD A, IYL ADD A, (IY + d) ADC A, IYH ADC A, IYL ADC A, (IY + d) SUB IYH SUB IYL SUB (IY + d) SBC A, IYH SBC A, IYL SBC A, (IY + d) AND IYH AND IYL AND (IY + d) XOR IYH XOR IYL XOR (IY + d) OR IYH OR IYL OR (IY + d) CP IYH CP IYL CP (IY + d)  POP IY EX (SP), IY PUSH IY JP (IY) LD SP, IY LD B, RLC (IX + d) LD C, RLC (IX + d) LD D, RLC (IX + d) LD E, RLC (IX + d) LD H, RLC (IX + d) LD L, RLC (IX + d) RLC (IX + d) LD A, RLC (IX + d) LD B, RRC (IX + d) LD C, RRC (IX + d) LD D, RRC (IX + d) LD E, RRC (IX + d) LD H, RRC (IX + d) LD L, RRC (IX + d) RRC (IX + d) LD A, RRC (IX + d) LD B, RL (IX + d) LD C, RL (IX + d) LD D, RL (IX + d) LD E, RL (IX + d) LD H, RL (IX + d) LD L, RL (IX + d) RL (IX + d) LD A, RL (IX + d) LD B, RR (IX + d) LD C, RR (IX + d) LD D, RR (IX + d) LD E, RR (IX + d) LD H, RR (IX + d) LD L, RR (IX + d) RR (IX + d) LD A, RR (IX + d) LD B, SLA (IX + d) LD C, SLA (IX + d) LD D, SLA (IX + d) LD E, SLA (IX + d) LD H, SLA (IX + d) LD L, SLA (IX + d) SLA (IX + d) LD A, SLA (IX + d) LD B, SRA (IX + d) LD C, SRA (IX + d) LD D, SRA (IX + d) LD E, SRA (IX + d) LD H, SRA (IX + d) LD L, SRA (IX + d) SRA (IX + d) LD A, SRA (IX + d) LD B, SLL (IX + d) LD C, SLL (IX + d) LD D, SLL (IX + d) LD E, SLL (IX + d) LD H, SLL (IX + d) LD L, SLL (IX + d) SLL (IX + d) LD A, SLL (IX + d) LD B, SRL (IX + d) LD C, SRL (IX + d) LD D, SRL (IX + d) LD E, SRL (IX + d) LD H, SRL (IX + d) LD L, SRL (IX + d) SRL (IX + d) LD A, SRL (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) LD B, RES 0, (IX + d) LD C, RES 0, (IX + d) LD D, RES 0, (IX + d) LD E, RES 0, (IX + d) LD H, RES 0, (IX + d) LD L, RES 0, (IX + d) RES 0, (IX + d) LD A, RES 0, (IX + d) LD B, RES 1, (IX + d) LD C, RES 1, (IX + d) LD D, RES 1, (IX + d) LD E, RES 1, (IX + d) LD H, RES 1, (IX + d) LD L, RES 1, (IX + d) RES 1, (IX + d) LD A, RES 1, (IX + d) LD B, RES 2, (IX + d) LD C, RES 2, (IX + d) LD D, RES 2, (IX + d) LD E, RES 2, (IX + d) LD H, RES 2, (IX + d) LD L, RES 2, (IX + d) RES 2, (IX + d) LD A, RES 2, (IX + d) LD B, RES 3, (IX + d) LD C, RES 3, (IX + d) LD D, RES 3, (IX + d) LD E, RES 3, (IX + d) LD H, RES 3, (IX + d) LD L, RES 3, (IX + d) RES 3, (IX + d) LD A, RES 3, (IX + d) LD B, RES 4, (IX + d) LD C, RES 4, (IX + d) LD D, RES 4, (IX + d) LD E, RES 4, (IX + d) LD H, RES 4, (IX + d) LD L, RES 4, (IX + d) RES 4, (IX + d) LD A, RES 4, (IX + d) LD B, RES 5, (IX + d) LD C, RES 5, (IX + d) LD D, RES 5, (IX + d) LD E, RES 5, (IX + d) LD H, RES 5, (IX + d) LD L, RES 5, (IX + d) RES 5, (IX + d) LD A, RES 5, (IX + d) LD B, RES 6, (IX + d) LD C, RES 6, (IX + d) LD D, RES 6, (IX + d) LD E, RES 6, (IX + d) LD H, RES 6, (IX + d) LD L, RES 6, (IX + d) RES 6, (IX + d) LD A, RES 6, (IX + d) LD B, RES 7, (IX + d) LD C, RES 7, (IX + d) LD D, RES 7, (IX + d) LD E, RES 7, (IX + d) LD H, RES 7, (IX + d) LD L, RES 7, (IX + d) RES 7, (IX + d) LD A, RES 7, (IX + d) LD B, SET 0, (IX + d) LD C, SET 0, (IX + d) LD D, SET 0, (IX + d) LD E, SET 0, (IX + d) LD H, SET 0, (IX + d) LD L, SET 0, (IX + d) SET 0, (IX + d) LD A, SET 0, (IX + d) LD B, SET 1, (IX + d) LD C, SET 1, (IX + d) LD D, SET 1, (IX + d) LD E, SET 1, (IX + d) LD H, SET 1, (IX + d) LD L, SET 1, (IX + d) SET 1, (IX + d) LD A, SET 1, (IX + d) LD B, SET 2, (IX + d) LD C, SET 2, (IX + d) LD D, SET 2, (IX + d) LD E, SET 2, (IX + d) LD H, SET 2, (IX + d) LD L, SET 2, (IX + d) SET 2, (IX + d) LD A, SET 2, (IX + d) LD B, SET 3, (IX + d) LD C, SET 3, (IX + d) LD D, SET 3, (IX + d) LD E, SET 3, (IX + d) LD H, SET 3, (IX + d) LD L, SET 3, (IX + d) SET 3, (IX + d) LD A, SET 3, (IX + d) LD B, SET 4, (IX + d) LD C, SET 4, (IX + d) LD D, SET 4, (IX + d) LD E, SET 4, (IX + d) LD H, SET 4, (IX + d) LD L, SET 4, (IX + d) SET 4, (IX + d) LD A, SET 4, (IX + d) LD B, SET 5, (IX + d) LD C, SET 5, (IX + d) LD D, SET 5, (IX + d) LD E, SET 5, (IX + d) LD H, SET 5, (IX + d) LD L, SET 5, (IX + d) SET 5, (IX + d) LD A, SET 5, (IX + d) LD B, SET 6, (IX + d) LD C, SET 6, (IX + d) LD D, SET 6, (IX + d) LD E, SET 6, (IX + d) LD H, SET 6, (IX + d) LD L, SET 6, (IX + d) SET 6, (IX + d) LD A, SET 6, (IX + d) LD B, SET 7, (IX + d) LD C, SET 7, (IX + d) LD D, SET 7, (IX + d) LD E, SET 7, (IX + d) LD H, SET 7, (IX + d) LD L, SET 7, (IX + d) SET 7, (IX + d) LD A, SET 7, (IX + d) LD B, RLC (IX + d) LD C, RLC (IX + d) LD D, RLC (IX + d) LD E, RLC (IX + d) LD H, RLC (IX + d) LD L, RLC (IX + d) RLC (IX + d) LD A, RLC (IX + d) LD B, RRC (IX + d) LD C, RRC (IX + d) LD D, RRC (IX + d) LD E, RRC (IX + d) LD H, RRC (IX + d) LD L, RRC (IX + d) RRC (IX + d) LD A, RRC (IX + d) LD B, RL (IX + d) LD C, RL (IX + d) LD D, RL (IX + d) LD E, RL (IX + d) LD H, RL (IX + d) LD L, RL (IX + d) RL (IX + d) LD A, RL (IX + d) LD B, RR (IX + d) LD C, RR (IX + d) LD D, RR (IX + d) LD E, RR (IX + d) LD H, RR (IX + d) LD L, RR (IX + d) RR (IX + d) LD A, RR (IX + d) LD B, SLA (IX + d) LD C, SLA (IX + d) LD D, SLA (IX + d) LD E, SLA (IX + d) LD H, SLA (IX + d) LD L, SLA (IX + d) SLA (IX + d) LD A, SLA (IX + d) LD B, SRA (IX + d) LD C, SRA (IX + d) LD D, SRA (IX + d) LD E, SRA (IX + d) LD H, SRA (IX + d) LD L, SRA (IX + d) SRA (IX + d) LD A, SRA (IX + d) LD B, SLL (IX + d) LD C, SLL (IX + d) LD D, SLL (IX + d) LD E, SLL (IX + d) LD H, SLL (IX + d) LD L, SLL (IX + d) SLL (IX + d) LD A, SLL (IX + d) LD B, SRL (IX + d) LD C, SRL (IX + d) LD D, SRL (IX + d) LD E, SRL (IX + d) LD H, SRL (IX + d) LD L, SRL (IX + d) SRL (IX + d) LD A, SRL (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) LD B, RES 0, (IX + d) LD C, RES 0, (IX + d) LD D, RES 0, (IX + d) LD E, RES 0, (IX + d) LD H, RES 0, (IX + d) LD L, RES 0, (IX + d) RES 0, (IX + d) LD A, RES 0, (IX + d) LD B, RES 1, (IX + d) LD C, RES 1, (IX + d) LD D, RES 1, (IX + d) LD E, RES 1, (IX + d) LD H, RES 1, (IX + d) LD L, RES 1, (IX + d) RES 1, (IX + d) LD A, RES 1, (IX + d) LD B, RES 2, (IX + d) LD C, RES 2, (IX + d) LD D, RES 2, (IX + d) LD E, RES 2, (IX + d) LD H, RES 2, (IX + d) LD L, RES 2, (IX + d) RES 2, (IX + d) LD A, RES 2, (IX + d) LD B, RES 3, (IX + d) LD C, RES 3, (IX + d) LD D, RES 3, (IX + d) LD E, RES 3, (IX + d) LD H, RES 3, (IX + d) LD L, RES 3, (IX + d) RES 3, (IX + d) LD A, RES 3, (IX + d) LD B, RES 4, (IX + d) LD C, RES 4, (IX + d) LD D, RES 4, (IX + d) LD E, RES 4, (IX + d) LD H, RES 4, (IX + d) LD L, RES 4, (IX + d) RES 4, (IX + d) LD A, RES 4, (IX + d) LD B, RES 5, (IX + d) LD C, RES 5, (IX + d) LD D, RES 5, (IX + d) LD E, RES 5, (IX + d) LD H, RES 5, (IX + d) LD L, RES 5, (IX + d) RES 5, (IX + d) LD A, RES 5, (IX + d) LD B, RES 6, (IX + d) LD C, RES 6, (IX + d) LD D, RES 6, (IX + d) LD E, RES 6, (IX + d) LD H, RES 6, (IX + d) LD L, RES 6, (IX + d) RES 6, (IX + d) LD A, RES 6, (IX + d) LD B, RES 7, (IX + d) LD C, RES 7, (IX + d) LD D, RES 7, (IX + d) LD E, RES 7, (IX + d) LD H, RES 7, (IX + d) LD L, RES 7, (IX + d) RES 7, (IX + d) LD A, RES 7, (IX + d) LD B, SET 0, (IX + d) LD C, SET 0, (IX + d) LD D, SET 0, (IX + d) LD E, SET 0, (IX + d) LD H, SET 0, (IX + d) LD L, SET 0, (IX + d) SET 0, (IX + d) LD A, SET 0, (IX + d) LD B, SET 1, (IX + d) LD C, SET 1, (IX + d) LD D, SET 1, (IX + d) LD E, SET 1, (IX + d) LD H, SET 1, (IX + d) LD L, SET 1, (IX + d) SET 1, (IX + d) LD A, SET 1, (IX + d) LD B, SET 2, (IX + d) LD C, SET 2, (IX + d) LD D, SET 2, (IX + d) LD E, SET 2, (IX + d) LD H, SET 2, (IX + d) LD L, SET 2, (IX + d) SET 2, (IX + d) LD A, SET 2, (IX + d) LD B, SET 3, (IX + d) LD C, SET 3, (IX + d) LD D, SET 3, (IX + d) LD E, SET 3, (IX + d) LD H, SET 3, (IX + d) LD L, SET 3, (IX + d) SET 3, (IX + d) LD A, SET 3, (IX + d) LD B, SET 4, (IX + d) LD C, SET 4, (IX + d) LD D, SET 4, (IX + d) LD E, SET 4, (IX + d) LD H, SET 4, (IX + d) LD L, SET 4, (IX + d) SET 4, (IX + d) LD A, SET 4, (IX + d) LD B, SET 5, (IX + d) LD C, SET 5, (IX + d) LD D, SET 5, (IX + d) LD E, SET 5, (IX + d) LD H, SET 5, (IX + d) LD L, SET 5, (IX + d) SET 5, (IX + d) LD A, SET 5, (IX + d) LD B, SET 6, (IX + d) LD C, SET 6, (IX + d) LD D, SET 6, (IX + d) LD E, SET 6, (IX + d) LD H, SET 6, (IX + d) LD L, SET 6, (IX + d) SET 6, (IX + d) LD A, SET 6, (IX + d) LD B, SET 7, (IX + d) LD C, SET 7, (IX + d) LD D, SET 7, (IX + d) LD E, SET 7, (IX + d) LD H, SET 7, (IX + d) LD L, SET 7, (IX + d) SET 7, (IX + d) LD A, SET 7, (IX + d) NOP LD   BC,nn LD   (BC),A INC  BC INC  B DEC  B LD   B,n RLCA EX   AF,AF' ADD  HL,BC LD   A,(BC) DEC  BC INC  C DEC  C LD   C,n RRCA DJNZ d LD   DE,nn LD   (DE),A INC  DE INC  D DEC  D LD   D,n RLA JR   d ADD  HL,DE LD   A,(DE) DEC  DE INC  E DEC  E LD   E,n RRA JR   NZ,d LD   HL,nn LD   (nn),HL INC  HL INC  H DEC  H LD   H,n DAA JR   Z,d ADD  HL,HL LD   HL,(nn) DEC  HL INC  L DEC  L LD   L,n CPL JR   NC,d LD   SP,nn LD   (nn),A INC  SP INC  (HL) DEC  (HL) LD   (HL),n SCF JR   C,d ADD  HL,SP LD   A,(nn) DEC  SP INC  A DEC  A LD   A,n CCF LD   B,B LD   B,C LD   B,D LD   B,E LD   B,H LD   B,L LD   B,(HL) LD   B,A LD   C,B LD   C,C LD   C,D LD   C,E LD   C,H LD   C,L LD   C,(HL) LD   C,A LD   D,B LD   D,C LD   D,D LD   D,E LD   D,H LD   D,L LD   D,(HL) LD   D,A LD   E,B LD   E,C LD   E,D LD   E,E LD   E,H LD   E,L LD   E,(HL) LD   E,A LD   H,B LD   H,C LD   H,D LD   H,E LD   H,H LD   H,L LD   H,(HL) LD   H,A LD   L,B LD   L,C LD   L,D LD   L,E LD   L,H LD   L,L LD   L,(HL) LD   L,A LD   (HL),B LD   (HL),C LD   (HL),D LD   (HL),E LD   (HL),H LD   (HL),L HALT LD   (HL),A LD   A,B LD   A,C LD   A,D LD   A,E LD   A,H LD   A,L LD   A,(HL) LD   A,A ADD  A,B ADD  A,C ADD  A,D ADD  A,E ADD  A,H ADD  A,L ADD  A,(HL) ADD  A,A ADC  A,B ADC  A,C ADC  A,D ADC  A,E ADC  A,H ADC  A,L ADC  A,(HL) ADC  A,A SUB  B SUB  C SUB  D SUB  E SUB  H SUB  L SUB  (HL) SUB  A SBC  A,B SBC  A,C SBC  A,D SBC  A,E SBC  A,H SBC  A,L SBC  A,(HL) SBC  A,A AND  B AND  C AND  D AND  E AND  H AND  L AND  (HL) AND  A XOR  B XOR  C XOR  D XOR  E XOR  H XOR  L XOR  (HL) XOR  A OR   B OR   C OR   D OR   E OR   H OR   L OR   (HL) OR   A CP   B CP   C CP   D CP   E CP   H CP   L CP   (HL) CP   A RET  NZ POP  BC JP   NZ,nn JP   nn CALL NZ,nn PUSH BC ADD  A,n RST  0 RET  Z RET JP   Z,nn [Prefix] CALL Z,nn CALL nn ADC  A,n RST  8 RET  NC POP  DE JP   NC,nn OUT  (n),A CALL NC,nn PUSH DE SUB  n RST  10H RET  C EXX JP   C,nn IN   A,(n) CALL C,nn [IX Prefix] SBC  A,n RST  18H RET  PO POP  HL JP   PO,nn EX   (SP),HL CALL PO,nn PUSH HL AND  n RST  20H RET  PE JP   (HL) JP   PE,nn EX   DE,HL CALL PE,nn [Prefix] XOR  n RST  28H RET  P POP  AF JP   P,nn DI CALL P,nn PUSH AF OR   n RST  30H RET  M LD   SP,HL JP   M,nn EI CALL M,nn [IY Prefix] CP   n RST  38H NOP LD   BC,nn LD   (BC),A INC  BC INC  B DEC  B LD   B,n RLCA EX   AF,AF' ADD  HL,BC LD   A,(BC) DEC  BC INC  C DEC  C LD   C,n RRCA DJNZ d LD   DE,nn LD   (DE),A INC  DE INC  D DEC  D LD   D,n RLA JR   d ADD  HL,DE LD   A,(DE) DEC  DE INC  E DEC  E LD   E,n RRA JR   NZ,d LD   HL,nn LD   (nn),HL INC  HL INC  H DEC  H LD   H,n
    DAA is computed using the following table to get a diff value
    that is added to or subtracted (according to the N flag) from A:

        C Upper H Lower Diff
        -+-----+-+-----+----
        1   *   0  0-9   60
        1   *   1  0-9   66
        1   *   *  A-F   66
        0  0-9  0  0-9   00
        0  0-9  1  0-9   06
        0  0-8  *  A-F   06
        0  A-F  0  0-9   60
        0  9-F  *  A-F   66
        0  A-F  1  0-9   66

    The carry and halfcarry flags are then updated using similar tables.

    These tables were found by Stefano Donati of Ramsoft and are
    published in the "Undocumented Z80 Documented" paper by Sean Young,
    the following is an algorithmical implementation with no lookups.
 DAA JR   Z,d ADD  HL,HL LD   HL,(nn) DEC  HL INC  L DEC  L LD   L,n CPL JR   NC,d LD   SP,nn LD   (nn),A INC  SP INC  (HL) DEC  (HL) LD   (HL),n SCF JR   C,d ADD  HL,SP LD   A,(nn) DEC  SP INC  A DEC  A LD   A,n CCF Halfcarry holds previous carry LD   B,B LD   B,C LD   B,D LD   B,E LD   B,H LD   B,L LD   B,(HL) LD   B,A LD   C,B LD   C,C LD   C,D LD   C,E LD   C,H LD   C,L LD   C,(HL) LD   C,A LD   D,B LD   D,C LD   D,D LD   D,E LD   D,H LD   D,L LD   D,(HL) LD   D,A LD   E,B LD   E,C LD   E,D LD   E,E LD   E,H LD   E,L LD   E,(HL) LD   E,A LD   H,B LD   H,C LD   H,D LD   H,E LD   H,H LD   H,L LD   H,(HL) LD   H,A LD   L,B LD   L,C LD   L,D LD   L,E LD   L,H LD   L,L LD   L,(HL) LD   L,A LD   (HL),B LD   (HL),C LD   (HL),D LD   (HL),E LD   (HL),H LD   (HL),L HALT LD   (HL),A LD   A,B LD   A,C LD   A,D LD   A,E LD   A,H LD   A,L LD   A,(HL) LD   A,A ADD  A,B ADD  A,C ADD  A,D ADD  A,E ADD  A,H ADD  A,L ADD  A,(HL) ADD  A,A ADC  A,B ADC  A,C ADC  A,D ADC  A,E ADC  A,H ADC  A,L ADC  A,(HL) ADC  A,A SUB  B SUB  C SUB  D SUB  E SUB  H SUB  L SUB  (HL) SUB  A SBC  A,B SBC  A,C SBC  A,D SBC  A,E SBC  A,H SBC  A,L SBC  A,(HL) SBC  A,A AND  B AND  C AND  D AND  E AND  H AND  L AND  (HL) AND  A XOR  B XOR  C XOR  D XOR  E XOR  H XOR  L XOR  (HL) XOR  A OR   B OR   C OR   D OR   E OR   H OR   L OR   (HL) OR   A CP   B CP   C CP   D CP   E CP   H CP   L CP   (HL) CP   A RET  NZ POP  BC JP   NZ,nn JP   nn CALL NZ,nn PUSH BC ADD  A,n RST  0 RET  Z RET JP   Z,nn [Prefix] CALL Z,nn CALL nn ADC  A,n RST  8 RET  NC POP  DE JP   NC,nn OUT  (n),A CALL NC,nn PUSH DE SUB  n RST  10H RET  C EXX JP   C,nn IN   A,(n) CALL C,nn [IX Prefix] SBC  A,n RST  18H RET  PO POP  HL JP   PO,nn EX   (SP),HL CALL PO,nn PUSH HL AND  n RST  20H RET  PE JP   (HL) JP   PE,nn EX   DE,HL CALL PE,nn [Prefix] NOP XOR  n RST  28H RET  P POP  AF JP   P,nn DI CALL P,nn PUSH AF OR   n RST  30H RET  M LD   SP,HL JP   M,nn EI CALL M,nn [IY Prefix] CP   n RST  38H Executes one instruction  Update memory refresh register (not strictly needed but...) CPU is halted, do a NOP instruction NOP Get the opcode to execute Update the cycles counter with the number of cycles for this opcode Execute the opcode handler Update registers Clip program counter Clip stack pointer
    Runs the CPU for the specified number of cycles.

    Note: the memory refresh register is not updated!
 Execute instructions until the specified number of cycles has elapsed CPU is halted, do NOPs for the rest of cycles (this may be off by a few cycles) Get the opcode to execute Update the cycles counter with the number of cycles for this opcode Execute the opcode handler Update registers Clip program counter Clip stack pointer Return the number of extra cycles executed Interrupt  Execute interrupt only if interrupts are enabled Disable maskable interrupts and restart the CPU if halted Non-maskable interrupt  Disable maskable interrupts but preserve IFF2 (that is a copy of IFF1), also restart the CPU if halted Exit now, to avoid possible infinite loops NOP IX or IY prefix is ignored for this opcode Handle IX or IY prefix if possible Extended opcode is valid Extended opcode not valid, fall back to standard opcode**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Pacbox - a Pacman Emulator for Rockbox
 *
 * Based on PIE - Pacman Instructional Emulator
 *
 * Copyright (c) 1997-2003,2004 Alessandro Scotti
 * http://www.ascotti.org/
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Table with parity, sign and zero flags precomputed for each byte value Interrupt flags Interrupts enabled/disabled Copy of IFF1 (used by non-maskable interrupts) Internal use: signals that the CPU is halted Implements an opcode Implements an opcode for instructions that use the form (IX/IY + b)* *  Interrupt mode (bits 0 and 1) and flags Number of CPU cycles elapsed so far Registers@- B register@- C register@- D register@- E register@- H register@- L register@- A register (accumulator)@- Flags register@- Alternate B register (B')@- Alternate C register (C')@- Alternate D register (D')@- Alternate E register (E')@- Alternate H register (H')@- Alternate L register (L')@- Alternate A register (A')@- Alternate flags register (F')@- Index register X@- Index register Y@- Program counter@- Stack pointer@- Interrupt register@- Refresh register* Returns the 16 bit register BC. * 
    Returns the number of Z80 CPU cycles elapsed so far. 

    The cycle count is reset to zero when reset() is called, or
    it can be set to any value with setCycles(). It is updated after
    a CPU instruction is executed, for example by calling step()
    or interrupt().
* Sets the CPU cycle counter to the specified value. * Returns the current interrupt mode. * Sets the interrupt mode to the specified value. * Returns non-zero if the CPU is halted, otherwise zero. 
    Sets the interrupt mode to IM0, IM1 or IM2.

    Calls a subroutine at the specified address.
 Save current program counter in the stack Jump to the specified address
    Decrements a byte value by one. 
    Note that this is different from subtracting one from the byte value,
    because flags behave differently.
 Preserve the carry flag
    Increments a byte value by one. 
    Note that this is different from adding one to the byte value,
    because flags behave differently.
 Preserve the carry flag
    Reads one byte from port C, updating flags according to the rules of "IN r,(C)".

    Performs a relative jump to the specified offset.

    Returns from a subroutine, popping the saved Program Counter from the stack.

    Rotates left one byte thru the carry flag.

    Rotates left one byte copying the most significant bit (bit 7) in the carry flag.

    Rotates right one byte thru the carry flag.

    Rotates right one byte copying the least significant bit (bit 0) in the carry flag.

    Shifts left one byte.

    Shifts right one byte, preserving its sign (most significant bit).

    Shifts right one byte.

    Tests whether the specified bit of op is set.
 Flags for a bit test operation are: S, P: unknown Z: set if bit is zero, reset otherwise N: reset H: set C: unaffected However, it seems that parity is always set like Z, so we emulate that as well. Bit is not set, so set the zero flag
    Adds the specified byte op to the accumulator, adding
    carry.
 Add carry
        Halfcarry is set on carry from the low order four bits.

        To see how to compute it, let's take a look at the following table, which
        shows the binary addition of two binary numbers:

        A   B   A+B
        -----------
        0   0   0
        0   1   1
        1   0   1
        1   1   0

        Note that if only the lowest bit is used, then A+B, A-B and A^B yield the same 
        value. If we know A, B and the sum A+B+C, then C is easily derived:
            C = A+B+C - A - B,  that is
            C = A+B+C ^ A ^ B.

        For the halfcarry, A and B above are the fifth bit of a byte, which corresponds
        to the value 0x10. So:

            Halfcarry = ((accumulator+operand+halfcarry) ^ accumulator ^ operand) & 0x10

        Note that masking off all bits but one is important because we have worked all
        the math by using one bit only.
    
        The overflow bit is set when the result is too large to fit into the destination
        register, causing a change in the sign bit.

        For a sum, we can only have overflow when adding two numbers that are both positive
        or both negative. For example 0x5E + 0x4B (94 + 75) yields 0xA9 (169), which fits
        into an 8-bit register only if it is interpreted as an unsigned number. If we 
        consider the result as a signed integer, then 0xA9 corresponds to decimal -87 and
        we have overflow.
        Note that if we add two signed numbers of opposite sign then we cannot overflow
        the destination register, because the absolute value of the result will always fit
        in 7 bits, leaving the most significant bit free for use as a sign bit.

        We can code all the above concisely by noting that:

            ~(A ^ op) & 0x80

        is true if and only if A and op have the same sign. Also:

            (x ^ op) & 0x80

        is true if and only if the sum of A and op has taken a sign opposite to that
        of its operands.

        Thus the expression:

            ~(A ^ op) & (x ^ op) & 0x80

        reads "A has the same sign as op, and the opposite as x", where x is the sum of
        A and op (and an optional carry).
    
    Subtracts the specified byte op from the accumulator, using carry as
    borrow from a previous operation.
 See addByte() for an explanation of the halfcarry bit See addByte() for an explanation of the overflow bit. The only difference here is that for a subtraction we must check that the two operands have different sign, because in fact A-B is A+(-B). Note however that since subtraction is not symmetric, we have to use (x ^ A) to get the correct result, whereas for the addition (x ^ A) is equivalent to (x ^ op)* Compares the accumulator and the specified operand (CP op) * Fetches a byte from the program counter location * Fetches a 16 bit word from the program counter location * Sets the parity, sign and zero flags from the accumulator value * Sets the parity, sign, zero, 3rd and 5th flag bits from the accumulator value *  Resets the CPU  Program counter is zero Interrupt register cleared Memory refresh register cleared IFF1 and IFF2 cleared, IM0 enabled Could that be 2 (according to some Zilog docs)? There is no official documentation for the following! 8-bit registers I R IX IY PC SP iflags_ cycles_     RLC B RLC C RLC D RLC E RLC H RLC L RLC (HL) RLC A RRC B RRC C RRC D RRC E RRC H RRC L RRC (HL) RRC A RL B RL C RL D RL E RL H RL L RL (HL) RL A RR B RR C RR D RR E RR H RR L RR (HL) RR A SLA B SLA C SLA D SLA E SLA H SLA L SLA (HL) SLA A SRA B SRA C SRA D SRA E SRA H SRA L SRA (HL) SRA A SLL B  SLL C  SLL D  SLL E  SLL H  SLL L  SLL (HL) SLL A SRL B SRL C SRL D SRL E SRL H SRL L SRL (HL) SRL A BIT 0, B BIT 0, C BIT 0, D BIT 0, E BIT 0, H BIT 0, L BIT 0, (HL) BIT 0, A BIT 1, B BIT 1, C BIT 1, D BIT 1, E BIT 1, H BIT 1, L BIT 1, (HL) BIT 1, A BIT 2, B BIT 2, C BIT 2, D BIT 2, E BIT 2, H BIT 2, L BIT 2, (HL) BIT 2, A BIT 3, B BIT 3, C BIT 3, D BIT 3, E BIT 3, H BIT 3, L BIT 3, (HL) BIT 3, A BIT 4, B BIT 4, C BIT 4, D BIT 4, E BIT 4, H BIT 4, L BIT 4, (HL) BIT 4, A BIT 5, B BIT 5, C BIT 5, D BIT 5, E BIT 5, H BIT 5, L BIT 5, (HL) BIT 5, A BIT 6, B BIT 6, C BIT 6, D BIT 6, E BIT 6, H BIT 6, L BIT 6, (HL) BIT 6, A BIT 7, B BIT 7, C BIT 7, D BIT 7, E BIT 7, H BIT 7, L BIT 7, (HL) BIT 7, A RES 0, B RES 0, C RES 0, D RES 0, E RES 0, H RES 0, L RES 0, (HL) RES 0, A RES 1, B RES 1, C RES 1, D RES 1, E RES 1, H RES 1, L RES 1, (HL) RES 1, A RES 2, B RES 2, C RES 2, D RES 2, E RES 2, H RES 2, L RES 2, (HL) RES 2, A RES 3, B RES 3, C RES 3, D RES 3, E RES 3, H RES 3, L RES 3, (HL) RES 3, A RES 4, B RES 4, C RES 4, D RES 4, E RES 4, H RES 4, L RES 4, (HL) RES 4, A RES 5, B RES 5, C RES 5, D RES 5, E RES 5, H RES 5, L RES 5, (HL) RES 5, A RES 6, B RES 6, C RES 6, D RES 6, E RES 6, H RES 6, L RES 6, (HL) RES 6, A RES 7, B RES 7, C RES 7, D RES 7, E RES 7, H RES 7, L RES 7, (HL) RES 7, A SET 0, B SET 0, C SET 0, D SET 0, E SET 0, H SET 0, L SET 0, (HL) SET 0, A SET 1, B SET 1, C SET 1, D SET 1, E SET 1, H SET 1, L SET 1, (HL) SET 1, A SET 2, B SET 2, C SET 2, D SET 2, E SET 2, H SET 2, L SET 2, (HL) SET 2, A SET 3, B SET 3, C SET 3, D SET 3, E SET 3, H SET 3, L SET 3, (HL) SET 3, A SET 4, B SET 4, C SET 4, D SET 4, E SET 4, H SET 4, L SET 4, (HL) SET 4, A SET 5, B SET 5, C SET 5, D SET 5, E SET 5, H SET 5, L SET 5, (HL) SET 5, A SET 6, B SET 6, C SET 6, D SET 6, E SET 6, H SET 6, L SET 6, (HL) SET 6, A SET 7, B SET 7, C SET 7, D SET 7, E SET 7, H SET 7, L SET 7, (HL) SET 7, A RLC B RLC C RLC D RLC E RLC H RLC L RLC (HL) RLC A RRC B RRC C RRC D RRC E RRC H RRC L RRC (HL) RRC A RL B RL C RL D RL E RL H RL L RL (HL) RL A RR B RR C RR D RR E RR H RR L RR (HL) RR A SLA B SLA C SLA D SLA E SLA H SLA L SLA (HL) SLA A SRA B SRA C SRA D SRA E SRA H SRA L SRA (HL) SRA A SLL B SLL C SLL D SLL E SLL H SLL L SLL (HL) SLL A SRL B SRL C SRL D SRL E SRL H SRL L SRL (HL) SRL A BIT 0, B BIT 0, C BIT 0, D BIT 0, E BIT 0, H BIT 0, L BIT 0, (HL) BIT 0, A BIT 1, B BIT 1, C BIT 1, D BIT 1, E BIT 1, H BIT 1, L BIT 1, (HL) BIT 1, A BIT 2, B BIT 2, C BIT 2, D BIT 2, E BIT 2, H BIT 2, L BIT 2, (HL) BIT 2, A BIT 3, B BIT 3, C BIT 3, D BIT 3, E BIT 3, H BIT 3, L BIT 3, (HL) BIT 3, A BIT 4, B BIT 4, C BIT 4, D BIT 4, E BIT 4, H BIT 4, L BIT 4, (HL) BIT 4, A BIT 5, B BIT 5, C BIT 5, D BIT 5, E BIT 5, H BIT 5, L BIT 5, (HL) BIT 5, A BIT 6, B BIT 6, C BIT 6, D BIT 6, E BIT 6, H BIT 6, L BIT 6, (HL) BIT 6, A BIT 7, B BIT 7, C BIT 7, D BIT 7, E BIT 7, H BIT 7, L BIT 7, (HL) BIT 7, A RES 0, B RES 0, C RES 0, D RES 0, E RES 0, H RES 0, L RES 0, (HL) RES 0, A RES 1, B RES 1, C RES 1, D RES 1, E RES 1, H RES 1, L RES 1, (HL) RES 1, A RES 2, B RES 2, C RES 2, D RES 2, E RES 2, H RES 2, L RES 2, (HL) RES 2, A RES 3, B RES 3, C RES 3, D RES 3, E RES 3, H RES 3, L RES 3, (HL) RES 3, A RES 4, B RES 4, C RES 4, D RES 4, E RES 4, H RES 4, L RES 4, (HL) RES 4, A RES 5, B RES 5, C RES 5, D RES 5, E RES 5, H RES 5, L RES 5, (HL) RES 5, A RES 6, B RES 6, C RES 6, D RES 6, E RES 6, H RES 6, L RES 6, (HL) RES 6, A RES 7, B RES 7, C RES 7, D RES 7, E RES 7, H RES 7, L RES 7, (HL) RES 7, A SET 0, B SET 0, C SET 0, D SET 0, E SET 0, H SET 0, L SET 0, (HL) SET 0, A SET 1, B SET 1, C SET 1, D SET 1, E SET 1, H SET 1, L SET 1, (HL) SET 1, A SET 2, B SET 2, C SET 2, D SET 2, E SET 2, H SET 2, L SET 2, (HL) SET 2, A SET 3, B SET 3, C SET 3, D SET 3, E SET 3, H SET 3, L SET 3, (HL) SET 3, A SET 4, B SET 4, C SET 4, D SET 4, E SET 4, H SET 4, L SET 4, (HL) SET 4, A SET 5, B SET 5, C SET 5, D SET 5, E SET 5, H SET 5, L SET 5, (HL) SET 5, A SET 6, B SET 6, C SET 6, D SET 6, E SET 6, H SET 6, L SET 6, (HL) SET 6, A SET 7, B SET 7, C SET 7, D SET 7, E SET 7, H SET 7, L SET 7, (HL) SET 7, A 0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x07 0x08 ADD IX, BC 0x0A 0x0B 0x0C 0x0D 0x0E 0x0F 0x10 0x11 0x12 0x13 0x14 0x15 0x16 0x17 0x18 ADD IX, DE 0x1A 0x1B 0x1C 0x1D 0x1E 0x1F 0x20 LD IX, nn LD (nn), IX INC IX INC IXH DEC IXH LD IXH, n 0x27 0x28 ADD IX, IX LD IX, (nn) DEC IX INC IXL DEC IXL LD IXL, n 0x2F 0x30 0x31 0x32 0x33 INC (IX + d) DEC (IX + d) LD (IX + d), n 0x37 0x38 ADD IX, SP 0x3A 0x3B 0x3C 0x3D 0x3E 0x3F 0x40 0x41 0x42 0x43 LD B, IXH LD B, IXL LD B, (IX + d) 0x47 0x48 0x49 0x4A 0x4B LD C, IXH LD C, IXL LD C, (IX + d) 0x4F 0x50 0x51 0x52 0x53 LD D, IXH LD D, IXL LD D, (IX + d) 0x57 0x58 0x59 0x5A 0x5B LD E, IXH LD E, IXL LD E, (IX + d) 0x5F LD IXH, B LD IXH, C LD IXH, D LD IXH, E LD IXH, IXH LD IXH, IXL LD H, (IX + d) LD IXH, A LD IXL, B LD IXL, C LD IXL, D LD IXL, E LD IXL, IXH LD IXL, IXL LD L, (IX + d) LD IXL, A LD (IX + d), B LD (IX + d), C LD (IX + d), D LD (IX + d), E LD (IX + d), H LD (IX + d), L 0x76 LD (IX + d), A 0x78 0x79 0x7A 0x7B LD A, IXH LD A, IXL LD A, (IX + d) 0x7F 0x80 0x81 0x82 0x83 ADD A, IXH ADD A, IXL ADD A, (IX + d) 0x87 0x88 0x89 0x8A 0x8B ADC A, IXH ADC A, IXL ADC A, (IX + d) 0x8F 0x90 0x91 0x92 0x93 SUB IXH SUB IXL SUB (IX + d) 0x97 0x98 0x99 0x9A 0x9B SBC A, IXH SBC A, IXL SBC A, (IX + d) 0x9F 0xA0 0xA1 0xA2 0xA3 AND IXH AND IXL AND (IX + d) 0xA7 0xA8 0xA9 0xAA 0xAB XOR IXH XOR IXL XOR (IX + d) 0xAF 0xB0 0xB1 0xB2 0xB3 OR IXH OR IXL OR (IX + d) 0xB7 0xB8 0xB9 0xBA 0xBB CP IXH CP IXL CP (IX + d) 0xBF 0xC0 0xC1 0xC2 0xC3 0xC4 0xC5 0xC6 0xC7 0xC8 0xC9 0xCA  0xCC 0xCD 0xCE 0xCF 0xD0 0xD1 0xD2 0xD3 0xD4 0xD5 0xD6 0xD7 0xD8 0xD9 0xDA 0xDB 0xDC 0xDD 0xDE 0xDF 0xE0 POP IX 0xE2 EX (SP), IX 0xE4 PUSH IX 0xE6 0xE7 0xE8 JP (IX) 0xEA 0xEB 0xEC 0xED 0xEE 0xEF 0xF0 0xF1 0xF2 0xF3 0xF4 0xF5 0xF6 0xF7 0xF8 LD SP, IX 0xFA 0xFB 0xFC 0xFD 0xFE 0xFF ADD IX, BC ADD IX, DE LD IX, nn LD (nn), IX INC IX INC IXH DEC IXH LD IXH, n ADD IX, IX LD IX, (nn) DEC IX INC IXL DEC IXL LD IXL, n INC (IX + d) DEC (IX + d) LD (IX + d), n ADD IX, SP LD B, IXH LD B, IXL LD B, (IX + d) LD C, IXH LD C, IXL LD C, (IX + d) LD D, IXH LD D, IXL LD D, (IX + d) LD E, IXH LD E, IXL LD E, (IX + d) LD IXH, B LD IXH, C LD IXH, D LD IXH, E LD IXH, IXH LD IXH, IXL LD H, (IX + d) LD IXH, A LD IXL, B LD IXL, C LD IXL, D LD IXL, E LD IXL, IXH LD IXL, IXL LD L, (IX + d) LD IXL, A LD (IX + d), B LD (IX + d), C LD (IX + d), D LD (IX + d), E LD (IX + d), H LD (IX + d), L LD (IX + d), A LD A, IXH LD A, IXL LD A, (IX + d) ADD A, IXH ADD A, IXL ADD A, (IX + d) ADC A, IXH ADC A, IXL ADC A, (IX + d) SUB IXH SUB IXL SUB (IX + d) SBC A, IXH SBC A, IXL SBC A, (IX + d) AND IXH AND IXL AND (IX + d) XOR IXH XOR IXL XOR (IX + d) OR IXH OR IXL OR (IX + d) CP IXH CP IXL CP (IX + d)  POP IX EX (SP), IX PUSH IX JP (IX) LD SP, IX 0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x07 0x08 0x09 0x0A 0x0B 0x0C 0x0D 0x0E 0x0F 0x10 0x11 0x12 0x13 0x14 0x15 0x16 0x17 0x18 0x19 0x1A 0x1B 0x1C 0x1D 0x1E 0x1F 0x20 0x21 0x22 0x23 0x24 0x25 0x26 0x27 0x28 0x29 0x2A 0x2B 0x2C 0x2D 0x2E 0x2F 0x30 0x31 0x32 0x33 0x34 0x35 0x36 0x37 0x38 0x39 0x3A 0x3B 0x3C 0x3D 0x3E 0x3F IN B, (C) OUT (C), B SBC HL, BC LD (nn), BC NEG RETN IM 0 LD I, A IN C, (C) OUT (C), C ADC HL, BC LD BC, (nn) NEG RETI IM 0/1 LD R, A IN D, (C) OUT (C), D SBC HL, DE LD (nn), DE NEG RETN IM 1 LD A, I IN E, (C) OUT (C), E ADC HL, DE LD DE, (nn) NEG RETN IM 2 LD A, R IN H, (C) OUT (C), H SBC HL, HL LD (nn), HL NEG RETN IM 0 RRD IN L, (C) OUT (C), L ADC HL, HL LD HL, (nn) NEG RETN IM 0/1 RLD IN (C) / IN F, (C) OUT (C), 0 SBC HL, SP LD (nn), SP NEG RETN IM 1 0x77 IN A, (C) OUT (C), A ADC HL, SP LD SP, (nn) NEG RETN IM 2 0x7F 0x80 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8A 0x8B 0x8C 0x8D 0x8E 0x8F 0x90 0x91 0x92 0x93 0x94 0x95 0x96 0x97 0x98 0x99 0x9A 0x9B 0x9C 0x9D 0x9E 0x9F LDI CPI INI OUTI 0xA4 0xA5 0xA6 0xA7 LDD CPD IND OUTD 0xAC 0xAD 0xAE 0xAF LDIR CPIR INIR OTIR 0xB4 0xB5 0xB6 0xB7 LDDR CPDR INDR OTDR 0xBC 0xBD 0xBE 0xBF 0xC0 0xC1 0xC2 0xC3 0xC4 0xC5 0xC6 0xC7 0xC8 0xC9 0xCA 0xCB 0xCC 0xCD 0xCE 0xCF 0xD0 0xD1 0xD2 0xD3 0xD4 0xD5 0xD6 0xD7 0xD8 0xD9 0xDA 0xDB 0xDC 0xDD 0xDE 0xDF 0xE0 0xE1 0xE2 0xE3 0xE4 0xE5 0xE6 0xE7 0xE8 0xE9 0xEA 0xEB 0xEC 0xED 0xEE 0xEF 0xF0 0xF1 0xF2 0xF3 0xF4 0xF5 0xF6 0xF7 0xF8 0xF9 0xFA 0xFB 0xFC 0xFD 0xFE 0xFF IN B, (C) OUT (C), B SBC HL, BC LD (nn), BC NEG RETN IM 0 LD I, A IN C, (C) OUT (C), C ADC HL, BC LD BC, (nn) NEG RETIonReturnFromInterrupt(); IM 0/1 LD R, A IN D, (C) OUT (C), D SBC HL, DE LD (nn), DE NEG RETN IM 1 LD A, I IN E, (C) OUT (C), E ADC HL, DE LD DE, (nn) NEG RETN IM 2 LD A, R IN H, (C) OUT (C), H SBC HL, HL LD (nn), HL NEG RETN IM 0 RRD IN L, (C) OUT (C), L ADC HL, HL LD HL, (nn) NEG RETN IM 0/1 RLD IN (C) / IN F, (C) OUT (C), 0 SBC HL, SP LD (nn), SP NEG RETN IM 1 IN A, (C) OUT (C), A ADC HL, SP LD SP, (nn) NEG RETN IM 2 LDI HL++ DE++ BC-- CPI HL++ BC-- INI HL++ OUTI HL++ LDD HL-- DE-- BC-- CPD HL-- BC-- IND HL-- OUTD HL-- LDIR LDI After LDI, the Parity flag will be zero when BC=0 Decrement PC so that instruction is re-executed at next step (this allows interrupts to occur) CPIR CPI Parity clear when BC=0, Zero set when A=(HL) Decrement PC so that instruction is re-executed at next step (this allows interrupts to occur) INIR INI Decrement PC so that instruction is re-executed at next step (this allows interrupts to occur) OTIR OUTI Decrement PC so that instruction is re-executed at next step (this allows interrupts to occur) LDDR LDD After LDD, the Parity flag will be zero when BC=0 Decrement PC so that instruction is re-executed at next step (this allows interrupts to occur) CPDR CPD Parity clear when BC=0, Zero set when A=(HL) Decrement PC so that instruction is re-executed at next step (this allows interrupts to occur) INDR IND Decrement PC so that instruction is re-executed at next step (this allows interrupts to occur) OTDR OUTD Decrement PC so that instruction is re-executed at next step (this allows interrupts to occur) 0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x07 0x08 ADD IY, BC 0x0A 0x0B 0x0C 0x0D 0x0E 0x0F 0x10 0x11 0x12 0x13 0x14 0x15 0x16 0x17 0x18 ADD IY, DE 0x1A 0x1B 0x1C 0x1D 0x1E 0x1F 0x20 LD IY, nn LD (nn), IY INC IY INC IYH DEC IYH LD IYH, n 0x27 0x28 ADD IY, IY LD IY, (nn) DEC IY INC IYL DEC IYL LD IYL, n 0x2F 0x30 0x31 0x32 0x33 INC (IY + d) DEC (IY + d) LD (IY + d), n 0x37 0x38 ADD IY, SP 0x3A 0x3B 0x3C 0x3D 0x3E 0x3F 0x40 0x41 0x42 0x43 LD B, IYH LD B, IYL LD B, (IY + d) 0x47 0x48 0x49 0x4A 0x4B LD C, IYH LD C, IYL LD C, (IY + d) 0x4F 0x50 0x51 0x52 0x53 LD D, IYH LD D, IYL LD D, (IY + d) 0x57 0x58 0x59 0x5A 0x5B LD E, IYH LD E, IYL LD E, (IY + d) 0x5F LD IYH, B LD IYH, C LD IYH, D LD IYH, E LD IYH, IYH LD IYH, IYL LD H, (IY + d) LD IYH, A LD IYL, B LD IYL, C LD IYL, D LD IYL, E LD IYL, IYH LD IYL, IYL LD L, (IY + d) LD IYL, A LD (IY + d), B LD (IY + d), C LD (IY + d), D LD (IY + d), E LD (IY + d), H LD (IY + d), L 0x76 LD (IY + d), A 0x78 0x79 0x7A 0x7B LD A, IYH LD A, IYL LD A, (IY + d) 0x7F 0x80 0x81 0x82 0x83 ADD A, IYH ADD A, IYL ADD A, (IY + d) 0x87 0x88 0x89 0x8A 0x8B ADC A, IYH ADC A, IYL ADC A, (IY + d) 0x8F 0x90 0x91 0x92 0x93 SUB IYH SUB IYL SUB (IY + d) 0x97 0x98 0x99 0x9A 0x9B SBC A, IYH SBC A, IYL SBC A, (IY + d) 0x9F 0xA0 0xA1 0xA2 0xA3 AND IYH AND IYL AND (IY + d) 0xA7 0xA8 0xA9 0xAA 0xAB XOR IYH XOR IYL XOR (IY + d) 0xAF 0xB0 0xB1 0xB2 0xB3 OR IYH OR IYL OR (IY + d) 0xB7 0xB8 0xB9 0xBA 0xBB CP IYH CP IYL CP (IY + d) 0xBF 0xC0 0xC1 0xC2 0xC3 0xC4 0xC5 0xC6 0xC7 0xC8 0xC9 0xCA  0xCC 0xCD 0xCE 0xCF 0xD0 0xD1 0xD2 0xD3 0xD4 0xD5 0xD6 0xD7 0xD8 0xD9 0xDA 0xDB 0xDC 0xDD 0xDE 0xDF 0xE0 POP IY 0xE2 EX (SP), IY 0xE4 PUSH IY 0xE6 0xE7 0xE8 JP (IY) 0xEA 0xEB 0xEC 0xED 0xEE 0xEF 0xF0 0xF1 0xF2 0xF3 0xF4 0xF5 0xF6 0xF7 0xF8 LD SP, IY 0xFA 0xFB 0xFC 0xFD 0xFE 0xFF ADD IY, BC ADD IY, DE LD IY, nn LD (nn), IY INC IY INC IYH DEC IYH LD IYH, n ADD IY, IY LD IY, (nn) DEC IY INC IYL DEC IYL LD IYL, n INC (IY + d) DEC (IY + d) LD (IY + d), n ADD IY, SP LD B, IYH LD B, IYL LD B, (IY + d) LD C, IYH LD C, IYL LD C, (IY + d) LD D, IYH LD D, IYL LD D, (IY + d) LD E, IYH LD E, IYL LD E, (IY + d) LD IYH, B LD IYH, C LD IYH, D LD IYH, E LD IYH, IYH LD IYH, IYL LD H, (IY + d) LD IYH, A LD IYL, B LD IYL, C LD IYL, D LD IYL, E LD IYL, IYH LD IYL, IYL LD L, (IY + d) LD IYL, A LD (IY + d), B LD (IY + d), C LD (IY + d), D LD (IY + d), E LD (IY + d), H LD (IY + d), L LD (IY + d), A LD A, IYH LD A, IYL LD A, (IY + d) ADD A, IYH ADD A, IYL ADD A, (IY + d) ADC A, IYH ADC A, IYL ADC A, (IY + d) SUB IYH SUB IYL SUB (IY + d) SBC A, IYH SBC A, IYL SBC A, (IY + d) AND IYH AND IYL AND (IY + d) XOR IYH XOR IYL XOR (IY + d) OR IYH OR IYL OR (IY + d) CP IYH CP IYL CP (IY + d)  POP IY EX (SP), IY PUSH IY JP (IY) LD SP, IY LD B, RLC (IX + d) LD C, RLC (IX + d) LD D, RLC (IX + d) LD E, RLC (IX + d) LD H, RLC (IX + d) LD L, RLC (IX + d) RLC (IX + d) LD A, RLC (IX + d) LD B, RRC (IX + d) LD C, RRC (IX + d) LD D, RRC (IX + d) LD E, RRC (IX + d) LD H, RRC (IX + d) LD L, RRC (IX + d) RRC (IX + d) LD A, RRC (IX + d) LD B, RL (IX + d) LD C, RL (IX + d) LD D, RL (IX + d) LD E, RL (IX + d) LD H, RL (IX + d) LD L, RL (IX + d) RL (IX + d) LD A, RL (IX + d) LD B, RR (IX + d) LD C, RR (IX + d) LD D, RR (IX + d) LD E, RR (IX + d) LD H, RR (IX + d) LD L, RR (IX + d) RR (IX + d) LD A, RR (IX + d) LD B, SLA (IX + d) LD C, SLA (IX + d) LD D, SLA (IX + d) LD E, SLA (IX + d) LD H, SLA (IX + d) LD L, SLA (IX + d) SLA (IX + d) LD A, SLA (IX + d) LD B, SRA (IX + d) LD C, SRA (IX + d) LD D, SRA (IX + d) LD E, SRA (IX + d) LD H, SRA (IX + d) LD L, SRA (IX + d) SRA (IX + d) LD A, SRA (IX + d) LD B, SLL (IX + d) LD C, SLL (IX + d) LD D, SLL (IX + d) LD E, SLL (IX + d) LD H, SLL (IX + d) LD L, SLL (IX + d) SLL (IX + d) LD A, SLL (IX + d) LD B, SRL (IX + d) LD C, SRL (IX + d) LD D, SRL (IX + d) LD E, SRL (IX + d) LD H, SRL (IX + d) LD L, SRL (IX + d) SRL (IX + d) LD A, SRL (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) LD B, RES 0, (IX + d) LD C, RES 0, (IX + d) LD D, RES 0, (IX + d) LD E, RES 0, (IX + d) LD H, RES 0, (IX + d) LD L, RES 0, (IX + d) RES 0, (IX + d) LD A, RES 0, (IX + d) LD B, RES 1, (IX + d) LD C, RES 1, (IX + d) LD D, RES 1, (IX + d) LD E, RES 1, (IX + d) LD H, RES 1, (IX + d) LD L, RES 1, (IX + d) RES 1, (IX + d) LD A, RES 1, (IX + d) LD B, RES 2, (IX + d) LD C, RES 2, (IX + d) LD D, RES 2, (IX + d) LD E, RES 2, (IX + d) LD H, RES 2, (IX + d) LD L, RES 2, (IX + d) RES 2, (IX + d) LD A, RES 2, (IX + d) LD B, RES 3, (IX + d) LD C, RES 3, (IX + d) LD D, RES 3, (IX + d) LD E, RES 3, (IX + d) LD H, RES 3, (IX + d) LD L, RES 3, (IX + d) RES 3, (IX + d) LD A, RES 3, (IX + d) LD B, RES 4, (IX + d) LD C, RES 4, (IX + d) LD D, RES 4, (IX + d) LD E, RES 4, (IX + d) LD H, RES 4, (IX + d) LD L, RES 4, (IX + d) RES 4, (IX + d) LD A, RES 4, (IX + d) LD B, RES 5, (IX + d) LD C, RES 5, (IX + d) LD D, RES 5, (IX + d) LD E, RES 5, (IX + d) LD H, RES 5, (IX + d) LD L, RES 5, (IX + d) RES 5, (IX + d) LD A, RES 5, (IX + d) LD B, RES 6, (IX + d) LD C, RES 6, (IX + d) LD D, RES 6, (IX + d) LD E, RES 6, (IX + d) LD H, RES 6, (IX + d) LD L, RES 6, (IX + d) RES 6, (IX + d) LD A, RES 6, (IX + d) LD B, RES 7, (IX + d) LD C, RES 7, (IX + d) LD D, RES 7, (IX + d) LD E, RES 7, (IX + d) LD H, RES 7, (IX + d) LD L, RES 7, (IX + d) RES 7, (IX + d) LD A, RES 7, (IX + d) LD B, SET 0, (IX + d) LD C, SET 0, (IX + d) LD D, SET 0, (IX + d) LD E, SET 0, (IX + d) LD H, SET 0, (IX + d) LD L, SET 0, (IX + d) SET 0, (IX + d) LD A, SET 0, (IX + d) LD B, SET 1, (IX + d) LD C, SET 1, (IX + d) LD D, SET 1, (IX + d) LD E, SET 1, (IX + d) LD H, SET 1, (IX + d) LD L, SET 1, (IX + d) SET 1, (IX + d) LD A, SET 1, (IX + d) LD B, SET 2, (IX + d) LD C, SET 2, (IX + d) LD D, SET 2, (IX + d) LD E, SET 2, (IX + d) LD H, SET 2, (IX + d) LD L, SET 2, (IX + d) SET 2, (IX + d) LD A, SET 2, (IX + d) LD B, SET 3, (IX + d) LD C, SET 3, (IX + d) LD D, SET 3, (IX + d) LD E, SET 3, (IX + d) LD H, SET 3, (IX + d) LD L, SET 3, (IX + d) SET 3, (IX + d) LD A, SET 3, (IX + d) LD B, SET 4, (IX + d) LD C, SET 4, (IX + d) LD D, SET 4, (IX + d) LD E, SET 4, (IX + d) LD H, SET 4, (IX + d) LD L, SET 4, (IX + d) SET 4, (IX + d) LD A, SET 4, (IX + d) LD B, SET 5, (IX + d) LD C, SET 5, (IX + d) LD D, SET 5, (IX + d) LD E, SET 5, (IX + d) LD H, SET 5, (IX + d) LD L, SET 5, (IX + d) SET 5, (IX + d) LD A, SET 5, (IX + d) LD B, SET 6, (IX + d) LD C, SET 6, (IX + d) LD D, SET 6, (IX + d) LD E, SET 6, (IX + d) LD H, SET 6, (IX + d) LD L, SET 6, (IX + d) SET 6, (IX + d) LD A, SET 6, (IX + d) LD B, SET 7, (IX + d) LD C, SET 7, (IX + d) LD D, SET 7, (IX + d) LD E, SET 7, (IX + d) LD H, SET 7, (IX + d) LD L, SET 7, (IX + d) SET 7, (IX + d) LD A, SET 7, (IX + d) LD B, RLC (IX + d) LD C, RLC (IX + d) LD D, RLC (IX + d) LD E, RLC (IX + d) LD H, RLC (IX + d) LD L, RLC (IX + d) RLC (IX + d) LD A, RLC (IX + d) LD B, RRC (IX + d) LD C, RRC (IX + d) LD D, RRC (IX + d) LD E, RRC (IX + d) LD H, RRC (IX + d) LD L, RRC (IX + d) RRC (IX + d) LD A, RRC (IX + d) LD B, RL (IX + d) LD C, RL (IX + d) LD D, RL (IX + d) LD E, RL (IX + d) LD H, RL (IX + d) LD L, RL (IX + d) RL (IX + d) LD A, RL (IX + d) LD B, RR (IX + d) LD C, RR (IX + d) LD D, RR (IX + d) LD E, RR (IX + d) LD H, RR (IX + d) LD L, RR (IX + d) RR (IX + d) LD A, RR (IX + d) LD B, SLA (IX + d) LD C, SLA (IX + d) LD D, SLA (IX + d) LD E, SLA (IX + d) LD H, SLA (IX + d) LD L, SLA (IX + d) SLA (IX + d) LD A, SLA (IX + d) LD B, SRA (IX + d) LD C, SRA (IX + d) LD D, SRA (IX + d) LD E, SRA (IX + d) LD H, SRA (IX + d) LD L, SRA (IX + d) SRA (IX + d) LD A, SRA (IX + d) LD B, SLL (IX + d) LD C, SLL (IX + d) LD D, SLL (IX + d) LD E, SLL (IX + d) LD H, SLL (IX + d) LD L, SLL (IX + d) SLL (IX + d) LD A, SLL (IX + d) LD B, SRL (IX + d) LD C, SRL (IX + d) LD D, SRL (IX + d) LD E, SRL (IX + d) LD H, SRL (IX + d) LD L, SRL (IX + d) SRL (IX + d) LD A, SRL (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 0, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 1, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 2, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 3, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 4, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 5, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 6, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) BIT 7, (IX + d) LD B, RES 0, (IX + d) LD C, RES 0, (IX + d) LD D, RES 0, (IX + d) LD E, RES 0, (IX + d) LD H, RES 0, (IX + d) LD L, RES 0, (IX + d) RES 0, (IX + d) LD A, RES 0, (IX + d) LD B, RES 1, (IX + d) LD C, RES 1, (IX + d) LD D, RES 1, (IX + d) LD E, RES 1, (IX + d) LD H, RES 1, (IX + d) LD L, RES 1, (IX + d) RES 1, (IX + d) LD A, RES 1, (IX + d) LD B, RES 2, (IX + d) LD C, RES 2, (IX + d) LD D, RES 2, (IX + d) LD E, RES 2, (IX + d) LD H, RES 2, (IX + d) LD L, RES 2, (IX + d) RES 2, (IX + d) LD A, RES 2, (IX + d) LD B, RES 3, (IX + d) LD C, RES 3, (IX + d) LD D, RES 3, (IX + d) LD E, RES 3, (IX + d) LD H, RES 3, (IX + d) LD L, RES 3, (IX + d) RES 3, (IX + d) LD A, RES 3, (IX + d) LD B, RES 4, (IX + d) LD C, RES 4, (IX + d) LD D, RES 4, (IX + d) LD E, RES 4, (IX + d) LD H, RES 4, (IX + d) LD L, RES 4, (IX + d) RES 4, (IX + d) LD A, RES 4, (IX + d) LD B, RES 5, (IX + d) LD C, RES 5, (IX + d) LD D, RES 5, (IX + d) LD E, RES 5, (IX + d) LD H, RES 5, (IX + d) LD L, RES 5, (IX + d) RES 5, (IX + d) LD A, RES 5, (IX + d) LD B, RES 6, (IX + d) LD C, RES 6, (IX + d) LD D, RES 6, (IX + d) LD E, RES 6, (IX + d) LD H, RES 6, (IX + d) LD L, RES 6, (IX + d) RES 6, (IX + d) LD A, RES 6, (IX + d) LD B, RES 7, (IX + d) LD C, RES 7, (IX + d) LD D, RES 7, (IX + d) LD E, RES 7, (IX + d) LD H, RES 7, (IX + d) LD L, RES 7, (IX + d) RES 7, (IX + d) LD A, RES 7, (IX + d) LD B, SET 0, (IX + d) LD C, SET 0, (IX + d) LD D, SET 0, (IX + d) LD E, SET 0, (IX + d) LD H, SET 0, (IX + d) LD L, SET 0, (IX + d) SET 0, (IX + d) LD A, SET 0, (IX + d) LD B, SET 1, (IX + d) LD C, SET 1, (IX + d) LD D, SET 1, (IX + d) LD E, SET 1, (IX + d) LD H, SET 1, (IX + d) LD L, SET 1, (IX + d) SET 1, (IX + d) LD A, SET 1, (IX + d) LD B, SET 2, (IX + d) LD C, SET 2, (IX + d) LD D, SET 2, (IX + d) LD E, SET 2, (IX + d) LD H, SET 2, (IX + d) LD L, SET 2, (IX + d) SET 2, (IX + d) LD A, SET 2, (IX + d) LD B, SET 3, (IX + d) LD C, SET 3, (IX + d) LD D, SET 3, (IX + d) LD E, SET 3, (IX + d) LD H, SET 3, (IX + d) LD L, SET 3, (IX + d) SET 3, (IX + d) LD A, SET 3, (IX + d) LD B, SET 4, (IX + d) LD C, SET 4, (IX + d) LD D, SET 4, (IX + d) LD E, SET 4, (IX + d) LD H, SET 4, (IX + d) LD L, SET 4, (IX + d) SET 4, (IX + d) LD A, SET 4, (IX + d) LD B, SET 5, (IX + d) LD C, SET 5, (IX + d) LD D, SET 5, (IX + d) LD E, SET 5, (IX + d) LD H, SET 5, (IX + d) LD L, SET 5, (IX + d) SET 5, (IX + d) LD A, SET 5, (IX + d) LD B, SET 6, (IX + d) LD C, SET 6, (IX + d) LD D, SET 6, (IX + d) LD E, SET 6, (IX + d) LD H, SET 6, (IX + d) LD L, SET 6, (IX + d) SET 6, (IX + d) LD A, SET 6, (IX + d) LD B, SET 7, (IX + d) LD C, SET 7, (IX + d) LD D, SET 7, (IX + d) LD E, SET 7, (IX + d) LD H, SET 7, (IX + d) LD L, SET 7, (IX + d) SET 7, (IX + d) LD A, SET 7, (IX + d) NOP LD   BC,nn LD   (BC),A INC  BC INC  B DEC  B LD   B,n RLCA EX   AF,AF' ADD  HL,BC LD   A,(BC) DEC  BC INC  C DEC  C LD   C,n RRCA DJNZ d LD   DE,nn LD   (DE),A INC  DE INC  D DEC  D LD   D,n RLA JR   d ADD  HL,DE LD   A,(DE) DEC  DE INC  E DEC  E LD   E,n RRA JR   NZ,d LD   HL,nn LD   (nn),HL INC  HL INC  H DEC  H LD   H,n DAA JR   Z,d ADD  HL,HL LD   HL,(nn) DEC  HL INC  L DEC  L LD   L,n CPL JR   NC,d LD   SP,nn LD   (nn),A INC  SP INC  (HL) DEC  (HL) LD   (HL),n SCF JR   C,d ADD  HL,SP LD   A,(nn) DEC  SP INC  A DEC  A LD   A,n CCF LD   B,B LD   B,C LD   B,D LD   B,E LD   B,H LD   B,L LD   B,(HL) LD   B,A LD   C,B LD   C,C LD   C,D LD   C,E LD   C,H LD   C,L LD   C,(HL) LD   C,A LD   D,B LD   D,C LD   D,D LD   D,E LD   D,H LD   D,L LD   D,(HL) LD   D,A LD   E,B LD   E,C LD   E,D LD   E,E LD   E,H LD   E,L LD   E,(HL) LD   E,A LD   H,B LD   H,C LD   H,D LD   H,E LD   H,H LD   H,L LD   H,(HL) LD   H,A LD   L,B LD   L,C LD   L,D LD   L,E LD   L,H LD   L,L LD   L,(HL) LD   L,A LD   (HL),B LD   (HL),C LD   (HL),D LD   (HL),E LD   (HL),H LD   (HL),L HALT LD   (HL),A LD   A,B LD   A,C LD   A,D LD   A,E LD   A,H LD   A,L LD   A,(HL) LD   A,A ADD  A,B ADD  A,C ADD  A,D ADD  A,E ADD  A,H ADD  A,L ADD  A,(HL) ADD  A,A ADC  A,B ADC  A,C ADC  A,D ADC  A,E ADC  A,H ADC  A,L ADC  A,(HL) ADC  A,A SUB  B SUB  C SUB  D SUB  E SUB  H SUB  L SUB  (HL) SUB  A SBC  A,B SBC  A,C SBC  A,D SBC  A,E SBC  A,H SBC  A,L SBC  A,(HL) SBC  A,A AND  B AND  C AND  D AND  E AND  H AND  L AND  (HL) AND  A XOR  B XOR  C XOR  D XOR  E XOR  H XOR  L XOR  (HL) XOR  A OR   B OR   C OR   D OR   E OR   H OR   L OR   (HL) OR   A CP   B CP   C CP   D CP   E CP   H CP   L CP   (HL) CP   A RET  NZ POP  BC JP   NZ,nn JP   nn CALL NZ,nn PUSH BC ADD  A,n RST  0 RET  Z RET JP   Z,nn [Prefix] CALL Z,nn CALL nn ADC  A,n RST  8 RET  NC POP  DE JP   NC,nn OUT  (n),A CALL NC,nn PUSH DE SUB  n RST  10H RET  C EXX JP   C,nn IN   A,(n) CALL C,nn [IX Prefix] SBC  A,n RST  18H RET  PO POP  HL JP   PO,nn EX   (SP),HL CALL PO,nn PUSH HL AND  n RST  20H RET  PE JP   (HL) JP   PE,nn EX   DE,HL CALL PE,nn [Prefix] XOR  n RST  28H RET  P POP  AF JP   P,nn DI CALL P,nn PUSH AF OR   n RST  30H RET  M LD   SP,HL JP   M,nn EI CALL M,nn [IY Prefix] CP   n RST  38H NOP LD   BC,nn LD   (BC),A INC  BC INC  B DEC  B LD   B,n RLCA EX   AF,AF' ADD  HL,BC LD   A,(BC) DEC  BC INC  C DEC  C LD   C,n RRCA DJNZ d LD   DE,nn LD   (DE),A INC  DE INC  D DEC  D LD   D,n RLA JR   d ADD  HL,DE LD   A,(DE) DEC  DE INC  E DEC  E LD   E,n RRA JR   NZ,d LD   HL,nn LD   (nn),HL INC  HL INC  H DEC  H LD   H,n
    DAA is computed using the following table to get a diff value
    that is added to or subtracted (according to the N flag) from A:

        C Upper H Lower Diff
        -+-----+-+-----+----
        1   *   0  0-9   60
        1   *   1  0-9   66
        1   *   *  A-F   66
        0  0-9  0  0-9   00
        0  0-9  1  0-9   06
        0  0-8  *  A-F   06
        0  A-F  0  0-9   60
        0  9-F  *  A-F   66
        0  A-F  1  0-9   66

    The carry and halfcarry flags are then updated using similar tables.

    These tables were found by Stefano Donati of Ramsoft and are
    published in the "Undocumented Z80 Documented" paper by Sean Young,
    the following is an algorithmical implementation with no lookups.
 DAA JR   Z,d ADD  HL,HL LD   HL,(nn) DEC  HL INC  L DEC  L LD   L,n CPL JR   NC,d LD   SP,nn LD   (nn),A INC  SP INC  (HL) DEC  (HL) LD   (HL),n SCF JR   C,d ADD  HL,SP LD   A,(nn) DEC  SP INC  A DEC  A LD   A,n CCF Halfcarry holds previous carry LD   B,B LD   B,C LD   B,D LD   B,E LD   B,H LD   B,L LD   B,(HL) LD   B,A LD   C,B LD   C,C LD   C,D LD   C,E LD   C,H LD   C,L LD   C,(HL) LD   C,A LD   D,B LD   D,C LD   D,D LD   D,E LD   D,H LD   D,L LD   D,(HL) LD   D,A LD   E,B LD   E,C LD   E,D LD   E,E LD   E,H LD   E,L LD   E,(HL) LD   E,A LD   H,B LD   H,C LD   H,D LD   H,E LD   H,H LD   H,L LD   H,(HL) LD   H,A LD   L,B LD   L,C LD   L,D LD   L,E LD   L,H LD   L,L LD   L,(HL) LD   L,A LD   (HL),B LD   (HL),C LD   (HL),D LD   (HL),E LD   (HL),H LD   (HL),L HALT LD   (HL),A LD   A,B LD   A,C LD   A,D LD   A,E LD   A,H LD   A,L LD   A,(HL) LD   A,A ADD  A,B ADD  A,C ADD  A,D ADD  A,E ADD  A,H ADD  A,L ADD  A,(HL) ADD  A,A ADC  A,B ADC  A,C ADC  A,D ADC  A,E ADC  A,H ADC  A,L ADC  A,(HL) ADC  A,A SUB  B SUB  C SUB  D SUB  E SUB  H SUB  L SUB  (HL) SUB  A SBC  A,B SBC  A,C SBC  A,D SBC  A,E SBC  A,H SBC  A,L SBC  A,(HL) SBC  A,A AND  B AND  C AND  D AND  E AND  H AND  L AND  (HL) AND  A XOR  B XOR  C XOR  D XOR  E XOR  H XOR  L XOR  (HL) XOR  A OR   B OR   C OR   D OR   E OR   H OR   L OR   (HL) OR   A CP   B CP   C CP   D CP   E CP   H CP   L CP   (HL) CP   A RET  NZ POP  BC JP   NZ,nn JP   nn CALL NZ,nn PUSH BC ADD  A,n RST  0 RET  Z RET JP   Z,nn [Prefix] CALL Z,nn CALL nn ADC  A,n RST  8 RET  NC POP  DE JP   NC,nn OUT  (n),A CALL NC,nn PUSH DE SUB  n RST  10H RET  C EXX JP   C,nn IN   A,(n) CALL C,nn [IX Prefix] SBC  A,n RST  18H RET  PO POP  HL JP   PO,nn EX   (SP),HL CALL PO,nn PUSH HL AND  n RST  20H RET  PE JP   (HL) JP   PE,nn EX   DE,HL CALL PE,nn [Prefix] NOP XOR  n RST  28H RET  P POP  AF JP   P,nn DI CALL P,nn PUSH AF OR   n RST  30H RET  M LD   SP,HL JP   M,nn EI CALL M,nn [IY Prefix] CP   n RST  38H Executes one instruction  Update memory refresh register (not strictly needed but...) CPU is halted, do a NOP instruction NOP Get the opcode to execute Update the cycles counter with the number of cycles for this opcode Execute the opcode handler Update registers Clip program counter Clip stack pointer
    Runs the CPU for the specified number of cycles.

    Note: the memory refresh register is not updated!
 Execute instructions until the specified number of cycles has elapsed CPU is halted, do NOPs for the rest of cycles (this may be off by a few cycles) Get the opcode to execute Update the cycles counter with the number of cycles for this opcode Execute the opcode handler Update registers Clip program counter Clip stack pointer Return the number of extra cycles executed Interrupt  Execute interrupt only if interrupts are enabled Disable maskable interrupts and restart the CPU if halted Non-maskable interrupt  Disable maskable interrupts but preserve IFF2 (that is a copy of IFF1), also restart the CPU if halted Exit now, to avoid possible infinite loops NOP IX or IY prefix is ignored for this opcode Handle IX or IY prefix if possible Extended opcode is valid Extended opcode not valid, fall back to standard opcode