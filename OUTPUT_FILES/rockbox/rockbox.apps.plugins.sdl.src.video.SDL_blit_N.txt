
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org
 Functions to blit from N-bit surfaces to other surfaces  XXX: Just guess G4  __MACOSX__ 
 * Data Stream Touch...Altivec cache prefetching.
 *
 *  Don't use this on a G5...however, the speed boost is very significant
 *   on a G4.
  macro to set DST control word value...  Calculate the permute vector used for 32->32 swizzling 
    * We have to assume that the bits that aren't used by other
     *  colors is alpha, and it's one complete byte, since some formats
     *  leave alpha with a zero mask, but we should still swizzle the bits.
      ARGB  Use zero for alpha if either surface doesn't have alpha  do scalar until we can align...  After all that work, here's the vector part!  trailing unaligned stores  1555  565  do scalar until we can align...  move to next row, accounting for pitch.  
        0x10 - 0x1f is the alpha
        0x00 - 0x0e evens are the red
        0x01 - 0x0f odds are zero
    
        0x00 - 0x0f is ARxx ARxx ARxx ARxx
        0x11 - 0x0f odds are blue
    
        0x00 - 0x0f is ARxB ARxB ARxB ARxB
        0x10 - 0x0e evens are green
     do scalar until we can align...  After all that work, here's the vector part!  trailing unaligned stores  do scalar until we can align...  move to next row, accounting for pitch.  
        0x10 - 0x1f is the alpha
        0x00 - 0x0e evens are the red
        0x01 - 0x0f odds are zero
    
        0x00 - 0x0f is ARxx ARxx ARxx ARxx
        0x11 - 0x0f odds are blue
    
        0x00 - 0x0f is ARxB ARxB ARxB ARxB
        0x10 - 0x0e evens are green
     do scalar until we can align...  After all that work, here's the vector part!  trailing unaligned stores  do scalar until we can align...  move to next row, accounting for pitch.  load the source vec  vsel is set for items that match the key  permute the src vec to the dest format  load the destination vec  select the source and dest into vs  Altivec code to swizzle one 32-bit surface to a different 32-bit format.  Use this on a G5  do scalar until we can align...  After all that work, here's the vector part!  src is ready.  swizzle it.  store it back out.  cover pixels at the end of the row that didn't fit in 16 bytes.  max 7 pixels, don't bother with prefetch.  move to next row, accounting for pitch.  Altivec code to swizzle one 32-bit surface to a different 32-bit format.  Use this on a G4  do scalar until we can align...  After all that work, here's the vector part!  src is ready.  swizzle it.  store it back out.  cover pixels at the end of the row that didn't fit in 16 bytes.  max 7 pixels, don't bother with prefetch.  move to next row, accounting for pitch.  Provide an override for testing ..  Feature 1 is has-MMX  Feature 2 is has-AltiVec  Feature 4 is dont-use-prefetch  !!!! FIXME: Check for G5 or later, not the cache size! Always prefetch on a G4.  Feature 1 is has-MMX  This is now endian dependent  SDL_BYTEORDER == SDL_BIG_ENDIAN  Heheheh, we coerce Hermes into using SDL blit information  Special optimized blit for RGB 8-8-8 --> RGB 3-3-2  Set up some basic variables  Pack RGB into 8bit pixel  USE_DUFFS_LOOP  Pack RGB into 8bit pixel  USE_DUFFS_LOOP  Special optimized blit for RGB 8-8-8 --> RGB 5-5-5  Set up some basic variables  Memory align at 4-byte boundary, if necessary  Don't do anything if width is 0  Perform copy alignment  Copy in 4 pixel chunks  Get any leftovers  Copy in 4 pixel chunks  Get any leftovers  USE_DUFFS_LOOP  Special optimized blit for RGB 8-8-8 --> RGB 5-6-5  Set up some basic variables  Memory align at 4-byte boundary, if necessary  Don't do anything if width is 0  Perform copy alignment  Copy in 4 pixel chunks  Get any leftovers  Copy in 4 pixel chunks  Get any leftovers  USE_DUFFS_LOOP  SDL_HERMES_BLITTERS  Special optimized blit for RGB 5-6-5 --> 32-bit RGB surfaces  Set up some basic variables  Copy in 4 pixel chunks  Get any leftovers  USE_DUFFS_LOOP  Special optimized blit for RGB 5-6-5 --> ARGB 8-8-8-8  Special optimized blit for RGB 5-6-5 --> ABGR 8-8-8-8  Special optimized blit for RGB 5-6-5 --> RGBA 8-8-8-8  Special optimized blit for RGB 5-6-5 --> BGRA 8-8-8-8  Special optimized blit for RGB 8-8-8 --> RGB 3-3-2  Set up some basic variables  Pack RGB into 8bit pixel  USE_DUFFS_LOOP  Set up some basic variables  Pack RGB into 8bit pixel  Pack RGB into 8bit pixel  Pack RGB into 8bit pixel  Pack RGB into 8bit pixel  USE_DUFFS_LOOP  blits 32 bit RGB<->RGBA with both surfaces having the same R,G,B fields  RGB->RGBA, SET_ALPHA  RGBA->RGB, NO_ALPHA  FIXME: should map alpha to [0..255] correctly!  Set up some basic variables  Pack RGB into 8bit pixel  Pack RGB into 8bit pixel  Set up some basic variables  Set up some basic variables  Set up some basic variables  FIXME: should map alpha to [0..255] correctly!  Normal N to N optimized blitters  Default for 8-bit RGB source, an invalid combination  has-altivec  Default for 16-bit RGB source, used if no other blitter matches  Default for 24-bit RGB source, never optimized  has-altivec | dont-use-prefetch  has-altivec  has-altivec  Default for 32-bit RGB source, used if no other blitter matches  Mask matches table, or table entry is zero  Set up data for choosing the blit  alpha or alpha+colorkey  We don't support destinations less than 8-bits  colorkey blit: Here we don't have too many options, mostly
	       because RLE is the preferred fast way to deal with this.
	       If a particular case turns out to be useful we'll add it.  We assume 8-bit destinations are palettized  Now the meat, choose the blitter we want  default C fallback catch-all. Slow!  Fastpath C fallback: 32bit RGB<->RGBA blit with matching RGB  DEBUG_ASM 
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org
 Functions to blit from N-bit surfaces to other surfaces  XXX: Just guess G4  __MACOSX__ 
 * Data Stream Touch...Altivec cache prefetching.
 *
 *  Don't use this on a G5...however, the speed boost is very significant
 *   on a G4.
  macro to set DST control word value...  Calculate the permute vector used for 32->32 swizzling 
    * We have to assume that the bits that aren't used by other
     *  colors is alpha, and it's one complete byte, since some formats
     *  leave alpha with a zero mask, but we should still swizzle the bits.
      ARGB  Use zero for alpha if either surface doesn't have alpha  do scalar until we can align...  After all that work, here's the vector part!  trailing unaligned stores  1555  565  do scalar until we can align...  move to next row, accounting for pitch.  
        0x10 - 0x1f is the alpha
        0x00 - 0x0e evens are the red
        0x01 - 0x0f odds are zero
    
        0x00 - 0x0f is ARxx ARxx ARxx ARxx
        0x11 - 0x0f odds are blue
    
        0x00 - 0x0f is ARxB ARxB ARxB ARxB
        0x10 - 0x0e evens are green
     do scalar until we can align...  After all that work, here's the vector part!  trailing unaligned stores  do scalar until we can align...  move to next row, accounting for pitch.  
        0x10 - 0x1f is the alpha
        0x00 - 0x0e evens are the red
        0x01 - 0x0f odds are zero
    
        0x00 - 0x0f is ARxx ARxx ARxx ARxx
        0x11 - 0x0f odds are blue
    
        0x00 - 0x0f is ARxB ARxB ARxB ARxB
        0x10 - 0x0e evens are green
     do scalar until we can align...  After all that work, here's the vector part!  trailing unaligned stores  do scalar until we can align...  move to next row, accounting for pitch.  load the source vec  vsel is set for items that match the key  permute the src vec to the dest format  load the destination vec  select the source and dest into vs  Altivec code to swizzle one 32-bit surface to a different 32-bit format.  Use this on a G5  do scalar until we can align...  After all that work, here's the vector part!  src is ready.  swizzle it.  store it back out.  cover pixels at the end of the row that didn't fit in 16 bytes.  max 7 pixels, don't bother with prefetch.  move to next row, accounting for pitch.  Altivec code to swizzle one 32-bit surface to a different 32-bit format.  Use this on a G4  do scalar until we can align...  After all that work, here's the vector part!  src is ready.  swizzle it.  store it back out.  cover pixels at the end of the row that didn't fit in 16 bytes.  max 7 pixels, don't bother with prefetch.  move to next row, accounting for pitch.  Provide an override for testing ..  Feature 1 is has-MMX  Feature 2 is has-AltiVec  Feature 4 is dont-use-prefetch  !!!! FIXME: Check for G5 or later, not the cache size! Always prefetch on a G4.  Feature 1 is has-MMX  This is now endian dependent  SDL_BYTEORDER == SDL_BIG_ENDIAN  Heheheh, we coerce Hermes into using SDL blit information  Special optimized blit for RGB 8-8-8 --> RGB 3-3-2  Set up some basic variables  Pack RGB into 8bit pixel  USE_DUFFS_LOOP  Pack RGB into 8bit pixel  USE_DUFFS_LOOP  Special optimized blit for RGB 8-8-8 --> RGB 5-5-5  Set up some basic variables  Memory align at 4-byte boundary, if necessary  Don't do anything if width is 0  Perform copy alignment  Copy in 4 pixel chunks  Get any leftovers  Copy in 4 pixel chunks  Get any leftovers  USE_DUFFS_LOOP  Special optimized blit for RGB 8-8-8 --> RGB 5-6-5  Set up some basic variables  Memory align at 4-byte boundary, if necessary  Don't do anything if width is 0  Perform copy alignment  Copy in 4 pixel chunks  Get any leftovers  Copy in 4 pixel chunks  Get any leftovers  USE_DUFFS_LOOP  SDL_HERMES_BLITTERS  Special optimized blit for RGB 5-6-5 --> 32-bit RGB surfaces  Set up some basic variables  Copy in 4 pixel chunks  Get any leftovers  USE_DUFFS_LOOP  Special optimized blit for RGB 5-6-5 --> ARGB 8-8-8-8  Special optimized blit for RGB 5-6-5 --> ABGR 8-8-8-8  Special optimized blit for RGB 5-6-5 --> RGBA 8-8-8-8  Special optimized blit for RGB 5-6-5 --> BGRA 8-8-8-8  Special optimized blit for RGB 8-8-8 --> RGB 3-3-2  Set up some basic variables  Pack RGB into 8bit pixel  USE_DUFFS_LOOP  Set up some basic variables  Pack RGB into 8bit pixel  Pack RGB into 8bit pixel  Pack RGB into 8bit pixel  Pack RGB into 8bit pixel  USE_DUFFS_LOOP  blits 32 bit RGB<->RGBA with both surfaces having the same R,G,B fields  RGB->RGBA, SET_ALPHA  RGBA->RGB, NO_ALPHA  FIXME: should map alpha to [0..255] correctly!  Set up some basic variables  Pack RGB into 8bit pixel  Pack RGB into 8bit pixel  Set up some basic variables  Set up some basic variables  Set up some basic variables  FIXME: should map alpha to [0..255] correctly!  Normal N to N optimized blitters  Default for 8-bit RGB source, an invalid combination  has-altivec  Default for 16-bit RGB source, used if no other blitter matches  Default for 24-bit RGB source, never optimized  has-altivec | dont-use-prefetch  has-altivec  has-altivec  Default for 32-bit RGB source, used if no other blitter matches  Mask matches table, or table entry is zero  Set up data for choosing the blit  alpha or alpha+colorkey  We don't support destinations less than 8-bits  colorkey blit: Here we don't have too many options, mostly
	       because RLE is the preferred fast way to deal with this.
	       If a particular case turns out to be useful we'll add it.  We assume 8-bit destinations are palettized  Now the meat, choose the blitter we want  default C fallback catch-all. Slow!  Fastpath C fallback: 32bit RGB<->RGBA blit with matching RGB  DEBUG_ASM 
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org
 Functions to blit from N-bit surfaces to other surfaces  XXX: Just guess G4  __MACOSX__ 
 * Data Stream Touch...Altivec cache prefetching.
 *
 *  Don't use this on a G5...however, the speed boost is very significant
 *   on a G4.
  macro to set DST control word value...  Calculate the permute vector used for 32->32 swizzling 
    * We have to assume that the bits that aren't used by other
     *  colors is alpha, and it's one complete byte, since some formats
     *  leave alpha with a zero mask, but we should still swizzle the bits.
      ARGB  Use zero for alpha if either surface doesn't have alpha  do scalar until we can align...  After all that work, here's the vector part!  trailing unaligned stores  1555  565  do scalar until we can align...  move to next row, accounting for pitch.  
        0x10 - 0x1f is the alpha
        0x00 - 0x0e evens are the red
        0x01 - 0x0f odds are zero
    
        0x00 - 0x0f is ARxx ARxx ARxx ARxx
        0x11 - 0x0f odds are blue
    
        0x00 - 0x0f is ARxB ARxB ARxB ARxB
        0x10 - 0x0e evens are green
     do scalar until we can align...  After all that work, here's the vector part!  trailing unaligned stores  do scalar until we can align...  move to next row, accounting for pitch.  
        0x10 - 0x1f is the alpha
        0x00 - 0x0e evens are the red
        0x01 - 0x0f odds are zero
    
        0x00 - 0x0f is ARxx ARxx ARxx ARxx
        0x11 - 0x0f odds are blue
    
        0x00 - 0x0f is ARxB ARxB ARxB ARxB
        0x10 - 0x0e evens are green
     do scalar until we can align...  After all that work, here's the vector part!  trailing unaligned stores  do scalar until we can align...  move to next row, accounting for pitch.  load the source vec  vsel is set for items that match the key  permute the src vec to the dest format  load the destination vec  select the source and dest into vs  Altivec code to swizzle one 32-bit surface to a different 32-bit format.  Use this on a G5  do scalar until we can align...  After all that work, here's the vector part!  src is ready.  swizzle it.  store it back out.  cover pixels at the end of the row that didn't fit in 16 bytes.  max 7 pixels, don't bother with prefetch.  move to next row, accounting for pitch.  Altivec code to swizzle one 32-bit surface to a different 32-bit format.  Use this on a G4  do scalar until we can align...  After all that work, here's the vector part!  src is ready.  swizzle it.  store it back out.  cover pixels at the end of the row that didn't fit in 16 bytes.  max 7 pixels, don't bother with prefetch.  move to next row, accounting for pitch.  Provide an override for testing ..  Feature 1 is has-MMX  Feature 2 is has-AltiVec  Feature 4 is dont-use-prefetch  !!!! FIXME: Check for G5 or later, not the cache size! Always prefetch on a G4.  Feature 1 is has-MMX  This is now endian dependent  SDL_BYTEORDER == SDL_BIG_ENDIAN  Heheheh, we coerce Hermes into using SDL blit information  Special optimized blit for RGB 8-8-8 --> RGB 3-3-2  Set up some basic variables  Pack RGB into 8bit pixel  USE_DUFFS_LOOP  Pack RGB into 8bit pixel  USE_DUFFS_LOOP  Special optimized blit for RGB 8-8-8 --> RGB 5-5-5  Set up some basic variables  Memory align at 4-byte boundary, if necessary  Don't do anything if width is 0  Perform copy alignment  Copy in 4 pixel chunks  Get any leftovers  Copy in 4 pixel chunks  Get any leftovers  USE_DUFFS_LOOP  Special optimized blit for RGB 8-8-8 --> RGB 5-6-5  Set up some basic variables  Memory align at 4-byte boundary, if necessary  Don't do anything if width is 0  Perform copy alignment  Copy in 4 pixel chunks  Get any leftovers  Copy in 4 pixel chunks  Get any leftovers  USE_DUFFS_LOOP  SDL_HERMES_BLITTERS  Special optimized blit for RGB 5-6-5 --> 32-bit RGB surfaces  Set up some basic variables  Copy in 4 pixel chunks  Get any leftovers  USE_DUFFS_LOOP  Special optimized blit for RGB 5-6-5 --> ARGB 8-8-8-8  Special optimized blit for RGB 5-6-5 --> ABGR 8-8-8-8  Special optimized blit for RGB 5-6-5 --> RGBA 8-8-8-8  Special optimized blit for RGB 5-6-5 --> BGRA 8-8-8-8  Special optimized blit for RGB 8-8-8 --> RGB 3-3-2  Set up some basic variables  Pack RGB into 8bit pixel  USE_DUFFS_LOOP  Set up some basic variables  Pack RGB into 8bit pixel  Pack RGB into 8bit pixel  Pack RGB into 8bit pixel  Pack RGB into 8bit pixel  USE_DUFFS_LOOP  blits 32 bit RGB<->RGBA with both surfaces having the same R,G,B fields  RGB->RGBA, SET_ALPHA  RGBA->RGB, NO_ALPHA  FIXME: should map alpha to [0..255] correctly!  Set up some basic variables  Pack RGB into 8bit pixel  Pack RGB into 8bit pixel  Set up some basic variables  Set up some basic variables  Set up some basic variables  FIXME: should map alpha to [0..255] correctly!  Normal N to N optimized blitters  Default for 8-bit RGB source, an invalid combination  has-altivec  Default for 16-bit RGB source, used if no other blitter matches  Default for 24-bit RGB source, never optimized  has-altivec | dont-use-prefetch  has-altivec  has-altivec  Default for 32-bit RGB source, used if no other blitter matches  Mask matches table, or table entry is zero  Set up data for choosing the blit  alpha or alpha+colorkey  We don't support destinations less than 8-bits  colorkey blit: Here we don't have too many options, mostly
	       because RLE is the preferred fast way to deal with this.
	       If a particular case turns out to be useful we'll add it.  We assume 8-bit destinations are palettized  Now the meat, choose the blitter we want  default C fallback catch-all. Slow!  Fastpath C fallback: 32bit RGB<->RGBA blit with matching RGB  DEBUG_ASM 