
 * unruly.c: Implementation for Binary Puzzles.
 * (C) 2012 Lennard Sprong
 * Created for Simon Tatham's Portable Puzzle Collection
 * See LICENCE for licence details
 *
 * Objective of the game: Fill the grid with zeros and ones, with the
 * following rules:
 * - There can't be a run of three or more equal numbers.
 * - Each row and column contains an equal amount of zeros and ones.
 *
 * This puzzle type is known under several names, including
 * Tohu-Wa-Vohu, One and Two and Binairo.
 *
 * Some variants include an extra constraint, stating that no two rows or two
 * columns may contain the same exact sequence of zeros and ones.
 * This rule is rarely used, so it is not enabled in the default presets
 * (but it can be selected via the Custom configurer).
 *
 * More information:
 * http://www.janko.at/Raetsel/Tohu-Wa-Vohu/index.htm
 
 * Possible future improvements:
 *
 * More solver cleverness
 *
 *  - a counting-based deduction in which you find groups of squares
 *    which must each contain at least one of a given colour, plus
 *    other squares which are already known to be that colour, and see
 *    if you have any squares left over when you've worked out where
 *    they all have to be. This is a generalisation of the current
 *    check_near_complete: where that only covers rows with three
 *    unfilled squares, this would handle more, such as
 *        0 . . 1 0 1 . . 0 .
 *    in which each of the two-square gaps must contain a 0, and there
 *    are three 0s placed, and that means the rightmost square can't
 *    be a 0.
 *
 *  - an 'Unreasonable' difficulty level, supporting recursion and
 *    backtracking.
 
     * When editing this enum, maintain the invariants
     *   COL_n_HIGHLIGHT = COL_n + 1
     *   COL_n_LOWLIGHT = COL_n + 2
      full grid width and height respectively  should row and column patterns be unique?  structure copy  structure copy  structure copy  ...which is invalid 
             * The nth element of this array gives the number of
             * distinct possible Unruly rows of length 2n (that is,
             * containing exactly n 1s and n 0s and not containing
             * three consecutive elements the same) for as long as
             * those numbers fit in a 32-bit signed int.
             *
             * So in unique-rows mode, if the puzzle width is 2n, then
             * the height must be at most (this array)[n], and vice
             * versa.
             *
             * This is sequence A177790 in the Online Encyclopedia of
             * Integer Sequences: http://oeis.org/A177790
              Place number  End line  End with NUL  ****** *
 * Solver *
 * ******  Reset all scratch data  Check for any three squares which almost form three in a row 
     * Find each row that has max entries of type 'check', and see if
     * all those entries match those in any row with max-1 entries. If
     * so, set the last non-matching entry of the latter row to ensure
     * that it's different.
      Place a number in every empty square in a row/column  number of rows to check  target number of 0s/1s  Check for completed rows/cols for one number, then fill in the rest 
     * This function checks for a row with one Y remaining, then looks
     * for positions that could cause the remaining squares in the row
     * to make 3 X's in a row. Example:
     *
     * Consider the following row:
     * 1 1 0 . . .
     * If the last 1 was placed in the last square, the remaining
     * squares would be 0:
     * 1 1 0 0 0 1
     * This violates the 3 in a row rule. We now know that the last 1
     * shouldn't be in the last cell.
     * 1 1 0 . . 0
      Check for any two blank and one filled square  One type must have 1 remaining, the other at least 2 
                 * Temporarily fill the empty spaces with something else.
                 * This avoids raising the counts for the row and column
                  Check for any three in a row, and mark errors accordingly (if
     * required)  Check for any two full rows matching exactly, and mark errors
     * accordingly (if required)  See if all rows/columns are satisfied. If one is exceeded,
     * mark it as an error (if required)
      Check for impending 3's  Keep using the simpler techniques while they produce results  Check for completed rows  Check for impending failures of row/column uniqueness, if
         * it's enabled in this game mode  Normal techniques  Check for nearly completed rows  ********* *
 * Generator *
 * *********  Generate random array of spaces 
     * Construct a valid filled grid by repeatedly picking an unfilled
     * space and fill it, then calling the solver to fill in any
     * spaces forced by the change.
      Generate random array of spaces 
         * Winnow the clues by starting from our filled grid, repeatedly
         * picking a filled space and emptying it, as long as the solver
         * reports that the puzzle can still be solved after doing so.
         
         * See if the game has accidentally come out too easy.
         
             * Puzzles of the easiest difficulty can't be too easy.
              Encode description  ************** *
 * User Interface *
 * **************  Mouse click  Keyboard move  Place one  Cycle through options  don't put no-ops on the undo chain  ----------------------------------------------------------------------
 * Drawing routines.
  Draw the grid edge first, so the tile can overwrite it  Background of the tile  3-in-a-row errors  Count errors  Row-match errors  Cursor rectangle  Main window background  Outer edge of grid  Using 7mm squares  Draw the border  game_request_keys  wants_statusbar  flags  ***************** *
 * Standalone solver *
 * *****************  Most of the standalone solver code was copied from unequal.c and singles.c 
 * unruly.c: Implementation for Binary Puzzles.
 * (C) 2012 Lennard Sprong
 * Created for Simon Tatham's Portable Puzzle Collection
 * See LICENCE for licence details
 *
 * Objective of the game: Fill the grid with zeros and ones, with the
 * following rules:
 * - There can't be a run of three or more equal numbers.
 * - Each row and column contains an equal amount of zeros and ones.
 *
 * This puzzle type is known under several names, including
 * Tohu-Wa-Vohu, One and Two and Binairo.
 *
 * Some variants include an extra constraint, stating that no two rows or two
 * columns may contain the same exact sequence of zeros and ones.
 * This rule is rarely used, so it is not enabled in the default presets
 * (but it can be selected via the Custom configurer).
 *
 * More information:
 * http://www.janko.at/Raetsel/Tohu-Wa-Vohu/index.htm
 
 * Possible future improvements:
 *
 * More solver cleverness
 *
 *  - a counting-based deduction in which you find groups of squares
 *    which must each contain at least one of a given colour, plus
 *    other squares which are already known to be that colour, and see
 *    if you have any squares left over when you've worked out where
 *    they all have to be. This is a generalisation of the current
 *    check_near_complete: where that only covers rows with three
 *    unfilled squares, this would handle more, such as
 *        0 . . 1 0 1 . . 0 .
 *    in which each of the two-square gaps must contain a 0, and there
 *    are three 0s placed, and that means the rightmost square can't
 *    be a 0.
 *
 *  - an 'Unreasonable' difficulty level, supporting recursion and
 *    backtracking.
 
     * When editing this enum, maintain the invariants
     *   COL_n_HIGHLIGHT = COL_n + 1
     *   COL_n_LOWLIGHT = COL_n + 2
      full grid width and height respectively  should row and column patterns be unique?  structure copy  structure copy  structure copy  ...which is invalid 
             * The nth element of this array gives the number of
             * distinct possible Unruly rows of length 2n (that is,
             * containing exactly n 1s and n 0s and not containing
             * three consecutive elements the same) for as long as
             * those numbers fit in a 32-bit signed int.
             *
             * So in unique-rows mode, if the puzzle width is 2n, then
             * the height must be at most (this array)[n], and vice
             * versa.
             *
             * This is sequence A177790 in the Online Encyclopedia of
             * Integer Sequences: http://oeis.org/A177790
              Place number  End line  End with NUL  ****** *
 * Solver *
 * ******  Reset all scratch data  Check for any three squares which almost form three in a row 
     * Find each row that has max entries of type 'check', and see if
     * all those entries match those in any row with max-1 entries. If
     * so, set the last non-matching entry of the latter row to ensure
     * that it's different.
      Place a number in every empty square in a row/column  number of rows to check  target number of 0s/1s  Check for completed rows/cols for one number, then fill in the rest 
     * This function checks for a row with one Y remaining, then looks
     * for positions that could cause the remaining squares in the row
     * to make 3 X's in a row. Example:
     *
     * Consider the following row:
     * 1 1 0 . . .
     * If the last 1 was placed in the last square, the remaining
     * squares would be 0:
     * 1 1 0 0 0 1
     * This violates the 3 in a row rule. We now know that the last 1
     * shouldn't be in the last cell.
     * 1 1 0 . . 0
      Check for any two blank and one filled square  One type must have 1 remaining, the other at least 2 
                 * Temporarily fill the empty spaces with something else.
                 * This avoids raising the counts for the row and column
                  Check for any three in a row, and mark errors accordingly (if
     * required)  Check for any two full rows matching exactly, and mark errors
     * accordingly (if required)  See if all rows/columns are satisfied. If one is exceeded,
     * mark it as an error (if required)
      Check for impending 3's  Keep using the simpler techniques while they produce results  Check for completed rows  Check for impending failures of row/column uniqueness, if
         * it's enabled in this game mode  Normal techniques  Check for nearly completed rows  ********* *
 * Generator *
 * *********  Generate random array of spaces 
     * Construct a valid filled grid by repeatedly picking an unfilled
     * space and fill it, then calling the solver to fill in any
     * spaces forced by the change.
      Generate random array of spaces 
         * Winnow the clues by starting from our filled grid, repeatedly
         * picking a filled space and emptying it, as long as the solver
         * reports that the puzzle can still be solved after doing so.
         
         * See if the game has accidentally come out too easy.
         
             * Puzzles of the easiest difficulty can't be too easy.
              Encode description  ************** *
 * User Interface *
 * **************  Mouse click  Keyboard move  Place one  Cycle through options  don't put no-ops on the undo chain  ----------------------------------------------------------------------
 * Drawing routines.
  Draw the grid edge first, so the tile can overwrite it  Background of the tile  3-in-a-row errors  Count errors  Row-match errors  Cursor rectangle  Main window background  Outer edge of grid  Using 7mm squares  Draw the border  game_request_keys  wants_statusbar  flags  ***************** *
 * Standalone solver *
 * *****************  Most of the standalone solver code was copied from unequal.c and singles.c 
 * unruly.c: Implementation for Binary Puzzles.
 * (C) 2012 Lennard Sprong
 * Created for Simon Tatham's Portable Puzzle Collection
 * See LICENCE for licence details
 *
 * Objective of the game: Fill the grid with zeros and ones, with the
 * following rules:
 * - There can't be a run of three or more equal numbers.
 * - Each row and column contains an equal amount of zeros and ones.
 *
 * This puzzle type is known under several names, including
 * Tohu-Wa-Vohu, One and Two and Binairo.
 *
 * Some variants include an extra constraint, stating that no two rows or two
 * columns may contain the same exact sequence of zeros and ones.
 * This rule is rarely used, so it is not enabled in the default presets
 * (but it can be selected via the Custom configurer).
 *
 * More information:
 * http://www.janko.at/Raetsel/Tohu-Wa-Vohu/index.htm
 
 * Possible future improvements:
 *
 * More solver cleverness
 *
 *  - a counting-based deduction in which you find groups of squares
 *    which must each contain at least one of a given colour, plus
 *    other squares which are already known to be that colour, and see
 *    if you have any squares left over when you've worked out where
 *    they all have to be. This is a generalisation of the current
 *    check_near_complete: where that only covers rows with three
 *    unfilled squares, this would handle more, such as
 *        0 . . 1 0 1 . . 0 .
 *    in which each of the two-square gaps must contain a 0, and there
 *    are three 0s placed, and that means the rightmost square can't
 *    be a 0.
 *
 *  - an 'Unreasonable' difficulty level, supporting recursion and
 *    backtracking.
 
     * When editing this enum, maintain the invariants
     *   COL_n_HIGHLIGHT = COL_n + 1
     *   COL_n_LOWLIGHT = COL_n + 2
      full grid width and height respectively  should row and column patterns be unique?  structure copy  structure copy  structure copy  ...which is invalid 
             * The nth element of this array gives the number of
             * distinct possible Unruly rows of length 2n (that is,
             * containing exactly n 1s and n 0s and not containing
             * three consecutive elements the same) for as long as
             * those numbers fit in a 32-bit signed int.
             *
             * So in unique-rows mode, if the puzzle width is 2n, then
             * the height must be at most (this array)[n], and vice
             * versa.
             *
             * This is sequence A177790 in the Online Encyclopedia of
             * Integer Sequences: http://oeis.org/A177790
              Place number  End line  End with NUL  ****** *
 * Solver *
 * ******  Reset all scratch data  Check for any three squares which almost form three in a row 
     * Find each row that has max entries of type 'check', and see if
     * all those entries match those in any row with max-1 entries. If
     * so, set the last non-matching entry of the latter row to ensure
     * that it's different.
      Place a number in every empty square in a row/column  number of rows to check  target number of 0s/1s  Check for completed rows/cols for one number, then fill in the rest 
     * This function checks for a row with one Y remaining, then looks
     * for positions that could cause the remaining squares in the row
     * to make 3 X's in a row. Example:
     *
     * Consider the following row:
     * 1 1 0 . . .
     * If the last 1 was placed in the last square, the remaining
     * squares would be 0:
     * 1 1 0 0 0 1
     * This violates the 3 in a row rule. We now know that the last 1
     * shouldn't be in the last cell.
     * 1 1 0 . . 0
      Check for any two blank and one filled square  One type must have 1 remaining, the other at least 2 
                 * Temporarily fill the empty spaces with something else.
                 * This avoids raising the counts for the row and column
                  Check for any three in a row, and mark errors accordingly (if
     * required)  Check for any two full rows matching exactly, and mark errors
     * accordingly (if required)  See if all rows/columns are satisfied. If one is exceeded,
     * mark it as an error (if required)
      Check for impending 3's  Keep using the simpler techniques while they produce results  Check for completed rows  Check for impending failures of row/column uniqueness, if
         * it's enabled in this game mode  Normal techniques  Check for nearly completed rows  ********* *
 * Generator *
 * *********  Generate random array of spaces 
     * Construct a valid filled grid by repeatedly picking an unfilled
     * space and fill it, then calling the solver to fill in any
     * spaces forced by the change.
      Generate random array of spaces 
         * Winnow the clues by starting from our filled grid, repeatedly
         * picking a filled space and emptying it, as long as the solver
         * reports that the puzzle can still be solved after doing so.
         
         * See if the game has accidentally come out too easy.
         
             * Puzzles of the easiest difficulty can't be too easy.
              Encode description  ************** *
 * User Interface *
 * **************  Mouse click  Keyboard move  Place one  Cycle through options  don't put no-ops on the undo chain  ----------------------------------------------------------------------
 * Drawing routines.
  Draw the grid edge first, so the tile can overwrite it  Background of the tile  3-in-a-row errors  Count errors  Row-match errors  Cursor rectangle  Main window background  Outer edge of grid  Using 7mm squares  Draw the border  game_request_keys  wants_statusbar  flags  ***************** *
 * Standalone solver *
 * *****************  Most of the standalone solver code was copied from unequal.c and singles.c 