**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Dave Chapman, 2011 Andree Buschmann
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Implementation of the stream.h functions used by libalac  A normal read without any byte-swapping  Check if there is a dedicated byte position contained for the given frame.
 * Return this byte position in case of success or return -1. This allows to
 * skip empty samples. 
 * During standard playback the search result (index i) will always increase. 
 * Therefor we save this index and let the caller set this value again as start
 * index when calling m4a_check_sample_offset() for the next frame. This 
 * reduces the overall loop count significantly.  Find the exact or preceding frame in lookup_table[]. Return both frame
 * and byte position of this match.  We want the last chunk _before_ *frame.  Seek to desired sound sample location. Return 1 on success (and modify
 * sound_samples_done and current_sample), 0 if failed.
 *
 * Find the sample (=frame) that contains the given sound sample, find a best
 * fit for this sample in the lookup_table[], seek to the byte position.  Holds the amount of chunks/frames.  Sums up total amount of samples.  Holds the desired chunk/frame index.  First check we have the appropriate metadata - we should always
     * have it.
      Find the destination block from time_to_sample array  We know the new sample (=frame), now calculate the file position.  We know the new file position, so let's try to seek to it  Seek to the sample containing file_loc. Return 1 on success (and modify
 * sound_samples_done and current_sample), 0 if failed.
 *
 * Seeking uses the following arrays:
 *
 * 1) the lookup_table array contains the file offset for the first sample
 *    of each chunk.
 *
 * 2) the time_to_sample array contains the duration (in sound samples) 
 *    of each sample of data.
 *
 * Locate the chunk containing location (using lookup_table), find the first
 * sample of that chunk (using lookup_table). Then use time_to_sample to
 * calculate the sound_samples_done value.
  We know the desired byte offset, search for the chunk right before. 
     * Return the associated sample to this chunk as chunk_sample.  We want the last chunk _before_ file_loc.  Get sound sample offset.  Go to the new file position. **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Dave Chapman, 2011 Andree Buschmann
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Implementation of the stream.h functions used by libalac  A normal read without any byte-swapping  Check if there is a dedicated byte position contained for the given frame.
 * Return this byte position in case of success or return -1. This allows to
 * skip empty samples. 
 * During standard playback the search result (index i) will always increase. 
 * Therefor we save this index and let the caller set this value again as start
 * index when calling m4a_check_sample_offset() for the next frame. This 
 * reduces the overall loop count significantly.  Find the exact or preceding frame in lookup_table[]. Return both frame
 * and byte position of this match.  We want the last chunk _before_ *frame.  Seek to desired sound sample location. Return 1 on success (and modify
 * sound_samples_done and current_sample), 0 if failed.
 *
 * Find the sample (=frame) that contains the given sound sample, find a best
 * fit for this sample in the lookup_table[], seek to the byte position.  Holds the amount of chunks/frames.  Sums up total amount of samples.  Holds the desired chunk/frame index.  First check we have the appropriate metadata - we should always
     * have it.
      Find the destination block from time_to_sample array  We know the new sample (=frame), now calculate the file position.  We know the new file position, so let's try to seek to it  Seek to the sample containing file_loc. Return 1 on success (and modify
 * sound_samples_done and current_sample), 0 if failed.
 *
 * Seeking uses the following arrays:
 *
 * 1) the lookup_table array contains the file offset for the first sample
 *    of each chunk.
 *
 * 2) the time_to_sample array contains the duration (in sound samples) 
 *    of each sample of data.
 *
 * Locate the chunk containing location (using lookup_table), find the first
 * sample of that chunk (using lookup_table). Then use time_to_sample to
 * calculate the sound_samples_done value.
  We know the desired byte offset, search for the chunk right before. 
     * Return the associated sample to this chunk as chunk_sample.  We want the last chunk _before_ file_loc.  Get sound sample offset.  Go to the new file position. **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Dave Chapman, 2011 Andree Buschmann
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Implementation of the stream.h functions used by libalac  A normal read without any byte-swapping  Check if there is a dedicated byte position contained for the given frame.
 * Return this byte position in case of success or return -1. This allows to
 * skip empty samples. 
 * During standard playback the search result (index i) will always increase. 
 * Therefor we save this index and let the caller set this value again as start
 * index when calling m4a_check_sample_offset() for the next frame. This 
 * reduces the overall loop count significantly.  Find the exact or preceding frame in lookup_table[]. Return both frame
 * and byte position of this match.  We want the last chunk _before_ *frame.  Seek to desired sound sample location. Return 1 on success (and modify
 * sound_samples_done and current_sample), 0 if failed.
 *
 * Find the sample (=frame) that contains the given sound sample, find a best
 * fit for this sample in the lookup_table[], seek to the byte position.  Holds the amount of chunks/frames.  Sums up total amount of samples.  Holds the desired chunk/frame index.  First check we have the appropriate metadata - we should always
     * have it.
      Find the destination block from time_to_sample array  We know the new sample (=frame), now calculate the file position.  We know the new file position, so let's try to seek to it  Seek to the sample containing file_loc. Return 1 on success (and modify
 * sound_samples_done and current_sample), 0 if failed.
 *
 * Seeking uses the following arrays:
 *
 * 1) the lookup_table array contains the file offset for the first sample
 *    of each chunk.
 *
 * 2) the time_to_sample array contains the duration (in sound samples) 
 *    of each sample of data.
 *
 * Locate the chunk containing location (using lookup_table), find the first
 * sample of that chunk (using lookup_table). Then use time_to_sample to
 * calculate the sound_samples_done value.
  We know the desired byte offset, search for the chunk right before. 
     * Return the associated sample to this chunk as chunk_sample.  We want the last chunk _before_ file_loc.  Get sound sample offset.  Go to the new file position. 