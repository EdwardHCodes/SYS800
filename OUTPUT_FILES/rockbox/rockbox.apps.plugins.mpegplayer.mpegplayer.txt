**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * mpegplayer main entrypoint and UI implementation
 *
 * Copyright (c) 2007 Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ******************************************************************************************************************************************************
 * NOTES:
 * 
 * mpegplayer is structured as follows:
 * 
 *                       +-->Video Thread-->Video Output-->LCD
 *                       |
 * UI-->Stream Manager-->+-->Audio Thread-->PCM buffer--Audio Device
 *         |       |     |                        |     (ref. clock)
 *         |       |     +-->Buffer Thread        |
 *    Stream Data  |             |          (clock intf./
 *     Requests    |         File Cache      drift adj.)
 *                 |          Disk I/O
 *         Stream services
 *          (timing, etc.)
 * 
 * Thread list:
 *  1) The main thread - Handles user input, settings, basic playback control
 *     and USB connect.
 * 
 *  2) Stream Manager thread - Handles playback state, events from streams
 *     such as when a stream is finished, stream commands, PCM state. The
 *     layer in which this thread run also handles arbitration of data
 *     requests between the streams and the disk buffer. The actual specific
 *     transport layer code may get moved out to support multiple container
 *     formats.
 * 
 *  3) Buffer thread - Buffers data in the background, generates notifications
 *     to streams when their data has been buffered, and watches streams'
 *     progress to keep data available during playback. Handles synchronous
 *     random access requests when the file cache is missed.
 * 
 *  4) Video thread (running on the COP for PortalPlayer targets) - Decodes
 *     the video stream and renders video frames to the LCD. Handles
 *     miscellaneous video tasks like frame and thumbnail printing.
 * 
 *  5) Audio thread (running on the main CPU to maintain consistency with the
 *     audio FIQ hander on PP) - Decodes audio frames and places them into
 *     the PCM buffer for rendering by the audio device.
 * 
 * Streams are neither aware of one another nor care about one another. All
 * streams shall have their own thread (unless it is _really_ efficient to
 * have a single thread handle a couple minor streams). All coordination of
 * the streams is done through the stream manager. The clocking is controlled
 * by and exposed by the stream manager to other streams and implemented at
 * the PCM level.
 * 
 * Notes about MPEG files:
 * 
 * MPEG System Clock is 27MHz - i.e. 27000000 ticks/second.
 * 
 * FPS is represented in terms of a frame period - this is always an
 * integer number of 27MHz ticks.
 * 
 * e.g. 29.97fps (30000/1001) NTSC video has an exact frame period of
 * 900900 27MHz ticks.
 * 
 * In libmpeg2, info->sequence->frame_period contains the frame_period.
 * 
 * Working with Rockbox's 100Hz tick, the common frame rates would need
 * to be as follows (1):
 * 
 * FPS     | 27Mhz   | 100Hz          | 44.1KHz   | 48KHz
 * --------|-----------------------------------------------------------
 * 10*     | 2700000 | 10             | 4410      | 4800
 * 12*     | 2250000 |  8.3333        | 3675      | 4000
 * 15*     | 1800000 |  6.6667        | 2940      | 3200
 * 23.9760 | 1126125 |  4.170833333   | 1839.3375 | 2002
 * 24      | 1125000 |  4.166667      | 1837.5    | 2000
 * 25      | 1080000 |  4             | 1764      | 1920
 * 29.9700 |  900900 |  3.336667      | 1471,47   | 1601.6
 * 30      |  900000 |  3.333333      | 1470      | 1600
 * 
 * *Unofficial framerates
 * 
 * (1) But we don't really care since the audio clock is used anyway and has
 *     very fine resolution ;-)
 **************************************************************************** button definitions #define MPEG_STOP       BUTTON_POWER#define MPEG_STOP       BUTTON_POWER One thing we can do here for targets with remotes is having a display
 * always on the remote instead of always forcing a popup on the main display  cap ff/rewind step size at max % of file  3% of 30min file == 54s step size  Get new FPS reading each second  Flag that says user did it  OSD status - same order as icon array  Only refresh elements when due  Refresh the...  ...volume display  ...time display+progress  ...playback status icon  ...background (implies ALL)  ...video image upon timeout  Resume playback upon timeout  OR bitflag - don't draw anything  OR bitflag - show the OSD  OR bitflag - headphones caused pause  hide the OSD (aid readability)  Only immediate graphical elements  Status icons selected according to font height  Main border areas that contain OSD elements  FPS Display  OSD coordinates  Screen coordinates  When to next update FPS reading  For establishing rect size  Accessed on other processor  Blend two colors in 0-100% (0-255) mix of c2 into c1  IRAM preserving mechanism to enable talking menus  make the icache (if it exists) up to date with the new code  HAVE_CPUCACHE_INVALIDATE  make the icache (if it exists) up to date with the new code  HAVE_CPUCACHE_INVALIDATE  Drawing functions that operate rotated on LCD_PORTRAIT displays -
 * most are just wrappers of lcd_* functions with transforms applied.
 * The origin is the upper-left corner of the OSD area  Portrait displays need rotated text rendering  Limited function that only renders in DRMODE_FG and uses absolute screen
 * coordinates  Clip right  Clip left  nothing left to do  Clip bottom  Clip top  nothing left to do bg_pattern = move starting point  Blend the given two colors  LCD_DEPTH == 24  Clip right  Clip left  nothing left to do  Clip bottom  Clip top  nothing left to do  initialize blending bg_pattern= get proportional width and glyph bits  LCD_PORTRAIT * FPS Display * Post-frame callback (on video thread) - update the FPS rectangle from the
 * framebuffer  Set up to have the callback only update the intersection of the video
 * rectangle and the FPS text rectangle - if they don't intersect, then
 * the callback is set to NULL  Oriented screen coordinates -> OSD coordinates  OSD coordinates -> framebuffer coordinates  Refresh the FPS display  Initialize the FPS display * OSD * So we can refresh the overlay  Turn off backlight timeout  Revert to user's backlight settings  HAVE_BACKLIGHT_BRIGHTNESS  Choose well-sized bitmap images relative to font height  HAVE_HEADPHONE_DETECTION  Refresh the background area  Draw a "raised" area for our graphics  Give contrast with the main background  Draw the movie duration  else don't know the duration  Refresh the current time display + the progress bar  Refresh the volume display area  Right-justified  Refresh the status icon  Draw status icon with a drop shadow  Update the current status which determines which icon is displayed  If paused with a pending resume, coerce it to OSD_STATUS_PLAYING  A refresh is needed  Update the current time that will be displayed  Refresh various parts of the OSD - showing it if it is hidden  The default which forces no updates  Make sure Rockbox doesn't turn off the player because of
           too little activity  Redraw the current or possibly extract a new video frame  Restart playback if the timout was reached  If not visible, return  Hide if the visibility duration was reached  A forced update of some region  Show if currently invisible  Avoid call back into this function - it will be drawn  Move back timeouts for frame print and hide  Refresh whatever graphical elements are due automatically  No drawing needed  Set basic drawing params that are used. Elements that perform variations
     * will restore them.  Requires a redraw of everything  Go back to defaults  Update the dirty rectangle  Show/Hide the OSD  Clip away the part of video that is covered  Not playing - set brightness to mpegplayer setting  Uncover clipped video area and redraw it  Not playing - restore backlight brightness  Set the current status - update screen if specified  Get the current status value  Handle Fast-forward/Rewind keys using WPS settings (and some nicked code ;)
 * Returns last button code
  Absolute clock => stream-relative  simplify code below  simplify code below  Fail tests below but still do proper exit  fast forwarding, calc max step relative to end  rewinding, calc max step relative to start  smooth seeking by multiplying step by: 1 + (2 ^ -accel)  Return adjusted STREAM_* status  Coerce to STREAM_PLAYING if paused with a pending resume  Change the current audio volume by a specified amount  Volume down - clip to lower limit  Volume up - clip to upper limit  Sync the global settings  Update the volume display  Begin playback at the specified time  Halt playback - pause engine and return logical state  Coerce to STREAM_PLAYING if paused with a pending resume  Cancel some auto refreshes - caller will restart them if desired  No backlight fiddling here - callers does the right thing  Pause playback if playing  Resume pending - change to a still video frame update  Leave brightness alone and restore it when OSD is hidden  Update time display now  Resume playback if halted or paused  Cancel video and resume auto refresh - the resyc when starting
     * playback will perform those tasks  Stop playback - remember the resume point if not closed  Perform a seek by button if seeking is possible for this stream.
 *
 * A delay will be inserted before restarting in case the user decides to
 * seek again soon after.
 *
 * Returns last button code
  Halt playback - not strictly necessary but nice when doing
     * buttons  Obtain a new playback point according to the buttons  delay resume if playing  refresh if paused  Tell engine to resume at that time  Perform a seek by time if seeking is possible for this stream
 *
 * If playing, the seeking is immediate, otherise a delay is added to showing
 * a still if paused in case the user does another seek soon after.
 *
 * If seeking isn't possible, a time of zero performs a skip to the
 * beginning.
  merely preserve resume  refresh if paused  Cancel print or resume if pending  Tell engine to seek to the given time - no state change  Has this file one of the supported extensions?  Should match apps/plugins/viewers.config  deliver the next/previous video file in the current directory.
   returns false if there is none.  Handle SYS_PHONE_PLUGGED/UNPLUGGED  Wait for any incomplete state transition to complete first  Start playback at the specified starting time  Gently poll the video player for EOS and handle UI  BUTTON_NONE:  Draw the current frame if prepared already  LCD_ENABLE_EVENT_1:  MPEG_VOLUP*:  MPEG_VOLDOWN*:  save previous state  Hide video output  The menu can change the font, so restore  If not stopped, show video again  If stream was playing, restart it  MPEG_MENU:  Show if not visible  Make sure it refreshes  MPEG_STOP:  Playing => Paused  Paused => Playing  MPEG_PAUSE*:  If button has been released: skip to next/previous file  Check current playback position  Start the current video from the beginning  Release within 3 seconds of start: skip to previous
                     * file  jump to stop handling above  MPEG_RW:  If button has been released: skip to next file  jump to stop handling above  MPEG_FF:  SYS_PHONE_*:  default:  end while  Be sure hook is removed before exiting since the stop will put it
     * back because of the backlight restore.  assume success  No file = GTFO  Disable all talking before initializing IRAM  Fatal because this should not fail  start menu  Enter button loop and process UI  Problem with file; display message about it - not
                 * considered a plugin error  Be sure it doesn't get stuck in an unbreakable loop of bad
                 * files, just in case! Otherwise, keep searching in the
                 * chosen direction until a good one is found.  Abort the search and exit  Default to next file  Was first file already; avoid endlessly
                                 * retrying it  switch  while  return value of button_loop says, what's next  quit after finished the last videofile  if there is no previous file, play the same videofile  while  Actually handle delayed processing of system events of interest
     * that were captured in other button loops **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * mpegplayer main entrypoint and UI implementation
 *
 * Copyright (c) 2007 Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ******************************************************************************************************************************************************
 * NOTES:
 * 
 * mpegplayer is structured as follows:
 * 
 *                       +-->Video Thread-->Video Output-->LCD
 *                       |
 * UI-->Stream Manager-->+-->Audio Thread-->PCM buffer--Audio Device
 *         |       |     |                        |     (ref. clock)
 *         |       |     +-->Buffer Thread        |
 *    Stream Data  |             |          (clock intf./
 *     Requests    |         File Cache      drift adj.)
 *                 |          Disk I/O
 *         Stream services
 *          (timing, etc.)
 * 
 * Thread list:
 *  1) The main thread - Handles user input, settings, basic playback control
 *     and USB connect.
 * 
 *  2) Stream Manager thread - Handles playback state, events from streams
 *     such as when a stream is finished, stream commands, PCM state. The
 *     layer in which this thread run also handles arbitration of data
 *     requests between the streams and the disk buffer. The actual specific
 *     transport layer code may get moved out to support multiple container
 *     formats.
 * 
 *  3) Buffer thread - Buffers data in the background, generates notifications
 *     to streams when their data has been buffered, and watches streams'
 *     progress to keep data available during playback. Handles synchronous
 *     random access requests when the file cache is missed.
 * 
 *  4) Video thread (running on the COP for PortalPlayer targets) - Decodes
 *     the video stream and renders video frames to the LCD. Handles
 *     miscellaneous video tasks like frame and thumbnail printing.
 * 
 *  5) Audio thread (running on the main CPU to maintain consistency with the
 *     audio FIQ hander on PP) - Decodes audio frames and places them into
 *     the PCM buffer for rendering by the audio device.
 * 
 * Streams are neither aware of one another nor care about one another. All
 * streams shall have their own thread (unless it is _really_ efficient to
 * have a single thread handle a couple minor streams). All coordination of
 * the streams is done through the stream manager. The clocking is controlled
 * by and exposed by the stream manager to other streams and implemented at
 * the PCM level.
 * 
 * Notes about MPEG files:
 * 
 * MPEG System Clock is 27MHz - i.e. 27000000 ticks/second.
 * 
 * FPS is represented in terms of a frame period - this is always an
 * integer number of 27MHz ticks.
 * 
 * e.g. 29.97fps (30000/1001) NTSC video has an exact frame period of
 * 900900 27MHz ticks.
 * 
 * In libmpeg2, info->sequence->frame_period contains the frame_period.
 * 
 * Working with Rockbox's 100Hz tick, the common frame rates would need
 * to be as follows (1):
 * 
 * FPS     | 27Mhz   | 100Hz          | 44.1KHz   | 48KHz
 * --------|-----------------------------------------------------------
 * 10*     | 2700000 | 10             | 4410      | 4800
 * 12*     | 2250000 |  8.3333        | 3675      | 4000
 * 15*     | 1800000 |  6.6667        | 2940      | 3200
 * 23.9760 | 1126125 |  4.170833333   | 1839.3375 | 2002
 * 24      | 1125000 |  4.166667      | 1837.5    | 2000
 * 25      | 1080000 |  4             | 1764      | 1920
 * 29.9700 |  900900 |  3.336667      | 1471,47   | 1601.6
 * 30      |  900000 |  3.333333      | 1470      | 1600
 * 
 * *Unofficial framerates
 * 
 * (1) But we don't really care since the audio clock is used anyway and has
 *     very fine resolution ;-)
 **************************************************************************** button definitions #define MPEG_STOP       BUTTON_POWER#define MPEG_STOP       BUTTON_POWER One thing we can do here for targets with remotes is having a display
 * always on the remote instead of always forcing a popup on the main display  cap ff/rewind step size at max % of file  3% of 30min file == 54s step size  Get new FPS reading each second  Flag that says user did it  OSD status - same order as icon array  Only refresh elements when due  Refresh the...  ...volume display  ...time display+progress  ...playback status icon  ...background (implies ALL)  ...video image upon timeout  Resume playback upon timeout  OR bitflag - don't draw anything  OR bitflag - show the OSD  OR bitflag - headphones caused pause  hide the OSD (aid readability)  Only immediate graphical elements  Status icons selected according to font height  Main border areas that contain OSD elements  FPS Display  OSD coordinates  Screen coordinates  When to next update FPS reading  For establishing rect size  Accessed on other processor  Blend two colors in 0-100% (0-255) mix of c2 into c1  IRAM preserving mechanism to enable talking menus  make the icache (if it exists) up to date with the new code  HAVE_CPUCACHE_INVALIDATE  make the icache (if it exists) up to date with the new code  HAVE_CPUCACHE_INVALIDATE  Drawing functions that operate rotated on LCD_PORTRAIT displays -
 * most are just wrappers of lcd_* functions with transforms applied.
 * The origin is the upper-left corner of the OSD area  Portrait displays need rotated text rendering  Limited function that only renders in DRMODE_FG and uses absolute screen
 * coordinates  Clip right  Clip left  nothing left to do  Clip bottom  Clip top  nothing left to do bg_pattern = move starting point  Blend the given two colors  LCD_DEPTH == 24  Clip right  Clip left  nothing left to do  Clip bottom  Clip top  nothing left to do  initialize blending bg_pattern= get proportional width and glyph bits  LCD_PORTRAIT * FPS Display * Post-frame callback (on video thread) - update the FPS rectangle from the
 * framebuffer  Set up to have the callback only update the intersection of the video
 * rectangle and the FPS text rectangle - if they don't intersect, then
 * the callback is set to NULL  Oriented screen coordinates -> OSD coordinates  OSD coordinates -> framebuffer coordinates  Refresh the FPS display  Initialize the FPS display * OSD * So we can refresh the overlay  Turn off backlight timeout  Revert to user's backlight settings  HAVE_BACKLIGHT_BRIGHTNESS  Choose well-sized bitmap images relative to font height  HAVE_HEADPHONE_DETECTION  Refresh the background area  Draw a "raised" area for our graphics  Give contrast with the main background  Draw the movie duration  else don't know the duration  Refresh the current time display + the progress bar  Refresh the volume display area  Right-justified  Refresh the status icon  Draw status icon with a drop shadow  Update the current status which determines which icon is displayed  If paused with a pending resume, coerce it to OSD_STATUS_PLAYING  A refresh is needed  Update the current time that will be displayed  Refresh various parts of the OSD - showing it if it is hidden  The default which forces no updates  Make sure Rockbox doesn't turn off the player because of
           too little activity  Redraw the current or possibly extract a new video frame  Restart playback if the timout was reached  If not visible, return  Hide if the visibility duration was reached  A forced update of some region  Show if currently invisible  Avoid call back into this function - it will be drawn  Move back timeouts for frame print and hide  Refresh whatever graphical elements are due automatically  No drawing needed  Set basic drawing params that are used. Elements that perform variations
     * will restore them.  Requires a redraw of everything  Go back to defaults  Update the dirty rectangle  Show/Hide the OSD  Clip away the part of video that is covered  Not playing - set brightness to mpegplayer setting  Uncover clipped video area and redraw it  Not playing - restore backlight brightness  Set the current status - update screen if specified  Get the current status value  Handle Fast-forward/Rewind keys using WPS settings (and some nicked code ;)
 * Returns last button code
  Absolute clock => stream-relative  simplify code below  simplify code below  Fail tests below but still do proper exit  fast forwarding, calc max step relative to end  rewinding, calc max step relative to start  smooth seeking by multiplying step by: 1 + (2 ^ -accel)  Return adjusted STREAM_* status  Coerce to STREAM_PLAYING if paused with a pending resume  Change the current audio volume by a specified amount  Volume down - clip to lower limit  Volume up - clip to upper limit  Sync the global settings  Update the volume display  Begin playback at the specified time  Halt playback - pause engine and return logical state  Coerce to STREAM_PLAYING if paused with a pending resume  Cancel some auto refreshes - caller will restart them if desired  No backlight fiddling here - callers does the right thing  Pause playback if playing  Resume pending - change to a still video frame update  Leave brightness alone and restore it when OSD is hidden  Update time display now  Resume playback if halted or paused  Cancel video and resume auto refresh - the resyc when starting
     * playback will perform those tasks  Stop playback - remember the resume point if not closed  Perform a seek by button if seeking is possible for this stream.
 *
 * A delay will be inserted before restarting in case the user decides to
 * seek again soon after.
 *
 * Returns last button code
  Halt playback - not strictly necessary but nice when doing
     * buttons  Obtain a new playback point according to the buttons  delay resume if playing  refresh if paused  Tell engine to resume at that time  Perform a seek by time if seeking is possible for this stream
 *
 * If playing, the seeking is immediate, otherise a delay is added to showing
 * a still if paused in case the user does another seek soon after.
 *
 * If seeking isn't possible, a time of zero performs a skip to the
 * beginning.
  merely preserve resume  refresh if paused  Cancel print or resume if pending  Tell engine to seek to the given time - no state change  Has this file one of the supported extensions?  Should match apps/plugins/viewers.config  deliver the next/previous video file in the current directory.
   returns false if there is none.  Handle SYS_PHONE_PLUGGED/UNPLUGGED  Wait for any incomplete state transition to complete first  Start playback at the specified starting time  Gently poll the video player for EOS and handle UI  BUTTON_NONE:  Draw the current frame if prepared already  LCD_ENABLE_EVENT_1:  MPEG_VOLUP*:  MPEG_VOLDOWN*:  save previous state  Hide video output  The menu can change the font, so restore  If not stopped, show video again  If stream was playing, restart it  MPEG_MENU:  Show if not visible  Make sure it refreshes  MPEG_STOP:  Playing => Paused  Paused => Playing  MPEG_PAUSE*:  If button has been released: skip to next/previous file  Check current playback position  Start the current video from the beginning  Release within 3 seconds of start: skip to previous
                     * file  jump to stop handling above  MPEG_RW:  If button has been released: skip to next file  jump to stop handling above  MPEG_FF:  SYS_PHONE_*:  default:  end while  Be sure hook is removed before exiting since the stop will put it
     * back because of the backlight restore.  assume success  No file = GTFO  Disable all talking before initializing IRAM  Fatal because this should not fail  start menu  Enter button loop and process UI  Problem with file; display message about it - not
                 * considered a plugin error  Be sure it doesn't get stuck in an unbreakable loop of bad
                 * files, just in case! Otherwise, keep searching in the
                 * chosen direction until a good one is found.  Abort the search and exit  Default to next file  Was first file already; avoid endlessly
                                 * retrying it  switch  while  return value of button_loop says, what's next  quit after finished the last videofile  if there is no previous file, play the same videofile  while  Actually handle delayed processing of system events of interest
     * that were captured in other button loops **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * mpegplayer main entrypoint and UI implementation
 *
 * Copyright (c) 2007 Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ******************************************************************************************************************************************************
 * NOTES:
 * 
 * mpegplayer is structured as follows:
 * 
 *                       +-->Video Thread-->Video Output-->LCD
 *                       |
 * UI-->Stream Manager-->+-->Audio Thread-->PCM buffer--Audio Device
 *         |       |     |                        |     (ref. clock)
 *         |       |     +-->Buffer Thread        |
 *    Stream Data  |             |          (clock intf./
 *     Requests    |         File Cache      drift adj.)
 *                 |          Disk I/O
 *         Stream services
 *          (timing, etc.)
 * 
 * Thread list:
 *  1) The main thread - Handles user input, settings, basic playback control
 *     and USB connect.
 * 
 *  2) Stream Manager thread - Handles playback state, events from streams
 *     such as when a stream is finished, stream commands, PCM state. The
 *     layer in which this thread run also handles arbitration of data
 *     requests between the streams and the disk buffer. The actual specific
 *     transport layer code may get moved out to support multiple container
 *     formats.
 * 
 *  3) Buffer thread - Buffers data in the background, generates notifications
 *     to streams when their data has been buffered, and watches streams'
 *     progress to keep data available during playback. Handles synchronous
 *     random access requests when the file cache is missed.
 * 
 *  4) Video thread (running on the COP for PortalPlayer targets) - Decodes
 *     the video stream and renders video frames to the LCD. Handles
 *     miscellaneous video tasks like frame and thumbnail printing.
 * 
 *  5) Audio thread (running on the main CPU to maintain consistency with the
 *     audio FIQ hander on PP) - Decodes audio frames and places them into
 *     the PCM buffer for rendering by the audio device.
 * 
 * Streams are neither aware of one another nor care about one another. All
 * streams shall have their own thread (unless it is _really_ efficient to
 * have a single thread handle a couple minor streams). All coordination of
 * the streams is done through the stream manager. The clocking is controlled
 * by and exposed by the stream manager to other streams and implemented at
 * the PCM level.
 * 
 * Notes about MPEG files:
 * 
 * MPEG System Clock is 27MHz - i.e. 27000000 ticks/second.
 * 
 * FPS is represented in terms of a frame period - this is always an
 * integer number of 27MHz ticks.
 * 
 * e.g. 29.97fps (30000/1001) NTSC video has an exact frame period of
 * 900900 27MHz ticks.
 * 
 * In libmpeg2, info->sequence->frame_period contains the frame_period.
 * 
 * Working with Rockbox's 100Hz tick, the common frame rates would need
 * to be as follows (1):
 * 
 * FPS     | 27Mhz   | 100Hz          | 44.1KHz   | 48KHz
 * --------|-----------------------------------------------------------
 * 10*     | 2700000 | 10             | 4410      | 4800
 * 12*     | 2250000 |  8.3333        | 3675      | 4000
 * 15*     | 1800000 |  6.6667        | 2940      | 3200
 * 23.9760 | 1126125 |  4.170833333   | 1839.3375 | 2002
 * 24      | 1125000 |  4.166667      | 1837.5    | 2000
 * 25      | 1080000 |  4             | 1764      | 1920
 * 29.9700 |  900900 |  3.336667      | 1471,47   | 1601.6
 * 30      |  900000 |  3.333333      | 1470      | 1600
 * 
 * *Unofficial framerates
 * 
 * (1) But we don't really care since the audio clock is used anyway and has
 *     very fine resolution ;-)
 **************************************************************************** button definitions #define MPEG_STOP       BUTTON_POWER#define MPEG_STOP       BUTTON_POWER One thing we can do here for targets with remotes is having a display
 * always on the remote instead of always forcing a popup on the main display  cap ff/rewind step size at max % of file  3% of 30min file == 54s step size  Get new FPS reading each second  Flag that says user did it  OSD status - same order as icon array  Only refresh elements when due  Refresh the...  ...volume display  ...time display+progress  ...playback status icon  ...background (implies ALL)  ...video image upon timeout  Resume playback upon timeout  OR bitflag - don't draw anything  OR bitflag - show the OSD  OR bitflag - headphones caused pause  hide the OSD (aid readability)  Only immediate graphical elements  Status icons selected according to font height  Main border areas that contain OSD elements  FPS Display  OSD coordinates  Screen coordinates  When to next update FPS reading  For establishing rect size  Accessed on other processor  Blend two colors in 0-100% (0-255) mix of c2 into c1  IRAM preserving mechanism to enable talking menus  make the icache (if it exists) up to date with the new code  HAVE_CPUCACHE_INVALIDATE  make the icache (if it exists) up to date with the new code  HAVE_CPUCACHE_INVALIDATE  Drawing functions that operate rotated on LCD_PORTRAIT displays -
 * most are just wrappers of lcd_* functions with transforms applied.
 * The origin is the upper-left corner of the OSD area  Portrait displays need rotated text rendering  Limited function that only renders in DRMODE_FG and uses absolute screen
 * coordinates  Clip right  Clip left  nothing left to do  Clip bottom  Clip top  nothing left to do bg_pattern = move starting point  Blend the given two colors  LCD_DEPTH == 24  Clip right  Clip left  nothing left to do  Clip bottom  Clip top  nothing left to do  initialize blending bg_pattern= get proportional width and glyph bits  LCD_PORTRAIT * FPS Display * Post-frame callback (on video thread) - update the FPS rectangle from the
 * framebuffer  Set up to have the callback only update the intersection of the video
 * rectangle and the FPS text rectangle - if they don't intersect, then
 * the callback is set to NULL  Oriented screen coordinates -> OSD coordinates  OSD coordinates -> framebuffer coordinates  Refresh the FPS display  Initialize the FPS display * OSD * So we can refresh the overlay  Turn off backlight timeout  Revert to user's backlight settings  HAVE_BACKLIGHT_BRIGHTNESS  Choose well-sized bitmap images relative to font height  HAVE_HEADPHONE_DETECTION  Refresh the background area  Draw a "raised" area for our graphics  Give contrast with the main background  Draw the movie duration  else don't know the duration  Refresh the current time display + the progress bar  Refresh the volume display area  Right-justified  Refresh the status icon  Draw status icon with a drop shadow  Update the current status which determines which icon is displayed  If paused with a pending resume, coerce it to OSD_STATUS_PLAYING  A refresh is needed  Update the current time that will be displayed  Refresh various parts of the OSD - showing it if it is hidden  The default which forces no updates  Make sure Rockbox doesn't turn off the player because of
           too little activity  Redraw the current or possibly extract a new video frame  Restart playback if the timout was reached  If not visible, return  Hide if the visibility duration was reached  A forced update of some region  Show if currently invisible  Avoid call back into this function - it will be drawn  Move back timeouts for frame print and hide  Refresh whatever graphical elements are due automatically  No drawing needed  Set basic drawing params that are used. Elements that perform variations
     * will restore them.  Requires a redraw of everything  Go back to defaults  Update the dirty rectangle  Show/Hide the OSD  Clip away the part of video that is covered  Not playing - set brightness to mpegplayer setting  Uncover clipped video area and redraw it  Not playing - restore backlight brightness  Set the current status - update screen if specified  Get the current status value  Handle Fast-forward/Rewind keys using WPS settings (and some nicked code ;)
 * Returns last button code
  Absolute clock => stream-relative  simplify code below  simplify code below  Fail tests below but still do proper exit  fast forwarding, calc max step relative to end  rewinding, calc max step relative to start  smooth seeking by multiplying step by: 1 + (2 ^ -accel)  Return adjusted STREAM_* status  Coerce to STREAM_PLAYING if paused with a pending resume  Change the current audio volume by a specified amount  Volume down - clip to lower limit  Volume up - clip to upper limit  Sync the global settings  Update the volume display  Begin playback at the specified time  Halt playback - pause engine and return logical state  Coerce to STREAM_PLAYING if paused with a pending resume  Cancel some auto refreshes - caller will restart them if desired  No backlight fiddling here - callers does the right thing  Pause playback if playing  Resume pending - change to a still video frame update  Leave brightness alone and restore it when OSD is hidden  Update time display now  Resume playback if halted or paused  Cancel video and resume auto refresh - the resyc when starting
     * playback will perform those tasks  Stop playback - remember the resume point if not closed  Perform a seek by button if seeking is possible for this stream.
 *
 * A delay will be inserted before restarting in case the user decides to
 * seek again soon after.
 *
 * Returns last button code
  Halt playback - not strictly necessary but nice when doing
     * buttons  Obtain a new playback point according to the buttons  delay resume if playing  refresh if paused  Tell engine to resume at that time  Perform a seek by time if seeking is possible for this stream
 *
 * If playing, the seeking is immediate, otherise a delay is added to showing
 * a still if paused in case the user does another seek soon after.
 *
 * If seeking isn't possible, a time of zero performs a skip to the
 * beginning.
  merely preserve resume  refresh if paused  Cancel print or resume if pending  Tell engine to seek to the given time - no state change  Has this file one of the supported extensions?  Should match apps/plugins/viewers.config  deliver the next/previous video file in the current directory.
   returns false if there is none.  Handle SYS_PHONE_PLUGGED/UNPLUGGED  Wait for any incomplete state transition to complete first  Start playback at the specified starting time  Gently poll the video player for EOS and handle UI  BUTTON_NONE:  Draw the current frame if prepared already  LCD_ENABLE_EVENT_1:  MPEG_VOLUP*:  MPEG_VOLDOWN*:  save previous state  Hide video output  The menu can change the font, so restore  If not stopped, show video again  If stream was playing, restart it  MPEG_MENU:  Show if not visible  Make sure it refreshes  MPEG_STOP:  Playing => Paused  Paused => Playing  MPEG_PAUSE*:  If button has been released: skip to next/previous file  Check current playback position  Start the current video from the beginning  Release within 3 seconds of start: skip to previous
                     * file  jump to stop handling above  MPEG_RW:  If button has been released: skip to next file  jump to stop handling above  MPEG_FF:  SYS_PHONE_*:  default:  end while  Be sure hook is removed before exiting since the stop will put it
     * back because of the backlight restore.  assume success  No file = GTFO  Disable all talking before initializing IRAM  Fatal because this should not fail  start menu  Enter button loop and process UI  Problem with file; display message about it - not
                 * considered a plugin error  Be sure it doesn't get stuck in an unbreakable loop of bad
                 * files, just in case! Otherwise, keep searching in the
                 * chosen direction until a good one is found.  Abort the search and exit  Default to next file  Was first file already; avoid endlessly
                                 * retrying it  switch  while  return value of button_loop says, what's next  quit after finished the last videofile  if there is no previous file, play the same videofile  while  Actually handle delayed processing of system events of interest
     * that were captured in other button loops 