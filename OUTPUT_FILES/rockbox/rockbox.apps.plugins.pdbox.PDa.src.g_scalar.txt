 Copyright (c) 1997-1999 Miller Puckette.
* For information on usage and redistribution, and for a DISCLAIMER OF ALL
* WARRANTIES, see the file, "LICENSE.txt," in this distribution.   This file defines the "scalar" object, which is not a text object, just a
"gobj".  Scalars have templates which describe their structures, which
can contain numbers, sublists, and arrays.

Also, the "tscalar" object, an ordinary text object that owns a single "scalar"
and draws it on the parent.  This is intended as a way that abstractions can
control their appearances by adding stuff to draw.
 IOhannes :
 * changed the canvas_restore, so that it might accept $args as well (like "pd $0_test")
 * so you can make multiple & distinguishable templates
 * 1511:forum::für::umläute:2001
 * changes marked with    IOhannes
 * added Krzysztof Czajas fix to avoid crashing...
  ROCKBOX  for read/write to files  ROCKBOX  LATER test this and get it to work  make a new scalar and add to the glist.  We create a "gp" here which
    will be used for array items to point back here.  This gp doesn't do
    reference counting or "validation" updates though; the parent won't go away
    without the contained arrays going away too.  The "gp" is copied out
    by value in the word_init() routine so we can throw our copy away.  Pd method to create a new scalar, add it to a glist, and initialize
    it from the message arguments.  -------------------- widget behavior for scalar ------------  if someone deleted the template canvas, we're just a point  post("scalar x1 %d y1 %d x2 %d y2 %d", x1, y1, x2, y2);  post("scalar_select %d", state);  later  post("scalar_activate %d", state);  later  nothing to do  if we don't know how to draw it, make a small rectangle  ROCKBOX  ROCKBOX  the "size" field in the class is zero, so Pd doesn't try to free
	us automatically (see pd_free())  ----------------- setup function -------------------  Copyright (c) 1997-1999 Miller Puckette.
* For information on usage and redistribution, and for a DISCLAIMER OF ALL
* WARRANTIES, see the file, "LICENSE.txt," in this distribution.   This file defines the "scalar" object, which is not a text object, just a
"gobj".  Scalars have templates which describe their structures, which
can contain numbers, sublists, and arrays.

Also, the "tscalar" object, an ordinary text object that owns a single "scalar"
and draws it on the parent.  This is intended as a way that abstractions can
control their appearances by adding stuff to draw.
 IOhannes :
 * changed the canvas_restore, so that it might accept $args as well (like "pd $0_test")
 * so you can make multiple & distinguishable templates
 * 1511:forum::für::umläute:2001
 * changes marked with    IOhannes
 * added Krzysztof Czajas fix to avoid crashing...
  ROCKBOX  for read/write to files  ROCKBOX  LATER test this and get it to work  make a new scalar and add to the glist.  We create a "gp" here which
    will be used for array items to point back here.  This gp doesn't do
    reference counting or "validation" updates though; the parent won't go away
    without the contained arrays going away too.  The "gp" is copied out
    by value in the word_init() routine so we can throw our copy away.  Pd method to create a new scalar, add it to a glist, and initialize
    it from the message arguments.  -------------------- widget behavior for scalar ------------  if someone deleted the template canvas, we're just a point  post("scalar x1 %d y1 %d x2 %d y2 %d", x1, y1, x2, y2);  post("scalar_select %d", state);  later  post("scalar_activate %d", state);  later  nothing to do  if we don't know how to draw it, make a small rectangle  ROCKBOX  ROCKBOX  the "size" field in the class is zero, so Pd doesn't try to free
	us automatically (see pd_free())  ----------------- setup function -------------------  Copyright (c) 1997-1999 Miller Puckette.
* For information on usage and redistribution, and for a DISCLAIMER OF ALL
* WARRANTIES, see the file, "LICENSE.txt," in this distribution.   This file defines the "scalar" object, which is not a text object, just a
"gobj".  Scalars have templates which describe their structures, which
can contain numbers, sublists, and arrays.

Also, the "tscalar" object, an ordinary text object that owns a single "scalar"
and draws it on the parent.  This is intended as a way that abstractions can
control their appearances by adding stuff to draw.
 IOhannes :
 * changed the canvas_restore, so that it might accept $args as well (like "pd $0_test")
 * so you can make multiple & distinguishable templates
 * 1511:forum::für::umläute:2001
 * changes marked with    IOhannes
 * added Krzysztof Czajas fix to avoid crashing...
  ROCKBOX  for read/write to files  ROCKBOX  LATER test this and get it to work  make a new scalar and add to the glist.  We create a "gp" here which
    will be used for array items to point back here.  This gp doesn't do
    reference counting or "validation" updates though; the parent won't go away
    without the contained arrays going away too.  The "gp" is copied out
    by value in the word_init() routine so we can throw our copy away.  Pd method to create a new scalar, add it to a glist, and initialize
    it from the message arguments.  -------------------- widget behavior for scalar ------------  if someone deleted the template canvas, we're just a point  post("scalar x1 %d y1 %d x2 %d y2 %d", x1, y1, x2, y2);  post("scalar_select %d", state);  later  post("scalar_activate %d", state);  later  nothing to do  if we don't know how to draw it, make a small rectangle  ROCKBOX  ROCKBOX  the "size" field in the class is zero, so Pd doesn't try to free
	us automatically (see pd_free())  ----------------- setup function ------------------- 