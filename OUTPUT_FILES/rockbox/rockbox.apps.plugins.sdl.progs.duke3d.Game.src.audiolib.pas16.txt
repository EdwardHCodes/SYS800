
Copyright (C) 1994-1995 Apogee Software, Ltd.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*********************************************************************
   module: PAS16.C

   author: James R. Dose
   date:   March 27, 1994

   Low level routines to support Pro AudioSpectrum and compatible
   sound cards.

   (c) Copyright 1994 James R. Dose.  All Rights Reserved.
********************************************************************* adequate stack size This is defined because we can't create local variables in a function that switches stacks. These declarations are necessary to use the inline assembly pragmas. This function will get the current stack selector and pointer and save them off. This function will set the stack selector and pointer to the specified values.---------------------------------------------------------------------
   Function: PAS_ErrorString

   Returns a pointer to the error message associated with an error
   number.  A -1 returns a pointer the current error.
---------------------------------------------------------------------*********************************************************************

   Memory locked functions:

*********************************************************************---------------------------------------------------------------------
   Function: PAS_CheckForDriver

   Checks to see if MVSOUND.SYS is installed.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_GetStateTable

   Returns a pointer to the state table containing hardware state
   information.  The state table is necessary because the Pro Audio-
   Spectrum contains only write-only registers.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_GetFunctionTable

   Returns a pointer to the function table containing addresses of
   driver functions.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_GetCardSettings

   Returns the DMA and the IRQ channels of the sound card.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_EnableInterrupt

   Enables the triggering of the sound card interrupt.
--------------------------------------------------------------------- Flush any pending interrupts Enable the interrupt on the PAS---------------------------------------------------------------------
   Function: PAS_DisableInterrupt

   Disables the triggering of the sound card interrupt.
--------------------------------------------------------------------- Disable the interrupt on the PAS Restore interrupt mask---------------------------------------------------------------------
   Function: PAS_ServiceInterrupt

   Handles interrupt generated by sound card at the end of a voice
   transfer.  Calls the user supplied callback function.
--------------------------------------------------------------------- save stack set our stack restore stack Clear the interrupt send EOI to Interrupt Controller Keep track of current buffer Call the caller's callback function restore stack---------------------------------------------------------------------
   Function: PAS_Write

   Writes a byte of data to the sound card.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_Read

   Reads a byte of data from the sound card.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_SetSampleRateTimer

   Programs the Sample Rate Timer.
--------------------------------------------------------------------- Disable the Sample Rate Timer Select the Sample Rate Timer Program the Sample Rate Timer---------------------------------------------------------------------
   Function: PAS_SetSampleBufferCount

   Programs the Sample Buffer Count.
--------------------------------------------------------------------- Disable the Sample Buffer Count Select the Sample Buffer Count Check if we're using a 16-bit DMA channel Program the Sample Buffer Count---------------------------------------------------------------------
   Function: PAS_SetPlaybackRate

   Sets the rate at which the digitized sound will be played in
   hertz.
--------------------------------------------------------------------- Keep track of what the actual rate is---------------------------------------------------------------------
   Function: PAS_GetPlaybackRate

   Returns the rate at which the digitized sound will be played in
   hertz.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_SetMixMode

   Sets the sound card to play samples in mono or stereo.
--------------------------------------------------------------------- Check board revision.  Revision # 0 can't play 16-bit data. Force the mode to 8-bit data.---------------------------------------------------------------------
   Function: PAS_StopPlayback

   Ends the DMA transfer of digitized sound to the sound card.
--------------------------------------------------------------------- Don't allow anymore interrupts Stop the transfer of digital data Turn off 16-bit unsigned data Disable the DMA channel---------------------------------------------------------------------
   Function: PAS_SetupDMABuffer

   Programs the DMAC for sound transfer.
--------------------------------------------------------------------- Enable PAS Dma---------------------------------------------------------------------
   Function: PAS_GetCurrentPos

   Returns the offset within the current sound being played.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_GetFilterSetting

   Returns the bit settings for the appropriate filter level.
--------------------------------------------------------------------- CD Quality 17897hz  00001b 20hz to 17.8khz  Cassette Quality 15090hz  00010b 20hz to 15.9khz  FM Radio Quality 11931hz  01001b 20hz to 11.9khz  AM Radio Quality  8948hz  10001b 20hz to 8.9khz  Telphone Quality  5965hz  00100b 20hz to 5.9khz  Male voice quality 2982hz  111001b 20hz to 2.9khz ---------------------------------------------------------------------
   Function: PAS_BeginTransfer

   Starts playback of digitized sound on the sound card.
--------------------------------------------------------------------- Get sample size configuration Check board revision.  Revision # 0 can't play 16-bit data. set sample size bit set oversampling rate Set sample size configuration Get Cross channel setting set stereo mode bit Get the filter appropriate filter setting Enable the Sample Rate Timer and Sample Buffer Count Enable audio (not Audio Mute)---------------------------------------------------------------------
   Function: PAS_BeginBufferedPlayback

   Begins multibuffered playback of digitized sound on the sound card.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_BeginBufferedRecord

   Begins multibuffered recording of digitized sound on the sound card.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_CallInt

   Calls interrupt 2fh.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_CallMVFunction

   Performs a call to a real mode function.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_SetPCMVolume

   Sets the volume of digitized sound playback.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_GetPCMVolume

   Returns the current volume of digitized sound playback.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_SetFMVolume

   Sets the volume of FM sound playback.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_GetFMVolume

   Returns the current volume of FM sound playback.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_GetCardInfo

   Returns the maximum number of bits that can represent a sample
   (8 or 16) and the number of channels (1 for mono, 2 for stereo).
--------------------------------------------------------------------- Check board revision.  Revision # 0 can't play 16-bit data.---------------------------------------------------------------------
   Function: PAS_SetCallBack

   Specifies the user function to call at the end of a sound transfer.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_FindCard

   Auto-detects the port the Pro AudioSpectrum is set for.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_SaveMusicVolume

   Saves the user's FM mixer settings.
--------------------------------------------------------------------- Enable PAS Sound---------------------------------------------------------------------
   Function: PAS_RestoreMusicVolume

   Restores the user's FM mixer settings.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_SaveState

   Saves the original state of the PAS prior to use.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_RestoreState

   Restores the original state of the PAS after use.
--------------------------------------------------------------------- Select the Sample Rate Timer Select the Sample Buffer Count---------------------------------------------------------------------
   Function: PAS_LockEnd

   Used for determining the length of the functions to lock in memory.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: allocateTimerStack

   Allocate a block of memory from conventional (low) memory and return
   the selector (which can go directly into a segment register) of the
   memory block or 0 if an error occured.
--------------------------------------------------------------------- clear all registers DPMI allocate conventional memory size in paragraphs DPMI call returns selector in dx (ax contains real mode segment which is ignored here) Couldn't allocate memory.---------------------------------------------------------------------
   Function: deallocateTimerStack

   Deallocate a block of conventional (low) memory given a selector to
   it.  Assumes the block was allocated with DPMI function 0x100.
--------------------------------------------------------------------- clear all registers---------------------------------------------------------------------
   Function: PAS_Init

   Initializes the sound card and prepares the module to play
   digitized sounds.
--------------------------------------------------------------------- Leave a little room at top of stack just for the hell of it... Install our interrupt handler Enable PAS Sound---------------------------------------------------------------------
   Function: PAS_Shutdown

   Ends transfer of sound data to the sound card and restores the
   system resources used by the card.
--------------------------------------------------------------------- Halt the DMA transfer Restore the original interrupt DEBUG      PAS_RestoreState();---------------------------------------------------------------------
   Function: PAS_UnlockMemory

   Unlocks all neccessary data.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_LockMemory

   Locks all neccessary data.
---------------------------------------------------------------------
Copyright (C) 1994-1995 Apogee Software, Ltd.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*********************************************************************
   module: PAS16.C

   author: James R. Dose
   date:   March 27, 1994

   Low level routines to support Pro AudioSpectrum and compatible
   sound cards.

   (c) Copyright 1994 James R. Dose.  All Rights Reserved.
********************************************************************* adequate stack size This is defined because we can't create local variables in a function that switches stacks. These declarations are necessary to use the inline assembly pragmas. This function will get the current stack selector and pointer and save them off. This function will set the stack selector and pointer to the specified values.---------------------------------------------------------------------
   Function: PAS_ErrorString

   Returns a pointer to the error message associated with an error
   number.  A -1 returns a pointer the current error.
---------------------------------------------------------------------*********************************************************************

   Memory locked functions:

*********************************************************************---------------------------------------------------------------------
   Function: PAS_CheckForDriver

   Checks to see if MVSOUND.SYS is installed.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_GetStateTable

   Returns a pointer to the state table containing hardware state
   information.  The state table is necessary because the Pro Audio-
   Spectrum contains only write-only registers.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_GetFunctionTable

   Returns a pointer to the function table containing addresses of
   driver functions.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_GetCardSettings

   Returns the DMA and the IRQ channels of the sound card.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_EnableInterrupt

   Enables the triggering of the sound card interrupt.
--------------------------------------------------------------------- Flush any pending interrupts Enable the interrupt on the PAS---------------------------------------------------------------------
   Function: PAS_DisableInterrupt

   Disables the triggering of the sound card interrupt.
--------------------------------------------------------------------- Disable the interrupt on the PAS Restore interrupt mask---------------------------------------------------------------------
   Function: PAS_ServiceInterrupt

   Handles interrupt generated by sound card at the end of a voice
   transfer.  Calls the user supplied callback function.
--------------------------------------------------------------------- save stack set our stack restore stack Clear the interrupt send EOI to Interrupt Controller Keep track of current buffer Call the caller's callback function restore stack---------------------------------------------------------------------
   Function: PAS_Write

   Writes a byte of data to the sound card.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_Read

   Reads a byte of data from the sound card.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_SetSampleRateTimer

   Programs the Sample Rate Timer.
--------------------------------------------------------------------- Disable the Sample Rate Timer Select the Sample Rate Timer Program the Sample Rate Timer---------------------------------------------------------------------
   Function: PAS_SetSampleBufferCount

   Programs the Sample Buffer Count.
--------------------------------------------------------------------- Disable the Sample Buffer Count Select the Sample Buffer Count Check if we're using a 16-bit DMA channel Program the Sample Buffer Count---------------------------------------------------------------------
   Function: PAS_SetPlaybackRate

   Sets the rate at which the digitized sound will be played in
   hertz.
--------------------------------------------------------------------- Keep track of what the actual rate is---------------------------------------------------------------------
   Function: PAS_GetPlaybackRate

   Returns the rate at which the digitized sound will be played in
   hertz.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_SetMixMode

   Sets the sound card to play samples in mono or stereo.
--------------------------------------------------------------------- Check board revision.  Revision # 0 can't play 16-bit data. Force the mode to 8-bit data.---------------------------------------------------------------------
   Function: PAS_StopPlayback

   Ends the DMA transfer of digitized sound to the sound card.
--------------------------------------------------------------------- Don't allow anymore interrupts Stop the transfer of digital data Turn off 16-bit unsigned data Disable the DMA channel---------------------------------------------------------------------
   Function: PAS_SetupDMABuffer

   Programs the DMAC for sound transfer.
--------------------------------------------------------------------- Enable PAS Dma---------------------------------------------------------------------
   Function: PAS_GetCurrentPos

   Returns the offset within the current sound being played.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_GetFilterSetting

   Returns the bit settings for the appropriate filter level.
--------------------------------------------------------------------- CD Quality 17897hz  00001b 20hz to 17.8khz  Cassette Quality 15090hz  00010b 20hz to 15.9khz  FM Radio Quality 11931hz  01001b 20hz to 11.9khz  AM Radio Quality  8948hz  10001b 20hz to 8.9khz  Telphone Quality  5965hz  00100b 20hz to 5.9khz  Male voice quality 2982hz  111001b 20hz to 2.9khz ---------------------------------------------------------------------
   Function: PAS_BeginTransfer

   Starts playback of digitized sound on the sound card.
--------------------------------------------------------------------- Get sample size configuration Check board revision.  Revision # 0 can't play 16-bit data. set sample size bit set oversampling rate Set sample size configuration Get Cross channel setting set stereo mode bit Get the filter appropriate filter setting Enable the Sample Rate Timer and Sample Buffer Count Enable audio (not Audio Mute)---------------------------------------------------------------------
   Function: PAS_BeginBufferedPlayback

   Begins multibuffered playback of digitized sound on the sound card.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_BeginBufferedRecord

   Begins multibuffered recording of digitized sound on the sound card.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_CallInt

   Calls interrupt 2fh.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_CallMVFunction

   Performs a call to a real mode function.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_SetPCMVolume

   Sets the volume of digitized sound playback.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_GetPCMVolume

   Returns the current volume of digitized sound playback.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_SetFMVolume

   Sets the volume of FM sound playback.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_GetFMVolume

   Returns the current volume of FM sound playback.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_GetCardInfo

   Returns the maximum number of bits that can represent a sample
   (8 or 16) and the number of channels (1 for mono, 2 for stereo).
--------------------------------------------------------------------- Check board revision.  Revision # 0 can't play 16-bit data.---------------------------------------------------------------------
   Function: PAS_SetCallBack

   Specifies the user function to call at the end of a sound transfer.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_FindCard

   Auto-detects the port the Pro AudioSpectrum is set for.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_SaveMusicVolume

   Saves the user's FM mixer settings.
--------------------------------------------------------------------- Enable PAS Sound---------------------------------------------------------------------
   Function: PAS_RestoreMusicVolume

   Restores the user's FM mixer settings.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_SaveState

   Saves the original state of the PAS prior to use.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_RestoreState

   Restores the original state of the PAS after use.
--------------------------------------------------------------------- Select the Sample Rate Timer Select the Sample Buffer Count---------------------------------------------------------------------
   Function: PAS_LockEnd

   Used for determining the length of the functions to lock in memory.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: allocateTimerStack

   Allocate a block of memory from conventional (low) memory and return
   the selector (which can go directly into a segment register) of the
   memory block or 0 if an error occured.
--------------------------------------------------------------------- clear all registers DPMI allocate conventional memory size in paragraphs DPMI call returns selector in dx (ax contains real mode segment which is ignored here) Couldn't allocate memory.---------------------------------------------------------------------
   Function: deallocateTimerStack

   Deallocate a block of conventional (low) memory given a selector to
   it.  Assumes the block was allocated with DPMI function 0x100.
--------------------------------------------------------------------- clear all registers---------------------------------------------------------------------
   Function: PAS_Init

   Initializes the sound card and prepares the module to play
   digitized sounds.
--------------------------------------------------------------------- Leave a little room at top of stack just for the hell of it... Install our interrupt handler Enable PAS Sound---------------------------------------------------------------------
   Function: PAS_Shutdown

   Ends transfer of sound data to the sound card and restores the
   system resources used by the card.
--------------------------------------------------------------------- Halt the DMA transfer Restore the original interrupt DEBUG      PAS_RestoreState();---------------------------------------------------------------------
   Function: PAS_UnlockMemory

   Unlocks all neccessary data.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_LockMemory

   Locks all neccessary data.
---------------------------------------------------------------------
Copyright (C) 1994-1995 Apogee Software, Ltd.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*********************************************************************
   module: PAS16.C

   author: James R. Dose
   date:   March 27, 1994

   Low level routines to support Pro AudioSpectrum and compatible
   sound cards.

   (c) Copyright 1994 James R. Dose.  All Rights Reserved.
********************************************************************* adequate stack size This is defined because we can't create local variables in a function that switches stacks. These declarations are necessary to use the inline assembly pragmas. This function will get the current stack selector and pointer and save them off. This function will set the stack selector and pointer to the specified values.---------------------------------------------------------------------
   Function: PAS_ErrorString

   Returns a pointer to the error message associated with an error
   number.  A -1 returns a pointer the current error.
---------------------------------------------------------------------*********************************************************************

   Memory locked functions:

*********************************************************************---------------------------------------------------------------------
   Function: PAS_CheckForDriver

   Checks to see if MVSOUND.SYS is installed.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_GetStateTable

   Returns a pointer to the state table containing hardware state
   information.  The state table is necessary because the Pro Audio-
   Spectrum contains only write-only registers.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_GetFunctionTable

   Returns a pointer to the function table containing addresses of
   driver functions.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_GetCardSettings

   Returns the DMA and the IRQ channels of the sound card.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_EnableInterrupt

   Enables the triggering of the sound card interrupt.
--------------------------------------------------------------------- Flush any pending interrupts Enable the interrupt on the PAS---------------------------------------------------------------------
   Function: PAS_DisableInterrupt

   Disables the triggering of the sound card interrupt.
--------------------------------------------------------------------- Disable the interrupt on the PAS Restore interrupt mask---------------------------------------------------------------------
   Function: PAS_ServiceInterrupt

   Handles interrupt generated by sound card at the end of a voice
   transfer.  Calls the user supplied callback function.
--------------------------------------------------------------------- save stack set our stack restore stack Clear the interrupt send EOI to Interrupt Controller Keep track of current buffer Call the caller's callback function restore stack---------------------------------------------------------------------
   Function: PAS_Write

   Writes a byte of data to the sound card.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_Read

   Reads a byte of data from the sound card.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_SetSampleRateTimer

   Programs the Sample Rate Timer.
--------------------------------------------------------------------- Disable the Sample Rate Timer Select the Sample Rate Timer Program the Sample Rate Timer---------------------------------------------------------------------
   Function: PAS_SetSampleBufferCount

   Programs the Sample Buffer Count.
--------------------------------------------------------------------- Disable the Sample Buffer Count Select the Sample Buffer Count Check if we're using a 16-bit DMA channel Program the Sample Buffer Count---------------------------------------------------------------------
   Function: PAS_SetPlaybackRate

   Sets the rate at which the digitized sound will be played in
   hertz.
--------------------------------------------------------------------- Keep track of what the actual rate is---------------------------------------------------------------------
   Function: PAS_GetPlaybackRate

   Returns the rate at which the digitized sound will be played in
   hertz.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_SetMixMode

   Sets the sound card to play samples in mono or stereo.
--------------------------------------------------------------------- Check board revision.  Revision # 0 can't play 16-bit data. Force the mode to 8-bit data.---------------------------------------------------------------------
   Function: PAS_StopPlayback

   Ends the DMA transfer of digitized sound to the sound card.
--------------------------------------------------------------------- Don't allow anymore interrupts Stop the transfer of digital data Turn off 16-bit unsigned data Disable the DMA channel---------------------------------------------------------------------
   Function: PAS_SetupDMABuffer

   Programs the DMAC for sound transfer.
--------------------------------------------------------------------- Enable PAS Dma---------------------------------------------------------------------
   Function: PAS_GetCurrentPos

   Returns the offset within the current sound being played.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_GetFilterSetting

   Returns the bit settings for the appropriate filter level.
--------------------------------------------------------------------- CD Quality 17897hz  00001b 20hz to 17.8khz  Cassette Quality 15090hz  00010b 20hz to 15.9khz  FM Radio Quality 11931hz  01001b 20hz to 11.9khz  AM Radio Quality  8948hz  10001b 20hz to 8.9khz  Telphone Quality  5965hz  00100b 20hz to 5.9khz  Male voice quality 2982hz  111001b 20hz to 2.9khz ---------------------------------------------------------------------
   Function: PAS_BeginTransfer

   Starts playback of digitized sound on the sound card.
--------------------------------------------------------------------- Get sample size configuration Check board revision.  Revision # 0 can't play 16-bit data. set sample size bit set oversampling rate Set sample size configuration Get Cross channel setting set stereo mode bit Get the filter appropriate filter setting Enable the Sample Rate Timer and Sample Buffer Count Enable audio (not Audio Mute)---------------------------------------------------------------------
   Function: PAS_BeginBufferedPlayback

   Begins multibuffered playback of digitized sound on the sound card.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_BeginBufferedRecord

   Begins multibuffered recording of digitized sound on the sound card.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_CallInt

   Calls interrupt 2fh.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_CallMVFunction

   Performs a call to a real mode function.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_SetPCMVolume

   Sets the volume of digitized sound playback.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_GetPCMVolume

   Returns the current volume of digitized sound playback.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_SetFMVolume

   Sets the volume of FM sound playback.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_GetFMVolume

   Returns the current volume of FM sound playback.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_GetCardInfo

   Returns the maximum number of bits that can represent a sample
   (8 or 16) and the number of channels (1 for mono, 2 for stereo).
--------------------------------------------------------------------- Check board revision.  Revision # 0 can't play 16-bit data.---------------------------------------------------------------------
   Function: PAS_SetCallBack

   Specifies the user function to call at the end of a sound transfer.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_FindCard

   Auto-detects the port the Pro AudioSpectrum is set for.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_SaveMusicVolume

   Saves the user's FM mixer settings.
--------------------------------------------------------------------- Enable PAS Sound---------------------------------------------------------------------
   Function: PAS_RestoreMusicVolume

   Restores the user's FM mixer settings.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_SaveState

   Saves the original state of the PAS prior to use.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_RestoreState

   Restores the original state of the PAS after use.
--------------------------------------------------------------------- Select the Sample Rate Timer Select the Sample Buffer Count---------------------------------------------------------------------
   Function: PAS_LockEnd

   Used for determining the length of the functions to lock in memory.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: allocateTimerStack

   Allocate a block of memory from conventional (low) memory and return
   the selector (which can go directly into a segment register) of the
   memory block or 0 if an error occured.
--------------------------------------------------------------------- clear all registers DPMI allocate conventional memory size in paragraphs DPMI call returns selector in dx (ax contains real mode segment which is ignored here) Couldn't allocate memory.---------------------------------------------------------------------
   Function: deallocateTimerStack

   Deallocate a block of conventional (low) memory given a selector to
   it.  Assumes the block was allocated with DPMI function 0x100.
--------------------------------------------------------------------- clear all registers---------------------------------------------------------------------
   Function: PAS_Init

   Initializes the sound card and prepares the module to play
   digitized sounds.
--------------------------------------------------------------------- Leave a little room at top of stack just for the hell of it... Install our interrupt handler Enable PAS Sound---------------------------------------------------------------------
   Function: PAS_Shutdown

   Ends transfer of sound data to the sound card and restores the
   system resources used by the card.
--------------------------------------------------------------------- Halt the DMA transfer Restore the original interrupt DEBUG      PAS_RestoreState();---------------------------------------------------------------------
   Function: PAS_UnlockMemory

   Unlocks all neccessary data.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: PAS_LockMemory

   Locks all neccessary data.
---------------------------------------------------------------------