**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Karl Kurbjun based on midi2wav by Stepan Moskovchenko
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** variable button definitions  the number of samples in the current tick  How many seconds into the file have we been playing?  How many samples produced during this second so far?  Small silence clip. ~5.80ms @ 44.1kHz  synth samples for as many whole ticks as we can fit in the buffer  no more midi data to play  how many samples did we write to the buffer?  For some reason midiplayer crashes when an update is forced  this was the last buffer to play  false = paused  Select playback  44100 22050 11025 
        * tick() will do one MIDI clock tick. Then, there's a loop here that
        * will generate the right number of samples per MIDI tick. The whole
        * MIDI playback is timed in terms of this value.. there are no forced
        * delays or anything. It just produces enough samples for each tick, and
        * the playback of these samples is what makes the timings right.
        *
        * This seems to work quite well. On a laptop, anyway.
         Skip over any junk in the beginning of the file, so start playing  after the first note event  Prevent idle poweroff  Code taken from Oscilloscope plugin  Rewinding is tricky. Basically start the file over  but run through the tracks without the synth running    rb->splash(HZ, true, parameter); **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Karl Kurbjun based on midi2wav by Stepan Moskovchenko
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** variable button definitions  the number of samples in the current tick  How many seconds into the file have we been playing?  How many samples produced during this second so far?  Small silence clip. ~5.80ms @ 44.1kHz  synth samples for as many whole ticks as we can fit in the buffer  no more midi data to play  how many samples did we write to the buffer?  For some reason midiplayer crashes when an update is forced  this was the last buffer to play  false = paused  Select playback  44100 22050 11025 
        * tick() will do one MIDI clock tick. Then, there's a loop here that
        * will generate the right number of samples per MIDI tick. The whole
        * MIDI playback is timed in terms of this value.. there are no forced
        * delays or anything. It just produces enough samples for each tick, and
        * the playback of these samples is what makes the timings right.
        *
        * This seems to work quite well. On a laptop, anyway.
         Skip over any junk in the beginning of the file, so start playing  after the first note event  Prevent idle poweroff  Code taken from Oscilloscope plugin  Rewinding is tricky. Basically start the file over  but run through the tracks without the synth running    rb->splash(HZ, true, parameter); **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Karl Kurbjun based on midi2wav by Stepan Moskovchenko
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** variable button definitions  the number of samples in the current tick  How many seconds into the file have we been playing?  How many samples produced during this second so far?  Small silence clip. ~5.80ms @ 44.1kHz  synth samples for as many whole ticks as we can fit in the buffer  no more midi data to play  how many samples did we write to the buffer?  For some reason midiplayer crashes when an update is forced  this was the last buffer to play  false = paused  Select playback  44100 22050 11025 
        * tick() will do one MIDI clock tick. Then, there's a loop here that
        * will generate the right number of samples per MIDI tick. The whole
        * MIDI playback is timed in terms of this value.. there are no forced
        * delays or anything. It just produces enough samples for each tick, and
        * the playback of these samples is what makes the timings right.
        *
        * This seems to work quite well. On a laptop, anyway.
         Skip over any junk in the beginning of the file, so start playing  after the first note event  Prevent idle poweroff  Code taken from Oscilloscope plugin  Rewinding is tricky. Basically start the file over  but run through the tracks without the synth running    rb->splash(HZ, true, parameter); 