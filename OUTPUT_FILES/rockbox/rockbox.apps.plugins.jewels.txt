**************************************************************************
*             __________               __   ___.
*   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
*   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
*   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
*   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
*                     \/            \/     \/    \/            \/
* $Id$
*
* Copyright (C) 2005 Adam Boot
*
* Color graphics from Gweled (http://sebdelestaing.free.fr/gweled/)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
* KIND, either express or implied.
*
*************************************************************************** button definitions  This calculation assumes integer division w/ LCD_HEIGHT/TILE_HEIGHT  swap directions  play board dimension  next level threshold  animation frame rate  text margin  Game types  external bitmaps  tile background colors  the tile struct
 * type is the jewel number 0-7
 * falling if the jewel is falling
 * delete marks the jewel for deletion
  the game context struct
 * score is the current level score
 * segments is the number of cleared segments in the current run
 * level is the current level
 * tmp_type is the select type in the menu
 * type is the game type (normal or puzzle)
 * playboard is the game playing board (first row is hidden)
 * num_jewels is the number of different jewels to use
 ****************************************************************************
* jewels_setcolors() set the foreground and background colors.
*********************************************************************************************************************************************************
* jewels_loadgame() loads the saved game and returns load success.
***************************************************************************** open game file  read in saved game ****************************************************************************
* jewels_savegame() saves the current game state.
***************************************************************************** write out the game state to the save file ****************************************************************************
* jewels_drawboard() redraws the entire game board.
***************************************************************************** clear screen  dispay playing board  horizontal layout  draw separator lines  draw progress bar  print text  vertical layout  draw separator lines  draw progress bar  print text  square layout  draw separator lines  draw progress bar  print text  layout ****************************************************************************
* jewels_putjewels() makes the jewels fall to fill empty spots and adds
* new random jewels at the empty spots at the top of each row.
***************************************************************************** loop to make all the jewels fall  mark falling jewels and add new jewels to hidden top rowif(bj->playboard[1][j].falling) {
                bj->playboard[0][j].type = rb->rand()%bj->num_jewels+1;
                bj->playboard[0][j].falling = true;
            } break if there are no falling jewels  animate falling jewels  clear old position  draw new position  framerate limiting  shift jewels down  clear out top row  mark everything not falling ****************************************************************************
* jewels_clearjewels() finds all the connected rows and columns and
*     calculates and returns the points earned.
***************************************************************************** check for connected rows  check for connected columns  clear deleted jewels ****************************************************************************
* jewels_runboard() runs the board until it settles in a fixed state and
*     returns points earned.
*********************************************************************************************************************************************************
* jewels_swapjewels() swaps two jewels as long as it results in points and
*     returns points earned.
***************************************************************************** check for invalid parameters  check for invalid directions  set direction variables  animate swapping jewels  clear old position  draw new position  framerate limiting  swap jewels ****************************************************************************
* jewels_movesavail() uses pattern matching to see if there are any
*     available move left.
***************************************************************************** check horizontal patterns  check vertical patterns ****************************************************************************
* jewels_puzzle_is_finished() checks if the puzzle is finished.
*********************************************************************************************************************************************************
* jewels_initlevel() initialises a level.
***************************************************************************** run the play board ****************************************************************************
* jewels_init() initializes jewels data structures.
***************************************************************************** seed the rand generator  clear playing board ****************************************************************************
* jewels_nextlevel() advances the game to the next bj->level and returns
*     points earned.
***************************************************************************** roll over score, change and display level  randomly clear some jewels ****************************************************************************
* jewels_game_menu() shows the game menu.
***************************************************************************** refresh the board  display the cursor  handle game button presses  move cursor left  move cursor right  move cursor down  move cursor up  scroll backwards  scroll forwards  toggle selected  end game  this is the plugin entry point  load high scores **************************************************************************
*             __________               __   ___.
*   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
*   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
*   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
*   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
*                     \/            \/     \/    \/            \/
* $Id$
*
* Copyright (C) 2005 Adam Boot
*
* Color graphics from Gweled (http://sebdelestaing.free.fr/gweled/)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
* KIND, either express or implied.
*
*************************************************************************** button definitions  This calculation assumes integer division w/ LCD_HEIGHT/TILE_HEIGHT  swap directions  play board dimension  next level threshold  animation frame rate  text margin  Game types  external bitmaps  tile background colors  the tile struct
 * type is the jewel number 0-7
 * falling if the jewel is falling
 * delete marks the jewel for deletion
  the game context struct
 * score is the current level score
 * segments is the number of cleared segments in the current run
 * level is the current level
 * tmp_type is the select type in the menu
 * type is the game type (normal or puzzle)
 * playboard is the game playing board (first row is hidden)
 * num_jewels is the number of different jewels to use
 ****************************************************************************
* jewels_setcolors() set the foreground and background colors.
*********************************************************************************************************************************************************
* jewels_loadgame() loads the saved game and returns load success.
***************************************************************************** open game file  read in saved game ****************************************************************************
* jewels_savegame() saves the current game state.
***************************************************************************** write out the game state to the save file ****************************************************************************
* jewels_drawboard() redraws the entire game board.
***************************************************************************** clear screen  dispay playing board  horizontal layout  draw separator lines  draw progress bar  print text  vertical layout  draw separator lines  draw progress bar  print text  square layout  draw separator lines  draw progress bar  print text  layout ****************************************************************************
* jewels_putjewels() makes the jewels fall to fill empty spots and adds
* new random jewels at the empty spots at the top of each row.
***************************************************************************** loop to make all the jewels fall  mark falling jewels and add new jewels to hidden top rowif(bj->playboard[1][j].falling) {
                bj->playboard[0][j].type = rb->rand()%bj->num_jewels+1;
                bj->playboard[0][j].falling = true;
            } break if there are no falling jewels  animate falling jewels  clear old position  draw new position  framerate limiting  shift jewels down  clear out top row  mark everything not falling ****************************************************************************
* jewels_clearjewels() finds all the connected rows and columns and
*     calculates and returns the points earned.
***************************************************************************** check for connected rows  check for connected columns  clear deleted jewels ****************************************************************************
* jewels_runboard() runs the board until it settles in a fixed state and
*     returns points earned.
*********************************************************************************************************************************************************
* jewels_swapjewels() swaps two jewels as long as it results in points and
*     returns points earned.
***************************************************************************** check for invalid parameters  check for invalid directions  set direction variables  animate swapping jewels  clear old position  draw new position  framerate limiting  swap jewels ****************************************************************************
* jewels_movesavail() uses pattern matching to see if there are any
*     available move left.
***************************************************************************** check horizontal patterns  check vertical patterns ****************************************************************************
* jewels_puzzle_is_finished() checks if the puzzle is finished.
*********************************************************************************************************************************************************
* jewels_initlevel() initialises a level.
***************************************************************************** run the play board ****************************************************************************
* jewels_init() initializes jewels data structures.
***************************************************************************** seed the rand generator  clear playing board ****************************************************************************
* jewels_nextlevel() advances the game to the next bj->level and returns
*     points earned.
***************************************************************************** roll over score, change and display level  randomly clear some jewels ****************************************************************************
* jewels_game_menu() shows the game menu.
***************************************************************************** refresh the board  display the cursor  handle game button presses  move cursor left  move cursor right  move cursor down  move cursor up  scroll backwards  scroll forwards  toggle selected  end game  this is the plugin entry point  load high scores **************************************************************************
*             __________               __   ___.
*   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
*   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
*   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
*   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
*                     \/            \/     \/    \/            \/
* $Id$
*
* Copyright (C) 2005 Adam Boot
*
* Color graphics from Gweled (http://sebdelestaing.free.fr/gweled/)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
* KIND, either express or implied.
*
*************************************************************************** button definitions  This calculation assumes integer division w/ LCD_HEIGHT/TILE_HEIGHT  swap directions  play board dimension  next level threshold  animation frame rate  text margin  Game types  external bitmaps  tile background colors  the tile struct
 * type is the jewel number 0-7
 * falling if the jewel is falling
 * delete marks the jewel for deletion
  the game context struct
 * score is the current level score
 * segments is the number of cleared segments in the current run
 * level is the current level
 * tmp_type is the select type in the menu
 * type is the game type (normal or puzzle)
 * playboard is the game playing board (first row is hidden)
 * num_jewels is the number of different jewels to use
 ****************************************************************************
* jewels_setcolors() set the foreground and background colors.
*********************************************************************************************************************************************************
* jewels_loadgame() loads the saved game and returns load success.
***************************************************************************** open game file  read in saved game ****************************************************************************
* jewels_savegame() saves the current game state.
***************************************************************************** write out the game state to the save file ****************************************************************************
* jewels_drawboard() redraws the entire game board.
***************************************************************************** clear screen  dispay playing board  horizontal layout  draw separator lines  draw progress bar  print text  vertical layout  draw separator lines  draw progress bar  print text  square layout  draw separator lines  draw progress bar  print text  layout ****************************************************************************
* jewels_putjewels() makes the jewels fall to fill empty spots and adds
* new random jewels at the empty spots at the top of each row.
***************************************************************************** loop to make all the jewels fall  mark falling jewels and add new jewels to hidden top rowif(bj->playboard[1][j].falling) {
                bj->playboard[0][j].type = rb->rand()%bj->num_jewels+1;
                bj->playboard[0][j].falling = true;
            } break if there are no falling jewels  animate falling jewels  clear old position  draw new position  framerate limiting  shift jewels down  clear out top row  mark everything not falling ****************************************************************************
* jewels_clearjewels() finds all the connected rows and columns and
*     calculates and returns the points earned.
***************************************************************************** check for connected rows  check for connected columns  clear deleted jewels ****************************************************************************
* jewels_runboard() runs the board until it settles in a fixed state and
*     returns points earned.
*********************************************************************************************************************************************************
* jewels_swapjewels() swaps two jewels as long as it results in points and
*     returns points earned.
***************************************************************************** check for invalid parameters  check for invalid directions  set direction variables  animate swapping jewels  clear old position  draw new position  framerate limiting  swap jewels ****************************************************************************
* jewels_movesavail() uses pattern matching to see if there are any
*     available move left.
***************************************************************************** check horizontal patterns  check vertical patterns ****************************************************************************
* jewels_puzzle_is_finished() checks if the puzzle is finished.
*********************************************************************************************************************************************************
* jewels_initlevel() initialises a level.
***************************************************************************** run the play board ****************************************************************************
* jewels_init() initializes jewels data structures.
***************************************************************************** seed the rand generator  clear playing board ****************************************************************************
* jewels_nextlevel() advances the game to the next bj->level and returns
*     points earned.
***************************************************************************** roll over score, change and display level  randomly clear some jewels ****************************************************************************
* jewels_game_menu() shows the game menu.
***************************************************************************** refresh the board  display the cursor  handle game button presses  move cursor left  move cursor right  move cursor down  move cursor up  scroll backwards  scroll forwards  toggle selected  end game  this is the plugin entry point  load high scores 