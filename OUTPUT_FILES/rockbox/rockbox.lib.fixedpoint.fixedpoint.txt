**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Jens Arnold
 *
 * Fixed point library for plugins
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** TAKEN FROM ORIGINAL fixedpoint.h  Inverse gain of circular cordic rotation in s0.31 format.  0.607252929  Table of values of atan(2^-i) in 0.32 format fractions of pi where pi = 0xffffffff / 2  +0.785398163 (or pi/4)  +0.463647609  +0.244978663  +0.124354995  +0.062418810  +0.031239833  +0.015623729  +0.007812341  +0.003906230  +0.001953123  +0.000976562  +0.000488281  +0.000244141  +0.000122070  +0.000061035  +0.000030518  +0.000015259  +0.000007629  +0.000003815  +0.000001907  +0.000000954  +0.000000477  +0.000000238  +0.000000119  +0.000000060  +0.000000030  +0.000000015  +0.000000007  +0.000000004  +0.000000002  +0.000000001  +0.000000000  Precalculated sine and cosine * 16384 (2^14) (fixed point 18.14) *
 * Implements sin and cos using CORDIC rotation.
 *
 * @param phase has range from 0 to 0xffffffff, representing 0 and
 *        2*pi respectively.
 * @param cos return address for cos
 * @return sin of phase, value is a signed value from LONG_MIN to LONG_MAX,
 *         representing -1 and 1 respectively. 
  Setup initial vector  The phase has to be somewhere between 0..pi for this to work right  z in first quadrant, z += pi/2 to correct  z in third quadrant, z -= pi/2 to correct  z in fourth quadrant, z -= 3pi/2 to correct  Each iteration adds roughly 1-bit of extra precision  Decided which direction to rotate vector. Pivot point is pi/2  Accurate sqrt with only elementary operations.
 * Snagged from:
 *   http://www.devmaster.net/articles/fixed-point-optimizations/
 *
 * Extension to fractions and initial estimate improvement by jethead71
  no sqrt(neg), or just sqrt(0) = 0  integer part  fractional part  detect carry  round up if the next bit would be a '1'  detect carry  raise an integer to an integer power  y[k] = bit k of y, 0 or 1; k=0...n; n=|_ lg(y) _|
     *
     * x^y =  x^(y[0]*2^0 + y[1]*2^1 + ... + y[n]*2^n)
     *     =  x^(y[0]*2^0) * x^(y[1]*2^1) * ... * x^(y[n]*2^n)
      would be < 1 or +inf if x == 0 *
 * Fixed point sinus using a lookup table
 * don't forget to divide the result by 16384 to get the actual sinus value
 * @param val sinus argument in degree
 * @return sin(val)*16384
  phase 0-90 degree  phase 91-180 degree  phase 181-270 degree  phase 270-359 degree *
 * Fixed point cosinus using a lookup table
 * don't forget to divide the result by 16384 to get the actual cosinus value
 * @param val sinus argument in degree
 * @return cos(val)*16384
  phase 0-90 degree  phase 91-180 degree  phase 181-270 degree  phase 270-359 degree *
 * Fixed-point natural log
 * taken from http://www.quinapalus.com/efunc.html
 *  "The code assumes integers are at least 32 bits long. The (positive)
 *   argument and the result of the function are both expressed as fixed-point
 *   values with 16 fractional bits, although intermediates are kept with 28
 *   bits of precision to avoid loss of accuracy during shifts."
 *
 * Fixed-point exponential
 * taken from http://www.quinapalus.com/efunc.html
 *  "The code assumes integers are at least 32 bits long. The (non-negative)
 *   argument and the result of the function are both expressed as fixed-point
 *   values with 16 fractional bits. Notice that after 11 steps of the
 *   algorithm the constants involved become such that the code is simply
 *   doing a multiplication: this is explained in the note below.
 *   The extension to negative arguments is left as an exercise."
 * MODIFIED FROM replaygain.c  constants in fixed point format, 28 fractional bits  ln(2)         1/ln(2)       1/6           -1/360        1/21600       ln(10)        log10(2)      log calculation tolerance  The fpexp10 fixed point math routine is based
 * on oMathFP by Dan Carter (http://orbisstudios.com).
 * FIXED POINT EXP10
 * Return 10^x as FP integer.  Argument is FP integer.
  scale constants  exp(0) = 1  convert from base 10 to base e  calculate exp(x) * FIXED POINT LOG10
 * Return log10(x) as FP integer.  Argument is FP integer.
  Calculate log2 of argument  integer part  fractional part  convert log2 to log10 * CONVERT FACTOR TO DECIBELS  decibels = 20 * log10(factor) * CONVERT DECIBELS TO FACTOR  factor = 10 ^ (decibels / 20) **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Jens Arnold
 *
 * Fixed point library for plugins
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** TAKEN FROM ORIGINAL fixedpoint.h  Inverse gain of circular cordic rotation in s0.31 format.  0.607252929  Table of values of atan(2^-i) in 0.32 format fractions of pi where pi = 0xffffffff / 2  +0.785398163 (or pi/4)  +0.463647609  +0.244978663  +0.124354995  +0.062418810  +0.031239833  +0.015623729  +0.007812341  +0.003906230  +0.001953123  +0.000976562  +0.000488281  +0.000244141  +0.000122070  +0.000061035  +0.000030518  +0.000015259  +0.000007629  +0.000003815  +0.000001907  +0.000000954  +0.000000477  +0.000000238  +0.000000119  +0.000000060  +0.000000030  +0.000000015  +0.000000007  +0.000000004  +0.000000002  +0.000000001  +0.000000000  Precalculated sine and cosine * 16384 (2^14) (fixed point 18.14) *
 * Implements sin and cos using CORDIC rotation.
 *
 * @param phase has range from 0 to 0xffffffff, representing 0 and
 *        2*pi respectively.
 * @param cos return address for cos
 * @return sin of phase, value is a signed value from LONG_MIN to LONG_MAX,
 *         representing -1 and 1 respectively. 
  Setup initial vector  The phase has to be somewhere between 0..pi for this to work right  z in first quadrant, z += pi/2 to correct  z in third quadrant, z -= pi/2 to correct  z in fourth quadrant, z -= 3pi/2 to correct  Each iteration adds roughly 1-bit of extra precision  Decided which direction to rotate vector. Pivot point is pi/2  Accurate sqrt with only elementary operations.
 * Snagged from:
 *   http://www.devmaster.net/articles/fixed-point-optimizations/
 *
 * Extension to fractions and initial estimate improvement by jethead71
  no sqrt(neg), or just sqrt(0) = 0  integer part  fractional part  detect carry  round up if the next bit would be a '1'  detect carry  raise an integer to an integer power  y[k] = bit k of y, 0 or 1; k=0...n; n=|_ lg(y) _|
     *
     * x^y =  x^(y[0]*2^0 + y[1]*2^1 + ... + y[n]*2^n)
     *     =  x^(y[0]*2^0) * x^(y[1]*2^1) * ... * x^(y[n]*2^n)
      would be < 1 or +inf if x == 0 *
 * Fixed point sinus using a lookup table
 * don't forget to divide the result by 16384 to get the actual sinus value
 * @param val sinus argument in degree
 * @return sin(val)*16384
  phase 0-90 degree  phase 91-180 degree  phase 181-270 degree  phase 270-359 degree *
 * Fixed point cosinus using a lookup table
 * don't forget to divide the result by 16384 to get the actual cosinus value
 * @param val sinus argument in degree
 * @return cos(val)*16384
  phase 0-90 degree  phase 91-180 degree  phase 181-270 degree  phase 270-359 degree *
 * Fixed-point natural log
 * taken from http://www.quinapalus.com/efunc.html
 *  "The code assumes integers are at least 32 bits long. The (positive)
 *   argument and the result of the function are both expressed as fixed-point
 *   values with 16 fractional bits, although intermediates are kept with 28
 *   bits of precision to avoid loss of accuracy during shifts."
 *
 * Fixed-point exponential
 * taken from http://www.quinapalus.com/efunc.html
 *  "The code assumes integers are at least 32 bits long. The (non-negative)
 *   argument and the result of the function are both expressed as fixed-point
 *   values with 16 fractional bits. Notice that after 11 steps of the
 *   algorithm the constants involved become such that the code is simply
 *   doing a multiplication: this is explained in the note below.
 *   The extension to negative arguments is left as an exercise."
 * MODIFIED FROM replaygain.c  constants in fixed point format, 28 fractional bits  ln(2)         1/ln(2)       1/6           -1/360        1/21600       ln(10)        log10(2)      log calculation tolerance  The fpexp10 fixed point math routine is based
 * on oMathFP by Dan Carter (http://orbisstudios.com).
 * FIXED POINT EXP10
 * Return 10^x as FP integer.  Argument is FP integer.
  scale constants  exp(0) = 1  convert from base 10 to base e  calculate exp(x) * FIXED POINT LOG10
 * Return log10(x) as FP integer.  Argument is FP integer.
  Calculate log2 of argument  integer part  fractional part  convert log2 to log10 * CONVERT FACTOR TO DECIBELS  decibels = 20 * log10(factor) * CONVERT DECIBELS TO FACTOR  factor = 10 ^ (decibels / 20) **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Jens Arnold
 *
 * Fixed point library for plugins
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** TAKEN FROM ORIGINAL fixedpoint.h  Inverse gain of circular cordic rotation in s0.31 format.  0.607252929  Table of values of atan(2^-i) in 0.32 format fractions of pi where pi = 0xffffffff / 2  +0.785398163 (or pi/4)  +0.463647609  +0.244978663  +0.124354995  +0.062418810  +0.031239833  +0.015623729  +0.007812341  +0.003906230  +0.001953123  +0.000976562  +0.000488281  +0.000244141  +0.000122070  +0.000061035  +0.000030518  +0.000015259  +0.000007629  +0.000003815  +0.000001907  +0.000000954  +0.000000477  +0.000000238  +0.000000119  +0.000000060  +0.000000030  +0.000000015  +0.000000007  +0.000000004  +0.000000002  +0.000000001  +0.000000000  Precalculated sine and cosine * 16384 (2^14) (fixed point 18.14) *
 * Implements sin and cos using CORDIC rotation.
 *
 * @param phase has range from 0 to 0xffffffff, representing 0 and
 *        2*pi respectively.
 * @param cos return address for cos
 * @return sin of phase, value is a signed value from LONG_MIN to LONG_MAX,
 *         representing -1 and 1 respectively. 
  Setup initial vector  The phase has to be somewhere between 0..pi for this to work right  z in first quadrant, z += pi/2 to correct  z in third quadrant, z -= pi/2 to correct  z in fourth quadrant, z -= 3pi/2 to correct  Each iteration adds roughly 1-bit of extra precision  Decided which direction to rotate vector. Pivot point is pi/2  Accurate sqrt with only elementary operations.
 * Snagged from:
 *   http://www.devmaster.net/articles/fixed-point-optimizations/
 *
 * Extension to fractions and initial estimate improvement by jethead71
  no sqrt(neg), or just sqrt(0) = 0  integer part  fractional part  detect carry  round up if the next bit would be a '1'  detect carry  raise an integer to an integer power  y[k] = bit k of y, 0 or 1; k=0...n; n=|_ lg(y) _|
     *
     * x^y =  x^(y[0]*2^0 + y[1]*2^1 + ... + y[n]*2^n)
     *     =  x^(y[0]*2^0) * x^(y[1]*2^1) * ... * x^(y[n]*2^n)
      would be < 1 or +inf if x == 0 *
 * Fixed point sinus using a lookup table
 * don't forget to divide the result by 16384 to get the actual sinus value
 * @param val sinus argument in degree
 * @return sin(val)*16384
  phase 0-90 degree  phase 91-180 degree  phase 181-270 degree  phase 270-359 degree *
 * Fixed point cosinus using a lookup table
 * don't forget to divide the result by 16384 to get the actual cosinus value
 * @param val sinus argument in degree
 * @return cos(val)*16384
  phase 0-90 degree  phase 91-180 degree  phase 181-270 degree  phase 270-359 degree *
 * Fixed-point natural log
 * taken from http://www.quinapalus.com/efunc.html
 *  "The code assumes integers are at least 32 bits long. The (positive)
 *   argument and the result of the function are both expressed as fixed-point
 *   values with 16 fractional bits, although intermediates are kept with 28
 *   bits of precision to avoid loss of accuracy during shifts."
 *
 * Fixed-point exponential
 * taken from http://www.quinapalus.com/efunc.html
 *  "The code assumes integers are at least 32 bits long. The (non-negative)
 *   argument and the result of the function are both expressed as fixed-point
 *   values with 16 fractional bits. Notice that after 11 steps of the
 *   algorithm the constants involved become such that the code is simply
 *   doing a multiplication: this is explained in the note below.
 *   The extension to negative arguments is left as an exercise."
 * MODIFIED FROM replaygain.c  constants in fixed point format, 28 fractional bits  ln(2)         1/ln(2)       1/6           -1/360        1/21600       ln(10)        log10(2)      log calculation tolerance  The fpexp10 fixed point math routine is based
 * on oMathFP by Dan Carter (http://orbisstudios.com).
 * FIXED POINT EXP10
 * Return 10^x as FP integer.  Argument is FP integer.
  scale constants  exp(0) = 1  convert from base 10 to base e  calculate exp(x) * FIXED POINT LOG10
 * Return log10(x) as FP integer.  Argument is FP integer.
  Calculate log2 of argument  integer part  fractional part  convert log2 to log10 * CONVERT FACTOR TO DECIBELS  decibels = 20 * log10(factor) * CONVERT DECIBELS TO FACTOR  factor = 10 ^ (decibels / 20) 