**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Björn Stenberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define LOGF_ENABLE TODO: Move target-specific stuff somewhere else (serial number reading) ------------------------------------------------------------------------- USB protocol descriptors:  will be filled in later  In 2mA units  Generic for all targets  this is stringid #0: languages supported  LANGID US English * NOTE Serial Number
 * The serial number string is split into two parts:
 * - the first character indicates the set of interfaces enabled
 * - the other characters form a (hopefully) unique device-specific number
 * The implementation of set_serial_descriptor should left the first character
 * of usb_string_iSerial unused, ie never write to
 * usb_string_iSerial.wString[0] but should take it into account when
 * computing the length of the descriptor
  We need to convert from a little-endian 64-bit int
       into a utf-16 string of hex characters  Align 32 digits right in the 40-digit serial number  FIXME where is the STMP3600 serial number stored ? If we don't know the device serial number, use the one
 * from the disk  This "serial number" isn't unique, but it should never actually
   appear in non-testing use  class driver init functions should be safe to call even if the driver
     * won't be used. This simplifies other logic (i.e. we don't need to know
     * yet which drivers will be enabled  nope. flag error  type  We don't have a real OS descriptor, and we don't handle
                 * STALL correctly on some devices, so we return any valid
                 * string (we arbitrarily pick the manufacturer name)
                  nope. flag error  Handling USB requests starts here logf("control handled"); called by usb_drv_int()  called by usb_drv_transfer_completed()  already handled  All other endpoints. Let the thread deal with it  called by usb_drv_int() **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Björn Stenberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define LOGF_ENABLE TODO: Move target-specific stuff somewhere else (serial number reading) ------------------------------------------------------------------------- USB protocol descriptors:  will be filled in later  In 2mA units  Generic for all targets  this is stringid #0: languages supported  LANGID US English * NOTE Serial Number
 * The serial number string is split into two parts:
 * - the first character indicates the set of interfaces enabled
 * - the other characters form a (hopefully) unique device-specific number
 * The implementation of set_serial_descriptor should left the first character
 * of usb_string_iSerial unused, ie never write to
 * usb_string_iSerial.wString[0] but should take it into account when
 * computing the length of the descriptor
  We need to convert from a little-endian 64-bit int
       into a utf-16 string of hex characters  Align 32 digits right in the 40-digit serial number  FIXME where is the STMP3600 serial number stored ? If we don't know the device serial number, use the one
 * from the disk  This "serial number" isn't unique, but it should never actually
   appear in non-testing use  class driver init functions should be safe to call even if the driver
     * won't be used. This simplifies other logic (i.e. we don't need to know
     * yet which drivers will be enabled  nope. flag error  type  We don't have a real OS descriptor, and we don't handle
                 * STALL correctly on some devices, so we return any valid
                 * string (we arbitrarily pick the manufacturer name)
                  nope. flag error  Handling USB requests starts here logf("control handled"); called by usb_drv_int()  called by usb_drv_transfer_completed()  already handled  All other endpoints. Let the thread deal with it  called by usb_drv_int() **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Björn Stenberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define LOGF_ENABLE TODO: Move target-specific stuff somewhere else (serial number reading) ------------------------------------------------------------------------- USB protocol descriptors:  will be filled in later  In 2mA units  Generic for all targets  this is stringid #0: languages supported  LANGID US English * NOTE Serial Number
 * The serial number string is split into two parts:
 * - the first character indicates the set of interfaces enabled
 * - the other characters form a (hopefully) unique device-specific number
 * The implementation of set_serial_descriptor should left the first character
 * of usb_string_iSerial unused, ie never write to
 * usb_string_iSerial.wString[0] but should take it into account when
 * computing the length of the descriptor
  We need to convert from a little-endian 64-bit int
       into a utf-16 string of hex characters  Align 32 digits right in the 40-digit serial number  FIXME where is the STMP3600 serial number stored ? If we don't know the device serial number, use the one
 * from the disk  This "serial number" isn't unique, but it should never actually
   appear in non-testing use  class driver init functions should be safe to call even if the driver
     * won't be used. This simplifies other logic (i.e. we don't need to know
     * yet which drivers will be enabled  nope. flag error  type  We don't have a real OS descriptor, and we don't handle
                 * STALL correctly on some devices, so we return any valid
                 * string (we arbitrarily pick the manufacturer name)
                  nope. flag error  Handling USB requests starts here logf("control handled"); called by usb_drv_int()  called by usb_drv_transfer_completed()  already handled  All other endpoints. Let the thread deal with it  called by usb_drv_int() 