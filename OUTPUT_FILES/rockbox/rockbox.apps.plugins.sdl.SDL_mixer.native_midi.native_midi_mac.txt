
  native_midi_mac:  Native Midi support on MacOS for the SDL_mixer library
  Copyright (C) 2001  Max Horn <max@quendi.de>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
|| __MACOSX__  Native Midi song  number of (32-bit) long words in a note request event  number of (32-bit) long words in a marker event  number of (32-bit) long words in a general event, minus its data  The global TunePlayer instance  Check whether QuickTime is available  TODO  Init the arrays  Attempt to load the midi file  Allocate memory for the song struct  Build a tune sequence from the event list  Now build a tune header from the data we collect above, create
	   all parts as needed and assign them the correct instrument.
	 Increment the instance count  Finally, free the event list  If this is the currently playing song, stop it now  Finally, free the data storage  Increment the instance count  FIXME: is this code even used anymore?  First, stop the currently playing music  Set up the queue flags  Set the time scale (units per second), we want milliseconds  Set the header, to tell what instruments are used  Have it allocate whatever resources are needed  We want to play at normal volume  Finally, start playing the full song  Stop music  Deallocate all instruments  QTMA olume may range from 0.0 to 1.0 (in 16.16 fixed point encoding)  allocate space for the tune header  Set starting position in our tune memory  Initialise the arrays 
	 * Now the major work - iterate over all GM events,
	 * and turn them into QuickTime Music format.
	 * At the same time, calculate the max. polyphony for each part,
	 * and also the part->instrument mapping.
	  Check if we are running low on space...  Resize our data storage.  Keep track of the polyphony of the current part  If no part is specified yet, we default to the first instrument, which
				   is piano (or the first drum kit if we are on the drum channel)
				 the first drum kit is the "no drum" kit!  TODO - add support for more than 32 parts using eXtended QTMA events  Decode pitch & velocity  was a NOTE OFF in disguise, so we decrement the polyphony  Keep track of the polyphony of the current part  Now scan forward to find the matching NOTE OFF event  NOTE ON with velocity == 0 is the same as a NOTE OFF  Did we find a note off? Should always be the case, but who knows...  We found a NOTE OFF, now calculate the note duration  Now we need to check if we get along with a normal Note Event, or if we need an extended one...  NYI - use kControllerAfterTouch. But how are the parameters to be mapped?  bank change - igore for now  No other controllers implemented yet  Instrument changed  Channel 9 (the 10th channel) is different, it indicates a drum kit  Only if the instrument for this channel *really* changed, add a new part.  TODO maybe make use of kGeneralEventPartChange here,
				   to help QT reuse note channels?
				 NYI  In the midi spec, 0x2000 = center, 0x0000 = - 2 semitones, 0x3FFF = +2 semitones
			   but for QTMA, we specify it as a 8.8 fixed point of semitones
			   TODO: detect "pitch bend range changes" & honor them!
			 "Center" the bend  Move it to our format:  If it turns out the pitch bend didn't change, stop here  Stuff a control event  Tempo change  on to the next event  Finally, place an end marker  pointers to the head and tail long words of a music event  for the NAStuffToneDescription call 
	 * Open up the Note Allocator
	 
	 * Allocate space for the tune header
	 
	 * Loop over all parts
	 
		 * Stuff request for the instrument with the given polyphony
		  last longword of general event  I'm told by the Apple people that the Quicktime types were poorly designed and it was 
		 * too late to change them. On little endian, the BigEndian(Short|Fixed) types are structs
		 * while on big endian they are primitive types. Furthermore, Quicktime failed to 
		 * provide setter and getter functions. To get this to work, we need to case the 
		 * code for the two possible situations.
		 * My assumption is that the right-side value was always expected to be BigEndian
		 * as it was written way before the Universal Binary transition. So in the little endian
		 * case, OSSwap is used.
		  move pointer to beginning of next event  end of sequence marker  if we encountered an error, dispose of the storage we allocated and return NULL  MacOS native MIDI support 
  native_midi_mac:  Native Midi support on MacOS for the SDL_mixer library
  Copyright (C) 2001  Max Horn <max@quendi.de>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
|| __MACOSX__  Native Midi song  number of (32-bit) long words in a note request event  number of (32-bit) long words in a marker event  number of (32-bit) long words in a general event, minus its data  The global TunePlayer instance  Check whether QuickTime is available  TODO  Init the arrays  Attempt to load the midi file  Allocate memory for the song struct  Build a tune sequence from the event list  Now build a tune header from the data we collect above, create
	   all parts as needed and assign them the correct instrument.
	 Increment the instance count  Finally, free the event list  If this is the currently playing song, stop it now  Finally, free the data storage  Increment the instance count  FIXME: is this code even used anymore?  First, stop the currently playing music  Set up the queue flags  Set the time scale (units per second), we want milliseconds  Set the header, to tell what instruments are used  Have it allocate whatever resources are needed  We want to play at normal volume  Finally, start playing the full song  Stop music  Deallocate all instruments  QTMA olume may range from 0.0 to 1.0 (in 16.16 fixed point encoding)  allocate space for the tune header  Set starting position in our tune memory  Initialise the arrays 
	 * Now the major work - iterate over all GM events,
	 * and turn them into QuickTime Music format.
	 * At the same time, calculate the max. polyphony for each part,
	 * and also the part->instrument mapping.
	  Check if we are running low on space...  Resize our data storage.  Keep track of the polyphony of the current part  If no part is specified yet, we default to the first instrument, which
				   is piano (or the first drum kit if we are on the drum channel)
				 the first drum kit is the "no drum" kit!  TODO - add support for more than 32 parts using eXtended QTMA events  Decode pitch & velocity  was a NOTE OFF in disguise, so we decrement the polyphony  Keep track of the polyphony of the current part  Now scan forward to find the matching NOTE OFF event  NOTE ON with velocity == 0 is the same as a NOTE OFF  Did we find a note off? Should always be the case, but who knows...  We found a NOTE OFF, now calculate the note duration  Now we need to check if we get along with a normal Note Event, or if we need an extended one...  NYI - use kControllerAfterTouch. But how are the parameters to be mapped?  bank change - igore for now  No other controllers implemented yet  Instrument changed  Channel 9 (the 10th channel) is different, it indicates a drum kit  Only if the instrument for this channel *really* changed, add a new part.  TODO maybe make use of kGeneralEventPartChange here,
				   to help QT reuse note channels?
				 NYI  In the midi spec, 0x2000 = center, 0x0000 = - 2 semitones, 0x3FFF = +2 semitones
			   but for QTMA, we specify it as a 8.8 fixed point of semitones
			   TODO: detect "pitch bend range changes" & honor them!
			 "Center" the bend  Move it to our format:  If it turns out the pitch bend didn't change, stop here  Stuff a control event  Tempo change  on to the next event  Finally, place an end marker  pointers to the head and tail long words of a music event  for the NAStuffToneDescription call 
	 * Open up the Note Allocator
	 
	 * Allocate space for the tune header
	 
	 * Loop over all parts
	 
		 * Stuff request for the instrument with the given polyphony
		  last longword of general event  I'm told by the Apple people that the Quicktime types were poorly designed and it was 
		 * too late to change them. On little endian, the BigEndian(Short|Fixed) types are structs
		 * while on big endian they are primitive types. Furthermore, Quicktime failed to 
		 * provide setter and getter functions. To get this to work, we need to case the 
		 * code for the two possible situations.
		 * My assumption is that the right-side value was always expected to be BigEndian
		 * as it was written way before the Universal Binary transition. So in the little endian
		 * case, OSSwap is used.
		  move pointer to beginning of next event  end of sequence marker  if we encountered an error, dispose of the storage we allocated and return NULL  MacOS native MIDI support 
  native_midi_mac:  Native Midi support on MacOS for the SDL_mixer library
  Copyright (C) 2001  Max Horn <max@quendi.de>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
|| __MACOSX__  Native Midi song  number of (32-bit) long words in a note request event  number of (32-bit) long words in a marker event  number of (32-bit) long words in a general event, minus its data  The global TunePlayer instance  Check whether QuickTime is available  TODO  Init the arrays  Attempt to load the midi file  Allocate memory for the song struct  Build a tune sequence from the event list  Now build a tune header from the data we collect above, create
	   all parts as needed and assign them the correct instrument.
	 Increment the instance count  Finally, free the event list  If this is the currently playing song, stop it now  Finally, free the data storage  Increment the instance count  FIXME: is this code even used anymore?  First, stop the currently playing music  Set up the queue flags  Set the time scale (units per second), we want milliseconds  Set the header, to tell what instruments are used  Have it allocate whatever resources are needed  We want to play at normal volume  Finally, start playing the full song  Stop music  Deallocate all instruments  QTMA olume may range from 0.0 to 1.0 (in 16.16 fixed point encoding)  allocate space for the tune header  Set starting position in our tune memory  Initialise the arrays 
	 * Now the major work - iterate over all GM events,
	 * and turn them into QuickTime Music format.
	 * At the same time, calculate the max. polyphony for each part,
	 * and also the part->instrument mapping.
	  Check if we are running low on space...  Resize our data storage.  Keep track of the polyphony of the current part  If no part is specified yet, we default to the first instrument, which
				   is piano (or the first drum kit if we are on the drum channel)
				 the first drum kit is the "no drum" kit!  TODO - add support for more than 32 parts using eXtended QTMA events  Decode pitch & velocity  was a NOTE OFF in disguise, so we decrement the polyphony  Keep track of the polyphony of the current part  Now scan forward to find the matching NOTE OFF event  NOTE ON with velocity == 0 is the same as a NOTE OFF  Did we find a note off? Should always be the case, but who knows...  We found a NOTE OFF, now calculate the note duration  Now we need to check if we get along with a normal Note Event, or if we need an extended one...  NYI - use kControllerAfterTouch. But how are the parameters to be mapped?  bank change - igore for now  No other controllers implemented yet  Instrument changed  Channel 9 (the 10th channel) is different, it indicates a drum kit  Only if the instrument for this channel *really* changed, add a new part.  TODO maybe make use of kGeneralEventPartChange here,
				   to help QT reuse note channels?
				 NYI  In the midi spec, 0x2000 = center, 0x0000 = - 2 semitones, 0x3FFF = +2 semitones
			   but for QTMA, we specify it as a 8.8 fixed point of semitones
			   TODO: detect "pitch bend range changes" & honor them!
			 "Center" the bend  Move it to our format:  If it turns out the pitch bend didn't change, stop here  Stuff a control event  Tempo change  on to the next event  Finally, place an end marker  pointers to the head and tail long words of a music event  for the NAStuffToneDescription call 
	 * Open up the Note Allocator
	 
	 * Allocate space for the tune header
	 
	 * Loop over all parts
	 
		 * Stuff request for the instrument with the given polyphony
		  last longword of general event  I'm told by the Apple people that the Quicktime types were poorly designed and it was 
		 * too late to change them. On little endian, the BigEndian(Short|Fixed) types are structs
		 * while on big endian they are primitive types. Furthermore, Quicktime failed to 
		 * provide setter and getter functions. To get this to work, we need to case the 
		 * code for the two possible situations.
		 * My assumption is that the right-side value was always expected to be BigEndian
		 * as it was written way before the Universal Binary transition. So in the little endian
		 * case, OSSwap is used.
		  move pointer to beginning of next event  end of sequence marker  if we encountered an error, dispose of the storage we allocated and return NULL  MacOS native MIDI support 