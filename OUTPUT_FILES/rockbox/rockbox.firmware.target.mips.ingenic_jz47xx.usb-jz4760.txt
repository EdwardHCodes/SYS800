**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2016 by Roman Stolyarov
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define LOGF_ENABLE Set data end!  Read CSR0  Check for SentStall:
        This bit is set when a STALL handshake is transmitted. The CPU should clear this bit.
      Check for SetupEnd:
        This bit will be set when a control transaction ends before the DataEnd bit has been set.
        An interrupt will be generated and the FIFO flushed at this time.
        The bit is cleared by the CPU writing a 1 to the ServicedSetupEnd bit.
      Call relevant routines for endpoint 0 state  There is a packet in the fifo  Set data end!  clear OUTPKTRDY bit  Set data end!  There is a packet in the fifo if(csr & USB_OUTCSR_FFFULL)
                csr &= ~USB_OUTCSR_FFFULL; Disable DMA  XXX range? Read out last packet manually  If the last packet is less than MAXP, set INPKTRDY manually  From the datasheet:

       When a reset condition is detected on the USB, the controller performs the following actions:
           * Sets FAddr to 0.
           * Sets Index to 0.
           * Flushes all endpoint FIFOs.
           * Clears all control/status registers.
           * Enables all endpoint interrupts.
           * Generates a Reset interrupt.
     Disable interrupts  Disable DMA  High speed, softconnect  Reset EP0  Reset other endpoints  Enable interrupts  Interrupt handler  Read interrupt registers  EPIN & EPOUT are all handled in DMA  This is called only if the state was stable for HZ/16 - check state
     * and post appropriate event.  Dis- and reconnect from USB  Disable interrupts  Disable DMA  Disconnect from USB  ep0 out needs special handling  There are only 3+2 endpoints, so hardcode this ... **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2016 by Roman Stolyarov
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define LOGF_ENABLE Set data end!  Read CSR0  Check for SentStall:
        This bit is set when a STALL handshake is transmitted. The CPU should clear this bit.
      Check for SetupEnd:
        This bit will be set when a control transaction ends before the DataEnd bit has been set.
        An interrupt will be generated and the FIFO flushed at this time.
        The bit is cleared by the CPU writing a 1 to the ServicedSetupEnd bit.
      Call relevant routines for endpoint 0 state  There is a packet in the fifo  Set data end!  clear OUTPKTRDY bit  Set data end!  There is a packet in the fifo if(csr & USB_OUTCSR_FFFULL)
                csr &= ~USB_OUTCSR_FFFULL; Disable DMA  XXX range? Read out last packet manually  If the last packet is less than MAXP, set INPKTRDY manually  From the datasheet:

       When a reset condition is detected on the USB, the controller performs the following actions:
           * Sets FAddr to 0.
           * Sets Index to 0.
           * Flushes all endpoint FIFOs.
           * Clears all control/status registers.
           * Enables all endpoint interrupts.
           * Generates a Reset interrupt.
     Disable interrupts  Disable DMA  High speed, softconnect  Reset EP0  Reset other endpoints  Enable interrupts  Interrupt handler  Read interrupt registers  EPIN & EPOUT are all handled in DMA  This is called only if the state was stable for HZ/16 - check state
     * and post appropriate event.  Dis- and reconnect from USB  Disable interrupts  Disable DMA  Disconnect from USB  ep0 out needs special handling  There are only 3+2 endpoints, so hardcode this ... **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2016 by Roman Stolyarov
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define LOGF_ENABLE Set data end!  Read CSR0  Check for SentStall:
        This bit is set when a STALL handshake is transmitted. The CPU should clear this bit.
      Check for SetupEnd:
        This bit will be set when a control transaction ends before the DataEnd bit has been set.
        An interrupt will be generated and the FIFO flushed at this time.
        The bit is cleared by the CPU writing a 1 to the ServicedSetupEnd bit.
      Call relevant routines for endpoint 0 state  There is a packet in the fifo  Set data end!  clear OUTPKTRDY bit  Set data end!  There is a packet in the fifo if(csr & USB_OUTCSR_FFFULL)
                csr &= ~USB_OUTCSR_FFFULL; Disable DMA  XXX range? Read out last packet manually  If the last packet is less than MAXP, set INPKTRDY manually  From the datasheet:

       When a reset condition is detected on the USB, the controller performs the following actions:
           * Sets FAddr to 0.
           * Sets Index to 0.
           * Flushes all endpoint FIFOs.
           * Clears all control/status registers.
           * Enables all endpoint interrupts.
           * Generates a Reset interrupt.
     Disable interrupts  Disable DMA  High speed, softconnect  Reset EP0  Reset other endpoints  Enable interrupts  Interrupt handler  Read interrupt registers  EPIN & EPOUT are all handled in DMA  This is called only if the state was stable for HZ/16 - check state
     * and post appropriate event.  Dis- and reconnect from USB  Disable interrupts  Disable DMA  Disconnect from USB  ep0 out needs special handling  There are only 3+2 endpoints, so hardcode this ... 