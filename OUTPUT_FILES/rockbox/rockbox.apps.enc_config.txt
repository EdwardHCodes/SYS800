**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** this is used by all encoder menu items,
   MUST be initialised before the call to do_menu() * Function definitions for each codec - add these to enc_data
    list following the definitions ** aiff_enc.codec ** mp3_enc.codec * mp3_enc: return encoder capabilities  Overall encoder capabilities  Restrict caps based on config  sample rate caps  check if MPEG1 sample rates are available  check if MPEG2 sample rates and mono are available  check if stereo is available  mp3_enc_get_caps  mp3_enc: return the default configuration  default that works for all types  mp3_enc_default_config  mp3_enc_convert_config  mp3_enc: show the bitrate setting options  Available in MPEG Version:  this sounds awful no matter what    2  mono only    2    2  HAVE_MPEG2_SAMPR  stereo/mono  1,2  1,2  1,2  1,2  1,2  1,2  1,2  1,2  1,2  Leave out 144 when there is both MPEG 1 and 2   oddball MPEG2-only rate stuck in the middle    2  1,2  stereo only  1    1    1    1    This is rather constant based upon the build but better than
       storing and maintaining yet another list of numbers  HAVE_MPEG2_SAMPR  mp3_enc_bitrate  mp3_enc configuration menu * wav_enc.codec * wav_enc: show the configuration menu * wavpack_enc.codec * wavpack_enc: show the configuration menu * config function pointers and/or data for each codec * aiff_enc.codec  mp3_enc.codec  wav_enc.codec  wavpack_enc.codec  This is called before entering the menu with the encoder settings
   Its needed to make sure the settings can take effect.  this struct must be init'ed before calling do_menu() so this is safe  entering the item  this is called when a encoder setting is exited
   It is used to update the status bar and save the setting  If the setting being configured is global, it must be placed
               in global_settings before updating the status bar for the
               change to show upon exiting the item.  update settings dependent upon encoder settings  have to sync other settings when encoder settings change  rec_channels  no zero check needed: encoder must support at least one
       sample rate that recording supports or it shouldn't be in
       available in the recording options  rec_frequency  enc_rec_settings_changed * public stuff * global_to_encoder_config  encoder_config_to_global  get_caps expects caps to be zeroed first  If no function provided...defaults to all  enc_get_caps  Initializes the config struct with default values  enc_init_config * Encoder Menus * enc_config_menu * Global Settings * Reset all codecs to defaults  enc_global_settings_reset  Apply new settings  enc_global_settings_apply  Show an encoder's config menu based on the global_settings.
   Modified settings are placed in global_settings.enc_config.  enc_global_config_menu **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** this is used by all encoder menu items,
   MUST be initialised before the call to do_menu() * Function definitions for each codec - add these to enc_data
    list following the definitions ** aiff_enc.codec ** mp3_enc.codec * mp3_enc: return encoder capabilities  Overall encoder capabilities  Restrict caps based on config  sample rate caps  check if MPEG1 sample rates are available  check if MPEG2 sample rates and mono are available  check if stereo is available  mp3_enc_get_caps  mp3_enc: return the default configuration  default that works for all types  mp3_enc_default_config  mp3_enc_convert_config  mp3_enc: show the bitrate setting options  Available in MPEG Version:  this sounds awful no matter what    2  mono only    2    2  HAVE_MPEG2_SAMPR  stereo/mono  1,2  1,2  1,2  1,2  1,2  1,2  1,2  1,2  1,2  Leave out 144 when there is both MPEG 1 and 2   oddball MPEG2-only rate stuck in the middle    2  1,2  stereo only  1    1    1    1    This is rather constant based upon the build but better than
       storing and maintaining yet another list of numbers  HAVE_MPEG2_SAMPR  mp3_enc_bitrate  mp3_enc configuration menu * wav_enc.codec * wav_enc: show the configuration menu * wavpack_enc.codec * wavpack_enc: show the configuration menu * config function pointers and/or data for each codec * aiff_enc.codec  mp3_enc.codec  wav_enc.codec  wavpack_enc.codec  This is called before entering the menu with the encoder settings
   Its needed to make sure the settings can take effect.  this struct must be init'ed before calling do_menu() so this is safe  entering the item  this is called when a encoder setting is exited
   It is used to update the status bar and save the setting  If the setting being configured is global, it must be placed
               in global_settings before updating the status bar for the
               change to show upon exiting the item.  update settings dependent upon encoder settings  have to sync other settings when encoder settings change  rec_channels  no zero check needed: encoder must support at least one
       sample rate that recording supports or it shouldn't be in
       available in the recording options  rec_frequency  enc_rec_settings_changed * public stuff * global_to_encoder_config  encoder_config_to_global  get_caps expects caps to be zeroed first  If no function provided...defaults to all  enc_get_caps  Initializes the config struct with default values  enc_init_config * Encoder Menus * enc_config_menu * Global Settings * Reset all codecs to defaults  enc_global_settings_reset  Apply new settings  enc_global_settings_apply  Show an encoder's config menu based on the global_settings.
   Modified settings are placed in global_settings.enc_config.  enc_global_config_menu **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** this is used by all encoder menu items,
   MUST be initialised before the call to do_menu() * Function definitions for each codec - add these to enc_data
    list following the definitions ** aiff_enc.codec ** mp3_enc.codec * mp3_enc: return encoder capabilities  Overall encoder capabilities  Restrict caps based on config  sample rate caps  check if MPEG1 sample rates are available  check if MPEG2 sample rates and mono are available  check if stereo is available  mp3_enc_get_caps  mp3_enc: return the default configuration  default that works for all types  mp3_enc_default_config  mp3_enc_convert_config  mp3_enc: show the bitrate setting options  Available in MPEG Version:  this sounds awful no matter what    2  mono only    2    2  HAVE_MPEG2_SAMPR  stereo/mono  1,2  1,2  1,2  1,2  1,2  1,2  1,2  1,2  1,2  Leave out 144 when there is both MPEG 1 and 2   oddball MPEG2-only rate stuck in the middle    2  1,2  stereo only  1    1    1    1    This is rather constant based upon the build but better than
       storing and maintaining yet another list of numbers  HAVE_MPEG2_SAMPR  mp3_enc_bitrate  mp3_enc configuration menu * wav_enc.codec * wav_enc: show the configuration menu * wavpack_enc.codec * wavpack_enc: show the configuration menu * config function pointers and/or data for each codec * aiff_enc.codec  mp3_enc.codec  wav_enc.codec  wavpack_enc.codec  This is called before entering the menu with the encoder settings
   Its needed to make sure the settings can take effect.  this struct must be init'ed before calling do_menu() so this is safe  entering the item  this is called when a encoder setting is exited
   It is used to update the status bar and save the setting  If the setting being configured is global, it must be placed
               in global_settings before updating the status bar for the
               change to show upon exiting the item.  update settings dependent upon encoder settings  have to sync other settings when encoder settings change  rec_channels  no zero check needed: encoder must support at least one
       sample rate that recording supports or it shouldn't be in
       available in the recording options  rec_frequency  enc_rec_settings_changed * public stuff * global_to_encoder_config  encoder_config_to_global  get_caps expects caps to be zeroed first  If no function provided...defaults to all  enc_get_caps  Initializes the config struct with default values  enc_init_config * Encoder Menus * enc_config_menu * Global Settings * Reset all codecs to defaults  enc_global_settings_reset  Apply new settings  enc_global_settings_apply  Show an encoder's config menu based on the global_settings.
   Modified settings are placed in global_settings.enc_config.  enc_global_config_menu 