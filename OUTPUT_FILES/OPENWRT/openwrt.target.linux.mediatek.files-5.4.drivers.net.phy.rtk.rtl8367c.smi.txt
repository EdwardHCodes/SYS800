
 * Copyright (C) 2013 Realtek Semiconductor Corp.
 * All Rights Reserved.
 *
 * Unless you and Realtek execute a separate written software license
 * agreement governing use of this software, this software is licensed
 * to you under the terms of the GNU General Public License version 2,
 * available at https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt
 *
 * Purpose : RTL8367C switch low-level function for access register
 * Feature : SMI related functions
 *
 *****************************************************************************  MDC/MDIO porting                                                           ***************************************************************************** define the PHY ID currently used  carlos  PHY ID 0 or 29  PHY ID 0 or 29  MDC/MDIO, redefine/implement the following Macro carlos*****************************************************************************  SPI porting                                                                ***************************************************************************** SPI, redefine/implement the following Macro *****************************************************************************  I2C porting                                                                ***************************************************************************** Define the GPIO ID for SCK & SDA  GPIO used for SMI Clock Generation  GPIO used for SMI Data signal  I2C, redefine/implement the following Macro  It is empty currently. Implement this function if Lock/Unlock function is needed  It is empty currently. Implement this function if Lock/Unlock function is needed  No local function in MDC/MDIO & SPI mode  change GPIO pin to Output only  Initial state: SCK: 0, SDA: 1  CLK 1: 0 -> 1, 1 -> 0  CLK 2:  prepare data  clocking  change GPIO pin to Input only  clocking  change GPIO pin to Output only  add a click  change GPIO pin to Input only  End of #if defined(MDC_MDIO_OPERATION) || defined(SPI_OPERATION)  Lock  Write address control code to register 31  Write address to register 23  Write read control code to register 21  Read data from register 25  Unlock  Lock  Write 8 bits READ OP_CODE  Write 16 bits register address  Read 16 bits data  Unlock Disable CPU interrupt to ensure that the SMI operation is atomic.
      The API is based on RTL865X, rewrite the API if porting to other platform. Start SMI  CTRL code: 4'b1011 for RTL8370  CTRL code: 3'b100  1: issue READ command  ACK for issuing READ command Set reg_addr[7:0]  ACK for setting reg_addr[7:0]  Set reg_addr[15:8]  ACK by RTL8369  Read DATA [7:0]  ACK by CPU  Read DATA [15: 8]  ACK by CPU enable CPU interrupt end of #if defined(MDC_MDIO_OPERATION)  Lock  Write address control code to register 31  Write address to register 23  Write data to register 24  Write data control code to register 21  Unlock  Lock  Write 8 bits WRITE OP_CODE  Write 16 bits register address  Write 16 bits data  Unlock Disable CPU interrupt to ensure that the SMI operation is atomic.
      The API is based on RTL865X, rewrite the API if porting to other platform. Start SMI  CTRL code: 4'b1011 for RTL8370 CTRL code: 3'b100  0: issue WRITE command  ACK for issuing WRITE command Set reg_addr[7:0]  ACK for setting reg_addr[7:0]  Set reg_addr[15:8]  ACK for setting reg_addr[15:8]  Write Data [7:0] out  ACK for writting data [7:0]  Write Data [15:8] out  ACK for writting data [15:8] enable CPU interrupt end of #if defined(MDC_MDIO_OPERATION) 
 * Copyright (C) 2013 Realtek Semiconductor Corp.
 * All Rights Reserved.
 *
 * Unless you and Realtek execute a separate written software license
 * agreement governing use of this software, this software is licensed
 * to you under the terms of the GNU General Public License version 2,
 * available at https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt
 *
 * Purpose : RTL8367C switch low-level function for access register
 * Feature : SMI related functions
 *
 *****************************************************************************  MDC/MDIO porting                                                           ***************************************************************************** define the PHY ID currently used  carlos  PHY ID 0 or 29  PHY ID 0 or 29  MDC/MDIO, redefine/implement the following Macro carlos*****************************************************************************  SPI porting                                                                ***************************************************************************** SPI, redefine/implement the following Macro *****************************************************************************  I2C porting                                                                ***************************************************************************** Define the GPIO ID for SCK & SDA  GPIO used for SMI Clock Generation  GPIO used for SMI Data signal  I2C, redefine/implement the following Macro  It is empty currently. Implement this function if Lock/Unlock function is needed  It is empty currently. Implement this function if Lock/Unlock function is needed  No local function in MDC/MDIO & SPI mode  change GPIO pin to Output only  Initial state: SCK: 0, SDA: 1  CLK 1: 0 -> 1, 1 -> 0  CLK 2:  prepare data  clocking  change GPIO pin to Input only  clocking  change GPIO pin to Output only  add a click  change GPIO pin to Input only  End of #if defined(MDC_MDIO_OPERATION) || defined(SPI_OPERATION)  Lock  Write address control code to register 31  Write address to register 23  Write read control code to register 21  Read data from register 25  Unlock  Lock  Write 8 bits READ OP_CODE  Write 16 bits register address  Read 16 bits data  Unlock Disable CPU interrupt to ensure that the SMI operation is atomic.
      The API is based on RTL865X, rewrite the API if porting to other platform. Start SMI  CTRL code: 4'b1011 for RTL8370  CTRL code: 3'b100  1: issue READ command  ACK for issuing READ command Set reg_addr[7:0]  ACK for setting reg_addr[7:0]  Set reg_addr[15:8]  ACK by RTL8369  Read DATA [7:0]  ACK by CPU  Read DATA [15: 8]  ACK by CPU enable CPU interrupt end of #if defined(MDC_MDIO_OPERATION)  Lock  Write address control code to register 31  Write address to register 23  Write data to register 24  Write data control code to register 21  Unlock  Lock  Write 8 bits WRITE OP_CODE  Write 16 bits register address  Write 16 bits data  Unlock Disable CPU interrupt to ensure that the SMI operation is atomic.
      The API is based on RTL865X, rewrite the API if porting to other platform. Start SMI  CTRL code: 4'b1011 for RTL8370 CTRL code: 3'b100  0: issue WRITE command  ACK for issuing WRITE command Set reg_addr[7:0]  ACK for setting reg_addr[7:0]  Set reg_addr[15:8]  ACK for setting reg_addr[15:8]  Write Data [7:0] out  ACK for writting data [7:0]  Write Data [15:8] out  ACK for writting data [15:8] enable CPU interrupt end of #if defined(MDC_MDIO_OPERATION) 