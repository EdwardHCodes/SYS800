**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 by Marcin Bukat
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************  Driver for the rockchip rk27xx built-in I2C controller in master mode
    
    Both the i2c_read and i2c_write function take the following arguments:
    * slave, the address of the i2c slave device to read from / write to
    * address, optional sub-address in the i2c slave (unused if -1)
    * len, number of bytes to be transfered
    * data, pointer to data to be transfered
    A return value other than 0 indicates an error.
 NACK  resume op, stop  master port enable, MTX mode, ACK enable  resume op, start bit  resume op  wait for ACK from slave  clear status bit  resume op  clear status bit  route i2c bus to internal codec or external bus
 * internal codec has 0x4e i2c slave address so
 * access to this address is routed to internal bus.
 * All other addresses are routed to external pads
  internal codec  external I2C bus  ungate i2c module clock  reset state machine  clear ENABLE bit, deasert reset  set I2C divider to stay within allowed SCL freq limit
     * APBfreq = 50Mhz
     * I2C_div = (I2CCDVR[5:3] + 1) * 2^((I2CCDVR[2:0] + 1))
     * SCLfreq = APBfreq/(5*I2C_div)
     *
     * (5<<3) | (1<<0)    416.7 KHz (above spec)
     * (6<<3) | (1<<0)    357.1 kHz
     * (7<<3) | (1<<0)    312.4 kHz
     * (6<<3) | (2<<0)    178.6 kHz
     * (7<<3) | (2<<0)    156.3 kHz
      enable i2c core  turn off i2c module clock until we need to comunicate  ungate i2c clock  clear all flags  START  write data  STOP  ungate i2c module clock  clear all flags  START  write address  (repeated) START  master port enable, MRX mode, ACK enable  NACK  ACK  STOP **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 by Marcin Bukat
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************  Driver for the rockchip rk27xx built-in I2C controller in master mode
    
    Both the i2c_read and i2c_write function take the following arguments:
    * slave, the address of the i2c slave device to read from / write to
    * address, optional sub-address in the i2c slave (unused if -1)
    * len, number of bytes to be transfered
    * data, pointer to data to be transfered
    A return value other than 0 indicates an error.
 NACK  resume op, stop  master port enable, MTX mode, ACK enable  resume op, start bit  resume op  wait for ACK from slave  clear status bit  resume op  clear status bit  route i2c bus to internal codec or external bus
 * internal codec has 0x4e i2c slave address so
 * access to this address is routed to internal bus.
 * All other addresses are routed to external pads
  internal codec  external I2C bus  ungate i2c module clock  reset state machine  clear ENABLE bit, deasert reset  set I2C divider to stay within allowed SCL freq limit
     * APBfreq = 50Mhz
     * I2C_div = (I2CCDVR[5:3] + 1) * 2^((I2CCDVR[2:0] + 1))
     * SCLfreq = APBfreq/(5*I2C_div)
     *
     * (5<<3) | (1<<0)    416.7 KHz (above spec)
     * (6<<3) | (1<<0)    357.1 kHz
     * (7<<3) | (1<<0)    312.4 kHz
     * (6<<3) | (2<<0)    178.6 kHz
     * (7<<3) | (2<<0)    156.3 kHz
      enable i2c core  turn off i2c module clock until we need to comunicate  ungate i2c clock  clear all flags  START  write data  STOP  ungate i2c module clock  clear all flags  START  write address  (repeated) START  master port enable, MRX mode, ACK enable  NACK  ACK  STOP **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 by Marcin Bukat
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************  Driver for the rockchip rk27xx built-in I2C controller in master mode
    
    Both the i2c_read and i2c_write function take the following arguments:
    * slave, the address of the i2c slave device to read from / write to
    * address, optional sub-address in the i2c slave (unused if -1)
    * len, number of bytes to be transfered
    * data, pointer to data to be transfered
    A return value other than 0 indicates an error.
 NACK  resume op, stop  master port enable, MTX mode, ACK enable  resume op, start bit  resume op  wait for ACK from slave  clear status bit  resume op  clear status bit  route i2c bus to internal codec or external bus
 * internal codec has 0x4e i2c slave address so
 * access to this address is routed to internal bus.
 * All other addresses are routed to external pads
  internal codec  external I2C bus  ungate i2c module clock  reset state machine  clear ENABLE bit, deasert reset  set I2C divider to stay within allowed SCL freq limit
     * APBfreq = 50Mhz
     * I2C_div = (I2CCDVR[5:3] + 1) * 2^((I2CCDVR[2:0] + 1))
     * SCLfreq = APBfreq/(5*I2C_div)
     *
     * (5<<3) | (1<<0)    416.7 KHz (above spec)
     * (6<<3) | (1<<0)    357.1 kHz
     * (7<<3) | (1<<0)    312.4 kHz
     * (6<<3) | (2<<0)    178.6 kHz
     * (7<<3) | (2<<0)    156.3 kHz
      enable i2c core  turn off i2c module clock until we need to comunicate  ungate i2c clock  clear all flags  START  write data  STOP  ungate i2c module clock  clear all flags  START  write address  (repeated) START  master port enable, MRX mode, ACK enable  NACK  ACK  STOP 