**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** DMA * NOTE: The order of size and p is important if you use assembler
   optimised fiq handler, so don't change it.  For packed 16-16 stereo pairs  For individual samples converted to 32-bit  Dispatch to the proper handler and leave the main vector table alone  TODO: Get simultaneous recording and playback to work. Just needs some tweaking ***************************************************************************
 ** Playback DMA transfer
 * Initialize to a locked, stopped state  16-bit, L-R packed into 32 bits with left in the least significant halfword  DMA Requests from IIS, Memory to peripheral, single transfer,
   wait for DMA request, interrupt on complete  DMA status cannot be viewed from outside code in control because that can
 * clear the interrupt from outside the handler and prevent the handler from
 * from being called. Split up transfers to a reasonable size that is good as
 * a timer and peaking yet still keeps the FIQ count low.
  ~1/256 seconds  Enable DMA controller  FIQ priority for DMA  Enable request?? Not setting or clearing everything doesn't seem to
     * prevent it operating. Perhaps important for reliability (how requests
     * are handled).  Setup DMA controller  VA in DRAM - writeback all data and get PA  Not at least MAX_DMA_CHUNK_SIZE left or there would be less
     * than a FIFO's worth of data after this transfer?  Set the new DMA values and activate channel  Snapshot- resume from this point  Stop transfer  Wait for not busy + clear int  Transfer was interrupted - leave what's left  Transfer was finished - DMA0_STATUS will have been reloaded
         * automatically with size in DMA0_CMD. Setup to restart on next
         * segment.  else not an active state - size = 0  Entire buffer has completed.  NOTE: direct stack use forbidden by GCC stack handling bug for FIQ  Clear any pending interrupt  Get size of trasfer that caused
                                              this interrupt  Begin next segment  !defined (CPU_PP502x)  32-bit, one left 32-bit sample followed by one right 32-bit sample  Set up banked registers for FIQ mode  Use non-banked registers for scratch.  Save mode and interrupt status  Switch to FIQ mode  FIQ priority for I2S  Nothing to do  Stop transmitting  Fill the FIFO or start when data is used up  Start transmitting  Disable TX interrupt  ASM optimised FIQ handler. Checks for the minimum allowed loop cycles by
 * evalutation of free IISFIFO-slots against available source buffer words.
 * Through this it is possible to move the check for IIS_TX_FREE_COUNT outside
 * the loop and do some further optimization. Right after the loops (source
 * buffer -> IISFIFO) are done we need to check whether we have to exit FIQ
 * handler (this must be done, if all free FIFO slots were filled) or we will
 * have to get some new source data. Important information kept from former
 * ASM implementation (not used anymore): GCC fails to make use of the fact
 * that FIQ mode has registers r8-r14 banked, and so does not need to be saved.
 * This routine uses only these registers, and so will never touch the stack
 * unless it actually needs to do so when calling pcm_play_dma_complete_callback.
 * C version is still included below for reference and testing.
  r8 and r9 contains local copies of p and size respectively.
     * r10 contains IISCONFIG address (set during PCM init to minimize code in
     * FIQ handler.Most other addresses we need are generated by using offsets
     * from this.
     * r10 + 0x40 is IISFIFO_WR, and r10 + 0x1c is IISFIFO_CFG.
     * r11 contains address of dma_play_data
     * r12 and r14 are working registers.
     *
     * Divided into two blocks: one where no external calls are needed and
     * one where external callbacks are made
      No external calls  Prepare return address  stack lr so we can use it  Some magic from iPodLinux ...  ... actually a DMA INT ack?  r8 = p, r9 = size  is size 0?  if so, ask PCM for more data  read IISFIFO_CFG to check FIFO status  r14 = (IIS_TX_FREE_COUNT & ~1) << 23  number of words from source  r14 = amount of allowed loops  r14 words will be written in loop  load left-right pair  one more loop? ...  left sample to IISFIFO_WR  put right sample in bottom 16 bits  right sample to IISFIFO_WR  ... yes, continue  either FIFO full or size empty?  save p and size, if not empty  RFE if not empty  Making external calls  Must save volatiles  r0 = status  r1 = &dma_play_data.p_r  r2 = &dma_play_data.size  long call (not in same section)  more data?  no? -> exit  read IISFIFO_CFG to check FIFO status  r14 = (IIS_TX_FREE_COUNT & ~1) << 23  inform of started status if registered  exit  load new p and size  number of words from source  r14 = amount of allowed loops  r14 words will be written in loop  load left-right pair  one more loop? ...  left sample to IISFIFO_WR  put right sample in bottom 16 bits  right sample to IISFIFO_WR  ... yes, continue  save p and size  used up data in FIFO fill?  no? -> go return  yes -> get even more  These must only be integers! No regs  C version for reference  NOTE: direct stack use forbidden by GCC stack handling bug for FIQ  Still more data  ASM / C selection  CPU_PP502x  For the locks, FIQ must be disabled because the handler manipulates
   IISCONFIG and the operation is not atomic - dual core support
   will require other measures  Wait for FIFO to empty  This will become more important later - and different !  save initiating core  Stops the DMA transfer and interrupt  no core in control  Initialize default register values. ***************************************************************************
 ** Recording DMA transfer
 * PCM recording interrupt routine lockout  Initialize to a locked, stopped state  For the locks, FIQ must be disabled because the handler manipulates
   IISCONFIG and the operation is not atomic - dual core support
   will require other measures  NOTE: direct stack use forbidden by GCC stack handling bug for FIQ  RX is stereo  Discard every other sample since ADC clock is 1/2 LRCK  TODO: Figure out how to do IIS loopback  Resync the output FIFO - it ran dry  RX is left channel mono  Discard every other sample since ADC clock is 1/2 LRCK  Resync the output FIFO - it ran dry  !(SANSA_C200 || SANSA_E200)  SANSA_C200 || SANSA_E200  disable interrupt  disable fifo  This will become more important later - and different !  save initiating core  setup FIQ handler  interrupt on full fifo, enable record fifo interrupt  enable RX FIFO  enable IIS interrupt as FIQ  pcm_close_recording  pcm_init  pcm_rec_dma_get_peak_buffer  HAVE_RECORDING **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** DMA * NOTE: The order of size and p is important if you use assembler
   optimised fiq handler, so don't change it.  For packed 16-16 stereo pairs  For individual samples converted to 32-bit  Dispatch to the proper handler and leave the main vector table alone  TODO: Get simultaneous recording and playback to work. Just needs some tweaking ***************************************************************************
 ** Playback DMA transfer
 * Initialize to a locked, stopped state  16-bit, L-R packed into 32 bits with left in the least significant halfword  DMA Requests from IIS, Memory to peripheral, single transfer,
   wait for DMA request, interrupt on complete  DMA status cannot be viewed from outside code in control because that can
 * clear the interrupt from outside the handler and prevent the handler from
 * from being called. Split up transfers to a reasonable size that is good as
 * a timer and peaking yet still keeps the FIQ count low.
  ~1/256 seconds  Enable DMA controller  FIQ priority for DMA  Enable request?? Not setting or clearing everything doesn't seem to
     * prevent it operating. Perhaps important for reliability (how requests
     * are handled).  Setup DMA controller  VA in DRAM - writeback all data and get PA  Not at least MAX_DMA_CHUNK_SIZE left or there would be less
     * than a FIFO's worth of data after this transfer?  Set the new DMA values and activate channel  Snapshot- resume from this point  Stop transfer  Wait for not busy + clear int  Transfer was interrupted - leave what's left  Transfer was finished - DMA0_STATUS will have been reloaded
         * automatically with size in DMA0_CMD. Setup to restart on next
         * segment.  else not an active state - size = 0  Entire buffer has completed.  NOTE: direct stack use forbidden by GCC stack handling bug for FIQ  Clear any pending interrupt  Get size of trasfer that caused
                                              this interrupt  Begin next segment  !defined (CPU_PP502x)  32-bit, one left 32-bit sample followed by one right 32-bit sample  Set up banked registers for FIQ mode  Use non-banked registers for scratch.  Save mode and interrupt status  Switch to FIQ mode  FIQ priority for I2S  Nothing to do  Stop transmitting  Fill the FIFO or start when data is used up  Start transmitting  Disable TX interrupt  ASM optimised FIQ handler. Checks for the minimum allowed loop cycles by
 * evalutation of free IISFIFO-slots against available source buffer words.
 * Through this it is possible to move the check for IIS_TX_FREE_COUNT outside
 * the loop and do some further optimization. Right after the loops (source
 * buffer -> IISFIFO) are done we need to check whether we have to exit FIQ
 * handler (this must be done, if all free FIFO slots were filled) or we will
 * have to get some new source data. Important information kept from former
 * ASM implementation (not used anymore): GCC fails to make use of the fact
 * that FIQ mode has registers r8-r14 banked, and so does not need to be saved.
 * This routine uses only these registers, and so will never touch the stack
 * unless it actually needs to do so when calling pcm_play_dma_complete_callback.
 * C version is still included below for reference and testing.
  r8 and r9 contains local copies of p and size respectively.
     * r10 contains IISCONFIG address (set during PCM init to minimize code in
     * FIQ handler.Most other addresses we need are generated by using offsets
     * from this.
     * r10 + 0x40 is IISFIFO_WR, and r10 + 0x1c is IISFIFO_CFG.
     * r11 contains address of dma_play_data
     * r12 and r14 are working registers.
     *
     * Divided into two blocks: one where no external calls are needed and
     * one where external callbacks are made
      No external calls  Prepare return address  stack lr so we can use it  Some magic from iPodLinux ...  ... actually a DMA INT ack?  r8 = p, r9 = size  is size 0?  if so, ask PCM for more data  read IISFIFO_CFG to check FIFO status  r14 = (IIS_TX_FREE_COUNT & ~1) << 23  number of words from source  r14 = amount of allowed loops  r14 words will be written in loop  load left-right pair  one more loop? ...  left sample to IISFIFO_WR  put right sample in bottom 16 bits  right sample to IISFIFO_WR  ... yes, continue  either FIFO full or size empty?  save p and size, if not empty  RFE if not empty  Making external calls  Must save volatiles  r0 = status  r1 = &dma_play_data.p_r  r2 = &dma_play_data.size  long call (not in same section)  more data?  no? -> exit  read IISFIFO_CFG to check FIFO status  r14 = (IIS_TX_FREE_COUNT & ~1) << 23  inform of started status if registered  exit  load new p and size  number of words from source  r14 = amount of allowed loops  r14 words will be written in loop  load left-right pair  one more loop? ...  left sample to IISFIFO_WR  put right sample in bottom 16 bits  right sample to IISFIFO_WR  ... yes, continue  save p and size  used up data in FIFO fill?  no? -> go return  yes -> get even more  These must only be integers! No regs  C version for reference  NOTE: direct stack use forbidden by GCC stack handling bug for FIQ  Still more data  ASM / C selection  CPU_PP502x  For the locks, FIQ must be disabled because the handler manipulates
   IISCONFIG and the operation is not atomic - dual core support
   will require other measures  Wait for FIFO to empty  This will become more important later - and different !  save initiating core  Stops the DMA transfer and interrupt  no core in control  Initialize default register values. ***************************************************************************
 ** Recording DMA transfer
 * PCM recording interrupt routine lockout  Initialize to a locked, stopped state  For the locks, FIQ must be disabled because the handler manipulates
   IISCONFIG and the operation is not atomic - dual core support
   will require other measures  NOTE: direct stack use forbidden by GCC stack handling bug for FIQ  RX is stereo  Discard every other sample since ADC clock is 1/2 LRCK  TODO: Figure out how to do IIS loopback  Resync the output FIFO - it ran dry  RX is left channel mono  Discard every other sample since ADC clock is 1/2 LRCK  Resync the output FIFO - it ran dry  !(SANSA_C200 || SANSA_E200)  SANSA_C200 || SANSA_E200  disable interrupt  disable fifo  This will become more important later - and different !  save initiating core  setup FIQ handler  interrupt on full fifo, enable record fifo interrupt  enable RX FIFO  enable IIS interrupt as FIQ  pcm_close_recording  pcm_init  pcm_rec_dma_get_peak_buffer  HAVE_RECORDING **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** DMA * NOTE: The order of size and p is important if you use assembler
   optimised fiq handler, so don't change it.  For packed 16-16 stereo pairs  For individual samples converted to 32-bit  Dispatch to the proper handler and leave the main vector table alone  TODO: Get simultaneous recording and playback to work. Just needs some tweaking ***************************************************************************
 ** Playback DMA transfer
 * Initialize to a locked, stopped state  16-bit, L-R packed into 32 bits with left in the least significant halfword  DMA Requests from IIS, Memory to peripheral, single transfer,
   wait for DMA request, interrupt on complete  DMA status cannot be viewed from outside code in control because that can
 * clear the interrupt from outside the handler and prevent the handler from
 * from being called. Split up transfers to a reasonable size that is good as
 * a timer and peaking yet still keeps the FIQ count low.
  ~1/256 seconds  Enable DMA controller  FIQ priority for DMA  Enable request?? Not setting or clearing everything doesn't seem to
     * prevent it operating. Perhaps important for reliability (how requests
     * are handled).  Setup DMA controller  VA in DRAM - writeback all data and get PA  Not at least MAX_DMA_CHUNK_SIZE left or there would be less
     * than a FIFO's worth of data after this transfer?  Set the new DMA values and activate channel  Snapshot- resume from this point  Stop transfer  Wait for not busy + clear int  Transfer was interrupted - leave what's left  Transfer was finished - DMA0_STATUS will have been reloaded
         * automatically with size in DMA0_CMD. Setup to restart on next
         * segment.  else not an active state - size = 0  Entire buffer has completed.  NOTE: direct stack use forbidden by GCC stack handling bug for FIQ  Clear any pending interrupt  Get size of trasfer that caused
                                              this interrupt  Begin next segment  !defined (CPU_PP502x)  32-bit, one left 32-bit sample followed by one right 32-bit sample  Set up banked registers for FIQ mode  Use non-banked registers for scratch.  Save mode and interrupt status  Switch to FIQ mode  FIQ priority for I2S  Nothing to do  Stop transmitting  Fill the FIFO or start when data is used up  Start transmitting  Disable TX interrupt  ASM optimised FIQ handler. Checks for the minimum allowed loop cycles by
 * evalutation of free IISFIFO-slots against available source buffer words.
 * Through this it is possible to move the check for IIS_TX_FREE_COUNT outside
 * the loop and do some further optimization. Right after the loops (source
 * buffer -> IISFIFO) are done we need to check whether we have to exit FIQ
 * handler (this must be done, if all free FIFO slots were filled) or we will
 * have to get some new source data. Important information kept from former
 * ASM implementation (not used anymore): GCC fails to make use of the fact
 * that FIQ mode has registers r8-r14 banked, and so does not need to be saved.
 * This routine uses only these registers, and so will never touch the stack
 * unless it actually needs to do so when calling pcm_play_dma_complete_callback.
 * C version is still included below for reference and testing.
  r8 and r9 contains local copies of p and size respectively.
     * r10 contains IISCONFIG address (set during PCM init to minimize code in
     * FIQ handler.Most other addresses we need are generated by using offsets
     * from this.
     * r10 + 0x40 is IISFIFO_WR, and r10 + 0x1c is IISFIFO_CFG.
     * r11 contains address of dma_play_data
     * r12 and r14 are working registers.
     *
     * Divided into two blocks: one where no external calls are needed and
     * one where external callbacks are made
      No external calls  Prepare return address  stack lr so we can use it  Some magic from iPodLinux ...  ... actually a DMA INT ack?  r8 = p, r9 = size  is size 0?  if so, ask PCM for more data  read IISFIFO_CFG to check FIFO status  r14 = (IIS_TX_FREE_COUNT & ~1) << 23  number of words from source  r14 = amount of allowed loops  r14 words will be written in loop  load left-right pair  one more loop? ...  left sample to IISFIFO_WR  put right sample in bottom 16 bits  right sample to IISFIFO_WR  ... yes, continue  either FIFO full or size empty?  save p and size, if not empty  RFE if not empty  Making external calls  Must save volatiles  r0 = status  r1 = &dma_play_data.p_r  r2 = &dma_play_data.size  long call (not in same section)  more data?  no? -> exit  read IISFIFO_CFG to check FIFO status  r14 = (IIS_TX_FREE_COUNT & ~1) << 23  inform of started status if registered  exit  load new p and size  number of words from source  r14 = amount of allowed loops  r14 words will be written in loop  load left-right pair  one more loop? ...  left sample to IISFIFO_WR  put right sample in bottom 16 bits  right sample to IISFIFO_WR  ... yes, continue  save p and size  used up data in FIFO fill?  no? -> go return  yes -> get even more  These must only be integers! No regs  C version for reference  NOTE: direct stack use forbidden by GCC stack handling bug for FIQ  Still more data  ASM / C selection  CPU_PP502x  For the locks, FIQ must be disabled because the handler manipulates
   IISCONFIG and the operation is not atomic - dual core support
   will require other measures  Wait for FIFO to empty  This will become more important later - and different !  save initiating core  Stops the DMA transfer and interrupt  no core in control  Initialize default register values. ***************************************************************************
 ** Recording DMA transfer
 * PCM recording interrupt routine lockout  Initialize to a locked, stopped state  For the locks, FIQ must be disabled because the handler manipulates
   IISCONFIG and the operation is not atomic - dual core support
   will require other measures  NOTE: direct stack use forbidden by GCC stack handling bug for FIQ  RX is stereo  Discard every other sample since ADC clock is 1/2 LRCK  TODO: Figure out how to do IIS loopback  Resync the output FIFO - it ran dry  RX is left channel mono  Discard every other sample since ADC clock is 1/2 LRCK  Resync the output FIFO - it ran dry  !(SANSA_C200 || SANSA_E200)  SANSA_C200 || SANSA_E200  disable interrupt  disable fifo  This will become more important later - and different !  save initiating core  setup FIQ handler  interrupt on full fifo, enable record fifo interrupt  enable RX FIFO  enable IIS interrupt as FIQ  pcm_close_recording  pcm_init  pcm_rec_dma_get_peak_buffer  HAVE_RECORDING 