*
         * @return metadata descriptor for the application. Cannot return null.
         *
         * @return javafx.scene.Parent or null for headless application.
         *
         * Activate the component. It is assumed that the all heavy lifting had already been done by the
         * factory that created the component and activation should be a relatively low cost anf fast operations.
         * Note, that while there is no requirement for this API to be idempotent, activate/stop loop should be reiterant.
         * @param context spring context with "global" beans that are can be used by this component.
         *
         * Temporary passivate the component. The component is "put on ice" with the potential restart request to follow.
         * No expensive resources are excepted to be freed at this point.
         *
         * Destructor for the application. resources should be freed, state cleared. app is not expected
         * to be functional once it had been destroyed.
         *
     * Meta-data for the participating application. Includes rudimentary name, id, avatar to be used in the directory listing.
     *
         * @return unique id for this instance.
         *
         * @return human-readable name to be used on the title pane of the enclosing container and in debug messages.
         *
         * @return metadata descriptor for the application. Cannot return null.
         *
         * @return javafx.scene.Parent or null for headless application.
         *
         * Activate the component. It is assumed that the all heavy lifting had already been done by the
         * factory that created the component and activation should be a relatively low cost anf fast operations.
         * Note, that while there is no requirement for this API to be idempotent, activate/stop loop should be reiterant.
         * @param context spring context with "global" beans that are can be used by this component.
         *
         * Temporary passivate the component. The component is "put on ice" with the potential restart request to follow.
         * No expensive resources are excepted to be freed at this point.
         *
         * Destructor for the application. resources should be freed, state cleared. app is not expected
         * to be functional once it had been destroyed.
         *
     * Meta-data for the participating application. Includes rudimentary name, id, avatar to be used in the directory listing.
     *
         * @return unique id for this instance.
         *
         * @return human-readable name to be used on the title pane of the enclosing container and in debug messages.
         *
         * @return metadata descriptor for the application. Cannot return null.
         *
         * @return javafx.scene.Parent or null for headless application.
         *
         * Activate the component. It is assumed that the all heavy lifting had already been done by the
         * factory that created the component and activation should be a relatively low cost anf fast operations.
         * Note, that while there is no requirement for this API to be idempotent, activate/stop loop should be reiterant.
         * @param context spring context with "global" beans that are can be used by this component.
         *
         * Temporary passivate the component. The component is "put on ice" with the potential restart request to follow.
         * No expensive resources are excepted to be freed at this point.
         *
         * Destructor for the application. resources should be freed, state cleared. app is not expected
         * to be functional once it had been destroyed.
         *
     * Meta-data for the participating application. Includes rudimentary name, id, avatar to be used in the directory listing.
     *
         * @return unique id for this instance.
         *
         * @return human-readable name to be used on the title pane of the enclosing container and in debug messages.
         *
         * @return metadata descriptor for the application. Cannot return null.
         *
         * @return javafx.scene.Parent or null for headless application.
         *
         * Activate the component. It is assumed that the all heavy lifting had already been done by the
         * factory that created the component and activation should be a relatively low cost anf fast operations.
         * Note, that while there is no requirement for this API to be idempotent, activate/stop loop should be reiterant.
         * @param context spring context with "global" beans that are can be used by this component.
         *
         * Temporary passivate the component. The component is "put on ice" with the potential restart request to follow.
         * No expensive resources are excepted to be freed at this point.
         *
         * Destructor for the application. resources should be freed, state cleared. app is not expected
         * to be functional once it had been destroyed.
         *
     * Meta-data for the participating application. Includes rudimentary name, id, avatar to be used in the directory listing.
     *
         * @return unique id for this instance.
         *
         * @return human-readable name to be used on the title pane of the enclosing container and in debug messages.
         *
         * @return metadata descriptor for the application. Cannot return null.
         *
         * @return javafx.scene.Parent or null for headless application.
         *
         * Activate the component. It is assumed that the all heavy lifting had already been done by the
         * factory that created the component and activation should be a relatively low cost anf fast operations.
         * Note, that while there is no requirement for this API to be idempotent, activate/stop loop should be reiterant.
         * @param context spring context with "global" beans that are can be used by this component.
         *
         * Temporary passivate the component. The component is "put on ice" with the potential restart request to follow.
         * No expensive resources are excepted to be freed at this point.
         *
         * Destructor for the application. resources should be freed, state cleared. app is not expected
         * to be functional once it had been destroyed.
         *
     * Meta-data for the participating application. Includes rudimentary name, id, avatar to be used in the directory listing.
     *
         * @return unique id for this instance.
         *
         * @return human-readable name to be used on the title pane of the enclosing container and in debug messages.
         *
         * @return metadata descriptor for the application. Cannot return null.
         *
         * @return javafx.scene.Parent or null for headless application.
         *
         * Activate the component. It is assumed that the all heavy lifting had already been done by the
         * factory that created the component and activation should be a relatively low cost anf fast operations.
         * Note, that while there is no requirement for this API to be idempotent, activate/stop loop should be reiterant.
         * @param context spring context with "global" beans that are can be used by this component.
         *
         * Temporary passivate the component. The component is "put on ice" with the potential restart request to follow.
         * No expensive resources are excepted to be freed at this point.
         *
         * Destructor for the application. resources should be freed, state cleared. app is not expected
         * to be functional once it had been destroyed.
         *
     * Meta-data for the participating application. Includes rudimentary name, id, avatar to be used in the directory listing.
     *
         * @return unique id for this instance.
         *
         * @return human-readable name to be used on the title pane of the enclosing container and in debug messages.
         *
         * @return metadata descriptor for the application. Cannot return null.
         *
         * @return javafx.scene.Parent or null for headless application.
         *
         * Activate the component. It is assumed that the all heavy lifting had already been done by the
         * factory that created the component and activation should be a relatively low cost anf fast operations.
         * Note, that while there is no requirement for this API to be idempotent, activate/stop loop should be reiterant.
         * @param context spring context with "global" beans that are can be used by this component.
         *
         * Temporary passivate the component. The component is "put on ice" with the potential restart request to follow.
         * No expensive resources are excepted to be freed at this point.
         *
         * Destructor for the application. resources should be freed, state cleared. app is not expected
         * to be functional once it had been destroyed.
         *
     * Meta-data for the participating application. Includes rudimentary name, id, avatar to be used in the directory listing.
     *
         * @return unique id for this instance.
         *
         * @return human-readable name to be used on the title pane of the enclosing container and in debug messages.
         