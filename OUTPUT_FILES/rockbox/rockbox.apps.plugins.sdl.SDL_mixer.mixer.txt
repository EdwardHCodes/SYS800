
  SDL_mixer:  An audio mixer library based on the SDL library
  Copyright (C) 1997-2012 Sam Lantinga <slouken@libsdl.org>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
 $Id$  Magic numbers for various audio file formats  "RIFF"  "WAVE"  "FORM"  "OggS"  "Crea"  "fLaC"  Support for hooking into the mixer callback system  rcg07062001 callback to alert when channels are done playing.  Music function declarations  Support for user defined music functions, plus the default one  rcg06042009 report available decoders at runtime.  Semicolon-separated SoundFont paths  oh well, go on without it.  rcg06192001 get linked library's version. 
 * rcg06122001 Cleanup effect callbacks.
 *  MAKE SURE SDL_LockAudio() is called before this (or you're in the
 *   audio callback).
 
	 * Call internal function directly, to avoid locking audio from
	 *   inside audio callback.
	  are there any registered effects?  if this is the postmix, we can just overwrite the original.  be sure to SDL_free() the return value if != snd ...  Mixing function  Need to initialize the stream in SDL 1.3+  Mix the music (must be done before the channels are added)  Mix any playing channels...  Expiration delay for that channel is reached  Restore the volume  rcg06072001 Alert app if channel is done playing.  If looping the sample and we are at its end, make sure
				   we will still return a full buffer  rcg06122001 run posteffects...  Open the mixer with a certain desired audio format  If the mixer is already opened, increment open count  Set the desired format and frequency  Accept nearly any audio format  Initialize the music players  Clear out the audio channels  This list is (currently) decided at build time.  Dynamically change the number of channels managed by the mixer.
   If decreasing the number of channels, the upper channels are
   stopped.
  Stop the affected channels  Initialize the new channels  Return the actual mixer parameters 
 * !!! FIXME: Ideally, we want a Mix_LoadSample_RW(), which will handle the
 *             generic setup, then call the correct file format loader.
  Load a wave file  rcg06012001 Make sure src is valid  Make sure audio has been opened  Allocate the chunk memory  Find out what kind of audio file this is  Seek backwards for compatibility with older loaders  Build the audio converter and create conversion buffers  Run the audio converter  Load a wave file of the mixer format from a memory buffer  Make sure audio has been opened  Allocate the chunk memory  Essentially just skip to the audio data (no error checking - fast)  WAV header  Load raw audio data of the mixer format from a memory buffer  Make sure audio has been opened  Allocate the chunk memory  Essentially just point at the audio data (no error checking - fast)  Free an audio chunk previously loaded  Caution -- if the chunk is playing, the mixer will crash  Guarantee that this chunk isn't playing  Actually free the chunk  Set a function that is called after all mixing is performed.
   This can be used to provide real-time visual display of the audio stream
   or add a custom mixer filter for the stream data.
 Add your own music player or mixer function.
   If 'mix_func' is NULL, the default music player is re-enabled.
  Reserve the first channels (0 -> n-1) for the application, i.e. don't allocate
   them dynamically to the next sample if requested with a -1 value below.
   Returns the number of reserved channels.
  Play an audio chunk on a specific channel.
   If the specified channel is -1, play on the first free channel.
   'ticks' is the number of milliseconds at most to play the sample, or -1
   if there is no limit.
   Returns which channel was used to play the sound.
 Don't play null pointers :-)  Lock the mixer while modifying the playing channels  If which is -1, play on the first free channel  Queue up the audio data for this channel  Return the channel on which the sound is being played  Change the expiration delay for a channel  Fade in a sound on a channel, over ms milliseconds  Don't play null pointers :-)  Lock the mixer while modifying the playing channels  If which is -1, play on the first free channel  Queue up the audio data for this channel  Return the channel on which the sound is being played  Set volume of a particular channel  Set volume of a particular chunk  Halt playing of a particular channel  Restore volume  Halt playing of a particular group of channels  Fade out a channel and then stop it automatically  only change fade_volume_reset if we're not fading.  Halt playing of a particular group of channels  Check the status of a specific channel.
   If the specified mix_channel is -1, check all mix channels.
 rcg06072001 Get the chunk associated with a channel.  Close the mixer, halting all playing audio  rcg06042009 report available decoders at runtime.  Pause a particular channel (or all)  Resume a paused channel  Change the group of a channel  Assign several consecutive channels to a group  Finds the first available channel in a group of channels  Finds the "oldest" sample playing in a group of channels  Finds the "most recent" (i.e. last) sample playing in a group of channels 
 * rcg06122001 The special effects exportable API.
 *  Please see effect_*.c for internally-implemented effects, such
 *  as Mix_SetPanning().
  MAKE SURE you hold the audio lock (SDL_LockAudio()) before calling this!  add new effect to end of linked list...  MAKE SURE you hold the audio lock (SDL_LockAudio()) before calling this!  removing first item of list?  MAKE SURE you hold the audio lock (SDL_LockAudio()) before calling this!  MAKE SURE you hold the audio lock (SDL_LockAudio()) before calling this!  MAKE SURE you hold the audio lock (SDL_LockAudio()) before calling this!  MAKE SURE you hold the audio lock (SDL_LockAudio()) before calling this!  end of mixer.c ... 
  SDL_mixer:  An audio mixer library based on the SDL library
  Copyright (C) 1997-2012 Sam Lantinga <slouken@libsdl.org>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
 $Id$  Magic numbers for various audio file formats  "RIFF"  "WAVE"  "FORM"  "OggS"  "Crea"  "fLaC"  Support for hooking into the mixer callback system  rcg07062001 callback to alert when channels are done playing.  Music function declarations  Support for user defined music functions, plus the default one  rcg06042009 report available decoders at runtime.  Semicolon-separated SoundFont paths  oh well, go on without it.  rcg06192001 get linked library's version. 
 * rcg06122001 Cleanup effect callbacks.
 *  MAKE SURE SDL_LockAudio() is called before this (or you're in the
 *   audio callback).
 
	 * Call internal function directly, to avoid locking audio from
	 *   inside audio callback.
	  are there any registered effects?  if this is the postmix, we can just overwrite the original.  be sure to SDL_free() the return value if != snd ...  Mixing function  Need to initialize the stream in SDL 1.3+  Mix the music (must be done before the channels are added)  Mix any playing channels...  Expiration delay for that channel is reached  Restore the volume  rcg06072001 Alert app if channel is done playing.  If looping the sample and we are at its end, make sure
				   we will still return a full buffer  rcg06122001 run posteffects...  Open the mixer with a certain desired audio format  If the mixer is already opened, increment open count  Set the desired format and frequency  Accept nearly any audio format  Initialize the music players  Clear out the audio channels  This list is (currently) decided at build time.  Dynamically change the number of channels managed by the mixer.
   If decreasing the number of channels, the upper channels are
   stopped.
  Stop the affected channels  Initialize the new channels  Return the actual mixer parameters 
 * !!! FIXME: Ideally, we want a Mix_LoadSample_RW(), which will handle the
 *             generic setup, then call the correct file format loader.
  Load a wave file  rcg06012001 Make sure src is valid  Make sure audio has been opened  Allocate the chunk memory  Find out what kind of audio file this is  Seek backwards for compatibility with older loaders  Build the audio converter and create conversion buffers  Run the audio converter  Load a wave file of the mixer format from a memory buffer  Make sure audio has been opened  Allocate the chunk memory  Essentially just skip to the audio data (no error checking - fast)  WAV header  Load raw audio data of the mixer format from a memory buffer  Make sure audio has been opened  Allocate the chunk memory  Essentially just point at the audio data (no error checking - fast)  Free an audio chunk previously loaded  Caution -- if the chunk is playing, the mixer will crash  Guarantee that this chunk isn't playing  Actually free the chunk  Set a function that is called after all mixing is performed.
   This can be used to provide real-time visual display of the audio stream
   or add a custom mixer filter for the stream data.
 Add your own music player or mixer function.
   If 'mix_func' is NULL, the default music player is re-enabled.
  Reserve the first channels (0 -> n-1) for the application, i.e. don't allocate
   them dynamically to the next sample if requested with a -1 value below.
   Returns the number of reserved channels.
  Play an audio chunk on a specific channel.
   If the specified channel is -1, play on the first free channel.
   'ticks' is the number of milliseconds at most to play the sample, or -1
   if there is no limit.
   Returns which channel was used to play the sound.
 Don't play null pointers :-)  Lock the mixer while modifying the playing channels  If which is -1, play on the first free channel  Queue up the audio data for this channel  Return the channel on which the sound is being played  Change the expiration delay for a channel  Fade in a sound on a channel, over ms milliseconds  Don't play null pointers :-)  Lock the mixer while modifying the playing channels  If which is -1, play on the first free channel  Queue up the audio data for this channel  Return the channel on which the sound is being played  Set volume of a particular channel  Set volume of a particular chunk  Halt playing of a particular channel  Restore volume  Halt playing of a particular group of channels  Fade out a channel and then stop it automatically  only change fade_volume_reset if we're not fading.  Halt playing of a particular group of channels  Check the status of a specific channel.
   If the specified mix_channel is -1, check all mix channels.
 rcg06072001 Get the chunk associated with a channel.  Close the mixer, halting all playing audio  rcg06042009 report available decoders at runtime.  Pause a particular channel (or all)  Resume a paused channel  Change the group of a channel  Assign several consecutive channels to a group  Finds the first available channel in a group of channels  Finds the "oldest" sample playing in a group of channels  Finds the "most recent" (i.e. last) sample playing in a group of channels 
 * rcg06122001 The special effects exportable API.
 *  Please see effect_*.c for internally-implemented effects, such
 *  as Mix_SetPanning().
  MAKE SURE you hold the audio lock (SDL_LockAudio()) before calling this!  add new effect to end of linked list...  MAKE SURE you hold the audio lock (SDL_LockAudio()) before calling this!  removing first item of list?  MAKE SURE you hold the audio lock (SDL_LockAudio()) before calling this!  MAKE SURE you hold the audio lock (SDL_LockAudio()) before calling this!  MAKE SURE you hold the audio lock (SDL_LockAudio()) before calling this!  MAKE SURE you hold the audio lock (SDL_LockAudio()) before calling this!  end of mixer.c ... 
  SDL_mixer:  An audio mixer library based on the SDL library
  Copyright (C) 1997-2012 Sam Lantinga <slouken@libsdl.org>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
 $Id$  Magic numbers for various audio file formats  "RIFF"  "WAVE"  "FORM"  "OggS"  "Crea"  "fLaC"  Support for hooking into the mixer callback system  rcg07062001 callback to alert when channels are done playing.  Music function declarations  Support for user defined music functions, plus the default one  rcg06042009 report available decoders at runtime.  Semicolon-separated SoundFont paths  oh well, go on without it.  rcg06192001 get linked library's version. 
 * rcg06122001 Cleanup effect callbacks.
 *  MAKE SURE SDL_LockAudio() is called before this (or you're in the
 *   audio callback).
 
	 * Call internal function directly, to avoid locking audio from
	 *   inside audio callback.
	  are there any registered effects?  if this is the postmix, we can just overwrite the original.  be sure to SDL_free() the return value if != snd ...  Mixing function  Need to initialize the stream in SDL 1.3+  Mix the music (must be done before the channels are added)  Mix any playing channels...  Expiration delay for that channel is reached  Restore the volume  rcg06072001 Alert app if channel is done playing.  If looping the sample and we are at its end, make sure
				   we will still return a full buffer  rcg06122001 run posteffects...  Open the mixer with a certain desired audio format  If the mixer is already opened, increment open count  Set the desired format and frequency  Accept nearly any audio format  Initialize the music players  Clear out the audio channels  This list is (currently) decided at build time.  Dynamically change the number of channels managed by the mixer.
   If decreasing the number of channels, the upper channels are
   stopped.
  Stop the affected channels  Initialize the new channels  Return the actual mixer parameters 
 * !!! FIXME: Ideally, we want a Mix_LoadSample_RW(), which will handle the
 *             generic setup, then call the correct file format loader.
  Load a wave file  rcg06012001 Make sure src is valid  Make sure audio has been opened  Allocate the chunk memory  Find out what kind of audio file this is  Seek backwards for compatibility with older loaders  Build the audio converter and create conversion buffers  Run the audio converter  Load a wave file of the mixer format from a memory buffer  Make sure audio has been opened  Allocate the chunk memory  Essentially just skip to the audio data (no error checking - fast)  WAV header  Load raw audio data of the mixer format from a memory buffer  Make sure audio has been opened  Allocate the chunk memory  Essentially just point at the audio data (no error checking - fast)  Free an audio chunk previously loaded  Caution -- if the chunk is playing, the mixer will crash  Guarantee that this chunk isn't playing  Actually free the chunk  Set a function that is called after all mixing is performed.
   This can be used to provide real-time visual display of the audio stream
   or add a custom mixer filter for the stream data.
 Add your own music player or mixer function.
   If 'mix_func' is NULL, the default music player is re-enabled.
  Reserve the first channels (0 -> n-1) for the application, i.e. don't allocate
   them dynamically to the next sample if requested with a -1 value below.
   Returns the number of reserved channels.
  Play an audio chunk on a specific channel.
   If the specified channel is -1, play on the first free channel.
   'ticks' is the number of milliseconds at most to play the sample, or -1
   if there is no limit.
   Returns which channel was used to play the sound.
 Don't play null pointers :-)  Lock the mixer while modifying the playing channels  If which is -1, play on the first free channel  Queue up the audio data for this channel  Return the channel on which the sound is being played  Change the expiration delay for a channel  Fade in a sound on a channel, over ms milliseconds  Don't play null pointers :-)  Lock the mixer while modifying the playing channels  If which is -1, play on the first free channel  Queue up the audio data for this channel  Return the channel on which the sound is being played  Set volume of a particular channel  Set volume of a particular chunk  Halt playing of a particular channel  Restore volume  Halt playing of a particular group of channels  Fade out a channel and then stop it automatically  only change fade_volume_reset if we're not fading.  Halt playing of a particular group of channels  Check the status of a specific channel.
   If the specified mix_channel is -1, check all mix channels.
 rcg06072001 Get the chunk associated with a channel.  Close the mixer, halting all playing audio  rcg06042009 report available decoders at runtime.  Pause a particular channel (or all)  Resume a paused channel  Change the group of a channel  Assign several consecutive channels to a group  Finds the first available channel in a group of channels  Finds the "oldest" sample playing in a group of channels  Finds the "most recent" (i.e. last) sample playing in a group of channels 
 * rcg06122001 The special effects exportable API.
 *  Please see effect_*.c for internally-implemented effects, such
 *  as Mix_SetPanning().
  MAKE SURE you hold the audio lock (SDL_LockAudio()) before calling this!  add new effect to end of linked list...  MAKE SURE you hold the audio lock (SDL_LockAudio()) before calling this!  removing first item of list?  MAKE SURE you hold the audio lock (SDL_LockAudio()) before calling this!  MAKE SURE you hold the audio lock (SDL_LockAudio()) before calling this!  MAKE SURE you hold the audio lock (SDL_LockAudio()) before calling this!  MAKE SURE you hold the audio lock (SDL_LockAudio()) before calling this!  end of mixer.c ... 