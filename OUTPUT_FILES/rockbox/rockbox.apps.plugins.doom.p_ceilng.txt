 Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *   Ceiling aninmation (lowering, crushing, raising)
 *
 *----------------------------------------------------------------------------- a special thinker in a level the list of ceilings moving currently, including crushers/////////////////////////////////////////////////////////////// Ceiling action routine and linedef type handler/////////////////////////////////////////////////////////////// T_MoveCeiling Action routine that moves ceilings. Called once per tick. Passed a ceiling_t structure that contains all the info about the move. see P_SPEC.H for fields. No return. jff 02/08/98 all cases with labels beginning with gen added to support generalized line type behaviors. If ceiling in stasis, do nothing Ceiling is moving up if not a silent crusher, make moving sound handle reaching destination height plain movers are just removed movers with texture change, change the texture then get removedjff 3/14/98 transfer old special field as well crushers reverse direction at the top Ceiling moving down if not silent crusher type make moving sound handle reaching destination height 02/09/98 jff change slow crushers' speed back to normal start back upjff 2/22/98 make it go back up! make platform stop at bottom of all crusher strokes except generalized ones, reset speed, start back up in the case of ceiling mover/changer, change the texture then remove the active ceilingjff add to fix bug in special transfers from changes all other case, just remove the active ceiling ( res != pastdest ) handle the crusher encountering an obstaclejff 02/08/98 slow down slow crushers on obstacle EV_DoCeiling Move a ceiling up/down or start a crusher Passed the linedef activating the function and the type of function desired returns true if a thinker started Reactivate in-stasis ceilings...for certain types. This restarts a crusher after it has been stoppedjff 4/5/98 return if activated affects all sectors with the same tag as the linedef if ceiling already moving, don't start a second function on itjff 2/22/98 create a new ceiling thinkerjff 2/22/98 setup ceiling structure according to type of function add the ceiling to the active list//////////////////////////////////////////////////////////////////// Active ceiling list primitives/////////////////////////////////////////////////////////////////// jff 2/22/98 - modified Lee's plat code to work for ceilings The following were all rewritten by Lee Killough to use the new structure which places no limits on active ceilings. It also avoids spending as much time searching for active ceilings. Previously a fixed-size array was used, with NULL indicating empty entries, while now a doubly-linked list is used. P_ActivateInStasisCeiling() Reactivates all stopped crushers with the right tag Passed the line reactivating the crusher Returns true if a ceiling reactivatedjff 4/5/98 return if activatedjff 4/5/98 return if activated EV_CeilingCrushStop() Stops all active ceilings with the right tag Passed the linedef stopping the ceilings Returns true if a ceiling put in stasis P_AddActiveCeiling() Adds a ceiling to the head of the list of active ceilings Passed the ceiling motion structure Returns nothing P_RemoveActiveCeiling() Removes a ceiling from the list of active ceilings Passed the ceiling motion structure Returns nothingjff 2/22/98 P_RemoveAllActiveCeilings() Removes all ceilings from the active ceiling list Passed nothing, returns nothing Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *   Ceiling aninmation (lowering, crushing, raising)
 *
 *----------------------------------------------------------------------------- a special thinker in a level the list of ceilings moving currently, including crushers/////////////////////////////////////////////////////////////// Ceiling action routine and linedef type handler/////////////////////////////////////////////////////////////// T_MoveCeiling Action routine that moves ceilings. Called once per tick. Passed a ceiling_t structure that contains all the info about the move. see P_SPEC.H for fields. No return. jff 02/08/98 all cases with labels beginning with gen added to support generalized line type behaviors. If ceiling in stasis, do nothing Ceiling is moving up if not a silent crusher, make moving sound handle reaching destination height plain movers are just removed movers with texture change, change the texture then get removedjff 3/14/98 transfer old special field as well crushers reverse direction at the top Ceiling moving down if not silent crusher type make moving sound handle reaching destination height 02/09/98 jff change slow crushers' speed back to normal start back upjff 2/22/98 make it go back up! make platform stop at bottom of all crusher strokes except generalized ones, reset speed, start back up in the case of ceiling mover/changer, change the texture then remove the active ceilingjff add to fix bug in special transfers from changes all other case, just remove the active ceiling ( res != pastdest ) handle the crusher encountering an obstaclejff 02/08/98 slow down slow crushers on obstacle EV_DoCeiling Move a ceiling up/down or start a crusher Passed the linedef activating the function and the type of function desired returns true if a thinker started Reactivate in-stasis ceilings...for certain types. This restarts a crusher after it has been stoppedjff 4/5/98 return if activated affects all sectors with the same tag as the linedef if ceiling already moving, don't start a second function on itjff 2/22/98 create a new ceiling thinkerjff 2/22/98 setup ceiling structure according to type of function add the ceiling to the active list//////////////////////////////////////////////////////////////////// Active ceiling list primitives/////////////////////////////////////////////////////////////////// jff 2/22/98 - modified Lee's plat code to work for ceilings The following were all rewritten by Lee Killough to use the new structure which places no limits on active ceilings. It also avoids spending as much time searching for active ceilings. Previously a fixed-size array was used, with NULL indicating empty entries, while now a doubly-linked list is used. P_ActivateInStasisCeiling() Reactivates all stopped crushers with the right tag Passed the line reactivating the crusher Returns true if a ceiling reactivatedjff 4/5/98 return if activatedjff 4/5/98 return if activated EV_CeilingCrushStop() Stops all active ceilings with the right tag Passed the linedef stopping the ceilings Returns true if a ceiling put in stasis P_AddActiveCeiling() Adds a ceiling to the head of the list of active ceilings Passed the ceiling motion structure Returns nothing P_RemoveActiveCeiling() Removes a ceiling from the list of active ceilings Passed the ceiling motion structure Returns nothingjff 2/22/98 P_RemoveAllActiveCeilings() Removes all ceilings from the active ceiling list Passed nothing, returns nothing Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *   Ceiling aninmation (lowering, crushing, raising)
 *
 *----------------------------------------------------------------------------- a special thinker in a level the list of ceilings moving currently, including crushers/////////////////////////////////////////////////////////////// Ceiling action routine and linedef type handler/////////////////////////////////////////////////////////////// T_MoveCeiling Action routine that moves ceilings. Called once per tick. Passed a ceiling_t structure that contains all the info about the move. see P_SPEC.H for fields. No return. jff 02/08/98 all cases with labels beginning with gen added to support generalized line type behaviors. If ceiling in stasis, do nothing Ceiling is moving up if not a silent crusher, make moving sound handle reaching destination height plain movers are just removed movers with texture change, change the texture then get removedjff 3/14/98 transfer old special field as well crushers reverse direction at the top Ceiling moving down if not silent crusher type make moving sound handle reaching destination height 02/09/98 jff change slow crushers' speed back to normal start back upjff 2/22/98 make it go back up! make platform stop at bottom of all crusher strokes except generalized ones, reset speed, start back up in the case of ceiling mover/changer, change the texture then remove the active ceilingjff add to fix bug in special transfers from changes all other case, just remove the active ceiling ( res != pastdest ) handle the crusher encountering an obstaclejff 02/08/98 slow down slow crushers on obstacle EV_DoCeiling Move a ceiling up/down or start a crusher Passed the linedef activating the function and the type of function desired returns true if a thinker started Reactivate in-stasis ceilings...for certain types. This restarts a crusher after it has been stoppedjff 4/5/98 return if activated affects all sectors with the same tag as the linedef if ceiling already moving, don't start a second function on itjff 2/22/98 create a new ceiling thinkerjff 2/22/98 setup ceiling structure according to type of function add the ceiling to the active list//////////////////////////////////////////////////////////////////// Active ceiling list primitives/////////////////////////////////////////////////////////////////// jff 2/22/98 - modified Lee's plat code to work for ceilings The following were all rewritten by Lee Killough to use the new structure which places no limits on active ceilings. It also avoids spending as much time searching for active ceilings. Previously a fixed-size array was used, with NULL indicating empty entries, while now a doubly-linked list is used. P_ActivateInStasisCeiling() Reactivates all stopped crushers with the right tag Passed the line reactivating the crusher Returns true if a ceiling reactivatedjff 4/5/98 return if activatedjff 4/5/98 return if activated EV_CeilingCrushStop() Stops all active ceilings with the right tag Passed the linedef stopping the ceilings Returns true if a ceiling put in stasis P_AddActiveCeiling() Adds a ceiling to the head of the list of active ceilings Passed the ceiling motion structure Returns nothing P_RemoveActiveCeiling() Removes a ceiling from the list of active ceilings Passed the ceiling motion structure Returns nothingjff 2/22/98 P_RemoveAllActiveCeilings() Removes all ceilings from the active ceiling list Passed nothing, returns nothing