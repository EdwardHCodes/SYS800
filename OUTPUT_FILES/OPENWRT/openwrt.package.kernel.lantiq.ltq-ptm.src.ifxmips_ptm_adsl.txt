*****************************************************************************
**
** FILE NAME    : ifxmips_ptm_adsl.c
** PROJECT      : UEIP
** MODULES      : PTM
**
** DATE         : 7 Jul 2009
** AUTHOR       : Xu Liang
** DESCRIPTION  : PTM driver common source file (core functions for Danube/
**                Amazon-SE/AR9)
** COPYRIGHT    :       Copyright (c) 2006
**                      Infineon Technologies AG
**                      Am Campeon 1-12, 85579 Neubiberg, Germany
**
**    This program is free software; you can redistribute it and/or modify
**    it under the terms of the GNU General Public License as published by
**    the Free Software Foundation; either version 2 of the License, or
**    (at your option) any later version.
**
** HISTORY
** $Date        $Author         $Comment
** 07 JUL 2009  Xu Liang        Init Version
******************************************************************************
 * ####################################
 *              Head File
 * ####################################
 
 *  Common Head File
 
 *  Chip Specific Head File
 
 * ####################################
 *        Kernel Version Adaption
 * ####################################
 
 * ####################################
 *   Parameters to Configure PPE
 * ####################################
   Write descriptor delay                            Max packet size for RX                            Number of descriptors per DMA RX channel          Number of descriptors per DMA TX channel          default: tx_eth_crc_check: 1, tx_tc_crc_check: 1, tx_tc_crc_len = 16               rx_eth_crc_present: 1, rx_eth_crc_check: 1, rx_tc_crc_check: 1, rx_tc_crc_len = 16 
 * ####################################
 *              Definition
 * ####################################
 
 * ####################################
 *             Declaration
 * ####################################
 
 *  Network Operations
 
 *  DSL Data LED
 
 *  buffer manage functions
 static INLINE struct sk_buff* alloc_skb_tx(unsigned int);
 *  Mailbox handler and signal function
 
 *  Debug Functions
 
 *  Proc File Functions
 
 *  Proc Help Functions
 
 *  Init & clean-up functions
 
 *  Exteranl Function
 
 *  External variable
 
 * ####################################
 *            Local Variable
 * ####################################
 
 * ####################################
 *            Local Function
 * ####################################
   hook network operations  Allow up to 1508 bytes, for RFC4638   interface down  no more traffic  clear interrupt  double check  next round  allocate descriptor   write discriptor to memory and write back cache   disable TX irq, release skb when sending new packet   wake up TX queue      allocate memroy including trailer and padding     must be burst length alignment and reserve two more bytes for MAC address alignment    pub skb in reserved area "skb->data - 4"      write back and invalidate cache      invalidate cache      allocate memory including padding     must be burst length alignment    assume TX is serial operation  no protection provided  return: < 0 - descriptor not available, 0 - received one packet  if PP32 hold descriptor or descriptor not completed  parse protocol header  update descriptor  TX  RX  interface down  no more traffic  clear interrupt  double check  next round  bypass broadcast/multicast  swap MAC  bypass VLAN  IP  defined(ENABLE_FW_PROC) && ENABLE_FW_PROC  debugging feature for enter/leave showtime  defined(ENABLE_DBG_PROC) && ENABLE_DBG_PROC  There is a delay between PPE write descriptor and descriptor is         really stored in memory. Host also has this delay when writing          descriptor. So PPE will use this value to determine if the write        operation makes effect.                                                 Because of the limitation of length field in descriptors, the packet    size could not be larger than 64K minus overhead size.                  clear ptm private data structure  allocate memory for RX descriptorsp = (void *)((((unsigned int)p + DESC_ALIGNMENT - 1) & ~(DESC_ALIGNMENT - 1)) | KSEG1);  allocate memory for TX descriptors  allocate memroy for TX skb pointers  descriptor initialized
     *  CDM Block 1
       CDM block 1 must be data memory and mapped to 0x5000 (dword addr)  Clear CDM block 1
     *  General Registers
      WAN RX EFM-TC Looking Threshold
     *  WRX DMA Channel Configuration Table
      looking for sync parter receiver is out of sync
     *  WTX DMA Channel Configuration Table
     
 * ####################################
 *           Global Function
 * ####################################
 
 * ####################################
 *           Init/Cleanup API
 * ####################################
 
 *  Description:
 *    Initialize global variables, PP32, comunication structures, register IRQ
 *    and register device.
 *  Input:
 *    none
 *  Output:
 *    0    --- successful
 *    else --- failure, usually it is negative value of error code
   register interrupt handler  
 *  Description:
 *    Release memory, free IRQ, and deregister device.
 *  Input:
 *    none
 *  Output:
 *   none
 *****************************************************************************
**
** FILE NAME    : ifxmips_ptm_adsl.c
** PROJECT      : UEIP
** MODULES      : PTM
**
** DATE         : 7 Jul 2009
** AUTHOR       : Xu Liang
** DESCRIPTION  : PTM driver common source file (core functions for Danube/
**                Amazon-SE/AR9)
** COPYRIGHT    :       Copyright (c) 2006
**                      Infineon Technologies AG
**                      Am Campeon 1-12, 85579 Neubiberg, Germany
**
**    This program is free software; you can redistribute it and/or modify
**    it under the terms of the GNU General Public License as published by
**    the Free Software Foundation; either version 2 of the License, or
**    (at your option) any later version.
**
** HISTORY
** $Date        $Author         $Comment
** 07 JUL 2009  Xu Liang        Init Version
******************************************************************************
 * ####################################
 *              Head File
 * ####################################
 
 *  Common Head File
 
 *  Chip Specific Head File
 
 * ####################################
 *        Kernel Version Adaption
 * ####################################
 
 * ####################################
 *   Parameters to Configure PPE
 * ####################################
   Write descriptor delay                            Max packet size for RX                            Number of descriptors per DMA RX channel          Number of descriptors per DMA TX channel          default: tx_eth_crc_check: 1, tx_tc_crc_check: 1, tx_tc_crc_len = 16               rx_eth_crc_present: 1, rx_eth_crc_check: 1, rx_tc_crc_check: 1, rx_tc_crc_len = 16 
 * ####################################
 *              Definition
 * ####################################
 
 * ####################################
 *             Declaration
 * ####################################
 
 *  Network Operations
 
 *  DSL Data LED
 
 *  buffer manage functions
 static INLINE struct sk_buff* alloc_skb_tx(unsigned int);
 *  Mailbox handler and signal function
 
 *  Debug Functions
 
 *  Proc File Functions
 
 *  Proc Help Functions
 
 *  Init & clean-up functions
 
 *  Exteranl Function
 
 *  External variable
 
 * ####################################
 *            Local Variable
 * ####################################
 
 * ####################################
 *            Local Function
 * ####################################
   hook network operations  Allow up to 1508 bytes, for RFC4638   interface down  no more traffic  clear interrupt  double check  next round  allocate descriptor   write discriptor to memory and write back cache   disable TX irq, release skb when sending new packet   wake up TX queue      allocate memroy including trailer and padding     must be burst length alignment and reserve two more bytes for MAC address alignment    pub skb in reserved area "skb->data - 4"      write back and invalidate cache      invalidate cache      allocate memory including padding     must be burst length alignment    assume TX is serial operation  no protection provided  return: < 0 - descriptor not available, 0 - received one packet  if PP32 hold descriptor or descriptor not completed  parse protocol header  update descriptor  TX  RX  interface down  no more traffic  clear interrupt  double check  next round  bypass broadcast/multicast  swap MAC  bypass VLAN  IP  defined(ENABLE_FW_PROC) && ENABLE_FW_PROC  debugging feature for enter/leave showtime  defined(ENABLE_DBG_PROC) && ENABLE_DBG_PROC  There is a delay between PPE write descriptor and descriptor is         really stored in memory. Host also has this delay when writing          descriptor. So PPE will use this value to determine if the write        operation makes effect.                                                 Because of the limitation of length field in descriptors, the packet    size could not be larger than 64K minus overhead size.                  clear ptm private data structure  allocate memory for RX descriptorsp = (void *)((((unsigned int)p + DESC_ALIGNMENT - 1) & ~(DESC_ALIGNMENT - 1)) | KSEG1);  allocate memory for TX descriptors  allocate memroy for TX skb pointers  descriptor initialized
     *  CDM Block 1
       CDM block 1 must be data memory and mapped to 0x5000 (dword addr)  Clear CDM block 1
     *  General Registers
      WAN RX EFM-TC Looking Threshold
     *  WRX DMA Channel Configuration Table
      looking for sync parter receiver is out of sync
     *  WTX DMA Channel Configuration Table
     
 * ####################################
 *           Global Function
 * ####################################
 
 * ####################################
 *           Init/Cleanup API
 * ####################################
 
 *  Description:
 *    Initialize global variables, PP32, comunication structures, register IRQ
 *    and register device.
 *  Input:
 *    none
 *  Output:
 *    0    --- successful
 *    else --- failure, usually it is negative value of error code
   register interrupt handler  
 *  Description:
 *    Release memory, free IRQ, and deregister device.
 *  Input:
 *    none
 *  Output:
 *   none
 *****************************************************************************
**
** FILE NAME    : ifxmips_ptm_adsl.c
** PROJECT      : UEIP
** MODULES      : PTM
**
** DATE         : 7 Jul 2009
** AUTHOR       : Xu Liang
** DESCRIPTION  : PTM driver common source file (core functions for Danube/
**                Amazon-SE/AR9)
** COPYRIGHT    :       Copyright (c) 2006
**                      Infineon Technologies AG
**                      Am Campeon 1-12, 85579 Neubiberg, Germany
**
**    This program is free software; you can redistribute it and/or modify
**    it under the terms of the GNU General Public License as published by
**    the Free Software Foundation; either version 2 of the License, or
**    (at your option) any later version.
**
** HISTORY
** $Date        $Author         $Comment
** 07 JUL 2009  Xu Liang        Init Version
******************************************************************************
 * ####################################
 *              Head File
 * ####################################
 
 *  Common Head File
 
 *  Chip Specific Head File
 
 * ####################################
 *        Kernel Version Adaption
 * ####################################
 
 * ####################################
 *   Parameters to Configure PPE
 * ####################################
   Write descriptor delay                            Max packet size for RX                            Number of descriptors per DMA RX channel          Number of descriptors per DMA TX channel          default: tx_eth_crc_check: 1, tx_tc_crc_check: 1, tx_tc_crc_len = 16               rx_eth_crc_present: 1, rx_eth_crc_check: 1, rx_tc_crc_check: 1, rx_tc_crc_len = 16 
 * ####################################
 *              Definition
 * ####################################
 
 * ####################################
 *             Declaration
 * ####################################
 
 *  Network Operations
 
 *  DSL Data LED
 
 *  buffer manage functions
 static INLINE struct sk_buff* alloc_skb_tx(unsigned int);
 *  Mailbox handler and signal function
 
 *  Debug Functions
 
 *  Proc File Functions
 
 *  Proc Help Functions
 
 *  Init & clean-up functions
 
 *  Exteranl Function
 
 *  External variable
 
 * ####################################
 *            Local Variable
 * ####################################
 
 * ####################################
 *            Local Function
 * ####################################
   hook network operations  Allow up to 1508 bytes, for RFC4638   interface down  no more traffic  clear interrupt  double check  next round  allocate descriptor   write discriptor to memory and write back cache   disable TX irq, release skb when sending new packet   wake up TX queue      allocate memroy including trailer and padding     must be burst length alignment and reserve two more bytes for MAC address alignment    pub skb in reserved area "skb->data - 4"      write back and invalidate cache      invalidate cache      allocate memory including padding     must be burst length alignment    assume TX is serial operation  no protection provided  return: < 0 - descriptor not available, 0 - received one packet  if PP32 hold descriptor or descriptor not completed  parse protocol header  update descriptor  TX  RX  interface down  no more traffic  clear interrupt  double check  next round  bypass broadcast/multicast  swap MAC  bypass VLAN  IP  defined(ENABLE_FW_PROC) && ENABLE_FW_PROC  debugging feature for enter/leave showtime  defined(ENABLE_DBG_PROC) && ENABLE_DBG_PROC  There is a delay between PPE write descriptor and descriptor is         really stored in memory. Host also has this delay when writing          descriptor. So PPE will use this value to determine if the write        operation makes effect.                                                 Because of the limitation of length field in descriptors, the packet    size could not be larger than 64K minus overhead size.                  clear ptm private data structure  allocate memory for RX descriptorsp = (void *)((((unsigned int)p + DESC_ALIGNMENT - 1) & ~(DESC_ALIGNMENT - 1)) | KSEG1);  allocate memory for TX descriptors  allocate memroy for TX skb pointers  descriptor initialized
     *  CDM Block 1
       CDM block 1 must be data memory and mapped to 0x5000 (dword addr)  Clear CDM block 1
     *  General Registers
      WAN RX EFM-TC Looking Threshold
     *  WRX DMA Channel Configuration Table
      looking for sync parter receiver is out of sync
     *  WTX DMA Channel Configuration Table
     
 * ####################################
 *           Global Function
 * ####################################
 
 * ####################################
 *           Init/Cleanup API
 * ####################################
 
 *  Description:
 *    Initialize global variables, PP32, comunication structures, register IRQ
 *    and register device.
 *  Input:
 *    none
 *  Output:
 *    0    --- successful
 *    else --- failure, usually it is negative value of error code
   register interrupt handler  
 *  Description:
 *    Release memory, free IRQ, and deregister device.
 *  Input:
 *    none
 *  Output:
 *   none
 