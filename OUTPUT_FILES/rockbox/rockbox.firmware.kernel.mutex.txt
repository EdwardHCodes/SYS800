**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Björn Stenberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ******************************************************************************************************************************************************
 * Simple mutex functions ;)
 *************************************************************************** Initialize a mutex object - call before any use and do not call again once
 * the object is available to other threads  Gain ownership of a mutex object or block until it becomes free  current thread already owns this mutex  lock out other cores  must read thread again inside cs (a multiprocessor concern really)  lock is open  block until the lock is open...  ...and turn control over to next thread  Release ownership of a mutex object - only owning thread must call this  unlocker not being the owner is an unlocking violation  this thread still owns lock  lock out other cores  transfer to next queued thread if any  no threads waiting - open the lock  Tranfer of owning thread is handled in the wakeup protocol
     * if priorities are enabled otherwise just set it from the
     * queue head. **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Björn Stenberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ******************************************************************************************************************************************************
 * Simple mutex functions ;)
 *************************************************************************** Initialize a mutex object - call before any use and do not call again once
 * the object is available to other threads  Gain ownership of a mutex object or block until it becomes free  current thread already owns this mutex  lock out other cores  must read thread again inside cs (a multiprocessor concern really)  lock is open  block until the lock is open...  ...and turn control over to next thread  Release ownership of a mutex object - only owning thread must call this  unlocker not being the owner is an unlocking violation  this thread still owns lock  lock out other cores  transfer to next queued thread if any  no threads waiting - open the lock  Tranfer of owning thread is handled in the wakeup protocol
     * if priorities are enabled otherwise just set it from the
     * queue head. **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Björn Stenberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ******************************************************************************************************************************************************
 * Simple mutex functions ;)
 *************************************************************************** Initialize a mutex object - call before any use and do not call again once
 * the object is available to other threads  Gain ownership of a mutex object or block until it becomes free  current thread already owns this mutex  lock out other cores  must read thread again inside cs (a multiprocessor concern really)  lock is open  block until the lock is open...  ...and turn control over to next thread  Release ownership of a mutex object - only owning thread must call this  unlocker not being the owner is an unlocking violation  this thread still owns lock  lock out other cores  transfer to next queued thread if any  no threads waiting - open the lock  Tranfer of owning thread is handled in the wakeup protocol
     * if priorities are enabled otherwise just set it from the
     * queue head. 