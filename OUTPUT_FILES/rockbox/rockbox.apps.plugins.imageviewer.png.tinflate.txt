**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Original source:
 * Copyright (c) 2003 by Joergen Ibsen / Jibz
 *
 * Rockbox adaptation:
 * Copyright (c) 2010 by Marcin Bukat
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * tinflate  -  tiny inflate
 *
 * Copyright (c) 2003 by Joergen Ibsen / Jibz
 * All Rights Reserved
 *
 * http://www.ibsensoftware.com/
 *
 * This software is provided 'as-is', without any express
 * or implied warranty.  In no event will the authors be
 * held liable for any damages arising from the use of
 * this software.
 *
 * Permission is granted to anyone to use this software
 * for any purpose, including commercial applications,
 * and to alter it and redistribute it freely, subject to
 * the following restrictions:
 *
 * 1. The origin of this software must not be
 *    misrepresented; you must not claim that you
 *    wrote the original software. If you use this
 *    software in a product, an acknowledgment in
 *    the product documentation would be appreciated
 *    but is not required.
 *
 * 2. Altered source versions must be plainly marked
 *    as such, and must not be misrepresented as
 *    being the original software.
 *
 * 3. This notice may not be removed or altered from
 *    any source distribution.
  memcpy  ------------------------------ *
 * -- internal data structures -- *
 * ------------------------------  table of code length counts  code -> symbol translation table  dynamic length/symbol tree  dynamic distance tree  static tables  ----------------------- *
 * -- utility functions -- *
 * -----------------------  given an array of code lengths, build a tree  clear code length count table  for (i = 0; i < 16; ++i) t->table[i] = 0;  scan symbol lengths, and sum code length counts  compute offset table for distribution sort  create code->symbol translation table (symbols sorted by code)  ---------------------- *
 * -- decode functions -- *
 * ----------------------  get one bit from source stream  check if tag is empty  load next tag  shift bit out of tag  read a num bit value from a stream and add base  read num bits  given a data stream and a tree, decode a symbol  get more bits while code value is above sum  given a data stream, decode dynamic trees from it  get 5 bits HLIT (257-286)  get 5 bits HDIST (1-32)  get 4 bits HCLEN (4-19)  for (i = 0; i < 19; ++i) lengths[i] = 0;  read code lengths for code length alphabet  get 3 bits code length (0-7)  build code length tree  decode code lengths for the dynamic trees  copy previous code length 3-6 times (read 2 bits)  repeat code length 0 for 3-10 times (read 3 bits)  repeat code length 0 for 11-138 times (read 7 bits)  values 0-15 represent the actual code lengths  build dynamic trees  ----------------------------- *
 * -- block inflate functions -- *
 * -----------------------------  given a stream and two trees, inflate a block of data  remember current output position  check for end of block  possibly get more bits from length code  possibly get more bits from distance code  copy match  inflate an uncompressed block of data  unsigned int i;  get length  get one's complement of length  check length  copy block  for (i = length; i; --i) *d->dest++ = *d->source++;  make sure we start next block on a byte boundary  inflate a block of data compressed with fixed huffman trees  decode block using fixed trees  inflate a block of data compressed with dynamic huffman trees  decode trees from stream  decode block using decoded trees  ---------------------- *
 * -- public functions -- *
 * ----------------------  inflate stream from source to dest  read final block flag  read block type (2 bits)  decompress block  decompress uncompressed block  decompress block with fixed huffman trees  decompress block with dynamic huffman trees **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Original source:
 * Copyright (c) 2003 by Joergen Ibsen / Jibz
 *
 * Rockbox adaptation:
 * Copyright (c) 2010 by Marcin Bukat
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * tinflate  -  tiny inflate
 *
 * Copyright (c) 2003 by Joergen Ibsen / Jibz
 * All Rights Reserved
 *
 * http://www.ibsensoftware.com/
 *
 * This software is provided 'as-is', without any express
 * or implied warranty.  In no event will the authors be
 * held liable for any damages arising from the use of
 * this software.
 *
 * Permission is granted to anyone to use this software
 * for any purpose, including commercial applications,
 * and to alter it and redistribute it freely, subject to
 * the following restrictions:
 *
 * 1. The origin of this software must not be
 *    misrepresented; you must not claim that you
 *    wrote the original software. If you use this
 *    software in a product, an acknowledgment in
 *    the product documentation would be appreciated
 *    but is not required.
 *
 * 2. Altered source versions must be plainly marked
 *    as such, and must not be misrepresented as
 *    being the original software.
 *
 * 3. This notice may not be removed or altered from
 *    any source distribution.
  memcpy  ------------------------------ *
 * -- internal data structures -- *
 * ------------------------------  table of code length counts  code -> symbol translation table  dynamic length/symbol tree  dynamic distance tree  static tables  ----------------------- *
 * -- utility functions -- *
 * -----------------------  given an array of code lengths, build a tree  clear code length count table  for (i = 0; i < 16; ++i) t->table[i] = 0;  scan symbol lengths, and sum code length counts  compute offset table for distribution sort  create code->symbol translation table (symbols sorted by code)  ---------------------- *
 * -- decode functions -- *
 * ----------------------  get one bit from source stream  check if tag is empty  load next tag  shift bit out of tag  read a num bit value from a stream and add base  read num bits  given a data stream and a tree, decode a symbol  get more bits while code value is above sum  given a data stream, decode dynamic trees from it  get 5 bits HLIT (257-286)  get 5 bits HDIST (1-32)  get 4 bits HCLEN (4-19)  for (i = 0; i < 19; ++i) lengths[i] = 0;  read code lengths for code length alphabet  get 3 bits code length (0-7)  build code length tree  decode code lengths for the dynamic trees  copy previous code length 3-6 times (read 2 bits)  repeat code length 0 for 3-10 times (read 3 bits)  repeat code length 0 for 11-138 times (read 7 bits)  values 0-15 represent the actual code lengths  build dynamic trees  ----------------------------- *
 * -- block inflate functions -- *
 * -----------------------------  given a stream and two trees, inflate a block of data  remember current output position  check for end of block  possibly get more bits from length code  possibly get more bits from distance code  copy match  inflate an uncompressed block of data  unsigned int i;  get length  get one's complement of length  check length  copy block  for (i = length; i; --i) *d->dest++ = *d->source++;  make sure we start next block on a byte boundary  inflate a block of data compressed with fixed huffman trees  decode block using fixed trees  inflate a block of data compressed with dynamic huffman trees  decode trees from stream  decode block using decoded trees  ---------------------- *
 * -- public functions -- *
 * ----------------------  inflate stream from source to dest  read final block flag  read block type (2 bits)  decompress block  decompress uncompressed block  decompress block with fixed huffman trees  decompress block with dynamic huffman trees **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Original source:
 * Copyright (c) 2003 by Joergen Ibsen / Jibz
 *
 * Rockbox adaptation:
 * Copyright (c) 2010 by Marcin Bukat
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * tinflate  -  tiny inflate
 *
 * Copyright (c) 2003 by Joergen Ibsen / Jibz
 * All Rights Reserved
 *
 * http://www.ibsensoftware.com/
 *
 * This software is provided 'as-is', without any express
 * or implied warranty.  In no event will the authors be
 * held liable for any damages arising from the use of
 * this software.
 *
 * Permission is granted to anyone to use this software
 * for any purpose, including commercial applications,
 * and to alter it and redistribute it freely, subject to
 * the following restrictions:
 *
 * 1. The origin of this software must not be
 *    misrepresented; you must not claim that you
 *    wrote the original software. If you use this
 *    software in a product, an acknowledgment in
 *    the product documentation would be appreciated
 *    but is not required.
 *
 * 2. Altered source versions must be plainly marked
 *    as such, and must not be misrepresented as
 *    being the original software.
 *
 * 3. This notice may not be removed or altered from
 *    any source distribution.
  memcpy  ------------------------------ *
 * -- internal data structures -- *
 * ------------------------------  table of code length counts  code -> symbol translation table  dynamic length/symbol tree  dynamic distance tree  static tables  ----------------------- *
 * -- utility functions -- *
 * -----------------------  given an array of code lengths, build a tree  clear code length count table  for (i = 0; i < 16; ++i) t->table[i] = 0;  scan symbol lengths, and sum code length counts  compute offset table for distribution sort  create code->symbol translation table (symbols sorted by code)  ---------------------- *
 * -- decode functions -- *
 * ----------------------  get one bit from source stream  check if tag is empty  load next tag  shift bit out of tag  read a num bit value from a stream and add base  read num bits  given a data stream and a tree, decode a symbol  get more bits while code value is above sum  given a data stream, decode dynamic trees from it  get 5 bits HLIT (257-286)  get 5 bits HDIST (1-32)  get 4 bits HCLEN (4-19)  for (i = 0; i < 19; ++i) lengths[i] = 0;  read code lengths for code length alphabet  get 3 bits code length (0-7)  build code length tree  decode code lengths for the dynamic trees  copy previous code length 3-6 times (read 2 bits)  repeat code length 0 for 3-10 times (read 3 bits)  repeat code length 0 for 11-138 times (read 7 bits)  values 0-15 represent the actual code lengths  build dynamic trees  ----------------------------- *
 * -- block inflate functions -- *
 * -----------------------------  given a stream and two trees, inflate a block of data  remember current output position  check for end of block  possibly get more bits from length code  possibly get more bits from distance code  copy match  inflate an uncompressed block of data  unsigned int i;  get length  get one's complement of length  check length  copy block  for (i = length; i; --i) *d->dest++ = *d->source++;  make sure we start next block on a byte boundary  inflate a block of data compressed with fixed huffman trees  decode block using fixed trees  inflate a block of data compressed with dynamic huffman trees  decode trees from stream  decode block using decoded trees  ---------------------- *
 * -- public functions -- *
 * ----------------------  inflate stream from source to dest  read final block flag  read block type (2 bits)  decompress block  decompress uncompressed block  decompress block with fixed huffman trees  decompress block with dynamic huffman trees 