**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 by Kevin Ferrare
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** The minimum number of pending button events in queue before starting
 * to limit list drawing interval.
  pixels per screen scroll step  should lines scroll out of the screen  the 4/12 factor is designed for reasonable item size on a 160dpi screen 
 * Initializes a scrolling list
 *  - gui_list : the list structure to initialize
 *  - callback_get_item_name : pointer to a function that associates a label
 *    to a given item number
 *  - data : extra data passed to the list callback
 *  - scroll_all :
 *  - selected_size :
 *  - parent : the parent viewports to use. NULL means the full screen minus
 *             statusbar if enabled. NOTE: new screens should NOT set this to NULL.
  this toggles the selection bar or cursor  if text is smaller than view  if text got out of view  
 * Force a full screen update.
  sets up the list so the selection is shown correctly on the screen  list moved up  list moved down  a bounce  Next thing the list code will do is go speak the item, doing
           a talk_shutup() first. Shutup now so the beep is clearer, and
           make sure the subsequent shutup is skipped because otherwise
           it'd kill the pcm buffer.  On at least x5: if, instead of the above shutup, I insert a
               sleep just after the beep_play() call, to delay the subsequent
               shutup and talk, then in some cases the beep is not played: if
               the end of a previous utterance is still playing from the pcm buf,
               the beep fails, even if there would seem to remain enough time
               to the utterance to mix in the beep.  Somehow, the following voice utterance is suppressed on e200,
               but not on x5. Work around...  FIXME:  Is this really needed? If we have just very recently started talking, then we want
           to stay silent for a while until things settle. Likewise if
           we already had a pending scheduled announcement not yet due
           we need to reschedule it.  work done 
 * Selects an item in the list
 *  - gui_list : the list structure
 *  - item_number : the number of the item which will be selected
 
 * Adds an item to the list (the callback will be asked for one more item)
 * - gui_list : the list structure
  if only one item in the list, select it 
 * Removes an item to the list (the callback will be asked for one less item)
 * - gui_list : the list structure
 
 * Set the title and title icon of the list. Setting title to NULL disables
 * both the title and icon. Use NOICON if there is no icon.
 
 * Makes all the item in the list scroll by one step to the right.
 * Should stop increasing the value when reaching the widest item value
 * in the list.
  FIXME: This is a fake right boundry limiter. there should be some
        * callback function to find the longest item on the list in pixels,
        * to stop the list from scrolling past that point 
 * Makes all the item in the list scroll by one step to the left.
 * stops at starting position.
  block the beep if we are at the end of the list and we are not wrapping.
     * CAVEAT: mosts lists don't set limit_scroll untill it sees a repeat
     * press at the end of the list so this can cause an extra beep.
     
 * Magic to make sure the list gets updated correctly if the skin does
 * something naughty like a full screen update when we are in a button
 * loop.
 *
 * The GUI_EVENT_NEED_UI_UPDATE event is registered for in list_do_action_timeout()
 * and unregistered in gui_synclict_do_button(). This is done because
 * if something is using the list UI they *must* be calling those
 * two functions in the correct order or the list wont work.
  cancel kinetic if we got a normal button event  Disable the skin redraw callback  up two because the falthrough brings it down one  After this button press ACTION_TREE_PGLEFT is allowed
            to skip to root. ACTION_TREE_ROOT_INIT must be defined in the
            keymaps as a repeated button press (the same as the repeated
            ACTION_TREE_PGLEFT) with the pre condition being the non-repeated
            button press. Leave out ACTION_TREE_ROOT_INIT in your keymaps to
            disable cancel action by PGLEFT key (e.g. if PGLEFT and CANCEL
            are mapped to different keys)  stop ACTION_TREE_PAGE_LEFT
                                            skipping to root  for pgup / pgdown, we are obliged to have a different behaviour depending
 * on the screen for which the user pressed the key since for example, remote
 * and main screen doesn't have the same number of lines  scheduled postponed item announcement is due  Returns the lowest of timeout or the delay until a postponed
   scheduled announcement is due (if any).  +1 because the trigger condition uses TIME_AFTER(), which
           is implemented as strictly greater than.  Combines the get_action() (with possibly overridden timeout) and
   gui_synclist_do_button() calls. Returns the list action from
   do_button, and places the action from get_action in *action.  Simple use list implementation  set the amount of lines shown in the list  get the current amount of lines shown  add/edit a line in the list.
   if line_number > number of lines shown it adds the line,
   else it edits the line  We must yield in this case or no other thread can run  callback asked us to exit **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 by Kevin Ferrare
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** The minimum number of pending button events in queue before starting
 * to limit list drawing interval.
  pixels per screen scroll step  should lines scroll out of the screen  the 4/12 factor is designed for reasonable item size on a 160dpi screen 
 * Initializes a scrolling list
 *  - gui_list : the list structure to initialize
 *  - callback_get_item_name : pointer to a function that associates a label
 *    to a given item number
 *  - data : extra data passed to the list callback
 *  - scroll_all :
 *  - selected_size :
 *  - parent : the parent viewports to use. NULL means the full screen minus
 *             statusbar if enabled. NOTE: new screens should NOT set this to NULL.
  this toggles the selection bar or cursor  if text is smaller than view  if text got out of view  
 * Force a full screen update.
  sets up the list so the selection is shown correctly on the screen  list moved up  list moved down  a bounce  Next thing the list code will do is go speak the item, doing
           a talk_shutup() first. Shutup now so the beep is clearer, and
           make sure the subsequent shutup is skipped because otherwise
           it'd kill the pcm buffer.  On at least x5: if, instead of the above shutup, I insert a
               sleep just after the beep_play() call, to delay the subsequent
               shutup and talk, then in some cases the beep is not played: if
               the end of a previous utterance is still playing from the pcm buf,
               the beep fails, even if there would seem to remain enough time
               to the utterance to mix in the beep.  Somehow, the following voice utterance is suppressed on e200,
               but not on x5. Work around...  FIXME:  Is this really needed? If we have just very recently started talking, then we want
           to stay silent for a while until things settle. Likewise if
           we already had a pending scheduled announcement not yet due
           we need to reschedule it.  work done 
 * Selects an item in the list
 *  - gui_list : the list structure
 *  - item_number : the number of the item which will be selected
 
 * Adds an item to the list (the callback will be asked for one more item)
 * - gui_list : the list structure
  if only one item in the list, select it 
 * Removes an item to the list (the callback will be asked for one less item)
 * - gui_list : the list structure
 
 * Set the title and title icon of the list. Setting title to NULL disables
 * both the title and icon. Use NOICON if there is no icon.
 
 * Makes all the item in the list scroll by one step to the right.
 * Should stop increasing the value when reaching the widest item value
 * in the list.
  FIXME: This is a fake right boundry limiter. there should be some
        * callback function to find the longest item on the list in pixels,
        * to stop the list from scrolling past that point 
 * Makes all the item in the list scroll by one step to the left.
 * stops at starting position.
  block the beep if we are at the end of the list and we are not wrapping.
     * CAVEAT: mosts lists don't set limit_scroll untill it sees a repeat
     * press at the end of the list so this can cause an extra beep.
     
 * Magic to make sure the list gets updated correctly if the skin does
 * something naughty like a full screen update when we are in a button
 * loop.
 *
 * The GUI_EVENT_NEED_UI_UPDATE event is registered for in list_do_action_timeout()
 * and unregistered in gui_synclict_do_button(). This is done because
 * if something is using the list UI they *must* be calling those
 * two functions in the correct order or the list wont work.
  cancel kinetic if we got a normal button event  Disable the skin redraw callback  up two because the falthrough brings it down one  After this button press ACTION_TREE_PGLEFT is allowed
            to skip to root. ACTION_TREE_ROOT_INIT must be defined in the
            keymaps as a repeated button press (the same as the repeated
            ACTION_TREE_PGLEFT) with the pre condition being the non-repeated
            button press. Leave out ACTION_TREE_ROOT_INIT in your keymaps to
            disable cancel action by PGLEFT key (e.g. if PGLEFT and CANCEL
            are mapped to different keys)  stop ACTION_TREE_PAGE_LEFT
                                            skipping to root  for pgup / pgdown, we are obliged to have a different behaviour depending
 * on the screen for which the user pressed the key since for example, remote
 * and main screen doesn't have the same number of lines  scheduled postponed item announcement is due  Returns the lowest of timeout or the delay until a postponed
   scheduled announcement is due (if any).  +1 because the trigger condition uses TIME_AFTER(), which
           is implemented as strictly greater than.  Combines the get_action() (with possibly overridden timeout) and
   gui_synclist_do_button() calls. Returns the list action from
   do_button, and places the action from get_action in *action.  Simple use list implementation  set the amount of lines shown in the list  get the current amount of lines shown  add/edit a line in the list.
   if line_number > number of lines shown it adds the line,
   else it edits the line  We must yield in this case or no other thread can run  callback asked us to exit **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 by Kevin Ferrare
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** The minimum number of pending button events in queue before starting
 * to limit list drawing interval.
  pixels per screen scroll step  should lines scroll out of the screen  the 4/12 factor is designed for reasonable item size on a 160dpi screen 
 * Initializes a scrolling list
 *  - gui_list : the list structure to initialize
 *  - callback_get_item_name : pointer to a function that associates a label
 *    to a given item number
 *  - data : extra data passed to the list callback
 *  - scroll_all :
 *  - selected_size :
 *  - parent : the parent viewports to use. NULL means the full screen minus
 *             statusbar if enabled. NOTE: new screens should NOT set this to NULL.
  this toggles the selection bar or cursor  if text is smaller than view  if text got out of view  
 * Force a full screen update.
  sets up the list so the selection is shown correctly on the screen  list moved up  list moved down  a bounce  Next thing the list code will do is go speak the item, doing
           a talk_shutup() first. Shutup now so the beep is clearer, and
           make sure the subsequent shutup is skipped because otherwise
           it'd kill the pcm buffer.  On at least x5: if, instead of the above shutup, I insert a
               sleep just after the beep_play() call, to delay the subsequent
               shutup and talk, then in some cases the beep is not played: if
               the end of a previous utterance is still playing from the pcm buf,
               the beep fails, even if there would seem to remain enough time
               to the utterance to mix in the beep.  Somehow, the following voice utterance is suppressed on e200,
               but not on x5. Work around...  FIXME:  Is this really needed? If we have just very recently started talking, then we want
           to stay silent for a while until things settle. Likewise if
           we already had a pending scheduled announcement not yet due
           we need to reschedule it.  work done 
 * Selects an item in the list
 *  - gui_list : the list structure
 *  - item_number : the number of the item which will be selected
 
 * Adds an item to the list (the callback will be asked for one more item)
 * - gui_list : the list structure
  if only one item in the list, select it 
 * Removes an item to the list (the callback will be asked for one less item)
 * - gui_list : the list structure
 
 * Set the title and title icon of the list. Setting title to NULL disables
 * both the title and icon. Use NOICON if there is no icon.
 
 * Makes all the item in the list scroll by one step to the right.
 * Should stop increasing the value when reaching the widest item value
 * in the list.
  FIXME: This is a fake right boundry limiter. there should be some
        * callback function to find the longest item on the list in pixels,
        * to stop the list from scrolling past that point 
 * Makes all the item in the list scroll by one step to the left.
 * stops at starting position.
  block the beep if we are at the end of the list and we are not wrapping.
     * CAVEAT: mosts lists don't set limit_scroll untill it sees a repeat
     * press at the end of the list so this can cause an extra beep.
     
 * Magic to make sure the list gets updated correctly if the skin does
 * something naughty like a full screen update when we are in a button
 * loop.
 *
 * The GUI_EVENT_NEED_UI_UPDATE event is registered for in list_do_action_timeout()
 * and unregistered in gui_synclict_do_button(). This is done because
 * if something is using the list UI they *must* be calling those
 * two functions in the correct order or the list wont work.
  cancel kinetic if we got a normal button event  Disable the skin redraw callback  up two because the falthrough brings it down one  After this button press ACTION_TREE_PGLEFT is allowed
            to skip to root. ACTION_TREE_ROOT_INIT must be defined in the
            keymaps as a repeated button press (the same as the repeated
            ACTION_TREE_PGLEFT) with the pre condition being the non-repeated
            button press. Leave out ACTION_TREE_ROOT_INIT in your keymaps to
            disable cancel action by PGLEFT key (e.g. if PGLEFT and CANCEL
            are mapped to different keys)  stop ACTION_TREE_PAGE_LEFT
                                            skipping to root  for pgup / pgdown, we are obliged to have a different behaviour depending
 * on the screen for which the user pressed the key since for example, remote
 * and main screen doesn't have the same number of lines  scheduled postponed item announcement is due  Returns the lowest of timeout or the delay until a postponed
   scheduled announcement is due (if any).  +1 because the trigger condition uses TIME_AFTER(), which
           is implemented as strictly greater than.  Combines the get_action() (with possibly overridden timeout) and
   gui_synclist_do_button() calls. Returns the list action from
   do_button, and places the action from get_action in *action.  Simple use list implementation  set the amount of lines shown in the list  get the current amount of lines shown  add/edit a line in the list.
   if line_number > number of lines shown it adds the line,
   else it edits the line  We must yield in this case or no other thread can run  callback asked us to exit 