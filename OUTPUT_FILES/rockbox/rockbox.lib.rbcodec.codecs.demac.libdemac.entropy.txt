

libdemac - A Monkey's Audio decoder

$Id$

Copyright (C) Dave Chapman 2007

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA


  The following counts arrays for use with the range decoder are
  hard-coded in the Monkey's Audio decoder.
 counts_diff_3970[i] = counts_3970[i+1] - counts_3970[i]  counts_diff_3980[i] = counts_3980[i+1] - counts_3980[i] 

Range decoder adapted from rangecod.c included in:

  http://www.compressconsult.com/rangecoder/rngcod13.zip

  rangecod.c     range encoding

  (c) Michael Schindler
  1997, 1998, 1999, 2000
  http://www.compressconsult.com/
  michael@compressconsult.com

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.


The encoding functions were removed, and functions turned into "static
inline" functions. Some minor cosmetic changes were made (e.g. turning
pre-processor symbols into upper-case, removing the rc parameter from
each function (and the RNGC macro)).

 BITSTREAM READING FUNCTIONS  We deal with the input data one byte at a time - to ensure
   functionality on CPUs of any endianness regardless of any requirements
   for aligned reads.
 RANGE DECODING FUNCTIONS  SIZE OF RANGE ENCODING CODE VALUES.  low end of interval  length of interval  bytes_to_follow resp. intermediate value  buffer for input/output  Start the decoder  Calculate culmulative frequency for next symbol. Does NO update! tot_f is the total frequency                               or: totf is (code_value)1<<shift                                       returns the culmulative frequency                          Update decoding state                                      sy_f is the interval length (frequency of the symbol)      lt_f is the lower end (frequency sum of < symbols)         Decode a byte/short without modelling                      Decode n bits (n <= 16) without modelling - based on range_decode_short  Finish decoding                                            normalize to use up all bytes 
  range_get_symbol_* functions based on main decoding loop in simple_d.c from
  http://www.compressconsult.com/rangecoder/rngcod13.zip
  (c) Michael Schindler
 figure out the symbol inefficiently; a binary search would be much better  figure out the symbol inefficiently; a binary search would be much better  MAIN DECODING FUNCTIONS  Codepath for 24-bit streams  Count the number of bits in pivot  We know there must be at least 17 bits  base_lo is the low (nbits-16) bits of base
           base_hi is the high 16 bits of base
         Codepath for 16-bit streams  Convert to signed  Convert to signed  Read the CRC  Read the frame flags if they exist  Keep a count of the blocks decoded in this frame  Initialise the rice structs  The first 8 bits of input are ignored.  Return the new state of the buffer  We are pure silence, just memset the output buffer.  Return the new state of the buffer 

libdemac - A Monkey's Audio decoder

$Id$

Copyright (C) Dave Chapman 2007

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA


  The following counts arrays for use with the range decoder are
  hard-coded in the Monkey's Audio decoder.
 counts_diff_3970[i] = counts_3970[i+1] - counts_3970[i]  counts_diff_3980[i] = counts_3980[i+1] - counts_3980[i] 

Range decoder adapted from rangecod.c included in:

  http://www.compressconsult.com/rangecoder/rngcod13.zip

  rangecod.c     range encoding

  (c) Michael Schindler
  1997, 1998, 1999, 2000
  http://www.compressconsult.com/
  michael@compressconsult.com

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.


The encoding functions were removed, and functions turned into "static
inline" functions. Some minor cosmetic changes were made (e.g. turning
pre-processor symbols into upper-case, removing the rc parameter from
each function (and the RNGC macro)).

 BITSTREAM READING FUNCTIONS  We deal with the input data one byte at a time - to ensure
   functionality on CPUs of any endianness regardless of any requirements
   for aligned reads.
 RANGE DECODING FUNCTIONS  SIZE OF RANGE ENCODING CODE VALUES.  low end of interval  length of interval  bytes_to_follow resp. intermediate value  buffer for input/output  Start the decoder  Calculate culmulative frequency for next symbol. Does NO update! tot_f is the total frequency                               or: totf is (code_value)1<<shift                                       returns the culmulative frequency                          Update decoding state                                      sy_f is the interval length (frequency of the symbol)      lt_f is the lower end (frequency sum of < symbols)         Decode a byte/short without modelling                      Decode n bits (n <= 16) without modelling - based on range_decode_short  Finish decoding                                            normalize to use up all bytes 
  range_get_symbol_* functions based on main decoding loop in simple_d.c from
  http://www.compressconsult.com/rangecoder/rngcod13.zip
  (c) Michael Schindler
 figure out the symbol inefficiently; a binary search would be much better  figure out the symbol inefficiently; a binary search would be much better  MAIN DECODING FUNCTIONS  Codepath for 24-bit streams  Count the number of bits in pivot  We know there must be at least 17 bits  base_lo is the low (nbits-16) bits of base
           base_hi is the high 16 bits of base
         Codepath for 16-bit streams  Convert to signed  Convert to signed  Read the CRC  Read the frame flags if they exist  Keep a count of the blocks decoded in this frame  Initialise the rice structs  The first 8 bits of input are ignored.  Return the new state of the buffer  We are pure silence, just memset the output buffer.  Return the new state of the buffer 

libdemac - A Monkey's Audio decoder

$Id$

Copyright (C) Dave Chapman 2007

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA


  The following counts arrays for use with the range decoder are
  hard-coded in the Monkey's Audio decoder.
 counts_diff_3970[i] = counts_3970[i+1] - counts_3970[i]  counts_diff_3980[i] = counts_3980[i+1] - counts_3980[i] 

Range decoder adapted from rangecod.c included in:

  http://www.compressconsult.com/rangecoder/rngcod13.zip

  rangecod.c     range encoding

  (c) Michael Schindler
  1997, 1998, 1999, 2000
  http://www.compressconsult.com/
  michael@compressconsult.com

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.


The encoding functions were removed, and functions turned into "static
inline" functions. Some minor cosmetic changes were made (e.g. turning
pre-processor symbols into upper-case, removing the rc parameter from
each function (and the RNGC macro)).

 BITSTREAM READING FUNCTIONS  We deal with the input data one byte at a time - to ensure
   functionality on CPUs of any endianness regardless of any requirements
   for aligned reads.
 RANGE DECODING FUNCTIONS  SIZE OF RANGE ENCODING CODE VALUES.  low end of interval  length of interval  bytes_to_follow resp. intermediate value  buffer for input/output  Start the decoder  Calculate culmulative frequency for next symbol. Does NO update! tot_f is the total frequency                               or: totf is (code_value)1<<shift                                       returns the culmulative frequency                          Update decoding state                                      sy_f is the interval length (frequency of the symbol)      lt_f is the lower end (frequency sum of < symbols)         Decode a byte/short without modelling                      Decode n bits (n <= 16) without modelling - based on range_decode_short  Finish decoding                                            normalize to use up all bytes 
  range_get_symbol_* functions based on main decoding loop in simple_d.c from
  http://www.compressconsult.com/rangecoder/rngcod13.zip
  (c) Michael Schindler
 figure out the symbol inefficiently; a binary search would be much better  figure out the symbol inefficiently; a binary search would be much better  MAIN DECODING FUNCTIONS  Codepath for 24-bit streams  Count the number of bits in pivot  We know there must be at least 17 bits  base_lo is the low (nbits-16) bits of base
           base_hi is the high 16 bits of base
         Codepath for 16-bit streams  Convert to signed  Convert to signed  Read the CRC  Read the frame flags if they exist  Keep a count of the blocks decoded in this frame  Initialise the rice structs  The first 8 bits of input are ignored.  Return the new state of the buffer  We are pure silence, just memset the output buffer.  Return the new state of the buffer 