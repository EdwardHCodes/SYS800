**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 Daniel Stenberg
 * Copyright (C) 2014 Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** we need to remember the open directory path  Windows (and potentially other OSes) distinguish binary and text files.
 * Define a dummy for the others.  The host OS file descriptor  Is host volume still mounted?  The virtual volume number  Host OS directory file descriptor  Host fd is another open file  Host OS directory stream  Host OS directory path  Rockbox directory entry  Virtual volume number  Counter for root volume entries  Is the virtual volume still mounted?  Volumes (secondary file systems) get inserted into the system root
     * directory. If the path specified volume 0, enumeration will not
     * include other volumes, but just its own files and directories.
     *
     * Fake special directories, which don't really exist, that will get
     * redirected upon opendir()
      on the system root  do normal directory entry fetching  HAVE_MULTIVOLUME  HAVE_MULTIVOLUME  do normal directory entry fetching * Internal functions **
 * Handle drive extraction by pretending the files' volumes no longer exist
 * and invalidating their I/O for the remainder of their lifetimes as would
 * happen on a native target
  HAVE_MULTIDRIVE *
 * Provides target-like path parsing behavior with single and multiple volumes
 * while performing minimal transforming of the input.
 *
 * Paths are sandboxed to the simulated namespace:
 *   e.g. "{simdir}/foo/../../../../bar" becomes "{simdir}/foo/../bar"
  Prepend sim root  Track the last valid volume spec encountered  Basename of sim dir to switch back to simdisk from ext  Basename of ext directory to switch to alternate volume  HAVE_MULTIVOLUME  Path ends with a separator; preserve that  Volume spec only valid @ root level  Feign failure if the volume isn't "mounted"  HAVE_MULTIDRIVE  HAVE_MULTIVOLUME  Can't go above root; erase  Going up from a volume root and back down to the sys root  Get the main simdisk directory so it can be reentered  This is nonsense and won't work  HAVE_MULTIVOLUME  end switch * File functions * Pretend they're different devices * Directory functions * Mark as invalid  A-Okay  no fstatat; build file name for stat()  get info  os_fstatat  File size larger than 2 GB?  HAVE_MULTIVOLUME **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 Daniel Stenberg
 * Copyright (C) 2014 Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** we need to remember the open directory path  Windows (and potentially other OSes) distinguish binary and text files.
 * Define a dummy for the others.  The host OS file descriptor  Is host volume still mounted?  The virtual volume number  Host OS directory file descriptor  Host fd is another open file  Host OS directory stream  Host OS directory path  Rockbox directory entry  Virtual volume number  Counter for root volume entries  Is the virtual volume still mounted?  Volumes (secondary file systems) get inserted into the system root
     * directory. If the path specified volume 0, enumeration will not
     * include other volumes, but just its own files and directories.
     *
     * Fake special directories, which don't really exist, that will get
     * redirected upon opendir()
      on the system root  do normal directory entry fetching  HAVE_MULTIVOLUME  HAVE_MULTIVOLUME  do normal directory entry fetching * Internal functions **
 * Handle drive extraction by pretending the files' volumes no longer exist
 * and invalidating their I/O for the remainder of their lifetimes as would
 * happen on a native target
  HAVE_MULTIDRIVE *
 * Provides target-like path parsing behavior with single and multiple volumes
 * while performing minimal transforming of the input.
 *
 * Paths are sandboxed to the simulated namespace:
 *   e.g. "{simdir}/foo/../../../../bar" becomes "{simdir}/foo/../bar"
  Prepend sim root  Track the last valid volume spec encountered  Basename of sim dir to switch back to simdisk from ext  Basename of ext directory to switch to alternate volume  HAVE_MULTIVOLUME  Path ends with a separator; preserve that  Volume spec only valid @ root level  Feign failure if the volume isn't "mounted"  HAVE_MULTIDRIVE  HAVE_MULTIVOLUME  Can't go above root; erase  Going up from a volume root and back down to the sys root  Get the main simdisk directory so it can be reentered  This is nonsense and won't work  HAVE_MULTIVOLUME  end switch * File functions * Pretend they're different devices * Directory functions * Mark as invalid  A-Okay  no fstatat; build file name for stat()  get info  os_fstatat  File size larger than 2 GB?  HAVE_MULTIVOLUME **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 Daniel Stenberg
 * Copyright (C) 2014 Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** we need to remember the open directory path  Windows (and potentially other OSes) distinguish binary and text files.
 * Define a dummy for the others.  The host OS file descriptor  Is host volume still mounted?  The virtual volume number  Host OS directory file descriptor  Host fd is another open file  Host OS directory stream  Host OS directory path  Rockbox directory entry  Virtual volume number  Counter for root volume entries  Is the virtual volume still mounted?  Volumes (secondary file systems) get inserted into the system root
     * directory. If the path specified volume 0, enumeration will not
     * include other volumes, but just its own files and directories.
     *
     * Fake special directories, which don't really exist, that will get
     * redirected upon opendir()
      on the system root  do normal directory entry fetching  HAVE_MULTIVOLUME  HAVE_MULTIVOLUME  do normal directory entry fetching * Internal functions **
 * Handle drive extraction by pretending the files' volumes no longer exist
 * and invalidating their I/O for the remainder of their lifetimes as would
 * happen on a native target
  HAVE_MULTIDRIVE *
 * Provides target-like path parsing behavior with single and multiple volumes
 * while performing minimal transforming of the input.
 *
 * Paths are sandboxed to the simulated namespace:
 *   e.g. "{simdir}/foo/../../../../bar" becomes "{simdir}/foo/../bar"
  Prepend sim root  Track the last valid volume spec encountered  Basename of sim dir to switch back to simdisk from ext  Basename of ext directory to switch to alternate volume  HAVE_MULTIVOLUME  Path ends with a separator; preserve that  Volume spec only valid @ root level  Feign failure if the volume isn't "mounted"  HAVE_MULTIDRIVE  HAVE_MULTIVOLUME  Can't go above root; erase  Going up from a volume root and back down to the sys root  Get the main simdisk directory so it can be reentered  This is nonsense and won't work  HAVE_MULTIVOLUME  end switch * File functions * Pretend they're different devices * Directory functions * Mark as invalid  A-Okay  no fstatat; build file name for stat()  get info  os_fstatat  File size larger than 2 GB?  HAVE_MULTIVOLUME 