*
 * Instances of DeviceDriverProvider(s) could be scattered through
 * the codebase and are assembled together via the Service loader factory.
 * One of examples of this is
 * org.mdpnp.apps.testapp.org.mdpnp.apps.testapp.DeviceFactory.
 *
 *
 *
     * @return metadate for the device suitable for building user
     * interfaces and wiring subcomponents based on the subtype
     * requirements.
     *
     * @param context
     * @return an actual device driver. There should be a lot of different
     * implementations of this API.
     * @throws Exception
     *
     * @param context
     * @return a wrapper for the driver that encapsulates lifecycle. The line between
     * AbstractDevice vs DeviceAdapter is muddy - in purity of OOP there should be a more
     * well-defined boundaries.
     *
     * @throws Exception
     *
     * An interface for the device driver that is presented to the rest of the system. The base AbstractDevice object
     * became too overloaded with being a responsible for both device interactions and assembly of infrastructure that
     * a higher-level entity evolved. Though we moved all drivers to be assembled via spring ioc container, any
     * alternative implementation will be supported as long as the interface is implemented.
     *
     * @see SpringDecorator
     *
     * An implementation of DeviceDriverProvider that is using spring container for
     * the assembly of the component. String configuration could be very different
     * depending on sophistication of the driver, but for a some of them beans provided
     * in the basic DriverContext.xml should be sufficient. The purpose of this wrapper is
     * to initialize the context in such a way that driverFactoryProcessor bean produces a
     * driver of a desired type. This is still abstract as it does not deal with actual
     * devices.
      set the context name to something readable and unique. this name will be used to create jmx names for the beans that are to be exposed for management. create a post processor to inject a device factory with the appropriate device implementation. Register the bean post processor with the context. This will wire it up and it will be able to assign the specified driver provider. parent context will have a property resolver installed. We waht to make sure it is propagated down to child context so that we variable expantion works there as well. now create them all. only care to trap parent close events to kill the child context*
     * factory to create an instance of the device adapter for a particular device driver. It is used
     * in the generic DriverContext.xml spring configuration file. Not an ideal thing as we do a few
     * autowiring things here that the container should be doing for us, but the alternative is for
     * force each driver to have its own spring configuration. Dunno.
     *
     * When device drivers are created as children of supervisor app, there will be multiple instances of the
     * same beans. To differentiate between them, we need to assigned them different names based on the device id
     * they are assigned to.
     *
     * Utility to pick unique names for jmx beans - jmx namespace is flat so we need to suffix all
     * managed beans with the id of the context they came from.
     