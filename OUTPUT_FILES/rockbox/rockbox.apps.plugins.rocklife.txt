**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 Matthias Wientapper
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * This is an implementatino of Conway's Game of Life
 *
 * from http://en.wikipedia.org/wiki/Conway's_Game_of_Life:
 *
 * Rules
 *
 * The universe of the Game of Life is an infinite two-dimensional
 * orthogonal grid of square cells, each of which is in one of two
 * possible states, live or dead. Every cell interacts with its eight
 * neighbours, which are the cells that are directly horizontally,
 * vertically, or diagonally adjacent. At each step in time, the
 * following transitions occur:
 *
 * 1. Any live cell with fewer than two live neighbours dies, as if by
 *    loneliness.
 *
 * 2. Any live cell with more than three live neighbours dies, as if
 *    by overcrowding.
 *
 * 3. Any live cell with two or three live neighbours lives,
 *    unchanged, to the next generation.
 *
 * 4. Any dead cell with exactly three live neighbours comes to life.
 *
 * The initial pattern constitutes the first generation of the
 * system. The second generation is created by applying the above
 * rules simultaneously to every cell in the first generation --
 * births and deaths happen simultaneously, and the discrete moment at
 * which this happens is sometimes called a tick. (In other words,
 * each generation is based entirely on the one before.) The rules
 * continue to be applied repeatedly to create further generations.
 *
 *
 *
 * TODO:
 *       - nicer colours for pixels with respect to age
 *       - editor for start patterns
 *       - probably tons of speed-up opportunities
  clear grid fill grid with pattern from file (viewer mode) fill grid with initial pattern  two oscilators, debug pattern  fill screen randomly  display grid  Calculates whether the cell will be alive in the next generation.
   n is the array with 9 elements that represent the cell itself and its
   neighborhood like this (the cell itself is n[4]):
   0 1 2
   3 4 5
   6 7 8
 count empty neighbour cells  now we build the number of non-zero neighbours :-P  If the cell is alive, it stays alive iff it has 2 or 3 alive neighbours  If the cell is dead, it gets alive iff it has 3 alive neighbours  Calculate the next generation of cells
 *
 * The borders of the grid are connected to their opposite sides.
 *
 * To avoid multiplications while accessing data in the 2-d grid
 * (pgrid) we try to re-use previously accessed neighbourhood
 * information which is stored in an 3x3 array.
 
     * cell is (4) with 8 neighbours
     *
     *   0|1|2
     *   -----
     *   3|4|5
     *   -----
     *   6|7|8
      go through the grid  first cell in first row, we have to load all neighbours  beginning of a row, copy what we know about our predecessor,
                       0, 1, 3, 4 are known, 2, 5, 6, 7, 8 have to be loaded
                     we are moving right in a row,
                     * copy what we know about the neighbours on our left side,
                     * 2, 5, 8 have to be loaded
                      how old is our cell?  calculate the cell based on given neighbour information  is the actual cell alive?  prevent overflow ******************************** this is the plugin entry point ******************************** rockbox blue  HAVE_LCD_COLOR  LCD_DEPTH > 1  link pointers to grids  fall back to stored patterns  calculate next generation  swap buffers, grid is the new generation  show new generation  calculate next generation  swap buffers, grid is the new generation  show new generation  quit plugin **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 Matthias Wientapper
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * This is an implementatino of Conway's Game of Life
 *
 * from http://en.wikipedia.org/wiki/Conway's_Game_of_Life:
 *
 * Rules
 *
 * The universe of the Game of Life is an infinite two-dimensional
 * orthogonal grid of square cells, each of which is in one of two
 * possible states, live or dead. Every cell interacts with its eight
 * neighbours, which are the cells that are directly horizontally,
 * vertically, or diagonally adjacent. At each step in time, the
 * following transitions occur:
 *
 * 1. Any live cell with fewer than two live neighbours dies, as if by
 *    loneliness.
 *
 * 2. Any live cell with more than three live neighbours dies, as if
 *    by overcrowding.
 *
 * 3. Any live cell with two or three live neighbours lives,
 *    unchanged, to the next generation.
 *
 * 4. Any dead cell with exactly three live neighbours comes to life.
 *
 * The initial pattern constitutes the first generation of the
 * system. The second generation is created by applying the above
 * rules simultaneously to every cell in the first generation --
 * births and deaths happen simultaneously, and the discrete moment at
 * which this happens is sometimes called a tick. (In other words,
 * each generation is based entirely on the one before.) The rules
 * continue to be applied repeatedly to create further generations.
 *
 *
 *
 * TODO:
 *       - nicer colours for pixels with respect to age
 *       - editor for start patterns
 *       - probably tons of speed-up opportunities
  clear grid fill grid with pattern from file (viewer mode) fill grid with initial pattern  two oscilators, debug pattern  fill screen randomly  display grid  Calculates whether the cell will be alive in the next generation.
   n is the array with 9 elements that represent the cell itself and its
   neighborhood like this (the cell itself is n[4]):
   0 1 2
   3 4 5
   6 7 8
 count empty neighbour cells  now we build the number of non-zero neighbours :-P  If the cell is alive, it stays alive iff it has 2 or 3 alive neighbours  If the cell is dead, it gets alive iff it has 3 alive neighbours  Calculate the next generation of cells
 *
 * The borders of the grid are connected to their opposite sides.
 *
 * To avoid multiplications while accessing data in the 2-d grid
 * (pgrid) we try to re-use previously accessed neighbourhood
 * information which is stored in an 3x3 array.
 
     * cell is (4) with 8 neighbours
     *
     *   0|1|2
     *   -----
     *   3|4|5
     *   -----
     *   6|7|8
      go through the grid  first cell in first row, we have to load all neighbours  beginning of a row, copy what we know about our predecessor,
                       0, 1, 3, 4 are known, 2, 5, 6, 7, 8 have to be loaded
                     we are moving right in a row,
                     * copy what we know about the neighbours on our left side,
                     * 2, 5, 8 have to be loaded
                      how old is our cell?  calculate the cell based on given neighbour information  is the actual cell alive?  prevent overflow ******************************** this is the plugin entry point ******************************** rockbox blue  HAVE_LCD_COLOR  LCD_DEPTH > 1  link pointers to grids  fall back to stored patterns  calculate next generation  swap buffers, grid is the new generation  show new generation  calculate next generation  swap buffers, grid is the new generation  show new generation  quit plugin **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 Matthias Wientapper
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * This is an implementatino of Conway's Game of Life
 *
 * from http://en.wikipedia.org/wiki/Conway's_Game_of_Life:
 *
 * Rules
 *
 * The universe of the Game of Life is an infinite two-dimensional
 * orthogonal grid of square cells, each of which is in one of two
 * possible states, live or dead. Every cell interacts with its eight
 * neighbours, which are the cells that are directly horizontally,
 * vertically, or diagonally adjacent. At each step in time, the
 * following transitions occur:
 *
 * 1. Any live cell with fewer than two live neighbours dies, as if by
 *    loneliness.
 *
 * 2. Any live cell with more than three live neighbours dies, as if
 *    by overcrowding.
 *
 * 3. Any live cell with two or three live neighbours lives,
 *    unchanged, to the next generation.
 *
 * 4. Any dead cell with exactly three live neighbours comes to life.
 *
 * The initial pattern constitutes the first generation of the
 * system. The second generation is created by applying the above
 * rules simultaneously to every cell in the first generation --
 * births and deaths happen simultaneously, and the discrete moment at
 * which this happens is sometimes called a tick. (In other words,
 * each generation is based entirely on the one before.) The rules
 * continue to be applied repeatedly to create further generations.
 *
 *
 *
 * TODO:
 *       - nicer colours for pixels with respect to age
 *       - editor for start patterns
 *       - probably tons of speed-up opportunities
  clear grid fill grid with pattern from file (viewer mode) fill grid with initial pattern  two oscilators, debug pattern  fill screen randomly  display grid  Calculates whether the cell will be alive in the next generation.
   n is the array with 9 elements that represent the cell itself and its
   neighborhood like this (the cell itself is n[4]):
   0 1 2
   3 4 5
   6 7 8
 count empty neighbour cells  now we build the number of non-zero neighbours :-P  If the cell is alive, it stays alive iff it has 2 or 3 alive neighbours  If the cell is dead, it gets alive iff it has 3 alive neighbours  Calculate the next generation of cells
 *
 * The borders of the grid are connected to their opposite sides.
 *
 * To avoid multiplications while accessing data in the 2-d grid
 * (pgrid) we try to re-use previously accessed neighbourhood
 * information which is stored in an 3x3 array.
 
     * cell is (4) with 8 neighbours
     *
     *   0|1|2
     *   -----
     *   3|4|5
     *   -----
     *   6|7|8
      go through the grid  first cell in first row, we have to load all neighbours  beginning of a row, copy what we know about our predecessor,
                       0, 1, 3, 4 are known, 2, 5, 6, 7, 8 have to be loaded
                     we are moving right in a row,
                     * copy what we know about the neighbours on our left side,
                     * 2, 5, 8 have to be loaded
                      how old is our cell?  calculate the cell based on given neighbour information  is the actual cell alive?  prevent overflow ******************************** this is the plugin entry point ******************************** rockbox blue  HAVE_LCD_COLOR  LCD_DEPTH > 1  link pointers to grids  fall back to stored patterns  calculate next generation  swap buffers, grid is the new generation  show new generation  calculate next generation  swap buffers, grid is the new generation  show new generation  quit plugin 