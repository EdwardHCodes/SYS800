	MikMod sound library
	(c) 1998, 1999, 2000, 2001, 2002 Miodrag Vallat and others - see file
	AUTHORS for complete list.

	This library is free software; you can redistribute it and/or modify
	it under the terms of the GNU Library General Public License as
	published by the Free Software Foundation; either version 2 of
	the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Library General Public License for more details.

	You should have received a copy of the GNU Library General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
	02111-1307, USA.
==============================================================================

  $Id$

  Impulse tracker (IT) module loader

======================================================================================== Module structure  header  Created with tracker (y.xx = 0x0yxx)  Compatible with tracker ver > than val.  bit 0 set = song message attached  mixing volume [ignored]  panning separation between channels  sample information  sample conversion flag  0=sine, 1=rampdown, 2=square, 3=random (speed ignored)  instrument information  (dword) Instrument size  (char) Instrument filename  (byte) Instrument type (always 0)  (byte) Volume loop start (node)  (byte) Volume loop end (node)  (byte) Volume sustain begin (node)  (byte) Volume Sustain end (node)  (byte) channel loop start (node)  (byte) channel loop end (node)  (byte) channel sustain begin (node)  (byte) channel Sustain end (node)  (byte) pitch loop start (node)  (byte) pitch loop end (node)  (byte) pitch sustain begin (node)  (byte) pitch Sustain end (node)  Envelope end / NNA volume fadeout  Duplicate note check  Duplicate check action  Duplicate check type  New Note Action [0,1,2,3]  tracker version used to save [files only]  Pitch-pan Separation  Pitch-pan Center  random volume varations  random panning varations  Number of samples in instrument [files only]  Instrument name  sample for each note [note / samp pairs]  volume envelope (IT 1.x stuff)  volume tick position (IT 1.x stuff)  amplitude of volume nodes  tick value of volume nodes  panenv - node points  tick value of panning nodes  pitchenv - node points  tick value of pitch nodes  unpacked note ========== Loader data  parapointer array (see IT docs)  allocate to space for one full pattern  arrays allocated to 64 elements and used for  uncompressing IT's pattern information  if set, use S3M old-effects stuffs  table for porta-to-note command within volume/panning column ========== Loader code  Because so many IT files have 64 channels as the set number used, but really
   only use far less (usually from 8 to 24 still), I had to make this function,
   which determines the number of channels that are actually USED by a pattern.

   NOTE: You must first seek to the file location of the pattern before calling
   this procedure.

   Returns 0 on error
 note cut command  crap  process volume / panning column
		   volume / panning effects do NOT all share the same memory address
		   yet.  fine volume slide up (65-74) - A0 case  fine volume slide up (65-74) - general case  fine volume slide down (75-84) - B0 case  fine volume slide down (75-84) - general case volume slide up (85-94)  volume slide down (95-104)  pitch slide down (105-114)  pitch slide up (115-124)  crap  portamento to note  vibrato  crap  malformed file  convert IT note off to internal note off  caller sends midiline[33]  remove blanks and uppercase all  Load embedded midi information for resonant filters  information is embedded in file  read midi macros  read standalone filters  use default information int compressed=0; try to read module header  kill the 4 byte header  set module variables  make a cstr of songname   set the module type  2.17 : IT 2.14p4  2.16 : IT 2.14p3 with resonant filters  2.15 : IT 2.14p3 (improved compression)  set panning positions  set channel volumes  read the order data  read the instrument, sample, and pattern parapointers  Check for and load midi information for resonant filters  Check for and load song comment  Load all samples  seek to sample position  load sample info  Generate an error if c5spd is > 512k, or samplelength > 256 megs
		   (nothing would EVER be that high)  Reality check for sample loop information  Convert speed to XM linear finetune compressed=1; Load instruments if instrument mode flag enabled  seek to instrument position  load instrument info  load IT 1.xx inst header  Read IT200+ header  load IT 1xx volume envelope  load IT 2xx volume, pan and pitch envelopes  XM conversion of IT envelope Array  filter envelopes not supported yet  Figure out how many channels this song actually uses  seek to pattern position  0 -> empty 64 row pattern  read pattern length (# of rows)
			   Impulse Tracker never creates patterns with less than 32 rows,
			   but some other trackers do, so we only check for more than 256
			   rows  give each of them a different number  seek to pattern position  0 -> empty 64 row pattern  unused ========== Loader information  ex:set ts=4: 	MikMod sound library
	(c) 1998, 1999, 2000, 2001, 2002 Miodrag Vallat and others - see file
	AUTHORS for complete list.

	This library is free software; you can redistribute it and/or modify
	it under the terms of the GNU Library General Public License as
	published by the Free Software Foundation; either version 2 of
	the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Library General Public License for more details.

	You should have received a copy of the GNU Library General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
	02111-1307, USA.
==============================================================================

  $Id$

  Impulse tracker (IT) module loader

======================================================================================== Module structure  header  Created with tracker (y.xx = 0x0yxx)  Compatible with tracker ver > than val.  bit 0 set = song message attached  mixing volume [ignored]  panning separation between channels  sample information  sample conversion flag  0=sine, 1=rampdown, 2=square, 3=random (speed ignored)  instrument information  (dword) Instrument size  (char) Instrument filename  (byte) Instrument type (always 0)  (byte) Volume loop start (node)  (byte) Volume loop end (node)  (byte) Volume sustain begin (node)  (byte) Volume Sustain end (node)  (byte) channel loop start (node)  (byte) channel loop end (node)  (byte) channel sustain begin (node)  (byte) channel Sustain end (node)  (byte) pitch loop start (node)  (byte) pitch loop end (node)  (byte) pitch sustain begin (node)  (byte) pitch Sustain end (node)  Envelope end / NNA volume fadeout  Duplicate note check  Duplicate check action  Duplicate check type  New Note Action [0,1,2,3]  tracker version used to save [files only]  Pitch-pan Separation  Pitch-pan Center  random volume varations  random panning varations  Number of samples in instrument [files only]  Instrument name  sample for each note [note / samp pairs]  volume envelope (IT 1.x stuff)  volume tick position (IT 1.x stuff)  amplitude of volume nodes  tick value of volume nodes  panenv - node points  tick value of panning nodes  pitchenv - node points  tick value of pitch nodes  unpacked note ========== Loader data  parapointer array (see IT docs)  allocate to space for one full pattern  arrays allocated to 64 elements and used for  uncompressing IT's pattern information  if set, use S3M old-effects stuffs  table for porta-to-note command within volume/panning column ========== Loader code  Because so many IT files have 64 channels as the set number used, but really
   only use far less (usually from 8 to 24 still), I had to make this function,
   which determines the number of channels that are actually USED by a pattern.

   NOTE: You must first seek to the file location of the pattern before calling
   this procedure.

   Returns 0 on error
 note cut command  crap  process volume / panning column
		   volume / panning effects do NOT all share the same memory address
		   yet.  fine volume slide up (65-74) - A0 case  fine volume slide up (65-74) - general case  fine volume slide down (75-84) - B0 case  fine volume slide down (75-84) - general case volume slide up (85-94)  volume slide down (95-104)  pitch slide down (105-114)  pitch slide up (115-124)  crap  portamento to note  vibrato  crap  malformed file  convert IT note off to internal note off  caller sends midiline[33]  remove blanks and uppercase all  Load embedded midi information for resonant filters  information is embedded in file  read midi macros  read standalone filters  use default information int compressed=0; try to read module header  kill the 4 byte header  set module variables  make a cstr of songname   set the module type  2.17 : IT 2.14p4  2.16 : IT 2.14p3 with resonant filters  2.15 : IT 2.14p3 (improved compression)  set panning positions  set channel volumes  read the order data  read the instrument, sample, and pattern parapointers  Check for and load midi information for resonant filters  Check for and load song comment  Load all samples  seek to sample position  load sample info  Generate an error if c5spd is > 512k, or samplelength > 256 megs
		   (nothing would EVER be that high)  Reality check for sample loop information  Convert speed to XM linear finetune compressed=1; Load instruments if instrument mode flag enabled  seek to instrument position  load instrument info  load IT 1.xx inst header  Read IT200+ header  load IT 1xx volume envelope  load IT 2xx volume, pan and pitch envelopes  XM conversion of IT envelope Array  filter envelopes not supported yet  Figure out how many channels this song actually uses  seek to pattern position  0 -> empty 64 row pattern  read pattern length (# of rows)
			   Impulse Tracker never creates patterns with less than 32 rows,
			   but some other trackers do, so we only check for more than 256
			   rows  give each of them a different number  seek to pattern position  0 -> empty 64 row pattern  unused ========== Loader information  ex:set ts=4: 	MikMod sound library
	(c) 1998, 1999, 2000, 2001, 2002 Miodrag Vallat and others - see file
	AUTHORS for complete list.

	This library is free software; you can redistribute it and/or modify
	it under the terms of the GNU Library General Public License as
	published by the Free Software Foundation; either version 2 of
	the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Library General Public License for more details.

	You should have received a copy of the GNU Library General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
	02111-1307, USA.
==============================================================================

  $Id$

  Impulse tracker (IT) module loader

======================================================================================== Module structure  header  Created with tracker (y.xx = 0x0yxx)  Compatible with tracker ver > than val.  bit 0 set = song message attached  mixing volume [ignored]  panning separation between channels  sample information  sample conversion flag  0=sine, 1=rampdown, 2=square, 3=random (speed ignored)  instrument information  (dword) Instrument size  (char) Instrument filename  (byte) Instrument type (always 0)  (byte) Volume loop start (node)  (byte) Volume loop end (node)  (byte) Volume sustain begin (node)  (byte) Volume Sustain end (node)  (byte) channel loop start (node)  (byte) channel loop end (node)  (byte) channel sustain begin (node)  (byte) channel Sustain end (node)  (byte) pitch loop start (node)  (byte) pitch loop end (node)  (byte) pitch sustain begin (node)  (byte) pitch Sustain end (node)  Envelope end / NNA volume fadeout  Duplicate note check  Duplicate check action  Duplicate check type  New Note Action [0,1,2,3]  tracker version used to save [files only]  Pitch-pan Separation  Pitch-pan Center  random volume varations  random panning varations  Number of samples in instrument [files only]  Instrument name  sample for each note [note / samp pairs]  volume envelope (IT 1.x stuff)  volume tick position (IT 1.x stuff)  amplitude of volume nodes  tick value of volume nodes  panenv - node points  tick value of panning nodes  pitchenv - node points  tick value of pitch nodes  unpacked note ========== Loader data  parapointer array (see IT docs)  allocate to space for one full pattern  arrays allocated to 64 elements and used for  uncompressing IT's pattern information  if set, use S3M old-effects stuffs  table for porta-to-note command within volume/panning column ========== Loader code  Because so many IT files have 64 channels as the set number used, but really
   only use far less (usually from 8 to 24 still), I had to make this function,
   which determines the number of channels that are actually USED by a pattern.

   NOTE: You must first seek to the file location of the pattern before calling
   this procedure.

   Returns 0 on error
 note cut command  crap  process volume / panning column
		   volume / panning effects do NOT all share the same memory address
		   yet.  fine volume slide up (65-74) - A0 case  fine volume slide up (65-74) - general case  fine volume slide down (75-84) - B0 case  fine volume slide down (75-84) - general case volume slide up (85-94)  volume slide down (95-104)  pitch slide down (105-114)  pitch slide up (115-124)  crap  portamento to note  vibrato  crap  malformed file  convert IT note off to internal note off  caller sends midiline[33]  remove blanks and uppercase all  Load embedded midi information for resonant filters  information is embedded in file  read midi macros  read standalone filters  use default information int compressed=0; try to read module header  kill the 4 byte header  set module variables  make a cstr of songname   set the module type  2.17 : IT 2.14p4  2.16 : IT 2.14p3 with resonant filters  2.15 : IT 2.14p3 (improved compression)  set panning positions  set channel volumes  read the order data  read the instrument, sample, and pattern parapointers  Check for and load midi information for resonant filters  Check for and load song comment  Load all samples  seek to sample position  load sample info  Generate an error if c5spd is > 512k, or samplelength > 256 megs
		   (nothing would EVER be that high)  Reality check for sample loop information  Convert speed to XM linear finetune compressed=1; Load instruments if instrument mode flag enabled  seek to instrument position  load instrument info  load IT 1.xx inst header  Read IT200+ header  load IT 1xx volume envelope  load IT 2xx volume, pan and pitch envelopes  XM conversion of IT envelope Array  filter envelopes not supported yet  Figure out how many channels this song actually uses  seek to pattern position  0 -> empty 64 row pattern  read pattern length (# of rows)
			   Impulse Tracker never creates patterns with less than 32 rows,
			   but some other trackers do, so we only check for more than 256
			   rows  give each of them a different number  seek to pattern position  0 -> empty 64 row pattern  unused ========== Loader information  ex:set ts=4: 