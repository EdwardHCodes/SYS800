**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** padded to next multiple of cache line size (32 bytes)  Because we have no way of stopping the DMA properly (see below), we can only
 * let the tranfer finish on stop. However if the transfer is very long it could
 * take a while. We work around this by splitting big transfers into small burst
 * to make sure we can stop quickly.  current buffer  remaining size  for both recording and playback: maximum transfer size, see
 * pcm_dma_apply_settings *
 * WARNING !
 * Never reset the dma channel, otherwise it will halt the DAC for some reason
 * and I don't know how to recover from this state
 *  split transfer if needed  dma subsystem will make sure cached stuff is written to memory  advance buffer  if stop is pending, ackonowledge stop
     * otherwise try to get some more and stop if there is none  continue if buffer is not done, otherwise try to get some new data  do not interrupt the current transaction because resetting the dma
     * would halt the DAC and clearing RUN causes sound havoc so simply
     * wait for the end of transfer  update pending buffer  if we are stopped restart playback, otherwise IRQ will pick up  update frequency  compute maximum transfer size: aim at ~1/100s stop time maximum, make sure
     * the resulting value is a multiple of cache line. At sample rate F we
     * transfer two samples (2 x 2 bytes) F times per second = 4F b/s 
 * Recording
  Because we have no way of stopping the DMA properly (like for the DAC),
 * we can only let the tranfer finish on stop. However if the transfer is very
 * long it could take a while. We work around this by splitting big transfers
 * into small burst to make sure we can stop quickly.  current buffer  remaining size  split transfer if needed  dma subsystem will make sure cached stuff is written to memory  advance buffer  if stop is pending, ackonowledge stop
     * otherwise try to get some more and stop if there is none  continue if buffer is not done, otherwise try to get some new data  update pending buffer  if we are stopped restart recording, otherwise IRQ will pick up  do not interrupt the current transaction because resetting the dma
     * would halt the ADC and clearing RUN causes sound havoc so simply
     * wait for the end of transfer  HAVE_RECORDING **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** padded to next multiple of cache line size (32 bytes)  Because we have no way of stopping the DMA properly (see below), we can only
 * let the tranfer finish on stop. However if the transfer is very long it could
 * take a while. We work around this by splitting big transfers into small burst
 * to make sure we can stop quickly.  current buffer  remaining size  for both recording and playback: maximum transfer size, see
 * pcm_dma_apply_settings *
 * WARNING !
 * Never reset the dma channel, otherwise it will halt the DAC for some reason
 * and I don't know how to recover from this state
 *  split transfer if needed  dma subsystem will make sure cached stuff is written to memory  advance buffer  if stop is pending, ackonowledge stop
     * otherwise try to get some more and stop if there is none  continue if buffer is not done, otherwise try to get some new data  do not interrupt the current transaction because resetting the dma
     * would halt the DAC and clearing RUN causes sound havoc so simply
     * wait for the end of transfer  update pending buffer  if we are stopped restart playback, otherwise IRQ will pick up  update frequency  compute maximum transfer size: aim at ~1/100s stop time maximum, make sure
     * the resulting value is a multiple of cache line. At sample rate F we
     * transfer two samples (2 x 2 bytes) F times per second = 4F b/s 
 * Recording
  Because we have no way of stopping the DMA properly (like for the DAC),
 * we can only let the tranfer finish on stop. However if the transfer is very
 * long it could take a while. We work around this by splitting big transfers
 * into small burst to make sure we can stop quickly.  current buffer  remaining size  split transfer if needed  dma subsystem will make sure cached stuff is written to memory  advance buffer  if stop is pending, ackonowledge stop
     * otherwise try to get some more and stop if there is none  continue if buffer is not done, otherwise try to get some new data  update pending buffer  if we are stopped restart recording, otherwise IRQ will pick up  do not interrupt the current transaction because resetting the dma
     * would halt the ADC and clearing RUN causes sound havoc so simply
     * wait for the end of transfer  HAVE_RECORDING **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** padded to next multiple of cache line size (32 bytes)  Because we have no way of stopping the DMA properly (see below), we can only
 * let the tranfer finish on stop. However if the transfer is very long it could
 * take a while. We work around this by splitting big transfers into small burst
 * to make sure we can stop quickly.  current buffer  remaining size  for both recording and playback: maximum transfer size, see
 * pcm_dma_apply_settings *
 * WARNING !
 * Never reset the dma channel, otherwise it will halt the DAC for some reason
 * and I don't know how to recover from this state
 *  split transfer if needed  dma subsystem will make sure cached stuff is written to memory  advance buffer  if stop is pending, ackonowledge stop
     * otherwise try to get some more and stop if there is none  continue if buffer is not done, otherwise try to get some new data  do not interrupt the current transaction because resetting the dma
     * would halt the DAC and clearing RUN causes sound havoc so simply
     * wait for the end of transfer  update pending buffer  if we are stopped restart playback, otherwise IRQ will pick up  update frequency  compute maximum transfer size: aim at ~1/100s stop time maximum, make sure
     * the resulting value is a multiple of cache line. At sample rate F we
     * transfer two samples (2 x 2 bytes) F times per second = 4F b/s 
 * Recording
  Because we have no way of stopping the DMA properly (like for the DAC),
 * we can only let the tranfer finish on stop. However if the transfer is very
 * long it could take a while. We work around this by splitting big transfers
 * into small burst to make sure we can stop quickly.  current buffer  remaining size  split transfer if needed  dma subsystem will make sure cached stuff is written to memory  advance buffer  if stop is pending, ackonowledge stop
     * otherwise try to get some more and stop if there is none  continue if buffer is not done, otherwise try to get some new data  update pending buffer  if we are stopped restart recording, otherwise IRQ will pick up  do not interrupt the current transaction because resetting the dma
     * would halt the ADC and clearing RUN causes sound havoc so simply
     * wait for the end of transfer  HAVE_RECORDING 