**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Rob Purchase
 * Copyright © 2008 Rafaël Carré
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************  Charge Pump and Power management Settings   CP_SW  Auto-Switch Margin 0=200/300 1=150/255  CP_on  0=Normal op 1=Chg Pump Always On   LREG_CPnot  Always write 0  DCDC3p  BVDD setting 3.6/3.2/3.1/3.0   LREG_off 1=Auto mode switching 0=Length Reg only CVDDp  Core Voltage Setting 1.2/1.15/1.10/1.05 Interrupt 17 : unused  Interrupt 21 : unused  Interrupt 22 : unused  Interrupt 23 : unused  Interrupt 24 : unused  Interrupt 25 : unused  Interrupt 26 : unused  Interrupt 27 : unused  Interrupt 28 : unused  INT_GPIOA is declared in this file  masked interrupts  spurious interrupts from USB are expected  Vectored interrupts (16 available)  Highest priority at the top of the list  If GPIOA ISR is interrupted, things seem to go wonky ??  For recording  Playback follows recording  Lowest priority at the end of the list  enable VIC  disable all interrupt lines  only IRQ, no FIQ  Reset priority hardware  Worst-case IRQ stack usage with 10 vectors:
     * 10*4*10 = 400 bytes (100 words)
     *
     * No SVC stack is used by pro/epi-logue code
      Create return address  Save what gets clobbered  Obtain VIC address (before SPSR read!)  Load Vector  Save SPSR_irq  Must have something bet. mrs and msr  Switch to SVC mode, enable IRQ  Align SVC stack to 8 bytes, save  Save lr_SVC  Call handler  Undo alignment fudge  Restore lr_SVC  Mask IRQ, return to IRQ mode  Pop VIC address, SPSR_irq  Ack end of ISR to VIC   Restore SPSR_irq  Restore regs, and RFE  Make A7 input  wait a little to allow the pullup/pulldown resistor
     * to charge the input capacitance  read the pullup/pulldown value on A7 to determine the variant  model selection  FIXME  AHB master's priority configuration :
                     TIC (Test Interface Controller) > DMA > USB > IDE > ARM  fclk 24 MHz  pclk is always based on PLLA, since we don't know the current PLLA speed,
     * avoid having pclk too fast and hope it's not too low  pclk lowest  pclk 24 MHz  bits 31:30 should be set to 0 in arm926-ejs  control register  clears bus bits : sets fastbus  enable PLLA  wait until PLLA is locked  enable PLLB  wait until PLLB is locked   Set FCLK frequency   Set PCLK frequency  reset divider & clksel bits  needed for rebooting  the GPIO clock is already enabled by the dualboot function  enable timer interface for TIMER1 & TIMER2  this is called after kernel and threading are initialized   Initialize power management settings  PLL:       disable audio PLL, we use MCLK already  DCDC_Cntr: set switching speed of CVDD1/2 power supplies to 1 MHz,
       immediate change  Out_Cntr2: set drive strength of 24 MHz and 32 kHz clocks to 1 mA  CHGVBUS2:  set VBUS threshold to 3.18V and EOC threshold to 30% CC  PVDD1:     set PVDD1 power supply to 2.5 V  AVDD17:    set AVDD17 power supply to 2.5V  CVDD2:     set CVDD2 power supply (digital for DAC/SD/etc) to 2.75V  HAVE_AS3543  HAVE_AS3543  setup isr for microsd monitoring and for fuzev2 scrollwheel irq  pin selection for irq happens in the drivers  !BOOTLOADER  use watchdog to reset  set counter to 1  enable watchdog counter & reset  make sure lcd+backlight are on  make sure screen content is up to date  wait until button release (if a button is pressed)  then wait until next button press  usecs may be at most 2^32/248 (17 seconds) for 248MHz max cpu freq  1 cycle   3 cycles  avoid redundant activity  Increasing frequency so boost voltage before change  Some players run a bit low so use 1.175 volts instead of 1.20   Wait for voltage to be at least 1.175v before making fclk > 200 MHz  470 * .0025 = 1.175V   HAVE_ADJUSTABLE_CPU_VOLTAGE  asynchronous bus clocking  synchronous bus clocking had issues on some players  fastbus clocking  FCLK is unused so put it to the lowest freq we can  Decreasing frequency so reduce voltage after change   HAVE_ADJUSTABLE_CPU_VOLTAGE  as3525v2   avoid redundant activity  Set CVDD1 power supply  dely for voltage rising  Set CVDD1 power supply Some FuzeV2 devices have trouble reading SD at low voltage HAVE_ADJUSTABLE_CPU_FREQ  !BOOTLOADER **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Rob Purchase
 * Copyright © 2008 Rafaël Carré
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************  Charge Pump and Power management Settings   CP_SW  Auto-Switch Margin 0=200/300 1=150/255  CP_on  0=Normal op 1=Chg Pump Always On   LREG_CPnot  Always write 0  DCDC3p  BVDD setting 3.6/3.2/3.1/3.0   LREG_off 1=Auto mode switching 0=Length Reg only CVDDp  Core Voltage Setting 1.2/1.15/1.10/1.05 Interrupt 17 : unused  Interrupt 21 : unused  Interrupt 22 : unused  Interrupt 23 : unused  Interrupt 24 : unused  Interrupt 25 : unused  Interrupt 26 : unused  Interrupt 27 : unused  Interrupt 28 : unused  INT_GPIOA is declared in this file  masked interrupts  spurious interrupts from USB are expected  Vectored interrupts (16 available)  Highest priority at the top of the list  If GPIOA ISR is interrupted, things seem to go wonky ??  For recording  Playback follows recording  Lowest priority at the end of the list  enable VIC  disable all interrupt lines  only IRQ, no FIQ  Reset priority hardware  Worst-case IRQ stack usage with 10 vectors:
     * 10*4*10 = 400 bytes (100 words)
     *
     * No SVC stack is used by pro/epi-logue code
      Create return address  Save what gets clobbered  Obtain VIC address (before SPSR read!)  Load Vector  Save SPSR_irq  Must have something bet. mrs and msr  Switch to SVC mode, enable IRQ  Align SVC stack to 8 bytes, save  Save lr_SVC  Call handler  Undo alignment fudge  Restore lr_SVC  Mask IRQ, return to IRQ mode  Pop VIC address, SPSR_irq  Ack end of ISR to VIC   Restore SPSR_irq  Restore regs, and RFE  Make A7 input  wait a little to allow the pullup/pulldown resistor
     * to charge the input capacitance  read the pullup/pulldown value on A7 to determine the variant  model selection  FIXME  AHB master's priority configuration :
                     TIC (Test Interface Controller) > DMA > USB > IDE > ARM  fclk 24 MHz  pclk is always based on PLLA, since we don't know the current PLLA speed,
     * avoid having pclk too fast and hope it's not too low  pclk lowest  pclk 24 MHz  bits 31:30 should be set to 0 in arm926-ejs  control register  clears bus bits : sets fastbus  enable PLLA  wait until PLLA is locked  enable PLLB  wait until PLLB is locked   Set FCLK frequency   Set PCLK frequency  reset divider & clksel bits  needed for rebooting  the GPIO clock is already enabled by the dualboot function  enable timer interface for TIMER1 & TIMER2  this is called after kernel and threading are initialized   Initialize power management settings  PLL:       disable audio PLL, we use MCLK already  DCDC_Cntr: set switching speed of CVDD1/2 power supplies to 1 MHz,
       immediate change  Out_Cntr2: set drive strength of 24 MHz and 32 kHz clocks to 1 mA  CHGVBUS2:  set VBUS threshold to 3.18V and EOC threshold to 30% CC  PVDD1:     set PVDD1 power supply to 2.5 V  AVDD17:    set AVDD17 power supply to 2.5V  CVDD2:     set CVDD2 power supply (digital for DAC/SD/etc) to 2.75V  HAVE_AS3543  HAVE_AS3543  setup isr for microsd monitoring and for fuzev2 scrollwheel irq  pin selection for irq happens in the drivers  !BOOTLOADER  use watchdog to reset  set counter to 1  enable watchdog counter & reset  make sure lcd+backlight are on  make sure screen content is up to date  wait until button release (if a button is pressed)  then wait until next button press  usecs may be at most 2^32/248 (17 seconds) for 248MHz max cpu freq  1 cycle   3 cycles  avoid redundant activity  Increasing frequency so boost voltage before change  Some players run a bit low so use 1.175 volts instead of 1.20   Wait for voltage to be at least 1.175v before making fclk > 200 MHz  470 * .0025 = 1.175V   HAVE_ADJUSTABLE_CPU_VOLTAGE  asynchronous bus clocking  synchronous bus clocking had issues on some players  fastbus clocking  FCLK is unused so put it to the lowest freq we can  Decreasing frequency so reduce voltage after change   HAVE_ADJUSTABLE_CPU_VOLTAGE  as3525v2   avoid redundant activity  Set CVDD1 power supply  dely for voltage rising  Set CVDD1 power supply Some FuzeV2 devices have trouble reading SD at low voltage HAVE_ADJUSTABLE_CPU_FREQ  !BOOTLOADER **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Rob Purchase
 * Copyright © 2008 Rafaël Carré
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************  Charge Pump and Power management Settings   CP_SW  Auto-Switch Margin 0=200/300 1=150/255  CP_on  0=Normal op 1=Chg Pump Always On   LREG_CPnot  Always write 0  DCDC3p  BVDD setting 3.6/3.2/3.1/3.0   LREG_off 1=Auto mode switching 0=Length Reg only CVDDp  Core Voltage Setting 1.2/1.15/1.10/1.05 Interrupt 17 : unused  Interrupt 21 : unused  Interrupt 22 : unused  Interrupt 23 : unused  Interrupt 24 : unused  Interrupt 25 : unused  Interrupt 26 : unused  Interrupt 27 : unused  Interrupt 28 : unused  INT_GPIOA is declared in this file  masked interrupts  spurious interrupts from USB are expected  Vectored interrupts (16 available)  Highest priority at the top of the list  If GPIOA ISR is interrupted, things seem to go wonky ??  For recording  Playback follows recording  Lowest priority at the end of the list  enable VIC  disable all interrupt lines  only IRQ, no FIQ  Reset priority hardware  Worst-case IRQ stack usage with 10 vectors:
     * 10*4*10 = 400 bytes (100 words)
     *
     * No SVC stack is used by pro/epi-logue code
      Create return address  Save what gets clobbered  Obtain VIC address (before SPSR read!)  Load Vector  Save SPSR_irq  Must have something bet. mrs and msr  Switch to SVC mode, enable IRQ  Align SVC stack to 8 bytes, save  Save lr_SVC  Call handler  Undo alignment fudge  Restore lr_SVC  Mask IRQ, return to IRQ mode  Pop VIC address, SPSR_irq  Ack end of ISR to VIC   Restore SPSR_irq  Restore regs, and RFE  Make A7 input  wait a little to allow the pullup/pulldown resistor
     * to charge the input capacitance  read the pullup/pulldown value on A7 to determine the variant  model selection  FIXME  AHB master's priority configuration :
                     TIC (Test Interface Controller) > DMA > USB > IDE > ARM  fclk 24 MHz  pclk is always based on PLLA, since we don't know the current PLLA speed,
     * avoid having pclk too fast and hope it's not too low  pclk lowest  pclk 24 MHz  bits 31:30 should be set to 0 in arm926-ejs  control register  clears bus bits : sets fastbus  enable PLLA  wait until PLLA is locked  enable PLLB  wait until PLLB is locked   Set FCLK frequency   Set PCLK frequency  reset divider & clksel bits  needed for rebooting  the GPIO clock is already enabled by the dualboot function  enable timer interface for TIMER1 & TIMER2  this is called after kernel and threading are initialized   Initialize power management settings  PLL:       disable audio PLL, we use MCLK already  DCDC_Cntr: set switching speed of CVDD1/2 power supplies to 1 MHz,
       immediate change  Out_Cntr2: set drive strength of 24 MHz and 32 kHz clocks to 1 mA  CHGVBUS2:  set VBUS threshold to 3.18V and EOC threshold to 30% CC  PVDD1:     set PVDD1 power supply to 2.5 V  AVDD17:    set AVDD17 power supply to 2.5V  CVDD2:     set CVDD2 power supply (digital for DAC/SD/etc) to 2.75V  HAVE_AS3543  HAVE_AS3543  setup isr for microsd monitoring and for fuzev2 scrollwheel irq  pin selection for irq happens in the drivers  !BOOTLOADER  use watchdog to reset  set counter to 1  enable watchdog counter & reset  make sure lcd+backlight are on  make sure screen content is up to date  wait until button release (if a button is pressed)  then wait until next button press  usecs may be at most 2^32/248 (17 seconds) for 248MHz max cpu freq  1 cycle   3 cycles  avoid redundant activity  Increasing frequency so boost voltage before change  Some players run a bit low so use 1.175 volts instead of 1.20   Wait for voltage to be at least 1.175v before making fclk > 200 MHz  470 * .0025 = 1.175V   HAVE_ADJUSTABLE_CPU_VOLTAGE  asynchronous bus clocking  synchronous bus clocking had issues on some players  fastbus clocking  FCLK is unused so put it to the lowest freq we can  Decreasing frequency so reduce voltage after change   HAVE_ADJUSTABLE_CPU_VOLTAGE  as3525v2   avoid redundant activity  Set CVDD1 power supply  dely for voltage rising  Set CVDD1 power supply Some FuzeV2 devices have trouble reading SD at low voltage HAVE_ADJUSTABLE_CPU_FREQ  !BOOTLOADER 