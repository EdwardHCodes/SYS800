 Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *      Player related stuff.
 *      Bobbing POV/weapon, movement.
 *      Pending weapon.
 *
 *----------------------------------------------------------------------------- Index of the special effects (INVUL inverse) map. Movement. 16 pixels of bob whether player is on ground or in air P_Thrust Moves the given origin along a given angle.
 * P_Bob
 * Same as P_Thrust, but only affects bobbing.
 *
 * killough 10/98: We apply thrust separately between the real physical player
 * and the part which affects bobbing. This way, bobbing only comes from player
 * motion, nothing external, avoiding many problems, e.g. bobbing should not
 * occur on conveyors, unless the player walks on one, and bobbing should be
 * reduced at a regular rate, even on ice (where the player coasts).
  P_CalcHeight Calculate the walking / running height adjustment Regular movement bobbing (needs to be calculated for gun swing even if not on ground) OPTIMIZE: tablify angle Note: a LUT allows for effects  like a ramp with low health. killough 10/98: Make bobbing depend only on player-applied motion.
    *
    * Note: don't reduce bobbing here if on ice: if you reduce bobbing here,
    * it causes bobbing jerkiness when the player moves from ice to non-ice,
    * and vice-versa.
     The following line was in the Id source and appears      // phares 2/25/98 to be a bug. player->viewz is checked in a similar manner at a different exit below.  player->viewz = player->mo->z + player->viewheight; move viewheight P_MovePlayer Adds momentum if the player is not in the air killough 10/98: simplified killough 10/98: We must apply thrust to the player and bobbing separately, to avoid anomalies. The thrust applied to bobbing is always the same strength on ice, because the player still "works just as hard" to move, while the thrust applied to the movement varies with 'movefactor'. killough 10/98 killough 8/9/98 killough 11/98: On sludge, make bobbing depend on efficiency. On ice, make it depend on effort. P_DeathThink Fall on your face when dying. Decrease POV height to floor height. fall to the ground Looking at killer,  so fade damage flash down. P_PlayerThink killough 2/8/98, 3/21/98: chain saw run forward Move around. Reactiontime is used to prevent movement  for a bit after a teleport. Determines view height and bobbing Determine if there's anything about the sector you're in that's going to affect you, like painful floors. Check for weapon change. The actual changing of the weapon is done  when the weapon psprite can do it  (read: not in the middle of an attack). killough 3/22/98: For demo compatibility we must perform the fist and SSG weapons switches here, rather than in G_BuildTiccmd(). For other games which rely on user preferences, we must use the latter. compatibility mode -- required for old demos -- killough killough 2/8/98, 3/22/98 -- end of weapon selection changes Do not go to plasma or BFG in shareware,  even if cheated. check for use cycle psprites Counters, time dependent power ups. Strength counts up to diminish fade. killough 1/98: Make idbeholdx toggle: killough killough killough killough Handling colormaps. killough 3/20/98: reformat to terse C syntax Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *      Player related stuff.
 *      Bobbing POV/weapon, movement.
 *      Pending weapon.
 *
 *----------------------------------------------------------------------------- Index of the special effects (INVUL inverse) map. Movement. 16 pixels of bob whether player is on ground or in air P_Thrust Moves the given origin along a given angle.
 * P_Bob
 * Same as P_Thrust, but only affects bobbing.
 *
 * killough 10/98: We apply thrust separately between the real physical player
 * and the part which affects bobbing. This way, bobbing only comes from player
 * motion, nothing external, avoiding many problems, e.g. bobbing should not
 * occur on conveyors, unless the player walks on one, and bobbing should be
 * reduced at a regular rate, even on ice (where the player coasts).
  P_CalcHeight Calculate the walking / running height adjustment Regular movement bobbing (needs to be calculated for gun swing even if not on ground) OPTIMIZE: tablify angle Note: a LUT allows for effects  like a ramp with low health. killough 10/98: Make bobbing depend only on player-applied motion.
    *
    * Note: don't reduce bobbing here if on ice: if you reduce bobbing here,
    * it causes bobbing jerkiness when the player moves from ice to non-ice,
    * and vice-versa.
     The following line was in the Id source and appears      // phares 2/25/98 to be a bug. player->viewz is checked in a similar manner at a different exit below.  player->viewz = player->mo->z + player->viewheight; move viewheight P_MovePlayer Adds momentum if the player is not in the air killough 10/98: simplified killough 10/98: We must apply thrust to the player and bobbing separately, to avoid anomalies. The thrust applied to bobbing is always the same strength on ice, because the player still "works just as hard" to move, while the thrust applied to the movement varies with 'movefactor'. killough 10/98 killough 8/9/98 killough 11/98: On sludge, make bobbing depend on efficiency. On ice, make it depend on effort. P_DeathThink Fall on your face when dying. Decrease POV height to floor height. fall to the ground Looking at killer,  so fade damage flash down. P_PlayerThink killough 2/8/98, 3/21/98: chain saw run forward Move around. Reactiontime is used to prevent movement  for a bit after a teleport. Determines view height and bobbing Determine if there's anything about the sector you're in that's going to affect you, like painful floors. Check for weapon change. The actual changing of the weapon is done  when the weapon psprite can do it  (read: not in the middle of an attack). killough 3/22/98: For demo compatibility we must perform the fist and SSG weapons switches here, rather than in G_BuildTiccmd(). For other games which rely on user preferences, we must use the latter. compatibility mode -- required for old demos -- killough killough 2/8/98, 3/22/98 -- end of weapon selection changes Do not go to plasma or BFG in shareware,  even if cheated. check for use cycle psprites Counters, time dependent power ups. Strength counts up to diminish fade. killough 1/98: Make idbeholdx toggle: killough killough killough killough Handling colormaps. killough 3/20/98: reformat to terse C syntax Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *      Player related stuff.
 *      Bobbing POV/weapon, movement.
 *      Pending weapon.
 *
 *----------------------------------------------------------------------------- Index of the special effects (INVUL inverse) map. Movement. 16 pixels of bob whether player is on ground or in air P_Thrust Moves the given origin along a given angle.
 * P_Bob
 * Same as P_Thrust, but only affects bobbing.
 *
 * killough 10/98: We apply thrust separately between the real physical player
 * and the part which affects bobbing. This way, bobbing only comes from player
 * motion, nothing external, avoiding many problems, e.g. bobbing should not
 * occur on conveyors, unless the player walks on one, and bobbing should be
 * reduced at a regular rate, even on ice (where the player coasts).
  P_CalcHeight Calculate the walking / running height adjustment Regular movement bobbing (needs to be calculated for gun swing even if not on ground) OPTIMIZE: tablify angle Note: a LUT allows for effects  like a ramp with low health. killough 10/98: Make bobbing depend only on player-applied motion.
    *
    * Note: don't reduce bobbing here if on ice: if you reduce bobbing here,
    * it causes bobbing jerkiness when the player moves from ice to non-ice,
    * and vice-versa.
     The following line was in the Id source and appears      // phares 2/25/98 to be a bug. player->viewz is checked in a similar manner at a different exit below.  player->viewz = player->mo->z + player->viewheight; move viewheight P_MovePlayer Adds momentum if the player is not in the air killough 10/98: simplified killough 10/98: We must apply thrust to the player and bobbing separately, to avoid anomalies. The thrust applied to bobbing is always the same strength on ice, because the player still "works just as hard" to move, while the thrust applied to the movement varies with 'movefactor'. killough 10/98 killough 8/9/98 killough 11/98: On sludge, make bobbing depend on efficiency. On ice, make it depend on effort. P_DeathThink Fall on your face when dying. Decrease POV height to floor height. fall to the ground Looking at killer,  so fade damage flash down. P_PlayerThink killough 2/8/98, 3/21/98: chain saw run forward Move around. Reactiontime is used to prevent movement  for a bit after a teleport. Determines view height and bobbing Determine if there's anything about the sector you're in that's going to affect you, like painful floors. Check for weapon change. The actual changing of the weapon is done  when the weapon psprite can do it  (read: not in the middle of an attack). killough 3/22/98: For demo compatibility we must perform the fist and SSG weapons switches here, rather than in G_BuildTiccmd(). For other games which rely on user preferences, we must use the latter. compatibility mode -- required for old demos -- killough killough 2/8/98, 3/22/98 -- end of weapon selection changes Do not go to plasma or BFG in shareware,  even if cheated. check for use cycle psprites Counters, time dependent power ups. Strength counts up to diminish fade. killough 1/98: Make idbeholdx toggle: killough killough killough killough Handling colormaps. killough 3/20/98: reformat to terse C syntax