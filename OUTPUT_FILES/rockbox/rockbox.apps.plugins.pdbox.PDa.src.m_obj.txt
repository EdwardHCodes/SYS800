 Copyright (c) 1997-1999 Miller Puckette.
* For information on usage and redistribution, and for a DISCLAIMER OF ALL
* WARRANTIES, see the file, "LICENSE.txt," in this distribution.   this file handles Max-style patchable objects, i.e., objects which
can interconnect via inlets and outlets; also, the (terse) generic
behavior for "gobjs" appears at the end of this file.   --------------------- generic inlets ala max ------------------  LATER figure out how to make these efficient:  ----- pointerinlets, floatinlets, syminlets: optimized inlets -------  ---------------------- routine to handle lists ----------------------  objects interpret lists by feeding them to the individual inlets.
    Before you call this check that the object doesn't have a more
    specific way to handle lists.  --------------------------- outlets ------------------------------  set a stack limit (on each incoming event that can set off messages)
    for the outlet functions to check to prevent stack overflow from message
    recursion  get a number unique to the (clock, MIDI, GUI, etc.) event we're on  get the outlet's declared symbol  append it to the end of the list  LATER we might cache the last "oc" to make this faster.  ------ traversal routines for code that can't see our structures ------  this one checks that a pd is indeed a patchable object, and returns
    it, correctly typed, or zero if the check failed.  move an inlet or outlet to the head of the list  routines for DSP sorting, which are used in d_ugen.c and g_canvas.c  LATER try to consolidate all the slightly different routines.  get the index, among signal inlets, of the mth inlet overall  int n;  , n = 0  and these are only used in g_io.c...  Copyright (c) 1997-1999 Miller Puckette.
* For information on usage and redistribution, and for a DISCLAIMER OF ALL
* WARRANTIES, see the file, "LICENSE.txt," in this distribution.   this file handles Max-style patchable objects, i.e., objects which
can interconnect via inlets and outlets; also, the (terse) generic
behavior for "gobjs" appears at the end of this file.   --------------------- generic inlets ala max ------------------  LATER figure out how to make these efficient:  ----- pointerinlets, floatinlets, syminlets: optimized inlets -------  ---------------------- routine to handle lists ----------------------  objects interpret lists by feeding them to the individual inlets.
    Before you call this check that the object doesn't have a more
    specific way to handle lists.  --------------------------- outlets ------------------------------  set a stack limit (on each incoming event that can set off messages)
    for the outlet functions to check to prevent stack overflow from message
    recursion  get a number unique to the (clock, MIDI, GUI, etc.) event we're on  get the outlet's declared symbol  append it to the end of the list  LATER we might cache the last "oc" to make this faster.  ------ traversal routines for code that can't see our structures ------  this one checks that a pd is indeed a patchable object, and returns
    it, correctly typed, or zero if the check failed.  move an inlet or outlet to the head of the list  routines for DSP sorting, which are used in d_ugen.c and g_canvas.c  LATER try to consolidate all the slightly different routines.  get the index, among signal inlets, of the mth inlet overall  int n;  , n = 0  and these are only used in g_io.c...  Copyright (c) 1997-1999 Miller Puckette.
* For information on usage and redistribution, and for a DISCLAIMER OF ALL
* WARRANTIES, see the file, "LICENSE.txt," in this distribution.   this file handles Max-style patchable objects, i.e., objects which
can interconnect via inlets and outlets; also, the (terse) generic
behavior for "gobjs" appears at the end of this file.   --------------------- generic inlets ala max ------------------  LATER figure out how to make these efficient:  ----- pointerinlets, floatinlets, syminlets: optimized inlets -------  ---------------------- routine to handle lists ----------------------  objects interpret lists by feeding them to the individual inlets.
    Before you call this check that the object doesn't have a more
    specific way to handle lists.  --------------------------- outlets ------------------------------  set a stack limit (on each incoming event that can set off messages)
    for the outlet functions to check to prevent stack overflow from message
    recursion  get a number unique to the (clock, MIDI, GUI, etc.) event we're on  get the outlet's declared symbol  append it to the end of the list  LATER we might cache the last "oc" to make this faster.  ------ traversal routines for code that can't see our structures ------  this one checks that a pd is indeed a patchable object, and returns
    it, correctly typed, or zero if the check failed.  move an inlet or outlet to the head of the list  routines for DSP sorting, which are used in d_ugen.c and g_canvas.c  LATER try to consolidate all the slightly different routines.  get the index, among signal inlets, of the mth inlet overall  int n;  , n = 0  and these are only used in g_io.c... 