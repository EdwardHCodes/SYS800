
 * ALAC (Apple Lossless Audio Codec) decoder
 * Copyright (c) 2005 David Hammerton
 * All rights reserved.
 *
 * This is the actual decoder.
 *
 * http://crazney.net/programs/itunes/alac.html
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
  Endian/aligment safe functions - only used in alac_set_info()  size  frma  alac  size  alac  0 ?  buffer size / 2 ?  stream reading  supports reading 1 to 16 bits, in big endian format  shift left by the number of bits we've already read,
     * so that the top 'n' bits of the 24 bits we read will
     * be the return bits  and then only want the top 'n' bits from that, where
     * n is 'bits'  increase the buffer pointer if we've read over n bytes.  and the remainder goes back into the bit accumulator  supports reading 1 to 32 bits, in big endian format  reads a single bit  maximum number of bits for a rice prefix. decoded value read x, number of 1s before 0 represent the rice value. read the number from the bit stream (raw value) mask value to readsamplesize size  x = x * (2^k - 1) inc by 1 and shift out sign bit the sign is stored in the low bit update history special case, for compressed blocks of 0 note: block_size is always 16bit got block_size 0s first sample always copies  11111 - max value of predictor_coef_num  second-best case scenario for fir decompression,
       * error describes a small difference from the previous sample only
        read warm-up samples  4 and 8 are very common cases (the only ones i've seen).

      The following code is an initial attempt to unroll and optimise
      these two cases by the Rockbox project.  More work is needed. 
      optimised case: 4  neg value  optimised case: 8  neg value  general case  absolute value  neg value  weighted interlacing  otherwise basic interlacing took place  weighted interlacing  otherwise basic interlacing took place  2^result = something to do with output waiting.
     * perhaps matters if we read > 1 frame in a pass?
      unknown, skip 12 bits  the output sample size is stored soon  number of bytes in the (compressed) stream that are not compressed  whether the frame is compressed  now read the number of samples,
         * as a 32bit integer  so it is compressed  skip 16 bits, not sure what they are. seem to be used in
         * two channel case  read the predictor table  adaptive fir fprintf(stderr, "FIXME: unhandled predicition type: %i\n", prediction_type); i think the only other prediction type (or perhaps this is just a
             * boolean?) runs adaptive fir twice.. like:
             * predictor_decompress_fir_adapt(predictor_error, tempout, ...)
             * predictor_decompress_fir_adapt(predictor_error, outputsamples ...)
             * little strange..
              not compressed, easy case  special case of sign extension..
                 * as we'll be ORing the low 16bits into this  always 0 for uncompressed Output mono data as stereo fprintf(stderr, "FIXME: unimplemented sample size %i\n", infosamplesize); 2^result = something to do with output waiting.
     * perhaps matters if we read > 1 frame in a pass?
      unknown, skip 12 bits  the output sample size is stored soon  the number of bytes in the (compressed) stream that are not compressed  whether the frame is compressed  now read the number of samples,
         * as a 32bit integer  compressed ******* channel 1 ********** read the predictor table ******* channel 2 ******** read the predictor table ******************* see mono case  channel 1  adaptive fir  see mono case fprintf(stderr, "FIXME: unhandled predicition type: %i\n", prediction_type_a); channel 2  adaptive fir fprintf(stderr, "FIXME: unhandled predicition type: %i\n", prediction_type_b); not compressed, easy case  always 0 for uncompressedfprintf(stderr, "FIXME: unimplemented sample size %i\n", infosamplesize); setup the stream  save to gather byte consumption  TODO: The mono and stereo functions should be combined.  1 channel  2 channels  Unsupported  calculate consumed bytes  rockbox: not used
void create_alac(int samplesize, int numchannels, alac_file* alac)
{
    alac->samplesize = samplesize;
    alac->numchannels = numchannels;
    alac->bytespersample = (samplesize / 8) * numchannels;
} 
 * ALAC (Apple Lossless Audio Codec) decoder
 * Copyright (c) 2005 David Hammerton
 * All rights reserved.
 *
 * This is the actual decoder.
 *
 * http://crazney.net/programs/itunes/alac.html
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
  Endian/aligment safe functions - only used in alac_set_info()  size  frma  alac  size  alac  0 ?  buffer size / 2 ?  stream reading  supports reading 1 to 16 bits, in big endian format  shift left by the number of bits we've already read,
     * so that the top 'n' bits of the 24 bits we read will
     * be the return bits  and then only want the top 'n' bits from that, where
     * n is 'bits'  increase the buffer pointer if we've read over n bytes.  and the remainder goes back into the bit accumulator  supports reading 1 to 32 bits, in big endian format  reads a single bit  maximum number of bits for a rice prefix. decoded value read x, number of 1s before 0 represent the rice value. read the number from the bit stream (raw value) mask value to readsamplesize size  x = x * (2^k - 1) inc by 1 and shift out sign bit the sign is stored in the low bit update history special case, for compressed blocks of 0 note: block_size is always 16bit got block_size 0s first sample always copies  11111 - max value of predictor_coef_num  second-best case scenario for fir decompression,
       * error describes a small difference from the previous sample only
        read warm-up samples  4 and 8 are very common cases (the only ones i've seen).

      The following code is an initial attempt to unroll and optimise
      these two cases by the Rockbox project.  More work is needed. 
      optimised case: 4  neg value  optimised case: 8  neg value  general case  absolute value  neg value  weighted interlacing  otherwise basic interlacing took place  weighted interlacing  otherwise basic interlacing took place  2^result = something to do with output waiting.
     * perhaps matters if we read > 1 frame in a pass?
      unknown, skip 12 bits  the output sample size is stored soon  number of bytes in the (compressed) stream that are not compressed  whether the frame is compressed  now read the number of samples,
         * as a 32bit integer  so it is compressed  skip 16 bits, not sure what they are. seem to be used in
         * two channel case  read the predictor table  adaptive fir fprintf(stderr, "FIXME: unhandled predicition type: %i\n", prediction_type); i think the only other prediction type (or perhaps this is just a
             * boolean?) runs adaptive fir twice.. like:
             * predictor_decompress_fir_adapt(predictor_error, tempout, ...)
             * predictor_decompress_fir_adapt(predictor_error, outputsamples ...)
             * little strange..
              not compressed, easy case  special case of sign extension..
                 * as we'll be ORing the low 16bits into this  always 0 for uncompressed Output mono data as stereo fprintf(stderr, "FIXME: unimplemented sample size %i\n", infosamplesize); 2^result = something to do with output waiting.
     * perhaps matters if we read > 1 frame in a pass?
      unknown, skip 12 bits  the output sample size is stored soon  the number of bytes in the (compressed) stream that are not compressed  whether the frame is compressed  now read the number of samples,
         * as a 32bit integer  compressed ******* channel 1 ********** read the predictor table ******* channel 2 ******** read the predictor table ******************* see mono case  channel 1  adaptive fir  see mono case fprintf(stderr, "FIXME: unhandled predicition type: %i\n", prediction_type_a); channel 2  adaptive fir fprintf(stderr, "FIXME: unhandled predicition type: %i\n", prediction_type_b); not compressed, easy case  always 0 for uncompressedfprintf(stderr, "FIXME: unimplemented sample size %i\n", infosamplesize); setup the stream  save to gather byte consumption  TODO: The mono and stereo functions should be combined.  1 channel  2 channels  Unsupported  calculate consumed bytes  rockbox: not used
void create_alac(int samplesize, int numchannels, alac_file* alac)
{
    alac->samplesize = samplesize;
    alac->numchannels = numchannels;
    alac->bytespersample = (samplesize / 8) * numchannels;
} 
 * ALAC (Apple Lossless Audio Codec) decoder
 * Copyright (c) 2005 David Hammerton
 * All rights reserved.
 *
 * This is the actual decoder.
 *
 * http://crazney.net/programs/itunes/alac.html
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
  Endian/aligment safe functions - only used in alac_set_info()  size  frma  alac  size  alac  0 ?  buffer size / 2 ?  stream reading  supports reading 1 to 16 bits, in big endian format  shift left by the number of bits we've already read,
     * so that the top 'n' bits of the 24 bits we read will
     * be the return bits  and then only want the top 'n' bits from that, where
     * n is 'bits'  increase the buffer pointer if we've read over n bytes.  and the remainder goes back into the bit accumulator  supports reading 1 to 32 bits, in big endian format  reads a single bit  maximum number of bits for a rice prefix. decoded value read x, number of 1s before 0 represent the rice value. read the number from the bit stream (raw value) mask value to readsamplesize size  x = x * (2^k - 1) inc by 1 and shift out sign bit the sign is stored in the low bit update history special case, for compressed blocks of 0 note: block_size is always 16bit got block_size 0s first sample always copies  11111 - max value of predictor_coef_num  second-best case scenario for fir decompression,
       * error describes a small difference from the previous sample only
        read warm-up samples  4 and 8 are very common cases (the only ones i've seen).

      The following code is an initial attempt to unroll and optimise
      these two cases by the Rockbox project.  More work is needed. 
      optimised case: 4  neg value  optimised case: 8  neg value  general case  absolute value  neg value  weighted interlacing  otherwise basic interlacing took place  weighted interlacing  otherwise basic interlacing took place  2^result = something to do with output waiting.
     * perhaps matters if we read > 1 frame in a pass?
      unknown, skip 12 bits  the output sample size is stored soon  number of bytes in the (compressed) stream that are not compressed  whether the frame is compressed  now read the number of samples,
         * as a 32bit integer  so it is compressed  skip 16 bits, not sure what they are. seem to be used in
         * two channel case  read the predictor table  adaptive fir fprintf(stderr, "FIXME: unhandled predicition type: %i\n", prediction_type); i think the only other prediction type (or perhaps this is just a
             * boolean?) runs adaptive fir twice.. like:
             * predictor_decompress_fir_adapt(predictor_error, tempout, ...)
             * predictor_decompress_fir_adapt(predictor_error, outputsamples ...)
             * little strange..
              not compressed, easy case  special case of sign extension..
                 * as we'll be ORing the low 16bits into this  always 0 for uncompressed Output mono data as stereo fprintf(stderr, "FIXME: unimplemented sample size %i\n", infosamplesize); 2^result = something to do with output waiting.
     * perhaps matters if we read > 1 frame in a pass?
      unknown, skip 12 bits  the output sample size is stored soon  the number of bytes in the (compressed) stream that are not compressed  whether the frame is compressed  now read the number of samples,
         * as a 32bit integer  compressed ******* channel 1 ********** read the predictor table ******* channel 2 ******** read the predictor table ******************* see mono case  channel 1  adaptive fir  see mono case fprintf(stderr, "FIXME: unhandled predicition type: %i\n", prediction_type_a); channel 2  adaptive fir fprintf(stderr, "FIXME: unhandled predicition type: %i\n", prediction_type_b); not compressed, easy case  always 0 for uncompressedfprintf(stderr, "FIXME: unimplemented sample size %i\n", infosamplesize); setup the stream  save to gather byte consumption  TODO: The mono and stereo functions should be combined.  1 channel  2 channels  Unsupported  calculate consumed bytes  rockbox: not used
void create_alac(int samplesize, int numchannels, alac_file* alac)
{
    alac->samplesize = samplesize;
    alac->numchannels = numchannels;
    alac->bytespersample = (samplesize / 8) * numchannels;
} 