
 * SHA transform algorithm, originally taken from code written by
 * Peter Gutmann, and placed in the public domain.
  The SHA f()-functions.   x ? y : z  XOR  majority  The SHA Mysterious Constants  Rounds  0-19: sqrt(2) * 2^30  Rounds 20-39: sqrt(3) * 2^30  Rounds 40-59: sqrt(5) * 2^30  Rounds 60-79: sqrt(10) * 2^30 *
 * sha_transform - single block SHA1 transform
 *
 * @digest: 160 bit digest to update
 * @data:   512 bits of data to hash
 * @W:      80 words of workspace (see note)
 *
 * This function generates a SHA1 digest for a single 512-bit block.
 * Be warned, it does not handle padding and message digest, do not
 * confuse it with the full FIPS 180-1 digest algorithm for variable
 * length messages.
 *
 * Note: If the hash is security sensitive, the caller should be sure
 * to clear the workspace. This is left to the caller to avoid
 * unnecessary clears between chained hashing operations.
  word load/store may be unaligned here, so use bytes instead *
 * sha_init - initialize the vectors for a SHA1 digest
 * @buf: vector to initialize
 
 * SHA transform algorithm, originally taken from code written by
 * Peter Gutmann, and placed in the public domain.
  The SHA f()-functions.   x ? y : z  XOR  majority  The SHA Mysterious Constants  Rounds  0-19: sqrt(2) * 2^30  Rounds 20-39: sqrt(3) * 2^30  Rounds 40-59: sqrt(5) * 2^30  Rounds 60-79: sqrt(10) * 2^30 *
 * sha_transform - single block SHA1 transform
 *
 * @digest: 160 bit digest to update
 * @data:   512 bits of data to hash
 * @W:      80 words of workspace (see note)
 *
 * This function generates a SHA1 digest for a single 512-bit block.
 * Be warned, it does not handle padding and message digest, do not
 * confuse it with the full FIPS 180-1 digest algorithm for variable
 * length messages.
 *
 * Note: If the hash is security sensitive, the caller should be sure
 * to clear the workspace. This is left to the caller to avoid
 * unnecessary clears between chained hashing operations.
  word load/store may be unaligned here, so use bytes instead *
 * sha_init - initialize the vectors for a SHA1 digest
 * @buf: vector to initialize
 
 * SHA transform algorithm, originally taken from code written by
 * Peter Gutmann, and placed in the public domain.
  The SHA f()-functions.   x ? y : z  XOR  majority  The SHA Mysterious Constants  Rounds  0-19: sqrt(2) * 2^30  Rounds 20-39: sqrt(3) * 2^30  Rounds 40-59: sqrt(5) * 2^30  Rounds 60-79: sqrt(10) * 2^30 *
 * sha_transform - single block SHA1 transform
 *
 * @digest: 160 bit digest to update
 * @data:   512 bits of data to hash
 * @W:      80 words of workspace (see note)
 *
 * This function generates a SHA1 digest for a single 512-bit block.
 * Be warned, it does not handle padding and message digest, do not
 * confuse it with the full FIPS 180-1 digest algorithm for variable
 * length messages.
 *
 * Note: If the hash is security sensitive, the caller should be sure
 * to clear the workspace. This is left to the caller to avoid
 * unnecessary clears between chained hashing operations.
  word load/store may be unaligned here, so use bytes instead *
 * sha_init - initialize the vectors for a SHA1 digest
 * @buf: vector to initialize
 