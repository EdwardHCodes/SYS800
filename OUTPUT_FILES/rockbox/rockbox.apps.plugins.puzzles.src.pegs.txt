
 * pegs.c: the classic Peg Solitaire game.
 
 * Grid shapes. I do some macro ickery here to ensure that my enum
 * and the various forms of my name list always match up.
  structure copy 
     * It might be possible to implement generalisations of Cross
     * and Octagon, but only if I can find a proof that they're all
     * soluble. For the moment, therefore, I'm going to disallow
     * them at any size other than the standard one.
      ----------------------------------------------------------------------
 * Beginning of code to generate random Peg Solitaire boards.
 * 
 * This procedure is done with no aesthetic judgment, no effort at
 * symmetry, no difficulty grading and generally no finesse
 * whatsoever. We simply begin with an empty board containing a
 * single peg, and repeatedly make random reverse moves until it's
 * plausibly full. This typically yields a scrappy haphazard mess
 * with several holes, an uneven shape, and no redeeming features
 * except guaranteed solubility.
 *
 * My only concessions to sophistication are (a) to repeat the
 * generation process until I at least get a grid that touches
 * every edge of the specified board size, and (b) to try when
 * selecting moves to reuse existing space rather than expanding
 * into new space (so that non-rectangular board shape becomes a
 * factor during play).
 
     * x,y are the start point of the move during generation (hence
     * its endpoint during normal play).
     * 
     * dx,dy are the direction of the move during generation.
     * Absolute value 1. Hence, for example, x=3,y=5,dx=1,dy=0
     * means that the move during generation starts at (3,5) and
     * ends at (5,5), and vice versa during normal play.
     
     * cost is 0, 1 or 2, depending on how many GRID_OBSTs we must
     * turn into GRID_HOLEs to play this move.
     
     * There are twelve moves that can include (x,y): three in each
     * of four directions. Check each one to see if it's possible.
      completely invalid move  completely invalid move 
		 * This move is possible. See if it's already in
		 * the tree.
		 
		     * It's in the tree but listed with the wrong
		     * cost. Remove the old version.
		     
		 * This move is impossible. If it is already in the
		 * tree, delete it.
		 * 
		 * (We make use here of the fact that del234
		 * doesn't have to be passed a pointer to the
		 * _actual_ element it's deleting: it merely needs
		 * one that compares equal to it, and it will
		 * return the one it deletes.)
		 
	 * See how many moves we can make at zero cost. Make one,
	 * if possible. Failing that, make a one-cost move, and
	 * then a two-cost one.
	 * 
	 * After filling at least half the input grid, we no longer
	 * accept cost-2 moves: if that's our only option, we give
	 * up and finish.
	  placate optimiser  ----------------------------------------------------------------------
 * End of board generation code. Now for the client code which uses
 * it as part of the puzzle.
  placate optimiser 
	     * The octagonal (European) solitaire layout is
	     * actually _insoluble_ with the starting hole at the
	     * centre. Here's a proof:
	     * 
	     * Colour the squares of the board diagonally in
	     * stripes of three different colours, which I'll call
	     * A, B and C. So the board looks like this:
	     * 
	     *     A B C
	     *   A B C A B
	     * A B C A B C A
	     * B C A B C A B
	     * C A B C A B C
	     *   B C A B C
	     *     A B C
	     * 
	     * Suppose we keep running track of the number of pegs
	     * occuping each colour of square. This colouring has
	     * the property that any valid move whatsoever changes
	     * all three of those counts by one (two of them go
	     * down and one goes up), which means that the _parity_
	     * of every count flips on every move.
	     * 
	     * If the centre square starts off unoccupied, then
	     * there are twelve pegs on each colour and all three
	     * counts start off even; therefore, after 35 moves all
	     * three counts would have to be odd, which isn't
	     * possible if there's only one peg left. []
	     * 
	     * This proof works just as well if the starting hole
	     * is _any_ of the thirteen positions labelled B. Also,
	     * we can stripe the board in the opposite direction
	     * and rule out any square labelled B in that colouring
	     * as well. This leaves:
	     * 
	     *     Y n Y
	     *   n n Y n n
	     * Y n n Y n n Y
	     * n Y Y n Y Y n
	     * Y n n Y n n Y
	     *   n n Y n n
	     *     Y n Y
	     * 
	     * where the ns are squares we've proved insoluble, and
	     * the Ys are the ones remaining.
	     * 
	     * That doesn't prove all those starting positions to
	     * be soluble, of course; they're merely the ones we
	     * _haven't_ proved to be impossible. Nevertheless, it
	     * turns out that they are all soluble, so when the
	     * user requests an Octagon board the simplest thing is
	     * to pick one of these at random.
	     * 
	     * Rather than picking equiprobably from those twelve
	     * positions, we'll pick equiprobably from the three
	     * equivalence classes
	      Remove a random corner piece.  +1 or -1  +1 or -1  Remove a random piece two from the centre.  case 2  Remove a random piece one from the centre. 
     * Encode a game description which is simply a long list of P
     * for peg, H for hole or O for obstacle.
      is a drag in progress?  grid coords of drag start cell  pixel coords of current drag posn  make sure we start the cursor somewhere on the grid. 
     * Cancel a drag, in case the source square has become
     * unoccupied.
     
     * Also, cancel a keyboard-driven jump if one is half way to being
     * input.
     
	 * Left button down: we attempt to start a drag.
	 
	 * There certainly shouldn't be a current drag in progress,
	 * unless the midend failed to send us button events in
	 * order; it has a responsibility to always get that right,
	 * so we can legitimately punish it by failing an
	 * assertion.
	 
	 * Mouse moved; just move the peg being dragged.
	 
	 * Button released. Identify the target square of the drag,
	 * see if it represents a valid move, and if so make it.
	  cancel the drag no matter what  target out of range  move length was wrong  grid contents were invalid 
	 * We have a valid move. Encode it simply as source and
	 * destination coordinate pairs.
	  Not jumping; move cursor as usual, making sure we don't
             * leave the gameboard (which may be an irregular shape)  We're jumping; if the requested direction has a hole, and
             * there's a peg in the way,  reset, whatever.  Move cursor to the jumped-to location (this felt more
                 * natural while playtesting)  cursor is on peg: next arrow-move wil jump.  source out of range  target out of range  move length was wrong  grid contents were invalid 
         * Opinion varies on whether getting to a single peg counts as
         * completing the game, or whether that peg has to be at a
         * specific location (central in the classic cross game, for
         * instance). For now we take the former, rather lax position.
          ----------------------------------------------------------------------
 * Drawing routines.
  Ick: fake up `ds->tilesize' for macro expansion purposes  set_size is never called twice  not decided yet  We can't allocate the blitter rectangle for the drag background
     * until we know what size to make it.  can't jump from a hole! 
     * Erase the sprite currently being dragged, if any.
     
	 * Draw relief marks around all the squares that aren't
	 * GRID_OBST.
	 
		     * First pass: draw the full relief square.
		     
		     * Second pass: draw everything but the two
		     * diagonal corners.
		     
		     * Third pass: draw a trapezium on each edge.
		     
		     * Second pass: draw everything but the two
		     * diagonal corners.
		     
     * Loop over the grid redrawing anything that looks as if it
     * needs it.
     
	     * Blank the source of a drag so it looks as if the
	     * user picked the peg up physically.
	      always redraw when flashing 
     * Draw the dragging sprite if any.
     
     * Dead-end situations are assumed to be rescuable by Undo, so we
     * don't bother to identify them and return -1.
      game_request_keys  wants_statusbar  flags  vim: set shiftwidth=4 tabstop=8: 
 * pegs.c: the classic Peg Solitaire game.
 
 * Grid shapes. I do some macro ickery here to ensure that my enum
 * and the various forms of my name list always match up.
  structure copy 
     * It might be possible to implement generalisations of Cross
     * and Octagon, but only if I can find a proof that they're all
     * soluble. For the moment, therefore, I'm going to disallow
     * them at any size other than the standard one.
      ----------------------------------------------------------------------
 * Beginning of code to generate random Peg Solitaire boards.
 * 
 * This procedure is done with no aesthetic judgment, no effort at
 * symmetry, no difficulty grading and generally no finesse
 * whatsoever. We simply begin with an empty board containing a
 * single peg, and repeatedly make random reverse moves until it's
 * plausibly full. This typically yields a scrappy haphazard mess
 * with several holes, an uneven shape, and no redeeming features
 * except guaranteed solubility.
 *
 * My only concessions to sophistication are (a) to repeat the
 * generation process until I at least get a grid that touches
 * every edge of the specified board size, and (b) to try when
 * selecting moves to reuse existing space rather than expanding
 * into new space (so that non-rectangular board shape becomes a
 * factor during play).
 
     * x,y are the start point of the move during generation (hence
     * its endpoint during normal play).
     * 
     * dx,dy are the direction of the move during generation.
     * Absolute value 1. Hence, for example, x=3,y=5,dx=1,dy=0
     * means that the move during generation starts at (3,5) and
     * ends at (5,5), and vice versa during normal play.
     
     * cost is 0, 1 or 2, depending on how many GRID_OBSTs we must
     * turn into GRID_HOLEs to play this move.
     
     * There are twelve moves that can include (x,y): three in each
     * of four directions. Check each one to see if it's possible.
      completely invalid move  completely invalid move 
		 * This move is possible. See if it's already in
		 * the tree.
		 
		     * It's in the tree but listed with the wrong
		     * cost. Remove the old version.
		     
		 * This move is impossible. If it is already in the
		 * tree, delete it.
		 * 
		 * (We make use here of the fact that del234
		 * doesn't have to be passed a pointer to the
		 * _actual_ element it's deleting: it merely needs
		 * one that compares equal to it, and it will
		 * return the one it deletes.)
		 
	 * See how many moves we can make at zero cost. Make one,
	 * if possible. Failing that, make a one-cost move, and
	 * then a two-cost one.
	 * 
	 * After filling at least half the input grid, we no longer
	 * accept cost-2 moves: if that's our only option, we give
	 * up and finish.
	  placate optimiser  ----------------------------------------------------------------------
 * End of board generation code. Now for the client code which uses
 * it as part of the puzzle.
  placate optimiser 
	     * The octagonal (European) solitaire layout is
	     * actually _insoluble_ with the starting hole at the
	     * centre. Here's a proof:
	     * 
	     * Colour the squares of the board diagonally in
	     * stripes of three different colours, which I'll call
	     * A, B and C. So the board looks like this:
	     * 
	     *     A B C
	     *   A B C A B
	     * A B C A B C A
	     * B C A B C A B
	     * C A B C A B C
	     *   B C A B C
	     *     A B C
	     * 
	     * Suppose we keep running track of the number of pegs
	     * occuping each colour of square. This colouring has
	     * the property that any valid move whatsoever changes
	     * all three of those counts by one (two of them go
	     * down and one goes up), which means that the _parity_
	     * of every count flips on every move.
	     * 
	     * If the centre square starts off unoccupied, then
	     * there are twelve pegs on each colour and all three
	     * counts start off even; therefore, after 35 moves all
	     * three counts would have to be odd, which isn't
	     * possible if there's only one peg left. []
	     * 
	     * This proof works just as well if the starting hole
	     * is _any_ of the thirteen positions labelled B. Also,
	     * we can stripe the board in the opposite direction
	     * and rule out any square labelled B in that colouring
	     * as well. This leaves:
	     * 
	     *     Y n Y
	     *   n n Y n n
	     * Y n n Y n n Y
	     * n Y Y n Y Y n
	     * Y n n Y n n Y
	     *   n n Y n n
	     *     Y n Y
	     * 
	     * where the ns are squares we've proved insoluble, and
	     * the Ys are the ones remaining.
	     * 
	     * That doesn't prove all those starting positions to
	     * be soluble, of course; they're merely the ones we
	     * _haven't_ proved to be impossible. Nevertheless, it
	     * turns out that they are all soluble, so when the
	     * user requests an Octagon board the simplest thing is
	     * to pick one of these at random.
	     * 
	     * Rather than picking equiprobably from those twelve
	     * positions, we'll pick equiprobably from the three
	     * equivalence classes
	      Remove a random corner piece.  +1 or -1  +1 or -1  Remove a random piece two from the centre.  case 2  Remove a random piece one from the centre. 
     * Encode a game description which is simply a long list of P
     * for peg, H for hole or O for obstacle.
      is a drag in progress?  grid coords of drag start cell  pixel coords of current drag posn  make sure we start the cursor somewhere on the grid. 
     * Cancel a drag, in case the source square has become
     * unoccupied.
     
     * Also, cancel a keyboard-driven jump if one is half way to being
     * input.
     
	 * Left button down: we attempt to start a drag.
	 
	 * There certainly shouldn't be a current drag in progress,
	 * unless the midend failed to send us button events in
	 * order; it has a responsibility to always get that right,
	 * so we can legitimately punish it by failing an
	 * assertion.
	 
	 * Mouse moved; just move the peg being dragged.
	 
	 * Button released. Identify the target square of the drag,
	 * see if it represents a valid move, and if so make it.
	  cancel the drag no matter what  target out of range  move length was wrong  grid contents were invalid 
	 * We have a valid move. Encode it simply as source and
	 * destination coordinate pairs.
	  Not jumping; move cursor as usual, making sure we don't
             * leave the gameboard (which may be an irregular shape)  We're jumping; if the requested direction has a hole, and
             * there's a peg in the way,  reset, whatever.  Move cursor to the jumped-to location (this felt more
                 * natural while playtesting)  cursor is on peg: next arrow-move wil jump.  source out of range  target out of range  move length was wrong  grid contents were invalid 
         * Opinion varies on whether getting to a single peg counts as
         * completing the game, or whether that peg has to be at a
         * specific location (central in the classic cross game, for
         * instance). For now we take the former, rather lax position.
          ----------------------------------------------------------------------
 * Drawing routines.
  Ick: fake up `ds->tilesize' for macro expansion purposes  set_size is never called twice  not decided yet  We can't allocate the blitter rectangle for the drag background
     * until we know what size to make it.  can't jump from a hole! 
     * Erase the sprite currently being dragged, if any.
     
	 * Draw relief marks around all the squares that aren't
	 * GRID_OBST.
	 
		     * First pass: draw the full relief square.
		     
		     * Second pass: draw everything but the two
		     * diagonal corners.
		     
		     * Third pass: draw a trapezium on each edge.
		     
		     * Second pass: draw everything but the two
		     * diagonal corners.
		     
     * Loop over the grid redrawing anything that looks as if it
     * needs it.
     
	     * Blank the source of a drag so it looks as if the
	     * user picked the peg up physically.
	      always redraw when flashing 
     * Draw the dragging sprite if any.
     
     * Dead-end situations are assumed to be rescuable by Undo, so we
     * don't bother to identify them and return -1.
      game_request_keys  wants_statusbar  flags  vim: set shiftwidth=4 tabstop=8: 
 * pegs.c: the classic Peg Solitaire game.
 
 * Grid shapes. I do some macro ickery here to ensure that my enum
 * and the various forms of my name list always match up.
  structure copy 
     * It might be possible to implement generalisations of Cross
     * and Octagon, but only if I can find a proof that they're all
     * soluble. For the moment, therefore, I'm going to disallow
     * them at any size other than the standard one.
      ----------------------------------------------------------------------
 * Beginning of code to generate random Peg Solitaire boards.
 * 
 * This procedure is done with no aesthetic judgment, no effort at
 * symmetry, no difficulty grading and generally no finesse
 * whatsoever. We simply begin with an empty board containing a
 * single peg, and repeatedly make random reverse moves until it's
 * plausibly full. This typically yields a scrappy haphazard mess
 * with several holes, an uneven shape, and no redeeming features
 * except guaranteed solubility.
 *
 * My only concessions to sophistication are (a) to repeat the
 * generation process until I at least get a grid that touches
 * every edge of the specified board size, and (b) to try when
 * selecting moves to reuse existing space rather than expanding
 * into new space (so that non-rectangular board shape becomes a
 * factor during play).
 
     * x,y are the start point of the move during generation (hence
     * its endpoint during normal play).
     * 
     * dx,dy are the direction of the move during generation.
     * Absolute value 1. Hence, for example, x=3,y=5,dx=1,dy=0
     * means that the move during generation starts at (3,5) and
     * ends at (5,5), and vice versa during normal play.
     
     * cost is 0, 1 or 2, depending on how many GRID_OBSTs we must
     * turn into GRID_HOLEs to play this move.
     
     * There are twelve moves that can include (x,y): three in each
     * of four directions. Check each one to see if it's possible.
      completely invalid move  completely invalid move 
		 * This move is possible. See if it's already in
		 * the tree.
		 
		     * It's in the tree but listed with the wrong
		     * cost. Remove the old version.
		     
		 * This move is impossible. If it is already in the
		 * tree, delete it.
		 * 
		 * (We make use here of the fact that del234
		 * doesn't have to be passed a pointer to the
		 * _actual_ element it's deleting: it merely needs
		 * one that compares equal to it, and it will
		 * return the one it deletes.)
		 
	 * See how many moves we can make at zero cost. Make one,
	 * if possible. Failing that, make a one-cost move, and
	 * then a two-cost one.
	 * 
	 * After filling at least half the input grid, we no longer
	 * accept cost-2 moves: if that's our only option, we give
	 * up and finish.
	  placate optimiser  ----------------------------------------------------------------------
 * End of board generation code. Now for the client code which uses
 * it as part of the puzzle.
  placate optimiser 
	     * The octagonal (European) solitaire layout is
	     * actually _insoluble_ with the starting hole at the
	     * centre. Here's a proof:
	     * 
	     * Colour the squares of the board diagonally in
	     * stripes of three different colours, which I'll call
	     * A, B and C. So the board looks like this:
	     * 
	     *     A B C
	     *   A B C A B
	     * A B C A B C A
	     * B C A B C A B
	     * C A B C A B C
	     *   B C A B C
	     *     A B C
	     * 
	     * Suppose we keep running track of the number of pegs
	     * occuping each colour of square. This colouring has
	     * the property that any valid move whatsoever changes
	     * all three of those counts by one (two of them go
	     * down and one goes up), which means that the _parity_
	     * of every count flips on every move.
	     * 
	     * If the centre square starts off unoccupied, then
	     * there are twelve pegs on each colour and all three
	     * counts start off even; therefore, after 35 moves all
	     * three counts would have to be odd, which isn't
	     * possible if there's only one peg left. []
	     * 
	     * This proof works just as well if the starting hole
	     * is _any_ of the thirteen positions labelled B. Also,
	     * we can stripe the board in the opposite direction
	     * and rule out any square labelled B in that colouring
	     * as well. This leaves:
	     * 
	     *     Y n Y
	     *   n n Y n n
	     * Y n n Y n n Y
	     * n Y Y n Y Y n
	     * Y n n Y n n Y
	     *   n n Y n n
	     *     Y n Y
	     * 
	     * where the ns are squares we've proved insoluble, and
	     * the Ys are the ones remaining.
	     * 
	     * That doesn't prove all those starting positions to
	     * be soluble, of course; they're merely the ones we
	     * _haven't_ proved to be impossible. Nevertheless, it
	     * turns out that they are all soluble, so when the
	     * user requests an Octagon board the simplest thing is
	     * to pick one of these at random.
	     * 
	     * Rather than picking equiprobably from those twelve
	     * positions, we'll pick equiprobably from the three
	     * equivalence classes
	      Remove a random corner piece.  +1 or -1  +1 or -1  Remove a random piece two from the centre.  case 2  Remove a random piece one from the centre. 
     * Encode a game description which is simply a long list of P
     * for peg, H for hole or O for obstacle.
      is a drag in progress?  grid coords of drag start cell  pixel coords of current drag posn  make sure we start the cursor somewhere on the grid. 
     * Cancel a drag, in case the source square has become
     * unoccupied.
     
     * Also, cancel a keyboard-driven jump if one is half way to being
     * input.
     
	 * Left button down: we attempt to start a drag.
	 
	 * There certainly shouldn't be a current drag in progress,
	 * unless the midend failed to send us button events in
	 * order; it has a responsibility to always get that right,
	 * so we can legitimately punish it by failing an
	 * assertion.
	 
	 * Mouse moved; just move the peg being dragged.
	 
	 * Button released. Identify the target square of the drag,
	 * see if it represents a valid move, and if so make it.
	  cancel the drag no matter what  target out of range  move length was wrong  grid contents were invalid 
	 * We have a valid move. Encode it simply as source and
	 * destination coordinate pairs.
	  Not jumping; move cursor as usual, making sure we don't
             * leave the gameboard (which may be an irregular shape)  We're jumping; if the requested direction has a hole, and
             * there's a peg in the way,  reset, whatever.  Move cursor to the jumped-to location (this felt more
                 * natural while playtesting)  cursor is on peg: next arrow-move wil jump.  source out of range  target out of range  move length was wrong  grid contents were invalid 
         * Opinion varies on whether getting to a single peg counts as
         * completing the game, or whether that peg has to be at a
         * specific location (central in the classic cross game, for
         * instance). For now we take the former, rather lax position.
          ----------------------------------------------------------------------
 * Drawing routines.
  Ick: fake up `ds->tilesize' for macro expansion purposes  set_size is never called twice  not decided yet  We can't allocate the blitter rectangle for the drag background
     * until we know what size to make it.  can't jump from a hole! 
     * Erase the sprite currently being dragged, if any.
     
	 * Draw relief marks around all the squares that aren't
	 * GRID_OBST.
	 
		     * First pass: draw the full relief square.
		     
		     * Second pass: draw everything but the two
		     * diagonal corners.
		     
		     * Third pass: draw a trapezium on each edge.
		     
		     * Second pass: draw everything but the two
		     * diagonal corners.
		     
     * Loop over the grid redrawing anything that looks as if it
     * needs it.
     
	     * Blank the source of a drag so it looks as if the
	     * user picked the peg up physically.
	      always redraw when flashing 
     * Draw the dragging sprite if any.
     
     * Dead-end situations are assumed to be rescuable by Undo, so we
     * don't bother to identify them and return -1.
      game_request_keys  wants_statusbar  flags  vim: set shiftwidth=4 tabstop=8: 