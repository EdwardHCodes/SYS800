**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** for strdup  double-quoted string  if str is not NULL, it must be a malloc'd pointer  skip "  compute length  parse again  skip '  we expect n<=4 character and then '   skip '  check base  remember position  skip whitespace  skip C++ style comments  skip C-style comments  When lexems hold strings (like identifier), it might be useful to steal
 * the pointer and don't clean the lexem but in other case, one don't want
 * to keep the pointer to the string and just want to release the memory.
 * Thus clean_lexem should be true except when one keeps a pointer  add initial constants  init lexer  don't clean init lexem because it doesn't exist  constants ?  lexem string is kept as option name  options ?  lexem string is kept as option name  sources  lexem string is kept as source name  sections  can be any number  options ?  lexem string is kept as option name  commands  lexem string kept as identifier   load at lexem string kept as identifier   lexem string is kept as source id  FIXME handle escape FIXME handle escape FIXME handle escape**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** for strdup  double-quoted string  if str is not NULL, it must be a malloc'd pointer  skip "  compute length  parse again  skip '  we expect n<=4 character and then '   skip '  check base  remember position  skip whitespace  skip C++ style comments  skip C-style comments  When lexems hold strings (like identifier), it might be useful to steal
 * the pointer and don't clean the lexem but in other case, one don't want
 * to keep the pointer to the string and just want to release the memory.
 * Thus clean_lexem should be true except when one keeps a pointer  add initial constants  init lexer  don't clean init lexem because it doesn't exist  constants ?  lexem string is kept as option name  options ?  lexem string is kept as option name  sources  lexem string is kept as source name  sections  can be any number  options ?  lexem string is kept as option name  commands  lexem string kept as identifier   load at lexem string kept as identifier   lexem string is kept as source id  FIXME handle escape FIXME handle escape FIXME handle escape**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** for strdup  double-quoted string  if str is not NULL, it must be a malloc'd pointer  skip "  compute length  parse again  skip '  we expect n<=4 character and then '   skip '  check base  remember position  skip whitespace  skip C++ style comments  skip C-style comments  When lexems hold strings (like identifier), it might be useful to steal
 * the pointer and don't clean the lexem but in other case, one don't want
 * to keep the pointer to the string and just want to release the memory.
 * Thus clean_lexem should be true except when one keeps a pointer  add initial constants  init lexer  don't clean init lexem because it doesn't exist  constants ?  lexem string is kept as option name  options ?  lexem string is kept as option name  sources  lexem string is kept as source name  sections  can be any number  options ?  lexem string is kept as option name  commands  lexem string kept as identifier   load at lexem string kept as identifier   lexem string is kept as source id  FIXME handle escape FIXME handle escape FIXME handle escape