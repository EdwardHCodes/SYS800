
  Copyright (c) 2005-2009, The Musepack Development Team
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are
  met:

  * Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.

  * Redistributions in binary form must reproduce the above
  copyright notice, this list of conditions and the following
  disclaimer in the documentation and/or other materials provided
  with the distribution.

  * Neither the name of the The Musepack Development Team nor the
  names of its contributors may be used to endorse or promote
  products derived from this software without specific prior
  written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
/ maximum number of seek points in the table. The distance between points will/ be adapted so this value is never exceeded. defines globals reset Coldfire optimized read when rebuffering *
 * seek to a bit position in the stream
 * @param d demuxer context
 * @param fpos position in the stream in bits from the beginning of mpc datas
 * @param min_bytes number of bytes to load after seeking
  d->bits_reader.buff - d->buffer = current byte position within buffer d->bytes_total = buffer is filled with bytes_total bytes fpos = desired file position in bit (not byte) buf_fpos = desired byte position within buffer is desired byte position within lower and upper boundaries of buffer? desired bytes are available in current buffer buffer needs to be refilled*
 * return the current position in the stream (in bits) from the beginning
 * of the file
 * @param d demuxer context
 * @return current stream position in bits
 *
 * Searches for a ID3v2-tag and reads the length (in bytes) of it.
 *
 * @param d demuxer context
 * @return size of tag, in bytes
 * @return MPC_STATUS_FAIL on errors of any kind
  ID3v2.4-flag we must be at the beginning of the stream check id3-tag read ID3 read tag version read flags not (yet???) allowed read size read size read size read size not allowed read headerSize (syncsave: 4 * $0xxxxxxx = 28 significant bits)header This is called before file headers get read, streamversion etc isn't yet known, demuxing isn't properly initialized and we can't call mpc_demux_seek() from here. rockbox: do not use
static mpc_status mpc_demux_ST(mpc_demux * d)
{
    mpc_uint64_t tmp;
    mpc_seek_t * table, last[2];
    mpc_bits_reader r = d->bits_reader;
    mpc_uint_t i, diff_pwr = 0, mask;
    mpc_uint32_t file_table_size;

    if (d->seek_table != 0)
        return MPC_STATUS_OK;

    mpc_bits_get_size(&r, &tmp);
    file_table_size = (mpc_seek_t) tmp;
    d->seek_pwr = d->si.block_pwr + mpc_bits_read(&r, 4);

    tmp = 2 + d->si.samples / (MPC_FRAME_LENGTH << d->seek_pwr);
    while (tmp > MAX_SEEK_TABLE_SIZE) {
        d->seek_pwr++;
        diff_pwr++;
        tmp = 2 + d->si.samples / (MPC_FRAME_LENGTH << d->seek_pwr);
    }
    if ((file_table_size >> diff_pwr) > tmp)
        file_table_size = tmp << diff_pwr;
    d->seek_table = g_seek_table;
    d->seek_table_size = (file_table_size + ((1 << diff_pwr) - 1)) >> diff_pwr;

    table = d->seek_table;
    mpc_bits_get_size(&r, &tmp);
    table[0] = last[0] = (mpc_seek_t) (tmp + d->si.header_position) * 8;

    if (d->seek_table_size == 1)
        return MPC_STATUS_OK;

    mpc_bits_get_size(&r, &tmp);
    last[1] = (mpc_seek_t) (tmp + d->si.header_position) * 8;
    if (diff_pwr == 0) table[1] = last[1];

    mask = (1 << diff_pwr) - 1;
    for (i = 2; i < file_table_size; i++) {
        int code = mpc_bits_golomb_dec(&r, 12);
        if (code & 1)
            code = -(code & (-1 << 1));
        code <<= 2;
        last[i & 1] = code + 2 * last[(i-1) & 1] - last[i & 1];
        if ((i & mask) == 0)
            table[i >> diff_pwr] = last[i & 1];
    }
    return MPC_STATUS_OK;
}

static mpc_status mpc_demux_SP(mpc_demux * d, int size, int block_size)
{
    mpc_seek_t cur;
    mpc_uint64_t ptr;
    mpc_block b;
    int st_head_size;

    cur = mpc_demux_pos(d);
    mpc_bits_get_size(&d->bits_reader, &ptr);
    MPC_AUTO_FAIL( mpc_demux_seek(d, (ptr - size) * 8 + cur, 11) );
    st_head_size = mpc_bits_get_block(&d->bits_reader, &b);
    if (memcmp(b.key, "ST", 2) == 0) {
        d->chap_pos = (ptr - size + b.size + st_head_size) * 8 + cur;
        d->chap_nb = -1;
		if (mpc_demux_fill(d, (mpc_uint32_t) b.size, 0) < b.size)
			return MPC_STATUS_FAIL;
		MPC_AUTO_FAIL( mpc_demux_ST(d) );
    }
    return mpc_demux_seek(d, cur, 11 + block_size);
}
 rockbox: not used
static void mpc_demux_chap_empty(mpc_demux * d) {
	free(d->chap); d->chap = 0;
	d->chap_nb = 0; // -1 for undefined, 0 for no chapters
	d->chap_pos = 0;
}
 rockbox: not used
static mpc_status mpc_demux_chap_find_inner(mpc_demux * d)
{
    mpc_block b;
    int tag_size = 0, chap_size = 0, size, i = 0;

    d->chap_nb = 0;

    if (d->si.stream_version < 8)
        return MPC_STATUS_OK;

    if (d->chap_pos == 0) {
        mpc_uint64_t cur_pos = (d->si.header_position + 4) * 8;
        MPC_AUTO_FAIL( mpc_demux_seek(d, cur_pos, 11) ); // seek to the beginning of the stream
        size = mpc_bits_get_block(&d->bits_reader, &b);
        while (memcmp(b.key, "SE", 2) != 0) {
            mpc_uint64_t new_pos = cur_pos + (size + b.size) * 8;
			MPC_AUTO_FAIL(mpc_check_key(b.key));

            if (memcmp(b.key, "CT", 2) == 0) {
                if (d->chap_pos == 0) d->chap_pos = cur_pos;
            } else {
                d->chap_pos = 0;
			}
			if (new_pos <= cur_pos)
				return MPC_STATUS_FAIL;
			cur_pos = new_pos;
			
			MPC_AUTO_FAIL( mpc_demux_seek(d, cur_pos, 11) );
            size = mpc_bits_get_block(&d->bits_reader, &b);
        }
        if (d->chap_pos == 0)
            d->chap_pos = cur_pos;
    }

    mpc_demux_seek(d, d->chap_pos, 20);
    size = mpc_bits_get_block(&d->bits_reader, &b);
    while (memcmp(b.key, "CT", 2) == 0) {
        mpc_uint64_t chap_sample;
        d->chap_nb++;
        chap_size += size;
        size = mpc_bits_get_size(&d->bits_reader, &chap_sample) + 4;
        chap_size += size;
        tag_size += b.size - size;
        MPC_AUTO_FAIL( mpc_demux_seek(d, d->chap_pos + (chap_size + tag_size) * 8, 20) );
        size = mpc_bits_get_block(&d->bits_reader, &b);
    }

    if (d->chap_nb > 0) {
        char * ptag;
        d->chap = malloc(sizeof(mpc_chap_info) * d->chap_nb + tag_size);
		if (d->chap == 0)
			return MPC_STATUS_FAIL;

        ptag = (char*)(d->chap + d->chap_nb);

        MPC_AUTO_FAIL( mpc_demux_seek(d, d->chap_pos, 11) );
        size = mpc_bits_get_block(&d->bits_reader, &b);
        while (memcmp(b.key, "CT", 2) == 0) {
			mpc_uint_t tmp_size;
			char * tmp_ptag = ptag;
			if (mpc_demux_fill(d, 11 + (mpc_uint32_t) b.size, 0) < b.size)
				return MPC_STATUS_FAIL;
            size = mpc_bits_get_size(&d->bits_reader, &d->chap[i].sample) + 4;
            d->chap[i].gain = (mpc_uint16_t) mpc_bits_read(&d->bits_reader, 16);
            d->chap[i].peak = (mpc_uint16_t) mpc_bits_read(&d->bits_reader, 16);

			tmp_size = b.size - size;
			do {
				mpc_uint_t rd_size = tmp_size;
				mpc_uint8_t * tmp_buff = d->bits_reader.buff + ((8 - d->bits_reader.count) >> 3);
				mpc_uint32_t avail_bytes = d->bytes_total + d->buffer - tmp_buff;
                rd_size = mini(rd_size, avail_bytes);
				memcpy(tmp_ptag, tmp_buff, rd_size);
				tmp_size -= rd_size;
				tmp_ptag += rd_size;
				d->bits_reader.buff += rd_size;
				mpc_demux_fill(d, tmp_size, 0);
			} while (tmp_size > 0);

            d->chap[i].tag_size = b.size - size;
            d->chap[i].tag = ptag;
            ptag += b.size - size;
            i++;
            size = mpc_bits_get_block(&d->bits_reader, &b);
        }
    }

    d->bits_reader.buff -= size;
    return MPC_STATUS_OK;
}
 rockbox: not used
static mpc_status mpc_demux_chap_find(mpc_demux * d) {
	mpc_status s = mpc_demux_chap_find_inner(d);
	if (MPC_IS_FAILURE(s))
		mpc_demux_chap_empty(d);
	return s;
}
*
 * Gets the number of chapters in the stream
 * @param d pointer to a musepack demuxer
 * @return the number of chapters found in the stream
  rockbox: not used
mpc_int_t mpc_demux_chap_nb(mpc_demux * d)
{
    if (d->chap_nb == -1)
        mpc_demux_chap_find(d);
    return d->chap_nb;
}
*
 * Gets datas associated to a given chapter
 * The chapter tag is an APEv2 tag without the preamble
 * @param d pointer to a musepack demuxer
 * @param chap_nb chapter number you want datas (from 0 to mpc_demux_chap_nb(d) - 1)
 * @return the chapter information structure
  rockbox: not used
mpc_chap_info const * mpc_demux_chap(mpc_demux * d, int chap_nb)
{
    if (d->chap_nb == -1)
        mpc_demux_chap_find(d);
    if (chap_nb >= d->chap_nb || chap_nb < 0)
        return 0;
    return &d->chap[chap_nb];
}
 rockbox: not used    
    d->si.profile_name = "n.a.";
 get header position header block size + endian convertion max header block size scan all blocks until audio rockbox: do not use
            } else if (memcmp(b.key, "SO", 2) == 0) {
				MPC_AUTO_FAIL( mpc_demux_SP(d, size, (mpc_uint32_t) b.size) );
			} else if (memcmp(b.key, "ST", 2) == 0) {
				MPC_AUTO_FAIL( mpc_demux_ST(d) );
 si not initialized !!! rockbox: not used
        p_tmp->chap_nb = -1;
 rockbox: not used
void mpc_demux_exit(mpc_demux * d)
{
    mpc_decoder_exit(d->d);
    memset(d->seek_table, 0, sizeof(g_seek_table));
}
 max header block size scan all blocks until audio end block read frame size we will read last frame size we pretend it's end of file rockbox: not used
mpc_status mpc_demux_seek_second(mpc_demux * d, double seconds)
{
    return mpc_demux_seek_sample(d, (mpc_int64_t)(seconds * (double)d->si.sample_freq + 0.5));
}
 rockbox: not used
void mpc_set_replay_level(mpc_demux * d, float level, mpc_bool_t use_gain,
                          mpc_bool_t use_title, mpc_bool_t clip_prevention)
{
    float peak = (float) ( use_title ? d->si.peak_title : d->si.peak_album );
    float gain = (float) ( use_title ? d->si.gain_title : d->si.gain_album );

    if(!use_gain && !clip_prevention)
        return;

    if(!peak)
        peak = 1.;
    else
        peak = (float) ( (1 << 15) / pow(10, peak / (20 * 256)) );

    if(!gain)
        gain = 1.;
    else
        gain = (float) pow(10, (level - gain / 256) / 20);

    if(clip_prevention && (peak < gain || !use_gain))
        gain = peak;

    mpc_decoder_scale_output(d->d, gain);
}

  Copyright (c) 2005-2009, The Musepack Development Team
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are
  met:

  * Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.

  * Redistributions in binary form must reproduce the above
  copyright notice, this list of conditions and the following
  disclaimer in the documentation and/or other materials provided
  with the distribution.

  * Neither the name of the The Musepack Development Team nor the
  names of its contributors may be used to endorse or promote
  products derived from this software without specific prior
  written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
/ maximum number of seek points in the table. The distance between points will/ be adapted so this value is never exceeded. defines globals reset Coldfire optimized read when rebuffering *
 * seek to a bit position in the stream
 * @param d demuxer context
 * @param fpos position in the stream in bits from the beginning of mpc datas
 * @param min_bytes number of bytes to load after seeking
  d->bits_reader.buff - d->buffer = current byte position within buffer d->bytes_total = buffer is filled with bytes_total bytes fpos = desired file position in bit (not byte) buf_fpos = desired byte position within buffer is desired byte position within lower and upper boundaries of buffer? desired bytes are available in current buffer buffer needs to be refilled*
 * return the current position in the stream (in bits) from the beginning
 * of the file
 * @param d demuxer context
 * @return current stream position in bits
 *
 * Searches for a ID3v2-tag and reads the length (in bytes) of it.
 *
 * @param d demuxer context
 * @return size of tag, in bytes
 * @return MPC_STATUS_FAIL on errors of any kind
  ID3v2.4-flag we must be at the beginning of the stream check id3-tag read ID3 read tag version read flags not (yet???) allowed read size read size read size read size not allowed read headerSize (syncsave: 4 * $0xxxxxxx = 28 significant bits)header This is called before file headers get read, streamversion etc isn't yet known, demuxing isn't properly initialized and we can't call mpc_demux_seek() from here. rockbox: do not use
static mpc_status mpc_demux_ST(mpc_demux * d)
{
    mpc_uint64_t tmp;
    mpc_seek_t * table, last[2];
    mpc_bits_reader r = d->bits_reader;
    mpc_uint_t i, diff_pwr = 0, mask;
    mpc_uint32_t file_table_size;

    if (d->seek_table != 0)
        return MPC_STATUS_OK;

    mpc_bits_get_size(&r, &tmp);
    file_table_size = (mpc_seek_t) tmp;
    d->seek_pwr = d->si.block_pwr + mpc_bits_read(&r, 4);

    tmp = 2 + d->si.samples / (MPC_FRAME_LENGTH << d->seek_pwr);
    while (tmp > MAX_SEEK_TABLE_SIZE) {
        d->seek_pwr++;
        diff_pwr++;
        tmp = 2 + d->si.samples / (MPC_FRAME_LENGTH << d->seek_pwr);
    }
    if ((file_table_size >> diff_pwr) > tmp)
        file_table_size = tmp << diff_pwr;
    d->seek_table = g_seek_table;
    d->seek_table_size = (file_table_size + ((1 << diff_pwr) - 1)) >> diff_pwr;

    table = d->seek_table;
    mpc_bits_get_size(&r, &tmp);
    table[0] = last[0] = (mpc_seek_t) (tmp + d->si.header_position) * 8;

    if (d->seek_table_size == 1)
        return MPC_STATUS_OK;

    mpc_bits_get_size(&r, &tmp);
    last[1] = (mpc_seek_t) (tmp + d->si.header_position) * 8;
    if (diff_pwr == 0) table[1] = last[1];

    mask = (1 << diff_pwr) - 1;
    for (i = 2; i < file_table_size; i++) {
        int code = mpc_bits_golomb_dec(&r, 12);
        if (code & 1)
            code = -(code & (-1 << 1));
        code <<= 2;
        last[i & 1] = code + 2 * last[(i-1) & 1] - last[i & 1];
        if ((i & mask) == 0)
            table[i >> diff_pwr] = last[i & 1];
    }
    return MPC_STATUS_OK;
}

static mpc_status mpc_demux_SP(mpc_demux * d, int size, int block_size)
{
    mpc_seek_t cur;
    mpc_uint64_t ptr;
    mpc_block b;
    int st_head_size;

    cur = mpc_demux_pos(d);
    mpc_bits_get_size(&d->bits_reader, &ptr);
    MPC_AUTO_FAIL( mpc_demux_seek(d, (ptr - size) * 8 + cur, 11) );
    st_head_size = mpc_bits_get_block(&d->bits_reader, &b);
    if (memcmp(b.key, "ST", 2) == 0) {
        d->chap_pos = (ptr - size + b.size + st_head_size) * 8 + cur;
        d->chap_nb = -1;
		if (mpc_demux_fill(d, (mpc_uint32_t) b.size, 0) < b.size)
			return MPC_STATUS_FAIL;
		MPC_AUTO_FAIL( mpc_demux_ST(d) );
    }
    return mpc_demux_seek(d, cur, 11 + block_size);
}
 rockbox: not used
static void mpc_demux_chap_empty(mpc_demux * d) {
	free(d->chap); d->chap = 0;
	d->chap_nb = 0; // -1 for undefined, 0 for no chapters
	d->chap_pos = 0;
}
 rockbox: not used
static mpc_status mpc_demux_chap_find_inner(mpc_demux * d)
{
    mpc_block b;
    int tag_size = 0, chap_size = 0, size, i = 0;

    d->chap_nb = 0;

    if (d->si.stream_version < 8)
        return MPC_STATUS_OK;

    if (d->chap_pos == 0) {
        mpc_uint64_t cur_pos = (d->si.header_position + 4) * 8;
        MPC_AUTO_FAIL( mpc_demux_seek(d, cur_pos, 11) ); // seek to the beginning of the stream
        size = mpc_bits_get_block(&d->bits_reader, &b);
        while (memcmp(b.key, "SE", 2) != 0) {
            mpc_uint64_t new_pos = cur_pos + (size + b.size) * 8;
			MPC_AUTO_FAIL(mpc_check_key(b.key));

            if (memcmp(b.key, "CT", 2) == 0) {
                if (d->chap_pos == 0) d->chap_pos = cur_pos;
            } else {
                d->chap_pos = 0;
			}
			if (new_pos <= cur_pos)
				return MPC_STATUS_FAIL;
			cur_pos = new_pos;
			
			MPC_AUTO_FAIL( mpc_demux_seek(d, cur_pos, 11) );
            size = mpc_bits_get_block(&d->bits_reader, &b);
        }
        if (d->chap_pos == 0)
            d->chap_pos = cur_pos;
    }

    mpc_demux_seek(d, d->chap_pos, 20);
    size = mpc_bits_get_block(&d->bits_reader, &b);
    while (memcmp(b.key, "CT", 2) == 0) {
        mpc_uint64_t chap_sample;
        d->chap_nb++;
        chap_size += size;
        size = mpc_bits_get_size(&d->bits_reader, &chap_sample) + 4;
        chap_size += size;
        tag_size += b.size - size;
        MPC_AUTO_FAIL( mpc_demux_seek(d, d->chap_pos + (chap_size + tag_size) * 8, 20) );
        size = mpc_bits_get_block(&d->bits_reader, &b);
    }

    if (d->chap_nb > 0) {
        char * ptag;
        d->chap = malloc(sizeof(mpc_chap_info) * d->chap_nb + tag_size);
		if (d->chap == 0)
			return MPC_STATUS_FAIL;

        ptag = (char*)(d->chap + d->chap_nb);

        MPC_AUTO_FAIL( mpc_demux_seek(d, d->chap_pos, 11) );
        size = mpc_bits_get_block(&d->bits_reader, &b);
        while (memcmp(b.key, "CT", 2) == 0) {
			mpc_uint_t tmp_size;
			char * tmp_ptag = ptag;
			if (mpc_demux_fill(d, 11 + (mpc_uint32_t) b.size, 0) < b.size)
				return MPC_STATUS_FAIL;
            size = mpc_bits_get_size(&d->bits_reader, &d->chap[i].sample) + 4;
            d->chap[i].gain = (mpc_uint16_t) mpc_bits_read(&d->bits_reader, 16);
            d->chap[i].peak = (mpc_uint16_t) mpc_bits_read(&d->bits_reader, 16);

			tmp_size = b.size - size;
			do {
				mpc_uint_t rd_size = tmp_size;
				mpc_uint8_t * tmp_buff = d->bits_reader.buff + ((8 - d->bits_reader.count) >> 3);
				mpc_uint32_t avail_bytes = d->bytes_total + d->buffer - tmp_buff;
                rd_size = mini(rd_size, avail_bytes);
				memcpy(tmp_ptag, tmp_buff, rd_size);
				tmp_size -= rd_size;
				tmp_ptag += rd_size;
				d->bits_reader.buff += rd_size;
				mpc_demux_fill(d, tmp_size, 0);
			} while (tmp_size > 0);

            d->chap[i].tag_size = b.size - size;
            d->chap[i].tag = ptag;
            ptag += b.size - size;
            i++;
            size = mpc_bits_get_block(&d->bits_reader, &b);
        }
    }

    d->bits_reader.buff -= size;
    return MPC_STATUS_OK;
}
 rockbox: not used
static mpc_status mpc_demux_chap_find(mpc_demux * d) {
	mpc_status s = mpc_demux_chap_find_inner(d);
	if (MPC_IS_FAILURE(s))
		mpc_demux_chap_empty(d);
	return s;
}
*
 * Gets the number of chapters in the stream
 * @param d pointer to a musepack demuxer
 * @return the number of chapters found in the stream
  rockbox: not used
mpc_int_t mpc_demux_chap_nb(mpc_demux * d)
{
    if (d->chap_nb == -1)
        mpc_demux_chap_find(d);
    return d->chap_nb;
}
*
 * Gets datas associated to a given chapter
 * The chapter tag is an APEv2 tag without the preamble
 * @param d pointer to a musepack demuxer
 * @param chap_nb chapter number you want datas (from 0 to mpc_demux_chap_nb(d) - 1)
 * @return the chapter information structure
  rockbox: not used
mpc_chap_info const * mpc_demux_chap(mpc_demux * d, int chap_nb)
{
    if (d->chap_nb == -1)
        mpc_demux_chap_find(d);
    if (chap_nb >= d->chap_nb || chap_nb < 0)
        return 0;
    return &d->chap[chap_nb];
}
 rockbox: not used    
    d->si.profile_name = "n.a.";
 get header position header block size + endian convertion max header block size scan all blocks until audio rockbox: do not use
            } else if (memcmp(b.key, "SO", 2) == 0) {
				MPC_AUTO_FAIL( mpc_demux_SP(d, size, (mpc_uint32_t) b.size) );
			} else if (memcmp(b.key, "ST", 2) == 0) {
				MPC_AUTO_FAIL( mpc_demux_ST(d) );
 si not initialized !!! rockbox: not used
        p_tmp->chap_nb = -1;
 rockbox: not used
void mpc_demux_exit(mpc_demux * d)
{
    mpc_decoder_exit(d->d);
    memset(d->seek_table, 0, sizeof(g_seek_table));
}
 max header block size scan all blocks until audio end block read frame size we will read last frame size we pretend it's end of file rockbox: not used
mpc_status mpc_demux_seek_second(mpc_demux * d, double seconds)
{
    return mpc_demux_seek_sample(d, (mpc_int64_t)(seconds * (double)d->si.sample_freq + 0.5));
}
 rockbox: not used
void mpc_set_replay_level(mpc_demux * d, float level, mpc_bool_t use_gain,
                          mpc_bool_t use_title, mpc_bool_t clip_prevention)
{
    float peak = (float) ( use_title ? d->si.peak_title : d->si.peak_album );
    float gain = (float) ( use_title ? d->si.gain_title : d->si.gain_album );

    if(!use_gain && !clip_prevention)
        return;

    if(!peak)
        peak = 1.;
    else
        peak = (float) ( (1 << 15) / pow(10, peak / (20 * 256)) );

    if(!gain)
        gain = 1.;
    else
        gain = (float) pow(10, (level - gain / 256) / 20);

    if(clip_prevention && (peak < gain || !use_gain))
        gain = peak;

    mpc_decoder_scale_output(d->d, gain);
}

  Copyright (c) 2005-2009, The Musepack Development Team
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are
  met:

  * Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.

  * Redistributions in binary form must reproduce the above
  copyright notice, this list of conditions and the following
  disclaimer in the documentation and/or other materials provided
  with the distribution.

  * Neither the name of the The Musepack Development Team nor the
  names of its contributors may be used to endorse or promote
  products derived from this software without specific prior
  written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
/ maximum number of seek points in the table. The distance between points will/ be adapted so this value is never exceeded. defines globals reset Coldfire optimized read when rebuffering *
 * seek to a bit position in the stream
 * @param d demuxer context
 * @param fpos position in the stream in bits from the beginning of mpc datas
 * @param min_bytes number of bytes to load after seeking
  d->bits_reader.buff - d->buffer = current byte position within buffer d->bytes_total = buffer is filled with bytes_total bytes fpos = desired file position in bit (not byte) buf_fpos = desired byte position within buffer is desired byte position within lower and upper boundaries of buffer? desired bytes are available in current buffer buffer needs to be refilled*
 * return the current position in the stream (in bits) from the beginning
 * of the file
 * @param d demuxer context
 * @return current stream position in bits
 *
 * Searches for a ID3v2-tag and reads the length (in bytes) of it.
 *
 * @param d demuxer context
 * @return size of tag, in bytes
 * @return MPC_STATUS_FAIL on errors of any kind
  ID3v2.4-flag we must be at the beginning of the stream check id3-tag read ID3 read tag version read flags not (yet???) allowed read size read size read size read size not allowed read headerSize (syncsave: 4 * $0xxxxxxx = 28 significant bits)header This is called before file headers get read, streamversion etc isn't yet known, demuxing isn't properly initialized and we can't call mpc_demux_seek() from here. rockbox: do not use
static mpc_status mpc_demux_ST(mpc_demux * d)
{
    mpc_uint64_t tmp;
    mpc_seek_t * table, last[2];
    mpc_bits_reader r = d->bits_reader;
    mpc_uint_t i, diff_pwr = 0, mask;
    mpc_uint32_t file_table_size;

    if (d->seek_table != 0)
        return MPC_STATUS_OK;

    mpc_bits_get_size(&r, &tmp);
    file_table_size = (mpc_seek_t) tmp;
    d->seek_pwr = d->si.block_pwr + mpc_bits_read(&r, 4);

    tmp = 2 + d->si.samples / (MPC_FRAME_LENGTH << d->seek_pwr);
    while (tmp > MAX_SEEK_TABLE_SIZE) {
        d->seek_pwr++;
        diff_pwr++;
        tmp = 2 + d->si.samples / (MPC_FRAME_LENGTH << d->seek_pwr);
    }
    if ((file_table_size >> diff_pwr) > tmp)
        file_table_size = tmp << diff_pwr;
    d->seek_table = g_seek_table;
    d->seek_table_size = (file_table_size + ((1 << diff_pwr) - 1)) >> diff_pwr;

    table = d->seek_table;
    mpc_bits_get_size(&r, &tmp);
    table[0] = last[0] = (mpc_seek_t) (tmp + d->si.header_position) * 8;

    if (d->seek_table_size == 1)
        return MPC_STATUS_OK;

    mpc_bits_get_size(&r, &tmp);
    last[1] = (mpc_seek_t) (tmp + d->si.header_position) * 8;
    if (diff_pwr == 0) table[1] = last[1];

    mask = (1 << diff_pwr) - 1;
    for (i = 2; i < file_table_size; i++) {
        int code = mpc_bits_golomb_dec(&r, 12);
        if (code & 1)
            code = -(code & (-1 << 1));
        code <<= 2;
        last[i & 1] = code + 2 * last[(i-1) & 1] - last[i & 1];
        if ((i & mask) == 0)
            table[i >> diff_pwr] = last[i & 1];
    }
    return MPC_STATUS_OK;
}

static mpc_status mpc_demux_SP(mpc_demux * d, int size, int block_size)
{
    mpc_seek_t cur;
    mpc_uint64_t ptr;
    mpc_block b;
    int st_head_size;

    cur = mpc_demux_pos(d);
    mpc_bits_get_size(&d->bits_reader, &ptr);
    MPC_AUTO_FAIL( mpc_demux_seek(d, (ptr - size) * 8 + cur, 11) );
    st_head_size = mpc_bits_get_block(&d->bits_reader, &b);
    if (memcmp(b.key, "ST", 2) == 0) {
        d->chap_pos = (ptr - size + b.size + st_head_size) * 8 + cur;
        d->chap_nb = -1;
		if (mpc_demux_fill(d, (mpc_uint32_t) b.size, 0) < b.size)
			return MPC_STATUS_FAIL;
		MPC_AUTO_FAIL( mpc_demux_ST(d) );
    }
    return mpc_demux_seek(d, cur, 11 + block_size);
}
 rockbox: not used
static void mpc_demux_chap_empty(mpc_demux * d) {
	free(d->chap); d->chap = 0;
	d->chap_nb = 0; // -1 for undefined, 0 for no chapters
	d->chap_pos = 0;
}
 rockbox: not used
static mpc_status mpc_demux_chap_find_inner(mpc_demux * d)
{
    mpc_block b;
    int tag_size = 0, chap_size = 0, size, i = 0;

    d->chap_nb = 0;

    if (d->si.stream_version < 8)
        return MPC_STATUS_OK;

    if (d->chap_pos == 0) {
        mpc_uint64_t cur_pos = (d->si.header_position + 4) * 8;
        MPC_AUTO_FAIL( mpc_demux_seek(d, cur_pos, 11) ); // seek to the beginning of the stream
        size = mpc_bits_get_block(&d->bits_reader, &b);
        while (memcmp(b.key, "SE", 2) != 0) {
            mpc_uint64_t new_pos = cur_pos + (size + b.size) * 8;
			MPC_AUTO_FAIL(mpc_check_key(b.key));

            if (memcmp(b.key, "CT", 2) == 0) {
                if (d->chap_pos == 0) d->chap_pos = cur_pos;
            } else {
                d->chap_pos = 0;
			}
			if (new_pos <= cur_pos)
				return MPC_STATUS_FAIL;
			cur_pos = new_pos;
			
			MPC_AUTO_FAIL( mpc_demux_seek(d, cur_pos, 11) );
            size = mpc_bits_get_block(&d->bits_reader, &b);
        }
        if (d->chap_pos == 0)
            d->chap_pos = cur_pos;
    }

    mpc_demux_seek(d, d->chap_pos, 20);
    size = mpc_bits_get_block(&d->bits_reader, &b);
    while (memcmp(b.key, "CT", 2) == 0) {
        mpc_uint64_t chap_sample;
        d->chap_nb++;
        chap_size += size;
        size = mpc_bits_get_size(&d->bits_reader, &chap_sample) + 4;
        chap_size += size;
        tag_size += b.size - size;
        MPC_AUTO_FAIL( mpc_demux_seek(d, d->chap_pos + (chap_size + tag_size) * 8, 20) );
        size = mpc_bits_get_block(&d->bits_reader, &b);
    }

    if (d->chap_nb > 0) {
        char * ptag;
        d->chap = malloc(sizeof(mpc_chap_info) * d->chap_nb + tag_size);
		if (d->chap == 0)
			return MPC_STATUS_FAIL;

        ptag = (char*)(d->chap + d->chap_nb);

        MPC_AUTO_FAIL( mpc_demux_seek(d, d->chap_pos, 11) );
        size = mpc_bits_get_block(&d->bits_reader, &b);
        while (memcmp(b.key, "CT", 2) == 0) {
			mpc_uint_t tmp_size;
			char * tmp_ptag = ptag;
			if (mpc_demux_fill(d, 11 + (mpc_uint32_t) b.size, 0) < b.size)
				return MPC_STATUS_FAIL;
            size = mpc_bits_get_size(&d->bits_reader, &d->chap[i].sample) + 4;
            d->chap[i].gain = (mpc_uint16_t) mpc_bits_read(&d->bits_reader, 16);
            d->chap[i].peak = (mpc_uint16_t) mpc_bits_read(&d->bits_reader, 16);

			tmp_size = b.size - size;
			do {
				mpc_uint_t rd_size = tmp_size;
				mpc_uint8_t * tmp_buff = d->bits_reader.buff + ((8 - d->bits_reader.count) >> 3);
				mpc_uint32_t avail_bytes = d->bytes_total + d->buffer - tmp_buff;
                rd_size = mini(rd_size, avail_bytes);
				memcpy(tmp_ptag, tmp_buff, rd_size);
				tmp_size -= rd_size;
				tmp_ptag += rd_size;
				d->bits_reader.buff += rd_size;
				mpc_demux_fill(d, tmp_size, 0);
			} while (tmp_size > 0);

            d->chap[i].tag_size = b.size - size;
            d->chap[i].tag = ptag;
            ptag += b.size - size;
            i++;
            size = mpc_bits_get_block(&d->bits_reader, &b);
        }
    }

    d->bits_reader.buff -= size;
    return MPC_STATUS_OK;
}
 rockbox: not used
static mpc_status mpc_demux_chap_find(mpc_demux * d) {
	mpc_status s = mpc_demux_chap_find_inner(d);
	if (MPC_IS_FAILURE(s))
		mpc_demux_chap_empty(d);
	return s;
}
*
 * Gets the number of chapters in the stream
 * @param d pointer to a musepack demuxer
 * @return the number of chapters found in the stream
  rockbox: not used
mpc_int_t mpc_demux_chap_nb(mpc_demux * d)
{
    if (d->chap_nb == -1)
        mpc_demux_chap_find(d);
    return d->chap_nb;
}
*
 * Gets datas associated to a given chapter
 * The chapter tag is an APEv2 tag without the preamble
 * @param d pointer to a musepack demuxer
 * @param chap_nb chapter number you want datas (from 0 to mpc_demux_chap_nb(d) - 1)
 * @return the chapter information structure
  rockbox: not used
mpc_chap_info const * mpc_demux_chap(mpc_demux * d, int chap_nb)
{
    if (d->chap_nb == -1)
        mpc_demux_chap_find(d);
    if (chap_nb >= d->chap_nb || chap_nb < 0)
        return 0;
    return &d->chap[chap_nb];
}
 rockbox: not used    
    d->si.profile_name = "n.a.";
 get header position header block size + endian convertion max header block size scan all blocks until audio rockbox: do not use
            } else if (memcmp(b.key, "SO", 2) == 0) {
				MPC_AUTO_FAIL( mpc_demux_SP(d, size, (mpc_uint32_t) b.size) );
			} else if (memcmp(b.key, "ST", 2) == 0) {
				MPC_AUTO_FAIL( mpc_demux_ST(d) );
 si not initialized !!! rockbox: not used
        p_tmp->chap_nb = -1;
 rockbox: not used
void mpc_demux_exit(mpc_demux * d)
{
    mpc_decoder_exit(d->d);
    memset(d->seek_table, 0, sizeof(g_seek_table));
}
 max header block size scan all blocks until audio end block read frame size we will read last frame size we pretend it's end of file rockbox: not used
mpc_status mpc_demux_seek_second(mpc_demux * d, double seconds)
{
    return mpc_demux_seek_sample(d, (mpc_int64_t)(seconds * (double)d->si.sample_freq + 0.5));
}
 rockbox: not used
void mpc_set_replay_level(mpc_demux * d, float level, mpc_bool_t use_gain,
                          mpc_bool_t use_title, mpc_bool_t clip_prevention)
{
    float peak = (float) ( use_title ? d->si.peak_title : d->si.peak_album );
    float gain = (float) ( use_title ? d->si.gain_title : d->si.gain_album );

    if(!use_gain && !clip_prevention)
        return;

    if(!peak)
        peak = 1.;
    else
        peak = (float) ( (1 << 15) / pow(10, peak / (20 * 256)) );

    if(!gain)
        gain = 1.;
    else
        gain = (float) pow(10, (level - gain / 256) / 20);

    if(clip_prevention && (peak < gain || !use_gain))
        gain = peak;

    mpc_decoder_scale_output(d->d, gain);
}
