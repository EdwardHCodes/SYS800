 linux arch/arm/mach-cns3xxx/hotplug.c
 *
 *  Cloned from linux/arch/arm/mach-realview/hotplug.c
 *
 *  Copyright (C) 2002 ARM Ltd.
 *  All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.

	 * Turn off coherency
	 
	 * there is no power-control hardware on this platform, so all
	 * we can do is put the core into WFI; this is safe as the calling
	 * code will have already disabled interrupts
	 
		 * here's the WFI
		 
			 * OK, proper wakeup, we're done
			 
		 * Getting here, means that we have come out of WFI without
		 * having been woken up - this shouldn't happen
		 *
		 * Just note it happening - when we're woken, we can report
		 * its occurrence.
		 
 * platform-specific code to shutdown a CPU
 *
 * Called with IRQs disabled
 
	 * we're ready for shutdown now, so do it
	 
	 * bring this CPU back into the world of cache
	 * coherency, and then restore interrupts
	 
	 * we don't allow CPU 0 to be shutdown (it is still too special
	 * e.g. clock tick interrupts)
	  linux arch/arm/mach-cns3xxx/hotplug.c
 *
 *  Cloned from linux/arch/arm/mach-realview/hotplug.c
 *
 *  Copyright (C) 2002 ARM Ltd.
 *  All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.

	 * Turn off coherency
	 
	 * there is no power-control hardware on this platform, so all
	 * we can do is put the core into WFI; this is safe as the calling
	 * code will have already disabled interrupts
	 
		 * here's the WFI
		 
			 * OK, proper wakeup, we're done
			 
		 * Getting here, means that we have come out of WFI without
		 * having been woken up - this shouldn't happen
		 *
		 * Just note it happening - when we're woken, we can report
		 * its occurrence.
		 
 * platform-specific code to shutdown a CPU
 *
 * Called with IRQs disabled
 
	 * we're ready for shutdown now, so do it
	 
	 * bring this CPU back into the world of cache
	 * coherency, and then restore interrupts
	 
	 * we don't allow CPU 0 to be shutdown (it is still too special
	 * e.g. clock tick interrupts)
	 