**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Module wrapper for SI4709 FM Radio Chip, using /dev/si470x (si4709.ko) 
 *      Samsung YP-R0 & Samsung YP-R1
 *
 * Copyright (c) 2012 Lorenzo Miori
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** system includes  application includes  7bits I2C address for Si4709
 * (apparently not selectable by pins or revisions) * i2c file handle  toggle radio RST pin  setup the GPIO port, as in OF  ioctl return value  open the I2C bus where the chip is attached to  device is open, go on  set the slave address for the handle.
         * Some other modules might have set the same slave address
         * e.g. another module. Let's do a I2C_SLAVE_FORCE which does
         * not care about looking for other init'ed i2c slaves  the ioctl call should never fail, if radio_dev is valid  initialization completed  i2c subsystem ready, now toggle power to the chip  100ms reset delay  power the chip down  close the i2c subsystem  not opened  set back to safe error value  Low-level i2c channel access: write  Low-level i2c channel access: read  Register we are going to poll  Low-level RDS Support  start up frozen  power up: timeout after 1 tick, else block indefinitely  Captures RDS data and processes it  true after full radio power up, and false before powering down  One-time RDS init at startup  HAVE_RDS_CAP **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Module wrapper for SI4709 FM Radio Chip, using /dev/si470x (si4709.ko) 
 *      Samsung YP-R0 & Samsung YP-R1
 *
 * Copyright (c) 2012 Lorenzo Miori
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** system includes  application includes  7bits I2C address for Si4709
 * (apparently not selectable by pins or revisions) * i2c file handle  toggle radio RST pin  setup the GPIO port, as in OF  ioctl return value  open the I2C bus where the chip is attached to  device is open, go on  set the slave address for the handle.
         * Some other modules might have set the same slave address
         * e.g. another module. Let's do a I2C_SLAVE_FORCE which does
         * not care about looking for other init'ed i2c slaves  the ioctl call should never fail, if radio_dev is valid  initialization completed  i2c subsystem ready, now toggle power to the chip  100ms reset delay  power the chip down  close the i2c subsystem  not opened  set back to safe error value  Low-level i2c channel access: write  Low-level i2c channel access: read  Register we are going to poll  Low-level RDS Support  start up frozen  power up: timeout after 1 tick, else block indefinitely  Captures RDS data and processes it  true after full radio power up, and false before powering down  One-time RDS init at startup  HAVE_RDS_CAP **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Module wrapper for SI4709 FM Radio Chip, using /dev/si470x (si4709.ko) 
 *      Samsung YP-R0 & Samsung YP-R1
 *
 * Copyright (c) 2012 Lorenzo Miori
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** system includes  application includes  7bits I2C address for Si4709
 * (apparently not selectable by pins or revisions) * i2c file handle  toggle radio RST pin  setup the GPIO port, as in OF  ioctl return value  open the I2C bus where the chip is attached to  device is open, go on  set the slave address for the handle.
         * Some other modules might have set the same slave address
         * e.g. another module. Let's do a I2C_SLAVE_FORCE which does
         * not care about looking for other init'ed i2c slaves  the ioctl call should never fail, if radio_dev is valid  initialization completed  i2c subsystem ready, now toggle power to the chip  100ms reset delay  power the chip down  close the i2c subsystem  not opened  set back to safe error value  Low-level i2c channel access: write  Low-level i2c channel access: read  Register we are going to poll  Low-level RDS Support  start up frozen  power up: timeout after 1 tick, else block indefinitely  Captures RDS data and processes it  true after full radio power up, and false before powering down  One-time RDS init at startup  HAVE_RDS_CAP 