**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Magnus Holmgren
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************technically its "M4A "but files exist with lower case Read the tag data from an MP4 file, storing up to buffer_size bytes in
 * buffer.
  Skip everything  Skip the data tag header - maybe we should parse it properly?  Read a string tag from an MP4 file  Do not overwrite already available metadata. Especially when reading
         * tags with e.g. multiple genres / artists. This way only the first 
         * of multiple entries is used, all following are dropped.  zero-terminate for correct strlen(). Limit item size.  zero-terminate buffer.  FAT32 doesn't support files this big, so something seems to 
         * be wrong. (64-bit sizes should only be used when required.)
          Version and flags.  Verify ES_DescrTag.  read length  Verify DecoderConfigDescrTab.  Skip audio type, bit rates, etc.  Verify DecSpecificInfoTag.  Read the (leading part of the) decoder config.  Maybe time to write a simple read_bits function...  Decoder config format:
         * Object type           - 5 bits
         * Frequency index       - 4 bits
         * Channel configuration - 4 bits
          Object type - 5 bits  Frequency index - 4 bits  Frequency index - 4 bits  17 bits read so far...  Downsampled SBR  Skip 13 bits from above, plus 3 bits, then read 11 bits  We found an extensionAudioObjectType  Object type - 5 bits 1 bit read so far  Frequency index - 4 bits  5 bits read so far  Downsampled SBR  Double the frequency for low-frequency files without a "long" 
             * DecSpecificConfig header. The file may or may not contain SBR,
             * but here we guess it does if the header is short. This can
             * fail on some files, but it's the best we can do, short of 
             * decoding (parts of) the file.
              DEBUGF("Tag atom: '%c%c%c%c' (%d bytes left)\n", type >> 24 & 0xff, 
            type >> 16 & 0xff, type >> 8 & 0xff, type & 0xff, size);  Try to parse it as a year, for the benefit of the database.
              "mean" atom  "name" atom  Re-use the read buffer as the dest buffer...  DEBUGF("Atom: '%c%c%c%c' (0x%08lx, %lu bytes left)\n", 
            (int) ((type >> 24) & 0xff), (int) ((type >> 16) & 0xff),
            (int) ((type >> 8) & 0xff), (int) (type & 0xff),
            type, size);  Skip version  Fall through  We need at least a size of 8 to read the next atom.  DEBUGF("    Handler '%c%c%c%c'\n", handler >> 24 & 0xff, 
                handler >> 16 & 0xff, handler >> 8 & 0xff,handler & 0xff);  Reset to false.  Some AAC file use HE profile. In this case the number
                     * of output samples is doubled to a maximum of 2048 
                     * samples per frame. This means that files which already 
                     * report a frame size of 2048 in their header will not 
                     * need any further special handling.  Move to the next expected mp4 atom.  Read esds metadata and return if AAC-HE/SBR is used.  Move to the next expected mp4 atom.  We might need to parse for the alac metadata atom.  will most likely be set while parsing  Some AAC files appear to contain additional empty mdat chunks.
               Ignore them.  We've already seen the moov chunk.  ADDME: add support for real chapters. Right now it's only
                 * used for Nero's gapless hack  the first chapter will be used as the lead_trim  Skip final seek.  ALAC is native VBR, AAC very unlikely is CBR. **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Magnus Holmgren
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************technically its "M4A "but files exist with lower case Read the tag data from an MP4 file, storing up to buffer_size bytes in
 * buffer.
  Skip everything  Skip the data tag header - maybe we should parse it properly?  Read a string tag from an MP4 file  Do not overwrite already available metadata. Especially when reading
         * tags with e.g. multiple genres / artists. This way only the first 
         * of multiple entries is used, all following are dropped.  zero-terminate for correct strlen(). Limit item size.  zero-terminate buffer.  FAT32 doesn't support files this big, so something seems to 
         * be wrong. (64-bit sizes should only be used when required.)
          Version and flags.  Verify ES_DescrTag.  read length  Verify DecoderConfigDescrTab.  Skip audio type, bit rates, etc.  Verify DecSpecificInfoTag.  Read the (leading part of the) decoder config.  Maybe time to write a simple read_bits function...  Decoder config format:
         * Object type           - 5 bits
         * Frequency index       - 4 bits
         * Channel configuration - 4 bits
          Object type - 5 bits  Frequency index - 4 bits  Frequency index - 4 bits  17 bits read so far...  Downsampled SBR  Skip 13 bits from above, plus 3 bits, then read 11 bits  We found an extensionAudioObjectType  Object type - 5 bits 1 bit read so far  Frequency index - 4 bits  5 bits read so far  Downsampled SBR  Double the frequency for low-frequency files without a "long" 
             * DecSpecificConfig header. The file may or may not contain SBR,
             * but here we guess it does if the header is short. This can
             * fail on some files, but it's the best we can do, short of 
             * decoding (parts of) the file.
              DEBUGF("Tag atom: '%c%c%c%c' (%d bytes left)\n", type >> 24 & 0xff, 
            type >> 16 & 0xff, type >> 8 & 0xff, type & 0xff, size);  Try to parse it as a year, for the benefit of the database.
              "mean" atom  "name" atom  Re-use the read buffer as the dest buffer...  DEBUGF("Atom: '%c%c%c%c' (0x%08lx, %lu bytes left)\n", 
            (int) ((type >> 24) & 0xff), (int) ((type >> 16) & 0xff),
            (int) ((type >> 8) & 0xff), (int) (type & 0xff),
            type, size);  Skip version  Fall through  We need at least a size of 8 to read the next atom.  DEBUGF("    Handler '%c%c%c%c'\n", handler >> 24 & 0xff, 
                handler >> 16 & 0xff, handler >> 8 & 0xff,handler & 0xff);  Reset to false.  Some AAC file use HE profile. In this case the number
                     * of output samples is doubled to a maximum of 2048 
                     * samples per frame. This means that files which already 
                     * report a frame size of 2048 in their header will not 
                     * need any further special handling.  Move to the next expected mp4 atom.  Read esds metadata and return if AAC-HE/SBR is used.  Move to the next expected mp4 atom.  We might need to parse for the alac metadata atom.  will most likely be set while parsing  Some AAC files appear to contain additional empty mdat chunks.
               Ignore them.  We've already seen the moov chunk.  ADDME: add support for real chapters. Right now it's only
                 * used for Nero's gapless hack  the first chapter will be used as the lead_trim  Skip final seek.  ALAC is native VBR, AAC very unlikely is CBR. **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Magnus Holmgren
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************technically its "M4A "but files exist with lower case Read the tag data from an MP4 file, storing up to buffer_size bytes in
 * buffer.
  Skip everything  Skip the data tag header - maybe we should parse it properly?  Read a string tag from an MP4 file  Do not overwrite already available metadata. Especially when reading
         * tags with e.g. multiple genres / artists. This way only the first 
         * of multiple entries is used, all following are dropped.  zero-terminate for correct strlen(). Limit item size.  zero-terminate buffer.  FAT32 doesn't support files this big, so something seems to 
         * be wrong. (64-bit sizes should only be used when required.)
          Version and flags.  Verify ES_DescrTag.  read length  Verify DecoderConfigDescrTab.  Skip audio type, bit rates, etc.  Verify DecSpecificInfoTag.  Read the (leading part of the) decoder config.  Maybe time to write a simple read_bits function...  Decoder config format:
         * Object type           - 5 bits
         * Frequency index       - 4 bits
         * Channel configuration - 4 bits
          Object type - 5 bits  Frequency index - 4 bits  Frequency index - 4 bits  17 bits read so far...  Downsampled SBR  Skip 13 bits from above, plus 3 bits, then read 11 bits  We found an extensionAudioObjectType  Object type - 5 bits 1 bit read so far  Frequency index - 4 bits  5 bits read so far  Downsampled SBR  Double the frequency for low-frequency files without a "long" 
             * DecSpecificConfig header. The file may or may not contain SBR,
             * but here we guess it does if the header is short. This can
             * fail on some files, but it's the best we can do, short of 
             * decoding (parts of) the file.
              DEBUGF("Tag atom: '%c%c%c%c' (%d bytes left)\n", type >> 24 & 0xff, 
            type >> 16 & 0xff, type >> 8 & 0xff, type & 0xff, size);  Try to parse it as a year, for the benefit of the database.
              "mean" atom  "name" atom  Re-use the read buffer as the dest buffer...  DEBUGF("Atom: '%c%c%c%c' (0x%08lx, %lu bytes left)\n", 
            (int) ((type >> 24) & 0xff), (int) ((type >> 16) & 0xff),
            (int) ((type >> 8) & 0xff), (int) (type & 0xff),
            type, size);  Skip version  Fall through  We need at least a size of 8 to read the next atom.  DEBUGF("    Handler '%c%c%c%c'\n", handler >> 24 & 0xff, 
                handler >> 16 & 0xff, handler >> 8 & 0xff,handler & 0xff);  Reset to false.  Some AAC file use HE profile. In this case the number
                     * of output samples is doubled to a maximum of 2048 
                     * samples per frame. This means that files which already 
                     * report a frame size of 2048 in their header will not 
                     * need any further special handling.  Move to the next expected mp4 atom.  Read esds metadata and return if AAC-HE/SBR is used.  Move to the next expected mp4 atom.  We might need to parse for the alac metadata atom.  will most likely be set while parsing  Some AAC files appear to contain additional empty mdat chunks.
               Ignore them.  We've already seen the moov chunk.  ADDME: add support for real chapters. Right now it's only
                 * used for Nero's gapless hack  the first chapter will be used as the lead_trim  Skip final seek.  ALAC is native VBR, AAC very unlikely is CBR. 