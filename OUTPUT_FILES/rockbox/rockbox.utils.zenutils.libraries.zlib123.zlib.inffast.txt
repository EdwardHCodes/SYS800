 inffast.c -- fast decoding
 * Copyright (C) 1995-2004 Mark Adler
 * For conditions of distribution and use, see copyright notice in zlib.h
  Allow machine dependent optimization for post-increment or pre-increment.
   Based on testing to date,
   Pre-increment preferred for:
   - PowerPC G3 (Adler)
   - MIPS R5000 (Randers-Pehrson)
   Post-increment preferred for:
   - none
   No measurable difference:
   - Pentium III (Anderson)
   - M68060 (Nikl)
 
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state->mode == LEN
        strm->avail_in >= 6
        strm->avail_out >= 258
        start >= strm->avail_out
        state->bits < 8

   On return, state->mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm->avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm->avail_out >= 258 for each loop to avoid checking for
      output space.
  inflate()'s starting value for strm->avail_out  local strm->next_in  while in < last, enough input available  local strm->next_out  inflate()'s initial strm->next_out  while out < end, enough space available  maximum distance from zlib header  window size or zero if not using window  valid bytes in the window  window write index  allocated sliding window, if wsize != 0  local strm->hold  local strm->bits  local strm->lencode  local strm->distcode  mask for first level of length codes  mask for first level of distance codes  retrieved table entry  code bits, operation, extra bits, or   window position, window bytes to copy  match length, unused bytes  match distance  where to copy match from  copy state to local variables  decode literals and length/distances until end-of-block or not enough
       input data or output space  literal  length base  number of extra bits  distance base  number of extra bits  max distance in output  see if copy from window  distance back in window  very common case  some from window  rest from output  wrap around window  some from end of window  some from start of window  rest from output  contiguous in window  some from window  rest from output  copy direct from output  minimum length is three  2nd level distance code  2nd level length code  end-of-block  return unused bytes (on entry, bits < 8, so in won't go too far back)  update state and return 
   inflate_fast() speedups that turned out slower (on a PowerPC G3 750CXe):
   - Using bit fields for code structure
   - Different op definition to avoid & for extra bits (do & for table bits)
   - Three separate decoding do-loops for direct, window, and write == 0
   - Special case for distance > 1 copies to do overlapped load and store copy
   - Explicit branch predictions (based on measured branch probabilities)
   - Deferring match copy and interspersed it with decoding subsequent codes
   - Swapping literal/length else
   - Swapping window/direct else
   - Larger unrolled copy loops (three is about right)
   - Moving len -= 3 statement into middle of loop
  !ASMINF  inffast.c -- fast decoding
 * Copyright (C) 1995-2004 Mark Adler
 * For conditions of distribution and use, see copyright notice in zlib.h
  Allow machine dependent optimization for post-increment or pre-increment.
   Based on testing to date,
   Pre-increment preferred for:
   - PowerPC G3 (Adler)
   - MIPS R5000 (Randers-Pehrson)
   Post-increment preferred for:
   - none
   No measurable difference:
   - Pentium III (Anderson)
   - M68060 (Nikl)
 
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state->mode == LEN
        strm->avail_in >= 6
        strm->avail_out >= 258
        start >= strm->avail_out
        state->bits < 8

   On return, state->mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm->avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm->avail_out >= 258 for each loop to avoid checking for
      output space.
  inflate()'s starting value for strm->avail_out  local strm->next_in  while in < last, enough input available  local strm->next_out  inflate()'s initial strm->next_out  while out < end, enough space available  maximum distance from zlib header  window size or zero if not using window  valid bytes in the window  window write index  allocated sliding window, if wsize != 0  local strm->hold  local strm->bits  local strm->lencode  local strm->distcode  mask for first level of length codes  mask for first level of distance codes  retrieved table entry  code bits, operation, extra bits, or   window position, window bytes to copy  match length, unused bytes  match distance  where to copy match from  copy state to local variables  decode literals and length/distances until end-of-block or not enough
       input data or output space  literal  length base  number of extra bits  distance base  number of extra bits  max distance in output  see if copy from window  distance back in window  very common case  some from window  rest from output  wrap around window  some from end of window  some from start of window  rest from output  contiguous in window  some from window  rest from output  copy direct from output  minimum length is three  2nd level distance code  2nd level length code  end-of-block  return unused bytes (on entry, bits < 8, so in won't go too far back)  update state and return 
   inflate_fast() speedups that turned out slower (on a PowerPC G3 750CXe):
   - Using bit fields for code structure
   - Different op definition to avoid & for extra bits (do & for table bits)
   - Three separate decoding do-loops for direct, window, and write == 0
   - Special case for distance > 1 copies to do overlapped load and store copy
   - Explicit branch predictions (based on measured branch probabilities)
   - Deferring match copy and interspersed it with decoding subsequent codes
   - Swapping literal/length else
   - Swapping window/direct else
   - Larger unrolled copy loops (three is about right)
   - Moving len -= 3 statement into middle of loop
  !ASMINF  inffast.c -- fast decoding
 * Copyright (C) 1995-2004 Mark Adler
 * For conditions of distribution and use, see copyright notice in zlib.h
  Allow machine dependent optimization for post-increment or pre-increment.
   Based on testing to date,
   Pre-increment preferred for:
   - PowerPC G3 (Adler)
   - MIPS R5000 (Randers-Pehrson)
   Post-increment preferred for:
   - none
   No measurable difference:
   - Pentium III (Anderson)
   - M68060 (Nikl)
 
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state->mode == LEN
        strm->avail_in >= 6
        strm->avail_out >= 258
        start >= strm->avail_out
        state->bits < 8

   On return, state->mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm->avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm->avail_out >= 258 for each loop to avoid checking for
      output space.
  inflate()'s starting value for strm->avail_out  local strm->next_in  while in < last, enough input available  local strm->next_out  inflate()'s initial strm->next_out  while out < end, enough space available  maximum distance from zlib header  window size or zero if not using window  valid bytes in the window  window write index  allocated sliding window, if wsize != 0  local strm->hold  local strm->bits  local strm->lencode  local strm->distcode  mask for first level of length codes  mask for first level of distance codes  retrieved table entry  code bits, operation, extra bits, or   window position, window bytes to copy  match length, unused bytes  match distance  where to copy match from  copy state to local variables  decode literals and length/distances until end-of-block or not enough
       input data or output space  literal  length base  number of extra bits  distance base  number of extra bits  max distance in output  see if copy from window  distance back in window  very common case  some from window  rest from output  wrap around window  some from end of window  some from start of window  rest from output  contiguous in window  some from window  rest from output  copy direct from output  minimum length is three  2nd level distance code  2nd level length code  end-of-block  return unused bytes (on entry, bits < 8, so in won't go too far back)  update state and return 
   inflate_fast() speedups that turned out slower (on a PowerPC G3 750CXe):
   - Using bit fields for code structure
   - Different op definition to avoid & for extra bits (do & for table bits)
   - Three separate decoding do-loops for direct, window, and write == 0
   - Special case for distance > 1 copies to do overlapped load and store copy
   - Explicit branch predictions (based on measured branch probabilities)
   - Deferring match copy and interspersed it with decoding subsequent codes
   - Swapping literal/length else
   - Swapping window/direct else
   - Larger unrolled copy loops (three is about right)
   - Moving len -= 3 statement into middle of loop
  !ASMINF 