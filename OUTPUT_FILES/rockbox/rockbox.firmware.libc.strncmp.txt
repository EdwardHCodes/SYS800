
FUNCTION
        <<strncmp>>---character string compare
        
INDEX
        strncmp

ANSI_SYNOPSIS
        #include <string.h>
        int strncmp(const char *<[a]>, const char * <[b]>, size_t <[length]>);

TRAD_SYNOPSIS
        #include <string.h>
        int strncmp(<[a]>, <[b]>, <[length]>)
        char *<[a]>;
        char *<[b]>;
        size_t <[length]>

DESCRIPTION
        <<strncmp>> compares up to <[length]> characters
        from the string at <[a]> to the string at <[b]>.

RETURNS
        If <<*<[a]>>> sorts lexicographically after <<*<[b]>>>,
        <<strncmp>> returns a number greater than zero.  If the two
        strings are equivalent, <<strncmp>> returns zero.  If <<*<[a]>>>
        sorts lexicographically before <<*<[b]>>>, <<strncmp>> returns a
        number less than zero.

PORTABILITY
<<strncmp>> is ANSI C.

<<strncmp>> requires no supporting OS subroutines.

QUICKREF
        strncmp ansi pure
 for _DEFUN  Nonzero if either X or Y is not aligned on a "long" boundary.   DETECTNULL returns nonzero if (long)X contains a NULL byte.  If s1 or s2 are unaligned, then compare bytes.  If s1 and s2 are word-aligned, compare them a word at a time.  If we've run out of bytes or hit a null, return zero
             since we already know *a1 == *a2.   A difference was detected in last few bytes of s1, so search bytewise  If we've run out of bytes or hit a null, return zero
         since we already know *s1 == *s2.   not PREFER_SIZE_OVER_SPEED 
FUNCTION
        <<strncmp>>---character string compare
        
INDEX
        strncmp

ANSI_SYNOPSIS
        #include <string.h>
        int strncmp(const char *<[a]>, const char * <[b]>, size_t <[length]>);

TRAD_SYNOPSIS
        #include <string.h>
        int strncmp(<[a]>, <[b]>, <[length]>)
        char *<[a]>;
        char *<[b]>;
        size_t <[length]>

DESCRIPTION
        <<strncmp>> compares up to <[length]> characters
        from the string at <[a]> to the string at <[b]>.

RETURNS
        If <<*<[a]>>> sorts lexicographically after <<*<[b]>>>,
        <<strncmp>> returns a number greater than zero.  If the two
        strings are equivalent, <<strncmp>> returns zero.  If <<*<[a]>>>
        sorts lexicographically before <<*<[b]>>>, <<strncmp>> returns a
        number less than zero.

PORTABILITY
<<strncmp>> is ANSI C.

<<strncmp>> requires no supporting OS subroutines.

QUICKREF
        strncmp ansi pure
 for _DEFUN  Nonzero if either X or Y is not aligned on a "long" boundary.   DETECTNULL returns nonzero if (long)X contains a NULL byte.  If s1 or s2 are unaligned, then compare bytes.  If s1 and s2 are word-aligned, compare them a word at a time.  If we've run out of bytes or hit a null, return zero
             since we already know *a1 == *a2.   A difference was detected in last few bytes of s1, so search bytewise  If we've run out of bytes or hit a null, return zero
         since we already know *s1 == *s2.   not PREFER_SIZE_OVER_SPEED 
FUNCTION
        <<strncmp>>---character string compare
        
INDEX
        strncmp

ANSI_SYNOPSIS
        #include <string.h>
        int strncmp(const char *<[a]>, const char * <[b]>, size_t <[length]>);

TRAD_SYNOPSIS
        #include <string.h>
        int strncmp(<[a]>, <[b]>, <[length]>)
        char *<[a]>;
        char *<[b]>;
        size_t <[length]>

DESCRIPTION
        <<strncmp>> compares up to <[length]> characters
        from the string at <[a]> to the string at <[b]>.

RETURNS
        If <<*<[a]>>> sorts lexicographically after <<*<[b]>>>,
        <<strncmp>> returns a number greater than zero.  If the two
        strings are equivalent, <<strncmp>> returns zero.  If <<*<[a]>>>
        sorts lexicographically before <<*<[b]>>>, <<strncmp>> returns a
        number less than zero.

PORTABILITY
<<strncmp>> is ANSI C.

<<strncmp>> requires no supporting OS subroutines.

QUICKREF
        strncmp ansi pure
 for _DEFUN  Nonzero if either X or Y is not aligned on a "long" boundary.   DETECTNULL returns nonzero if (long)X contains a NULL byte.  If s1 or s2 are unaligned, then compare bytes.  If s1 and s2 are word-aligned, compare them a word at a time.  If we've run out of bytes or hit a null, return zero
             since we already know *a1 == *a2.   A difference was detected in last few bytes of s1, so search bytewise  If we've run out of bytes or hit a null, return zero
         since we already know *s1 == *s2.   not PREFER_SIZE_OVER_SPEED 