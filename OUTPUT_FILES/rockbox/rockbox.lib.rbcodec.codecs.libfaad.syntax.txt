
** FAAD2 - Freeware Advanced Audio (AAC) Decoder including SBR decoding
** Copyright (C) 2003-2004 M. Bakker, Ahead Software AG, http://www.nero.com
**  
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
** 
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
** 
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software 
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** Any non-GPL usage of this software or parts of this software is strictly
** forbidden.
**
** Commercial non-GPL licensing of this software is possible.
** For more info contact Ahead Software through Mpeg4AAClicense@nero.com.
**
** $Id$
*
   Reads the AAC bitstream as defined in 14496-3 (MPEG-4 Audio)
 static function declarations  Table 4.4.1  1024 or 960 mp4ASC->channelsConfiguration = pce.channels;
        if (pce.num_valid_cc_elements)
            return -3;
         Error resilience not supported yet  1 bit: extensionFlag3  Table 4.4.2  An MPEG-4 Audio decoder is only required to follow the Program
   Configuration Element in GASpecificConfig(). The decoder shall ignore
   any Program Configuration Elements that may occur in raw data blocks.
   PCEs transmitted in raw data blocks cannot be used to convey decoder
   configuration information.
 for SCE hDecoder->element_output_channels[] is not set here because this
       can become 2 when some form of Parametric Stereo coding is used
     save the syntax element id  decode the element  map output channels position to internal data channels  this might be faulty when pce_set is true  for CPE the number of output channels is always 2  element_output_channels not set yet  element inconsistency  save the syntax element id  decode the element  map output channel position to internal data channels  Table 4.4.3: raw_data_block()  not implemented yet, but skip the bits  14496-4: 5.6.4.1.2.1.3:  program_configuration_element()'s in access units shall be ignored if ((hInfo->error = program_config_element(pce, ld)) > 0)    return;hDecoder->pce_set = 1; one sbr_info describes a channel_element not a channel!  if we encounter SBR data here: error  SBR data will be read directly in the SCE/LFE/CPE element  Table 262: er_raw_data_block()  8 channels  new in corrigendum 14496-3:2002  Table 4.4.4 and  Table 4.4.9  check if next bitstream element is a fill element  if so, read it now so SBR decoding can be done in case of a file with SBR  one sbr_info describes a channel_element not a channel!  noiseless coding is done, spectral reconstruction is done now  Table 4.4.5  both channels have common ics information  check if next bitstream element is a fill element  if so, read it now so SBR decoding can be done in case of a file with SBR  one sbr_info describes a channel_element not a channel!  noiseless coding is done, spectral reconstruction is done now  Table 4.4.6  ics->ics_reserved_bit =  get the grouping information  should be an error  check the range of max_sfb  MPEG2 style AAC predictor  Long Term Prediction  Table 4.4.7  check the range of pulse_start_sfb  Table 4.4.8: Currently just for skipping the bits...  Table 4.4.10  element_instance_tag =  Table 4.4.11  could not allocate memory  parse the SBR data  set element independent flag to 1 as well  Table 4.4.12  Table 4.4.13 ASME  In case of DRM we need to read the SBR info before channel reconstruction  all forward bitreading should be finished at this point  ds SBR  could not allocate memory  Reverse bit reading of SBR data in DRM audio frame  could not allocate memory  Set SBR data  consider 8 bits from AAC-CRC  Skip 8-bit CRC  check CRC  no need to check it if there was already an error  SBR data was corrupted, disable it until the next header  map output channels position to internal data channels  this might be faulty when pce_set is true  Table 4.4.15  ics1->ics_reserved_bit =  get the grouping information  should be an error  check the range of max_sfb !tvq_layer_pesent || (tns_aac_tvq_en[ch] == 1) different order of data units in DRM core_flag || tvq_layer_pesent Table 4.4.24 *
         **  NOTE: It could be that pulse data is available in scalable AAC too,
         **        as said in Amendment 1, this could be only the case for ER AAC,
         **        though. (have to check this out later)
         * get pulse data  get tns data  get gain control data  RVLC spectral data is put here  CRC check  error resilient spectral data decoding  decode the spectral data  pulse coding reconstruction  pulse coding not allowed for short blocks  Table 4.4.25  if "faad_getbits" detects error and returns "0", "k" is never
               incremented and we cannot leave the while loop  &&
                (k+sect_len < ics->max_sfb)
 *  decode_scale_factors()
 *   decodes the scalefactors from the bitstream
 
 * All scalefactors (and also the stereo positions and pns energies) are
 * transmitted using Huffman coded DPCM relative to the previous active
 * scalefactor (respectively previous stereo position or previous pns energy,
 * see subclause 4.6.2 and 4.6.3). The first active scalefactor is
 * differentially coded relative to the global gain.
  zero book #define SF_PRINT intensity books  decode intensity position  noise books  decode noise energy  spectral books  ics->scale_factors[g][sfb] must be between 0 and 255  decode scale factor  Table 4.4.26  In ER AAC the parameters for RVLC are seperated from the actual
           data that holds the scale_factors.
           Strangely enough, 2 parameters for HCR are put inbetween them.
         Table 4.4.27  Table 4.4.28  Check length of lag  Table 4.4.29 #define SD_PRINT#define SFBO_PRINT Table 4.4.30  fill_nibble =  must be "0000"  fill_byte[i] =  must be "10100101"  data_element_byte[i] =  other_bits[i] =  Table 4.4.31  drc->drc_tag_reserved_bits =  drc->drc_bands_reserved_bits =  drc->prog_ref_level_reserved_bits =  Table 4.4.32  Annex A: Audio Interchange Formats  Table 1.A.2  adif_id[0] =  adif_id[1] =  adif_id[2] =  adif_id[3] =  Table 1.A.5  faad_byte_align(ld);  Table 1.A.6  try to recover from sync errors  Removed in corrigendum 14496-3:2002  Table 1.A.7  Table 1.A.8 
** FAAD2 - Freeware Advanced Audio (AAC) Decoder including SBR decoding
** Copyright (C) 2003-2004 M. Bakker, Ahead Software AG, http://www.nero.com
**  
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
** 
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
** 
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software 
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** Any non-GPL usage of this software or parts of this software is strictly
** forbidden.
**
** Commercial non-GPL licensing of this software is possible.
** For more info contact Ahead Software through Mpeg4AAClicense@nero.com.
**
** $Id$
*
   Reads the AAC bitstream as defined in 14496-3 (MPEG-4 Audio)
 static function declarations  Table 4.4.1  1024 or 960 mp4ASC->channelsConfiguration = pce.channels;
        if (pce.num_valid_cc_elements)
            return -3;
         Error resilience not supported yet  1 bit: extensionFlag3  Table 4.4.2  An MPEG-4 Audio decoder is only required to follow the Program
   Configuration Element in GASpecificConfig(). The decoder shall ignore
   any Program Configuration Elements that may occur in raw data blocks.
   PCEs transmitted in raw data blocks cannot be used to convey decoder
   configuration information.
 for SCE hDecoder->element_output_channels[] is not set here because this
       can become 2 when some form of Parametric Stereo coding is used
     save the syntax element id  decode the element  map output channels position to internal data channels  this might be faulty when pce_set is true  for CPE the number of output channels is always 2  element_output_channels not set yet  element inconsistency  save the syntax element id  decode the element  map output channel position to internal data channels  Table 4.4.3: raw_data_block()  not implemented yet, but skip the bits  14496-4: 5.6.4.1.2.1.3:  program_configuration_element()'s in access units shall be ignored if ((hInfo->error = program_config_element(pce, ld)) > 0)    return;hDecoder->pce_set = 1; one sbr_info describes a channel_element not a channel!  if we encounter SBR data here: error  SBR data will be read directly in the SCE/LFE/CPE element  Table 262: er_raw_data_block()  8 channels  new in corrigendum 14496-3:2002  Table 4.4.4 and  Table 4.4.9  check if next bitstream element is a fill element  if so, read it now so SBR decoding can be done in case of a file with SBR  one sbr_info describes a channel_element not a channel!  noiseless coding is done, spectral reconstruction is done now  Table 4.4.5  both channels have common ics information  check if next bitstream element is a fill element  if so, read it now so SBR decoding can be done in case of a file with SBR  one sbr_info describes a channel_element not a channel!  noiseless coding is done, spectral reconstruction is done now  Table 4.4.6  ics->ics_reserved_bit =  get the grouping information  should be an error  check the range of max_sfb  MPEG2 style AAC predictor  Long Term Prediction  Table 4.4.7  check the range of pulse_start_sfb  Table 4.4.8: Currently just for skipping the bits...  Table 4.4.10  element_instance_tag =  Table 4.4.11  could not allocate memory  parse the SBR data  set element independent flag to 1 as well  Table 4.4.12  Table 4.4.13 ASME  In case of DRM we need to read the SBR info before channel reconstruction  all forward bitreading should be finished at this point  ds SBR  could not allocate memory  Reverse bit reading of SBR data in DRM audio frame  could not allocate memory  Set SBR data  consider 8 bits from AAC-CRC  Skip 8-bit CRC  check CRC  no need to check it if there was already an error  SBR data was corrupted, disable it until the next header  map output channels position to internal data channels  this might be faulty when pce_set is true  Table 4.4.15  ics1->ics_reserved_bit =  get the grouping information  should be an error  check the range of max_sfb !tvq_layer_pesent || (tns_aac_tvq_en[ch] == 1) different order of data units in DRM core_flag || tvq_layer_pesent Table 4.4.24 *
         **  NOTE: It could be that pulse data is available in scalable AAC too,
         **        as said in Amendment 1, this could be only the case for ER AAC,
         **        though. (have to check this out later)
         * get pulse data  get tns data  get gain control data  RVLC spectral data is put here  CRC check  error resilient spectral data decoding  decode the spectral data  pulse coding reconstruction  pulse coding not allowed for short blocks  Table 4.4.25  if "faad_getbits" detects error and returns "0", "k" is never
               incremented and we cannot leave the while loop  &&
                (k+sect_len < ics->max_sfb)
 *  decode_scale_factors()
 *   decodes the scalefactors from the bitstream
 
 * All scalefactors (and also the stereo positions and pns energies) are
 * transmitted using Huffman coded DPCM relative to the previous active
 * scalefactor (respectively previous stereo position or previous pns energy,
 * see subclause 4.6.2 and 4.6.3). The first active scalefactor is
 * differentially coded relative to the global gain.
  zero book #define SF_PRINT intensity books  decode intensity position  noise books  decode noise energy  spectral books  ics->scale_factors[g][sfb] must be between 0 and 255  decode scale factor  Table 4.4.26  In ER AAC the parameters for RVLC are seperated from the actual
           data that holds the scale_factors.
           Strangely enough, 2 parameters for HCR are put inbetween them.
         Table 4.4.27  Table 4.4.28  Check length of lag  Table 4.4.29 #define SD_PRINT#define SFBO_PRINT Table 4.4.30  fill_nibble =  must be "0000"  fill_byte[i] =  must be "10100101"  data_element_byte[i] =  other_bits[i] =  Table 4.4.31  drc->drc_tag_reserved_bits =  drc->drc_bands_reserved_bits =  drc->prog_ref_level_reserved_bits =  Table 4.4.32  Annex A: Audio Interchange Formats  Table 1.A.2  adif_id[0] =  adif_id[1] =  adif_id[2] =  adif_id[3] =  Table 1.A.5  faad_byte_align(ld);  Table 1.A.6  try to recover from sync errors  Removed in corrigendum 14496-3:2002  Table 1.A.7  Table 1.A.8 
** FAAD2 - Freeware Advanced Audio (AAC) Decoder including SBR decoding
** Copyright (C) 2003-2004 M. Bakker, Ahead Software AG, http://www.nero.com
**  
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
** 
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
** 
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software 
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** Any non-GPL usage of this software or parts of this software is strictly
** forbidden.
**
** Commercial non-GPL licensing of this software is possible.
** For more info contact Ahead Software through Mpeg4AAClicense@nero.com.
**
** $Id$
*
   Reads the AAC bitstream as defined in 14496-3 (MPEG-4 Audio)
 static function declarations  Table 4.4.1  1024 or 960 mp4ASC->channelsConfiguration = pce.channels;
        if (pce.num_valid_cc_elements)
            return -3;
         Error resilience not supported yet  1 bit: extensionFlag3  Table 4.4.2  An MPEG-4 Audio decoder is only required to follow the Program
   Configuration Element in GASpecificConfig(). The decoder shall ignore
   any Program Configuration Elements that may occur in raw data blocks.
   PCEs transmitted in raw data blocks cannot be used to convey decoder
   configuration information.
 for SCE hDecoder->element_output_channels[] is not set here because this
       can become 2 when some form of Parametric Stereo coding is used
     save the syntax element id  decode the element  map output channels position to internal data channels  this might be faulty when pce_set is true  for CPE the number of output channels is always 2  element_output_channels not set yet  element inconsistency  save the syntax element id  decode the element  map output channel position to internal data channels  Table 4.4.3: raw_data_block()  not implemented yet, but skip the bits  14496-4: 5.6.4.1.2.1.3:  program_configuration_element()'s in access units shall be ignored if ((hInfo->error = program_config_element(pce, ld)) > 0)    return;hDecoder->pce_set = 1; one sbr_info describes a channel_element not a channel!  if we encounter SBR data here: error  SBR data will be read directly in the SCE/LFE/CPE element  Table 262: er_raw_data_block()  8 channels  new in corrigendum 14496-3:2002  Table 4.4.4 and  Table 4.4.9  check if next bitstream element is a fill element  if so, read it now so SBR decoding can be done in case of a file with SBR  one sbr_info describes a channel_element not a channel!  noiseless coding is done, spectral reconstruction is done now  Table 4.4.5  both channels have common ics information  check if next bitstream element is a fill element  if so, read it now so SBR decoding can be done in case of a file with SBR  one sbr_info describes a channel_element not a channel!  noiseless coding is done, spectral reconstruction is done now  Table 4.4.6  ics->ics_reserved_bit =  get the grouping information  should be an error  check the range of max_sfb  MPEG2 style AAC predictor  Long Term Prediction  Table 4.4.7  check the range of pulse_start_sfb  Table 4.4.8: Currently just for skipping the bits...  Table 4.4.10  element_instance_tag =  Table 4.4.11  could not allocate memory  parse the SBR data  set element independent flag to 1 as well  Table 4.4.12  Table 4.4.13 ASME  In case of DRM we need to read the SBR info before channel reconstruction  all forward bitreading should be finished at this point  ds SBR  could not allocate memory  Reverse bit reading of SBR data in DRM audio frame  could not allocate memory  Set SBR data  consider 8 bits from AAC-CRC  Skip 8-bit CRC  check CRC  no need to check it if there was already an error  SBR data was corrupted, disable it until the next header  map output channels position to internal data channels  this might be faulty when pce_set is true  Table 4.4.15  ics1->ics_reserved_bit =  get the grouping information  should be an error  check the range of max_sfb !tvq_layer_pesent || (tns_aac_tvq_en[ch] == 1) different order of data units in DRM core_flag || tvq_layer_pesent Table 4.4.24 *
         **  NOTE: It could be that pulse data is available in scalable AAC too,
         **        as said in Amendment 1, this could be only the case for ER AAC,
         **        though. (have to check this out later)
         * get pulse data  get tns data  get gain control data  RVLC spectral data is put here  CRC check  error resilient spectral data decoding  decode the spectral data  pulse coding reconstruction  pulse coding not allowed for short blocks  Table 4.4.25  if "faad_getbits" detects error and returns "0", "k" is never
               incremented and we cannot leave the while loop  &&
                (k+sect_len < ics->max_sfb)
 *  decode_scale_factors()
 *   decodes the scalefactors from the bitstream
 
 * All scalefactors (and also the stereo positions and pns energies) are
 * transmitted using Huffman coded DPCM relative to the previous active
 * scalefactor (respectively previous stereo position or previous pns energy,
 * see subclause 4.6.2 and 4.6.3). The first active scalefactor is
 * differentially coded relative to the global gain.
  zero book #define SF_PRINT intensity books  decode intensity position  noise books  decode noise energy  spectral books  ics->scale_factors[g][sfb] must be between 0 and 255  decode scale factor  Table 4.4.26  In ER AAC the parameters for RVLC are seperated from the actual
           data that holds the scale_factors.
           Strangely enough, 2 parameters for HCR are put inbetween them.
         Table 4.4.27  Table 4.4.28  Check length of lag  Table 4.4.29 #define SD_PRINT#define SFBO_PRINT Table 4.4.30  fill_nibble =  must be "0000"  fill_byte[i] =  must be "10100101"  data_element_byte[i] =  other_bits[i] =  Table 4.4.31  drc->drc_tag_reserved_bits =  drc->drc_bands_reserved_bits =  drc->prog_ref_level_reserved_bits =  Table 4.4.32  Annex A: Audio Interchange Formats  Table 1.A.2  adif_id[0] =  adif_id[1] =  adif_id[2] =  adif_id[3] =  Table 1.A.5  faad_byte_align(ld);  Table 1.A.6  try to recover from sync errors  Removed in corrigendum 14496-3:2002  Table 1.A.7  Table 1.A.8 