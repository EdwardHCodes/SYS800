**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 Thomas Martitz
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** This class is used as the main glue between java and c.
 * All access should be done through RockboxService.get_instance() for safety.
  this Service is really a singleton class - well almost.  locals needed for the c code and Rockbox state  possible result values for intent handling  don't call the constructor here, the instances are managed by
         * android, so we can't just create a new one  (Re-)attach the media button receiver, in case it has been lost  if null, then the service was most likely restarted by android
         * after getting killed for memory pressure earlier  the following block unzips libmisc.so, which contains the files 
                 * we ship, such as themes. It's needed to put it into a .so file
                 * because there's no other way to ship files and have access
                 * to them from native code
                  use arbitrary file to determine whether extracting is needed  unzip newer or doesnt exist  load library before unzipping which may take a while
                 * but at least tell if unzipping is going to be done before strip off /.rockbox when extracting  codecs are now stored as libs, only keep rocks on internal  Create the parent folders if necessary  Extract file  Generate default config if none exists yet  Start native code  service is of no use anymore  wait at least until the library is loaded  Don't unregister so we can receive them (and startup the service)
         * after idle power-off. Hopefully it's OK if mMediaButtonReceiver is
         * garbage collected.
         *  mMediaButtonReceiver.unregister();  Make sure our notification is gone.  exit() seems unclean but is needed in order to get the .so file garbage 
         * collected, otherwise Android caches this Service and librockbox.so
         * The library must be reloaded to zero the bss and reset data
         * segment **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 Thomas Martitz
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** This class is used as the main glue between java and c.
 * All access should be done through RockboxService.get_instance() for safety.
  this Service is really a singleton class - well almost.  locals needed for the c code and Rockbox state  possible result values for intent handling  don't call the constructor here, the instances are managed by
         * android, so we can't just create a new one  (Re-)attach the media button receiver, in case it has been lost  if null, then the service was most likely restarted by android
         * after getting killed for memory pressure earlier  the following block unzips libmisc.so, which contains the files 
                 * we ship, such as themes. It's needed to put it into a .so file
                 * because there's no other way to ship files and have access
                 * to them from native code
                  use arbitrary file to determine whether extracting is needed  unzip newer or doesnt exist  load library before unzipping which may take a while
                 * but at least tell if unzipping is going to be done before strip off /.rockbox when extracting  codecs are now stored as libs, only keep rocks on internal  Create the parent folders if necessary  Extract file  Generate default config if none exists yet  Start native code  service is of no use anymore  wait at least until the library is loaded  Don't unregister so we can receive them (and startup the service)
         * after idle power-off. Hopefully it's OK if mMediaButtonReceiver is
         * garbage collected.
         *  mMediaButtonReceiver.unregister();  Make sure our notification is gone.  exit() seems unclean but is needed in order to get the .so file garbage 
         * collected, otherwise Android caches this Service and librockbox.so
         * The library must be reloaded to zero the bss and reset data
         * segment **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 Thomas Martitz
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** This class is used as the main glue between java and c.
 * All access should be done through RockboxService.get_instance() for safety.
  this Service is really a singleton class - well almost.  locals needed for the c code and Rockbox state  possible result values for intent handling  don't call the constructor here, the instances are managed by
         * android, so we can't just create a new one  (Re-)attach the media button receiver, in case it has been lost  if null, then the service was most likely restarted by android
         * after getting killed for memory pressure earlier  the following block unzips libmisc.so, which contains the files 
                 * we ship, such as themes. It's needed to put it into a .so file
                 * because there's no other way to ship files and have access
                 * to them from native code
                  use arbitrary file to determine whether extracting is needed  unzip newer or doesnt exist  load library before unzipping which may take a while
                 * but at least tell if unzipping is going to be done before strip off /.rockbox when extracting  codecs are now stored as libs, only keep rocks on internal  Create the parent folders if necessary  Extract file  Generate default config if none exists yet  Start native code  service is of no use anymore  wait at least until the library is loaded  Don't unregister so we can receive them (and startup the service)
         * after idle power-off. Hopefully it's OK if mMediaButtonReceiver is
         * garbage collected.
         *  mMediaButtonReceiver.unregister();  Make sure our notification is gone.  exit() seems unclean but is needed in order to get the .so file garbage 
         * collected, otherwise Android caches this Service and librockbox.so
         * The library must be reloaded to zero the bss and reset data
         * segment 