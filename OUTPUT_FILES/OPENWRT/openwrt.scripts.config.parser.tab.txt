 A Bison parser, made by GNU Bison 3.1.   Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.   As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.   C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.   All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.   Identify Bison output.   Bison version.   Skeleton name.   Pure parsers.   Push parsers.   Pull parsers.   Copy the first part of user declarations.   Enabling verbose error messages.   In a future release of Bison, this section will be replaced
   by #include "parser.tab.h".   Debug traces.   Token type.   Value type.   !YY_YY_PARSER_TAB_H_INCLUDED   Copy the second part of user declarations.   INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  empty  Suppress unused-variable warnings by "using" E.   empty  Suppress an incorrect diagnostic about yylval being uninitialized.   Nothing.  The parser invokes alloca or malloc; define the necessary symbols.   INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  Use EXIT_SUCCESS as a witness for stdlib.h.   Pacify GCC's 'empty if-body' warning.   empty  The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.   reasonable circa 2006  INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  ! defined yyoverflow || YYERROR_VERBOSE  A type that is properly aligned for any stack member.   The size of the maximum gap between one aligned stack and the next.   The size of an array large to enough to hold all stacks, each with
   N elements.   Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.   Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.   !YYCOPY_NEEDED  YYFINAL -- State number of the termination state.   YYLAST -- Last index in YYTABLE.   YYNTOKENS -- Number of terminals.   YYNNTS -- Number of nonterminals.   YYNRULES -- Number of rules.   YYNSTATES -- Number of states.   YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.   YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.   YYRLINE[YYN] -- Source line where rule number YYN was defined.   YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.   YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).   YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.   YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.   YYPGOTO[NTERM-NUM].   YYDEFGOTO[NTERM-NUM].   YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.   YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.   YYR1[YYN] -- Symbol number of symbol that rule YYN derives.   YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.   Error token number  Enable debugging if requested.   INFRINGES ON USER NAME SPACE  This macro is provided for backward compatibility. ----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`------------------------------------------------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------ The symbols being reduced.   Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.   !YYDEBUG  !YYDEBUG  YYINITDEPTH -- initial size of the parser's stacks.   YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.   Return the length of YYSTR.   Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.   Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.   Fall through.   Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.   Internationalized format string.  Arguments of yyformat.  Number of reported tokens (one for the "unexpected", one per
     "expected").  There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
   Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.   Stay within bounds of both yycheck and yytname.   Avoid compiler warnings.  Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.   YYERROR_VERBOSE -----------------------------------------------.
| Release the memory associated to this symbol.  |
`----------------------------------------------- choice_entry   if_entry   menu_entry   The lookahead symbol.   The semantic value of the lookahead symbol.   Number of syntax errors so far.  ----------.
| yyparse.  |
`---------- Number of tokens to shift before error messages enabled.   The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.   The state stack.   The semantic value stack.   Lookahead token as an internal (translated) token number.   The variables used to return semantic value and location from the
     action routines.   Buffer for error messages, and its allocated size.   The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.   Cause a token to be read.  ------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------ In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.   Get the current used size of the three stacks, in elements.   Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.   Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.   no yyoverflow  Extend the stack our own way.   no yyoverflow -----------.
| yybackup.  |
`----------- Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.   First try to decide what to do without reference to lookahead token.   Not known => get a lookahead token if don't already have one.   YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.   If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.   Count tokens shifted since error; after three, turn off error
     status.   Shift the lookahead token.   Discard the shifted token.  -----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`----------------------------------------------------------------------------------------.
| yyreduce -- Do a reduction.  |
`----------------------------- yyn is the number of a rule to reduce with.   If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.   Is the help text empty or all whitespace?  User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.   Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  --------------------------------------.
| yyerrlab -- here on detecting error.  |
`-------------------------------------- Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.   If not already recovering from an error, report this error.   If just tried and failed to reuse lookahead token after an
         error, discard it.   Return failure if at end of input.   Else will try to reuse lookahead token after shifting the error
     token.  ---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`--------------------------------------------------- Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  CONSTCOND Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  -------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`------------------------------------------------------------- Each real token shifted decrements this.   Pop the current state because it cannot handle the error token.   Shift the error token.  -------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`------------------------------------------------------------------------.
| yyabortlab -- YYABORT comes here.  |
`------------------------------------------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`------------------------------------------------- Fall through.   Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.   Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.   Variables are expanded in the parse phase. We can free them here.  A Bison parser, made by GNU Bison 3.1.   Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.   As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.   C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.   All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.   Identify Bison output.   Bison version.   Skeleton name.   Pure parsers.   Push parsers.   Pull parsers.   Copy the first part of user declarations.   Enabling verbose error messages.   In a future release of Bison, this section will be replaced
   by #include "parser.tab.h".   Debug traces.   Token type.   Value type.   !YY_YY_PARSER_TAB_H_INCLUDED   Copy the second part of user declarations.   INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  empty  Suppress unused-variable warnings by "using" E.   empty  Suppress an incorrect diagnostic about yylval being uninitialized.   Nothing.  The parser invokes alloca or malloc; define the necessary symbols.   INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  Use EXIT_SUCCESS as a witness for stdlib.h.   Pacify GCC's 'empty if-body' warning.   empty  The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.   reasonable circa 2006  INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  ! defined yyoverflow || YYERROR_VERBOSE  A type that is properly aligned for any stack member.   The size of the maximum gap between one aligned stack and the next.   The size of an array large to enough to hold all stacks, each with
   N elements.   Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.   Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.   !YYCOPY_NEEDED  YYFINAL -- State number of the termination state.   YYLAST -- Last index in YYTABLE.   YYNTOKENS -- Number of terminals.   YYNNTS -- Number of nonterminals.   YYNRULES -- Number of rules.   YYNSTATES -- Number of states.   YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.   YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.   YYRLINE[YYN] -- Source line where rule number YYN was defined.   YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.   YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).   YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.   YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.   YYPGOTO[NTERM-NUM].   YYDEFGOTO[NTERM-NUM].   YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.   YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.   YYR1[YYN] -- Symbol number of symbol that rule YYN derives.   YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.   Error token number  Enable debugging if requested.   INFRINGES ON USER NAME SPACE  This macro is provided for backward compatibility. ----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`------------------------------------------------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------ The symbols being reduced.   Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.   !YYDEBUG  !YYDEBUG  YYINITDEPTH -- initial size of the parser's stacks.   YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.   Return the length of YYSTR.   Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.   Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.   Fall through.   Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.   Internationalized format string.  Arguments of yyformat.  Number of reported tokens (one for the "unexpected", one per
     "expected").  There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
   Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.   Stay within bounds of both yycheck and yytname.   Avoid compiler warnings.  Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.   YYERROR_VERBOSE -----------------------------------------------.
| Release the memory associated to this symbol.  |
`----------------------------------------------- choice_entry   if_entry   menu_entry   The lookahead symbol.   The semantic value of the lookahead symbol.   Number of syntax errors so far.  ----------.
| yyparse.  |
`---------- Number of tokens to shift before error messages enabled.   The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.   The state stack.   The semantic value stack.   Lookahead token as an internal (translated) token number.   The variables used to return semantic value and location from the
     action routines.   Buffer for error messages, and its allocated size.   The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.   Cause a token to be read.  ------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------ In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.   Get the current used size of the three stacks, in elements.   Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.   Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.   no yyoverflow  Extend the stack our own way.   no yyoverflow -----------.
| yybackup.  |
`----------- Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.   First try to decide what to do without reference to lookahead token.   Not known => get a lookahead token if don't already have one.   YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.   If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.   Count tokens shifted since error; after three, turn off error
     status.   Shift the lookahead token.   Discard the shifted token.  -----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`----------------------------------------------------------------------------------------.
| yyreduce -- Do a reduction.  |
`----------------------------- yyn is the number of a rule to reduce with.   If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.   Is the help text empty or all whitespace?  User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.   Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  --------------------------------------.
| yyerrlab -- here on detecting error.  |
`-------------------------------------- Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.   If not already recovering from an error, report this error.   If just tried and failed to reuse lookahead token after an
         error, discard it.   Return failure if at end of input.   Else will try to reuse lookahead token after shifting the error
     token.  ---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`--------------------------------------------------- Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  CONSTCOND Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  -------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`------------------------------------------------------------- Each real token shifted decrements this.   Pop the current state because it cannot handle the error token.   Shift the error token.  -------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`------------------------------------------------------------------------.
| yyabortlab -- YYABORT comes here.  |
`------------------------------------------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`------------------------------------------------- Fall through.   Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.   Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.   Variables are expanded in the parse phase. We can free them here.  A Bison parser, made by GNU Bison 3.1.   Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.   As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.   C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.   All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.   Identify Bison output.   Bison version.   Skeleton name.   Pure parsers.   Push parsers.   Pull parsers.   Copy the first part of user declarations.   Enabling verbose error messages.   In a future release of Bison, this section will be replaced
   by #include "parser.tab.h".   Debug traces.   Token type.   Value type.   !YY_YY_PARSER_TAB_H_INCLUDED   Copy the second part of user declarations.   INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  empty  Suppress unused-variable warnings by "using" E.   empty  Suppress an incorrect diagnostic about yylval being uninitialized.   Nothing.  The parser invokes alloca or malloc; define the necessary symbols.   INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  Use EXIT_SUCCESS as a witness for stdlib.h.   Pacify GCC's 'empty if-body' warning.   empty  The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.   reasonable circa 2006  INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  ! defined yyoverflow || YYERROR_VERBOSE  A type that is properly aligned for any stack member.   The size of the maximum gap between one aligned stack and the next.   The size of an array large to enough to hold all stacks, each with
   N elements.   Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.   Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.   !YYCOPY_NEEDED  YYFINAL -- State number of the termination state.   YYLAST -- Last index in YYTABLE.   YYNTOKENS -- Number of terminals.   YYNNTS -- Number of nonterminals.   YYNRULES -- Number of rules.   YYNSTATES -- Number of states.   YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.   YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.   YYRLINE[YYN] -- Source line where rule number YYN was defined.   YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.   YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).   YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.   YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.   YYPGOTO[NTERM-NUM].   YYDEFGOTO[NTERM-NUM].   YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.   YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.   YYR1[YYN] -- Symbol number of symbol that rule YYN derives.   YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.   Error token number  Enable debugging if requested.   INFRINGES ON USER NAME SPACE  This macro is provided for backward compatibility. ----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`------------------------------------------------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------ The symbols being reduced.   Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.   !YYDEBUG  !YYDEBUG  YYINITDEPTH -- initial size of the parser's stacks.   YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.   Return the length of YYSTR.   Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.   Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.   Fall through.   Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.   Internationalized format string.  Arguments of yyformat.  Number of reported tokens (one for the "unexpected", one per
     "expected").  There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
   Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.   Stay within bounds of both yycheck and yytname.   Avoid compiler warnings.  Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.   YYERROR_VERBOSE -----------------------------------------------.
| Release the memory associated to this symbol.  |
`----------------------------------------------- choice_entry   if_entry   menu_entry   The lookahead symbol.   The semantic value of the lookahead symbol.   Number of syntax errors so far.  ----------.
| yyparse.  |
`---------- Number of tokens to shift before error messages enabled.   The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.   The state stack.   The semantic value stack.   Lookahead token as an internal (translated) token number.   The variables used to return semantic value and location from the
     action routines.   Buffer for error messages, and its allocated size.   The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.   Cause a token to be read.  ------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------ In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.   Get the current used size of the three stacks, in elements.   Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.   Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.   no yyoverflow  Extend the stack our own way.   no yyoverflow -----------.
| yybackup.  |
`----------- Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.   First try to decide what to do without reference to lookahead token.   Not known => get a lookahead token if don't already have one.   YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.   If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.   Count tokens shifted since error; after three, turn off error
     status.   Shift the lookahead token.   Discard the shifted token.  -----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`----------------------------------------------------------------------------------------.
| yyreduce -- Do a reduction.  |
`----------------------------- yyn is the number of a rule to reduce with.   If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.   Is the help text empty or all whitespace?  User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.   Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  --------------------------------------.
| yyerrlab -- here on detecting error.  |
`-------------------------------------- Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.   If not already recovering from an error, report this error.   If just tried and failed to reuse lookahead token after an
         error, discard it.   Return failure if at end of input.   Else will try to reuse lookahead token after shifting the error
     token.  ---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`--------------------------------------------------- Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  CONSTCOND Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  -------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`------------------------------------------------------------- Each real token shifted decrements this.   Pop the current state because it cannot handle the error token.   Shift the error token.  -------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`------------------------------------------------------------------------.
| yyabortlab -- YYABORT comes here.  |
`------------------------------------------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`------------------------------------------------- Fall through.   Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.   Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.   Variables are expanded in the parse phase. We can free them here.  A Bison parser, made by GNU Bison 3.1.   Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.   As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.   C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.   All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.   Identify Bison output.   Bison version.   Skeleton name.   Pure parsers.   Push parsers.   Pull parsers.   Copy the first part of user declarations.   Enabling verbose error messages.   In a future release of Bison, this section will be replaced
   by #include "parser.tab.h".   Debug traces.   Token type.   Value type.   !YY_YY_PARSER_TAB_H_INCLUDED   Copy the second part of user declarations.   INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  empty  Suppress unused-variable warnings by "using" E.   empty  Suppress an incorrect diagnostic about yylval being uninitialized.   Nothing.  The parser invokes alloca or malloc; define the necessary symbols.   INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  Use EXIT_SUCCESS as a witness for stdlib.h.   Pacify GCC's 'empty if-body' warning.   empty  The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.   reasonable circa 2006  INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  ! defined yyoverflow || YYERROR_VERBOSE  A type that is properly aligned for any stack member.   The size of the maximum gap between one aligned stack and the next.   The size of an array large to enough to hold all stacks, each with
   N elements.   Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.   Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.   !YYCOPY_NEEDED  YYFINAL -- State number of the termination state.   YYLAST -- Last index in YYTABLE.   YYNTOKENS -- Number of terminals.   YYNNTS -- Number of nonterminals.   YYNRULES -- Number of rules.   YYNSTATES -- Number of states.   YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.   YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.   YYRLINE[YYN] -- Source line where rule number YYN was defined.   YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.   YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).   YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.   YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.   YYPGOTO[NTERM-NUM].   YYDEFGOTO[NTERM-NUM].   YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.   YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.   YYR1[YYN] -- Symbol number of symbol that rule YYN derives.   YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.   Error token number  Enable debugging if requested.   INFRINGES ON USER NAME SPACE  This macro is provided for backward compatibility. ----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`------------------------------------------------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------ The symbols being reduced.   Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.   !YYDEBUG  !YYDEBUG  YYINITDEPTH -- initial size of the parser's stacks.   YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.   Return the length of YYSTR.   Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.   Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.   Fall through.   Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.   Internationalized format string.  Arguments of yyformat.  Number of reported tokens (one for the "unexpected", one per
     "expected").  There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
   Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.   Stay within bounds of both yycheck and yytname.   Avoid compiler warnings.  Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.   YYERROR_VERBOSE -----------------------------------------------.
| Release the memory associated to this symbol.  |
`----------------------------------------------- choice_entry   if_entry   menu_entry   The lookahead symbol.   The semantic value of the lookahead symbol.   Number of syntax errors so far.  ----------.
| yyparse.  |
`---------- Number of tokens to shift before error messages enabled.   The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.   The state stack.   The semantic value stack.   Lookahead token as an internal (translated) token number.   The variables used to return semantic value and location from the
     action routines.   Buffer for error messages, and its allocated size.   The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.   Cause a token to be read.  ------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------ In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.   Get the current used size of the three stacks, in elements.   Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.   Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.   no yyoverflow  Extend the stack our own way.   no yyoverflow -----------.
| yybackup.  |
`----------- Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.   First try to decide what to do without reference to lookahead token.   Not known => get a lookahead token if don't already have one.   YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.   If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.   Count tokens shifted since error; after three, turn off error
     status.   Shift the lookahead token.   Discard the shifted token.  -----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`----------------------------------------------------------------------------------------.
| yyreduce -- Do a reduction.  |
`----------------------------- yyn is the number of a rule to reduce with.   If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.   Is the help text empty or all whitespace?  User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.   Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  --------------------------------------.
| yyerrlab -- here on detecting error.  |
`-------------------------------------- Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.   If not already recovering from an error, report this error.   If just tried and failed to reuse lookahead token after an
         error, discard it.   Return failure if at end of input.   Else will try to reuse lookahead token after shifting the error
     token.  ---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`--------------------------------------------------- Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  CONSTCOND Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  -------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`------------------------------------------------------------- Each real token shifted decrements this.   Pop the current state because it cannot handle the error token.   Shift the error token.  -------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`------------------------------------------------------------------------.
| yyabortlab -- YYABORT comes here.  |
`------------------------------------------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`------------------------------------------------- Fall through.   Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.   Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.   Variables are expanded in the parse phase. We can free them here.  A Bison parser, made by GNU Bison 3.1.   Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.   As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.   C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.   All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.   Identify Bison output.   Bison version.   Skeleton name.   Pure parsers.   Push parsers.   Pull parsers.   Copy the first part of user declarations.   Enabling verbose error messages.   In a future release of Bison, this section will be replaced
   by #include "parser.tab.h".   Debug traces.   Token type.   Value type.   !YY_YY_PARSER_TAB_H_INCLUDED   Copy the second part of user declarations.   INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  empty  Suppress unused-variable warnings by "using" E.   empty  Suppress an incorrect diagnostic about yylval being uninitialized.   Nothing.  The parser invokes alloca or malloc; define the necessary symbols.   INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  Use EXIT_SUCCESS as a witness for stdlib.h.   Pacify GCC's 'empty if-body' warning.   empty  The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.   reasonable circa 2006  INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  ! defined yyoverflow || YYERROR_VERBOSE  A type that is properly aligned for any stack member.   The size of the maximum gap between one aligned stack and the next.   The size of an array large to enough to hold all stacks, each with
   N elements.   Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.   Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.   !YYCOPY_NEEDED  YYFINAL -- State number of the termination state.   YYLAST -- Last index in YYTABLE.   YYNTOKENS -- Number of terminals.   YYNNTS -- Number of nonterminals.   YYNRULES -- Number of rules.   YYNSTATES -- Number of states.   YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.   YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.   YYRLINE[YYN] -- Source line where rule number YYN was defined.   YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.   YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).   YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.   YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.   YYPGOTO[NTERM-NUM].   YYDEFGOTO[NTERM-NUM].   YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.   YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.   YYR1[YYN] -- Symbol number of symbol that rule YYN derives.   YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.   Error token number  Enable debugging if requested.   INFRINGES ON USER NAME SPACE  This macro is provided for backward compatibility. ----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`------------------------------------------------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------ The symbols being reduced.   Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.   !YYDEBUG  !YYDEBUG  YYINITDEPTH -- initial size of the parser's stacks.   YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.   Return the length of YYSTR.   Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.   Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.   Fall through.   Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.   Internationalized format string.  Arguments of yyformat.  Number of reported tokens (one for the "unexpected", one per
     "expected").  There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
   Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.   Stay within bounds of both yycheck and yytname.   Avoid compiler warnings.  Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.   YYERROR_VERBOSE -----------------------------------------------.
| Release the memory associated to this symbol.  |
`----------------------------------------------- choice_entry   if_entry   menu_entry   The lookahead symbol.   The semantic value of the lookahead symbol.   Number of syntax errors so far.  ----------.
| yyparse.  |
`---------- Number of tokens to shift before error messages enabled.   The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.   The state stack.   The semantic value stack.   Lookahead token as an internal (translated) token number.   The variables used to return semantic value and location from the
     action routines.   Buffer for error messages, and its allocated size.   The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.   Cause a token to be read.  ------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------ In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.   Get the current used size of the three stacks, in elements.   Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.   Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.   no yyoverflow  Extend the stack our own way.   no yyoverflow -----------.
| yybackup.  |
`----------- Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.   First try to decide what to do without reference to lookahead token.   Not known => get a lookahead token if don't already have one.   YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.   If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.   Count tokens shifted since error; after three, turn off error
     status.   Shift the lookahead token.   Discard the shifted token.  -----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`----------------------------------------------------------------------------------------.
| yyreduce -- Do a reduction.  |
`----------------------------- yyn is the number of a rule to reduce with.   If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.   Is the help text empty or all whitespace?  User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.   Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  --------------------------------------.
| yyerrlab -- here on detecting error.  |
`-------------------------------------- Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.   If not already recovering from an error, report this error.   If just tried and failed to reuse lookahead token after an
         error, discard it.   Return failure if at end of input.   Else will try to reuse lookahead token after shifting the error
     token.  ---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`--------------------------------------------------- Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  CONSTCOND Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  -------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`------------------------------------------------------------- Each real token shifted decrements this.   Pop the current state because it cannot handle the error token.   Shift the error token.  -------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`------------------------------------------------------------------------.
| yyabortlab -- YYABORT comes here.  |
`------------------------------------------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`------------------------------------------------- Fall through.   Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.   Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.   Variables are expanded in the parse phase. We can free them here.  A Bison parser, made by GNU Bison 3.1.   Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.   As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.   C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.   All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.   Identify Bison output.   Bison version.   Skeleton name.   Pure parsers.   Push parsers.   Pull parsers.   Copy the first part of user declarations.   Enabling verbose error messages.   In a future release of Bison, this section will be replaced
   by #include "parser.tab.h".   Debug traces.   Token type.   Value type.   !YY_YY_PARSER_TAB_H_INCLUDED   Copy the second part of user declarations.   INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  empty  Suppress unused-variable warnings by "using" E.   empty  Suppress an incorrect diagnostic about yylval being uninitialized.   Nothing.  The parser invokes alloca or malloc; define the necessary symbols.   INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  Use EXIT_SUCCESS as a witness for stdlib.h.   Pacify GCC's 'empty if-body' warning.   empty  The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.   reasonable circa 2006  INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  ! defined yyoverflow || YYERROR_VERBOSE  A type that is properly aligned for any stack member.   The size of the maximum gap between one aligned stack and the next.   The size of an array large to enough to hold all stacks, each with
   N elements.   Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.   Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.   !YYCOPY_NEEDED  YYFINAL -- State number of the termination state.   YYLAST -- Last index in YYTABLE.   YYNTOKENS -- Number of terminals.   YYNNTS -- Number of nonterminals.   YYNRULES -- Number of rules.   YYNSTATES -- Number of states.   YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.   YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.   YYRLINE[YYN] -- Source line where rule number YYN was defined.   YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.   YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).   YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.   YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.   YYPGOTO[NTERM-NUM].   YYDEFGOTO[NTERM-NUM].   YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.   YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.   YYR1[YYN] -- Symbol number of symbol that rule YYN derives.   YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.   Error token number  Enable debugging if requested.   INFRINGES ON USER NAME SPACE  This macro is provided for backward compatibility. ----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`------------------------------------------------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------ The symbols being reduced.   Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.   !YYDEBUG  !YYDEBUG  YYINITDEPTH -- initial size of the parser's stacks.   YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.   Return the length of YYSTR.   Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.   Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.   Fall through.   Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.   Internationalized format string.  Arguments of yyformat.  Number of reported tokens (one for the "unexpected", one per
     "expected").  There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
   Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.   Stay within bounds of both yycheck and yytname.   Avoid compiler warnings.  Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.   YYERROR_VERBOSE -----------------------------------------------.
| Release the memory associated to this symbol.  |
`----------------------------------------------- choice_entry   if_entry   menu_entry   The lookahead symbol.   The semantic value of the lookahead symbol.   Number of syntax errors so far.  ----------.
| yyparse.  |
`---------- Number of tokens to shift before error messages enabled.   The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.   The state stack.   The semantic value stack.   Lookahead token as an internal (translated) token number.   The variables used to return semantic value and location from the
     action routines.   Buffer for error messages, and its allocated size.   The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.   Cause a token to be read.  ------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------ In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.   Get the current used size of the three stacks, in elements.   Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.   Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.   no yyoverflow  Extend the stack our own way.   no yyoverflow -----------.
| yybackup.  |
`----------- Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.   First try to decide what to do without reference to lookahead token.   Not known => get a lookahead token if don't already have one.   YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.   If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.   Count tokens shifted since error; after three, turn off error
     status.   Shift the lookahead token.   Discard the shifted token.  -----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`----------------------------------------------------------------------------------------.
| yyreduce -- Do a reduction.  |
`----------------------------- yyn is the number of a rule to reduce with.   If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.   Is the help text empty or all whitespace?  User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.   Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  --------------------------------------.
| yyerrlab -- here on detecting error.  |
`-------------------------------------- Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.   If not already recovering from an error, report this error.   If just tried and failed to reuse lookahead token after an
         error, discard it.   Return failure if at end of input.   Else will try to reuse lookahead token after shifting the error
     token.  ---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`--------------------------------------------------- Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  CONSTCOND Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  -------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`------------------------------------------------------------- Each real token shifted decrements this.   Pop the current state because it cannot handle the error token.   Shift the error token.  -------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`------------------------------------------------------------------------.
| yyabortlab -- YYABORT comes here.  |
`------------------------------------------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`------------------------------------------------- Fall through.   Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.   Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.   Variables are expanded in the parse phase. We can free them here.  A Bison parser, made by GNU Bison 3.1.   Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.   As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.   C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.   All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.   Identify Bison output.   Bison version.   Skeleton name.   Pure parsers.   Push parsers.   Pull parsers.   Copy the first part of user declarations.   Enabling verbose error messages.   In a future release of Bison, this section will be replaced
   by #include "parser.tab.h".   Debug traces.   Token type.   Value type.   !YY_YY_PARSER_TAB_H_INCLUDED   Copy the second part of user declarations.   INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  empty  Suppress unused-variable warnings by "using" E.   empty  Suppress an incorrect diagnostic about yylval being uninitialized.   Nothing.  The parser invokes alloca or malloc; define the necessary symbols.   INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  Use EXIT_SUCCESS as a witness for stdlib.h.   Pacify GCC's 'empty if-body' warning.   empty  The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.   reasonable circa 2006  INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  ! defined yyoverflow || YYERROR_VERBOSE  A type that is properly aligned for any stack member.   The size of the maximum gap between one aligned stack and the next.   The size of an array large to enough to hold all stacks, each with
   N elements.   Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.   Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.   !YYCOPY_NEEDED  YYFINAL -- State number of the termination state.   YYLAST -- Last index in YYTABLE.   YYNTOKENS -- Number of terminals.   YYNNTS -- Number of nonterminals.   YYNRULES -- Number of rules.   YYNSTATES -- Number of states.   YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.   YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.   YYRLINE[YYN] -- Source line where rule number YYN was defined.   YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.   YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).   YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.   YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.   YYPGOTO[NTERM-NUM].   YYDEFGOTO[NTERM-NUM].   YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.   YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.   YYR1[YYN] -- Symbol number of symbol that rule YYN derives.   YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.   Error token number  Enable debugging if requested.   INFRINGES ON USER NAME SPACE  This macro is provided for backward compatibility. ----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`------------------------------------------------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------ The symbols being reduced.   Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.   !YYDEBUG  !YYDEBUG  YYINITDEPTH -- initial size of the parser's stacks.   YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.   Return the length of YYSTR.   Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.   Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.   Fall through.   Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.   Internationalized format string.  Arguments of yyformat.  Number of reported tokens (one for the "unexpected", one per
     "expected").  There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
   Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.   Stay within bounds of both yycheck and yytname.   Avoid compiler warnings.  Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.   YYERROR_VERBOSE -----------------------------------------------.
| Release the memory associated to this symbol.  |
`----------------------------------------------- choice_entry   if_entry   menu_entry   The lookahead symbol.   The semantic value of the lookahead symbol.   Number of syntax errors so far.  ----------.
| yyparse.  |
`---------- Number of tokens to shift before error messages enabled.   The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.   The state stack.   The semantic value stack.   Lookahead token as an internal (translated) token number.   The variables used to return semantic value and location from the
     action routines.   Buffer for error messages, and its allocated size.   The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.   Cause a token to be read.  ------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------ In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.   Get the current used size of the three stacks, in elements.   Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.   Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.   no yyoverflow  Extend the stack our own way.   no yyoverflow -----------.
| yybackup.  |
`----------- Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.   First try to decide what to do without reference to lookahead token.   Not known => get a lookahead token if don't already have one.   YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.   If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.   Count tokens shifted since error; after three, turn off error
     status.   Shift the lookahead token.   Discard the shifted token.  -----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`----------------------------------------------------------------------------------------.
| yyreduce -- Do a reduction.  |
`----------------------------- yyn is the number of a rule to reduce with.   If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.   Is the help text empty or all whitespace?  User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.   Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  --------------------------------------.
| yyerrlab -- here on detecting error.  |
`-------------------------------------- Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.   If not already recovering from an error, report this error.   If just tried and failed to reuse lookahead token after an
         error, discard it.   Return failure if at end of input.   Else will try to reuse lookahead token after shifting the error
     token.  ---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`--------------------------------------------------- Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  CONSTCOND Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  -------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`------------------------------------------------------------- Each real token shifted decrements this.   Pop the current state because it cannot handle the error token.   Shift the error token.  -------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`------------------------------------------------------------------------.
| yyabortlab -- YYABORT comes here.  |
`------------------------------------------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`------------------------------------------------- Fall through.   Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.   Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.   Variables are expanded in the parse phase. We can free them here.  A Bison parser, made by GNU Bison 3.1.   Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.   As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.   C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.   All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.   Identify Bison output.   Bison version.   Skeleton name.   Pure parsers.   Push parsers.   Pull parsers.   Copy the first part of user declarations.   Enabling verbose error messages.   In a future release of Bison, this section will be replaced
   by #include "parser.tab.h".   Debug traces.   Token type.   Value type.   !YY_YY_PARSER_TAB_H_INCLUDED   Copy the second part of user declarations.   INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  empty  Suppress unused-variable warnings by "using" E.   empty  Suppress an incorrect diagnostic about yylval being uninitialized.   Nothing.  The parser invokes alloca or malloc; define the necessary symbols.   INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  Use EXIT_SUCCESS as a witness for stdlib.h.   Pacify GCC's 'empty if-body' warning.   empty  The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.   reasonable circa 2006  INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  INFRINGES ON USER NAME SPACE  ! defined yyoverflow || YYERROR_VERBOSE  A type that is properly aligned for any stack member.   The size of the maximum gap between one aligned stack and the next.   The size of an array large to enough to hold all stacks, each with
   N elements.   Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.   Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.   !YYCOPY_NEEDED  YYFINAL -- State number of the termination state.   YYLAST -- Last index in YYTABLE.   YYNTOKENS -- Number of terminals.   YYNNTS -- Number of nonterminals.   YYNRULES -- Number of rules.   YYNSTATES -- Number of states.   YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.   YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.   YYRLINE[YYN] -- Source line where rule number YYN was defined.   YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.   YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).   YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.   YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.   YYPGOTO[NTERM-NUM].   YYDEFGOTO[NTERM-NUM].   YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.   YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.   YYR1[YYN] -- Symbol number of symbol that rule YYN derives.   YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.   Error token number  Enable debugging if requested.   INFRINGES ON USER NAME SPACE  This macro is provided for backward compatibility. ----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`------------------------------------------------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------ The symbols being reduced.   Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.   !YYDEBUG  !YYDEBUG  YYINITDEPTH -- initial size of the parser's stacks.   YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.   Return the length of YYSTR.   Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.   Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.   Fall through.   Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.   Internationalized format string.  Arguments of yyformat.  Number of reported tokens (one for the "unexpected", one per
     "expected").  There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
   Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.   Stay within bounds of both yycheck and yytname.   Avoid compiler warnings.  Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.   YYERROR_VERBOSE -----------------------------------------------.
| Release the memory associated to this symbol.  |
`----------------------------------------------- choice_entry   if_entry   menu_entry   The lookahead symbol.   The semantic value of the lookahead symbol.   Number of syntax errors so far.  ----------.
| yyparse.  |
`---------- Number of tokens to shift before error messages enabled.   The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.   The state stack.   The semantic value stack.   Lookahead token as an internal (translated) token number.   The variables used to return semantic value and location from the
     action routines.   Buffer for error messages, and its allocated size.   The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.   Cause a token to be read.  ------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------ In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.   Get the current used size of the three stacks, in elements.   Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.   Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.   no yyoverflow  Extend the stack our own way.   no yyoverflow -----------.
| yybackup.  |
`----------- Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.   First try to decide what to do without reference to lookahead token.   Not known => get a lookahead token if don't already have one.   YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.   If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.   Count tokens shifted since error; after three, turn off error
     status.   Shift the lookahead token.   Discard the shifted token.  -----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`----------------------------------------------------------------------------------------.
| yyreduce -- Do a reduction.  |
`----------------------------- yyn is the number of a rule to reduce with.   If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.   Is the help text empty or all whitespace?  User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.   Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  --------------------------------------.
| yyerrlab -- here on detecting error.  |
`-------------------------------------- Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.   If not already recovering from an error, report this error.   If just tried and failed to reuse lookahead token after an
         error, discard it.   Return failure if at end of input.   Else will try to reuse lookahead token after shifting the error
     token.  ---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`--------------------------------------------------- Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  CONSTCOND Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  -------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`------------------------------------------------------------- Each real token shifted decrements this.   Pop the current state because it cannot handle the error token.   Shift the error token.  -------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`------------------------------------------------------------------------.
| yyabortlab -- YYABORT comes here.  |
`------------------------------------------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`------------------------------------------------- Fall through.   Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.   Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.   Variables are expanded in the parse phase. We can free them here. 