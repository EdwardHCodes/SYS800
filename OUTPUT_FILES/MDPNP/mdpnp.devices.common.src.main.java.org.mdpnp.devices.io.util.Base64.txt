******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * A very fast and memory efficient class to encode and decode to and from
 * BASE64 in full accordance with RFC 2045.<br>
 * <br>
 * On Windows XP sp1 with 1.4.2_04 and later ;), this encoder and decoder is
 * about 10 times faster on small arrays (10 - 1000 bytes) and 2-3 times as fast
 * on larger arrays (10000 - 1000000 bytes) compared to
 * <code>sun.misc.Encoder()/Decoder()</code>.<br>
 * <br>
 * 
 * On byte arrays the encoder is about 20% faster than Jakarta Commons Base64
 * Codec for encode and about 50% faster for decoding large arrays. This
 * implementation is about twice as fast on very small arrays (&lt 30 bytes). If
 * source/destination is a <code>String</code> this version is about three times
 * as fast due to the fact that the Commons Codec result has to be recoded to a
 * <code>String</code> from <code>byte[]</code>, which is very expensive.<br>
 * <br>
 * 
 * This encode/decode algorithm doesn't create any temporary arrays as many
 * other codecs do, it only allocates the resulting array. This produces less
 * garbage and it is possible to handle arrays twice as large as algorithms that
 * create a temporary array. (E.g. Jakarta Commons Codec). It is unknown whether
 * Sun's <code>sun.misc.Encoder()/Decoder()</code> produce temporary arrays but
 * since performance is quite low it probably does.<br>
 * <br>
 * 
 * The encoder produces the same output as the Sun one except that the Sun's
 * encoder appends a trailing line separator if the last character isn't a pad.
 * Unclear why but it only adds to the length and is probably a side effect.
 * Both are in conformance with RFC 2045 though.<br>
 * Commons codec seem to always att a trailing line separator.<br>
 * <br>
 * 
 * <b>Note!</b> The encode/decode method pairs (types) come in three versions
 * with the <b>exact</b> same algorithm and thus a lot of code redundancy. This
 * is to not create any temporary arrays for transcoding to/from different
 * format types. The methods not used can simply be commented out.<br>
 * <br>
 * 
 * There is also a "fast" version of all decode methods that works the same way
 * as the normal ones, but har a few demands on the decoded input. Normally
 * though, these fast verions should be used if the source if the input is known
 * and it hasn't bee tampered with.<br>
 * <br>
 * 
 * If you find the code useful or you find a bug, please send me a note at
 * base64 @ miginfocom . com.
 * 
 * Licence (BSD): ==============
 * 
 * Copyright (c) 2004, Mikael Grev, MiG InfoCom AB. (base64 @ miginfocom . com)
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer. Redistributions in binary
 * form must reproduce the above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or other materials provided
 * with the distribution. Neither the name of the MiG InfoCom AB nor the names
 * of its contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * @version 2.2
 * @author Mikael Grev Date: 2004-aug-02 Time: 11:31:11
 *
 * @author Jeff Plourde
 *
  **************************************************************************************** * char[] version *****************************************************************************************
     * Encodes a raw byte array into a BASE64 <code>char[]</code> representation
     * i accordance with RFC 2045.
     * 
     * @param sArr
     *            The bytes to convert. If <code>null</code> or length 0 an
     *            empty array will be returned.
     * @param lineSep
     *            Optional "\r\n" after 76 characters, unless end of file.<br>
     *            No line separator will be in breach of RFC 2045 which
     *            specifies max 76 per line but will be a little faster.
     * @return A BASE64 encoded array. Never <code>null</code>.
      Check special case Length of even 24-bits. Returned character count Length of returned array Encode even 24-bits Copy next three bytes into lower 24 bits of int, paying attension to sign. Encode the int into four chars Add optional line separator Pad and encode last bits if source isn't even 24 bits. 0 - 2. Prepare the int Set last four chars*
     * Decodes a BASE64 encoded char array. All illegal characters will be
     * ignored and can handle both arrays with and without line separators.
     * 
     * @param sArr
     *            The source array. <code>null</code> or length 0 will return an
     *            empty array.
     * @return The decoded array of bytes. May be of length 0. Will be
     *         <code>null</code> if the legal characters (including '=') isn't
     *         divideable by 4. (I.e. definitely corrupted).
      Check special case Count illegal characters (including '\r', '\n') to know what size the returned array will be, so we don't have to reallocate & copy it later. Number of separator characters. (Actually illegal characters, but that's a bonus...) If input is "pure" (I.e. no line separators or illegal chars) base64 this loop can be commented out. Check so that legal chars (including '=') are evenly divideable by 4 as specified in RFC 2045. Preallocate byte[] of exact length Assemble three bytes into an int from four "valid" characters. j only increased if a valid char was found. Add the bytes*
     * Decodes a BASE64 encoded char array that is known to be resonably well
     * formatted. The method is about twice as fast as {@link #decode(char[])}.
     * The preconditions are:<br>
     * + The array must have a line length of 76 chars OR no line separators at
     * all (one line).<br>
     * + Line separator must be "\r\n", as specified in RFC 2045 + The array
     * must not contain illegal characters within the encoded string<br>
     * + The array CAN have illegal characters at the beginning and end, those
     * will be dealt with appropriately.<br>
     * 
     * @param sArr
     *            The source array. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0.
      Check special case Start and end index after trimming. Trim illegal chars from start Trim illegal chars from end get the padding count (=) (0, 1 or 2) Count '=' at end. Content count including possible separators The number of decoded bytes Preallocate byte[] of exact length Decode all but the last 0 - 2 bytes. Assemble three bytes into an int from four "valid" characters. Add the bytes If line separator, jump over it. Decode last 1-3 bytes (incl '=') into 1-3 bytes **************************************************************************************** * byte[] version *****************************************************************************************
     * Encodes a raw byte array into a BASE64 <code>byte[]</code> representation
     * i accordance with RFC 2045.
     * 
     * @param sArr
     *            The bytes to convert. If <code>null</code> or length 0 an
     *            empty array will be returned.
     * @param lineSep
     *            Optional "\r\n" after 76 characters, unless end of file.<br>
     *            No line separator will be in breach of RFC 2045 which
     *            specifies max 76 per line but will be a little faster.
     * @return A BASE64 encoded array. Never <code>null</code>.
      Check special case Length of even 24-bits. Returned character count Length of returned array Encode even 24-bits Copy next three bytes into lower 24 bits of int, paying attension to sign. Encode the int into four chars Add optional line separator Pad and encode last bits if source isn't an even 24 bits. 0 - 2. Prepare the int Set last four chars*
     * Decodes a BASE64 encoded byte array. All illegal characters will be
     * ignored and can handle both arrays with and without line separators.
     * 
     * @param sArr
     *            The source array. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0. Will be
     *         <code>null</code> if the legal characters (including '=') isn't
     *         divideable by 4. (I.e. definitely corrupted).
      Check special case Count illegal characters (including '\r', '\n') to know what size the returned array will be, so we don't have to reallocate & copy it later. Number of separator characters. (Actually illegal characters, but that's a bonus...) If input is "pure" (I.e. no line separators or illegal chars) base64 this loop can be commented out. Check so that legal chars (including '=') are evenly divideable by 4 as specified in RFC 2045. Preallocate byte[] of exact length Assemble three bytes into an int from four "valid" characters. j only increased if a valid char was found. Add the bytes*
     * Decodes a BASE64 encoded byte array that is known to be resonably well
     * formatted. The method is about twice as fast as {@link #decode(byte[])}.
     * The preconditions are:<br>
     * + The array must have a line length of 76 chars OR no line separators at
     * all (one line).<br>
     * + Line separator must be "\r\n", as specified in RFC 2045 + The array
     * must not contain illegal characters within the encoded string<br>
     * + The array CAN have illegal characters at the beginning and end, those
     * will be dealt with appropriately.<br>
     * 
     * @param sArr
     *            The source array. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0.
      Check special case Start and end index after trimming. Trim illegal chars from start Trim illegal chars from end get the padding count (=) (0, 1 or 2) Count '=' at end. Content count including possible separators The number of decoded bytes Preallocate byte[] of exact length Decode all but the last 0 - 2 bytes. Assemble three bytes into an int from four "valid" characters. Add the bytes If line separator, jump over it. Decode last 1-3 bytes (incl '=') into 1-3 bytes **************************************************************************************** * String version *****************************************************************************************
     * Encodes a raw byte array into a BASE64 <code>String</code> representation
     * i accordance with RFC 2045.
     * 
     * @param sArr
     *            The bytes to convert. If <code>null</code> or length 0 an
     *            empty array will be returned.
     * @param lineSep
     *            Optional "\r\n" after 76 characters, unless end of file.<br>
     *            No line separator will be in breach of RFC 2045 which
     *            specifies max 76 per line but will be a little faster.
     * @return A BASE64 encoded array. Never <code>null</code>.
      Reuse char[] since we can't create a String incrementally anyway and StringBuffer/Builder would be slower.*
     * Decodes a BASE64 encoded <code>String</code>. All illegal characters will
     * be ignored and can handle both strings with and without line separators.<br>
     * <b>Note!</b> It can be up to about 2x the speed to call
     * <code>decode(str.toCharArray())</code> instead. That will create a
     * temporary array though. This version will use <code>str.charAt(i)</code>
     * to iterate the string.
     * 
     * @param str
     *            The source string. <code>null</code> or length 0 will return
     *            an empty array.
     * @return The decoded array of bytes. May be of length 0. Will be
     *         <code>null</code> if the legal characters (including '=') isn't
     *         divideable by 4. (I.e. definitely corrupted).
      Check special case Count illegal characters (including '\r', '\n') to know what size the returned array will be, so we don't have to reallocate & copy it later. Number of separator characters. (Actually illegal characters, but that's a bonus...) If input is "pure" (I.e. no line separators or illegal chars) base64 this loop can be commented out. Check so that legal chars (including '=') are evenly divideable by 4 as specified in RFC 2045. Count '=' at end Preallocate byte[] of exact length Assemble three bytes into an int from four "valid" characters. j only increased if a valid char was found. Add the bytes*
     * Decodes a BASE64 encoded string that is known to be resonably well
     * formatted. The method is about twice as fast as {@link #decode(String)}.
     * The preconditions are:<br>
     * + The array must have a line length of 76 chars OR no line separators at
     * all (one line).<br>
     * + Line separator must be "\r\n", as specified in RFC 2045 + The array
     * must not contain illegal characters within the encoded string<br>
     * + The array CAN have illegal characters at the beginning and end, those
     * will be dealt with appropriately.<br>
     * 
     * @param s
     *            The source string. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0.
      Check special case Start and end index after trimming. Trim illegal chars from start Trim illegal chars from end get the padding count (=) (0, 1 or 2) Count '=' at end. Content count including possible separators The number of decoded bytes Preallocate byte[] of exact length Decode all but the last 0 - 2 bytes. Assemble three bytes into an int from four "valid" characters. Add the bytes If line separator, jump over it. Decode last 1-3 bytes (incl '=') into 1-3 bytes******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * A very fast and memory efficient class to encode and decode to and from
 * BASE64 in full accordance with RFC 2045.<br>
 * <br>
 * On Windows XP sp1 with 1.4.2_04 and later ;), this encoder and decoder is
 * about 10 times faster on small arrays (10 - 1000 bytes) and 2-3 times as fast
 * on larger arrays (10000 - 1000000 bytes) compared to
 * <code>sun.misc.Encoder()/Decoder()</code>.<br>
 * <br>
 * 
 * On byte arrays the encoder is about 20% faster than Jakarta Commons Base64
 * Codec for encode and about 50% faster for decoding large arrays. This
 * implementation is about twice as fast on very small arrays (&lt 30 bytes). If
 * source/destination is a <code>String</code> this version is about three times
 * as fast due to the fact that the Commons Codec result has to be recoded to a
 * <code>String</code> from <code>byte[]</code>, which is very expensive.<br>
 * <br>
 * 
 * This encode/decode algorithm doesn't create any temporary arrays as many
 * other codecs do, it only allocates the resulting array. This produces less
 * garbage and it is possible to handle arrays twice as large as algorithms that
 * create a temporary array. (E.g. Jakarta Commons Codec). It is unknown whether
 * Sun's <code>sun.misc.Encoder()/Decoder()</code> produce temporary arrays but
 * since performance is quite low it probably does.<br>
 * <br>
 * 
 * The encoder produces the same output as the Sun one except that the Sun's
 * encoder appends a trailing line separator if the last character isn't a pad.
 * Unclear why but it only adds to the length and is probably a side effect.
 * Both are in conformance with RFC 2045 though.<br>
 * Commons codec seem to always att a trailing line separator.<br>
 * <br>
 * 
 * <b>Note!</b> The encode/decode method pairs (types) come in three versions
 * with the <b>exact</b> same algorithm and thus a lot of code redundancy. This
 * is to not create any temporary arrays for transcoding to/from different
 * format types. The methods not used can simply be commented out.<br>
 * <br>
 * 
 * There is also a "fast" version of all decode methods that works the same way
 * as the normal ones, but har a few demands on the decoded input. Normally
 * though, these fast verions should be used if the source if the input is known
 * and it hasn't bee tampered with.<br>
 * <br>
 * 
 * If you find the code useful or you find a bug, please send me a note at
 * base64 @ miginfocom . com.
 * 
 * Licence (BSD): ==============
 * 
 * Copyright (c) 2004, Mikael Grev, MiG InfoCom AB. (base64 @ miginfocom . com)
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer. Redistributions in binary
 * form must reproduce the above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or other materials provided
 * with the distribution. Neither the name of the MiG InfoCom AB nor the names
 * of its contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * @version 2.2
 * @author Mikael Grev Date: 2004-aug-02 Time: 11:31:11
 *
 * @author Jeff Plourde
 *
  **************************************************************************************** * char[] version *****************************************************************************************
     * Encodes a raw byte array into a BASE64 <code>char[]</code> representation
     * i accordance with RFC 2045.
     * 
     * @param sArr
     *            The bytes to convert. If <code>null</code> or length 0 an
     *            empty array will be returned.
     * @param lineSep
     *            Optional "\r\n" after 76 characters, unless end of file.<br>
     *            No line separator will be in breach of RFC 2045 which
     *            specifies max 76 per line but will be a little faster.
     * @return A BASE64 encoded array. Never <code>null</code>.
      Check special case Length of even 24-bits. Returned character count Length of returned array Encode even 24-bits Copy next three bytes into lower 24 bits of int, paying attension to sign. Encode the int into four chars Add optional line separator Pad and encode last bits if source isn't even 24 bits. 0 - 2. Prepare the int Set last four chars*
     * Decodes a BASE64 encoded char array. All illegal characters will be
     * ignored and can handle both arrays with and without line separators.
     * 
     * @param sArr
     *            The source array. <code>null</code> or length 0 will return an
     *            empty array.
     * @return The decoded array of bytes. May be of length 0. Will be
     *         <code>null</code> if the legal characters (including '=') isn't
     *         divideable by 4. (I.e. definitely corrupted).
      Check special case Count illegal characters (including '\r', '\n') to know what size the returned array will be, so we don't have to reallocate & copy it later. Number of separator characters. (Actually illegal characters, but that's a bonus...) If input is "pure" (I.e. no line separators or illegal chars) base64 this loop can be commented out. Check so that legal chars (including '=') are evenly divideable by 4 as specified in RFC 2045. Preallocate byte[] of exact length Assemble three bytes into an int from four "valid" characters. j only increased if a valid char was found. Add the bytes*
     * Decodes a BASE64 encoded char array that is known to be resonably well
     * formatted. The method is about twice as fast as {@link #decode(char[])}.
     * The preconditions are:<br>
     * + The array must have a line length of 76 chars OR no line separators at
     * all (one line).<br>
     * + Line separator must be "\r\n", as specified in RFC 2045 + The array
     * must not contain illegal characters within the encoded string<br>
     * + The array CAN have illegal characters at the beginning and end, those
     * will be dealt with appropriately.<br>
     * 
     * @param sArr
     *            The source array. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0.
      Check special case Start and end index after trimming. Trim illegal chars from start Trim illegal chars from end get the padding count (=) (0, 1 or 2) Count '=' at end. Content count including possible separators The number of decoded bytes Preallocate byte[] of exact length Decode all but the last 0 - 2 bytes. Assemble three bytes into an int from four "valid" characters. Add the bytes If line separator, jump over it. Decode last 1-3 bytes (incl '=') into 1-3 bytes **************************************************************************************** * byte[] version *****************************************************************************************
     * Encodes a raw byte array into a BASE64 <code>byte[]</code> representation
     * i accordance with RFC 2045.
     * 
     * @param sArr
     *            The bytes to convert. If <code>null</code> or length 0 an
     *            empty array will be returned.
     * @param lineSep
     *            Optional "\r\n" after 76 characters, unless end of file.<br>
     *            No line separator will be in breach of RFC 2045 which
     *            specifies max 76 per line but will be a little faster.
     * @return A BASE64 encoded array. Never <code>null</code>.
      Check special case Length of even 24-bits. Returned character count Length of returned array Encode even 24-bits Copy next three bytes into lower 24 bits of int, paying attension to sign. Encode the int into four chars Add optional line separator Pad and encode last bits if source isn't an even 24 bits. 0 - 2. Prepare the int Set last four chars*
     * Decodes a BASE64 encoded byte array. All illegal characters will be
     * ignored and can handle both arrays with and without line separators.
     * 
     * @param sArr
     *            The source array. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0. Will be
     *         <code>null</code> if the legal characters (including '=') isn't
     *         divideable by 4. (I.e. definitely corrupted).
      Check special case Count illegal characters (including '\r', '\n') to know what size the returned array will be, so we don't have to reallocate & copy it later. Number of separator characters. (Actually illegal characters, but that's a bonus...) If input is "pure" (I.e. no line separators or illegal chars) base64 this loop can be commented out. Check so that legal chars (including '=') are evenly divideable by 4 as specified in RFC 2045. Preallocate byte[] of exact length Assemble three bytes into an int from four "valid" characters. j only increased if a valid char was found. Add the bytes*
     * Decodes a BASE64 encoded byte array that is known to be resonably well
     * formatted. The method is about twice as fast as {@link #decode(byte[])}.
     * The preconditions are:<br>
     * + The array must have a line length of 76 chars OR no line separators at
     * all (one line).<br>
     * + Line separator must be "\r\n", as specified in RFC 2045 + The array
     * must not contain illegal characters within the encoded string<br>
     * + The array CAN have illegal characters at the beginning and end, those
     * will be dealt with appropriately.<br>
     * 
     * @param sArr
     *            The source array. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0.
      Check special case Start and end index after trimming. Trim illegal chars from start Trim illegal chars from end get the padding count (=) (0, 1 or 2) Count '=' at end. Content count including possible separators The number of decoded bytes Preallocate byte[] of exact length Decode all but the last 0 - 2 bytes. Assemble three bytes into an int from four "valid" characters. Add the bytes If line separator, jump over it. Decode last 1-3 bytes (incl '=') into 1-3 bytes **************************************************************************************** * String version *****************************************************************************************
     * Encodes a raw byte array into a BASE64 <code>String</code> representation
     * i accordance with RFC 2045.
     * 
     * @param sArr
     *            The bytes to convert. If <code>null</code> or length 0 an
     *            empty array will be returned.
     * @param lineSep
     *            Optional "\r\n" after 76 characters, unless end of file.<br>
     *            No line separator will be in breach of RFC 2045 which
     *            specifies max 76 per line but will be a little faster.
     * @return A BASE64 encoded array. Never <code>null</code>.
      Reuse char[] since we can't create a String incrementally anyway and StringBuffer/Builder would be slower.*
     * Decodes a BASE64 encoded <code>String</code>. All illegal characters will
     * be ignored and can handle both strings with and without line separators.<br>
     * <b>Note!</b> It can be up to about 2x the speed to call
     * <code>decode(str.toCharArray())</code> instead. That will create a
     * temporary array though. This version will use <code>str.charAt(i)</code>
     * to iterate the string.
     * 
     * @param str
     *            The source string. <code>null</code> or length 0 will return
     *            an empty array.
     * @return The decoded array of bytes. May be of length 0. Will be
     *         <code>null</code> if the legal characters (including '=') isn't
     *         divideable by 4. (I.e. definitely corrupted).
      Check special case Count illegal characters (including '\r', '\n') to know what size the returned array will be, so we don't have to reallocate & copy it later. Number of separator characters. (Actually illegal characters, but that's a bonus...) If input is "pure" (I.e. no line separators or illegal chars) base64 this loop can be commented out. Check so that legal chars (including '=') are evenly divideable by 4 as specified in RFC 2045. Count '=' at end Preallocate byte[] of exact length Assemble three bytes into an int from four "valid" characters. j only increased if a valid char was found. Add the bytes*
     * Decodes a BASE64 encoded string that is known to be resonably well
     * formatted. The method is about twice as fast as {@link #decode(String)}.
     * The preconditions are:<br>
     * + The array must have a line length of 76 chars OR no line separators at
     * all (one line).<br>
     * + Line separator must be "\r\n", as specified in RFC 2045 + The array
     * must not contain illegal characters within the encoded string<br>
     * + The array CAN have illegal characters at the beginning and end, those
     * will be dealt with appropriately.<br>
     * 
     * @param s
     *            The source string. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0.
      Check special case Start and end index after trimming. Trim illegal chars from start Trim illegal chars from end get the padding count (=) (0, 1 or 2) Count '=' at end. Content count including possible separators The number of decoded bytes Preallocate byte[] of exact length Decode all but the last 0 - 2 bytes. Assemble three bytes into an int from four "valid" characters. Add the bytes If line separator, jump over it. Decode last 1-3 bytes (incl '=') into 1-3 bytes******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * A very fast and memory efficient class to encode and decode to and from
 * BASE64 in full accordance with RFC 2045.<br>
 * <br>
 * On Windows XP sp1 with 1.4.2_04 and later ;), this encoder and decoder is
 * about 10 times faster on small arrays (10 - 1000 bytes) and 2-3 times as fast
 * on larger arrays (10000 - 1000000 bytes) compared to
 * <code>sun.misc.Encoder()/Decoder()</code>.<br>
 * <br>
 * 
 * On byte arrays the encoder is about 20% faster than Jakarta Commons Base64
 * Codec for encode and about 50% faster for decoding large arrays. This
 * implementation is about twice as fast on very small arrays (&lt 30 bytes). If
 * source/destination is a <code>String</code> this version is about three times
 * as fast due to the fact that the Commons Codec result has to be recoded to a
 * <code>String</code> from <code>byte[]</code>, which is very expensive.<br>
 * <br>
 * 
 * This encode/decode algorithm doesn't create any temporary arrays as many
 * other codecs do, it only allocates the resulting array. This produces less
 * garbage and it is possible to handle arrays twice as large as algorithms that
 * create a temporary array. (E.g. Jakarta Commons Codec). It is unknown whether
 * Sun's <code>sun.misc.Encoder()/Decoder()</code> produce temporary arrays but
 * since performance is quite low it probably does.<br>
 * <br>
 * 
 * The encoder produces the same output as the Sun one except that the Sun's
 * encoder appends a trailing line separator if the last character isn't a pad.
 * Unclear why but it only adds to the length and is probably a side effect.
 * Both are in conformance with RFC 2045 though.<br>
 * Commons codec seem to always att a trailing line separator.<br>
 * <br>
 * 
 * <b>Note!</b> The encode/decode method pairs (types) come in three versions
 * with the <b>exact</b> same algorithm and thus a lot of code redundancy. This
 * is to not create any temporary arrays for transcoding to/from different
 * format types. The methods not used can simply be commented out.<br>
 * <br>
 * 
 * There is also a "fast" version of all decode methods that works the same way
 * as the normal ones, but har a few demands on the decoded input. Normally
 * though, these fast verions should be used if the source if the input is known
 * and it hasn't bee tampered with.<br>
 * <br>
 * 
 * If you find the code useful or you find a bug, please send me a note at
 * base64 @ miginfocom . com.
 * 
 * Licence (BSD): ==============
 * 
 * Copyright (c) 2004, Mikael Grev, MiG InfoCom AB. (base64 @ miginfocom . com)
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer. Redistributions in binary
 * form must reproduce the above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or other materials provided
 * with the distribution. Neither the name of the MiG InfoCom AB nor the names
 * of its contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * @version 2.2
 * @author Mikael Grev Date: 2004-aug-02 Time: 11:31:11
 *
 * @author Jeff Plourde
 *
  **************************************************************************************** * char[] version *****************************************************************************************
     * Encodes a raw byte array into a BASE64 <code>char[]</code> representation
     * i accordance with RFC 2045.
     * 
     * @param sArr
     *            The bytes to convert. If <code>null</code> or length 0 an
     *            empty array will be returned.
     * @param lineSep
     *            Optional "\r\n" after 76 characters, unless end of file.<br>
     *            No line separator will be in breach of RFC 2045 which
     *            specifies max 76 per line but will be a little faster.
     * @return A BASE64 encoded array. Never <code>null</code>.
      Check special case Length of even 24-bits. Returned character count Length of returned array Encode even 24-bits Copy next three bytes into lower 24 bits of int, paying attension to sign. Encode the int into four chars Add optional line separator Pad and encode last bits if source isn't even 24 bits. 0 - 2. Prepare the int Set last four chars*
     * Decodes a BASE64 encoded char array. All illegal characters will be
     * ignored and can handle both arrays with and without line separators.
     * 
     * @param sArr
     *            The source array. <code>null</code> or length 0 will return an
     *            empty array.
     * @return The decoded array of bytes. May be of length 0. Will be
     *         <code>null</code> if the legal characters (including '=') isn't
     *         divideable by 4. (I.e. definitely corrupted).
      Check special case Count illegal characters (including '\r', '\n') to know what size the returned array will be, so we don't have to reallocate & copy it later. Number of separator characters. (Actually illegal characters, but that's a bonus...) If input is "pure" (I.e. no line separators or illegal chars) base64 this loop can be commented out. Check so that legal chars (including '=') are evenly divideable by 4 as specified in RFC 2045. Preallocate byte[] of exact length Assemble three bytes into an int from four "valid" characters. j only increased if a valid char was found. Add the bytes*
     * Decodes a BASE64 encoded char array that is known to be resonably well
     * formatted. The method is about twice as fast as {@link #decode(char[])}.
     * The preconditions are:<br>
     * + The array must have a line length of 76 chars OR no line separators at
     * all (one line).<br>
     * + Line separator must be "\r\n", as specified in RFC 2045 + The array
     * must not contain illegal characters within the encoded string<br>
     * + The array CAN have illegal characters at the beginning and end, those
     * will be dealt with appropriately.<br>
     * 
     * @param sArr
     *            The source array. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0.
      Check special case Start and end index after trimming. Trim illegal chars from start Trim illegal chars from end get the padding count (=) (0, 1 or 2) Count '=' at end. Content count including possible separators The number of decoded bytes Preallocate byte[] of exact length Decode all but the last 0 - 2 bytes. Assemble three bytes into an int from four "valid" characters. Add the bytes If line separator, jump over it. Decode last 1-3 bytes (incl '=') into 1-3 bytes **************************************************************************************** * byte[] version *****************************************************************************************
     * Encodes a raw byte array into a BASE64 <code>byte[]</code> representation
     * i accordance with RFC 2045.
     * 
     * @param sArr
     *            The bytes to convert. If <code>null</code> or length 0 an
     *            empty array will be returned.
     * @param lineSep
     *            Optional "\r\n" after 76 characters, unless end of file.<br>
     *            No line separator will be in breach of RFC 2045 which
     *            specifies max 76 per line but will be a little faster.
     * @return A BASE64 encoded array. Never <code>null</code>.
      Check special case Length of even 24-bits. Returned character count Length of returned array Encode even 24-bits Copy next three bytes into lower 24 bits of int, paying attension to sign. Encode the int into four chars Add optional line separator Pad and encode last bits if source isn't an even 24 bits. 0 - 2. Prepare the int Set last four chars*
     * Decodes a BASE64 encoded byte array. All illegal characters will be
     * ignored and can handle both arrays with and without line separators.
     * 
     * @param sArr
     *            The source array. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0. Will be
     *         <code>null</code> if the legal characters (including '=') isn't
     *         divideable by 4. (I.e. definitely corrupted).
      Check special case Count illegal characters (including '\r', '\n') to know what size the returned array will be, so we don't have to reallocate & copy it later. Number of separator characters. (Actually illegal characters, but that's a bonus...) If input is "pure" (I.e. no line separators or illegal chars) base64 this loop can be commented out. Check so that legal chars (including '=') are evenly divideable by 4 as specified in RFC 2045. Preallocate byte[] of exact length Assemble three bytes into an int from four "valid" characters. j only increased if a valid char was found. Add the bytes*
     * Decodes a BASE64 encoded byte array that is known to be resonably well
     * formatted. The method is about twice as fast as {@link #decode(byte[])}.
     * The preconditions are:<br>
     * + The array must have a line length of 76 chars OR no line separators at
     * all (one line).<br>
     * + Line separator must be "\r\n", as specified in RFC 2045 + The array
     * must not contain illegal characters within the encoded string<br>
     * + The array CAN have illegal characters at the beginning and end, those
     * will be dealt with appropriately.<br>
     * 
     * @param sArr
     *            The source array. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0.
      Check special case Start and end index after trimming. Trim illegal chars from start Trim illegal chars from end get the padding count (=) (0, 1 or 2) Count '=' at end. Content count including possible separators The number of decoded bytes Preallocate byte[] of exact length Decode all but the last 0 - 2 bytes. Assemble three bytes into an int from four "valid" characters. Add the bytes If line separator, jump over it. Decode last 1-3 bytes (incl '=') into 1-3 bytes **************************************************************************************** * String version *****************************************************************************************
     * Encodes a raw byte array into a BASE64 <code>String</code> representation
     * i accordance with RFC 2045.
     * 
     * @param sArr
     *            The bytes to convert. If <code>null</code> or length 0 an
     *            empty array will be returned.
     * @param lineSep
     *            Optional "\r\n" after 76 characters, unless end of file.<br>
     *            No line separator will be in breach of RFC 2045 which
     *            specifies max 76 per line but will be a little faster.
     * @return A BASE64 encoded array. Never <code>null</code>.
      Reuse char[] since we can't create a String incrementally anyway and StringBuffer/Builder would be slower.*
     * Decodes a BASE64 encoded <code>String</code>. All illegal characters will
     * be ignored and can handle both strings with and without line separators.<br>
     * <b>Note!</b> It can be up to about 2x the speed to call
     * <code>decode(str.toCharArray())</code> instead. That will create a
     * temporary array though. This version will use <code>str.charAt(i)</code>
     * to iterate the string.
     * 
     * @param str
     *            The source string. <code>null</code> or length 0 will return
     *            an empty array.
     * @return The decoded array of bytes. May be of length 0. Will be
     *         <code>null</code> if the legal characters (including '=') isn't
     *         divideable by 4. (I.e. definitely corrupted).
      Check special case Count illegal characters (including '\r', '\n') to know what size the returned array will be, so we don't have to reallocate & copy it later. Number of separator characters. (Actually illegal characters, but that's a bonus...) If input is "pure" (I.e. no line separators or illegal chars) base64 this loop can be commented out. Check so that legal chars (including '=') are evenly divideable by 4 as specified in RFC 2045. Count '=' at end Preallocate byte[] of exact length Assemble three bytes into an int from four "valid" characters. j only increased if a valid char was found. Add the bytes*
     * Decodes a BASE64 encoded string that is known to be resonably well
     * formatted. The method is about twice as fast as {@link #decode(String)}.
     * The preconditions are:<br>
     * + The array must have a line length of 76 chars OR no line separators at
     * all (one line).<br>
     * + Line separator must be "\r\n", as specified in RFC 2045 + The array
     * must not contain illegal characters within the encoded string<br>
     * + The array CAN have illegal characters at the beginning and end, those
     * will be dealt with appropriately.<br>
     * 
     * @param s
     *            The source string. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0.
      Check special case Start and end index after trimming. Trim illegal chars from start Trim illegal chars from end get the padding count (=) (0, 1 or 2) Count '=' at end. Content count including possible separators The number of decoded bytes Preallocate byte[] of exact length Decode all but the last 0 - 2 bytes. Assemble three bytes into an int from four "valid" characters. Add the bytes If line separator, jump over it. Decode last 1-3 bytes (incl '=') into 1-3 bytes******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * A very fast and memory efficient class to encode and decode to and from
 * BASE64 in full accordance with RFC 2045.<br>
 * <br>
 * On Windows XP sp1 with 1.4.2_04 and later ;), this encoder and decoder is
 * about 10 times faster on small arrays (10 - 1000 bytes) and 2-3 times as fast
 * on larger arrays (10000 - 1000000 bytes) compared to
 * <code>sun.misc.Encoder()/Decoder()</code>.<br>
 * <br>
 * 
 * On byte arrays the encoder is about 20% faster than Jakarta Commons Base64
 * Codec for encode and about 50% faster for decoding large arrays. This
 * implementation is about twice as fast on very small arrays (&lt 30 bytes). If
 * source/destination is a <code>String</code> this version is about three times
 * as fast due to the fact that the Commons Codec result has to be recoded to a
 * <code>String</code> from <code>byte[]</code>, which is very expensive.<br>
 * <br>
 * 
 * This encode/decode algorithm doesn't create any temporary arrays as many
 * other codecs do, it only allocates the resulting array. This produces less
 * garbage and it is possible to handle arrays twice as large as algorithms that
 * create a temporary array. (E.g. Jakarta Commons Codec). It is unknown whether
 * Sun's <code>sun.misc.Encoder()/Decoder()</code> produce temporary arrays but
 * since performance is quite low it probably does.<br>
 * <br>
 * 
 * The encoder produces the same output as the Sun one except that the Sun's
 * encoder appends a trailing line separator if the last character isn't a pad.
 * Unclear why but it only adds to the length and is probably a side effect.
 * Both are in conformance with RFC 2045 though.<br>
 * Commons codec seem to always att a trailing line separator.<br>
 * <br>
 * 
 * <b>Note!</b> The encode/decode method pairs (types) come in three versions
 * with the <b>exact</b> same algorithm and thus a lot of code redundancy. This
 * is to not create any temporary arrays for transcoding to/from different
 * format types. The methods not used can simply be commented out.<br>
 * <br>
 * 
 * There is also a "fast" version of all decode methods that works the same way
 * as the normal ones, but har a few demands on the decoded input. Normally
 * though, these fast verions should be used if the source if the input is known
 * and it hasn't bee tampered with.<br>
 * <br>
 * 
 * If you find the code useful or you find a bug, please send me a note at
 * base64 @ miginfocom . com.
 * 
 * Licence (BSD): ==============
 * 
 * Copyright (c) 2004, Mikael Grev, MiG InfoCom AB. (base64 @ miginfocom . com)
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer. Redistributions in binary
 * form must reproduce the above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or other materials provided
 * with the distribution. Neither the name of the MiG InfoCom AB nor the names
 * of its contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * @version 2.2
 * @author Mikael Grev Date: 2004-aug-02 Time: 11:31:11
 *
 * @author Jeff Plourde
 *
  **************************************************************************************** * char[] version *****************************************************************************************
     * Encodes a raw byte array into a BASE64 <code>char[]</code> representation
     * i accordance with RFC 2045.
     * 
     * @param sArr
     *            The bytes to convert. If <code>null</code> or length 0 an
     *            empty array will be returned.
     * @param lineSep
     *            Optional "\r\n" after 76 characters, unless end of file.<br>
     *            No line separator will be in breach of RFC 2045 which
     *            specifies max 76 per line but will be a little faster.
     * @return A BASE64 encoded array. Never <code>null</code>.
      Check special case Length of even 24-bits. Returned character count Length of returned array Encode even 24-bits Copy next three bytes into lower 24 bits of int, paying attension to sign. Encode the int into four chars Add optional line separator Pad and encode last bits if source isn't even 24 bits. 0 - 2. Prepare the int Set last four chars*
     * Decodes a BASE64 encoded char array. All illegal characters will be
     * ignored and can handle both arrays with and without line separators.
     * 
     * @param sArr
     *            The source array. <code>null</code> or length 0 will return an
     *            empty array.
     * @return The decoded array of bytes. May be of length 0. Will be
     *         <code>null</code> if the legal characters (including '=') isn't
     *         divideable by 4. (I.e. definitely corrupted).
      Check special case Count illegal characters (including '\r', '\n') to know what size the returned array will be, so we don't have to reallocate & copy it later. Number of separator characters. (Actually illegal characters, but that's a bonus...) If input is "pure" (I.e. no line separators or illegal chars) base64 this loop can be commented out. Check so that legal chars (including '=') are evenly divideable by 4 as specified in RFC 2045. Preallocate byte[] of exact length Assemble three bytes into an int from four "valid" characters. j only increased if a valid char was found. Add the bytes*
     * Decodes a BASE64 encoded char array that is known to be resonably well
     * formatted. The method is about twice as fast as {@link #decode(char[])}.
     * The preconditions are:<br>
     * + The array must have a line length of 76 chars OR no line separators at
     * all (one line).<br>
     * + Line separator must be "\r\n", as specified in RFC 2045 + The array
     * must not contain illegal characters within the encoded string<br>
     * + The array CAN have illegal characters at the beginning and end, those
     * will be dealt with appropriately.<br>
     * 
     * @param sArr
     *            The source array. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0.
      Check special case Start and end index after trimming. Trim illegal chars from start Trim illegal chars from end get the padding count (=) (0, 1 or 2) Count '=' at end. Content count including possible separators The number of decoded bytes Preallocate byte[] of exact length Decode all but the last 0 - 2 bytes. Assemble three bytes into an int from four "valid" characters. Add the bytes If line separator, jump over it. Decode last 1-3 bytes (incl '=') into 1-3 bytes **************************************************************************************** * byte[] version *****************************************************************************************
     * Encodes a raw byte array into a BASE64 <code>byte[]</code> representation
     * i accordance with RFC 2045.
     * 
     * @param sArr
     *            The bytes to convert. If <code>null</code> or length 0 an
     *            empty array will be returned.
     * @param lineSep
     *            Optional "\r\n" after 76 characters, unless end of file.<br>
     *            No line separator will be in breach of RFC 2045 which
     *            specifies max 76 per line but will be a little faster.
     * @return A BASE64 encoded array. Never <code>null</code>.
      Check special case Length of even 24-bits. Returned character count Length of returned array Encode even 24-bits Copy next three bytes into lower 24 bits of int, paying attension to sign. Encode the int into four chars Add optional line separator Pad and encode last bits if source isn't an even 24 bits. 0 - 2. Prepare the int Set last four chars*
     * Decodes a BASE64 encoded byte array. All illegal characters will be
     * ignored and can handle both arrays with and without line separators.
     * 
     * @param sArr
     *            The source array. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0. Will be
     *         <code>null</code> if the legal characters (including '=') isn't
     *         divideable by 4. (I.e. definitely corrupted).
      Check special case Count illegal characters (including '\r', '\n') to know what size the returned array will be, so we don't have to reallocate & copy it later. Number of separator characters. (Actually illegal characters, but that's a bonus...) If input is "pure" (I.e. no line separators or illegal chars) base64 this loop can be commented out. Check so that legal chars (including '=') are evenly divideable by 4 as specified in RFC 2045. Preallocate byte[] of exact length Assemble three bytes into an int from four "valid" characters. j only increased if a valid char was found. Add the bytes*
     * Decodes a BASE64 encoded byte array that is known to be resonably well
     * formatted. The method is about twice as fast as {@link #decode(byte[])}.
     * The preconditions are:<br>
     * + The array must have a line length of 76 chars OR no line separators at
     * all (one line).<br>
     * + Line separator must be "\r\n", as specified in RFC 2045 + The array
     * must not contain illegal characters within the encoded string<br>
     * + The array CAN have illegal characters at the beginning and end, those
     * will be dealt with appropriately.<br>
     * 
     * @param sArr
     *            The source array. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0.
      Check special case Start and end index after trimming. Trim illegal chars from start Trim illegal chars from end get the padding count (=) (0, 1 or 2) Count '=' at end. Content count including possible separators The number of decoded bytes Preallocate byte[] of exact length Decode all but the last 0 - 2 bytes. Assemble three bytes into an int from four "valid" characters. Add the bytes If line separator, jump over it. Decode last 1-3 bytes (incl '=') into 1-3 bytes **************************************************************************************** * String version *****************************************************************************************
     * Encodes a raw byte array into a BASE64 <code>String</code> representation
     * i accordance with RFC 2045.
     * 
     * @param sArr
     *            The bytes to convert. If <code>null</code> or length 0 an
     *            empty array will be returned.
     * @param lineSep
     *            Optional "\r\n" after 76 characters, unless end of file.<br>
     *            No line separator will be in breach of RFC 2045 which
     *            specifies max 76 per line but will be a little faster.
     * @return A BASE64 encoded array. Never <code>null</code>.
      Reuse char[] since we can't create a String incrementally anyway and StringBuffer/Builder would be slower.*
     * Decodes a BASE64 encoded <code>String</code>. All illegal characters will
     * be ignored and can handle both strings with and without line separators.<br>
     * <b>Note!</b> It can be up to about 2x the speed to call
     * <code>decode(str.toCharArray())</code> instead. That will create a
     * temporary array though. This version will use <code>str.charAt(i)</code>
     * to iterate the string.
     * 
     * @param str
     *            The source string. <code>null</code> or length 0 will return
     *            an empty array.
     * @return The decoded array of bytes. May be of length 0. Will be
     *         <code>null</code> if the legal characters (including '=') isn't
     *         divideable by 4. (I.e. definitely corrupted).
      Check special case Count illegal characters (including '\r', '\n') to know what size the returned array will be, so we don't have to reallocate & copy it later. Number of separator characters. (Actually illegal characters, but that's a bonus...) If input is "pure" (I.e. no line separators or illegal chars) base64 this loop can be commented out. Check so that legal chars (including '=') are evenly divideable by 4 as specified in RFC 2045. Count '=' at end Preallocate byte[] of exact length Assemble three bytes into an int from four "valid" characters. j only increased if a valid char was found. Add the bytes*
     * Decodes a BASE64 encoded string that is known to be resonably well
     * formatted. The method is about twice as fast as {@link #decode(String)}.
     * The preconditions are:<br>
     * + The array must have a line length of 76 chars OR no line separators at
     * all (one line).<br>
     * + Line separator must be "\r\n", as specified in RFC 2045 + The array
     * must not contain illegal characters within the encoded string<br>
     * + The array CAN have illegal characters at the beginning and end, those
     * will be dealt with appropriately.<br>
     * 
     * @param s
     *            The source string. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0.
      Check special case Start and end index after trimming. Trim illegal chars from start Trim illegal chars from end get the padding count (=) (0, 1 or 2) Count '=' at end. Content count including possible separators The number of decoded bytes Preallocate byte[] of exact length Decode all but the last 0 - 2 bytes. Assemble three bytes into an int from four "valid" characters. Add the bytes If line separator, jump over it. Decode last 1-3 bytes (incl '=') into 1-3 bytes******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * A very fast and memory efficient class to encode and decode to and from
 * BASE64 in full accordance with RFC 2045.<br>
 * <br>
 * On Windows XP sp1 with 1.4.2_04 and later ;), this encoder and decoder is
 * about 10 times faster on small arrays (10 - 1000 bytes) and 2-3 times as fast
 * on larger arrays (10000 - 1000000 bytes) compared to
 * <code>sun.misc.Encoder()/Decoder()</code>.<br>
 * <br>
 * 
 * On byte arrays the encoder is about 20% faster than Jakarta Commons Base64
 * Codec for encode and about 50% faster for decoding large arrays. This
 * implementation is about twice as fast on very small arrays (&lt 30 bytes). If
 * source/destination is a <code>String</code> this version is about three times
 * as fast due to the fact that the Commons Codec result has to be recoded to a
 * <code>String</code> from <code>byte[]</code>, which is very expensive.<br>
 * <br>
 * 
 * This encode/decode algorithm doesn't create any temporary arrays as many
 * other codecs do, it only allocates the resulting array. This produces less
 * garbage and it is possible to handle arrays twice as large as algorithms that
 * create a temporary array. (E.g. Jakarta Commons Codec). It is unknown whether
 * Sun's <code>sun.misc.Encoder()/Decoder()</code> produce temporary arrays but
 * since performance is quite low it probably does.<br>
 * <br>
 * 
 * The encoder produces the same output as the Sun one except that the Sun's
 * encoder appends a trailing line separator if the last character isn't a pad.
 * Unclear why but it only adds to the length and is probably a side effect.
 * Both are in conformance with RFC 2045 though.<br>
 * Commons codec seem to always att a trailing line separator.<br>
 * <br>
 * 
 * <b>Note!</b> The encode/decode method pairs (types) come in three versions
 * with the <b>exact</b> same algorithm and thus a lot of code redundancy. This
 * is to not create any temporary arrays for transcoding to/from different
 * format types. The methods not used can simply be commented out.<br>
 * <br>
 * 
 * There is also a "fast" version of all decode methods that works the same way
 * as the normal ones, but har a few demands on the decoded input. Normally
 * though, these fast verions should be used if the source if the input is known
 * and it hasn't bee tampered with.<br>
 * <br>
 * 
 * If you find the code useful or you find a bug, please send me a note at
 * base64 @ miginfocom . com.
 * 
 * Licence (BSD): ==============
 * 
 * Copyright (c) 2004, Mikael Grev, MiG InfoCom AB. (base64 @ miginfocom . com)
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer. Redistributions in binary
 * form must reproduce the above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or other materials provided
 * with the distribution. Neither the name of the MiG InfoCom AB nor the names
 * of its contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * @version 2.2
 * @author Mikael Grev Date: 2004-aug-02 Time: 11:31:11
 *
 * @author Jeff Plourde
 *
  **************************************************************************************** * char[] version *****************************************************************************************
     * Encodes a raw byte array into a BASE64 <code>char[]</code> representation
     * i accordance with RFC 2045.
     * 
     * @param sArr
     *            The bytes to convert. If <code>null</code> or length 0 an
     *            empty array will be returned.
     * @param lineSep
     *            Optional "\r\n" after 76 characters, unless end of file.<br>
     *            No line separator will be in breach of RFC 2045 which
     *            specifies max 76 per line but will be a little faster.
     * @return A BASE64 encoded array. Never <code>null</code>.
      Check special case Length of even 24-bits. Returned character count Length of returned array Encode even 24-bits Copy next three bytes into lower 24 bits of int, paying attension to sign. Encode the int into four chars Add optional line separator Pad and encode last bits if source isn't even 24 bits. 0 - 2. Prepare the int Set last four chars*
     * Decodes a BASE64 encoded char array. All illegal characters will be
     * ignored and can handle both arrays with and without line separators.
     * 
     * @param sArr
     *            The source array. <code>null</code> or length 0 will return an
     *            empty array.
     * @return The decoded array of bytes. May be of length 0. Will be
     *         <code>null</code> if the legal characters (including '=') isn't
     *         divideable by 4. (I.e. definitely corrupted).
      Check special case Count illegal characters (including '\r', '\n') to know what size the returned array will be, so we don't have to reallocate & copy it later. Number of separator characters. (Actually illegal characters, but that's a bonus...) If input is "pure" (I.e. no line separators or illegal chars) base64 this loop can be commented out. Check so that legal chars (including '=') are evenly divideable by 4 as specified in RFC 2045. Preallocate byte[] of exact length Assemble three bytes into an int from four "valid" characters. j only increased if a valid char was found. Add the bytes*
     * Decodes a BASE64 encoded char array that is known to be resonably well
     * formatted. The method is about twice as fast as {@link #decode(char[])}.
     * The preconditions are:<br>
     * + The array must have a line length of 76 chars OR no line separators at
     * all (one line).<br>
     * + Line separator must be "\r\n", as specified in RFC 2045 + The array
     * must not contain illegal characters within the encoded string<br>
     * + The array CAN have illegal characters at the beginning and end, those
     * will be dealt with appropriately.<br>
     * 
     * @param sArr
     *            The source array. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0.
      Check special case Start and end index after trimming. Trim illegal chars from start Trim illegal chars from end get the padding count (=) (0, 1 or 2) Count '=' at end. Content count including possible separators The number of decoded bytes Preallocate byte[] of exact length Decode all but the last 0 - 2 bytes. Assemble three bytes into an int from four "valid" characters. Add the bytes If line separator, jump over it. Decode last 1-3 bytes (incl '=') into 1-3 bytes **************************************************************************************** * byte[] version *****************************************************************************************
     * Encodes a raw byte array into a BASE64 <code>byte[]</code> representation
     * i accordance with RFC 2045.
     * 
     * @param sArr
     *            The bytes to convert. If <code>null</code> or length 0 an
     *            empty array will be returned.
     * @param lineSep
     *            Optional "\r\n" after 76 characters, unless end of file.<br>
     *            No line separator will be in breach of RFC 2045 which
     *            specifies max 76 per line but will be a little faster.
     * @return A BASE64 encoded array. Never <code>null</code>.
      Check special case Length of even 24-bits. Returned character count Length of returned array Encode even 24-bits Copy next three bytes into lower 24 bits of int, paying attension to sign. Encode the int into four chars Add optional line separator Pad and encode last bits if source isn't an even 24 bits. 0 - 2. Prepare the int Set last four chars*
     * Decodes a BASE64 encoded byte array. All illegal characters will be
     * ignored and can handle both arrays with and without line separators.
     * 
     * @param sArr
     *            The source array. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0. Will be
     *         <code>null</code> if the legal characters (including '=') isn't
     *         divideable by 4. (I.e. definitely corrupted).
      Check special case Count illegal characters (including '\r', '\n') to know what size the returned array will be, so we don't have to reallocate & copy it later. Number of separator characters. (Actually illegal characters, but that's a bonus...) If input is "pure" (I.e. no line separators or illegal chars) base64 this loop can be commented out. Check so that legal chars (including '=') are evenly divideable by 4 as specified in RFC 2045. Preallocate byte[] of exact length Assemble three bytes into an int from four "valid" characters. j only increased if a valid char was found. Add the bytes*
     * Decodes a BASE64 encoded byte array that is known to be resonably well
     * formatted. The method is about twice as fast as {@link #decode(byte[])}.
     * The preconditions are:<br>
     * + The array must have a line length of 76 chars OR no line separators at
     * all (one line).<br>
     * + Line separator must be "\r\n", as specified in RFC 2045 + The array
     * must not contain illegal characters within the encoded string<br>
     * + The array CAN have illegal characters at the beginning and end, those
     * will be dealt with appropriately.<br>
     * 
     * @param sArr
     *            The source array. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0.
      Check special case Start and end index after trimming. Trim illegal chars from start Trim illegal chars from end get the padding count (=) (0, 1 or 2) Count '=' at end. Content count including possible separators The number of decoded bytes Preallocate byte[] of exact length Decode all but the last 0 - 2 bytes. Assemble three bytes into an int from four "valid" characters. Add the bytes If line separator, jump over it. Decode last 1-3 bytes (incl '=') into 1-3 bytes **************************************************************************************** * String version *****************************************************************************************
     * Encodes a raw byte array into a BASE64 <code>String</code> representation
     * i accordance with RFC 2045.
     * 
     * @param sArr
     *            The bytes to convert. If <code>null</code> or length 0 an
     *            empty array will be returned.
     * @param lineSep
     *            Optional "\r\n" after 76 characters, unless end of file.<br>
     *            No line separator will be in breach of RFC 2045 which
     *            specifies max 76 per line but will be a little faster.
     * @return A BASE64 encoded array. Never <code>null</code>.
      Reuse char[] since we can't create a String incrementally anyway and StringBuffer/Builder would be slower.*
     * Decodes a BASE64 encoded <code>String</code>. All illegal characters will
     * be ignored and can handle both strings with and without line separators.<br>
     * <b>Note!</b> It can be up to about 2x the speed to call
     * <code>decode(str.toCharArray())</code> instead. That will create a
     * temporary array though. This version will use <code>str.charAt(i)</code>
     * to iterate the string.
     * 
     * @param str
     *            The source string. <code>null</code> or length 0 will return
     *            an empty array.
     * @return The decoded array of bytes. May be of length 0. Will be
     *         <code>null</code> if the legal characters (including '=') isn't
     *         divideable by 4. (I.e. definitely corrupted).
      Check special case Count illegal characters (including '\r', '\n') to know what size the returned array will be, so we don't have to reallocate & copy it later. Number of separator characters. (Actually illegal characters, but that's a bonus...) If input is "pure" (I.e. no line separators or illegal chars) base64 this loop can be commented out. Check so that legal chars (including '=') are evenly divideable by 4 as specified in RFC 2045. Count '=' at end Preallocate byte[] of exact length Assemble three bytes into an int from four "valid" characters. j only increased if a valid char was found. Add the bytes*
     * Decodes a BASE64 encoded string that is known to be resonably well
     * formatted. The method is about twice as fast as {@link #decode(String)}.
     * The preconditions are:<br>
     * + The array must have a line length of 76 chars OR no line separators at
     * all (one line).<br>
     * + Line separator must be "\r\n", as specified in RFC 2045 + The array
     * must not contain illegal characters within the encoded string<br>
     * + The array CAN have illegal characters at the beginning and end, those
     * will be dealt with appropriately.<br>
     * 
     * @param s
     *            The source string. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0.
      Check special case Start and end index after trimming. Trim illegal chars from start Trim illegal chars from end get the padding count (=) (0, 1 or 2) Count '=' at end. Content count including possible separators The number of decoded bytes Preallocate byte[] of exact length Decode all but the last 0 - 2 bytes. Assemble three bytes into an int from four "valid" characters. Add the bytes If line separator, jump over it. Decode last 1-3 bytes (incl '=') into 1-3 bytes******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * A very fast and memory efficient class to encode and decode to and from
 * BASE64 in full accordance with RFC 2045.<br>
 * <br>
 * On Windows XP sp1 with 1.4.2_04 and later ;), this encoder and decoder is
 * about 10 times faster on small arrays (10 - 1000 bytes) and 2-3 times as fast
 * on larger arrays (10000 - 1000000 bytes) compared to
 * <code>sun.misc.Encoder()/Decoder()</code>.<br>
 * <br>
 * 
 * On byte arrays the encoder is about 20% faster than Jakarta Commons Base64
 * Codec for encode and about 50% faster for decoding large arrays. This
 * implementation is about twice as fast on very small arrays (&lt 30 bytes). If
 * source/destination is a <code>String</code> this version is about three times
 * as fast due to the fact that the Commons Codec result has to be recoded to a
 * <code>String</code> from <code>byte[]</code>, which is very expensive.<br>
 * <br>
 * 
 * This encode/decode algorithm doesn't create any temporary arrays as many
 * other codecs do, it only allocates the resulting array. This produces less
 * garbage and it is possible to handle arrays twice as large as algorithms that
 * create a temporary array. (E.g. Jakarta Commons Codec). It is unknown whether
 * Sun's <code>sun.misc.Encoder()/Decoder()</code> produce temporary arrays but
 * since performance is quite low it probably does.<br>
 * <br>
 * 
 * The encoder produces the same output as the Sun one except that the Sun's
 * encoder appends a trailing line separator if the last character isn't a pad.
 * Unclear why but it only adds to the length and is probably a side effect.
 * Both are in conformance with RFC 2045 though.<br>
 * Commons codec seem to always att a trailing line separator.<br>
 * <br>
 * 
 * <b>Note!</b> The encode/decode method pairs (types) come in three versions
 * with the <b>exact</b> same algorithm and thus a lot of code redundancy. This
 * is to not create any temporary arrays for transcoding to/from different
 * format types. The methods not used can simply be commented out.<br>
 * <br>
 * 
 * There is also a "fast" version of all decode methods that works the same way
 * as the normal ones, but har a few demands on the decoded input. Normally
 * though, these fast verions should be used if the source if the input is known
 * and it hasn't bee tampered with.<br>
 * <br>
 * 
 * If you find the code useful or you find a bug, please send me a note at
 * base64 @ miginfocom . com.
 * 
 * Licence (BSD): ==============
 * 
 * Copyright (c) 2004, Mikael Grev, MiG InfoCom AB. (base64 @ miginfocom . com)
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer. Redistributions in binary
 * form must reproduce the above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or other materials provided
 * with the distribution. Neither the name of the MiG InfoCom AB nor the names
 * of its contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * @version 2.2
 * @author Mikael Grev Date: 2004-aug-02 Time: 11:31:11
 *
 * @author Jeff Plourde
 *
  **************************************************************************************** * char[] version *****************************************************************************************
     * Encodes a raw byte array into a BASE64 <code>char[]</code> representation
     * i accordance with RFC 2045.
     * 
     * @param sArr
     *            The bytes to convert. If <code>null</code> or length 0 an
     *            empty array will be returned.
     * @param lineSep
     *            Optional "\r\n" after 76 characters, unless end of file.<br>
     *            No line separator will be in breach of RFC 2045 which
     *            specifies max 76 per line but will be a little faster.
     * @return A BASE64 encoded array. Never <code>null</code>.
      Check special case Length of even 24-bits. Returned character count Length of returned array Encode even 24-bits Copy next three bytes into lower 24 bits of int, paying attension to sign. Encode the int into four chars Add optional line separator Pad and encode last bits if source isn't even 24 bits. 0 - 2. Prepare the int Set last four chars*
     * Decodes a BASE64 encoded char array. All illegal characters will be
     * ignored and can handle both arrays with and without line separators.
     * 
     * @param sArr
     *            The source array. <code>null</code> or length 0 will return an
     *            empty array.
     * @return The decoded array of bytes. May be of length 0. Will be
     *         <code>null</code> if the legal characters (including '=') isn't
     *         divideable by 4. (I.e. definitely corrupted).
      Check special case Count illegal characters (including '\r', '\n') to know what size the returned array will be, so we don't have to reallocate & copy it later. Number of separator characters. (Actually illegal characters, but that's a bonus...) If input is "pure" (I.e. no line separators or illegal chars) base64 this loop can be commented out. Check so that legal chars (including '=') are evenly divideable by 4 as specified in RFC 2045. Preallocate byte[] of exact length Assemble three bytes into an int from four "valid" characters. j only increased if a valid char was found. Add the bytes*
     * Decodes a BASE64 encoded char array that is known to be resonably well
     * formatted. The method is about twice as fast as {@link #decode(char[])}.
     * The preconditions are:<br>
     * + The array must have a line length of 76 chars OR no line separators at
     * all (one line).<br>
     * + Line separator must be "\r\n", as specified in RFC 2045 + The array
     * must not contain illegal characters within the encoded string<br>
     * + The array CAN have illegal characters at the beginning and end, those
     * will be dealt with appropriately.<br>
     * 
     * @param sArr
     *            The source array. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0.
      Check special case Start and end index after trimming. Trim illegal chars from start Trim illegal chars from end get the padding count (=) (0, 1 or 2) Count '=' at end. Content count including possible separators The number of decoded bytes Preallocate byte[] of exact length Decode all but the last 0 - 2 bytes. Assemble three bytes into an int from four "valid" characters. Add the bytes If line separator, jump over it. Decode last 1-3 bytes (incl '=') into 1-3 bytes **************************************************************************************** * byte[] version *****************************************************************************************
     * Encodes a raw byte array into a BASE64 <code>byte[]</code> representation
     * i accordance with RFC 2045.
     * 
     * @param sArr
     *            The bytes to convert. If <code>null</code> or length 0 an
     *            empty array will be returned.
     * @param lineSep
     *            Optional "\r\n" after 76 characters, unless end of file.<br>
     *            No line separator will be in breach of RFC 2045 which
     *            specifies max 76 per line but will be a little faster.
     * @return A BASE64 encoded array. Never <code>null</code>.
      Check special case Length of even 24-bits. Returned character count Length of returned array Encode even 24-bits Copy next three bytes into lower 24 bits of int, paying attension to sign. Encode the int into four chars Add optional line separator Pad and encode last bits if source isn't an even 24 bits. 0 - 2. Prepare the int Set last four chars*
     * Decodes a BASE64 encoded byte array. All illegal characters will be
     * ignored and can handle both arrays with and without line separators.
     * 
     * @param sArr
     *            The source array. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0. Will be
     *         <code>null</code> if the legal characters (including '=') isn't
     *         divideable by 4. (I.e. definitely corrupted).
      Check special case Count illegal characters (including '\r', '\n') to know what size the returned array will be, so we don't have to reallocate & copy it later. Number of separator characters. (Actually illegal characters, but that's a bonus...) If input is "pure" (I.e. no line separators or illegal chars) base64 this loop can be commented out. Check so that legal chars (including '=') are evenly divideable by 4 as specified in RFC 2045. Preallocate byte[] of exact length Assemble three bytes into an int from four "valid" characters. j only increased if a valid char was found. Add the bytes*
     * Decodes a BASE64 encoded byte array that is known to be resonably well
     * formatted. The method is about twice as fast as {@link #decode(byte[])}.
     * The preconditions are:<br>
     * + The array must have a line length of 76 chars OR no line separators at
     * all (one line).<br>
     * + Line separator must be "\r\n", as specified in RFC 2045 + The array
     * must not contain illegal characters within the encoded string<br>
     * + The array CAN have illegal characters at the beginning and end, those
     * will be dealt with appropriately.<br>
     * 
     * @param sArr
     *            The source array. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0.
      Check special case Start and end index after trimming. Trim illegal chars from start Trim illegal chars from end get the padding count (=) (0, 1 or 2) Count '=' at end. Content count including possible separators The number of decoded bytes Preallocate byte[] of exact length Decode all but the last 0 - 2 bytes. Assemble three bytes into an int from four "valid" characters. Add the bytes If line separator, jump over it. Decode last 1-3 bytes (incl '=') into 1-3 bytes **************************************************************************************** * String version *****************************************************************************************
     * Encodes a raw byte array into a BASE64 <code>String</code> representation
     * i accordance with RFC 2045.
     * 
     * @param sArr
     *            The bytes to convert. If <code>null</code> or length 0 an
     *            empty array will be returned.
     * @param lineSep
     *            Optional "\r\n" after 76 characters, unless end of file.<br>
     *            No line separator will be in breach of RFC 2045 which
     *            specifies max 76 per line but will be a little faster.
     * @return A BASE64 encoded array. Never <code>null</code>.
      Reuse char[] since we can't create a String incrementally anyway and StringBuffer/Builder would be slower.*
     * Decodes a BASE64 encoded <code>String</code>. All illegal characters will
     * be ignored and can handle both strings with and without line separators.<br>
     * <b>Note!</b> It can be up to about 2x the speed to call
     * <code>decode(str.toCharArray())</code> instead. That will create a
     * temporary array though. This version will use <code>str.charAt(i)</code>
     * to iterate the string.
     * 
     * @param str
     *            The source string. <code>null</code> or length 0 will return
     *            an empty array.
     * @return The decoded array of bytes. May be of length 0. Will be
     *         <code>null</code> if the legal characters (including '=') isn't
     *         divideable by 4. (I.e. definitely corrupted).
      Check special case Count illegal characters (including '\r', '\n') to know what size the returned array will be, so we don't have to reallocate & copy it later. Number of separator characters. (Actually illegal characters, but that's a bonus...) If input is "pure" (I.e. no line separators or illegal chars) base64 this loop can be commented out. Check so that legal chars (including '=') are evenly divideable by 4 as specified in RFC 2045. Count '=' at end Preallocate byte[] of exact length Assemble three bytes into an int from four "valid" characters. j only increased if a valid char was found. Add the bytes*
     * Decodes a BASE64 encoded string that is known to be resonably well
     * formatted. The method is about twice as fast as {@link #decode(String)}.
     * The preconditions are:<br>
     * + The array must have a line length of 76 chars OR no line separators at
     * all (one line).<br>
     * + Line separator must be "\r\n", as specified in RFC 2045 + The array
     * must not contain illegal characters within the encoded string<br>
     * + The array CAN have illegal characters at the beginning and end, those
     * will be dealt with appropriately.<br>
     * 
     * @param s
     *            The source string. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0.
      Check special case Start and end index after trimming. Trim illegal chars from start Trim illegal chars from end get the padding count (=) (0, 1 or 2) Count '=' at end. Content count including possible separators The number of decoded bytes Preallocate byte[] of exact length Decode all but the last 0 - 2 bytes. Assemble three bytes into an int from four "valid" characters. Add the bytes If line separator, jump over it. Decode last 1-3 bytes (incl '=') into 1-3 bytes******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * A very fast and memory efficient class to encode and decode to and from
 * BASE64 in full accordance with RFC 2045.<br>
 * <br>
 * On Windows XP sp1 with 1.4.2_04 and later ;), this encoder and decoder is
 * about 10 times faster on small arrays (10 - 1000 bytes) and 2-3 times as fast
 * on larger arrays (10000 - 1000000 bytes) compared to
 * <code>sun.misc.Encoder()/Decoder()</code>.<br>
 * <br>
 * 
 * On byte arrays the encoder is about 20% faster than Jakarta Commons Base64
 * Codec for encode and about 50% faster for decoding large arrays. This
 * implementation is about twice as fast on very small arrays (&lt 30 bytes). If
 * source/destination is a <code>String</code> this version is about three times
 * as fast due to the fact that the Commons Codec result has to be recoded to a
 * <code>String</code> from <code>byte[]</code>, which is very expensive.<br>
 * <br>
 * 
 * This encode/decode algorithm doesn't create any temporary arrays as many
 * other codecs do, it only allocates the resulting array. This produces less
 * garbage and it is possible to handle arrays twice as large as algorithms that
 * create a temporary array. (E.g. Jakarta Commons Codec). It is unknown whether
 * Sun's <code>sun.misc.Encoder()/Decoder()</code> produce temporary arrays but
 * since performance is quite low it probably does.<br>
 * <br>
 * 
 * The encoder produces the same output as the Sun one except that the Sun's
 * encoder appends a trailing line separator if the last character isn't a pad.
 * Unclear why but it only adds to the length and is probably a side effect.
 * Both are in conformance with RFC 2045 though.<br>
 * Commons codec seem to always att a trailing line separator.<br>
 * <br>
 * 
 * <b>Note!</b> The encode/decode method pairs (types) come in three versions
 * with the <b>exact</b> same algorithm and thus a lot of code redundancy. This
 * is to not create any temporary arrays for transcoding to/from different
 * format types. The methods not used can simply be commented out.<br>
 * <br>
 * 
 * There is also a "fast" version of all decode methods that works the same way
 * as the normal ones, but har a few demands on the decoded input. Normally
 * though, these fast verions should be used if the source if the input is known
 * and it hasn't bee tampered with.<br>
 * <br>
 * 
 * If you find the code useful or you find a bug, please send me a note at
 * base64 @ miginfocom . com.
 * 
 * Licence (BSD): ==============
 * 
 * Copyright (c) 2004, Mikael Grev, MiG InfoCom AB. (base64 @ miginfocom . com)
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer. Redistributions in binary
 * form must reproduce the above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or other materials provided
 * with the distribution. Neither the name of the MiG InfoCom AB nor the names
 * of its contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * @version 2.2
 * @author Mikael Grev Date: 2004-aug-02 Time: 11:31:11
 *
 * @author Jeff Plourde
 *
  **************************************************************************************** * char[] version *****************************************************************************************
     * Encodes a raw byte array into a BASE64 <code>char[]</code> representation
     * i accordance with RFC 2045.
     * 
     * @param sArr
     *            The bytes to convert. If <code>null</code> or length 0 an
     *            empty array will be returned.
     * @param lineSep
     *            Optional "\r\n" after 76 characters, unless end of file.<br>
     *            No line separator will be in breach of RFC 2045 which
     *            specifies max 76 per line but will be a little faster.
     * @return A BASE64 encoded array. Never <code>null</code>.
      Check special case Length of even 24-bits. Returned character count Length of returned array Encode even 24-bits Copy next three bytes into lower 24 bits of int, paying attension to sign. Encode the int into four chars Add optional line separator Pad and encode last bits if source isn't even 24 bits. 0 - 2. Prepare the int Set last four chars*
     * Decodes a BASE64 encoded char array. All illegal characters will be
     * ignored and can handle both arrays with and without line separators.
     * 
     * @param sArr
     *            The source array. <code>null</code> or length 0 will return an
     *            empty array.
     * @return The decoded array of bytes. May be of length 0. Will be
     *         <code>null</code> if the legal characters (including '=') isn't
     *         divideable by 4. (I.e. definitely corrupted).
      Check special case Count illegal characters (including '\r', '\n') to know what size the returned array will be, so we don't have to reallocate & copy it later. Number of separator characters. (Actually illegal characters, but that's a bonus...) If input is "pure" (I.e. no line separators or illegal chars) base64 this loop can be commented out. Check so that legal chars (including '=') are evenly divideable by 4 as specified in RFC 2045. Preallocate byte[] of exact length Assemble three bytes into an int from four "valid" characters. j only increased if a valid char was found. Add the bytes*
     * Decodes a BASE64 encoded char array that is known to be resonably well
     * formatted. The method is about twice as fast as {@link #decode(char[])}.
     * The preconditions are:<br>
     * + The array must have a line length of 76 chars OR no line separators at
     * all (one line).<br>
     * + Line separator must be "\r\n", as specified in RFC 2045 + The array
     * must not contain illegal characters within the encoded string<br>
     * + The array CAN have illegal characters at the beginning and end, those
     * will be dealt with appropriately.<br>
     * 
     * @param sArr
     *            The source array. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0.
      Check special case Start and end index after trimming. Trim illegal chars from start Trim illegal chars from end get the padding count (=) (0, 1 or 2) Count '=' at end. Content count including possible separators The number of decoded bytes Preallocate byte[] of exact length Decode all but the last 0 - 2 bytes. Assemble three bytes into an int from four "valid" characters. Add the bytes If line separator, jump over it. Decode last 1-3 bytes (incl '=') into 1-3 bytes **************************************************************************************** * byte[] version *****************************************************************************************
     * Encodes a raw byte array into a BASE64 <code>byte[]</code> representation
     * i accordance with RFC 2045.
     * 
     * @param sArr
     *            The bytes to convert. If <code>null</code> or length 0 an
     *            empty array will be returned.
     * @param lineSep
     *            Optional "\r\n" after 76 characters, unless end of file.<br>
     *            No line separator will be in breach of RFC 2045 which
     *            specifies max 76 per line but will be a little faster.
     * @return A BASE64 encoded array. Never <code>null</code>.
      Check special case Length of even 24-bits. Returned character count Length of returned array Encode even 24-bits Copy next three bytes into lower 24 bits of int, paying attension to sign. Encode the int into four chars Add optional line separator Pad and encode last bits if source isn't an even 24 bits. 0 - 2. Prepare the int Set last four chars*
     * Decodes a BASE64 encoded byte array. All illegal characters will be
     * ignored and can handle both arrays with and without line separators.
     * 
     * @param sArr
     *            The source array. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0. Will be
     *         <code>null</code> if the legal characters (including '=') isn't
     *         divideable by 4. (I.e. definitely corrupted).
      Check special case Count illegal characters (including '\r', '\n') to know what size the returned array will be, so we don't have to reallocate & copy it later. Number of separator characters. (Actually illegal characters, but that's a bonus...) If input is "pure" (I.e. no line separators or illegal chars) base64 this loop can be commented out. Check so that legal chars (including '=') are evenly divideable by 4 as specified in RFC 2045. Preallocate byte[] of exact length Assemble three bytes into an int from four "valid" characters. j only increased if a valid char was found. Add the bytes*
     * Decodes a BASE64 encoded byte array that is known to be resonably well
     * formatted. The method is about twice as fast as {@link #decode(byte[])}.
     * The preconditions are:<br>
     * + The array must have a line length of 76 chars OR no line separators at
     * all (one line).<br>
     * + Line separator must be "\r\n", as specified in RFC 2045 + The array
     * must not contain illegal characters within the encoded string<br>
     * + The array CAN have illegal characters at the beginning and end, those
     * will be dealt with appropriately.<br>
     * 
     * @param sArr
     *            The source array. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0.
      Check special case Start and end index after trimming. Trim illegal chars from start Trim illegal chars from end get the padding count (=) (0, 1 or 2) Count '=' at end. Content count including possible separators The number of decoded bytes Preallocate byte[] of exact length Decode all but the last 0 - 2 bytes. Assemble three bytes into an int from four "valid" characters. Add the bytes If line separator, jump over it. Decode last 1-3 bytes (incl '=') into 1-3 bytes **************************************************************************************** * String version *****************************************************************************************
     * Encodes a raw byte array into a BASE64 <code>String</code> representation
     * i accordance with RFC 2045.
     * 
     * @param sArr
     *            The bytes to convert. If <code>null</code> or length 0 an
     *            empty array will be returned.
     * @param lineSep
     *            Optional "\r\n" after 76 characters, unless end of file.<br>
     *            No line separator will be in breach of RFC 2045 which
     *            specifies max 76 per line but will be a little faster.
     * @return A BASE64 encoded array. Never <code>null</code>.
      Reuse char[] since we can't create a String incrementally anyway and StringBuffer/Builder would be slower.*
     * Decodes a BASE64 encoded <code>String</code>. All illegal characters will
     * be ignored and can handle both strings with and without line separators.<br>
     * <b>Note!</b> It can be up to about 2x the speed to call
     * <code>decode(str.toCharArray())</code> instead. That will create a
     * temporary array though. This version will use <code>str.charAt(i)</code>
     * to iterate the string.
     * 
     * @param str
     *            The source string. <code>null</code> or length 0 will return
     *            an empty array.
     * @return The decoded array of bytes. May be of length 0. Will be
     *         <code>null</code> if the legal characters (including '=') isn't
     *         divideable by 4. (I.e. definitely corrupted).
      Check special case Count illegal characters (including '\r', '\n') to know what size the returned array will be, so we don't have to reallocate & copy it later. Number of separator characters. (Actually illegal characters, but that's a bonus...) If input is "pure" (I.e. no line separators or illegal chars) base64 this loop can be commented out. Check so that legal chars (including '=') are evenly divideable by 4 as specified in RFC 2045. Count '=' at end Preallocate byte[] of exact length Assemble three bytes into an int from four "valid" characters. j only increased if a valid char was found. Add the bytes*
     * Decodes a BASE64 encoded string that is known to be resonably well
     * formatted. The method is about twice as fast as {@link #decode(String)}.
     * The preconditions are:<br>
     * + The array must have a line length of 76 chars OR no line separators at
     * all (one line).<br>
     * + Line separator must be "\r\n", as specified in RFC 2045 + The array
     * must not contain illegal characters within the encoded string<br>
     * + The array CAN have illegal characters at the beginning and end, those
     * will be dealt with appropriately.<br>
     * 
     * @param s
     *            The source string. Length 0 will return an empty array.
     *            <code>null</code> will throw an exception.
     * @return The decoded array of bytes. May be of length 0.
      Check special case Start and end index after trimming. Trim illegal chars from start Trim illegal chars from end get the padding count (=) (0, 1 or 2) Count '=' at end. Content count including possible separators The number of decoded bytes Preallocate byte[] of exact length Decode all but the last 0 - 2 bytes. Assemble three bytes into an int from four "valid" characters. Add the bytes If line separator, jump over it. Decode last 1-3 bytes (incl '=') into 1-3 bytes