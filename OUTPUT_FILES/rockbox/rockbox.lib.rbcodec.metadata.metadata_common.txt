**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Dave Chapman
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Read a string from the file. Read up to size bytes, or, if eos != -1, 
 * until the eos character is found (eos is not stored in buf, unless it is
 * nil). Writes up to buf_size chars to buf, always terminating with a nil.
 * Returns number of chars read or -1 on read error.
  Read an unsigned 8-bit integer from a file.  Read an unsigned 16-bit integer from a big-endian file.  Read an unsigned 32-bit integer from a big-endian file.  Read an unsigned 64-bit integer from a big-endian file.  Read unsigned integers from a little-endian file.  Read an unaligned 64-bit little endian unsigned integer from buffer.  Read an unaligned 32-bit little endian long from buffer.  Read an unaligned 16-bit little endian short from buffer.  Read an unaligned 32-bit big endian long from buffer.  Read an unaligned 16-bit little endian short from buffer.  Read an unaligned 32-bit little endian long from buffer.  Skip an ID3v2 tag if it can be found. We assume the tag is located at the
 * start of the file, which should be true in all cases where we need to skip it.
 * Returns true if successfully skipped or not skipped, and false if
 * something went wrong while skipping.
  We have found an ID3v2 tag at the start of the file - find its
           length and then skip it.  Parse the tag (the name-value pair) and fill id3 and buffer accordingly.
 * String values to keep are written to buf. Returns number of bytes written
 * to buf (including end nil).
  Date's can be in any format in Vorbis. However most of them 
         * are in ISO8601 format so if we try and parse the first part
         * of the tag as a number, we should get the year. If we get crap,
         * then act like we never parsed it.
          yeah, not likely  Do not overwrite already available metadata. Especially when reading
     * tags with e.g. multiple genres / artists. This way only the first 
     * of multiple entries is used, all following are dropped.  Limit max. item size. **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Dave Chapman
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Read a string from the file. Read up to size bytes, or, if eos != -1, 
 * until the eos character is found (eos is not stored in buf, unless it is
 * nil). Writes up to buf_size chars to buf, always terminating with a nil.
 * Returns number of chars read or -1 on read error.
  Read an unsigned 8-bit integer from a file.  Read an unsigned 16-bit integer from a big-endian file.  Read an unsigned 32-bit integer from a big-endian file.  Read an unsigned 64-bit integer from a big-endian file.  Read unsigned integers from a little-endian file.  Read an unaligned 64-bit little endian unsigned integer from buffer.  Read an unaligned 32-bit little endian long from buffer.  Read an unaligned 16-bit little endian short from buffer.  Read an unaligned 32-bit big endian long from buffer.  Read an unaligned 16-bit little endian short from buffer.  Read an unaligned 32-bit little endian long from buffer.  Skip an ID3v2 tag if it can be found. We assume the tag is located at the
 * start of the file, which should be true in all cases where we need to skip it.
 * Returns true if successfully skipped or not skipped, and false if
 * something went wrong while skipping.
  We have found an ID3v2 tag at the start of the file - find its
           length and then skip it.  Parse the tag (the name-value pair) and fill id3 and buffer accordingly.
 * String values to keep are written to buf. Returns number of bytes written
 * to buf (including end nil).
  Date's can be in any format in Vorbis. However most of them 
         * are in ISO8601 format so if we try and parse the first part
         * of the tag as a number, we should get the year. If we get crap,
         * then act like we never parsed it.
          yeah, not likely  Do not overwrite already available metadata. Especially when reading
     * tags with e.g. multiple genres / artists. This way only the first 
     * of multiple entries is used, all following are dropped.  Limit max. item size. **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Dave Chapman
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Read a string from the file. Read up to size bytes, or, if eos != -1, 
 * until the eos character is found (eos is not stored in buf, unless it is
 * nil). Writes up to buf_size chars to buf, always terminating with a nil.
 * Returns number of chars read or -1 on read error.
  Read an unsigned 8-bit integer from a file.  Read an unsigned 16-bit integer from a big-endian file.  Read an unsigned 32-bit integer from a big-endian file.  Read an unsigned 64-bit integer from a big-endian file.  Read unsigned integers from a little-endian file.  Read an unaligned 64-bit little endian unsigned integer from buffer.  Read an unaligned 32-bit little endian long from buffer.  Read an unaligned 16-bit little endian short from buffer.  Read an unaligned 32-bit big endian long from buffer.  Read an unaligned 16-bit little endian short from buffer.  Read an unaligned 32-bit little endian long from buffer.  Skip an ID3v2 tag if it can be found. We assume the tag is located at the
 * start of the file, which should be true in all cases where we need to skip it.
 * Returns true if successfully skipped or not skipped, and false if
 * something went wrong while skipping.
  We have found an ID3v2 tag at the start of the file - find its
           length and then skip it.  Parse the tag (the name-value pair) and fill id3 and buffer accordingly.
 * String values to keep are written to buf. Returns number of bytes written
 * to buf (including end nil).
  Date's can be in any format in Vorbis. However most of them 
         * are in ISO8601 format so if we try and parse the first part
         * of the tag as a number, we should get the year. If we get crap,
         * then act like we never parsed it.
          yeah, not likely  Do not overwrite already available metadata. Especially when reading
     * tags with e.g. multiple genres / artists. This way only the first 
     * of multiple entries is used, all following are dropped.  Limit max. item size. 