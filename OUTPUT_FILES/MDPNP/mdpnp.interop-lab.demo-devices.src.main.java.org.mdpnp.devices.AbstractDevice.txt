******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ***************************************************************************** TODO this is a good idea but the threadgroup gets destroyed when the last thread finishes    static    {        threadGroup.setDaemon(true);    }Because this is executing once per second, including the stack trace wouldcause a very large log file. For convenience For convenience For convenience Call this now so that resolution of instance registration timestamp is reducedIf we look at fill() we can see that it adds floats to the array.
				 * This is not necessarily the best way of serialising floats - if it turns out to be too big of
				 * a performance hit, we can check out alternatives like 
				 * https://www.factual.com/blog/the-flotsam-project-insanely-fast-floating-point-number-serialization-for-java-and-javascript/
				 * and
				 * https://github.com/RuedigerMoeller/fast-serialization
				 Because this is executing once per second, including the stack trace wouldcause a very large log file. TODO there is nothing preventing inheritors from interacting with these objects as (and after) they are destroyed. TODO there isn't a coherent way to dispose of the instances an inheritor may have registered... perhaps they should be responsible in their override of shutdown? TODO Where a participant is shared it is not safe to unregister types        ice.LocalAlarmLimitObjectiveTypeSupport.unregister_type(domainParticipant, ice.LocalAlarmLimitObjectiveTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        ice.AlarmLimitTypeSupport.unregister_type(domainParticipant, ice.AlarmLimitTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        SampleArrayTypeSupport.unregister_type(domainParticipant, SampleArrayTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        NumericTypeSupport.unregister_type(domainParticipant, NumericTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        DeviceIdentityTypeSupport.unregister_type(domainParticipant, DeviceIdentityTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        ice.DeviceAlertConditionTypeSupport.unregister_type(domainParticipant, ice.DeviceAlertConditionTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        ice.AlertTypeSupport.unregister_type(domainParticipant, ice.AlertTypeSupport.get_type_name());*
     * post-construction initialization method to allow implementations to
     * initialize/start whatever sub-components they manage. Ideally, for
     * more sophisticated devices everything complex should be moved out and
     * assembled via 'spring' ioc composition, but there are plenty of cases
     * in the middle where this is appropriate. This would be spring's
     * InitializingBean::afterPropertiesSet lifecycle pointcut.
     *
     * @return an instance of the device clock that should be used in stamping messages. Fall-back implementation
     * will supply dds time. If device maintains its own notion of the clock, it could use DeviceClock.ComboClock wrapper
     * to provide clock reading that would contain multiple values.
     * TODO 1-Oct-2013 JP This call to get_key_value fails consistently on ARM platforms so I'm tracking instances externally for the time being alarmSettingsObjectiveReader.get_key_value(obj, si.instance_handle);******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ***************************************************************************** TODO this is a good idea but the threadgroup gets destroyed when the last thread finishes    static    {        threadGroup.setDaemon(true);    }Because this is executing once per second, including the stack trace wouldcause a very large log file. For convenience For convenience For convenience Call this now so that resolution of instance registration timestamp is reducedIf we look at fill() we can see that it adds floats to the array.
				 * This is not necessarily the best way of serialising floats - if it turns out to be too big of
				 * a performance hit, we can check out alternatives like 
				 * https://www.factual.com/blog/the-flotsam-project-insanely-fast-floating-point-number-serialization-for-java-and-javascript/
				 * and
				 * https://github.com/RuedigerMoeller/fast-serialization
				 Because this is executing once per second, including the stack trace wouldcause a very large log file. TODO there is nothing preventing inheritors from interacting with these objects as (and after) they are destroyed. TODO there isn't a coherent way to dispose of the instances an inheritor may have registered... perhaps they should be responsible in their override of shutdown? TODO Where a participant is shared it is not safe to unregister types        ice.LocalAlarmLimitObjectiveTypeSupport.unregister_type(domainParticipant, ice.LocalAlarmLimitObjectiveTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        ice.AlarmLimitTypeSupport.unregister_type(domainParticipant, ice.AlarmLimitTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        SampleArrayTypeSupport.unregister_type(domainParticipant, SampleArrayTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        NumericTypeSupport.unregister_type(domainParticipant, NumericTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        DeviceIdentityTypeSupport.unregister_type(domainParticipant, DeviceIdentityTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        ice.DeviceAlertConditionTypeSupport.unregister_type(domainParticipant, ice.DeviceAlertConditionTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        ice.AlertTypeSupport.unregister_type(domainParticipant, ice.AlertTypeSupport.get_type_name());*
     * post-construction initialization method to allow implementations to
     * initialize/start whatever sub-components they manage. Ideally, for
     * more sophisticated devices everything complex should be moved out and
     * assembled via 'spring' ioc composition, but there are plenty of cases
     * in the middle where this is appropriate. This would be spring's
     * InitializingBean::afterPropertiesSet lifecycle pointcut.
     *
     * @return an instance of the device clock that should be used in stamping messages. Fall-back implementation
     * will supply dds time. If device maintains its own notion of the clock, it could use DeviceClock.ComboClock wrapper
     * to provide clock reading that would contain multiple values.
     * TODO 1-Oct-2013 JP This call to get_key_value fails consistently on ARM platforms so I'm tracking instances externally for the time being alarmSettingsObjectiveReader.get_key_value(obj, si.instance_handle);******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ***************************************************************************** TODO this is a good idea but the threadgroup gets destroyed when the last thread finishes    static    {        threadGroup.setDaemon(true);    }Because this is executing once per second, including the stack trace wouldcause a very large log file. For convenience For convenience For convenience Call this now so that resolution of instance registration timestamp is reducedIf we look at fill() we can see that it adds floats to the array.
				 * This is not necessarily the best way of serialising floats - if it turns out to be too big of
				 * a performance hit, we can check out alternatives like 
				 * https://www.factual.com/blog/the-flotsam-project-insanely-fast-floating-point-number-serialization-for-java-and-javascript/
				 * and
				 * https://github.com/RuedigerMoeller/fast-serialization
				 Because this is executing once per second, including the stack trace wouldcause a very large log file. TODO there is nothing preventing inheritors from interacting with these objects as (and after) they are destroyed. TODO there isn't a coherent way to dispose of the instances an inheritor may have registered... perhaps they should be responsible in their override of shutdown? TODO Where a participant is shared it is not safe to unregister types        ice.LocalAlarmLimitObjectiveTypeSupport.unregister_type(domainParticipant, ice.LocalAlarmLimitObjectiveTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        ice.AlarmLimitTypeSupport.unregister_type(domainParticipant, ice.AlarmLimitTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        SampleArrayTypeSupport.unregister_type(domainParticipant, SampleArrayTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        NumericTypeSupport.unregister_type(domainParticipant, NumericTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        DeviceIdentityTypeSupport.unregister_type(domainParticipant, DeviceIdentityTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        ice.DeviceAlertConditionTypeSupport.unregister_type(domainParticipant, ice.DeviceAlertConditionTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        ice.AlertTypeSupport.unregister_type(domainParticipant, ice.AlertTypeSupport.get_type_name());*
     * post-construction initialization method to allow implementations to
     * initialize/start whatever sub-components they manage. Ideally, for
     * more sophisticated devices everything complex should be moved out and
     * assembled via 'spring' ioc composition, but there are plenty of cases
     * in the middle where this is appropriate. This would be spring's
     * InitializingBean::afterPropertiesSet lifecycle pointcut.
     *
     * @return an instance of the device clock that should be used in stamping messages. Fall-back implementation
     * will supply dds time. If device maintains its own notion of the clock, it could use DeviceClock.ComboClock wrapper
     * to provide clock reading that would contain multiple values.
     * TODO 1-Oct-2013 JP This call to get_key_value fails consistently on ARM platforms so I'm tracking instances externally for the time being alarmSettingsObjectiveReader.get_key_value(obj, si.instance_handle);******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ***************************************************************************** TODO this is a good idea but the threadgroup gets destroyed when the last thread finishes    static    {        threadGroup.setDaemon(true);    }Because this is executing once per second, including the stack trace wouldcause a very large log file. For convenience For convenience For convenience Call this now so that resolution of instance registration timestamp is reducedIf we look at fill() we can see that it adds floats to the array.
				 * This is not necessarily the best way of serialising floats - if it turns out to be too big of
				 * a performance hit, we can check out alternatives like 
				 * https://www.factual.com/blog/the-flotsam-project-insanely-fast-floating-point-number-serialization-for-java-and-javascript/
				 * and
				 * https://github.com/RuedigerMoeller/fast-serialization
				 Because this is executing once per second, including the stack trace wouldcause a very large log file. TODO there is nothing preventing inheritors from interacting with these objects as (and after) they are destroyed. TODO there isn't a coherent way to dispose of the instances an inheritor may have registered... perhaps they should be responsible in their override of shutdown? TODO Where a participant is shared it is not safe to unregister types        ice.LocalAlarmLimitObjectiveTypeSupport.unregister_type(domainParticipant, ice.LocalAlarmLimitObjectiveTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        ice.AlarmLimitTypeSupport.unregister_type(domainParticipant, ice.AlarmLimitTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        SampleArrayTypeSupport.unregister_type(domainParticipant, SampleArrayTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        NumericTypeSupport.unregister_type(domainParticipant, NumericTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        DeviceIdentityTypeSupport.unregister_type(domainParticipant, DeviceIdentityTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        ice.DeviceAlertConditionTypeSupport.unregister_type(domainParticipant, ice.DeviceAlertConditionTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        ice.AlertTypeSupport.unregister_type(domainParticipant, ice.AlertTypeSupport.get_type_name());*
     * post-construction initialization method to allow implementations to
     * initialize/start whatever sub-components they manage. Ideally, for
     * more sophisticated devices everything complex should be moved out and
     * assembled via 'spring' ioc composition, but there are plenty of cases
     * in the middle where this is appropriate. This would be spring's
     * InitializingBean::afterPropertiesSet lifecycle pointcut.
     *
     * @return an instance of the device clock that should be used in stamping messages. Fall-back implementation
     * will supply dds time. If device maintains its own notion of the clock, it could use DeviceClock.ComboClock wrapper
     * to provide clock reading that would contain multiple values.
     * TODO 1-Oct-2013 JP This call to get_key_value fails consistently on ARM platforms so I'm tracking instances externally for the time being alarmSettingsObjectiveReader.get_key_value(obj, si.instance_handle);******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ***************************************************************************** TODO this is a good idea but the threadgroup gets destroyed when the last thread finishes    static    {        threadGroup.setDaemon(true);    }Because this is executing once per second, including the stack trace wouldcause a very large log file. For convenience For convenience For convenience Call this now so that resolution of instance registration timestamp is reducedIf we look at fill() we can see that it adds floats to the array.
				 * This is not necessarily the best way of serialising floats - if it turns out to be too big of
				 * a performance hit, we can check out alternatives like 
				 * https://www.factual.com/blog/the-flotsam-project-insanely-fast-floating-point-number-serialization-for-java-and-javascript/
				 * and
				 * https://github.com/RuedigerMoeller/fast-serialization
				 Because this is executing once per second, including the stack trace wouldcause a very large log file. TODO there is nothing preventing inheritors from interacting with these objects as (and after) they are destroyed. TODO there isn't a coherent way to dispose of the instances an inheritor may have registered... perhaps they should be responsible in their override of shutdown? TODO Where a participant is shared it is not safe to unregister types        ice.LocalAlarmLimitObjectiveTypeSupport.unregister_type(domainParticipant, ice.LocalAlarmLimitObjectiveTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        ice.AlarmLimitTypeSupport.unregister_type(domainParticipant, ice.AlarmLimitTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        SampleArrayTypeSupport.unregister_type(domainParticipant, SampleArrayTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        NumericTypeSupport.unregister_type(domainParticipant, NumericTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        DeviceIdentityTypeSupport.unregister_type(domainParticipant, DeviceIdentityTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        ice.DeviceAlertConditionTypeSupport.unregister_type(domainParticipant, ice.DeviceAlertConditionTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        ice.AlertTypeSupport.unregister_type(domainParticipant, ice.AlertTypeSupport.get_type_name());*
     * post-construction initialization method to allow implementations to
     * initialize/start whatever sub-components they manage. Ideally, for
     * more sophisticated devices everything complex should be moved out and
     * assembled via 'spring' ioc composition, but there are plenty of cases
     * in the middle where this is appropriate. This would be spring's
     * InitializingBean::afterPropertiesSet lifecycle pointcut.
     *
     * @return an instance of the device clock that should be used in stamping messages. Fall-back implementation
     * will supply dds time. If device maintains its own notion of the clock, it could use DeviceClock.ComboClock wrapper
     * to provide clock reading that would contain multiple values.
     * TODO 1-Oct-2013 JP This call to get_key_value fails consistently on ARM platforms so I'm tracking instances externally for the time being alarmSettingsObjectiveReader.get_key_value(obj, si.instance_handle);******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ***************************************************************************** TODO this is a good idea but the threadgroup gets destroyed when the last thread finishes    static    {        threadGroup.setDaemon(true);    }Because this is executing once per second, including the stack trace wouldcause a very large log file. For convenience For convenience For convenience Call this now so that resolution of instance registration timestamp is reducedIf we look at fill() we can see that it adds floats to the array.
				 * This is not necessarily the best way of serialising floats - if it turns out to be too big of
				 * a performance hit, we can check out alternatives like 
				 * https://www.factual.com/blog/the-flotsam-project-insanely-fast-floating-point-number-serialization-for-java-and-javascript/
				 * and
				 * https://github.com/RuedigerMoeller/fast-serialization
				 Because this is executing once per second, including the stack trace wouldcause a very large log file. TODO there is nothing preventing inheritors from interacting with these objects as (and after) they are destroyed. TODO there isn't a coherent way to dispose of the instances an inheritor may have registered... perhaps they should be responsible in their override of shutdown? TODO Where a participant is shared it is not safe to unregister types        ice.LocalAlarmLimitObjectiveTypeSupport.unregister_type(domainParticipant, ice.LocalAlarmLimitObjectiveTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        ice.AlarmLimitTypeSupport.unregister_type(domainParticipant, ice.AlarmLimitTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        SampleArrayTypeSupport.unregister_type(domainParticipant, SampleArrayTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        NumericTypeSupport.unregister_type(domainParticipant, NumericTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        DeviceIdentityTypeSupport.unregister_type(domainParticipant, DeviceIdentityTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        ice.DeviceAlertConditionTypeSupport.unregister_type(domainParticipant, ice.DeviceAlertConditionTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        ice.AlertTypeSupport.unregister_type(domainParticipant, ice.AlertTypeSupport.get_type_name());*
     * post-construction initialization method to allow implementations to
     * initialize/start whatever sub-components they manage. Ideally, for
     * more sophisticated devices everything complex should be moved out and
     * assembled via 'spring' ioc composition, but there are plenty of cases
     * in the middle where this is appropriate. This would be spring's
     * InitializingBean::afterPropertiesSet lifecycle pointcut.
     *
     * @return an instance of the device clock that should be used in stamping messages. Fall-back implementation
     * will supply dds time. If device maintains its own notion of the clock, it could use DeviceClock.ComboClock wrapper
     * to provide clock reading that would contain multiple values.
     * TODO 1-Oct-2013 JP This call to get_key_value fails consistently on ARM platforms so I'm tracking instances externally for the time being alarmSettingsObjectiveReader.get_key_value(obj, si.instance_handle);******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ***************************************************************************** TODO this is a good idea but the threadgroup gets destroyed when the last thread finishes    static    {        threadGroup.setDaemon(true);    }Because this is executing once per second, including the stack trace wouldcause a very large log file. For convenience For convenience For convenience Call this now so that resolution of instance registration timestamp is reducedIf we look at fill() we can see that it adds floats to the array.
				 * This is not necessarily the best way of serialising floats - if it turns out to be too big of
				 * a performance hit, we can check out alternatives like 
				 * https://www.factual.com/blog/the-flotsam-project-insanely-fast-floating-point-number-serialization-for-java-and-javascript/
				 * and
				 * https://github.com/RuedigerMoeller/fast-serialization
				 Because this is executing once per second, including the stack trace wouldcause a very large log file. TODO there is nothing preventing inheritors from interacting with these objects as (and after) they are destroyed. TODO there isn't a coherent way to dispose of the instances an inheritor may have registered... perhaps they should be responsible in their override of shutdown? TODO Where a participant is shared it is not safe to unregister types        ice.LocalAlarmLimitObjectiveTypeSupport.unregister_type(domainParticipant, ice.LocalAlarmLimitObjectiveTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        ice.AlarmLimitTypeSupport.unregister_type(domainParticipant, ice.AlarmLimitTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        SampleArrayTypeSupport.unregister_type(domainParticipant, SampleArrayTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        NumericTypeSupport.unregister_type(domainParticipant, NumericTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        DeviceIdentityTypeSupport.unregister_type(domainParticipant, DeviceIdentityTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        ice.DeviceAlertConditionTypeSupport.unregister_type(domainParticipant, ice.DeviceAlertConditionTypeSupport.get_type_name()); TODO Where a participant is shared it is not safe to unregister types        ice.AlertTypeSupport.unregister_type(domainParticipant, ice.AlertTypeSupport.get_type_name());*
     * post-construction initialization method to allow implementations to
     * initialize/start whatever sub-components they manage. Ideally, for
     * more sophisticated devices everything complex should be moved out and
     * assembled via 'spring' ioc composition, but there are plenty of cases
     * in the middle where this is appropriate. This would be spring's
     * InitializingBean::afterPropertiesSet lifecycle pointcut.
     *
     * @return an instance of the device clock that should be used in stamping messages. Fall-back implementation
     * will supply dds time. If device maintains its own notion of the clock, it could use DeviceClock.ComboClock wrapper
     * to provide clock reading that would contain multiple values.
     * TODO 1-Oct-2013 JP This call to get_key_value fails consistently on ARM platforms so I'm tracking instances externally for the time being alarmSettingsObjectiveReader.get_key_value(obj, si.instance_handle);