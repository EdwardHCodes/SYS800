**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************
 * Manages file and directory streams on all volumes
 *
 * Intended for internal use by disk, file and directory code
  there will always be enough of these for all user handles, thus these
   functions don't return failure codes  describes the file as an image on the storage medium  base info list item (first!)  F(D)(O)_* bits of this file/dir  number of writer streams  write mode shared cache  size of this file  open streams for this file/dir  syncs information for the stream's old and new parent directory if any are
   currently opened  not directory or removed can't be parent of anything  discard scan/read caches' parent dir info  see if this file has open streams and return that fileobj_binding if so,
   else grab a new one from the free list; returns true if this stream is
   the only open one  already has open streams  not found - allocate anew  mark descriptor as unused and return to the free list * File and directory internal interface * HAVE_DIRCACHE  opens the file object for a new stream and sets up the caches;
 * the stream must already be opened at the FS driver level and *stream
 * initialized.
 *
 * NOTE: switches stream->infop to the one kept in common for all streams of
 *       the same file, making a copy for only the first stream
  add stream to this file's list  initiate the new stream into the enclave  first stream for file  additional stream for file  once a file/directory, always a file/directory; such a change
           is a bug  first writer  already writers present  another reader and no writers present  close the stream and free associated resources  not added to manager or forced-closed by unmounting  last stream for file; close everything  only readers remain; switch back to stream-local caching  only one open stream remaining  informs manager that file has been created  informs manager that file has been removed  informs manager that file has been renamed  if there is old info then this was a move and the old parent has to be
       informed  informs manager than directory entries have been updated  no dir to sync  query for the pointer to the size storage for the file object  iterate the list of streams for this stream's file  query manager bitflags for the file object  change manager bitflags for the file object (permitted only)  mark all open streams on a device as "nonexistant"  last ditch effort to preserve FS integrity; we could still
                   be alive (soft unmount, maybe); we get informed early   above didn't close it  keep it "busy" to avoid races; any valid file/directory
                   descriptor returned by an open call should always be
                   closed by whoever opened it (of course!)  one-time init at startup **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************
 * Manages file and directory streams on all volumes
 *
 * Intended for internal use by disk, file and directory code
  there will always be enough of these for all user handles, thus these
   functions don't return failure codes  describes the file as an image on the storage medium  base info list item (first!)  F(D)(O)_* bits of this file/dir  number of writer streams  write mode shared cache  size of this file  open streams for this file/dir  syncs information for the stream's old and new parent directory if any are
   currently opened  not directory or removed can't be parent of anything  discard scan/read caches' parent dir info  see if this file has open streams and return that fileobj_binding if so,
   else grab a new one from the free list; returns true if this stream is
   the only open one  already has open streams  not found - allocate anew  mark descriptor as unused and return to the free list * File and directory internal interface * HAVE_DIRCACHE  opens the file object for a new stream and sets up the caches;
 * the stream must already be opened at the FS driver level and *stream
 * initialized.
 *
 * NOTE: switches stream->infop to the one kept in common for all streams of
 *       the same file, making a copy for only the first stream
  add stream to this file's list  initiate the new stream into the enclave  first stream for file  additional stream for file  once a file/directory, always a file/directory; such a change
           is a bug  first writer  already writers present  another reader and no writers present  close the stream and free associated resources  not added to manager or forced-closed by unmounting  last stream for file; close everything  only readers remain; switch back to stream-local caching  only one open stream remaining  informs manager that file has been created  informs manager that file has been removed  informs manager that file has been renamed  if there is old info then this was a move and the old parent has to be
       informed  informs manager than directory entries have been updated  no dir to sync  query for the pointer to the size storage for the file object  iterate the list of streams for this stream's file  query manager bitflags for the file object  change manager bitflags for the file object (permitted only)  mark all open streams on a device as "nonexistant"  last ditch effort to preserve FS integrity; we could still
                   be alive (soft unmount, maybe); we get informed early   above didn't close it  keep it "busy" to avoid races; any valid file/directory
                   descriptor returned by an open call should always be
                   closed by whoever opened it (of course!)  one-time init at startup **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************
 * Manages file and directory streams on all volumes
 *
 * Intended for internal use by disk, file and directory code
  there will always be enough of these for all user handles, thus these
   functions don't return failure codes  describes the file as an image on the storage medium  base info list item (first!)  F(D)(O)_* bits of this file/dir  number of writer streams  write mode shared cache  size of this file  open streams for this file/dir  syncs information for the stream's old and new parent directory if any are
   currently opened  not directory or removed can't be parent of anything  discard scan/read caches' parent dir info  see if this file has open streams and return that fileobj_binding if so,
   else grab a new one from the free list; returns true if this stream is
   the only open one  already has open streams  not found - allocate anew  mark descriptor as unused and return to the free list * File and directory internal interface * HAVE_DIRCACHE  opens the file object for a new stream and sets up the caches;
 * the stream must already be opened at the FS driver level and *stream
 * initialized.
 *
 * NOTE: switches stream->infop to the one kept in common for all streams of
 *       the same file, making a copy for only the first stream
  add stream to this file's list  initiate the new stream into the enclave  first stream for file  additional stream for file  once a file/directory, always a file/directory; such a change
           is a bug  first writer  already writers present  another reader and no writers present  close the stream and free associated resources  not added to manager or forced-closed by unmounting  last stream for file; close everything  only readers remain; switch back to stream-local caching  only one open stream remaining  informs manager that file has been created  informs manager that file has been removed  informs manager that file has been renamed  if there is old info then this was a move and the old parent has to be
       informed  informs manager than directory entries have been updated  no dir to sync  query for the pointer to the size storage for the file object  iterate the list of streams for this stream's file  query manager bitflags for the file object  change manager bitflags for the file object (permitted only)  mark all open streams on a device as "nonexistant"  last ditch effort to preserve FS integrity; we could still
                   be alive (soft unmount, maybe); we get informed early   above didn't close it  keep it "busy" to avoid races; any valid file/directory
                   descriptor returned by an open call should always be
                   closed by whoever opened it (of course!)  one-time init at startup 