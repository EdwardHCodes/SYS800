 Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *      Zone Memory Allocation. Neat.
 *
 * Neat enough to be rewritten by Lee Killough...
 *
 * Must not have been real neat :)
 *
 * Made faster and more general, and added wrappers for all of Doom's
 * memory allocation functions, including malloc() and similar functions.
 * Added line and file numbers, in case of error. Added performance
 * statistics and tunables.
 *-----------------------------------------------------------------------------
  Tunables Alignment of zone memory (benefit may be negated by HEADER_SIZE, CHUNK_SIZE) Minimum chunk size at which blocks are allocated Minimum size a block must be to become part of a split Minimum RAM machine is assumed to have cph - Select zone size. 6megs is usable, but with the SDL version
 * storing sounds in the zone, 8 is more sensible  Amount to subtract when retrying failed attempts to allocate initial pool signature for block header Number of mallocs & frees kept in history buffer (must be a power of 2) End Tunables size of block header
 * cph - base on sizeof(memblock_t), which can be larger than CHUNK_SIZE on
 * 64bit architectures  roving pointer to memory blocks pointer to first block pointer to entire zone memory zone memory allocated size statistics for evaluating performance Print allocation statistics   double s = 100.0 / total_memory; killough 4/26/98: Add history information   (free)(zonebase);   atexit(Z_Close);            // exit handler Allocate the memory Leave space for header and CACHE_ALIGN round to chunk size Align on cache boundary Rover points to base of zone mem Single node All memory in one block A free block Z_Malloc
 * You can pass a NULL user if the tag is < PU_PURGELEVEL.
 *
 * cph - the algorithm here was a very simple first-fit round-robin
 *  one - just keep looping around, freeing everything we can until
 *  we get a large enough space
 *
 * This has been changed now; we still do the round-robin first-fit,
 * but we only free the blocks we actually end up using; we don't
 * free all the stuff we just pass on the way.
  malloc(0) returns NULL round to chunk size If we just wrapped, we're not contiguous with the previous block  Not free(able), so no free space here  Add to contiguous chunk of free space  First fit  detect cycles as failure We have a block of free(able) memory on the heap which will suffice  If the previous block is adjacent and free, step back and include it  Free current block if needed  Note: guaranteed that block->prev is either
       * not free or not contiguous
       *
       * At every step, block->next must be not free, else it would
       *  have been merged with our block
       * No range check needed because we know it works by the previous loop  Now, carve up the block  Split up block set roving pointer for next search We don't have enough contiguous free blocks signature required in block header tag user if there is a user set user to point to new block print memory allocation stats scramble memory -- weed out any bugs Nullify id so another free fails scramble memory -- weed out any bugs  Nullify user if one exists Mark block freed Possibly merge with previous block Move back rover if it points at block Possibly merge with next block Move back rover if it points at next block print memory allocation stats cph - move rover to start of zone; we like to encourage static
    * data to stay in one place, at the start of the heap
     Scan through list, searching for tags in range cph - be more careful here, we were skipping blocks!
          * If the current block was not merged with the previous,
          *  cur is still a valid pointer, prev->next == cur, and cur is
          *  already free so skip to the next.
          * If the current block was merged with the previous,
          *  the next block to analyse is prev->next.
          * Note that the while() below does the actual step forward
           ZONEIDCHECK in case Z_Free nullified same user Start at base of zone mem Consistency check (last node treated special) Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *      Zone Memory Allocation. Neat.
 *
 * Neat enough to be rewritten by Lee Killough...
 *
 * Must not have been real neat :)
 *
 * Made faster and more general, and added wrappers for all of Doom's
 * memory allocation functions, including malloc() and similar functions.
 * Added line and file numbers, in case of error. Added performance
 * statistics and tunables.
 *-----------------------------------------------------------------------------
  Tunables Alignment of zone memory (benefit may be negated by HEADER_SIZE, CHUNK_SIZE) Minimum chunk size at which blocks are allocated Minimum size a block must be to become part of a split Minimum RAM machine is assumed to have cph - Select zone size. 6megs is usable, but with the SDL version
 * storing sounds in the zone, 8 is more sensible  Amount to subtract when retrying failed attempts to allocate initial pool signature for block header Number of mallocs & frees kept in history buffer (must be a power of 2) End Tunables size of block header
 * cph - base on sizeof(memblock_t), which can be larger than CHUNK_SIZE on
 * 64bit architectures  roving pointer to memory blocks pointer to first block pointer to entire zone memory zone memory allocated size statistics for evaluating performance Print allocation statistics   double s = 100.0 / total_memory; killough 4/26/98: Add history information   (free)(zonebase);   atexit(Z_Close);            // exit handler Allocate the memory Leave space for header and CACHE_ALIGN round to chunk size Align on cache boundary Rover points to base of zone mem Single node All memory in one block A free block Z_Malloc
 * You can pass a NULL user if the tag is < PU_PURGELEVEL.
 *
 * cph - the algorithm here was a very simple first-fit round-robin
 *  one - just keep looping around, freeing everything we can until
 *  we get a large enough space
 *
 * This has been changed now; we still do the round-robin first-fit,
 * but we only free the blocks we actually end up using; we don't
 * free all the stuff we just pass on the way.
  malloc(0) returns NULL round to chunk size If we just wrapped, we're not contiguous with the previous block  Not free(able), so no free space here  Add to contiguous chunk of free space  First fit  detect cycles as failure We have a block of free(able) memory on the heap which will suffice  If the previous block is adjacent and free, step back and include it  Free current block if needed  Note: guaranteed that block->prev is either
       * not free or not contiguous
       *
       * At every step, block->next must be not free, else it would
       *  have been merged with our block
       * No range check needed because we know it works by the previous loop  Now, carve up the block  Split up block set roving pointer for next search We don't have enough contiguous free blocks signature required in block header tag user if there is a user set user to point to new block print memory allocation stats scramble memory -- weed out any bugs Nullify id so another free fails scramble memory -- weed out any bugs  Nullify user if one exists Mark block freed Possibly merge with previous block Move back rover if it points at block Possibly merge with next block Move back rover if it points at next block print memory allocation stats cph - move rover to start of zone; we like to encourage static
    * data to stay in one place, at the start of the heap
     Scan through list, searching for tags in range cph - be more careful here, we were skipping blocks!
          * If the current block was not merged with the previous,
          *  cur is still a valid pointer, prev->next == cur, and cur is
          *  already free so skip to the next.
          * If the current block was merged with the previous,
          *  the next block to analyse is prev->next.
          * Note that the while() below does the actual step forward
           ZONEIDCHECK in case Z_Free nullified same user Start at base of zone mem Consistency check (last node treated special) Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *      Zone Memory Allocation. Neat.
 *
 * Neat enough to be rewritten by Lee Killough...
 *
 * Must not have been real neat :)
 *
 * Made faster and more general, and added wrappers for all of Doom's
 * memory allocation functions, including malloc() and similar functions.
 * Added line and file numbers, in case of error. Added performance
 * statistics and tunables.
 *-----------------------------------------------------------------------------
  Tunables Alignment of zone memory (benefit may be negated by HEADER_SIZE, CHUNK_SIZE) Minimum chunk size at which blocks are allocated Minimum size a block must be to become part of a split Minimum RAM machine is assumed to have cph - Select zone size. 6megs is usable, but with the SDL version
 * storing sounds in the zone, 8 is more sensible  Amount to subtract when retrying failed attempts to allocate initial pool signature for block header Number of mallocs & frees kept in history buffer (must be a power of 2) End Tunables size of block header
 * cph - base on sizeof(memblock_t), which can be larger than CHUNK_SIZE on
 * 64bit architectures  roving pointer to memory blocks pointer to first block pointer to entire zone memory zone memory allocated size statistics for evaluating performance Print allocation statistics   double s = 100.0 / total_memory; killough 4/26/98: Add history information   (free)(zonebase);   atexit(Z_Close);            // exit handler Allocate the memory Leave space for header and CACHE_ALIGN round to chunk size Align on cache boundary Rover points to base of zone mem Single node All memory in one block A free block Z_Malloc
 * You can pass a NULL user if the tag is < PU_PURGELEVEL.
 *
 * cph - the algorithm here was a very simple first-fit round-robin
 *  one - just keep looping around, freeing everything we can until
 *  we get a large enough space
 *
 * This has been changed now; we still do the round-robin first-fit,
 * but we only free the blocks we actually end up using; we don't
 * free all the stuff we just pass on the way.
  malloc(0) returns NULL round to chunk size If we just wrapped, we're not contiguous with the previous block  Not free(able), so no free space here  Add to contiguous chunk of free space  First fit  detect cycles as failure We have a block of free(able) memory on the heap which will suffice  If the previous block is adjacent and free, step back and include it  Free current block if needed  Note: guaranteed that block->prev is either
       * not free or not contiguous
       *
       * At every step, block->next must be not free, else it would
       *  have been merged with our block
       * No range check needed because we know it works by the previous loop  Now, carve up the block  Split up block set roving pointer for next search We don't have enough contiguous free blocks signature required in block header tag user if there is a user set user to point to new block print memory allocation stats scramble memory -- weed out any bugs Nullify id so another free fails scramble memory -- weed out any bugs  Nullify user if one exists Mark block freed Possibly merge with previous block Move back rover if it points at block Possibly merge with next block Move back rover if it points at next block print memory allocation stats cph - move rover to start of zone; we like to encourage static
    * data to stay in one place, at the start of the heap
     Scan through list, searching for tags in range cph - be more careful here, we were skipping blocks!
          * If the current block was not merged with the previous,
          *  cur is still a valid pointer, prev->next == cur, and cur is
          *  already free so skip to the next.
          * If the current block was merged with the previous,
          *  the next block to analyse is prev->next.
          * Note that the while() below does the actual step forward
           ZONEIDCHECK in case Z_Free nullified same user Start at base of zone mem Consistency check (last node treated special)