
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 Z_zone.c including the header and possibly tiny fragments a tag of 0 is a free block should be ZONEID pad to 64 bit boundary total bytes malloced, including header start / end cap for linked list prevent race conditions
==============================================================================

						ZONE MEMORY ALLOCATION

There is never any space between memblocks, and there will never be two
contiguous free memblocks.

The rover can be left pointing at a non-empty block

The zone calls are pretty much only used for small strings and structures,
all big things are allocated on the hunk.
==============================================================================

========================
Z_ClearZone
========================
 set the entire zone to one free block in use block free block
========================
Z_Free
========================
 mark as free merge with previous free block merge the next free block onto the end
========================
Z_Malloc
========================
 DEBUG scan through the block list looking for the first free block of sufficient size account for size of block header space for memory trash tester align to 8-byte boundary scaned all the way around the list found a block big enough there will be a free fragment after the allocated block free block no longer a free block next allocation will start looking here marker for memory trash testing
========================
Z_Print
========================
 all blocks have been hit	
========================
Z_CheckHeap
========================
 all blocks have been hit	============================================================================ including sizeof(hunk_t), -1 = not allocated
==============
Hunk_Check

Run consistancy and sentinal trahing checks
==============

==============
Hunk_Print

If "all" is specified, every single allocation is printed.
Otherwise, allocations with the same name will be totaled up before printing.
==============
 skip to the high hunk if done with low hunk if totally done, break run consistancy checks print the single block print the total
===================
Hunk_AllocName
===================

===================
Hunk_Alloc
===================

===================
Hunk_HighAllocName
===================

=================
Hunk_TempAlloc

Return space from the top of the hunk
=================

===============================================================================

CACHE MEMORY

===============================================================================
 including this header for LRU flushing	
===========
Cache_Move
===========
 we are clearing up space at the bottom, so only allocate it late		Con_Printf ("cache_move ok\n");		Con_Printf ("cache_move failed\n"); tough luck...
============
Cache_FreeLow

Throw things out until the hunk can be expanded to the given point
============
 nothing in cache at all there is space to grow the hunk reclaim the space
============
Cache_FreeHigh

Throw things out until the hunk can be expanded to the given point
============
 nothing in cache at all there is space to grow the hunk didn't move out of the way try to move it
============
Cache_TryAlloc

Looks for a free block of memory between the high and low hunk marks
Size should already include the header and padding
============
 is the cache completely empty? search from the bottom up for space found space continue looking		 try to allocate one at the very end couldn't allocate
============
Cache_Flush

Throw everything out, so new data will be demand cached
============
 reclaim the space
============
Cache_Print

============

============
Cache_Report

============

============
Cache_Compact

============

============
Cache_Init

============

==============
Cache_Free

Frees the memory and removes it from the LRU list
==============

==============
Cache_Check
==============
 move to head of LRU
==============
Cache_Alloc
==============
 find memory for it	 free the least recently used cahedat not enough memory at all============================================================================
========================
Memory_Init
========================

Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 Z_zone.c including the header and possibly tiny fragments a tag of 0 is a free block should be ZONEID pad to 64 bit boundary total bytes malloced, including header start / end cap for linked list prevent race conditions
==============================================================================

						ZONE MEMORY ALLOCATION

There is never any space between memblocks, and there will never be two
contiguous free memblocks.

The rover can be left pointing at a non-empty block

The zone calls are pretty much only used for small strings and structures,
all big things are allocated on the hunk.
==============================================================================

========================
Z_ClearZone
========================
 set the entire zone to one free block in use block free block
========================
Z_Free
========================
 mark as free merge with previous free block merge the next free block onto the end
========================
Z_Malloc
========================
 DEBUG scan through the block list looking for the first free block of sufficient size account for size of block header space for memory trash tester align to 8-byte boundary scaned all the way around the list found a block big enough there will be a free fragment after the allocated block free block no longer a free block next allocation will start looking here marker for memory trash testing
========================
Z_Print
========================
 all blocks have been hit	
========================
Z_CheckHeap
========================
 all blocks have been hit	============================================================================ including sizeof(hunk_t), -1 = not allocated
==============
Hunk_Check

Run consistancy and sentinal trahing checks
==============

==============
Hunk_Print

If "all" is specified, every single allocation is printed.
Otherwise, allocations with the same name will be totaled up before printing.
==============
 skip to the high hunk if done with low hunk if totally done, break run consistancy checks print the single block print the total
===================
Hunk_AllocName
===================

===================
Hunk_Alloc
===================

===================
Hunk_HighAllocName
===================

=================
Hunk_TempAlloc

Return space from the top of the hunk
=================

===============================================================================

CACHE MEMORY

===============================================================================
 including this header for LRU flushing	
===========
Cache_Move
===========
 we are clearing up space at the bottom, so only allocate it late		Con_Printf ("cache_move ok\n");		Con_Printf ("cache_move failed\n"); tough luck...
============
Cache_FreeLow

Throw things out until the hunk can be expanded to the given point
============
 nothing in cache at all there is space to grow the hunk reclaim the space
============
Cache_FreeHigh

Throw things out until the hunk can be expanded to the given point
============
 nothing in cache at all there is space to grow the hunk didn't move out of the way try to move it
============
Cache_TryAlloc

Looks for a free block of memory between the high and low hunk marks
Size should already include the header and padding
============
 is the cache completely empty? search from the bottom up for space found space continue looking		 try to allocate one at the very end couldn't allocate
============
Cache_Flush

Throw everything out, so new data will be demand cached
============
 reclaim the space
============
Cache_Print

============

============
Cache_Report

============

============
Cache_Compact

============

============
Cache_Init

============

==============
Cache_Free

Frees the memory and removes it from the LRU list
==============

==============
Cache_Check
==============
 move to head of LRU
==============
Cache_Alloc
==============
 find memory for it	 free the least recently used cahedat not enough memory at all============================================================================
========================
Memory_Init
========================

Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 Z_zone.c including the header and possibly tiny fragments a tag of 0 is a free block should be ZONEID pad to 64 bit boundary total bytes malloced, including header start / end cap for linked list prevent race conditions
==============================================================================

						ZONE MEMORY ALLOCATION

There is never any space between memblocks, and there will never be two
contiguous free memblocks.

The rover can be left pointing at a non-empty block

The zone calls are pretty much only used for small strings and structures,
all big things are allocated on the hunk.
==============================================================================

========================
Z_ClearZone
========================
 set the entire zone to one free block in use block free block
========================
Z_Free
========================
 mark as free merge with previous free block merge the next free block onto the end
========================
Z_Malloc
========================
 DEBUG scan through the block list looking for the first free block of sufficient size account for size of block header space for memory trash tester align to 8-byte boundary scaned all the way around the list found a block big enough there will be a free fragment after the allocated block free block no longer a free block next allocation will start looking here marker for memory trash testing
========================
Z_Print
========================
 all blocks have been hit	
========================
Z_CheckHeap
========================
 all blocks have been hit	============================================================================ including sizeof(hunk_t), -1 = not allocated
==============
Hunk_Check

Run consistancy and sentinal trahing checks
==============

==============
Hunk_Print

If "all" is specified, every single allocation is printed.
Otherwise, allocations with the same name will be totaled up before printing.
==============
 skip to the high hunk if done with low hunk if totally done, break run consistancy checks print the single block print the total
===================
Hunk_AllocName
===================

===================
Hunk_Alloc
===================

===================
Hunk_HighAllocName
===================

=================
Hunk_TempAlloc

Return space from the top of the hunk
=================

===============================================================================

CACHE MEMORY

===============================================================================
 including this header for LRU flushing	
===========
Cache_Move
===========
 we are clearing up space at the bottom, so only allocate it late		Con_Printf ("cache_move ok\n");		Con_Printf ("cache_move failed\n"); tough luck...
============
Cache_FreeLow

Throw things out until the hunk can be expanded to the given point
============
 nothing in cache at all there is space to grow the hunk reclaim the space
============
Cache_FreeHigh

Throw things out until the hunk can be expanded to the given point
============
 nothing in cache at all there is space to grow the hunk didn't move out of the way try to move it
============
Cache_TryAlloc

Looks for a free block of memory between the high and low hunk marks
Size should already include the header and padding
============
 is the cache completely empty? search from the bottom up for space found space continue looking		 try to allocate one at the very end couldn't allocate
============
Cache_Flush

Throw everything out, so new data will be demand cached
============
 reclaim the space
============
Cache_Print

============

============
Cache_Report

============

============
Cache_Compact

============

============
Cache_Init

============

==============
Cache_Free

Frees the memory and removes it from the LRU list
==============

==============
Cache_Check
==============
 move to head of LRU
==============
Cache_Alloc
==============
 find memory for it	 free the least recently used cahedat not enough memory at all============================================================================
========================
Memory_Init
========================
