**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Rob Purchase
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** TODO: Establish IRQ priorities (0 = highest priority)  EXT0  EXT1  EXT2  EXT3  RTC  GPSB0  TIMER0  TIMER1  SCORE  SPDTX  VIDEO  GSIO  SCALER  I2C  DAI_RX  DAI_TX  CDRX  HPI  UART0  UART1  G2D  USB_DEVICE  USB_HOST  DMA  HDD  MSTICK  NFC  SDMMC  CAM  LCD  ADC  GPSB 
     * Based on: linux/arch/arm/kernel/entry-armv.S and system-meg-fx.c
      Store context  Reserve stack  Read clears the corresponding IRQ status  Ensure invalid flag is not set  Cleanup stack    Restore context  Return from IRQ  TODO - these should live in the target-specific directories and
   once we understand what all the GPIO pins do, move the init to the
   specific driver for that hardware.   For now, we just perform the 
   same GPIO init as the original firmware - this makes it easier to
   investigate what the GPIO pins do.
 Do what the original firmware does  Second function called in the original firmware's startup code - we just
   set up the clocks in the same way as the original firmware for now.  Enable Xin (12Mhz), Fsys = Xin, Fbus = Fsys/2, MCPU=Fsys, SCPU=Fsys  RAM refresh source = Xin (4) / 0x2d = 266kHz  Configure PLL0 to 192Mhz, for CPU scaling  power down  disable PLL0 divider  set for 192Mhz (with power down)  power up  Configure PLL1 to 216Mz, for LCD clock (when divided by 2)  power down  disable PLL1 divider  set for 216Mhz (with power down) power up  48Mhz: Fsys = PLL0 (192Mhz) Fbus = Fsys/4 CPU = Fbus, COP = Fbus  Configure PCK_TCT to 2Mhz (Xin divided by 6)  Set TC32 timer to be our USEC_TIMER (Xin divided by 12 = 1MHz)  Unmask common timer IRQ (shared by tick and user timer)  mask all interrupts  Set DAI interrupts as FIQ, all others are IRQ.  IRQs 3,8,21 active low (as OF)  IRQs 6-10,17-19,22-23,29 level-triggered (as OF)  Reading from VNIRQ clears that interrupt  Write IRQ priority registers using ints - a freeze occurs otherwise  Global FIQ/IRQ unmask  TODO: implement reboot (eg. jump to boot ROM?)  check for power button  CPU/COP frequencies can be scaled between Fbus (min) and Fsys (max).
       Fbus should not be set below ~32Mhz with LCD enabled or the display
       will be garbled.  192Mhz:
           Fsys = PLL0 (192Mhz)
           Fbus = Fsys/2
           CPU = Fsys, COP = Fsys  48Mhz:
           Fsys = PLL0 (192Mhz)
           Fbus = Fsys/4
           CPU = Fbus, COP = Fbus  32Mhz:
           Fsys = PLL0 (192Mhz)
           Fbus = Fsys/6
           CPU = Fbus, COP = Fbus **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Rob Purchase
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** TODO: Establish IRQ priorities (0 = highest priority)  EXT0  EXT1  EXT2  EXT3  RTC  GPSB0  TIMER0  TIMER1  SCORE  SPDTX  VIDEO  GSIO  SCALER  I2C  DAI_RX  DAI_TX  CDRX  HPI  UART0  UART1  G2D  USB_DEVICE  USB_HOST  DMA  HDD  MSTICK  NFC  SDMMC  CAM  LCD  ADC  GPSB 
     * Based on: linux/arch/arm/kernel/entry-armv.S and system-meg-fx.c
      Store context  Reserve stack  Read clears the corresponding IRQ status  Ensure invalid flag is not set  Cleanup stack    Restore context  Return from IRQ  TODO - these should live in the target-specific directories and
   once we understand what all the GPIO pins do, move the init to the
   specific driver for that hardware.   For now, we just perform the 
   same GPIO init as the original firmware - this makes it easier to
   investigate what the GPIO pins do.
 Do what the original firmware does  Second function called in the original firmware's startup code - we just
   set up the clocks in the same way as the original firmware for now.  Enable Xin (12Mhz), Fsys = Xin, Fbus = Fsys/2, MCPU=Fsys, SCPU=Fsys  RAM refresh source = Xin (4) / 0x2d = 266kHz  Configure PLL0 to 192Mhz, for CPU scaling  power down  disable PLL0 divider  set for 192Mhz (with power down)  power up  Configure PLL1 to 216Mz, for LCD clock (when divided by 2)  power down  disable PLL1 divider  set for 216Mhz (with power down) power up  48Mhz: Fsys = PLL0 (192Mhz) Fbus = Fsys/4 CPU = Fbus, COP = Fbus  Configure PCK_TCT to 2Mhz (Xin divided by 6)  Set TC32 timer to be our USEC_TIMER (Xin divided by 12 = 1MHz)  Unmask common timer IRQ (shared by tick and user timer)  mask all interrupts  Set DAI interrupts as FIQ, all others are IRQ.  IRQs 3,8,21 active low (as OF)  IRQs 6-10,17-19,22-23,29 level-triggered (as OF)  Reading from VNIRQ clears that interrupt  Write IRQ priority registers using ints - a freeze occurs otherwise  Global FIQ/IRQ unmask  TODO: implement reboot (eg. jump to boot ROM?)  check for power button  CPU/COP frequencies can be scaled between Fbus (min) and Fsys (max).
       Fbus should not be set below ~32Mhz with LCD enabled or the display
       will be garbled.  192Mhz:
           Fsys = PLL0 (192Mhz)
           Fbus = Fsys/2
           CPU = Fsys, COP = Fsys  48Mhz:
           Fsys = PLL0 (192Mhz)
           Fbus = Fsys/4
           CPU = Fbus, COP = Fbus  32Mhz:
           Fsys = PLL0 (192Mhz)
           Fbus = Fsys/6
           CPU = Fbus, COP = Fbus **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Rob Purchase
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** TODO: Establish IRQ priorities (0 = highest priority)  EXT0  EXT1  EXT2  EXT3  RTC  GPSB0  TIMER0  TIMER1  SCORE  SPDTX  VIDEO  GSIO  SCALER  I2C  DAI_RX  DAI_TX  CDRX  HPI  UART0  UART1  G2D  USB_DEVICE  USB_HOST  DMA  HDD  MSTICK  NFC  SDMMC  CAM  LCD  ADC  GPSB 
     * Based on: linux/arch/arm/kernel/entry-armv.S and system-meg-fx.c
      Store context  Reserve stack  Read clears the corresponding IRQ status  Ensure invalid flag is not set  Cleanup stack    Restore context  Return from IRQ  TODO - these should live in the target-specific directories and
   once we understand what all the GPIO pins do, move the init to the
   specific driver for that hardware.   For now, we just perform the 
   same GPIO init as the original firmware - this makes it easier to
   investigate what the GPIO pins do.
 Do what the original firmware does  Second function called in the original firmware's startup code - we just
   set up the clocks in the same way as the original firmware for now.  Enable Xin (12Mhz), Fsys = Xin, Fbus = Fsys/2, MCPU=Fsys, SCPU=Fsys  RAM refresh source = Xin (4) / 0x2d = 266kHz  Configure PLL0 to 192Mhz, for CPU scaling  power down  disable PLL0 divider  set for 192Mhz (with power down)  power up  Configure PLL1 to 216Mz, for LCD clock (when divided by 2)  power down  disable PLL1 divider  set for 216Mhz (with power down) power up  48Mhz: Fsys = PLL0 (192Mhz) Fbus = Fsys/4 CPU = Fbus, COP = Fbus  Configure PCK_TCT to 2Mhz (Xin divided by 6)  Set TC32 timer to be our USEC_TIMER (Xin divided by 12 = 1MHz)  Unmask common timer IRQ (shared by tick and user timer)  mask all interrupts  Set DAI interrupts as FIQ, all others are IRQ.  IRQs 3,8,21 active low (as OF)  IRQs 6-10,17-19,22-23,29 level-triggered (as OF)  Reading from VNIRQ clears that interrupt  Write IRQ priority registers using ints - a freeze occurs otherwise  Global FIQ/IRQ unmask  TODO: implement reboot (eg. jump to boot ROM?)  check for power button  CPU/COP frequencies can be scaled between Fbus (min) and Fsys (max).
       Fbus should not be set below ~32Mhz with LCD enabled or the display
       will be garbled.  192Mhz:
           Fsys = PLL0 (192Mhz)
           Fbus = Fsys/2
           CPU = Fsys, COP = Fsys  48Mhz:
           Fsys = PLL0 (192Mhz)
           Fbus = Fsys/4
           CPU = Fbus, COP = Fbus  32Mhz:
           Fsys = PLL0 (192Mhz)
           Fbus = Fsys/6
           CPU = Fbus, COP = Fbus 