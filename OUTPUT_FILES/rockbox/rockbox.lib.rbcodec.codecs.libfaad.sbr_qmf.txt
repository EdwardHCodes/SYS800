
** FAAD2 - Freeware Advanced Audio (AAC) Decoder including SBR decoding
** Copyright (C) 2003-2004 M. Bakker, Ahead Software AG, http://www.nero.com
**
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
**
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** Any non-GPL usage of this software or parts of this software is strictly
** forbidden.
**
** Commercial non-GPL licensing of this software is possible.
** For more info contact Ahead Software through Mpeg4AAClicense@nero.com.
**
** $Id$
* qmf subsample l  shift input buffer x  input buffer is not shifted anymore, x is implemented as double ringbuffer memmove(qmfa->x + 32, qmfa->x, (320-32)*sizeof(real_t)); add new samples to input buffer x  window and summation to create array u  update ringbuffer index  calculate 32 subband samples by introducing X  #ifdef SBR_LOW_POWER  Reordering of data moved from DCT_IV to here dct4_kernel is DCT_IV without reordering which is done before and after FFT Reordering of data moved from DCT_IV to here Step 1: Calculate all non-zero pairs  Step 2: Calculate a single pair with half zero'ed  Step 3: All other are zero'ed  #ifdef SBR_LOW_POWER  qmf subsample l  shift buffers  we are not shifting v, it is a double ringbuffer memmove(qmfs->v + 64, qmfs->v, (640-64)*sizeof(real_t)); calculate 64 samples  even n samples  odd n samples  calculate 32 output samples and window  update the ringbuffer index  qmf subsample l  shift buffers  we are not shifting v, it is a double ringbuffer memmove(qmfs->v + 128, qmfs->v, (1280-128)*sizeof(real_t)); calculate 128 samples  even n samples  odd n samples  calculate 64 output samples and window  update the ringbuffer index  #ifdef SBR_LOW_POWER  qmf subsample l  shift buffer v  buffer is not shifted, we are using a ringbuffer memmove(qmfs->v + 64, qmfs->v, (640-64)*sizeof(real_t)); calculate 64 samples  complex pre-twiddle  transform  calculate 32 output samples and window  update ringbuffer index  qmf subsample l  shift buffer v  buffer is not shifted, we use double ringbuffer memmove(qmfs->v + 128, qmfs->v, (1280-128)*sizeof(real_t)); calculate 128 samples  dct4_kernel is DCT_IV without reordering which is done before and after FFT calculate 64 output samples and window  update ringbuffer index  #ifdef SBR_LOW_POWER  #ifdef SBR_DEC 
** FAAD2 - Freeware Advanced Audio (AAC) Decoder including SBR decoding
** Copyright (C) 2003-2004 M. Bakker, Ahead Software AG, http://www.nero.com
**
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
**
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** Any non-GPL usage of this software or parts of this software is strictly
** forbidden.
**
** Commercial non-GPL licensing of this software is possible.
** For more info contact Ahead Software through Mpeg4AAClicense@nero.com.
**
** $Id$
* qmf subsample l  shift input buffer x  input buffer is not shifted anymore, x is implemented as double ringbuffer memmove(qmfa->x + 32, qmfa->x, (320-32)*sizeof(real_t)); add new samples to input buffer x  window and summation to create array u  update ringbuffer index  calculate 32 subband samples by introducing X  #ifdef SBR_LOW_POWER  Reordering of data moved from DCT_IV to here dct4_kernel is DCT_IV without reordering which is done before and after FFT Reordering of data moved from DCT_IV to here Step 1: Calculate all non-zero pairs  Step 2: Calculate a single pair with half zero'ed  Step 3: All other are zero'ed  #ifdef SBR_LOW_POWER  qmf subsample l  shift buffers  we are not shifting v, it is a double ringbuffer memmove(qmfs->v + 64, qmfs->v, (640-64)*sizeof(real_t)); calculate 64 samples  even n samples  odd n samples  calculate 32 output samples and window  update the ringbuffer index  qmf subsample l  shift buffers  we are not shifting v, it is a double ringbuffer memmove(qmfs->v + 128, qmfs->v, (1280-128)*sizeof(real_t)); calculate 128 samples  even n samples  odd n samples  calculate 64 output samples and window  update the ringbuffer index  #ifdef SBR_LOW_POWER  qmf subsample l  shift buffer v  buffer is not shifted, we are using a ringbuffer memmove(qmfs->v + 64, qmfs->v, (640-64)*sizeof(real_t)); calculate 64 samples  complex pre-twiddle  transform  calculate 32 output samples and window  update ringbuffer index  qmf subsample l  shift buffer v  buffer is not shifted, we use double ringbuffer memmove(qmfs->v + 128, qmfs->v, (1280-128)*sizeof(real_t)); calculate 128 samples  dct4_kernel is DCT_IV without reordering which is done before and after FFT calculate 64 output samples and window  update ringbuffer index  #ifdef SBR_LOW_POWER  #ifdef SBR_DEC 
** FAAD2 - Freeware Advanced Audio (AAC) Decoder including SBR decoding
** Copyright (C) 2003-2004 M. Bakker, Ahead Software AG, http://www.nero.com
**
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
**
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** Any non-GPL usage of this software or parts of this software is strictly
** forbidden.
**
** Commercial non-GPL licensing of this software is possible.
** For more info contact Ahead Software through Mpeg4AAClicense@nero.com.
**
** $Id$
* qmf subsample l  shift input buffer x  input buffer is not shifted anymore, x is implemented as double ringbuffer memmove(qmfa->x + 32, qmfa->x, (320-32)*sizeof(real_t)); add new samples to input buffer x  window and summation to create array u  update ringbuffer index  calculate 32 subband samples by introducing X  #ifdef SBR_LOW_POWER  Reordering of data moved from DCT_IV to here dct4_kernel is DCT_IV without reordering which is done before and after FFT Reordering of data moved from DCT_IV to here Step 1: Calculate all non-zero pairs  Step 2: Calculate a single pair with half zero'ed  Step 3: All other are zero'ed  #ifdef SBR_LOW_POWER  qmf subsample l  shift buffers  we are not shifting v, it is a double ringbuffer memmove(qmfs->v + 64, qmfs->v, (640-64)*sizeof(real_t)); calculate 64 samples  even n samples  odd n samples  calculate 32 output samples and window  update the ringbuffer index  qmf subsample l  shift buffers  we are not shifting v, it is a double ringbuffer memmove(qmfs->v + 128, qmfs->v, (1280-128)*sizeof(real_t)); calculate 128 samples  even n samples  odd n samples  calculate 64 output samples and window  update the ringbuffer index  #ifdef SBR_LOW_POWER  qmf subsample l  shift buffer v  buffer is not shifted, we are using a ringbuffer memmove(qmfs->v + 64, qmfs->v, (640-64)*sizeof(real_t)); calculate 64 samples  complex pre-twiddle  transform  calculate 32 output samples and window  update ringbuffer index  qmf subsample l  shift buffer v  buffer is not shifted, we use double ringbuffer memmove(qmfs->v + 128, qmfs->v, (1280-128)*sizeof(real_t)); calculate 128 samples  dct4_kernel is DCT_IV without reordering which is done before and after FFT calculate 64 output samples and window  update ringbuffer index  #ifdef SBR_LOW_POWER  #ifdef SBR_DEC 