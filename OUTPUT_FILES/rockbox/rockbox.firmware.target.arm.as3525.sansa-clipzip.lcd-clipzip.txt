**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 Bertrik Sikken
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** the detected lcd type (0 or 1)  whether the lcd is currently enabled or not  must be on to write regs  put it back how we found it  initialises the host lcd hardware, returns the lcd type  configure SSP  OF = 0x8  SCR, serial clock rate divider = 1  SPH, phase = 1  SPO, polarity = 1  FRF, frame format = motorola SPI  DSS, data size select = 8 bits  SOD, slave output disable = 1  MS, master/slave = master  SSE, synchronous serial port enabled = true  LBM, loopback mode = normal  disable interrupts  disable DMA  GPIO A3 is ??? but needs to be set  configure GPIO B2 (lcd D/C#) as output  configure GPIO B3 (lcd type detect) as input  configure GPIO A5 (lcd reset#) as output and perform lcd reset  detect lcd type on GPIO B3  writes a command byte to the LCD  wait until not busy  LCD command mode  write data  wait until not busy  LCD data mode  writes a data byte to the LCD  wait while transmit FIFO  write data  writes both a command and data value to the lcd   Initialises lcd type 0
 *  This appears to be a WiseChip OLED display controlled by a SEPS114A.
  SOFT_RESET  STANDBY_ON_OFF  actually only 5 ms needed  STANDBY_ON_OFF  actually only 5 ms needed  ANALOG_CONTROL  ?  ?  DISCHARGE_TIME  OSC_ADJUST  ROW_OVERLAP  DISPLAY_X1  DISPLAY_X2  DISPLAY_Y1  DISPLAY_Y2  RGB_IF  RGB_POL  DISPLAY_MODE_CONTROL  CPU_IF  MEMORY_WRITE_READ  ROW_SCAN_DIRECTION  ROW_SCAN_MODE  PEAK_PULSE_DELAY  PEAK_PULSE_WIDTH_R  PEAK_PULSE_WIDTH_G  PEAK_PULSE_WIDTH_B  PRECHARGE_CURRENT_R  PRECHARGE_CURRENT_G  PRECHARGE_CURRENT_B  COLUMN_CURRENT_R  COLUMN_CURRENT_G  COLUMN_CURRENT_B  writes a table entry (for type 1 LCDs)  Initialises lcd type 1
 * This appears to be a Visionox OLED display, with an unknown controller
  5-bit curve  6-bit curve  5-bit curve  0x08 results in BGR colour  enables/disables the lcd  STANDBY_ON_OFF  DISP_ON_OFF  SCREEN_SAVER_MODE  SCREEN_SAVER_CONTROL  SCREEN_SAVER_CONTROL  returns true if the lcd is enabled  HAVE_LCD_ENABLE  initialises the lcd  sets up the lcd to receive frame buffer data  MEM_X1  MEM_X2  MEM_Y1  MEM_Y2  DDRAM_DATA_ACCESS_PORT  sets the brightness of the OLED  COLUMN_CURRENT_R  COLUMN_CURRENT_G  COLUMN_CURRENT_B  Writes framebuffer data  Updates a fraction of the display.  check rectangle  rectangle is outside visible display, do nothing  update entire horizontal strip for display type 0 (wisechip)  correct rectangle (if necessary)  setup GRAM write window  write to GRAM  updates the entire lcd **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 Bertrik Sikken
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** the detected lcd type (0 or 1)  whether the lcd is currently enabled or not  must be on to write regs  put it back how we found it  initialises the host lcd hardware, returns the lcd type  configure SSP  OF = 0x8  SCR, serial clock rate divider = 1  SPH, phase = 1  SPO, polarity = 1  FRF, frame format = motorola SPI  DSS, data size select = 8 bits  SOD, slave output disable = 1  MS, master/slave = master  SSE, synchronous serial port enabled = true  LBM, loopback mode = normal  disable interrupts  disable DMA  GPIO A3 is ??? but needs to be set  configure GPIO B2 (lcd D/C#) as output  configure GPIO B3 (lcd type detect) as input  configure GPIO A5 (lcd reset#) as output and perform lcd reset  detect lcd type on GPIO B3  writes a command byte to the LCD  wait until not busy  LCD command mode  write data  wait until not busy  LCD data mode  writes a data byte to the LCD  wait while transmit FIFO  write data  writes both a command and data value to the lcd   Initialises lcd type 0
 *  This appears to be a WiseChip OLED display controlled by a SEPS114A.
  SOFT_RESET  STANDBY_ON_OFF  actually only 5 ms needed  STANDBY_ON_OFF  actually only 5 ms needed  ANALOG_CONTROL  ?  ?  DISCHARGE_TIME  OSC_ADJUST  ROW_OVERLAP  DISPLAY_X1  DISPLAY_X2  DISPLAY_Y1  DISPLAY_Y2  RGB_IF  RGB_POL  DISPLAY_MODE_CONTROL  CPU_IF  MEMORY_WRITE_READ  ROW_SCAN_DIRECTION  ROW_SCAN_MODE  PEAK_PULSE_DELAY  PEAK_PULSE_WIDTH_R  PEAK_PULSE_WIDTH_G  PEAK_PULSE_WIDTH_B  PRECHARGE_CURRENT_R  PRECHARGE_CURRENT_G  PRECHARGE_CURRENT_B  COLUMN_CURRENT_R  COLUMN_CURRENT_G  COLUMN_CURRENT_B  writes a table entry (for type 1 LCDs)  Initialises lcd type 1
 * This appears to be a Visionox OLED display, with an unknown controller
  5-bit curve  6-bit curve  5-bit curve  0x08 results in BGR colour  enables/disables the lcd  STANDBY_ON_OFF  DISP_ON_OFF  SCREEN_SAVER_MODE  SCREEN_SAVER_CONTROL  SCREEN_SAVER_CONTROL  returns true if the lcd is enabled  HAVE_LCD_ENABLE  initialises the lcd  sets up the lcd to receive frame buffer data  MEM_X1  MEM_X2  MEM_Y1  MEM_Y2  DDRAM_DATA_ACCESS_PORT  sets the brightness of the OLED  COLUMN_CURRENT_R  COLUMN_CURRENT_G  COLUMN_CURRENT_B  Writes framebuffer data  Updates a fraction of the display.  check rectangle  rectangle is outside visible display, do nothing  update entire horizontal strip for display type 0 (wisechip)  correct rectangle (if necessary)  setup GRAM write window  write to GRAM  updates the entire lcd **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 Bertrik Sikken
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** the detected lcd type (0 or 1)  whether the lcd is currently enabled or not  must be on to write regs  put it back how we found it  initialises the host lcd hardware, returns the lcd type  configure SSP  OF = 0x8  SCR, serial clock rate divider = 1  SPH, phase = 1  SPO, polarity = 1  FRF, frame format = motorola SPI  DSS, data size select = 8 bits  SOD, slave output disable = 1  MS, master/slave = master  SSE, synchronous serial port enabled = true  LBM, loopback mode = normal  disable interrupts  disable DMA  GPIO A3 is ??? but needs to be set  configure GPIO B2 (lcd D/C#) as output  configure GPIO B3 (lcd type detect) as input  configure GPIO A5 (lcd reset#) as output and perform lcd reset  detect lcd type on GPIO B3  writes a command byte to the LCD  wait until not busy  LCD command mode  write data  wait until not busy  LCD data mode  writes a data byte to the LCD  wait while transmit FIFO  write data  writes both a command and data value to the lcd   Initialises lcd type 0
 *  This appears to be a WiseChip OLED display controlled by a SEPS114A.
  SOFT_RESET  STANDBY_ON_OFF  actually only 5 ms needed  STANDBY_ON_OFF  actually only 5 ms needed  ANALOG_CONTROL  ?  ?  DISCHARGE_TIME  OSC_ADJUST  ROW_OVERLAP  DISPLAY_X1  DISPLAY_X2  DISPLAY_Y1  DISPLAY_Y2  RGB_IF  RGB_POL  DISPLAY_MODE_CONTROL  CPU_IF  MEMORY_WRITE_READ  ROW_SCAN_DIRECTION  ROW_SCAN_MODE  PEAK_PULSE_DELAY  PEAK_PULSE_WIDTH_R  PEAK_PULSE_WIDTH_G  PEAK_PULSE_WIDTH_B  PRECHARGE_CURRENT_R  PRECHARGE_CURRENT_G  PRECHARGE_CURRENT_B  COLUMN_CURRENT_R  COLUMN_CURRENT_G  COLUMN_CURRENT_B  writes a table entry (for type 1 LCDs)  Initialises lcd type 1
 * This appears to be a Visionox OLED display, with an unknown controller
  5-bit curve  6-bit curve  5-bit curve  0x08 results in BGR colour  enables/disables the lcd  STANDBY_ON_OFF  DISP_ON_OFF  SCREEN_SAVER_MODE  SCREEN_SAVER_CONTROL  SCREEN_SAVER_CONTROL  returns true if the lcd is enabled  HAVE_LCD_ENABLE  initialises the lcd  sets up the lcd to receive frame buffer data  MEM_X1  MEM_X2  MEM_Y1  MEM_Y2  DDRAM_DATA_ACCESS_PORT  sets the brightness of the OLED  COLUMN_CURRENT_R  COLUMN_CURRENT_G  COLUMN_CURRENT_B  Writes framebuffer data  Updates a fraction of the display.  check rectangle  rectangle is outside visible display, do nothing  update entire horizontal strip for display type 0 (wisechip)  correct rectangle (if necessary)  setup GRAM write window  write to GRAM  updates the entire lcd 