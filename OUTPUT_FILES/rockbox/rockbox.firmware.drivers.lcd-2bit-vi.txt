**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Jens Arnold
 *
 * Rockbox driver for 2bit vertically interleaved LCDs
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** mem*()  Not compiling for remote - define macros for main LCD. ** globals ** LCD init ** parameter handling ** When compiling for remote LCD and the main LCD is colour. 
     *                                     |R|
     * |Y'| = |0.299000 0.587000 0.114000| |G|
     *                                     |B|
     ** low-level drawing functions ** 'mask' and 'bits' contain 2 bits per pixel ** drawing functions ** Clear the whole display  Clear the current viewport  Invert the INVERSEVID bit and set basic mode to SOLID  Set a single pixel  Draw a line  DEBUGF(LCDNAME "drawline() called for vertical line - optimisation.\n");  DEBUGF(LCDNAME "drawline() called for horizontal line - optimisation.\n");  include endpoints  Draw a horizontal line (optimised)  direction flip ******************* In viewport clipping ********************* nothing to draw?  adjust x1 and y to viewport ******************** Viewport on screen clipping ******************* nothing to draw?  clipping  Draw a vertical line (optimised)  direction flip ******************* In viewport clipping ********************* nothing to draw?  adjust for viewport ******************** Viewport on screen clipping ******************* nothing to draw?  clipping  Draw a rectangular box  Fill a rectangular area ******************* In viewport clipping ********************* nothing to draw?  adjust for viewport ******************** Viewport on screen clipping ******************* nothing to draw?  clip image in viewport in screen  About Rockbox' internal monochrome bitmap format:
 *
 * A bitmap contains one bit for every pixel that defines if that pixel is
 * black (1) or white (0). Bits within a byte are arranged vertically, LSB
 * at top.
 * The bytes are stored in row-major order, with byte 0 being top left,
 * byte 1 2nd from left etc. The first row of bytes defines pixel rows
 * 0..7, the second row defines pixel row 8..15 etc.
 *
 * This is similar to the internal lcd hw format.  Draw a partial monochrome bitmap ******************* Image in viewport clipping ********************* nothing to draw?  adjust for viewport ******************** Viewport on screen clipping ******************* nothing to draw?  clip image in viewport in screen  move starting point  not byte-doubled here because shift+src_y can be > 7  Draw a full monochrome bitmap  About Rockbox' internal native bitmap format:
 *
 * A bitmap contains one bit in each byte of a pair of bytes for every pixel.
 * 00 = white, 01 = light grey, 10 = dark grey, 11 = black. Bits within a byte
 * are arranged vertically, LSB at top.
 * The pairs of bytes are stored as shorts, in row-major order, with word 0
 * being top left, word 1 2nd from left etc. The first row of words defines
 * pixel rows 0..7, the second row defines pixel row 8..15 etc.
 *
 * This is the same as the internal lcd hw format.  Draw a partial native bitmap ******************* Image in viewport clipping ********************* nothing to draw?  adjust for viewport ******************** Viewport on screen clipping ******************* nothing to draw?  clip image in viewport in screen  move starting point  not byte-doubled here because shift+src_y can be > 7  Draw a full native bitmap **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Jens Arnold
 *
 * Rockbox driver for 2bit vertically interleaved LCDs
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** mem*()  Not compiling for remote - define macros for main LCD. ** globals ** LCD init ** parameter handling ** When compiling for remote LCD and the main LCD is colour. 
     *                                     |R|
     * |Y'| = |0.299000 0.587000 0.114000| |G|
     *                                     |B|
     ** low-level drawing functions ** 'mask' and 'bits' contain 2 bits per pixel ** drawing functions ** Clear the whole display  Clear the current viewport  Invert the INVERSEVID bit and set basic mode to SOLID  Set a single pixel  Draw a line  DEBUGF(LCDNAME "drawline() called for vertical line - optimisation.\n");  DEBUGF(LCDNAME "drawline() called for horizontal line - optimisation.\n");  include endpoints  Draw a horizontal line (optimised)  direction flip ******************* In viewport clipping ********************* nothing to draw?  adjust x1 and y to viewport ******************** Viewport on screen clipping ******************* nothing to draw?  clipping  Draw a vertical line (optimised)  direction flip ******************* In viewport clipping ********************* nothing to draw?  adjust for viewport ******************** Viewport on screen clipping ******************* nothing to draw?  clipping  Draw a rectangular box  Fill a rectangular area ******************* In viewport clipping ********************* nothing to draw?  adjust for viewport ******************** Viewport on screen clipping ******************* nothing to draw?  clip image in viewport in screen  About Rockbox' internal monochrome bitmap format:
 *
 * A bitmap contains one bit for every pixel that defines if that pixel is
 * black (1) or white (0). Bits within a byte are arranged vertically, LSB
 * at top.
 * The bytes are stored in row-major order, with byte 0 being top left,
 * byte 1 2nd from left etc. The first row of bytes defines pixel rows
 * 0..7, the second row defines pixel row 8..15 etc.
 *
 * This is similar to the internal lcd hw format.  Draw a partial monochrome bitmap ******************* Image in viewport clipping ********************* nothing to draw?  adjust for viewport ******************** Viewport on screen clipping ******************* nothing to draw?  clip image in viewport in screen  move starting point  not byte-doubled here because shift+src_y can be > 7  Draw a full monochrome bitmap  About Rockbox' internal native bitmap format:
 *
 * A bitmap contains one bit in each byte of a pair of bytes for every pixel.
 * 00 = white, 01 = light grey, 10 = dark grey, 11 = black. Bits within a byte
 * are arranged vertically, LSB at top.
 * The pairs of bytes are stored as shorts, in row-major order, with word 0
 * being top left, word 1 2nd from left etc. The first row of words defines
 * pixel rows 0..7, the second row defines pixel row 8..15 etc.
 *
 * This is the same as the internal lcd hw format.  Draw a partial native bitmap ******************* Image in viewport clipping ********************* nothing to draw?  adjust for viewport ******************** Viewport on screen clipping ******************* nothing to draw?  clip image in viewport in screen  move starting point  not byte-doubled here because shift+src_y can be > 7  Draw a full native bitmap **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Jens Arnold
 *
 * Rockbox driver for 2bit vertically interleaved LCDs
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** mem*()  Not compiling for remote - define macros for main LCD. ** globals ** LCD init ** parameter handling ** When compiling for remote LCD and the main LCD is colour. 
     *                                     |R|
     * |Y'| = |0.299000 0.587000 0.114000| |G|
     *                                     |B|
     ** low-level drawing functions ** 'mask' and 'bits' contain 2 bits per pixel ** drawing functions ** Clear the whole display  Clear the current viewport  Invert the INVERSEVID bit and set basic mode to SOLID  Set a single pixel  Draw a line  DEBUGF(LCDNAME "drawline() called for vertical line - optimisation.\n");  DEBUGF(LCDNAME "drawline() called for horizontal line - optimisation.\n");  include endpoints  Draw a horizontal line (optimised)  direction flip ******************* In viewport clipping ********************* nothing to draw?  adjust x1 and y to viewport ******************** Viewport on screen clipping ******************* nothing to draw?  clipping  Draw a vertical line (optimised)  direction flip ******************* In viewport clipping ********************* nothing to draw?  adjust for viewport ******************** Viewport on screen clipping ******************* nothing to draw?  clipping  Draw a rectangular box  Fill a rectangular area ******************* In viewport clipping ********************* nothing to draw?  adjust for viewport ******************** Viewport on screen clipping ******************* nothing to draw?  clip image in viewport in screen  About Rockbox' internal monochrome bitmap format:
 *
 * A bitmap contains one bit for every pixel that defines if that pixel is
 * black (1) or white (0). Bits within a byte are arranged vertically, LSB
 * at top.
 * The bytes are stored in row-major order, with byte 0 being top left,
 * byte 1 2nd from left etc. The first row of bytes defines pixel rows
 * 0..7, the second row defines pixel row 8..15 etc.
 *
 * This is similar to the internal lcd hw format.  Draw a partial monochrome bitmap ******************* Image in viewport clipping ********************* nothing to draw?  adjust for viewport ******************** Viewport on screen clipping ******************* nothing to draw?  clip image in viewport in screen  move starting point  not byte-doubled here because shift+src_y can be > 7  Draw a full monochrome bitmap  About Rockbox' internal native bitmap format:
 *
 * A bitmap contains one bit in each byte of a pair of bytes for every pixel.
 * 00 = white, 01 = light grey, 10 = dark grey, 11 = black. Bits within a byte
 * are arranged vertically, LSB at top.
 * The pairs of bytes are stored as shorts, in row-major order, with word 0
 * being top left, word 1 2nd from left etc. The first row of words defines
 * pixel rows 0..7, the second row defines pixel row 8..15 etc.
 *
 * This is the same as the internal lcd hw format.  Draw a partial native bitmap ******************* Image in viewport clipping ********************* nothing to draw?  adjust for viewport ******************** Viewport on screen clipping ******************* nothing to draw?  clip image in viewport in screen  move starting point  not byte-doubled here because shift+src_y can be > 7  Draw a full native bitmap 