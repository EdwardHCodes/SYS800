
FUNCTION
        <<memchr>>---search for character in memory

INDEX
        memchr

ANSI_SYNOPSIS
        #include <string.h>
        void * memchr(const void *<[s1]>, int <[c]>, size_t <[n]>);

TRAD_SYNOPSIS
        #include <string.h>
        void * memchr(<[s1]>, <[c]>, <[n]>);
        void *<[string]>;
        int *<[c]>;
        size_t *<[n]>;

DESCRIPTION
        This function scans the first <[n]> bytes of the memory pointed
        to by <[s1]> for the character <[c]> (converted to a char).

RETURNS
        Returns a pointer to the matching byte, or a null pointer if
        <[c]> does not occur in <[s1]>.

PORTABILITY
<<memchr>> is ANSI C.

<<memchr>> requires no supporting OS subroutines.

QUICKREF
        memchr ansi pure
 for _DEFUN  Nonzero if X is not aligned on a "long" boundary.   How many bytes are loaded each iteration of the word copy loop.   Nonzero if X (a long int) contains a NULL byte.  DETECTCHAR returns nonzero if (long)X contains the byte used 
   to fill (long)MASK.  The block of bytes currently pointed to by aligned_addr
         may contain the target character or there may be less than
         LBLOCKSIZE bytes left to search. We check the last few
         bytes using the bytewise search.   not PREFER_SIZE_OVER_SPEED 
FUNCTION
        <<memchr>>---search for character in memory

INDEX
        memchr

ANSI_SYNOPSIS
        #include <string.h>
        void * memchr(const void *<[s1]>, int <[c]>, size_t <[n]>);

TRAD_SYNOPSIS
        #include <string.h>
        void * memchr(<[s1]>, <[c]>, <[n]>);
        void *<[string]>;
        int *<[c]>;
        size_t *<[n]>;

DESCRIPTION
        This function scans the first <[n]> bytes of the memory pointed
        to by <[s1]> for the character <[c]> (converted to a char).

RETURNS
        Returns a pointer to the matching byte, or a null pointer if
        <[c]> does not occur in <[s1]>.

PORTABILITY
<<memchr>> is ANSI C.

<<memchr>> requires no supporting OS subroutines.

QUICKREF
        memchr ansi pure
 for _DEFUN  Nonzero if X is not aligned on a "long" boundary.   How many bytes are loaded each iteration of the word copy loop.   Nonzero if X (a long int) contains a NULL byte.  DETECTCHAR returns nonzero if (long)X contains the byte used 
   to fill (long)MASK.  The block of bytes currently pointed to by aligned_addr
         may contain the target character or there may be less than
         LBLOCKSIZE bytes left to search. We check the last few
         bytes using the bytewise search.   not PREFER_SIZE_OVER_SPEED 
FUNCTION
        <<memchr>>---search for character in memory

INDEX
        memchr

ANSI_SYNOPSIS
        #include <string.h>
        void * memchr(const void *<[s1]>, int <[c]>, size_t <[n]>);

TRAD_SYNOPSIS
        #include <string.h>
        void * memchr(<[s1]>, <[c]>, <[n]>);
        void *<[string]>;
        int *<[c]>;
        size_t *<[n]>;

DESCRIPTION
        This function scans the first <[n]> bytes of the memory pointed
        to by <[s1]> for the character <[c]> (converted to a char).

RETURNS
        Returns a pointer to the matching byte, or a null pointer if
        <[c]> does not occur in <[s1]>.

PORTABILITY
<<memchr>> is ANSI C.

<<memchr>> requires no supporting OS subroutines.

QUICKREF
        memchr ansi pure
 for _DEFUN  Nonzero if X is not aligned on a "long" boundary.   How many bytes are loaded each iteration of the word copy loop.   Nonzero if X (a long int) contains a NULL byte.  DETECTCHAR returns nonzero if (long)X contains the byte used 
   to fill (long)MASK.  The block of bytes currently pointed to by aligned_addr
         may contain the target character or there may be less than
         LBLOCKSIZE bytes left to search. We check the last few
         bytes using the bytewise search.   not PREFER_SIZE_OVER_SPEED 