**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007-2009 Joshua Simmons <mud at majidejima dot com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** go to the node before the next important node (move/add
       stone/variation) this is the right place to look for children, add
       variations, whatever. (if there is no next, we're already at the
       right place)  true means forward  don't have to do anything to set up temp as the right variation
           number  now either there were no children, or none matched the one we
           want so we have to add a new one  first test if it's legal.  we don't do this above because SGF
           files are allowed to have illegal moves in them, and it seems
           to make sense to allow traversing those variations without
           making the user change to a different play_mode  TODO: add code to completely remove the child which we
               added, and then uncomment the following line.  probably
               doens't matter much since we're out of memory, but
               whatever
               free_storage_sgf(handle);  now, one way or another temp has been set to the child variation
       number that we should follow, so all we need to do is "choose" it
       and redo_node_sgf  free up a superfluous prop  we have to always delete the old one and conditionally create a
           new one (instead of trying to reuse the old one by changing
           the type of it) because if we don't, our invariant with
           respect to like-properties being grouped together in the
           property list can easily be violated  else do nothing  now we've saved the information about what the board was
           originally like, we can do the actual set  test if what we currently did just returned the board back to
           its original for this position.  if so, we DON'T create a new
           PROP_ADD_*, because it's not needed (we already deleted the old
           one, so in that case we just return)  do nothing, set back to original  we're not set back to original, so add a prop for it  we have to make a child variation and add stones in it  go to the node before the next important node (move/add
           stone/variation) this is the right place to look for children,
           add variations, whatever. (if there is no next, we're already
           at the right place)  true means forward  TODO: add code to completely remove the child which we
               added, and then uncomment the following line.  probably
               doens't matter much since we're out of memory, but
               whatever
               free_storage_sgf(handle);  now, "choose" the variation that we just added  free up a superfluous prop  and follow to our choice, returning since we already did the
           work  if we undid a ko threat, we need to figure out what the ko_pos is
       there's no simple way to do this except to undo one /more/ move,
       and then redo back to this location. (we could store it, but this
       isn't that bad) Note: this doesn't need to recurse because we don't
       care what previous move's ko positions were (since the tree is
       already set in stone basically, it wouldn't change anything).  now we're backed up to the previous move before our destination
           so, let's go forward again until we get to the node we were at
          if there is a move in this node, move the screen so that it is
       visible  refuse to undo the initial SGF node, which is tree_head if
           handicap == 0 or 1.  If handicap >= 2, start_node is the node
           with the handicap crap and added moves on it.  don't let the
           user undo past that  test for added stones!  zero out the undo information and set the ko threat flag to the
           correct value  else do nothing  do captures on the 4 cardinal directions, if the opponent
               stones are breathless  then check for suicide  now check for a ko, with the following requirements: 1) we
               captured one opponent stone 2) we placed one stone (not
               connected to a larger group) 3) we have one liberty  We passed all tests, so there is a ko to set. The
                   ko_pos is our single liberty location  this will move the cursor near this move if it was off the
               screen  newlines display badly in rb->splash, so replace them
             * with spaces
              TODO: we could delete do-nothing PROP_ADD_*s here  else, do nothing  check if the new_prop goes at the start  new_prop goes after the current one either because we're at
               the end of the props list, or because we're adding a prop
               after the ones of its same type  there was no prop to set, so we need to add one  make output a string, the lazy way  otherwise, fall through  we reached the end of the part we can put our comment
                   in, but there's more comment to write, so we should
                   start again, this time making a new comment (the old
                   becomes wasted space in unhandled_fd, but it doesn't
                   really hurt anything except extra space on disk  fall through  finish out the record  and put the reference into the unhandled_fd into the comment prop  returns true if it finds an important node  logic is different here because the first node in a tree is a valid
   place to go  go backwards to the next important node (move/add
           stone/variation/etc.)  go forward to the next move/add stone/variation/etc. node  variations are at the beginning of the prop list  set true later in a loop if we want a prop in the first variation
       which means that we shouldn't check that branch for children  now we're at a branch node which we should go to the next variation
       (we were at the "chosen" one, so go to the next one after that,
       (mod the number of variations))  the lowest it can be, since 1 isn't it  these marks are stupid and nobody uses them.  if we could find
           a good way to draw them we could do them anyway, but no reason
           to unless it's easy  now, add the actual stones  first four go in the corners  now done with first four, if only one left it goes in the center  done with first 6  done with first eight, there can only be the tengen remaining  meaningless **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007-2009 Joshua Simmons <mud at majidejima dot com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** go to the node before the next important node (move/add
       stone/variation) this is the right place to look for children, add
       variations, whatever. (if there is no next, we're already at the
       right place)  true means forward  don't have to do anything to set up temp as the right variation
           number  now either there were no children, or none matched the one we
           want so we have to add a new one  first test if it's legal.  we don't do this above because SGF
           files are allowed to have illegal moves in them, and it seems
           to make sense to allow traversing those variations without
           making the user change to a different play_mode  TODO: add code to completely remove the child which we
               added, and then uncomment the following line.  probably
               doens't matter much since we're out of memory, but
               whatever
               free_storage_sgf(handle);  now, one way or another temp has been set to the child variation
       number that we should follow, so all we need to do is "choose" it
       and redo_node_sgf  free up a superfluous prop  we have to always delete the old one and conditionally create a
           new one (instead of trying to reuse the old one by changing
           the type of it) because if we don't, our invariant with
           respect to like-properties being grouped together in the
           property list can easily be violated  else do nothing  now we've saved the information about what the board was
           originally like, we can do the actual set  test if what we currently did just returned the board back to
           its original for this position.  if so, we DON'T create a new
           PROP_ADD_*, because it's not needed (we already deleted the old
           one, so in that case we just return)  do nothing, set back to original  we're not set back to original, so add a prop for it  we have to make a child variation and add stones in it  go to the node before the next important node (move/add
           stone/variation) this is the right place to look for children,
           add variations, whatever. (if there is no next, we're already
           at the right place)  true means forward  TODO: add code to completely remove the child which we
               added, and then uncomment the following line.  probably
               doens't matter much since we're out of memory, but
               whatever
               free_storage_sgf(handle);  now, "choose" the variation that we just added  free up a superfluous prop  and follow to our choice, returning since we already did the
           work  if we undid a ko threat, we need to figure out what the ko_pos is
       there's no simple way to do this except to undo one /more/ move,
       and then redo back to this location. (we could store it, but this
       isn't that bad) Note: this doesn't need to recurse because we don't
       care what previous move's ko positions were (since the tree is
       already set in stone basically, it wouldn't change anything).  now we're backed up to the previous move before our destination
           so, let's go forward again until we get to the node we were at
          if there is a move in this node, move the screen so that it is
       visible  refuse to undo the initial SGF node, which is tree_head if
           handicap == 0 or 1.  If handicap >= 2, start_node is the node
           with the handicap crap and added moves on it.  don't let the
           user undo past that  test for added stones!  zero out the undo information and set the ko threat flag to the
           correct value  else do nothing  do captures on the 4 cardinal directions, if the opponent
               stones are breathless  then check for suicide  now check for a ko, with the following requirements: 1) we
               captured one opponent stone 2) we placed one stone (not
               connected to a larger group) 3) we have one liberty  We passed all tests, so there is a ko to set. The
                   ko_pos is our single liberty location  this will move the cursor near this move if it was off the
               screen  newlines display badly in rb->splash, so replace them
             * with spaces
              TODO: we could delete do-nothing PROP_ADD_*s here  else, do nothing  check if the new_prop goes at the start  new_prop goes after the current one either because we're at
               the end of the props list, or because we're adding a prop
               after the ones of its same type  there was no prop to set, so we need to add one  make output a string, the lazy way  otherwise, fall through  we reached the end of the part we can put our comment
                   in, but there's more comment to write, so we should
                   start again, this time making a new comment (the old
                   becomes wasted space in unhandled_fd, but it doesn't
                   really hurt anything except extra space on disk  fall through  finish out the record  and put the reference into the unhandled_fd into the comment prop  returns true if it finds an important node  logic is different here because the first node in a tree is a valid
   place to go  go backwards to the next important node (move/add
           stone/variation/etc.)  go forward to the next move/add stone/variation/etc. node  variations are at the beginning of the prop list  set true later in a loop if we want a prop in the first variation
       which means that we shouldn't check that branch for children  now we're at a branch node which we should go to the next variation
       (we were at the "chosen" one, so go to the next one after that,
       (mod the number of variations))  the lowest it can be, since 1 isn't it  these marks are stupid and nobody uses them.  if we could find
           a good way to draw them we could do them anyway, but no reason
           to unless it's easy  now, add the actual stones  first four go in the corners  now done with first four, if only one left it goes in the center  done with first 6  done with first eight, there can only be the tengen remaining  meaningless **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007-2009 Joshua Simmons <mud at majidejima dot com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** go to the node before the next important node (move/add
       stone/variation) this is the right place to look for children, add
       variations, whatever. (if there is no next, we're already at the
       right place)  true means forward  don't have to do anything to set up temp as the right variation
           number  now either there were no children, or none matched the one we
           want so we have to add a new one  first test if it's legal.  we don't do this above because SGF
           files are allowed to have illegal moves in them, and it seems
           to make sense to allow traversing those variations without
           making the user change to a different play_mode  TODO: add code to completely remove the child which we
               added, and then uncomment the following line.  probably
               doens't matter much since we're out of memory, but
               whatever
               free_storage_sgf(handle);  now, one way or another temp has been set to the child variation
       number that we should follow, so all we need to do is "choose" it
       and redo_node_sgf  free up a superfluous prop  we have to always delete the old one and conditionally create a
           new one (instead of trying to reuse the old one by changing
           the type of it) because if we don't, our invariant with
           respect to like-properties being grouped together in the
           property list can easily be violated  else do nothing  now we've saved the information about what the board was
           originally like, we can do the actual set  test if what we currently did just returned the board back to
           its original for this position.  if so, we DON'T create a new
           PROP_ADD_*, because it's not needed (we already deleted the old
           one, so in that case we just return)  do nothing, set back to original  we're not set back to original, so add a prop for it  we have to make a child variation and add stones in it  go to the node before the next important node (move/add
           stone/variation) this is the right place to look for children,
           add variations, whatever. (if there is no next, we're already
           at the right place)  true means forward  TODO: add code to completely remove the child which we
               added, and then uncomment the following line.  probably
               doens't matter much since we're out of memory, but
               whatever
               free_storage_sgf(handle);  now, "choose" the variation that we just added  free up a superfluous prop  and follow to our choice, returning since we already did the
           work  if we undid a ko threat, we need to figure out what the ko_pos is
       there's no simple way to do this except to undo one /more/ move,
       and then redo back to this location. (we could store it, but this
       isn't that bad) Note: this doesn't need to recurse because we don't
       care what previous move's ko positions were (since the tree is
       already set in stone basically, it wouldn't change anything).  now we're backed up to the previous move before our destination
           so, let's go forward again until we get to the node we were at
          if there is a move in this node, move the screen so that it is
       visible  refuse to undo the initial SGF node, which is tree_head if
           handicap == 0 or 1.  If handicap >= 2, start_node is the node
           with the handicap crap and added moves on it.  don't let the
           user undo past that  test for added stones!  zero out the undo information and set the ko threat flag to the
           correct value  else do nothing  do captures on the 4 cardinal directions, if the opponent
               stones are breathless  then check for suicide  now check for a ko, with the following requirements: 1) we
               captured one opponent stone 2) we placed one stone (not
               connected to a larger group) 3) we have one liberty  We passed all tests, so there is a ko to set. The
                   ko_pos is our single liberty location  this will move the cursor near this move if it was off the
               screen  newlines display badly in rb->splash, so replace them
             * with spaces
              TODO: we could delete do-nothing PROP_ADD_*s here  else, do nothing  check if the new_prop goes at the start  new_prop goes after the current one either because we're at
               the end of the props list, or because we're adding a prop
               after the ones of its same type  there was no prop to set, so we need to add one  make output a string, the lazy way  otherwise, fall through  we reached the end of the part we can put our comment
                   in, but there's more comment to write, so we should
                   start again, this time making a new comment (the old
                   becomes wasted space in unhandled_fd, but it doesn't
                   really hurt anything except extra space on disk  fall through  finish out the record  and put the reference into the unhandled_fd into the comment prop  returns true if it finds an important node  logic is different here because the first node in a tree is a valid
   place to go  go backwards to the next important node (move/add
           stone/variation/etc.)  go forward to the next move/add stone/variation/etc. node  variations are at the beginning of the prop list  set true later in a loop if we want a prop in the first variation
       which means that we shouldn't check that branch for children  now we're at a branch node which we should go to the next variation
       (we were at the "chosen" one, so go to the next one after that,
       (mod the number of variations))  the lowest it can be, since 1 isn't it  these marks are stupid and nobody uses them.  if we could find
           a good way to draw them we could do them anyway, but no reason
           to unless it's easy  now, add the actual stones  first four go in the corners  now done with first four, if only one left it goes in the center  done with first 6  done with first eight, there can only be the tengen remaining  meaningless 