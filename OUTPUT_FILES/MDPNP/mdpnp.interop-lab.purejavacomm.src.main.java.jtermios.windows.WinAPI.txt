
 * Copyright (c) 2011, Kustaa Nyholm / SpareTimeLabs
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list 
 * of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright notice, this 
 * list of conditions and the following disclaimer in the documentation and/or other
 * materials provided with the distribution.
 *  
 * Neither the name of the Kustaa Nyholm or SpareTimeLabs nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 *
 * This WinAPI class implements a simple wrapper API to access the Windows COM
 * ports from Java.
 * 
 * The purpose is to follow reasonably closely the WIN32 API so that COM port
 * related C-code can be ported to Java almost as-is with little changes when
 * this class is statically imported.
 * <p>
 * This is a pure lightweight wrapper around WIN32 API calls with no added
 * syntactic sugar, functionality or niceties.
 * <p>
 * Here is a rude example:
 * 
 * <pre>
 * <code>
 * import static jtermios.windows.WinAPI.*;
 * ...
 *    byte[] buffer = "Hello World".getBytes();
 *    HANDLE hcomm = CreateFileA( "COM5:", GENERIC_READ |GENERIC_WRITE, 0, null, 0, 0, null );
 *    int[] wrtn = {0};
 *    WriteFile(hcomm, buffer, buffer.length, wrtn);
 *    CloseHandle(hcomm);
 * </code>
 * </pre>
 * 
 * Can't get much closer to C-code, what!
 * <p>
 * In addition to the basic open/close/read/write and setup operations this
 * class also makes available enough of the WIN32 Event API to make it possible
 * to use overlapped (asynchronous) I/O on COM ports.
 * 
 * <p>
 * Note that overlapped IO API is full of fine print. Especially worth
 * mentioning is that the OVERLAPPED structure cannot use autosync as it is
 * modified (by Windows) outside the function calls that use it. OVERLAPPED
 * takes care of not autosyncing but it is best to us the writeField() methods
 * to set fields of OVERLAPPED.
 * 
 * <pre>
 * <code>
 *    OVERLAPPED ovl = new OVERLAPPED();
 *    ovl.writeField("hEvent",CreateEvent(null, true, false, null));
 *   ...
 *    WriteFile(hComm, txm, txb.length, txn, ovl);
 *   ...
 *    GetOverlappedResult(hComm, ovl, txn, true);
 * </code>
 * </pre>
 * 
 * @author Kustaa Nyholm
 * 
  Moved to static per JNA recommendations This had to be separated out for Direct Mapping (no non-primative arrays) Added com.sun.jna.win32.W32APIOptions.ASCII_OPTIONS so we don't mix/match WString and String m_K32lib = (Windows_kernel32_lib) Native.loadLibrary("kernel32", Windows_kernel32_lib.class, com.sun.jna.win32.W32APIOptions.ASCII_OPTIONS); The following is to fix JNA's non-thread-local getLastError implementation Arrays are always initialized to zero values There seems to be very little rhyme or reason from which header file these come from in C, so I did not bother to keep track of the origin of these constants*
	 * Represent the Windows API struct OVERLAPPED. The constructor of this
	 * class does 'this.setAutoSynch(false)' because instances of this class
	 * should not be auto synchronized nor written as a whole, because Windows
	 * stores pointers to the actual memory representing this this struct and
	 * modifies it outside the function calls and copying (writing) the Java
	 * class fields to the actual memory will destroy those structures.
	 * 
	 * <p>
	 * To set the fields it recommend to use the 'writeField(String,Object)'. It
	 * is ok to read those fields of OVERLAPPED using Java dot-notatio. that
	 * have been written by Java code, but those field that Windows modifies
	 * should be accessed using 'readField(String)' or by invoking 'read()' on
	 * the object before accessing the fields with the java dot-notation.
	 * <p>
	 * For example this is acceptable usage for doing overlapped I/O (except
	 * this code does no error checking!):
	 * 
	 * <pre>
	 * <code>
	 *  OVERLAPPED ovl = new OVERLAPPED();
	 *  ovl.writeField("hEvent", CreateEvent(null, true, false, null));
	 *  ResetEvent(osReader.hEvent);
	 *  ReadFile(hComm, buffer, reqN, recN, ovl);
	 * </code>
	 * </pre>
	 * 
	 * @author nyholku
	 * 
	  No bit field mapping in JNA so define a flags field and masks for fFlags This is for synchronous writes only This can be used with synchronous as well as overlapped writes This is for synchronous reads only This can be used with synchronous as well as overlapped reads This prevents multiple retrying to create this function per JNA rules
 * Copyright (c) 2011, Kustaa Nyholm / SpareTimeLabs
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list 
 * of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright notice, this 
 * list of conditions and the following disclaimer in the documentation and/or other
 * materials provided with the distribution.
 *  
 * Neither the name of the Kustaa Nyholm or SpareTimeLabs nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 *
 * This WinAPI class implements a simple wrapper API to access the Windows COM
 * ports from Java.
 * 
 * The purpose is to follow reasonably closely the WIN32 API so that COM port
 * related C-code can be ported to Java almost as-is with little changes when
 * this class is statically imported.
 * <p>
 * This is a pure lightweight wrapper around WIN32 API calls with no added
 * syntactic sugar, functionality or niceties.
 * <p>
 * Here is a rude example:
 * 
 * <pre>
 * <code>
 * import static jtermios.windows.WinAPI.*;
 * ...
 *    byte[] buffer = "Hello World".getBytes();
 *    HANDLE hcomm = CreateFileA( "COM5:", GENERIC_READ |GENERIC_WRITE, 0, null, 0, 0, null );
 *    int[] wrtn = {0};
 *    WriteFile(hcomm, buffer, buffer.length, wrtn);
 *    CloseHandle(hcomm);
 * </code>
 * </pre>
 * 
 * Can't get much closer to C-code, what!
 * <p>
 * In addition to the basic open/close/read/write and setup operations this
 * class also makes available enough of the WIN32 Event API to make it possible
 * to use overlapped (asynchronous) I/O on COM ports.
 * 
 * <p>
 * Note that overlapped IO API is full of fine print. Especially worth
 * mentioning is that the OVERLAPPED structure cannot use autosync as it is
 * modified (by Windows) outside the function calls that use it. OVERLAPPED
 * takes care of not autosyncing but it is best to us the writeField() methods
 * to set fields of OVERLAPPED.
 * 
 * <pre>
 * <code>
 *    OVERLAPPED ovl = new OVERLAPPED();
 *    ovl.writeField("hEvent",CreateEvent(null, true, false, null));
 *   ...
 *    WriteFile(hComm, txm, txb.length, txn, ovl);
 *   ...
 *    GetOverlappedResult(hComm, ovl, txn, true);
 * </code>
 * </pre>
 * 
 * @author Kustaa Nyholm
 * 
  Moved to static per JNA recommendations This had to be separated out for Direct Mapping (no non-primative arrays) Added com.sun.jna.win32.W32APIOptions.ASCII_OPTIONS so we don't mix/match WString and String m_K32lib = (Windows_kernel32_lib) Native.loadLibrary("kernel32", Windows_kernel32_lib.class, com.sun.jna.win32.W32APIOptions.ASCII_OPTIONS); The following is to fix JNA's non-thread-local getLastError implementation Arrays are always initialized to zero values There seems to be very little rhyme or reason from which header file these come from in C, so I did not bother to keep track of the origin of these constants*
	 * Represent the Windows API struct OVERLAPPED. The constructor of this
	 * class does 'this.setAutoSynch(false)' because instances of this class
	 * should not be auto synchronized nor written as a whole, because Windows
	 * stores pointers to the actual memory representing this this struct and
	 * modifies it outside the function calls and copying (writing) the Java
	 * class fields to the actual memory will destroy those structures.
	 * 
	 * <p>
	 * To set the fields it recommend to use the 'writeField(String,Object)'. It
	 * is ok to read those fields of OVERLAPPED using Java dot-notatio. that
	 * have been written by Java code, but those field that Windows modifies
	 * should be accessed using 'readField(String)' or by invoking 'read()' on
	 * the object before accessing the fields with the java dot-notation.
	 * <p>
	 * For example this is acceptable usage for doing overlapped I/O (except
	 * this code does no error checking!):
	 * 
	 * <pre>
	 * <code>
	 *  OVERLAPPED ovl = new OVERLAPPED();
	 *  ovl.writeField("hEvent", CreateEvent(null, true, false, null));
	 *  ResetEvent(osReader.hEvent);
	 *  ReadFile(hComm, buffer, reqN, recN, ovl);
	 * </code>
	 * </pre>
	 * 
	 * @author nyholku
	 * 
	  No bit field mapping in JNA so define a flags field and masks for fFlags This is for synchronous writes only This can be used with synchronous as well as overlapped writes This is for synchronous reads only This can be used with synchronous as well as overlapped reads This prevents multiple retrying to create this function per JNA rules
 * Copyright (c) 2011, Kustaa Nyholm / SpareTimeLabs
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list 
 * of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright notice, this 
 * list of conditions and the following disclaimer in the documentation and/or other
 * materials provided with the distribution.
 *  
 * Neither the name of the Kustaa Nyholm or SpareTimeLabs nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 *
 * This WinAPI class implements a simple wrapper API to access the Windows COM
 * ports from Java.
 * 
 * The purpose is to follow reasonably closely the WIN32 API so that COM port
 * related C-code can be ported to Java almost as-is with little changes when
 * this class is statically imported.
 * <p>
 * This is a pure lightweight wrapper around WIN32 API calls with no added
 * syntactic sugar, functionality or niceties.
 * <p>
 * Here is a rude example:
 * 
 * <pre>
 * <code>
 * import static jtermios.windows.WinAPI.*;
 * ...
 *    byte[] buffer = "Hello World".getBytes();
 *    HANDLE hcomm = CreateFileA( "COM5:", GENERIC_READ |GENERIC_WRITE, 0, null, 0, 0, null );
 *    int[] wrtn = {0};
 *    WriteFile(hcomm, buffer, buffer.length, wrtn);
 *    CloseHandle(hcomm);
 * </code>
 * </pre>
 * 
 * Can't get much closer to C-code, what!
 * <p>
 * In addition to the basic open/close/read/write and setup operations this
 * class also makes available enough of the WIN32 Event API to make it possible
 * to use overlapped (asynchronous) I/O on COM ports.
 * 
 * <p>
 * Note that overlapped IO API is full of fine print. Especially worth
 * mentioning is that the OVERLAPPED structure cannot use autosync as it is
 * modified (by Windows) outside the function calls that use it. OVERLAPPED
 * takes care of not autosyncing but it is best to us the writeField() methods
 * to set fields of OVERLAPPED.
 * 
 * <pre>
 * <code>
 *    OVERLAPPED ovl = new OVERLAPPED();
 *    ovl.writeField("hEvent",CreateEvent(null, true, false, null));
 *   ...
 *    WriteFile(hComm, txm, txb.length, txn, ovl);
 *   ...
 *    GetOverlappedResult(hComm, ovl, txn, true);
 * </code>
 * </pre>
 * 
 * @author Kustaa Nyholm
 * 
  Moved to static per JNA recommendations This had to be separated out for Direct Mapping (no non-primative arrays) Added com.sun.jna.win32.W32APIOptions.ASCII_OPTIONS so we don't mix/match WString and String m_K32lib = (Windows_kernel32_lib) Native.loadLibrary("kernel32", Windows_kernel32_lib.class, com.sun.jna.win32.W32APIOptions.ASCII_OPTIONS); The following is to fix JNA's non-thread-local getLastError implementation Arrays are always initialized to zero values There seems to be very little rhyme or reason from which header file these come from in C, so I did not bother to keep track of the origin of these constants*
	 * Represent the Windows API struct OVERLAPPED. The constructor of this
	 * class does 'this.setAutoSynch(false)' because instances of this class
	 * should not be auto synchronized nor written as a whole, because Windows
	 * stores pointers to the actual memory representing this this struct and
	 * modifies it outside the function calls and copying (writing) the Java
	 * class fields to the actual memory will destroy those structures.
	 * 
	 * <p>
	 * To set the fields it recommend to use the 'writeField(String,Object)'. It
	 * is ok to read those fields of OVERLAPPED using Java dot-notatio. that
	 * have been written by Java code, but those field that Windows modifies
	 * should be accessed using 'readField(String)' or by invoking 'read()' on
	 * the object before accessing the fields with the java dot-notation.
	 * <p>
	 * For example this is acceptable usage for doing overlapped I/O (except
	 * this code does no error checking!):
	 * 
	 * <pre>
	 * <code>
	 *  OVERLAPPED ovl = new OVERLAPPED();
	 *  ovl.writeField("hEvent", CreateEvent(null, true, false, null));
	 *  ResetEvent(osReader.hEvent);
	 *  ReadFile(hComm, buffer, reqN, recN, ovl);
	 * </code>
	 * </pre>
	 * 
	 * @author nyholku
	 * 
	  No bit field mapping in JNA so define a flags field and masks for fFlags This is for synchronous writes only This can be used with synchronous as well as overlapped writes This is for synchronous reads only This can be used with synchronous as well as overlapped reads This prevents multiple retrying to create this function per JNA rules
 * Copyright (c) 2011, Kustaa Nyholm / SpareTimeLabs
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list 
 * of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright notice, this 
 * list of conditions and the following disclaimer in the documentation and/or other
 * materials provided with the distribution.
 *  
 * Neither the name of the Kustaa Nyholm or SpareTimeLabs nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 *
 * This WinAPI class implements a simple wrapper API to access the Windows COM
 * ports from Java.
 * 
 * The purpose is to follow reasonably closely the WIN32 API so that COM port
 * related C-code can be ported to Java almost as-is with little changes when
 * this class is statically imported.
 * <p>
 * This is a pure lightweight wrapper around WIN32 API calls with no added
 * syntactic sugar, functionality or niceties.
 * <p>
 * Here is a rude example:
 * 
 * <pre>
 * <code>
 * import static jtermios.windows.WinAPI.*;
 * ...
 *    byte[] buffer = "Hello World".getBytes();
 *    HANDLE hcomm = CreateFileA( "COM5:", GENERIC_READ |GENERIC_WRITE, 0, null, 0, 0, null );
 *    int[] wrtn = {0};
 *    WriteFile(hcomm, buffer, buffer.length, wrtn);
 *    CloseHandle(hcomm);
 * </code>
 * </pre>
 * 
 * Can't get much closer to C-code, what!
 * <p>
 * In addition to the basic open/close/read/write and setup operations this
 * class also makes available enough of the WIN32 Event API to make it possible
 * to use overlapped (asynchronous) I/O on COM ports.
 * 
 * <p>
 * Note that overlapped IO API is full of fine print. Especially worth
 * mentioning is that the OVERLAPPED structure cannot use autosync as it is
 * modified (by Windows) outside the function calls that use it. OVERLAPPED
 * takes care of not autosyncing but it is best to us the writeField() methods
 * to set fields of OVERLAPPED.
 * 
 * <pre>
 * <code>
 *    OVERLAPPED ovl = new OVERLAPPED();
 *    ovl.writeField("hEvent",CreateEvent(null, true, false, null));
 *   ...
 *    WriteFile(hComm, txm, txb.length, txn, ovl);
 *   ...
 *    GetOverlappedResult(hComm, ovl, txn, true);
 * </code>
 * </pre>
 * 
 * @author Kustaa Nyholm
 * 
  Moved to static per JNA recommendations This had to be separated out for Direct Mapping (no non-primative arrays) Added com.sun.jna.win32.W32APIOptions.ASCII_OPTIONS so we don't mix/match WString and String m_K32lib = (Windows_kernel32_lib) Native.loadLibrary("kernel32", Windows_kernel32_lib.class, com.sun.jna.win32.W32APIOptions.ASCII_OPTIONS); The following is to fix JNA's non-thread-local getLastError implementation Arrays are always initialized to zero values There seems to be very little rhyme or reason from which header file these come from in C, so I did not bother to keep track of the origin of these constants*
	 * Represent the Windows API struct OVERLAPPED. The constructor of this
	 * class does 'this.setAutoSynch(false)' because instances of this class
	 * should not be auto synchronized nor written as a whole, because Windows
	 * stores pointers to the actual memory representing this this struct and
	 * modifies it outside the function calls and copying (writing) the Java
	 * class fields to the actual memory will destroy those structures.
	 * 
	 * <p>
	 * To set the fields it recommend to use the 'writeField(String,Object)'. It
	 * is ok to read those fields of OVERLAPPED using Java dot-notatio. that
	 * have been written by Java code, but those field that Windows modifies
	 * should be accessed using 'readField(String)' or by invoking 'read()' on
	 * the object before accessing the fields with the java dot-notation.
	 * <p>
	 * For example this is acceptable usage for doing overlapped I/O (except
	 * this code does no error checking!):
	 * 
	 * <pre>
	 * <code>
	 *  OVERLAPPED ovl = new OVERLAPPED();
	 *  ovl.writeField("hEvent", CreateEvent(null, true, false, null));
	 *  ResetEvent(osReader.hEvent);
	 *  ReadFile(hComm, buffer, reqN, recN, ovl);
	 * </code>
	 * </pre>
	 * 
	 * @author nyholku
	 * 
	  No bit field mapping in JNA so define a flags field and masks for fFlags This is for synchronous writes only This can be used with synchronous as well as overlapped writes This is for synchronous reads only This can be used with synchronous as well as overlapped reads This prevents multiple retrying to create this function per JNA rules
 * Copyright (c) 2011, Kustaa Nyholm / SpareTimeLabs
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list 
 * of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright notice, this 
 * list of conditions and the following disclaimer in the documentation and/or other
 * materials provided with the distribution.
 *  
 * Neither the name of the Kustaa Nyholm or SpareTimeLabs nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 *
 * This WinAPI class implements a simple wrapper API to access the Windows COM
 * ports from Java.
 * 
 * The purpose is to follow reasonably closely the WIN32 API so that COM port
 * related C-code can be ported to Java almost as-is with little changes when
 * this class is statically imported.
 * <p>
 * This is a pure lightweight wrapper around WIN32 API calls with no added
 * syntactic sugar, functionality or niceties.
 * <p>
 * Here is a rude example:
 * 
 * <pre>
 * <code>
 * import static jtermios.windows.WinAPI.*;
 * ...
 *    byte[] buffer = "Hello World".getBytes();
 *    HANDLE hcomm = CreateFileA( "COM5:", GENERIC_READ |GENERIC_WRITE, 0, null, 0, 0, null );
 *    int[] wrtn = {0};
 *    WriteFile(hcomm, buffer, buffer.length, wrtn);
 *    CloseHandle(hcomm);
 * </code>
 * </pre>
 * 
 * Can't get much closer to C-code, what!
 * <p>
 * In addition to the basic open/close/read/write and setup operations this
 * class also makes available enough of the WIN32 Event API to make it possible
 * to use overlapped (asynchronous) I/O on COM ports.
 * 
 * <p>
 * Note that overlapped IO API is full of fine print. Especially worth
 * mentioning is that the OVERLAPPED structure cannot use autosync as it is
 * modified (by Windows) outside the function calls that use it. OVERLAPPED
 * takes care of not autosyncing but it is best to us the writeField() methods
 * to set fields of OVERLAPPED.
 * 
 * <pre>
 * <code>
 *    OVERLAPPED ovl = new OVERLAPPED();
 *    ovl.writeField("hEvent",CreateEvent(null, true, false, null));
 *   ...
 *    WriteFile(hComm, txm, txb.length, txn, ovl);
 *   ...
 *    GetOverlappedResult(hComm, ovl, txn, true);
 * </code>
 * </pre>
 * 
 * @author Kustaa Nyholm
 * 
  Moved to static per JNA recommendations This had to be separated out for Direct Mapping (no non-primative arrays) Added com.sun.jna.win32.W32APIOptions.ASCII_OPTIONS so we don't mix/match WString and String m_K32lib = (Windows_kernel32_lib) Native.loadLibrary("kernel32", Windows_kernel32_lib.class, com.sun.jna.win32.W32APIOptions.ASCII_OPTIONS); The following is to fix JNA's non-thread-local getLastError implementation Arrays are always initialized to zero values There seems to be very little rhyme or reason from which header file these come from in C, so I did not bother to keep track of the origin of these constants*
	 * Represent the Windows API struct OVERLAPPED. The constructor of this
	 * class does 'this.setAutoSynch(false)' because instances of this class
	 * should not be auto synchronized nor written as a whole, because Windows
	 * stores pointers to the actual memory representing this this struct and
	 * modifies it outside the function calls and copying (writing) the Java
	 * class fields to the actual memory will destroy those structures.
	 * 
	 * <p>
	 * To set the fields it recommend to use the 'writeField(String,Object)'. It
	 * is ok to read those fields of OVERLAPPED using Java dot-notatio. that
	 * have been written by Java code, but those field that Windows modifies
	 * should be accessed using 'readField(String)' or by invoking 'read()' on
	 * the object before accessing the fields with the java dot-notation.
	 * <p>
	 * For example this is acceptable usage for doing overlapped I/O (except
	 * this code does no error checking!):
	 * 
	 * <pre>
	 * <code>
	 *  OVERLAPPED ovl = new OVERLAPPED();
	 *  ovl.writeField("hEvent", CreateEvent(null, true, false, null));
	 *  ResetEvent(osReader.hEvent);
	 *  ReadFile(hComm, buffer, reqN, recN, ovl);
	 * </code>
	 * </pre>
	 * 
	 * @author nyholku
	 * 
	  No bit field mapping in JNA so define a flags field and masks for fFlags This is for synchronous writes only This can be used with synchronous as well as overlapped writes This is for synchronous reads only This can be used with synchronous as well as overlapped reads This prevents multiple retrying to create this function per JNA rules
 * Copyright (c) 2011, Kustaa Nyholm / SpareTimeLabs
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list 
 * of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright notice, this 
 * list of conditions and the following disclaimer in the documentation and/or other
 * materials provided with the distribution.
 *  
 * Neither the name of the Kustaa Nyholm or SpareTimeLabs nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 *
 * This WinAPI class implements a simple wrapper API to access the Windows COM
 * ports from Java.
 * 
 * The purpose is to follow reasonably closely the WIN32 API so that COM port
 * related C-code can be ported to Java almost as-is with little changes when
 * this class is statically imported.
 * <p>
 * This is a pure lightweight wrapper around WIN32 API calls with no added
 * syntactic sugar, functionality or niceties.
 * <p>
 * Here is a rude example:
 * 
 * <pre>
 * <code>
 * import static jtermios.windows.WinAPI.*;
 * ...
 *    byte[] buffer = "Hello World".getBytes();
 *    HANDLE hcomm = CreateFileA( "COM5:", GENERIC_READ |GENERIC_WRITE, 0, null, 0, 0, null );
 *    int[] wrtn = {0};
 *    WriteFile(hcomm, buffer, buffer.length, wrtn);
 *    CloseHandle(hcomm);
 * </code>
 * </pre>
 * 
 * Can't get much closer to C-code, what!
 * <p>
 * In addition to the basic open/close/read/write and setup operations this
 * class also makes available enough of the WIN32 Event API to make it possible
 * to use overlapped (asynchronous) I/O on COM ports.
 * 
 * <p>
 * Note that overlapped IO API is full of fine print. Especially worth
 * mentioning is that the OVERLAPPED structure cannot use autosync as it is
 * modified (by Windows) outside the function calls that use it. OVERLAPPED
 * takes care of not autosyncing but it is best to us the writeField() methods
 * to set fields of OVERLAPPED.
 * 
 * <pre>
 * <code>
 *    OVERLAPPED ovl = new OVERLAPPED();
 *    ovl.writeField("hEvent",CreateEvent(null, true, false, null));
 *   ...
 *    WriteFile(hComm, txm, txb.length, txn, ovl);
 *   ...
 *    GetOverlappedResult(hComm, ovl, txn, true);
 * </code>
 * </pre>
 * 
 * @author Kustaa Nyholm
 * 
  Moved to static per JNA recommendations This had to be separated out for Direct Mapping (no non-primative arrays) Added com.sun.jna.win32.W32APIOptions.ASCII_OPTIONS so we don't mix/match WString and String m_K32lib = (Windows_kernel32_lib) Native.loadLibrary("kernel32", Windows_kernel32_lib.class, com.sun.jna.win32.W32APIOptions.ASCII_OPTIONS); The following is to fix JNA's non-thread-local getLastError implementation Arrays are always initialized to zero values There seems to be very little rhyme or reason from which header file these come from in C, so I did not bother to keep track of the origin of these constants*
	 * Represent the Windows API struct OVERLAPPED. The constructor of this
	 * class does 'this.setAutoSynch(false)' because instances of this class
	 * should not be auto synchronized nor written as a whole, because Windows
	 * stores pointers to the actual memory representing this this struct and
	 * modifies it outside the function calls and copying (writing) the Java
	 * class fields to the actual memory will destroy those structures.
	 * 
	 * <p>
	 * To set the fields it recommend to use the 'writeField(String,Object)'. It
	 * is ok to read those fields of OVERLAPPED using Java dot-notatio. that
	 * have been written by Java code, but those field that Windows modifies
	 * should be accessed using 'readField(String)' or by invoking 'read()' on
	 * the object before accessing the fields with the java dot-notation.
	 * <p>
	 * For example this is acceptable usage for doing overlapped I/O (except
	 * this code does no error checking!):
	 * 
	 * <pre>
	 * <code>
	 *  OVERLAPPED ovl = new OVERLAPPED();
	 *  ovl.writeField("hEvent", CreateEvent(null, true, false, null));
	 *  ResetEvent(osReader.hEvent);
	 *  ReadFile(hComm, buffer, reqN, recN, ovl);
	 * </code>
	 * </pre>
	 * 
	 * @author nyholku
	 * 
	  No bit field mapping in JNA so define a flags field and masks for fFlags This is for synchronous writes only This can be used with synchronous as well as overlapped writes This is for synchronous reads only This can be used with synchronous as well as overlapped reads This prevents multiple retrying to create this function per JNA rules
 * Copyright (c) 2011, Kustaa Nyholm / SpareTimeLabs
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list 
 * of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright notice, this 
 * list of conditions and the following disclaimer in the documentation and/or other
 * materials provided with the distribution.
 *  
 * Neither the name of the Kustaa Nyholm or SpareTimeLabs nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 *
 * This WinAPI class implements a simple wrapper API to access the Windows COM
 * ports from Java.
 * 
 * The purpose is to follow reasonably closely the WIN32 API so that COM port
 * related C-code can be ported to Java almost as-is with little changes when
 * this class is statically imported.
 * <p>
 * This is a pure lightweight wrapper around WIN32 API calls with no added
 * syntactic sugar, functionality or niceties.
 * <p>
 * Here is a rude example:
 * 
 * <pre>
 * <code>
 * import static jtermios.windows.WinAPI.*;
 * ...
 *    byte[] buffer = "Hello World".getBytes();
 *    HANDLE hcomm = CreateFileA( "COM5:", GENERIC_READ |GENERIC_WRITE, 0, null, 0, 0, null );
 *    int[] wrtn = {0};
 *    WriteFile(hcomm, buffer, buffer.length, wrtn);
 *    CloseHandle(hcomm);
 * </code>
 * </pre>
 * 
 * Can't get much closer to C-code, what!
 * <p>
 * In addition to the basic open/close/read/write and setup operations this
 * class also makes available enough of the WIN32 Event API to make it possible
 * to use overlapped (asynchronous) I/O on COM ports.
 * 
 * <p>
 * Note that overlapped IO API is full of fine print. Especially worth
 * mentioning is that the OVERLAPPED structure cannot use autosync as it is
 * modified (by Windows) outside the function calls that use it. OVERLAPPED
 * takes care of not autosyncing but it is best to us the writeField() methods
 * to set fields of OVERLAPPED.
 * 
 * <pre>
 * <code>
 *    OVERLAPPED ovl = new OVERLAPPED();
 *    ovl.writeField("hEvent",CreateEvent(null, true, false, null));
 *   ...
 *    WriteFile(hComm, txm, txb.length, txn, ovl);
 *   ...
 *    GetOverlappedResult(hComm, ovl, txn, true);
 * </code>
 * </pre>
 * 
 * @author Kustaa Nyholm
 * 
  Moved to static per JNA recommendations This had to be separated out for Direct Mapping (no non-primative arrays) Added com.sun.jna.win32.W32APIOptions.ASCII_OPTIONS so we don't mix/match WString and String m_K32lib = (Windows_kernel32_lib) Native.loadLibrary("kernel32", Windows_kernel32_lib.class, com.sun.jna.win32.W32APIOptions.ASCII_OPTIONS); The following is to fix JNA's non-thread-local getLastError implementation Arrays are always initialized to zero values There seems to be very little rhyme or reason from which header file these come from in C, so I did not bother to keep track of the origin of these constants*
	 * Represent the Windows API struct OVERLAPPED. The constructor of this
	 * class does 'this.setAutoSynch(false)' because instances of this class
	 * should not be auto synchronized nor written as a whole, because Windows
	 * stores pointers to the actual memory representing this this struct and
	 * modifies it outside the function calls and copying (writing) the Java
	 * class fields to the actual memory will destroy those structures.
	 * 
	 * <p>
	 * To set the fields it recommend to use the 'writeField(String,Object)'. It
	 * is ok to read those fields of OVERLAPPED using Java dot-notatio. that
	 * have been written by Java code, but those field that Windows modifies
	 * should be accessed using 'readField(String)' or by invoking 'read()' on
	 * the object before accessing the fields with the java dot-notation.
	 * <p>
	 * For example this is acceptable usage for doing overlapped I/O (except
	 * this code does no error checking!):
	 * 
	 * <pre>
	 * <code>
	 *  OVERLAPPED ovl = new OVERLAPPED();
	 *  ovl.writeField("hEvent", CreateEvent(null, true, false, null));
	 *  ResetEvent(osReader.hEvent);
	 *  ReadFile(hComm, buffer, reqN, recN, ovl);
	 * </code>
	 * </pre>
	 * 
	 * @author nyholku
	 * 
	  No bit field mapping in JNA so define a flags field and masks for fFlags This is for synchronous writes only This can be used with synchronous as well as overlapped writes This is for synchronous reads only This can be used with synchronous as well as overlapped reads This prevents multiple retrying to create this function per JNA rules