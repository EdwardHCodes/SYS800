
  Copyright (C) 1999, 2000, 2002 Aladdin Enterprises.  All rights reserved.

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  L. Peter Deutsch
  ghost@aladdin.com

  $Id: md5.c,v 1.6 2002/04/13 19:20:28 lpd Exp $ 
  Independent implementation of MD5 (RFC 1321).

  This code implements the MD5 Algorithm defined in RFC 1321, whose
  text is available at
	http://www.ietf.org/rfc/rfc1321.txt
  The code is derived from the text of the RFC, including the test suite
  (section A.5) but excluding the rest of Appendix A.  It does not include
  any code or documentation that is identified in the RFC as being
  copyrighted.

  The original and principal author of md5.c is L. Peter Deutsch
  <ghost@aladdin.com>.  Other authors are noted in the change history
  that follows (in reverse chronological order):

  2002-04-13 lpd Clarified derivation from RFC 1321; now handles byte order
	either statically or dynamically; added missing #include <string.h>
	in library.
  2002-03-11 lpd Corrected argument list for main(), and added int return
	type, in test program and T value program.
  2002-02-21 lpd Added missing #include <stdio.h> in test program.
  2000-07-03 lpd Patched to eliminate warnings about "constant is
	unsigned in ANSI C, signed in traditional"; made test program
	self-checking.
  1999-11-04 lpd Edited comments slightly for automatic TOC extraction.
  1999-10-18 lpd Fixed typo in header comment (ansi2knr rather than md5).
  1999-05-03 lpd Original version.
  1 = big-endian, -1 = little-endian, 0 = unknown  0xd76aa478  0xe8c7b756  0xc1bdceee  0xf57c0faf  0xa8304613  0xfd469501  0x8b44f7af  0xffff5bb1  0x895cd7be  0xfd987193  0xa679438e  0xf61e2562  0xc040b340  0xe9b6c7aa  0xd62f105d  0xd8a1e681  0xe7d3fbc8  0xc33707d6  0xf4d50d87  0xa9e3e905  0xfcefa3f8  0x8d2a4c8a  0xfffa3942  0x8771f681  0xfde5380c  0xa4beea44  0xf6bb4b60  0xbebfbc70  0xeaa127fa  0xd4ef3085  0xd9d4d039  0xe6db99e5  0xc4ac5665  0xf4292244  0xab9423a7  0xfc93a039  0x8f0ccc92  0xffeff47d  0x85845dd1  0xfe2ce6e0  0xa3014314  0xf7537e82  0xbd3af235  0xeb86d391 [64] Define storage only for big-endian CPUs.  Define storage for little-endian or both types of CPUs. 
	 * Determine dynamically whether this is a big-endian or
	 * little-endian machine, since we can use a more efficient
	 * algorithm on the latter.
	  dynamic little-endian  little-endian 
	     * On little-endian machines, we can process properly aligned
	     * data without copying it.
	      data are properly aligned  not aligned  dynamic big-endian  big-endian 
	     * On big-endian machines, we must arrange the bytes in the
	     * right order.
	      (dynamic only)  (static only)  Round 1.  Let [abcd k s i] denote the operation
       a = b + ((a + F(b,c,d) + X[k] + T[i]) <<< s).  Do the following 16 operations.  Round 2.  Let [abcd k s i] denote the operation
          a = b + ((a + G(b,c,d) + X[k] + T[i]) <<< s).  Do the following 16 operations.  Round 3.  Let [abcd k s t] denote the operation
          a = b + ((a + H(b,c,d) + X[k] + T[i]) <<< s).  Do the following 16 operations.  Round 4.  Let [abcd k s t] denote the operation
          a = b + ((a + I(b,c,d) + X[k] + T[i]) <<< s).  Do the following 16 operations.  Then perform the following additions. (That is increment each
        of the four registers by the value it had before this block
        was started.) 0xefcdab890x98badcfe Update the message length.  Process an initial partial block.  Process full blocks.  Process a final partial block.  Save the length before padding.  Pad to 56 bytes mod 64.  Append the length. 
  Copyright (C) 1999, 2000, 2002 Aladdin Enterprises.  All rights reserved.

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  L. Peter Deutsch
  ghost@aladdin.com

  $Id: md5.c,v 1.6 2002/04/13 19:20:28 lpd Exp $ 
  Independent implementation of MD5 (RFC 1321).

  This code implements the MD5 Algorithm defined in RFC 1321, whose
  text is available at
	http://www.ietf.org/rfc/rfc1321.txt
  The code is derived from the text of the RFC, including the test suite
  (section A.5) but excluding the rest of Appendix A.  It does not include
  any code or documentation that is identified in the RFC as being
  copyrighted.

  The original and principal author of md5.c is L. Peter Deutsch
  <ghost@aladdin.com>.  Other authors are noted in the change history
  that follows (in reverse chronological order):

  2002-04-13 lpd Clarified derivation from RFC 1321; now handles byte order
	either statically or dynamically; added missing #include <string.h>
	in library.
  2002-03-11 lpd Corrected argument list for main(), and added int return
	type, in test program and T value program.
  2002-02-21 lpd Added missing #include <stdio.h> in test program.
  2000-07-03 lpd Patched to eliminate warnings about "constant is
	unsigned in ANSI C, signed in traditional"; made test program
	self-checking.
  1999-11-04 lpd Edited comments slightly for automatic TOC extraction.
  1999-10-18 lpd Fixed typo in header comment (ansi2knr rather than md5).
  1999-05-03 lpd Original version.
  1 = big-endian, -1 = little-endian, 0 = unknown  0xd76aa478  0xe8c7b756  0xc1bdceee  0xf57c0faf  0xa8304613  0xfd469501  0x8b44f7af  0xffff5bb1  0x895cd7be  0xfd987193  0xa679438e  0xf61e2562  0xc040b340  0xe9b6c7aa  0xd62f105d  0xd8a1e681  0xe7d3fbc8  0xc33707d6  0xf4d50d87  0xa9e3e905  0xfcefa3f8  0x8d2a4c8a  0xfffa3942  0x8771f681  0xfde5380c  0xa4beea44  0xf6bb4b60  0xbebfbc70  0xeaa127fa  0xd4ef3085  0xd9d4d039  0xe6db99e5  0xc4ac5665  0xf4292244  0xab9423a7  0xfc93a039  0x8f0ccc92  0xffeff47d  0x85845dd1  0xfe2ce6e0  0xa3014314  0xf7537e82  0xbd3af235  0xeb86d391 [64] Define storage only for big-endian CPUs.  Define storage for little-endian or both types of CPUs. 
	 * Determine dynamically whether this is a big-endian or
	 * little-endian machine, since we can use a more efficient
	 * algorithm on the latter.
	  dynamic little-endian  little-endian 
	     * On little-endian machines, we can process properly aligned
	     * data without copying it.
	      data are properly aligned  not aligned  dynamic big-endian  big-endian 
	     * On big-endian machines, we must arrange the bytes in the
	     * right order.
	      (dynamic only)  (static only)  Round 1.  Let [abcd k s i] denote the operation
       a = b + ((a + F(b,c,d) + X[k] + T[i]) <<< s).  Do the following 16 operations.  Round 2.  Let [abcd k s i] denote the operation
          a = b + ((a + G(b,c,d) + X[k] + T[i]) <<< s).  Do the following 16 operations.  Round 3.  Let [abcd k s t] denote the operation
          a = b + ((a + H(b,c,d) + X[k] + T[i]) <<< s).  Do the following 16 operations.  Round 4.  Let [abcd k s t] denote the operation
          a = b + ((a + I(b,c,d) + X[k] + T[i]) <<< s).  Do the following 16 operations.  Then perform the following additions. (That is increment each
        of the four registers by the value it had before this block
        was started.) 0xefcdab890x98badcfe Update the message length.  Process an initial partial block.  Process full blocks.  Process a final partial block.  Save the length before padding.  Pad to 56 bytes mod 64.  Append the length. 