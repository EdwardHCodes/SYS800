**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Linus Nielsen Feltzing
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Maximum allowed firmware image size. 10MB is more than enough  Reset the cookie for the crt0 crash check  We need to gracefully spin down the disk to prevent clicks.  Make sure ATA has been initialized.  And put the disk into sleep immediately.  Print the battery voltage (and a warning message).  From the pcf50606 driver  From common.c  We want to read the buttons as early as possible, before the user
       releases the ON button  Set GPIO33, GPIO37, GPIO38  and GPIO52 as general purpose inputs
       (The ON and Hold buttons on the main unit and the remote)  Set the default state of the hard drive power to OFF  Check the interrupt registers if it was an RTC alarm  Turn off if we believe the start was accidental  get rid of a nasty humming sound during boot  GPOOD2 high Z  GPOOD2 low  Start with the main backlight OFF.  Set up waitstates for the peripherals  PLL off  Allow the button driver to check the buttons  Don't start if the Hold button is active on the device you
       are starting with  Holding REC while starting runs the original firmware  Timeout  To be replaced with a nice animation  A hack to enter USB mode without using the USB thread  Print the battery status.  Prevent the drive from spinning down  These functions are present in the firmware library, but we reimplement
   them here because the originals do a lot more than we want **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Linus Nielsen Feltzing
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Maximum allowed firmware image size. 10MB is more than enough  Reset the cookie for the crt0 crash check  We need to gracefully spin down the disk to prevent clicks.  Make sure ATA has been initialized.  And put the disk into sleep immediately.  Print the battery voltage (and a warning message).  From the pcf50606 driver  From common.c  We want to read the buttons as early as possible, before the user
       releases the ON button  Set GPIO33, GPIO37, GPIO38  and GPIO52 as general purpose inputs
       (The ON and Hold buttons on the main unit and the remote)  Set the default state of the hard drive power to OFF  Check the interrupt registers if it was an RTC alarm  Turn off if we believe the start was accidental  get rid of a nasty humming sound during boot  GPOOD2 high Z  GPOOD2 low  Start with the main backlight OFF.  Set up waitstates for the peripherals  PLL off  Allow the button driver to check the buttons  Don't start if the Hold button is active on the device you
       are starting with  Holding REC while starting runs the original firmware  Timeout  To be replaced with a nice animation  A hack to enter USB mode without using the USB thread  Print the battery status.  Prevent the drive from spinning down  These functions are present in the firmware library, but we reimplement
   them here because the originals do a lot more than we want **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Linus Nielsen Feltzing
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Maximum allowed firmware image size. 10MB is more than enough  Reset the cookie for the crt0 crash check  We need to gracefully spin down the disk to prevent clicks.  Make sure ATA has been initialized.  And put the disk into sleep immediately.  Print the battery voltage (and a warning message).  From the pcf50606 driver  From common.c  We want to read the buttons as early as possible, before the user
       releases the ON button  Set GPIO33, GPIO37, GPIO38  and GPIO52 as general purpose inputs
       (The ON and Hold buttons on the main unit and the remote)  Set the default state of the hard drive power to OFF  Check the interrupt registers if it was an RTC alarm  Turn off if we believe the start was accidental  get rid of a nasty humming sound during boot  GPOOD2 high Z  GPOOD2 low  Start with the main backlight OFF.  Set up waitstates for the peripherals  PLL off  Allow the button driver to check the buttons  Don't start if the Hold button is active on the device you
       are starting with  Holding REC while starting runs the original firmware  Timeout  To be replaced with a nice animation  A hack to enter USB mode without using the USB thread  Print the battery status.  Prevent the drive from spinning down  These functions are present in the firmware library, but we reimplement
   them here because the originals do a lot more than we want 