
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org
 buggy, so we're disabling them. --ryan.  MMX assembler version of SDL_MixAudio for signed little endian 16 bit samples and signed 8 bit samples Copyright 2002 Stephane Marchesin (stephane.marchesin@wanadoo.fr) Converted to Intel ASM notation by Cth This code is licensed under the LGPL (see COPYING for details)  Assumes buffer size in bytes is a multiple of 16 Assumes SDL_MIX_MAXVOLUME = 128////////////////////////////////////////////// Mixing for 16 bit signed buffers////////////////////////////////////////////// edi = dst esi = src eax = volume ebx = size process 16 bytes per iteration = 8 samples%%eax,%%mm0%%mm0,%%mm1$16,%%mm0%%mm1,%%mm0$16,%%mm0%%mm1,%%mm0$16,%%mm0%%mm1,%%mm0			// mm0 = vol|vol|vol|vol(%%esi),%%mm1\n" // mm1 = a|b|c|d%%mm1,%%mm2\n" // mm2 = a|b|c|d8(%%esi),%%mm4\n" // mm4 = e|f|g|h pre charger le buffer dst dans mm7(%%edi),%%mm7\n" // mm7 = dst[0]" multiplier par le volume%%mm0,%%mm1\n" // mm1 = l(a*v)|l(b*v)|l(c*v)|l(d*v)%%mm0,%%mm2\n" // mm2 = h(a*v)|h(b*v)|h(c*v)|h(d*v)%%mm4,%%mm5\n" // mm5 = e|f|g|h%%mm0,%%mm4\n" // mm4 = l(e*v)|l(f*v)|l(g*v)|l(h*v)%%mm0,%%mm5\n" // mm5 = h(e*v)|h(f*v)|h(g*v)|h(h*v)%%mm1,%%mm3\n" // mm3 = l(a*v)|l(b*v)|l(c*v)|l(d*v)%%mm2,%%mm1\n" // mm1 = a*v|b*v%%mm4,%%mm6\n" // mm6 = l(e*v)|l(f*v)|l(g*v)|l(h*v)%%mm2,%%mm3\n" // mm3 = c*v|d*v%%mm5,%%mm4\n" // mm4 = e*f|f*v%%mm5,%%mm6\n" // mm6 = g*v|h*v pre charger le buffer dst dans mm58(%%edi),%%mm5\n" // mm5 = dst[1] diviser par 128$7,%%mm1\n" // mm1 = a*v/128|b*v/128 , 128 = SDL_MIX_MAXVOLUME$16,%%esi\n"$7,%%mm3\n" // mm3 = c*v/128|d*v/128$7,%%mm4\n" // mm4 = e*v/128|f*v/128 mm1 = le sample avec le volume modifie%%mm1,%%mm3\n" // mm3 = s(a*v|b*v|c*v|d*v)$7,%%mm6\n" // mm6= g*v/128|h*v/128%%mm7,%%mm3\n" // mm3 = adjust_volume(src)+dst mm4 = le sample avec le volume modifie%%mm4,%%mm6\n" // mm6 = s(e*v|f*v|g*v|h*v)%%mm3,(%%edi)\n"%%mm5,%%mm6\n" // mm6 = adjust_volume(src)+dst%%mm6,8(%%edi)\n"$16,%%edi\n"%%ebx\n"////////////////////////////////////////////// Mixing for 8 bit signed buffers//////////////////////////////////////////////movl	%0,%%edi	// edi = dst%1,%%esi	// esi = src%3,%%eax	// eax = volume%%eax,%%mm0%%mm0,%%mm1$16,%%mm0%%mm1,%%mm0$16,%%mm0%%mm1,%%mm0$16,%%mm0%%mm1,%%mm0%2,%%ebx	// ebx = size$3,%%ebx	// process 8 bytes per iteration = 8 samples$0,%%ebx%%mm2,%%mm2		// mm2 = 0(%%esi),%%mm1	// mm1 = a|b|c|d|e|f|g|h%%mm1,%%mm3 	// mm3 = a|b|c|d|e|f|g|h on va faire le "sign extension" en faisant un cmp avec 0 qui retourne 1 si <0, 0 si >0%%mm1,%%mm2	// mm2 = 11111111|00000000|00000000....%%mm2,%%mm1	// mm1 = 0|a|0|b|0|c|0|d%%mm2,%%mm3	// mm3 = 0|e|0|f|0|g|0|h(%%edi),%%mm2	// mm2 = destination%%mm0,%%mm1	// mm1 = v*a|v*b|v*c|v*d$8,%%esi%%mm0,%%mm3	// mm3 = v*e|v*f|v*g|v*h$7,%%mm1		// mm1 = v*a/128|v*b/128|v*c/128|v*d/128 $7,%%mm3		// mm3 = v*e/128|v*f/128|v*g/128|v*h/128%%mm1,%%mm3	// mm1 = v*a/128|v*b/128|v*c/128|v*d/128|v*e/128|v*f/128|v*g/128|v*h/128%%mm2,%%mm3	// add to destination buffer%%mm3,(%%edi)	// store back to ram$8,%%edi%%ebx SDL_ASSEMBLY_ROUTINES  SDL_BUGGY_MMX_MIXERS 
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org
 buggy, so we're disabling them. --ryan.  MMX assembler version of SDL_MixAudio for signed little endian 16 bit samples and signed 8 bit samples Copyright 2002 Stephane Marchesin (stephane.marchesin@wanadoo.fr) Converted to Intel ASM notation by Cth This code is licensed under the LGPL (see COPYING for details)  Assumes buffer size in bytes is a multiple of 16 Assumes SDL_MIX_MAXVOLUME = 128////////////////////////////////////////////// Mixing for 16 bit signed buffers////////////////////////////////////////////// edi = dst esi = src eax = volume ebx = size process 16 bytes per iteration = 8 samples%%eax,%%mm0%%mm0,%%mm1$16,%%mm0%%mm1,%%mm0$16,%%mm0%%mm1,%%mm0$16,%%mm0%%mm1,%%mm0			// mm0 = vol|vol|vol|vol(%%esi),%%mm1\n" // mm1 = a|b|c|d%%mm1,%%mm2\n" // mm2 = a|b|c|d8(%%esi),%%mm4\n" // mm4 = e|f|g|h pre charger le buffer dst dans mm7(%%edi),%%mm7\n" // mm7 = dst[0]" multiplier par le volume%%mm0,%%mm1\n" // mm1 = l(a*v)|l(b*v)|l(c*v)|l(d*v)%%mm0,%%mm2\n" // mm2 = h(a*v)|h(b*v)|h(c*v)|h(d*v)%%mm4,%%mm5\n" // mm5 = e|f|g|h%%mm0,%%mm4\n" // mm4 = l(e*v)|l(f*v)|l(g*v)|l(h*v)%%mm0,%%mm5\n" // mm5 = h(e*v)|h(f*v)|h(g*v)|h(h*v)%%mm1,%%mm3\n" // mm3 = l(a*v)|l(b*v)|l(c*v)|l(d*v)%%mm2,%%mm1\n" // mm1 = a*v|b*v%%mm4,%%mm6\n" // mm6 = l(e*v)|l(f*v)|l(g*v)|l(h*v)%%mm2,%%mm3\n" // mm3 = c*v|d*v%%mm5,%%mm4\n" // mm4 = e*f|f*v%%mm5,%%mm6\n" // mm6 = g*v|h*v pre charger le buffer dst dans mm58(%%edi),%%mm5\n" // mm5 = dst[1] diviser par 128$7,%%mm1\n" // mm1 = a*v/128|b*v/128 , 128 = SDL_MIX_MAXVOLUME$16,%%esi\n"$7,%%mm3\n" // mm3 = c*v/128|d*v/128$7,%%mm4\n" // mm4 = e*v/128|f*v/128 mm1 = le sample avec le volume modifie%%mm1,%%mm3\n" // mm3 = s(a*v|b*v|c*v|d*v)$7,%%mm6\n" // mm6= g*v/128|h*v/128%%mm7,%%mm3\n" // mm3 = adjust_volume(src)+dst mm4 = le sample avec le volume modifie%%mm4,%%mm6\n" // mm6 = s(e*v|f*v|g*v|h*v)%%mm3,(%%edi)\n"%%mm5,%%mm6\n" // mm6 = adjust_volume(src)+dst%%mm6,8(%%edi)\n"$16,%%edi\n"%%ebx\n"////////////////////////////////////////////// Mixing for 8 bit signed buffers//////////////////////////////////////////////movl	%0,%%edi	// edi = dst%1,%%esi	// esi = src%3,%%eax	// eax = volume%%eax,%%mm0%%mm0,%%mm1$16,%%mm0%%mm1,%%mm0$16,%%mm0%%mm1,%%mm0$16,%%mm0%%mm1,%%mm0%2,%%ebx	// ebx = size$3,%%ebx	// process 8 bytes per iteration = 8 samples$0,%%ebx%%mm2,%%mm2		// mm2 = 0(%%esi),%%mm1	// mm1 = a|b|c|d|e|f|g|h%%mm1,%%mm3 	// mm3 = a|b|c|d|e|f|g|h on va faire le "sign extension" en faisant un cmp avec 0 qui retourne 1 si <0, 0 si >0%%mm1,%%mm2	// mm2 = 11111111|00000000|00000000....%%mm2,%%mm1	// mm1 = 0|a|0|b|0|c|0|d%%mm2,%%mm3	// mm3 = 0|e|0|f|0|g|0|h(%%edi),%%mm2	// mm2 = destination%%mm0,%%mm1	// mm1 = v*a|v*b|v*c|v*d$8,%%esi%%mm0,%%mm3	// mm3 = v*e|v*f|v*g|v*h$7,%%mm1		// mm1 = v*a/128|v*b/128|v*c/128|v*d/128 $7,%%mm3		// mm3 = v*e/128|v*f/128|v*g/128|v*h/128%%mm1,%%mm3	// mm1 = v*a/128|v*b/128|v*c/128|v*d/128|v*e/128|v*f/128|v*g/128|v*h/128%%mm2,%%mm3	// add to destination buffer%%mm3,(%%edi)	// store back to ram$8,%%edi%%ebx SDL_ASSEMBLY_ROUTINES  SDL_BUGGY_MMX_MIXERS 
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org
 buggy, so we're disabling them. --ryan.  MMX assembler version of SDL_MixAudio for signed little endian 16 bit samples and signed 8 bit samples Copyright 2002 Stephane Marchesin (stephane.marchesin@wanadoo.fr) Converted to Intel ASM notation by Cth This code is licensed under the LGPL (see COPYING for details)  Assumes buffer size in bytes is a multiple of 16 Assumes SDL_MIX_MAXVOLUME = 128////////////////////////////////////////////// Mixing for 16 bit signed buffers////////////////////////////////////////////// edi = dst esi = src eax = volume ebx = size process 16 bytes per iteration = 8 samples%%eax,%%mm0%%mm0,%%mm1$16,%%mm0%%mm1,%%mm0$16,%%mm0%%mm1,%%mm0$16,%%mm0%%mm1,%%mm0			// mm0 = vol|vol|vol|vol(%%esi),%%mm1\n" // mm1 = a|b|c|d%%mm1,%%mm2\n" // mm2 = a|b|c|d8(%%esi),%%mm4\n" // mm4 = e|f|g|h pre charger le buffer dst dans mm7(%%edi),%%mm7\n" // mm7 = dst[0]" multiplier par le volume%%mm0,%%mm1\n" // mm1 = l(a*v)|l(b*v)|l(c*v)|l(d*v)%%mm0,%%mm2\n" // mm2 = h(a*v)|h(b*v)|h(c*v)|h(d*v)%%mm4,%%mm5\n" // mm5 = e|f|g|h%%mm0,%%mm4\n" // mm4 = l(e*v)|l(f*v)|l(g*v)|l(h*v)%%mm0,%%mm5\n" // mm5 = h(e*v)|h(f*v)|h(g*v)|h(h*v)%%mm1,%%mm3\n" // mm3 = l(a*v)|l(b*v)|l(c*v)|l(d*v)%%mm2,%%mm1\n" // mm1 = a*v|b*v%%mm4,%%mm6\n" // mm6 = l(e*v)|l(f*v)|l(g*v)|l(h*v)%%mm2,%%mm3\n" // mm3 = c*v|d*v%%mm5,%%mm4\n" // mm4 = e*f|f*v%%mm5,%%mm6\n" // mm6 = g*v|h*v pre charger le buffer dst dans mm58(%%edi),%%mm5\n" // mm5 = dst[1] diviser par 128$7,%%mm1\n" // mm1 = a*v/128|b*v/128 , 128 = SDL_MIX_MAXVOLUME$16,%%esi\n"$7,%%mm3\n" // mm3 = c*v/128|d*v/128$7,%%mm4\n" // mm4 = e*v/128|f*v/128 mm1 = le sample avec le volume modifie%%mm1,%%mm3\n" // mm3 = s(a*v|b*v|c*v|d*v)$7,%%mm6\n" // mm6= g*v/128|h*v/128%%mm7,%%mm3\n" // mm3 = adjust_volume(src)+dst mm4 = le sample avec le volume modifie%%mm4,%%mm6\n" // mm6 = s(e*v|f*v|g*v|h*v)%%mm3,(%%edi)\n"%%mm5,%%mm6\n" // mm6 = adjust_volume(src)+dst%%mm6,8(%%edi)\n"$16,%%edi\n"%%ebx\n"////////////////////////////////////////////// Mixing for 8 bit signed buffers//////////////////////////////////////////////movl	%0,%%edi	// edi = dst%1,%%esi	// esi = src%3,%%eax	// eax = volume%%eax,%%mm0%%mm0,%%mm1$16,%%mm0%%mm1,%%mm0$16,%%mm0%%mm1,%%mm0$16,%%mm0%%mm1,%%mm0%2,%%ebx	// ebx = size$3,%%ebx	// process 8 bytes per iteration = 8 samples$0,%%ebx%%mm2,%%mm2		// mm2 = 0(%%esi),%%mm1	// mm1 = a|b|c|d|e|f|g|h%%mm1,%%mm3 	// mm3 = a|b|c|d|e|f|g|h on va faire le "sign extension" en faisant un cmp avec 0 qui retourne 1 si <0, 0 si >0%%mm1,%%mm2	// mm2 = 11111111|00000000|00000000....%%mm2,%%mm1	// mm1 = 0|a|0|b|0|c|0|d%%mm2,%%mm3	// mm3 = 0|e|0|f|0|g|0|h(%%edi),%%mm2	// mm2 = destination%%mm0,%%mm1	// mm1 = v*a|v*b|v*c|v*d$8,%%esi%%mm0,%%mm3	// mm3 = v*e|v*f|v*g|v*h$7,%%mm1		// mm1 = v*a/128|v*b/128|v*c/128|v*d/128 $7,%%mm3		// mm3 = v*e/128|v*f/128|v*g/128|v*h/128%%mm1,%%mm3	// mm1 = v*a/128|v*b/128|v*c/128|v*d/128|v*e/128|v*f/128|v*g/128|v*h/128%%mm2,%%mm3	// add to destination buffer%%mm3,(%%edi)	// store back to ram$8,%%edi%%ebx SDL_ASSEMBLY_ROUTINES  SDL_BUGGY_MMX_MIXERS 