**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2009 by Michael Sparmann
 * Copyright © 2010 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define LOGF_ENABLE store per endpoint, per direction, information  length of the data buffer  wait object  completion status (0 for success)  true is endpoint has been requested (true for EP0)  transfer completed  true is a transfer is pending  state of EP0 (to correctly schedule setup packet enqueing)  Setup packet is enqueud, waiting for actual data  Waiting for ack (either IN or OUT)  Ack complete, waiting for data (either IN or OUT)
     * This state is necessary because if both ack and data complete in the
     * same interrupt, we might process data completion before ack completion
     * so we need this bizarre state  Setup packet complete, waiting for ack and data  endpoints[ep_num][DIR_IN/DIR_OUT]  setup packet for EP0  USB control requests may be up to 64 bytes in size.
   Even though we never use anything more than the 8 header bytes,
   we are required to accept request packets of up to 64 bytes size.
   Provide buffer space for these additional payload bytes so that
   e.g. write descriptor requests (which are rejected by us, but the
   payload is transferred anyway) do not cause memory corruption.
   Fixes FS#12310. -- Michael Sparmann (theseven)  8 bytes  state of EP0  Ignored intentionally, because the controller requires us to set the
       new address before sending the response for some reason. So we'll
       already set it when the control request arrives, before passing that
       into the USB core, which will then call this dummy function.  disable interrupts to avoid any race     if (!out) while (((GNPTXSTS & 0xffff) << 2) < MIN(mps, length)); there is a perfect matching between usb test mode code
     * and the register field value (DEPCTL_MPS_64 << DEPCTL_mps_bitp) |  Setup next chain for IN eps  ??  PHY clock  enable  source = ? (24MHz crystal?)  Wait for OTG to ack reset  Wait for OTG AHB master idle  FIXME: the current code is for internal DMA only, the clip+ architecture
     *        defines the internal DMA model  Select UTMI+ 16  Do something that is probably CCU related but undocumented Address 0, high speed  Check hardware capabilities  it seems to be multiple tx fifo support  reset USB_PHY to prevent power consumption  PHY: Power up  PHY: Assert Software Reset  PHY: Deassert Software Reset  OTG: Assert Software Reset  Wait for OTG to ack reset  Wait for OTG AHB master idle  OTG: 16bit PHY and some reserved bits  Address 0  Soft Reconnect  Enable interrupts on all endpoints  Enable USB clock  reset the beast  PHY: Power down  Put the PHY into reset (needed to get current down)  Shut down PHY clock  works even for EP0  some bits in GINTSTS can be set even though we didn't enable the interrupt source
     * so AND it with the actual mask  Address 0  enumeration done, we now know the speed  Set up the maximum packet sizes accordingly **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2009 by Michael Sparmann
 * Copyright © 2010 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define LOGF_ENABLE store per endpoint, per direction, information  length of the data buffer  wait object  completion status (0 for success)  true is endpoint has been requested (true for EP0)  transfer completed  true is a transfer is pending  state of EP0 (to correctly schedule setup packet enqueing)  Setup packet is enqueud, waiting for actual data  Waiting for ack (either IN or OUT)  Ack complete, waiting for data (either IN or OUT)
     * This state is necessary because if both ack and data complete in the
     * same interrupt, we might process data completion before ack completion
     * so we need this bizarre state  Setup packet complete, waiting for ack and data  endpoints[ep_num][DIR_IN/DIR_OUT]  setup packet for EP0  USB control requests may be up to 64 bytes in size.
   Even though we never use anything more than the 8 header bytes,
   we are required to accept request packets of up to 64 bytes size.
   Provide buffer space for these additional payload bytes so that
   e.g. write descriptor requests (which are rejected by us, but the
   payload is transferred anyway) do not cause memory corruption.
   Fixes FS#12310. -- Michael Sparmann (theseven)  8 bytes  state of EP0  Ignored intentionally, because the controller requires us to set the
       new address before sending the response for some reason. So we'll
       already set it when the control request arrives, before passing that
       into the USB core, which will then call this dummy function.  disable interrupts to avoid any race     if (!out) while (((GNPTXSTS & 0xffff) << 2) < MIN(mps, length)); there is a perfect matching between usb test mode code
     * and the register field value (DEPCTL_MPS_64 << DEPCTL_mps_bitp) |  Setup next chain for IN eps  ??  PHY clock  enable  source = ? (24MHz crystal?)  Wait for OTG to ack reset  Wait for OTG AHB master idle  FIXME: the current code is for internal DMA only, the clip+ architecture
     *        defines the internal DMA model  Select UTMI+ 16  Do something that is probably CCU related but undocumented Address 0, high speed  Check hardware capabilities  it seems to be multiple tx fifo support  reset USB_PHY to prevent power consumption  PHY: Power up  PHY: Assert Software Reset  PHY: Deassert Software Reset  OTG: Assert Software Reset  Wait for OTG to ack reset  Wait for OTG AHB master idle  OTG: 16bit PHY and some reserved bits  Address 0  Soft Reconnect  Enable interrupts on all endpoints  Enable USB clock  reset the beast  PHY: Power down  Put the PHY into reset (needed to get current down)  Shut down PHY clock  works even for EP0  some bits in GINTSTS can be set even though we didn't enable the interrupt source
     * so AND it with the actual mask  Address 0  enumeration done, we now know the speed  Set up the maximum packet sizes accordingly **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2009 by Michael Sparmann
 * Copyright © 2010 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define LOGF_ENABLE store per endpoint, per direction, information  length of the data buffer  wait object  completion status (0 for success)  true is endpoint has been requested (true for EP0)  transfer completed  true is a transfer is pending  state of EP0 (to correctly schedule setup packet enqueing)  Setup packet is enqueud, waiting for actual data  Waiting for ack (either IN or OUT)  Ack complete, waiting for data (either IN or OUT)
     * This state is necessary because if both ack and data complete in the
     * same interrupt, we might process data completion before ack completion
     * so we need this bizarre state  Setup packet complete, waiting for ack and data  endpoints[ep_num][DIR_IN/DIR_OUT]  setup packet for EP0  USB control requests may be up to 64 bytes in size.
   Even though we never use anything more than the 8 header bytes,
   we are required to accept request packets of up to 64 bytes size.
   Provide buffer space for these additional payload bytes so that
   e.g. write descriptor requests (which are rejected by us, but the
   payload is transferred anyway) do not cause memory corruption.
   Fixes FS#12310. -- Michael Sparmann (theseven)  8 bytes  state of EP0  Ignored intentionally, because the controller requires us to set the
       new address before sending the response for some reason. So we'll
       already set it when the control request arrives, before passing that
       into the USB core, which will then call this dummy function.  disable interrupts to avoid any race     if (!out) while (((GNPTXSTS & 0xffff) << 2) < MIN(mps, length)); there is a perfect matching between usb test mode code
     * and the register field value (DEPCTL_MPS_64 << DEPCTL_mps_bitp) |  Setup next chain for IN eps  ??  PHY clock  enable  source = ? (24MHz crystal?)  Wait for OTG to ack reset  Wait for OTG AHB master idle  FIXME: the current code is for internal DMA only, the clip+ architecture
     *        defines the internal DMA model  Select UTMI+ 16  Do something that is probably CCU related but undocumented Address 0, high speed  Check hardware capabilities  it seems to be multiple tx fifo support  reset USB_PHY to prevent power consumption  PHY: Power up  PHY: Assert Software Reset  PHY: Deassert Software Reset  OTG: Assert Software Reset  Wait for OTG to ack reset  Wait for OTG AHB master idle  OTG: 16bit PHY and some reserved bits  Address 0  Soft Reconnect  Enable interrupts on all endpoints  Enable USB clock  reset the beast  PHY: Power down  Put the PHY into reset (needed to get current down)  Shut down PHY clock  works even for EP0  some bits in GINTSTS can be set even though we didn't enable the interrupt source
     * so AND it with the actual mask  Address 0  enumeration done, we now know the speed  Set up the maximum packet sizes accordingly 