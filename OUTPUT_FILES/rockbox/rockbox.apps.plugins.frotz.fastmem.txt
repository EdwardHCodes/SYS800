 fastmem.c - Memory related functions (fast version without virtual memory)
 *  Copyright (c) 1995-1997 Stefan Jokisch
 *
 * Changes for Rockbox copyright 2009 Torne Wuff
 *
 * This file is part of Frotz.
 *
 * Frotz is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Frotz is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 
 * New undo mechanism added by Jim Dunleavy <jim.dunleavy@erha.ie>
 
 * Data for the undo mechanism.
 * This undo mechanism is based on the scheme used in Evin Robertson's
 * Nitfol interpreter.
 * Undo blocks are stored as differences between states.
  undo diff and stack data follow 
 * get_header_extension
 *
 * Read a value from the header extension (former mouse table).
 *
  get_header_extension 
 * set_header_extension
 *
 * Set an entry in the header extension (former mouse table).
 *
  set_header_extension 
 * restart_header
 *
 * Set all header fields which hold information about the interpreter.
 *
  It's less trouble to use font size 1x1 for V5 games, especially
       because of a bug in the unreleased German version of "Zork 1"  restart_header 
 * init_memory
 *
 * Allocate memory and load the story file.
 *
  Open story file  Allocate memory for story header  Load header into memory  Copy header fields to global variables  Auto-detect buggy story files that need special fixes  null statement  Calculate story file size in bytes  some old games lack the file size entry  Zork Zero Macintosh doesn't have the graphics flag set  Adjust opcode tables  Allocate memory for story data  Assign left over memory as the arena for undo alloc  Load story file in chunks of 32KB  Read header extension table  init_memory 
 * init_undo
 *
 * Allocate memory for multiple undo. It is important not to occupy
 * all the memory available, since the IO interface may need memory
 * during the game, e.g. for loading sounds or pictures.
 *
  Allocate h_dynamic_size bytes for previous dynamic zmp state
       + 1.5 h_dynamic_size for Quetzal diff + 2.  init_undo 
 * free_undo
 *
 * Free count undo blocks from the beginning of the undo list.
 *
  free_undo 
 * reset_memory
 *
 * Close the story file and deallocate memory.
 *
  reset_memory 
 * storeb
 *
 * Write a byte value to the dynamic Z-machine memory.
 *
  flags register is modified  storeb 
 * storew
 *
 * Write a word value to the dynamic Z-machine memory.
 *
  storew 
 * z_restart, re-load dynamic area, clear the stack and set the PC.
 *
 *  no zargs used
 *
  z_restart 
 * get_default_name
 *
 * Read a default file name from the memory of the Z-machine and
 * copy it to a string.
 *
  get_default_name 
 * z_restore, restore [a part of] a Z-machine state from disk
 *
 *  zargs[0] = address of area to restore (optional)
 *  zargs[1] = number of bytes to restore
 *  zargs[2] = address of suggested file name
 *
  Get the file name  Open auxilary file  Load auxilary file  Close auxilary file  Get the file name  Open game file  Close game file  In V3, reset the upper window.  Reload cached header fields. 
         * Since QUETZAL files may be saved on many different machines,
         * the screen sizes may vary a lot. Erasing the status window
         * seems to cover up most of the resulting badness.
          z_restore 
 * mem_diff
 *
 * Set diff to a Quetzal-like difference between a and b,
 * copying a to b as we go.  It is assumed that diff points to a
 * buffer which is large enough to hold the diff.
 * mem_size is the number of bytes to compare.
 * Returns the number of bytes copied to diff.
 *
  mem_diff 
 * mem_undiff
 *
 * Applies a quetzal-like diff to dest
 *
  Incomplete run  Incomplete extended run  mem_undiff 
 * restore_undo
 *
 * This function does the dirty work for z_restore_undo.
 *
  undo feature unavailable  no saved game state  undo possible  restore_undo 
 * z_restore_undo, restore a Z-machine state from memory.
 *
 *  no zargs used
 *
  z_restore_undo 
 * z_save, save [a part of] the Z-machine state to disk.
 *
 *  zargs[0] = address of memory area to save (optional)
 *  zargs[1] = number of bytes to save
 *  zargs[2] = address of suggested file name
 *
  Get the file name  Open auxilary file  Write auxilary file  Close auxilary file  Get the file name  Open game file  Close game file and check for errors  Success  z_save 
 * save_undo
 *
 * This function does the dirty work for z_save_undo.
 *
  undo feature unavailable  save undo possible  Free space is all at the end  Trivial: enough room at the end  Need to wrap  Free space is somewhere else  There is room before the "first" undo  Not enough room, just need to free some  save_undo 
 * z_save_undo, save the current Z-machine state for a future undo.
 *
 *  no zargs used
 *
  z_save_undo 
 * z_verify, check the story file integrity.
 *
 *  no zargs used
 *
  Sum all bytes in story file except header bytes  Branch if the checksums are equal  z_verify  fastmem.c - Memory related functions (fast version without virtual memory)
 *  Copyright (c) 1995-1997 Stefan Jokisch
 *
 * Changes for Rockbox copyright 2009 Torne Wuff
 *
 * This file is part of Frotz.
 *
 * Frotz is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Frotz is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 
 * New undo mechanism added by Jim Dunleavy <jim.dunleavy@erha.ie>
 
 * Data for the undo mechanism.
 * This undo mechanism is based on the scheme used in Evin Robertson's
 * Nitfol interpreter.
 * Undo blocks are stored as differences between states.
  undo diff and stack data follow 
 * get_header_extension
 *
 * Read a value from the header extension (former mouse table).
 *
  get_header_extension 
 * set_header_extension
 *
 * Set an entry in the header extension (former mouse table).
 *
  set_header_extension 
 * restart_header
 *
 * Set all header fields which hold information about the interpreter.
 *
  It's less trouble to use font size 1x1 for V5 games, especially
       because of a bug in the unreleased German version of "Zork 1"  restart_header 
 * init_memory
 *
 * Allocate memory and load the story file.
 *
  Open story file  Allocate memory for story header  Load header into memory  Copy header fields to global variables  Auto-detect buggy story files that need special fixes  null statement  Calculate story file size in bytes  some old games lack the file size entry  Zork Zero Macintosh doesn't have the graphics flag set  Adjust opcode tables  Allocate memory for story data  Assign left over memory as the arena for undo alloc  Load story file in chunks of 32KB  Read header extension table  init_memory 
 * init_undo
 *
 * Allocate memory for multiple undo. It is important not to occupy
 * all the memory available, since the IO interface may need memory
 * during the game, e.g. for loading sounds or pictures.
 *
  Allocate h_dynamic_size bytes for previous dynamic zmp state
       + 1.5 h_dynamic_size for Quetzal diff + 2.  init_undo 
 * free_undo
 *
 * Free count undo blocks from the beginning of the undo list.
 *
  free_undo 
 * reset_memory
 *
 * Close the story file and deallocate memory.
 *
  reset_memory 
 * storeb
 *
 * Write a byte value to the dynamic Z-machine memory.
 *
  flags register is modified  storeb 
 * storew
 *
 * Write a word value to the dynamic Z-machine memory.
 *
  storew 
 * z_restart, re-load dynamic area, clear the stack and set the PC.
 *
 *  no zargs used
 *
  z_restart 
 * get_default_name
 *
 * Read a default file name from the memory of the Z-machine and
 * copy it to a string.
 *
  get_default_name 
 * z_restore, restore [a part of] a Z-machine state from disk
 *
 *  zargs[0] = address of area to restore (optional)
 *  zargs[1] = number of bytes to restore
 *  zargs[2] = address of suggested file name
 *
  Get the file name  Open auxilary file  Load auxilary file  Close auxilary file  Get the file name  Open game file  Close game file  In V3, reset the upper window.  Reload cached header fields. 
         * Since QUETZAL files may be saved on many different machines,
         * the screen sizes may vary a lot. Erasing the status window
         * seems to cover up most of the resulting badness.
          z_restore 
 * mem_diff
 *
 * Set diff to a Quetzal-like difference between a and b,
 * copying a to b as we go.  It is assumed that diff points to a
 * buffer which is large enough to hold the diff.
 * mem_size is the number of bytes to compare.
 * Returns the number of bytes copied to diff.
 *
  mem_diff 
 * mem_undiff
 *
 * Applies a quetzal-like diff to dest
 *
  Incomplete run  Incomplete extended run  mem_undiff 
 * restore_undo
 *
 * This function does the dirty work for z_restore_undo.
 *
  undo feature unavailable  no saved game state  undo possible  restore_undo 
 * z_restore_undo, restore a Z-machine state from memory.
 *
 *  no zargs used
 *
  z_restore_undo 
 * z_save, save [a part of] the Z-machine state to disk.
 *
 *  zargs[0] = address of memory area to save (optional)
 *  zargs[1] = number of bytes to save
 *  zargs[2] = address of suggested file name
 *
  Get the file name  Open auxilary file  Write auxilary file  Close auxilary file  Get the file name  Open game file  Close game file and check for errors  Success  z_save 
 * save_undo
 *
 * This function does the dirty work for z_save_undo.
 *
  undo feature unavailable  save undo possible  Free space is all at the end  Trivial: enough room at the end  Need to wrap  Free space is somewhere else  There is room before the "first" undo  Not enough room, just need to free some  save_undo 
 * z_save_undo, save the current Z-machine state for a future undo.
 *
 *  no zargs used
 *
  z_save_undo 
 * z_verify, check the story file integrity.
 *
 *  no zargs used
 *
  Sum all bytes in story file except header bytes  Branch if the checksums are equal  z_verify  fastmem.c - Memory related functions (fast version without virtual memory)
 *  Copyright (c) 1995-1997 Stefan Jokisch
 *
 * Changes for Rockbox copyright 2009 Torne Wuff
 *
 * This file is part of Frotz.
 *
 * Frotz is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Frotz is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 
 * New undo mechanism added by Jim Dunleavy <jim.dunleavy@erha.ie>
 
 * Data for the undo mechanism.
 * This undo mechanism is based on the scheme used in Evin Robertson's
 * Nitfol interpreter.
 * Undo blocks are stored as differences between states.
  undo diff and stack data follow 
 * get_header_extension
 *
 * Read a value from the header extension (former mouse table).
 *
  get_header_extension 
 * set_header_extension
 *
 * Set an entry in the header extension (former mouse table).
 *
  set_header_extension 
 * restart_header
 *
 * Set all header fields which hold information about the interpreter.
 *
  It's less trouble to use font size 1x1 for V5 games, especially
       because of a bug in the unreleased German version of "Zork 1"  restart_header 
 * init_memory
 *
 * Allocate memory and load the story file.
 *
  Open story file  Allocate memory for story header  Load header into memory  Copy header fields to global variables  Auto-detect buggy story files that need special fixes  null statement  Calculate story file size in bytes  some old games lack the file size entry  Zork Zero Macintosh doesn't have the graphics flag set  Adjust opcode tables  Allocate memory for story data  Assign left over memory as the arena for undo alloc  Load story file in chunks of 32KB  Read header extension table  init_memory 
 * init_undo
 *
 * Allocate memory for multiple undo. It is important not to occupy
 * all the memory available, since the IO interface may need memory
 * during the game, e.g. for loading sounds or pictures.
 *
  Allocate h_dynamic_size bytes for previous dynamic zmp state
       + 1.5 h_dynamic_size for Quetzal diff + 2.  init_undo 
 * free_undo
 *
 * Free count undo blocks from the beginning of the undo list.
 *
  free_undo 
 * reset_memory
 *
 * Close the story file and deallocate memory.
 *
  reset_memory 
 * storeb
 *
 * Write a byte value to the dynamic Z-machine memory.
 *
  flags register is modified  storeb 
 * storew
 *
 * Write a word value to the dynamic Z-machine memory.
 *
  storew 
 * z_restart, re-load dynamic area, clear the stack and set the PC.
 *
 *  no zargs used
 *
  z_restart 
 * get_default_name
 *
 * Read a default file name from the memory of the Z-machine and
 * copy it to a string.
 *
  get_default_name 
 * z_restore, restore [a part of] a Z-machine state from disk
 *
 *  zargs[0] = address of area to restore (optional)
 *  zargs[1] = number of bytes to restore
 *  zargs[2] = address of suggested file name
 *
  Get the file name  Open auxilary file  Load auxilary file  Close auxilary file  Get the file name  Open game file  Close game file  In V3, reset the upper window.  Reload cached header fields. 
         * Since QUETZAL files may be saved on many different machines,
         * the screen sizes may vary a lot. Erasing the status window
         * seems to cover up most of the resulting badness.
          z_restore 
 * mem_diff
 *
 * Set diff to a Quetzal-like difference between a and b,
 * copying a to b as we go.  It is assumed that diff points to a
 * buffer which is large enough to hold the diff.
 * mem_size is the number of bytes to compare.
 * Returns the number of bytes copied to diff.
 *
  mem_diff 
 * mem_undiff
 *
 * Applies a quetzal-like diff to dest
 *
  Incomplete run  Incomplete extended run  mem_undiff 
 * restore_undo
 *
 * This function does the dirty work for z_restore_undo.
 *
  undo feature unavailable  no saved game state  undo possible  restore_undo 
 * z_restore_undo, restore a Z-machine state from memory.
 *
 *  no zargs used
 *
  z_restore_undo 
 * z_save, save [a part of] the Z-machine state to disk.
 *
 *  zargs[0] = address of memory area to save (optional)
 *  zargs[1] = number of bytes to save
 *  zargs[2] = address of suggested file name
 *
  Get the file name  Open auxilary file  Write auxilary file  Close auxilary file  Get the file name  Open game file  Close game file and check for errors  Success  z_save 
 * save_undo
 *
 * This function does the dirty work for z_save_undo.
 *
  undo feature unavailable  save undo possible  Free space is all at the end  Trivial: enough room at the end  Need to wrap  Free space is somewhere else  There is room before the "first" undo  Not enough room, just need to free some  save_undo 
 * z_save_undo, save the current Z-machine state for a future undo.
 *
 *  no zargs used
 *
  z_save_undo 
 * z_verify, check the story file integrity.
 *
 *  no zargs used
 *
  Sum all bytes in story file except header bytes  Branch if the checksums are equal  z_verify 