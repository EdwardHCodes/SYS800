**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 Franklin Wei, Benjamin Brown
 * Copyright (C) 2004 Gregory Montoir
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************
  Read all entries from memlist.bin. Do not load anything in memory,
  this is just a fast way to access the data later based on their id.
 error() will exit() no need to return or do anything else.  Prepare stats array  Memory tracking 
  Go over every resource and check if they are marked at "MEMENTRY_STATE_LOAD_ME".
  Load them in memory and mark them are MEMENTRY_STATE_LOADED
 get resource with max rankNum  no entry found At this point the resource descriptor should be pointed to "me"  6 WTF ?!?! ResType goes up to 5 !!  This method serves two purpose:
   - Load parts in memory segments (palette,code,video1,video2)
   or
   - Load a resource in memory

   This is decided based on the resourceId. If it does not match a mementry id it is supposed to
   be a part id.  Protection screen and cinematic don't need the player and enemies polygon data
   so _memList[video2Index] is never loaded for those parts of the game. When
   needed (for action phrases) _memList[video2Index] is always loaded with 0x11
   (as seen in memListParts).  Mark all resources as located on harddrive.  This is probably a cinematic or a non interactive part of the game.  Player and enemy polygons are not needed.  This is probably a cinematic or a non interactive part of the game.  Player and enemy polygons are not needed.  prevent warnings:  _scriptCurPtr is changed in res->load();  steal the audio buffer  memory usage is first statically allocated, then the remainder is used dynamically:
     * static:
     *  [VM memory - 600K]
     *  [Framebuffers - 128K]
     *  [Temporary framebuffer - 192K]
     * dynamic:
     *  [String table buffer]
     0x800 = 2048, so we have 32KB free for vidBack and vidCur there's no need to do anything to free the audio buffer **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 Franklin Wei, Benjamin Brown
 * Copyright (C) 2004 Gregory Montoir
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************
  Read all entries from memlist.bin. Do not load anything in memory,
  this is just a fast way to access the data later based on their id.
 error() will exit() no need to return or do anything else.  Prepare stats array  Memory tracking 
  Go over every resource and check if they are marked at "MEMENTRY_STATE_LOAD_ME".
  Load them in memory and mark them are MEMENTRY_STATE_LOADED
 get resource with max rankNum  no entry found At this point the resource descriptor should be pointed to "me"  6 WTF ?!?! ResType goes up to 5 !!  This method serves two purpose:
   - Load parts in memory segments (palette,code,video1,video2)
   or
   - Load a resource in memory

   This is decided based on the resourceId. If it does not match a mementry id it is supposed to
   be a part id.  Protection screen and cinematic don't need the player and enemies polygon data
   so _memList[video2Index] is never loaded for those parts of the game. When
   needed (for action phrases) _memList[video2Index] is always loaded with 0x11
   (as seen in memListParts).  Mark all resources as located on harddrive.  This is probably a cinematic or a non interactive part of the game.  Player and enemy polygons are not needed.  This is probably a cinematic or a non interactive part of the game.  Player and enemy polygons are not needed.  prevent warnings:  _scriptCurPtr is changed in res->load();  steal the audio buffer  memory usage is first statically allocated, then the remainder is used dynamically:
     * static:
     *  [VM memory - 600K]
     *  [Framebuffers - 128K]
     *  [Temporary framebuffer - 192K]
     * dynamic:
     *  [String table buffer]
     0x800 = 2048, so we have 32KB free for vidBack and vidCur there's no need to do anything to free the audio buffer **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 Franklin Wei, Benjamin Brown
 * Copyright (C) 2004 Gregory Montoir
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************
  Read all entries from memlist.bin. Do not load anything in memory,
  this is just a fast way to access the data later based on their id.
 error() will exit() no need to return or do anything else.  Prepare stats array  Memory tracking 
  Go over every resource and check if they are marked at "MEMENTRY_STATE_LOAD_ME".
  Load them in memory and mark them are MEMENTRY_STATE_LOADED
 get resource with max rankNum  no entry found At this point the resource descriptor should be pointed to "me"  6 WTF ?!?! ResType goes up to 5 !!  This method serves two purpose:
   - Load parts in memory segments (palette,code,video1,video2)
   or
   - Load a resource in memory

   This is decided based on the resourceId. If it does not match a mementry id it is supposed to
   be a part id.  Protection screen and cinematic don't need the player and enemies polygon data
   so _memList[video2Index] is never loaded for those parts of the game. When
   needed (for action phrases) _memList[video2Index] is always loaded with 0x11
   (as seen in memListParts).  Mark all resources as located on harddrive.  This is probably a cinematic or a non interactive part of the game.  Player and enemy polygons are not needed.  This is probably a cinematic or a non interactive part of the game.  Player and enemy polygons are not needed.  prevent warnings:  _scriptCurPtr is changed in res->load();  steal the audio buffer  memory usage is first statically allocated, then the remainder is used dynamically:
     * static:
     *  [VM memory - 600K]
     *  [Framebuffers - 128K]
     *  [Temporary framebuffer - 192K]
     * dynamic:
     *  [String table buffer]
     0x800 = 2048, so we have 32KB free for vidBack and vidCur there's no need to do anything to free the audio buffer 