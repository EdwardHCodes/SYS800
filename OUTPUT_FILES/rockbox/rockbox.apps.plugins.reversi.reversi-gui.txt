**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2006 Alexander Levin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
GUI part of reversi. Code is inspired by sudoku code by Dave Chapman
which is copyright (c) 2005 Dave Chapman and is released under the
GNU General Public License.


User instructions
-----------------

Use the arrow keys to move cursor, and press TOGGLE to place a stone.

At any time during the game, press MENU to bring up the game menu with
further options:
  - Save
  - Reload
  - Clear
 This is initialized at the start of the plugin and used to determine the
 * Appropriate game board size/legend spacing if the font is larger than a cell
 * height/width.
  Where the board begins  Total width and height of the board without enclosing box  Thickness of the white cells' lines  Margins within a cell  Upper left corner of a cell  Used for touchscreen to convert an X/Y location to a cell location  Board state  --- Setting values ---  Playing strategies used by white and black players  Cursor position  Color for the next move (BLACK/WHITE)  Active cursor wrapping mode  This uses the touchscreen library functions/structures.  This defines the number of buttons used; only used in this C file.  Define the button locations, widths and heights  Define Menu button x, y, width, height  Define Quit Button x, y, width, height  Define Menu button x, y, width, height  Define Quit Button x, y, width, height  This is the button initialization/definition.  The first element is the 
 *  Viewport.  This is defined in lcd.h, but the elements are:
 *      int x                   - X location of button/viewport
 *      int y                   - Y location of button/viewport
 *      int width               - Width of button/viewport
 *      int height              - Height of button/viewport
 *      int font                - Font to be used on button/viewport
 *      int drawmode            - Modes defined in lcd.h
 *      unsigned fg_pattern     - foreground color
 *      unsigned bg_pattern     - backbround color
 *
 * The rest of the touch button elements are:
 *   bool repeat    - requires the area be held for the action
 *   int action     - action this button will return
 *   bool invisible - Is this an invisible button?
 *   char *title    - Specify a title 
 *   fb_data *pixmap- Currently unused, but will allow for a graphic
  Initialises the state of the game (starts a new game)  Place the cursor so that WHITE can make a move  Draws the cursor in the specified cell. Cursor is drawn in the complement
 * mode, i.e. drawing it twice will result in no changes on the screen.
  Draw the shadows  Draws the cell of the specified color (WHITE/BLACK) assuming that
 * the upper left corner of the cell is at (x, y)  Cell is free -> nothing to do  Draws the complete screen  This viewport is used to draw a scrolling score  Clear the display buffer  Thicker board box  Draw the gridlines  Draw the stones. This is not the most efficient way but more readable  Draw the cursor  Draw the current score  Draw the box around the current player  Update the screen 
 * Menu related stuff
  Menu entries and the corresponding values for cursor wrap mode  Menu entries and the corresponding values for available strategies { "AB robot", -1 },&strategy_ab Sets the strategy for the specified player. 'player' is the
   pointer to the player to set the strategy for (actually,
   either white_strategy or black_strategy). propmpt is the
   text to show as the prompt in the menu  Returns true iff USB ws connected while in the menu  Start a new game  Pass the move to the partner  Strategy for black  Strategy for white  Cursor wrap mode  Quit  Calculates the new cursor position if the user wants to move it
 * vertically as specified by delta. Current wrap mode is respected.
 * The cursor is not actually moved.
 *
 * Returns true iff the cursor would be really moved. In any case, the
 * new cursor position is stored in (new_row, new_col).
  Calculates the new cursor position if the user wants to move it
 * horisontally as specified by delta. Current wrap mode is respected.
 * The cursor is not actually moved.
 *
 * Returns true iff the cursor would be really moved. In any case, the
 * new cursor position is stored in (new_row, new_col).
  Actually moves the cursor to the new position and updates the screen  Only update the changed cells since there are no global changes  plugin entry point  Initialize Font Width and height  Avoid compiler warnings  Some AIs use rand()  The main game loop  TODO: Add some delay to prevent it from being too fast ?  TODO: Don't duplicate end of game check  Must update screen after splash **********************************************************************
         * Button handling code happens below here
         ********************************************************************* The touchscreen buttons can act as true buttons so OR them in  All of these button presses wait for the release event  Check if the click was in the gameboard, if so move cursor.
                 *  This has to happen before MAKE_MOVE is processed.
                  If you touch the game board instead of hitting menu after it
                 *  has completed the game will exit out.
                  Move was made. Global changes on the board are possible  Redraw the screen next time  Must update screen after splash  An attempt to make an invalid move  Ignore any button presses during the splash  These button presses will run on a release or a repeat event  Move cursor left  Move cursor right  Move cursor up  Move cursor down  Quit if USB has been connected **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2006 Alexander Levin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
GUI part of reversi. Code is inspired by sudoku code by Dave Chapman
which is copyright (c) 2005 Dave Chapman and is released under the
GNU General Public License.


User instructions
-----------------

Use the arrow keys to move cursor, and press TOGGLE to place a stone.

At any time during the game, press MENU to bring up the game menu with
further options:
  - Save
  - Reload
  - Clear
 This is initialized at the start of the plugin and used to determine the
 * Appropriate game board size/legend spacing if the font is larger than a cell
 * height/width.
  Where the board begins  Total width and height of the board without enclosing box  Thickness of the white cells' lines  Margins within a cell  Upper left corner of a cell  Used for touchscreen to convert an X/Y location to a cell location  Board state  --- Setting values ---  Playing strategies used by white and black players  Cursor position  Color for the next move (BLACK/WHITE)  Active cursor wrapping mode  This uses the touchscreen library functions/structures.  This defines the number of buttons used; only used in this C file.  Define the button locations, widths and heights  Define Menu button x, y, width, height  Define Quit Button x, y, width, height  Define Menu button x, y, width, height  Define Quit Button x, y, width, height  This is the button initialization/definition.  The first element is the 
 *  Viewport.  This is defined in lcd.h, but the elements are:
 *      int x                   - X location of button/viewport
 *      int y                   - Y location of button/viewport
 *      int width               - Width of button/viewport
 *      int height              - Height of button/viewport
 *      int font                - Font to be used on button/viewport
 *      int drawmode            - Modes defined in lcd.h
 *      unsigned fg_pattern     - foreground color
 *      unsigned bg_pattern     - backbround color
 *
 * The rest of the touch button elements are:
 *   bool repeat    - requires the area be held for the action
 *   int action     - action this button will return
 *   bool invisible - Is this an invisible button?
 *   char *title    - Specify a title 
 *   fb_data *pixmap- Currently unused, but will allow for a graphic
  Initialises the state of the game (starts a new game)  Place the cursor so that WHITE can make a move  Draws the cursor in the specified cell. Cursor is drawn in the complement
 * mode, i.e. drawing it twice will result in no changes on the screen.
  Draw the shadows  Draws the cell of the specified color (WHITE/BLACK) assuming that
 * the upper left corner of the cell is at (x, y)  Cell is free -> nothing to do  Draws the complete screen  This viewport is used to draw a scrolling score  Clear the display buffer  Thicker board box  Draw the gridlines  Draw the stones. This is not the most efficient way but more readable  Draw the cursor  Draw the current score  Draw the box around the current player  Update the screen 
 * Menu related stuff
  Menu entries and the corresponding values for cursor wrap mode  Menu entries and the corresponding values for available strategies { "AB robot", -1 },&strategy_ab Sets the strategy for the specified player. 'player' is the
   pointer to the player to set the strategy for (actually,
   either white_strategy or black_strategy). propmpt is the
   text to show as the prompt in the menu  Returns true iff USB ws connected while in the menu  Start a new game  Pass the move to the partner  Strategy for black  Strategy for white  Cursor wrap mode  Quit  Calculates the new cursor position if the user wants to move it
 * vertically as specified by delta. Current wrap mode is respected.
 * The cursor is not actually moved.
 *
 * Returns true iff the cursor would be really moved. In any case, the
 * new cursor position is stored in (new_row, new_col).
  Calculates the new cursor position if the user wants to move it
 * horisontally as specified by delta. Current wrap mode is respected.
 * The cursor is not actually moved.
 *
 * Returns true iff the cursor would be really moved. In any case, the
 * new cursor position is stored in (new_row, new_col).
  Actually moves the cursor to the new position and updates the screen  Only update the changed cells since there are no global changes  plugin entry point  Initialize Font Width and height  Avoid compiler warnings  Some AIs use rand()  The main game loop  TODO: Add some delay to prevent it from being too fast ?  TODO: Don't duplicate end of game check  Must update screen after splash **********************************************************************
         * Button handling code happens below here
         ********************************************************************* The touchscreen buttons can act as true buttons so OR them in  All of these button presses wait for the release event  Check if the click was in the gameboard, if so move cursor.
                 *  This has to happen before MAKE_MOVE is processed.
                  If you touch the game board instead of hitting menu after it
                 *  has completed the game will exit out.
                  Move was made. Global changes on the board are possible  Redraw the screen next time  Must update screen after splash  An attempt to make an invalid move  Ignore any button presses during the splash  These button presses will run on a release or a repeat event  Move cursor left  Move cursor right  Move cursor up  Move cursor down  Quit if USB has been connected **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2006 Alexander Levin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
GUI part of reversi. Code is inspired by sudoku code by Dave Chapman
which is copyright (c) 2005 Dave Chapman and is released under the
GNU General Public License.


User instructions
-----------------

Use the arrow keys to move cursor, and press TOGGLE to place a stone.

At any time during the game, press MENU to bring up the game menu with
further options:
  - Save
  - Reload
  - Clear
 This is initialized at the start of the plugin and used to determine the
 * Appropriate game board size/legend spacing if the font is larger than a cell
 * height/width.
  Where the board begins  Total width and height of the board without enclosing box  Thickness of the white cells' lines  Margins within a cell  Upper left corner of a cell  Used for touchscreen to convert an X/Y location to a cell location  Board state  --- Setting values ---  Playing strategies used by white and black players  Cursor position  Color for the next move (BLACK/WHITE)  Active cursor wrapping mode  This uses the touchscreen library functions/structures.  This defines the number of buttons used; only used in this C file.  Define the button locations, widths and heights  Define Menu button x, y, width, height  Define Quit Button x, y, width, height  Define Menu button x, y, width, height  Define Quit Button x, y, width, height  This is the button initialization/definition.  The first element is the 
 *  Viewport.  This is defined in lcd.h, but the elements are:
 *      int x                   - X location of button/viewport
 *      int y                   - Y location of button/viewport
 *      int width               - Width of button/viewport
 *      int height              - Height of button/viewport
 *      int font                - Font to be used on button/viewport
 *      int drawmode            - Modes defined in lcd.h
 *      unsigned fg_pattern     - foreground color
 *      unsigned bg_pattern     - backbround color
 *
 * The rest of the touch button elements are:
 *   bool repeat    - requires the area be held for the action
 *   int action     - action this button will return
 *   bool invisible - Is this an invisible button?
 *   char *title    - Specify a title 
 *   fb_data *pixmap- Currently unused, but will allow for a graphic
  Initialises the state of the game (starts a new game)  Place the cursor so that WHITE can make a move  Draws the cursor in the specified cell. Cursor is drawn in the complement
 * mode, i.e. drawing it twice will result in no changes on the screen.
  Draw the shadows  Draws the cell of the specified color (WHITE/BLACK) assuming that
 * the upper left corner of the cell is at (x, y)  Cell is free -> nothing to do  Draws the complete screen  This viewport is used to draw a scrolling score  Clear the display buffer  Thicker board box  Draw the gridlines  Draw the stones. This is not the most efficient way but more readable  Draw the cursor  Draw the current score  Draw the box around the current player  Update the screen 
 * Menu related stuff
  Menu entries and the corresponding values for cursor wrap mode  Menu entries and the corresponding values for available strategies { "AB robot", -1 },&strategy_ab Sets the strategy for the specified player. 'player' is the
   pointer to the player to set the strategy for (actually,
   either white_strategy or black_strategy). propmpt is the
   text to show as the prompt in the menu  Returns true iff USB ws connected while in the menu  Start a new game  Pass the move to the partner  Strategy for black  Strategy for white  Cursor wrap mode  Quit  Calculates the new cursor position if the user wants to move it
 * vertically as specified by delta. Current wrap mode is respected.
 * The cursor is not actually moved.
 *
 * Returns true iff the cursor would be really moved. In any case, the
 * new cursor position is stored in (new_row, new_col).
  Calculates the new cursor position if the user wants to move it
 * horisontally as specified by delta. Current wrap mode is respected.
 * The cursor is not actually moved.
 *
 * Returns true iff the cursor would be really moved. In any case, the
 * new cursor position is stored in (new_row, new_col).
  Actually moves the cursor to the new position and updates the screen  Only update the changed cells since there are no global changes  plugin entry point  Initialize Font Width and height  Avoid compiler warnings  Some AIs use rand()  The main game loop  TODO: Add some delay to prevent it from being too fast ?  TODO: Don't duplicate end of game check  Must update screen after splash **********************************************************************
         * Button handling code happens below here
         ********************************************************************* The touchscreen buttons can act as true buttons so OR them in  All of these button presses wait for the release event  Check if the click was in the gameboard, if so move cursor.
                 *  This has to happen before MAKE_MOVE is processed.
                  If you touch the game board instead of hitting menu after it
                 *  has completed the game will exit out.
                  Move was made. Global changes on the board are possible  Redraw the screen next time  Must update screen after splash  An attempt to make an invalid move  Ignore any button presses during the splash  These button presses will run on a release or a repeat event  Move cursor left  Move cursor right  Move cursor up  Move cursor down  Quit if USB has been connected 