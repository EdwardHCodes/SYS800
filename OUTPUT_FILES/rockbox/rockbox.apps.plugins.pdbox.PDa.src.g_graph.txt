 Copyright (c) 1997-2001 Miller Puckette and others.
* For information on usage and redistribution, and for a DISCLAIMER OF ALL
* WARRANTIES, see the file, "LICENSE.txt," in this distribution.   This file deals with the behavior of glists as either "text objects" or
"graphs" inside another glist.  LATER move the inlet/outlet code of g_canvas.c 
to this file...  ROCKBOX  ROCKBOX  ---------------------- forward definitions -----------------  -------------------- maintaining the list --------------------  this is to protect against a hairy problem in which deleting
    a sub-canvas might delete an inlet on a box, after the box had
    been invisible-ized, so that we have to protect against redrawing it!  delete an object from a glist and free it  HACK -- we had phantom outlets not getting erased on the
	    screen because the canvas_setdeleting() mechanism is too
	    crude.  LATER carefully set up rules for when the rtexts
	    should exist, so that they stay around until all the
	    steps of becoming invisible are done.  In the meantime, just
	    zap the inlets and outlets here...  ROCKBOX  ROCKBOX  remove every object from a glist.  Experimental.  check that we have built rtexts yet.  LATER need a better test.  --------------- inlets and outlets  -----------  ----------calculating coordinates and controlling appearance --------- ***** routines to convert pixels to X or Y value and vice versa ***** convert an x pixel value to an x coordinate value  if we appear as a text box on parent, our range in our
	coordinates (x1, etc.) specifies the coordinate range
	of a one-pixel square at top left of the window.  if we're a graph when shown on parent, but own our own
	window right now, our range in our coordinates (x1, etc.) is spread
	over the visible window size, given by screenx1, etc.  otherwise, we appear in a graph within a parent glist,
	 so get our screen rectangle on parent and transform.  convert an x coordinate value to an x pixel location in window  convert an X screen distance to an X coordinate increment.
      This is terribly inefficient;
      but probably not a big enough CPU hog to warrant optimizing.  get the window location in pixels of a "text" object.  The
    object's x and y positions are in pixels when the glist they're
    in is toplevel.  If it's not, we convert to pixels on the parent
    window.  redraw all the items in a glist.  We construe this to mean
    redrawing in its own window and on parent, as needed in each case.
    This is too conservative -- for instance, when you draw an "open"
    rectangle on the parent, you shouldn't have to redraw the window!   LATER fix the graph_vis() code to handle both cases  redraw all the lines  ROCKBOX  ROCKBOX  --------------------------- widget behavior  -------------------  Note that some code in here would also be useful for drawing
    graph decorations in toplevels...  ordinary subpatches: just act like a text object  if we look like a graph but have been moved to a toplevel,
	just show the bounding rectangle  otherwise draw (or erase) us as a graph inside another glist.  draw a rectangle around the graph  draw ticks on horizontal borders.  If lperb field is
    	    zero, this is disabled.  draw ticks in vertical borders draw x labels  ROCKBOX  ROCKBOX  draw y labels  ROCKBOX  ROCKBOX  draw contents of graph as glist  get the graph's rectangle, not counting extra swelling for controls
    to keep them inside the graph.  This is the "logical" pixel size.  this used to adjust graph size when it was in another graph;
    	    now we just preserve the size.  same logic here as in text_xpix():  get the rectangle, enlarged to contain all the "contents" --
    meaning their formal bounds rectangles.  lie about whether we have our own window to affect gobj_getrect
	    calls below.  (LATER add argument to gobj_getrect()?)  don't do this for arrays, just let them hang outsize the
		box.  I think this was just wrong.  verify that the array is OK  check if the object wants to be clicked  ROCKBOX  ROCKBOX  find the graph most recently added to this glist;
    	if none exists, return 0.  message back from dialog GUI to set parameters.  Args are:
    	1-4: bounds in our coordinates; 5-6: size in parent  Copyright (c) 1997-2001 Miller Puckette and others.
* For information on usage and redistribution, and for a DISCLAIMER OF ALL
* WARRANTIES, see the file, "LICENSE.txt," in this distribution.   This file deals with the behavior of glists as either "text objects" or
"graphs" inside another glist.  LATER move the inlet/outlet code of g_canvas.c 
to this file...  ROCKBOX  ROCKBOX  ---------------------- forward definitions -----------------  -------------------- maintaining the list --------------------  this is to protect against a hairy problem in which deleting
    a sub-canvas might delete an inlet on a box, after the box had
    been invisible-ized, so that we have to protect against redrawing it!  delete an object from a glist and free it  HACK -- we had phantom outlets not getting erased on the
	    screen because the canvas_setdeleting() mechanism is too
	    crude.  LATER carefully set up rules for when the rtexts
	    should exist, so that they stay around until all the
	    steps of becoming invisible are done.  In the meantime, just
	    zap the inlets and outlets here...  ROCKBOX  ROCKBOX  remove every object from a glist.  Experimental.  check that we have built rtexts yet.  LATER need a better test.  --------------- inlets and outlets  -----------  ----------calculating coordinates and controlling appearance --------- ***** routines to convert pixels to X or Y value and vice versa ***** convert an x pixel value to an x coordinate value  if we appear as a text box on parent, our range in our
	coordinates (x1, etc.) specifies the coordinate range
	of a one-pixel square at top left of the window.  if we're a graph when shown on parent, but own our own
	window right now, our range in our coordinates (x1, etc.) is spread
	over the visible window size, given by screenx1, etc.  otherwise, we appear in a graph within a parent glist,
	 so get our screen rectangle on parent and transform.  convert an x coordinate value to an x pixel location in window  convert an X screen distance to an X coordinate increment.
      This is terribly inefficient;
      but probably not a big enough CPU hog to warrant optimizing.  get the window location in pixels of a "text" object.  The
    object's x and y positions are in pixels when the glist they're
    in is toplevel.  If it's not, we convert to pixels on the parent
    window.  redraw all the items in a glist.  We construe this to mean
    redrawing in its own window and on parent, as needed in each case.
    This is too conservative -- for instance, when you draw an "open"
    rectangle on the parent, you shouldn't have to redraw the window!   LATER fix the graph_vis() code to handle both cases  redraw all the lines  ROCKBOX  ROCKBOX  --------------------------- widget behavior  -------------------  Note that some code in here would also be useful for drawing
    graph decorations in toplevels...  ordinary subpatches: just act like a text object  if we look like a graph but have been moved to a toplevel,
	just show the bounding rectangle  otherwise draw (or erase) us as a graph inside another glist.  draw a rectangle around the graph  draw ticks on horizontal borders.  If lperb field is
    	    zero, this is disabled.  draw ticks in vertical borders draw x labels  ROCKBOX  ROCKBOX  draw y labels  ROCKBOX  ROCKBOX  draw contents of graph as glist  get the graph's rectangle, not counting extra swelling for controls
    to keep them inside the graph.  This is the "logical" pixel size.  this used to adjust graph size when it was in another graph;
    	    now we just preserve the size.  same logic here as in text_xpix():  get the rectangle, enlarged to contain all the "contents" --
    meaning their formal bounds rectangles.  lie about whether we have our own window to affect gobj_getrect
	    calls below.  (LATER add argument to gobj_getrect()?)  don't do this for arrays, just let them hang outsize the
		box.  I think this was just wrong.  verify that the array is OK  check if the object wants to be clicked  ROCKBOX  ROCKBOX  find the graph most recently added to this glist;
    	if none exists, return 0.  message back from dialog GUI to set parameters.  Args are:
    	1-4: bounds in our coordinates; 5-6: size in parent  Copyright (c) 1997-2001 Miller Puckette and others.
* For information on usage and redistribution, and for a DISCLAIMER OF ALL
* WARRANTIES, see the file, "LICENSE.txt," in this distribution.   This file deals with the behavior of glists as either "text objects" or
"graphs" inside another glist.  LATER move the inlet/outlet code of g_canvas.c 
to this file...  ROCKBOX  ROCKBOX  ---------------------- forward definitions -----------------  -------------------- maintaining the list --------------------  this is to protect against a hairy problem in which deleting
    a sub-canvas might delete an inlet on a box, after the box had
    been invisible-ized, so that we have to protect against redrawing it!  delete an object from a glist and free it  HACK -- we had phantom outlets not getting erased on the
	    screen because the canvas_setdeleting() mechanism is too
	    crude.  LATER carefully set up rules for when the rtexts
	    should exist, so that they stay around until all the
	    steps of becoming invisible are done.  In the meantime, just
	    zap the inlets and outlets here...  ROCKBOX  ROCKBOX  remove every object from a glist.  Experimental.  check that we have built rtexts yet.  LATER need a better test.  --------------- inlets and outlets  -----------  ----------calculating coordinates and controlling appearance --------- ***** routines to convert pixels to X or Y value and vice versa ***** convert an x pixel value to an x coordinate value  if we appear as a text box on parent, our range in our
	coordinates (x1, etc.) specifies the coordinate range
	of a one-pixel square at top left of the window.  if we're a graph when shown on parent, but own our own
	window right now, our range in our coordinates (x1, etc.) is spread
	over the visible window size, given by screenx1, etc.  otherwise, we appear in a graph within a parent glist,
	 so get our screen rectangle on parent and transform.  convert an x coordinate value to an x pixel location in window  convert an X screen distance to an X coordinate increment.
      This is terribly inefficient;
      but probably not a big enough CPU hog to warrant optimizing.  get the window location in pixels of a "text" object.  The
    object's x and y positions are in pixels when the glist they're
    in is toplevel.  If it's not, we convert to pixels on the parent
    window.  redraw all the items in a glist.  We construe this to mean
    redrawing in its own window and on parent, as needed in each case.
    This is too conservative -- for instance, when you draw an "open"
    rectangle on the parent, you shouldn't have to redraw the window!   LATER fix the graph_vis() code to handle both cases  redraw all the lines  ROCKBOX  ROCKBOX  --------------------------- widget behavior  -------------------  Note that some code in here would also be useful for drawing
    graph decorations in toplevels...  ordinary subpatches: just act like a text object  if we look like a graph but have been moved to a toplevel,
	just show the bounding rectangle  otherwise draw (or erase) us as a graph inside another glist.  draw a rectangle around the graph  draw ticks on horizontal borders.  If lperb field is
    	    zero, this is disabled.  draw ticks in vertical borders draw x labels  ROCKBOX  ROCKBOX  draw y labels  ROCKBOX  ROCKBOX  draw contents of graph as glist  get the graph's rectangle, not counting extra swelling for controls
    to keep them inside the graph.  This is the "logical" pixel size.  this used to adjust graph size when it was in another graph;
    	    now we just preserve the size.  same logic here as in text_xpix():  get the rectangle, enlarged to contain all the "contents" --
    meaning their formal bounds rectangles.  lie about whether we have our own window to affect gobj_getrect
	    calls below.  (LATER add argument to gobj_getrect()?)  don't do this for arrays, just let them hang outsize the
		box.  I think this was just wrong.  verify that the array is OK  check if the object wants to be clicked  ROCKBOX  ROCKBOX  find the graph most recently added to this glist;
    	if none exists, return 0.  message back from dialog GUI to set parameters.  Args are:
    	1-4: bounds in our coordinates; 5-6: size in parent 