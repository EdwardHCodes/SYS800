**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Daniel Stenberg
 *
 * iPod driver based on code from the ipodlinux project - http://ipodlinux.org
 * Adapted for Rockbox in December 2005
 * Original file: linux/arch/armnommu/mach-ipod/keyboard.c
 * Copyright (c) 2003-2005 Bernard Leach (leachbj@bouncycastle.org)
 *
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * Rockbox button functions
  timeout for acceleration = 250ms  timeout for button repeat = 250ms  timeout for untouching wheel = 150ms  wheelclicks per full rotation  This amount of clicks is needed for at least scrolling 1 item. Choose small values 
 * to have high sensitivity but few precision, choose large values to have less 
 * sensitivity and good precision.  iPod nano has smaller wheel, lower sensitivity needed  default sensitivity  Variable to use for setting button status in interrupt handler  finish reset  enable buttons (needed for "hold"-detection)  Highest wheel = 0x5F, clockwise increases  switch on backlight (again), reset power-off timer  Check whether the scrollwheel was untouched by accident or by will.  This is needed because wheel may be untoched very shortly during rotation  wheel has been really untouched -> reset internal variables  wheel was shortly untouched by accident -> leave internal variables  This is for later = BUTTON_SCROLL_TOUCH; Taking into account wrapping during transition from highest 
                     * to lowest wheel position and back  Forward wrapping case  Backward wrapping case  Getting direction and wheel_keycode from wheel_delta.
                     * Need at least some clicks to be sure to avoid haptic fuzziness  undo signedness  add the current wheel_delta  clicks/sec = 1000000 * clicks/usec  conversion to degree/sec  undo signedness  some velocity filtering to smooth things out  limit to 24 bit  assume REPEAT = off  direction reversals must nullify acceleration and accumulator  on same direction REPEAT is assumed when new click is within timeout  timeout nullifies acceleration and accumulator  The queue should have no other events when scrolling  each WHEEL_SENSITIVITY clicks = scrolling 1 item  use data-format for HAVE_SCROLLWHEEL  always use acceleration mode (1<<31)  always set message post count to (1<<24) for iPod  this way the scrolling is always calculated from wheel_velocity  scrollwheel was touched for the first time after finger lifting  In this case the finger was lifted from the scrollwheel.  Save the new absolute wheel position  The following delay was 250 in the ipodlinux source, but 50 seems to 
       work fine - tested on Nano, Color/Photo and Video.  hold button - enable as input  unmask interrupt  Clear interrupts  stop s5l8702 controller 
 * Get button pressed from hardware
  normal buttons  lock -> disable wheel sensor pmu_ldo_power_off(1); disable clickwheel power supply  unlock -> enable wheel sensor pmu_ldo_power_on(1); enable clickwheel power supply  The int_btn variable is set in the button interrupt handler **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Daniel Stenberg
 *
 * iPod driver based on code from the ipodlinux project - http://ipodlinux.org
 * Adapted for Rockbox in December 2005
 * Original file: linux/arch/armnommu/mach-ipod/keyboard.c
 * Copyright (c) 2003-2005 Bernard Leach (leachbj@bouncycastle.org)
 *
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * Rockbox button functions
  timeout for acceleration = 250ms  timeout for button repeat = 250ms  timeout for untouching wheel = 150ms  wheelclicks per full rotation  This amount of clicks is needed for at least scrolling 1 item. Choose small values 
 * to have high sensitivity but few precision, choose large values to have less 
 * sensitivity and good precision.  iPod nano has smaller wheel, lower sensitivity needed  default sensitivity  Variable to use for setting button status in interrupt handler  finish reset  enable buttons (needed for "hold"-detection)  Highest wheel = 0x5F, clockwise increases  switch on backlight (again), reset power-off timer  Check whether the scrollwheel was untouched by accident or by will.  This is needed because wheel may be untoched very shortly during rotation  wheel has been really untouched -> reset internal variables  wheel was shortly untouched by accident -> leave internal variables  This is for later = BUTTON_SCROLL_TOUCH; Taking into account wrapping during transition from highest 
                     * to lowest wheel position and back  Forward wrapping case  Backward wrapping case  Getting direction and wheel_keycode from wheel_delta.
                     * Need at least some clicks to be sure to avoid haptic fuzziness  undo signedness  add the current wheel_delta  clicks/sec = 1000000 * clicks/usec  conversion to degree/sec  undo signedness  some velocity filtering to smooth things out  limit to 24 bit  assume REPEAT = off  direction reversals must nullify acceleration and accumulator  on same direction REPEAT is assumed when new click is within timeout  timeout nullifies acceleration and accumulator  The queue should have no other events when scrolling  each WHEEL_SENSITIVITY clicks = scrolling 1 item  use data-format for HAVE_SCROLLWHEEL  always use acceleration mode (1<<31)  always set message post count to (1<<24) for iPod  this way the scrolling is always calculated from wheel_velocity  scrollwheel was touched for the first time after finger lifting  In this case the finger was lifted from the scrollwheel.  Save the new absolute wheel position  The following delay was 250 in the ipodlinux source, but 50 seems to 
       work fine - tested on Nano, Color/Photo and Video.  hold button - enable as input  unmask interrupt  Clear interrupts  stop s5l8702 controller 
 * Get button pressed from hardware
  normal buttons  lock -> disable wheel sensor pmu_ldo_power_off(1); disable clickwheel power supply  unlock -> enable wheel sensor pmu_ldo_power_on(1); enable clickwheel power supply  The int_btn variable is set in the button interrupt handler **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Daniel Stenberg
 *
 * iPod driver based on code from the ipodlinux project - http://ipodlinux.org
 * Adapted for Rockbox in December 2005
 * Original file: linux/arch/armnommu/mach-ipod/keyboard.c
 * Copyright (c) 2003-2005 Bernard Leach (leachbj@bouncycastle.org)
 *
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * Rockbox button functions
  timeout for acceleration = 250ms  timeout for button repeat = 250ms  timeout for untouching wheel = 150ms  wheelclicks per full rotation  This amount of clicks is needed for at least scrolling 1 item. Choose small values 
 * to have high sensitivity but few precision, choose large values to have less 
 * sensitivity and good precision.  iPod nano has smaller wheel, lower sensitivity needed  default sensitivity  Variable to use for setting button status in interrupt handler  finish reset  enable buttons (needed for "hold"-detection)  Highest wheel = 0x5F, clockwise increases  switch on backlight (again), reset power-off timer  Check whether the scrollwheel was untouched by accident or by will.  This is needed because wheel may be untoched very shortly during rotation  wheel has been really untouched -> reset internal variables  wheel was shortly untouched by accident -> leave internal variables  This is for later = BUTTON_SCROLL_TOUCH; Taking into account wrapping during transition from highest 
                     * to lowest wheel position and back  Forward wrapping case  Backward wrapping case  Getting direction and wheel_keycode from wheel_delta.
                     * Need at least some clicks to be sure to avoid haptic fuzziness  undo signedness  add the current wheel_delta  clicks/sec = 1000000 * clicks/usec  conversion to degree/sec  undo signedness  some velocity filtering to smooth things out  limit to 24 bit  assume REPEAT = off  direction reversals must nullify acceleration and accumulator  on same direction REPEAT is assumed when new click is within timeout  timeout nullifies acceleration and accumulator  The queue should have no other events when scrolling  each WHEEL_SENSITIVITY clicks = scrolling 1 item  use data-format for HAVE_SCROLLWHEEL  always use acceleration mode (1<<31)  always set message post count to (1<<24) for iPod  this way the scrolling is always calculated from wheel_velocity  scrollwheel was touched for the first time after finger lifting  In this case the finger was lifted from the scrollwheel.  Save the new absolute wheel position  The following delay was 250 in the ipodlinux source, but 50 seems to 
       work fine - tested on Nano, Color/Photo and Video.  hold button - enable as input  unmask interrupt  Clear interrupts  stop s5l8702 controller 
 * Get button pressed from hardware
  normal buttons  lock -> disable wheel sensor pmu_ldo_power_off(1); disable clickwheel power supply  unlock -> enable wheel sensor pmu_ldo_power_on(1); enable clickwheel power supply  The int_btn variable is set in the button interrupt handler 