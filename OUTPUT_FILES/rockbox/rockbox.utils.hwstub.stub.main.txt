**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2013 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************
 * 
 * USB stack
 * 
  will be filled in later  In 2mA units  this is stringid #0: languages supported  LANGID US English  int max_packet_size;  config desc  max_packet_size = (usb_drv_port_speed() ? 512 : 64);  max_packet_size = (usb_drv_port_speed() ? 64 : 512);  interface desc  hwstub version  hwstub layout  hwstub target  target specific descriptors  fix config descriptor  default implementation, relying on the compiler to produce correct code,
 * targets should reimplement this...  NOTE: READ2 is also called after a coprocessor operation  trap exceptions  in case of call, respond after return  in case of jump, respond immediately and disconnect usb  ok this is tricky because the coprocessor read instruction encoding
     * contains the register and select, so we need to generate the instruction
     * on the fly, we generate a "function like" buffer with three instructions:
     * mfc0 v0, reg, sel
     * jr ra
     * nop
     v0ra jr ra  nop  ok this is tricky because the coprocessor write instruction encoding
     * contains the register and select, so we need to generate the instruction
     * on the fly, we generate a "function like" buffer with three instructions:
     * mtc0 a0, reg, sel
     * jr ra
     * nop
     a0ra jr ra  nop  coprocessor read: return <0 on error (-2 for dull dump), or size to return
 * to host otherwise  virtually all targets do register-based operation, so 32-bit  coprocessor write: return <0 on error (-2 for dull dump), or 0 on success  virtually all targets do register-based operation, so 32-bit  return size to return to host or <0 on error  -2 means full debug dump  handle operations  read cannot have extra data  debug output  request should at least contain the header  perform coprocessor operation: put output buffer after the input one,
     * limit output buffer size to maximum buffer size  STALL on error  acknowledge  if there is a read stage, prepare everything for the READ2 return handle_class_dev_req(req);*
 * 
 * Main
 * 
 **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2013 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************
 * 
 * USB stack
 * 
  will be filled in later  In 2mA units  this is stringid #0: languages supported  LANGID US English  int max_packet_size;  config desc  max_packet_size = (usb_drv_port_speed() ? 512 : 64);  max_packet_size = (usb_drv_port_speed() ? 64 : 512);  interface desc  hwstub version  hwstub layout  hwstub target  target specific descriptors  fix config descriptor  default implementation, relying on the compiler to produce correct code,
 * targets should reimplement this...  NOTE: READ2 is also called after a coprocessor operation  trap exceptions  in case of call, respond after return  in case of jump, respond immediately and disconnect usb  ok this is tricky because the coprocessor read instruction encoding
     * contains the register and select, so we need to generate the instruction
     * on the fly, we generate a "function like" buffer with three instructions:
     * mfc0 v0, reg, sel
     * jr ra
     * nop
     v0ra jr ra  nop  ok this is tricky because the coprocessor write instruction encoding
     * contains the register and select, so we need to generate the instruction
     * on the fly, we generate a "function like" buffer with three instructions:
     * mtc0 a0, reg, sel
     * jr ra
     * nop
     a0ra jr ra  nop  coprocessor read: return <0 on error (-2 for dull dump), or size to return
 * to host otherwise  virtually all targets do register-based operation, so 32-bit  coprocessor write: return <0 on error (-2 for dull dump), or 0 on success  virtually all targets do register-based operation, so 32-bit  return size to return to host or <0 on error  -2 means full debug dump  handle operations  read cannot have extra data  debug output  request should at least contain the header  perform coprocessor operation: put output buffer after the input one,
     * limit output buffer size to maximum buffer size  STALL on error  acknowledge  if there is a read stage, prepare everything for the READ2 return handle_class_dev_req(req);*
 * 
 * Main
 * 
 **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2013 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************
 * 
 * USB stack
 * 
  will be filled in later  In 2mA units  this is stringid #0: languages supported  LANGID US English  int max_packet_size;  config desc  max_packet_size = (usb_drv_port_speed() ? 512 : 64);  max_packet_size = (usb_drv_port_speed() ? 64 : 512);  interface desc  hwstub version  hwstub layout  hwstub target  target specific descriptors  fix config descriptor  default implementation, relying on the compiler to produce correct code,
 * targets should reimplement this...  NOTE: READ2 is also called after a coprocessor operation  trap exceptions  in case of call, respond after return  in case of jump, respond immediately and disconnect usb  ok this is tricky because the coprocessor read instruction encoding
     * contains the register and select, so we need to generate the instruction
     * on the fly, we generate a "function like" buffer with three instructions:
     * mfc0 v0, reg, sel
     * jr ra
     * nop
     v0ra jr ra  nop  ok this is tricky because the coprocessor write instruction encoding
     * contains the register and select, so we need to generate the instruction
     * on the fly, we generate a "function like" buffer with three instructions:
     * mtc0 a0, reg, sel
     * jr ra
     * nop
     a0ra jr ra  nop  coprocessor read: return <0 on error (-2 for dull dump), or size to return
 * to host otherwise  virtually all targets do register-based operation, so 32-bit  coprocessor write: return <0 on error (-2 for dull dump), or 0 on success  virtually all targets do register-based operation, so 32-bit  return size to return to host or <0 on error  -2 means full debug dump  handle operations  read cannot have extra data  debug output  request should at least contain the header  perform coprocessor operation: put output buffer after the input one,
     * limit output buffer size to maximum buffer size  STALL on error  acknowledge  if there is a read stage, prepare everything for the READ2 return handle_class_dev_req(req);*
 * 
 * Main
 * 
 