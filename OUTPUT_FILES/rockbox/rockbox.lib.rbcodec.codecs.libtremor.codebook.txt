*******************************************************************
 *                                                                  *
 * THIS FILE IS PART OF THE OggVorbis 'TREMOR' CODEC SOURCE CODE.   *
 *                                                                  *
 * USE, DISTRIBUTION AND REPRODUCTION OF THIS LIBRARY SOURCE IS     *
 * GOVERNED BY A BSD-STYLE SOURCE LICENSE INCLUDED WITH THIS SOURCE *
 * IN 'COPYING'. PLEASE READ THESE TERMS BEFORE DISTRIBUTING.       *
 *                                                                  *
 * THE OggVorbis 'TREMOR' SOURCE CODE IS (C) COPYRIGHT 1994-2002    *
 * BY THE Xiph.Org FOUNDATION http://www.xiph.org/                  *
 *                                                                  *
 ********************************************************************

 function: basic codebook pack/unpack/code/decode operations

 ******************************************************************* unpacks a codebook from the packet buffer into the codebook struct,
   readies the codebook auxiliary structures for decode ************ make sure alignment is correct  first the basic parameters  codeword ordering.... length ordered or unordered?  allocated but unused entries?  unordered  allocated but unused entries?  yes, unused entries  all entries used; no tagging  ordered  EOF  Do we have a mapping to unpack?  no mapping  implicitly populated value mapping  explicitly populated value mapping  quantized values  all set  the 'eliminate the decode tree' optimization actually requires the
   codewords to be MSb first, not LSb.  This is an annoying inelegancy
   (and one of the first places where carefully thought out design
   turned out to be wrong; Vorbis II and future Ogg codecs should go
   to an MSb bitpacker), but not actually the huge hit it appears to
   be.  The first-stage decode table catches most words so that
   bitreverse is not in the main execution path.  swap halfwords and bytes  Sequence is one instruction    longer than on <= ARMv5, but    interlock free  nibbles swapped  mask = 0x33333333  dibits swapped  mask = 0x55555555  bits swapped  ARM_ARCH <= 5  swap halfwords  bytes swapped  mask = 0x0f0f0f0f  nibbles swapped  mask = 0x33333333  dibits swapped  mask = 0x55555555  bits swapped  ARM_ARCH  outputs  inputs  !_ARM_ASSEM_  bytes swapped  4-bit units swapped  2-bit units swapped  done  !_ARM_ASSEM_  force eop  bisect search for the codeword in the ordered list  Decode side is specced and easier, because we don't need to find
   matches using different criteria; we simply read and map.  There are
   two things we need to do 'depending':
   
   We may need to support interleave.  We don't really, but it's
   convenient to do it here rather than rebuild the vector later.

   Cascades may be additive or multiplicitive; this is not inherent in
   the codebook, but set in the code using the codebook.  Like
   interleaving, it's easiest to do it here.  
   addmul==0 -> declarative (set the value)
   addmul==1 -> additive
   addmul==2 -> multiplicitive  returns the [original, not compacted] entry number or -1 on eof ******** if there's no dec_index, the codebook unpacking isn't collapsed  returns 0 on OK or -1 on eof ************************************ decode vector / dim granularity gaurding is done in the upper layer  decode vector / dim granularity gaurding is done in the upper layer  unlike the others, we guard against n not being an integer number
   of <dim> internally rather than in the upper layer (called only by
   floor0)  decode vector / dim granularity gaurding is done in the upper layer *******************************************************************
 *                                                                  *
 * THIS FILE IS PART OF THE OggVorbis 'TREMOR' CODEC SOURCE CODE.   *
 *                                                                  *
 * USE, DISTRIBUTION AND REPRODUCTION OF THIS LIBRARY SOURCE IS     *
 * GOVERNED BY A BSD-STYLE SOURCE LICENSE INCLUDED WITH THIS SOURCE *
 * IN 'COPYING'. PLEASE READ THESE TERMS BEFORE DISTRIBUTING.       *
 *                                                                  *
 * THE OggVorbis 'TREMOR' SOURCE CODE IS (C) COPYRIGHT 1994-2002    *
 * BY THE Xiph.Org FOUNDATION http://www.xiph.org/                  *
 *                                                                  *
 ********************************************************************

 function: basic codebook pack/unpack/code/decode operations

 ******************************************************************* unpacks a codebook from the packet buffer into the codebook struct,
   readies the codebook auxiliary structures for decode ************ make sure alignment is correct  first the basic parameters  codeword ordering.... length ordered or unordered?  allocated but unused entries?  unordered  allocated but unused entries?  yes, unused entries  all entries used; no tagging  ordered  EOF  Do we have a mapping to unpack?  no mapping  implicitly populated value mapping  explicitly populated value mapping  quantized values  all set  the 'eliminate the decode tree' optimization actually requires the
   codewords to be MSb first, not LSb.  This is an annoying inelegancy
   (and one of the first places where carefully thought out design
   turned out to be wrong; Vorbis II and future Ogg codecs should go
   to an MSb bitpacker), but not actually the huge hit it appears to
   be.  The first-stage decode table catches most words so that
   bitreverse is not in the main execution path.  swap halfwords and bytes  Sequence is one instruction    longer than on <= ARMv5, but    interlock free  nibbles swapped  mask = 0x33333333  dibits swapped  mask = 0x55555555  bits swapped  ARM_ARCH <= 5  swap halfwords  bytes swapped  mask = 0x0f0f0f0f  nibbles swapped  mask = 0x33333333  dibits swapped  mask = 0x55555555  bits swapped  ARM_ARCH  outputs  inputs  !_ARM_ASSEM_  bytes swapped  4-bit units swapped  2-bit units swapped  done  !_ARM_ASSEM_  force eop  bisect search for the codeword in the ordered list  Decode side is specced and easier, because we don't need to find
   matches using different criteria; we simply read and map.  There are
   two things we need to do 'depending':
   
   We may need to support interleave.  We don't really, but it's
   convenient to do it here rather than rebuild the vector later.

   Cascades may be additive or multiplicitive; this is not inherent in
   the codebook, but set in the code using the codebook.  Like
   interleaving, it's easiest to do it here.  
   addmul==0 -> declarative (set the value)
   addmul==1 -> additive
   addmul==2 -> multiplicitive  returns the [original, not compacted] entry number or -1 on eof ******** if there's no dec_index, the codebook unpacking isn't collapsed  returns 0 on OK or -1 on eof ************************************ decode vector / dim granularity gaurding is done in the upper layer  decode vector / dim granularity gaurding is done in the upper layer  unlike the others, we guard against n not being an integer number
   of <dim> internally rather than in the upper layer (called only by
   floor0)  decode vector / dim granularity gaurding is done in the upper layer *******************************************************************
 *                                                                  *
 * THIS FILE IS PART OF THE OggVorbis 'TREMOR' CODEC SOURCE CODE.   *
 *                                                                  *
 * USE, DISTRIBUTION AND REPRODUCTION OF THIS LIBRARY SOURCE IS     *
 * GOVERNED BY A BSD-STYLE SOURCE LICENSE INCLUDED WITH THIS SOURCE *
 * IN 'COPYING'. PLEASE READ THESE TERMS BEFORE DISTRIBUTING.       *
 *                                                                  *
 * THE OggVorbis 'TREMOR' SOURCE CODE IS (C) COPYRIGHT 1994-2002    *
 * BY THE Xiph.Org FOUNDATION http://www.xiph.org/                  *
 *                                                                  *
 ********************************************************************

 function: basic codebook pack/unpack/code/decode operations

 ******************************************************************* unpacks a codebook from the packet buffer into the codebook struct,
   readies the codebook auxiliary structures for decode ************ make sure alignment is correct  first the basic parameters  codeword ordering.... length ordered or unordered?  allocated but unused entries?  unordered  allocated but unused entries?  yes, unused entries  all entries used; no tagging  ordered  EOF  Do we have a mapping to unpack?  no mapping  implicitly populated value mapping  explicitly populated value mapping  quantized values  all set  the 'eliminate the decode tree' optimization actually requires the
   codewords to be MSb first, not LSb.  This is an annoying inelegancy
   (and one of the first places where carefully thought out design
   turned out to be wrong; Vorbis II and future Ogg codecs should go
   to an MSb bitpacker), but not actually the huge hit it appears to
   be.  The first-stage decode table catches most words so that
   bitreverse is not in the main execution path.  swap halfwords and bytes  Sequence is one instruction    longer than on <= ARMv5, but    interlock free  nibbles swapped  mask = 0x33333333  dibits swapped  mask = 0x55555555  bits swapped  ARM_ARCH <= 5  swap halfwords  bytes swapped  mask = 0x0f0f0f0f  nibbles swapped  mask = 0x33333333  dibits swapped  mask = 0x55555555  bits swapped  ARM_ARCH  outputs  inputs  !_ARM_ASSEM_  bytes swapped  4-bit units swapped  2-bit units swapped  done  !_ARM_ASSEM_  force eop  bisect search for the codeword in the ordered list  Decode side is specced and easier, because we don't need to find
   matches using different criteria; we simply read and map.  There are
   two things we need to do 'depending':
   
   We may need to support interleave.  We don't really, but it's
   convenient to do it here rather than rebuild the vector later.

   Cascades may be additive or multiplicitive; this is not inherent in
   the codebook, but set in the code using the codebook.  Like
   interleaving, it's easiest to do it here.  
   addmul==0 -> declarative (set the value)
   addmul==1 -> additive
   addmul==2 -> multiplicitive  returns the [original, not compacted] entry number or -1 on eof ******** if there's no dec_index, the codebook unpacking isn't collapsed  returns 0 on OK or -1 on eof ************************************ decode vector / dim granularity gaurding is done in the upper layer  decode vector / dim granularity gaurding is done in the upper layer  unlike the others, we guard against n not being an integer number
   of <dim> internally rather than in the upper layer (called only by
   floor0)  decode vector / dim granularity gaurding is done in the upper layer 