*
   * test the clock drift, etc on the implementation that returns a simple clock
   * reading. i.e device does not have an external reference clock to generate
   * a combined reading.
   *
   * @throws Exception
    start with the system clock being in sync with device pretend the device got faster than the system clock device is still slower, but there is a drift. start with the system clock being in sync with device pretend the device got faster than the system clock The clock would return the reference reading so setting device should not have any effect on the reading device is still slower, but there is a drift. This was modeled after the Draeger Clock This happens too routinely to expend the I/O here tried using the destination_order.source_timestamp_tolerance but that was even too tight TODO reconsider how we are deriving a device timestamp log.warn("Not emitting timestamp="+new Date(now)+" where last timestamp was "+new Date(then));*
   * test the clock drift, etc on the implementation that returns a simple clock
   * reading. i.e device does not have an external reference clock to generate
   * a combined reading.
   *
   * @throws Exception
    start with the system clock being in sync with device pretend the device got faster than the system clock device is still slower, but there is a drift. start with the system clock being in sync with device pretend the device got faster than the system clock The clock would return the reference reading so setting device should not have any effect on the reading device is still slower, but there is a drift. This was modeled after the Draeger Clock This happens too routinely to expend the I/O here tried using the destination_order.source_timestamp_tolerance but that was even too tight TODO reconsider how we are deriving a device timestamp log.warn("Not emitting timestamp="+new Date(now)+" where last timestamp was "+new Date(then));*
   * test the clock drift, etc on the implementation that returns a simple clock
   * reading. i.e device does not have an external reference clock to generate
   * a combined reading.
   *
   * @throws Exception
    start with the system clock being in sync with device pretend the device got faster than the system clock device is still slower, but there is a drift. start with the system clock being in sync with device pretend the device got faster than the system clock The clock would return the reference reading so setting device should not have any effect on the reading device is still slower, but there is a drift. This was modeled after the Draeger Clock This happens too routinely to expend the I/O here tried using the destination_order.source_timestamp_tolerance but that was even too tight TODO reconsider how we are deriving a device timestamp log.warn("Not emitting timestamp="+new Date(now)+" where last timestamp was "+new Date(then));*
   * test the clock drift, etc on the implementation that returns a simple clock
   * reading. i.e device does not have an external reference clock to generate
   * a combined reading.
   *
   * @throws Exception
    start with the system clock being in sync with device pretend the device got faster than the system clock device is still slower, but there is a drift. start with the system clock being in sync with device pretend the device got faster than the system clock The clock would return the reference reading so setting device should not have any effect on the reading device is still slower, but there is a drift. This was modeled after the Draeger Clock This happens too routinely to expend the I/O here tried using the destination_order.source_timestamp_tolerance but that was even too tight TODO reconsider how we are deriving a device timestamp log.warn("Not emitting timestamp="+new Date(now)+" where last timestamp was "+new Date(then));