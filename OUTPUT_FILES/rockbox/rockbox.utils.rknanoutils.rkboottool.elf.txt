**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************
 * Definitions
 *   taken from elf.h linux header
 *   based on ELF specification
 *   based on ARM ELF specification
  Magic number and other info  Object file type  Architecture  Object file version  Entry point virtual address  Program header table file offset  Section header table file offset  Processor-specific flags  ELF header size in bytes  Program header table entry size  Program header table entry count  Section header table entry size  Section header table entry count  Section header string table index  File identification byte 0 index  Magic number byte 0  File identification byte 1 index  Magic number byte 1  File identification byte 2 index  Magic number byte 2  File identification byte 3 index  Magic number byte 3  File class byte index  32-bit objects  Data encoding byte index  2's complement, little endian  File version byte index, Value must be EV_CURRENT  OS ABI identification  UNIX System V ABI  ARM EABI  ARM  ABI version  Byte index of padding bytes  Executable file  ARM  Current version  Undefined section  Section name (string tbl index)  Section type  Section flags  Section virtual addr at execution  Section file offset  Section size in bytes  Link to another section  Additional section information  Section alignment  Entry size if section holds table  Section header table entry unused  Program data  Symbol table  String table  Relocation entries with addends  Symbol hash table  Dynamic linking information  Notes  Program space with no data (bss)  Relocation entries, no addends  Reserved  Dynamic linker symbol table  Array of constructors  Array of destructors  Array of pre-constructors  Section group  Extended section indeces  Number of defined types.   Writable  Occupies memory during execution  Executable  Might be merged  Contains nul-terminated strings  Segment type  Segment file offset  Segment virtual address  Segment physical address  Segment size in file  Segment size in memory  Segment flags  Segment alignment  Loadable program segment  Segment is executable  Segment is writable  Segment is readable  one for section 0 and one for string table  allocate enough size to hold any combinaison of .text/.bss in the string table:
     * - one empty name ("\0")
     * - at most N names of the form ".textXXXX\0" or ".bssXXXX\0"
     * - one name ".shstrtab\0"  assume identity map ?  read header  basic checks  run through sections  run through segments **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************
 * Definitions
 *   taken from elf.h linux header
 *   based on ELF specification
 *   based on ARM ELF specification
  Magic number and other info  Object file type  Architecture  Object file version  Entry point virtual address  Program header table file offset  Section header table file offset  Processor-specific flags  ELF header size in bytes  Program header table entry size  Program header table entry count  Section header table entry size  Section header table entry count  Section header string table index  File identification byte 0 index  Magic number byte 0  File identification byte 1 index  Magic number byte 1  File identification byte 2 index  Magic number byte 2  File identification byte 3 index  Magic number byte 3  File class byte index  32-bit objects  Data encoding byte index  2's complement, little endian  File version byte index, Value must be EV_CURRENT  OS ABI identification  UNIX System V ABI  ARM EABI  ARM  ABI version  Byte index of padding bytes  Executable file  ARM  Current version  Undefined section  Section name (string tbl index)  Section type  Section flags  Section virtual addr at execution  Section file offset  Section size in bytes  Link to another section  Additional section information  Section alignment  Entry size if section holds table  Section header table entry unused  Program data  Symbol table  String table  Relocation entries with addends  Symbol hash table  Dynamic linking information  Notes  Program space with no data (bss)  Relocation entries, no addends  Reserved  Dynamic linker symbol table  Array of constructors  Array of destructors  Array of pre-constructors  Section group  Extended section indeces  Number of defined types.   Writable  Occupies memory during execution  Executable  Might be merged  Contains nul-terminated strings  Segment type  Segment file offset  Segment virtual address  Segment physical address  Segment size in file  Segment size in memory  Segment flags  Segment alignment  Loadable program segment  Segment is executable  Segment is writable  Segment is readable  one for section 0 and one for string table  allocate enough size to hold any combinaison of .text/.bss in the string table:
     * - one empty name ("\0")
     * - at most N names of the form ".textXXXX\0" or ".bssXXXX\0"
     * - one name ".shstrtab\0"  assume identity map ?  read header  basic checks  run through sections  run through segments **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************
 * Definitions
 *   taken from elf.h linux header
 *   based on ELF specification
 *   based on ARM ELF specification
  Magic number and other info  Object file type  Architecture  Object file version  Entry point virtual address  Program header table file offset  Section header table file offset  Processor-specific flags  ELF header size in bytes  Program header table entry size  Program header table entry count  Section header table entry size  Section header table entry count  Section header string table index  File identification byte 0 index  Magic number byte 0  File identification byte 1 index  Magic number byte 1  File identification byte 2 index  Magic number byte 2  File identification byte 3 index  Magic number byte 3  File class byte index  32-bit objects  Data encoding byte index  2's complement, little endian  File version byte index, Value must be EV_CURRENT  OS ABI identification  UNIX System V ABI  ARM EABI  ARM  ABI version  Byte index of padding bytes  Executable file  ARM  Current version  Undefined section  Section name (string tbl index)  Section type  Section flags  Section virtual addr at execution  Section file offset  Section size in bytes  Link to another section  Additional section information  Section alignment  Entry size if section holds table  Section header table entry unused  Program data  Symbol table  String table  Relocation entries with addends  Symbol hash table  Dynamic linking information  Notes  Program space with no data (bss)  Relocation entries, no addends  Reserved  Dynamic linker symbol table  Array of constructors  Array of destructors  Array of pre-constructors  Section group  Extended section indeces  Number of defined types.   Writable  Occupies memory during execution  Executable  Might be merged  Contains nul-terminated strings  Segment type  Segment file offset  Segment virtual address  Segment physical address  Segment size in file  Segment size in memory  Segment flags  Segment alignment  Loadable program segment  Segment is executable  Segment is writable  Segment is readable  one for section 0 and one for string table  allocate enough size to hold any combinaison of .text/.bss in the string table:
     * - one empty name ("\0")
     * - at most N names of the form ".textXXXX\0" or ".bssXXXX\0"
     * - one name ".shstrtab\0"  assume identity map ?  read header  basic checks  run through sections  run through segments 