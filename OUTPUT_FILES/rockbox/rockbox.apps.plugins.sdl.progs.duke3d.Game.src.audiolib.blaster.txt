
Copyright (C) 1994-1995 Apogee Software, Ltd.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*********************************************************************
   module: BLASTER.C

   author: James R. Dose
   date:   February 4, 1994

   Low level routines to support Sound Blaster, Sound Blaster Pro,
   Sound Blaster 16, and compatible sound cards.

   (c) Copyright 1994 James R. Dose.  All Rights Reserved.
********************************************************************* Unsupported SB 1.0 SBPro SB 2.xx SBPro 2 Unsupported SB16 adequate stack size This is defined because we can't create local variables in a function that switches stacks. These declarations are necessary to use the inline assembly pragmas. This function will get the current stack selector and pointer and save them off. This function will set the stack selector and pointer to the specified values.---------------------------------------------------------------------
   Function: BLASTER_ErrorString

   Returns a pointer to the error message associated with an error
   number.  A -1 returns a pointer the current error.
---------------------------------------------------------------------*********************************************************************

   Memory locked functions:

*********************************************************************---------------------------------------------------------------------
   Function: BLASTER_EnableInterrupt

   Enables the triggering of the sound card interrupt.
--------------------------------------------------------------------- Unmask system interrupt---------------------------------------------------------------------
   Function: BLASTER_DisableInterrupt

   Disables the triggering of the sound card interrupt.
--------------------------------------------------------------------- Restore interrupt mask---------------------------------------------------------------------
   Function: BLASTER_ServiceInterrupt

   Handles interrupt generated by sound card at the end of a voice
   transfer.  Calls the user supplied callback function.
--------------------------------------------------------------------- save stack set our stack Acknowledge interrupt Check if this is this an SB16 or newer Check if a 16-bit DMA interrupt occurred Acknowledge 16-bit transfer interrupt restore stack Wasn't our interrupt.  Call the old one. Older card - can't detect if an interrupt occurred. Keep track of current buffer Continue playback on cards without autoinit mode Call the caller's callback function restore stack send EOI to Interrupt Controller---------------------------------------------------------------------
   Function: BLASTER_WriteDSP

   Writes a byte of data to the sound card's DSP.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_ReadDSP

   Reads a byte of data from the sound card's DSP.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_ResetDSP

   Sends a reset command to the sound card's Digital Signal Processor
   (DSP), causing it to perform an initialization.
--------------------------------------------------------------------- What the hell am I doing here?
   count = 100;

   do
      {
      if ( inp( port ) == 255 )
         {
         break;
         }

      count--;
      }
   while( count > 0 );
---------------------------------------------------------------------
   Function: BLASTER_GetDSPVersion

   Returns the version number of the sound card's DSP.
--------------------------------------------------------------------- DSP_Version1xx---------------------------------------------------------------------
   Function: BLASTER_SpeakerOn

   Enables output from the DAC.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_SpeakerOff

   Disables output from the DAC.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_SetPlaybackRate

   Sets the rate at which the digitized sound will be played in
   hertz.
--------------------------------------------------------------------- Send sampling rate as time constant for older Sound Blaster compatible cards. Keep track of what the actual rate is Send literal sampling rate for cards with DSP version 4.xx (Sound Blaster 16) Set playback rate Set recording rate---------------------------------------------------------------------
   Function: BLASTER_GetPlaybackRate

   Returns the rate at which the digitized sound will be played in
   hertz.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_SetMixMode

   Sets the sound card to play samples in mono or stereo.
--------------------------------------------------------------------- For the Sound Blaster Pro, we have to set the mixer chip to play mono or stereo samples. Get current mode set stereo mode bit set the mode---------------------------------------------------------------------
   Function: BLASTER_StopPlayback

   Ends the DMA transfer of digitized sound to the sound card.
--------------------------------------------------------------------- Don't allow anymore interrupts Disable the DMA channel Turn off speaker---------------------------------------------------------------------
   Function: BLASTER_SetupDMABuffer

   Programs the DMAC for sound transfer.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_GetCurrentPos

   Returns the offset within the current sound being played.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_DSP1xx_BeginPlayback

   Starts playback of digitized sound on cards compatible with DSP
   version 1.xx.
--------------------------------------------------------------------- Program DSP to play sound---------------------------------------------------------------------
   Function: BLASTER_DSP2xx_BeginPlayback

   Starts playback of digitized sound on cards compatible with DSP
   version 2.xx.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_DSP4xx_BeginPlayback

   Starts playback of digitized sound on cards compatible with DSP
   version 4.xx, such as the Sound Blaster 16.
--------------------------------------------------------------------- Program DSP to play sound---------------------------------------------------------------------
   Function: BLASTER_BeginBufferedPlayback

   Begins multibuffered playback of digitized sound on the sound card.
---------------------------------------------------------------------JIM   if ( BLASTER_SoundPlaying || BLASTER_SoundRecording ) Turn on speaker  Program the sound card to start the transfer.---------------------------------------------------------------------
   Function: BLASTER_DSP4xx_BeginRecord

   Starts recording of digitized sound on cards compatible with DSP
   version 4.xx, such as the Sound Blaster 16.
--------------------------------------------------------------------- Program DSP to play sound---------------------------------------------------------------------
   Function: BLASTER_DSP2xx_BeginRecord

   Starts recording of digitized sound on cards compatible with DSP
   version 2.xx.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_DSP1xx_BeginRecord

   Starts recording of digitized sound on cards compatible with DSP
   version 1.xx.
--------------------------------------------------------------------- Program DSP to play sound---------------------------------------------------------------------
   Function: BLASTER_BeginBufferedRecord

   Begins multibuffered recording of digitized sound on the sound card.
---------------------------------------------------------------------JIM   if ( BLASTER_SoundPlaying || BLASTER_SoundRecording ) Turn off speaker  Program the sound card to start the transfer.---------------------------------------------------------------------
   Function: BLASTER_WriteMixer

   Writes a byte of data to the Sound Blaster's mixer chip.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_ReadMixer

   Reads a byte of data from the Sound Blaster's mixer chip.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_GetVoiceVolume

   Reads the average volume of the digitized sound channel from the
   Sound Blaster's mixer chip.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_SetVoiceVolume

   Sets the volume of the digitized sound channel on the Sound
   Blaster's mixer chip.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_GetMidiVolume

   Reads the average volume of the Midi sound channel from the
   Sound Blaster's mixer chip.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_SetMidiVolume

   Sets the volume of the Midi sound channel on the Sound
   Blaster's mixer chip.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_CardHasMixer

   Checks if the selected Sound Blaster card has a mixer.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_SaveVoiceVolume

   Saves the user's voice mixer settings.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_RestoreVoiceVolume

   Restores the user's voice mixer settings.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_SaveMidiVolume

   Saves the user's FM mixer settings.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_RestoreMidiVolume

   Restores the user's FM mixer settings.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_GetEnv

   Retrieves the BLASTER environment settings and returns them to
   the caller.
--------------------------------------------------------------------- Skip the offending data sscanf( Blaster, "%*s" );---------------------------------------------------------------------
   Function: BLASTER_SetCardSettings

   Sets up the sound card's parameters.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_GetCardSettings

   Sets up the sound card's parameters.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_GetCardInfo

   Returns the maximum number of bits that can represent a sample
   (8 or 16) and the number of channels (1 for mono, 2 for stereo).
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_SetCallBack

   Specifies the user function to call at the end of a sound transfer.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_LockEnd

   Used for determining the length of the functions to lock in memory.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_UnlockMemory

   Unlocks all neccessary data.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_LockMemory

   Locks all neccessary data.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: allocateTimerStack

   Allocate a block of memory from conventional (low) memory and return
   the selector (which can go directly into a segment register) of the
   memory block or 0 if an error occured.
--------------------------------------------------------------------- clear all registers DPMI allocate conventional memory size in paragraphs DPMI call returns selector in dx (ax contains real mode segment which is ignored here) Couldn't allocate memory.---------------------------------------------------------------------
   Function: deallocateTimerStack

   Deallocate a block of conventional (low) memory given a selector to
   it.  Assumes the block was allocated with DPMI function 0x100.
--------------------------------------------------------------------- clear all registers---------------------------------------------------------------------
   Function: BLASTER_SetupWaveBlaster

   Allows the WaveBlaster to play music while the Sound Blaster 16
   plays digital sound.
--------------------------------------------------------------------- Disable MPU401 interrupts.  If they are not disabled, the SB16 will not produce sound or music.---------------------------------------------------------------------
   Function: BLASTER_ShutdownWaveBlaster

   Restores WaveBlaster mixer to original state.
--------------------------------------------------------------------- Restore the state of MPU401 interrupts.  If they are not disabled, the SB16 will not produce sound or music.---------------------------------------------------------------------
   Function: BLASTER_Init

   Initializes the sound card and prepares the module to play
   digitized sounds.
--------------------------------------------------------------------- Save the interrupt masks Install our interrupt handler Leave a little room at top of stack just for the hell of it...---------------------------------------------------------------------
   Function: BLASTER_Shutdown

   Ends transfer of sound data to the sound card and restores the
   system resources used by the card.
--------------------------------------------------------------------- Halt the DMA transfer Reset the DSP Restore the original interrupt
Copyright (C) 1994-1995 Apogee Software, Ltd.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*********************************************************************
   module: BLASTER.C

   author: James R. Dose
   date:   February 4, 1994

   Low level routines to support Sound Blaster, Sound Blaster Pro,
   Sound Blaster 16, and compatible sound cards.

   (c) Copyright 1994 James R. Dose.  All Rights Reserved.
********************************************************************* Unsupported SB 1.0 SBPro SB 2.xx SBPro 2 Unsupported SB16 adequate stack size This is defined because we can't create local variables in a function that switches stacks. These declarations are necessary to use the inline assembly pragmas. This function will get the current stack selector and pointer and save them off. This function will set the stack selector and pointer to the specified values.---------------------------------------------------------------------
   Function: BLASTER_ErrorString

   Returns a pointer to the error message associated with an error
   number.  A -1 returns a pointer the current error.
---------------------------------------------------------------------*********************************************************************

   Memory locked functions:

*********************************************************************---------------------------------------------------------------------
   Function: BLASTER_EnableInterrupt

   Enables the triggering of the sound card interrupt.
--------------------------------------------------------------------- Unmask system interrupt---------------------------------------------------------------------
   Function: BLASTER_DisableInterrupt

   Disables the triggering of the sound card interrupt.
--------------------------------------------------------------------- Restore interrupt mask---------------------------------------------------------------------
   Function: BLASTER_ServiceInterrupt

   Handles interrupt generated by sound card at the end of a voice
   transfer.  Calls the user supplied callback function.
--------------------------------------------------------------------- save stack set our stack Acknowledge interrupt Check if this is this an SB16 or newer Check if a 16-bit DMA interrupt occurred Acknowledge 16-bit transfer interrupt restore stack Wasn't our interrupt.  Call the old one. Older card - can't detect if an interrupt occurred. Keep track of current buffer Continue playback on cards without autoinit mode Call the caller's callback function restore stack send EOI to Interrupt Controller---------------------------------------------------------------------
   Function: BLASTER_WriteDSP

   Writes a byte of data to the sound card's DSP.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_ReadDSP

   Reads a byte of data from the sound card's DSP.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_ResetDSP

   Sends a reset command to the sound card's Digital Signal Processor
   (DSP), causing it to perform an initialization.
--------------------------------------------------------------------- What the hell am I doing here?
   count = 100;

   do
      {
      if ( inp( port ) == 255 )
         {
         break;
         }

      count--;
      }
   while( count > 0 );
---------------------------------------------------------------------
   Function: BLASTER_GetDSPVersion

   Returns the version number of the sound card's DSP.
--------------------------------------------------------------------- DSP_Version1xx---------------------------------------------------------------------
   Function: BLASTER_SpeakerOn

   Enables output from the DAC.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_SpeakerOff

   Disables output from the DAC.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_SetPlaybackRate

   Sets the rate at which the digitized sound will be played in
   hertz.
--------------------------------------------------------------------- Send sampling rate as time constant for older Sound Blaster compatible cards. Keep track of what the actual rate is Send literal sampling rate for cards with DSP version 4.xx (Sound Blaster 16) Set playback rate Set recording rate---------------------------------------------------------------------
   Function: BLASTER_GetPlaybackRate

   Returns the rate at which the digitized sound will be played in
   hertz.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_SetMixMode

   Sets the sound card to play samples in mono or stereo.
--------------------------------------------------------------------- For the Sound Blaster Pro, we have to set the mixer chip to play mono or stereo samples. Get current mode set stereo mode bit set the mode---------------------------------------------------------------------
   Function: BLASTER_StopPlayback

   Ends the DMA transfer of digitized sound to the sound card.
--------------------------------------------------------------------- Don't allow anymore interrupts Disable the DMA channel Turn off speaker---------------------------------------------------------------------
   Function: BLASTER_SetupDMABuffer

   Programs the DMAC for sound transfer.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_GetCurrentPos

   Returns the offset within the current sound being played.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_DSP1xx_BeginPlayback

   Starts playback of digitized sound on cards compatible with DSP
   version 1.xx.
--------------------------------------------------------------------- Program DSP to play sound---------------------------------------------------------------------
   Function: BLASTER_DSP2xx_BeginPlayback

   Starts playback of digitized sound on cards compatible with DSP
   version 2.xx.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_DSP4xx_BeginPlayback

   Starts playback of digitized sound on cards compatible with DSP
   version 4.xx, such as the Sound Blaster 16.
--------------------------------------------------------------------- Program DSP to play sound---------------------------------------------------------------------
   Function: BLASTER_BeginBufferedPlayback

   Begins multibuffered playback of digitized sound on the sound card.
---------------------------------------------------------------------JIM   if ( BLASTER_SoundPlaying || BLASTER_SoundRecording ) Turn on speaker  Program the sound card to start the transfer.---------------------------------------------------------------------
   Function: BLASTER_DSP4xx_BeginRecord

   Starts recording of digitized sound on cards compatible with DSP
   version 4.xx, such as the Sound Blaster 16.
--------------------------------------------------------------------- Program DSP to play sound---------------------------------------------------------------------
   Function: BLASTER_DSP2xx_BeginRecord

   Starts recording of digitized sound on cards compatible with DSP
   version 2.xx.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_DSP1xx_BeginRecord

   Starts recording of digitized sound on cards compatible with DSP
   version 1.xx.
--------------------------------------------------------------------- Program DSP to play sound---------------------------------------------------------------------
   Function: BLASTER_BeginBufferedRecord

   Begins multibuffered recording of digitized sound on the sound card.
---------------------------------------------------------------------JIM   if ( BLASTER_SoundPlaying || BLASTER_SoundRecording ) Turn off speaker  Program the sound card to start the transfer.---------------------------------------------------------------------
   Function: BLASTER_WriteMixer

   Writes a byte of data to the Sound Blaster's mixer chip.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_ReadMixer

   Reads a byte of data from the Sound Blaster's mixer chip.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_GetVoiceVolume

   Reads the average volume of the digitized sound channel from the
   Sound Blaster's mixer chip.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_SetVoiceVolume

   Sets the volume of the digitized sound channel on the Sound
   Blaster's mixer chip.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_GetMidiVolume

   Reads the average volume of the Midi sound channel from the
   Sound Blaster's mixer chip.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_SetMidiVolume

   Sets the volume of the Midi sound channel on the Sound
   Blaster's mixer chip.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_CardHasMixer

   Checks if the selected Sound Blaster card has a mixer.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_SaveVoiceVolume

   Saves the user's voice mixer settings.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_RestoreVoiceVolume

   Restores the user's voice mixer settings.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_SaveMidiVolume

   Saves the user's FM mixer settings.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_RestoreMidiVolume

   Restores the user's FM mixer settings.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_GetEnv

   Retrieves the BLASTER environment settings and returns them to
   the caller.
--------------------------------------------------------------------- Skip the offending data sscanf( Blaster, "%*s" );---------------------------------------------------------------------
   Function: BLASTER_SetCardSettings

   Sets up the sound card's parameters.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_GetCardSettings

   Sets up the sound card's parameters.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_GetCardInfo

   Returns the maximum number of bits that can represent a sample
   (8 or 16) and the number of channels (1 for mono, 2 for stereo).
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_SetCallBack

   Specifies the user function to call at the end of a sound transfer.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_LockEnd

   Used for determining the length of the functions to lock in memory.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_UnlockMemory

   Unlocks all neccessary data.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_LockMemory

   Locks all neccessary data.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: allocateTimerStack

   Allocate a block of memory from conventional (low) memory and return
   the selector (which can go directly into a segment register) of the
   memory block or 0 if an error occured.
--------------------------------------------------------------------- clear all registers DPMI allocate conventional memory size in paragraphs DPMI call returns selector in dx (ax contains real mode segment which is ignored here) Couldn't allocate memory.---------------------------------------------------------------------
   Function: deallocateTimerStack

   Deallocate a block of conventional (low) memory given a selector to
   it.  Assumes the block was allocated with DPMI function 0x100.
--------------------------------------------------------------------- clear all registers---------------------------------------------------------------------
   Function: BLASTER_SetupWaveBlaster

   Allows the WaveBlaster to play music while the Sound Blaster 16
   plays digital sound.
--------------------------------------------------------------------- Disable MPU401 interrupts.  If they are not disabled, the SB16 will not produce sound or music.---------------------------------------------------------------------
   Function: BLASTER_ShutdownWaveBlaster

   Restores WaveBlaster mixer to original state.
--------------------------------------------------------------------- Restore the state of MPU401 interrupts.  If they are not disabled, the SB16 will not produce sound or music.---------------------------------------------------------------------
   Function: BLASTER_Init

   Initializes the sound card and prepares the module to play
   digitized sounds.
--------------------------------------------------------------------- Save the interrupt masks Install our interrupt handler Leave a little room at top of stack just for the hell of it...---------------------------------------------------------------------
   Function: BLASTER_Shutdown

   Ends transfer of sound data to the sound card and restores the
   system resources used by the card.
--------------------------------------------------------------------- Halt the DMA transfer Reset the DSP Restore the original interrupt
Copyright (C) 1994-1995 Apogee Software, Ltd.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*********************************************************************
   module: BLASTER.C

   author: James R. Dose
   date:   February 4, 1994

   Low level routines to support Sound Blaster, Sound Blaster Pro,
   Sound Blaster 16, and compatible sound cards.

   (c) Copyright 1994 James R. Dose.  All Rights Reserved.
********************************************************************* Unsupported SB 1.0 SBPro SB 2.xx SBPro 2 Unsupported SB16 adequate stack size This is defined because we can't create local variables in a function that switches stacks. These declarations are necessary to use the inline assembly pragmas. This function will get the current stack selector and pointer and save them off. This function will set the stack selector and pointer to the specified values.---------------------------------------------------------------------
   Function: BLASTER_ErrorString

   Returns a pointer to the error message associated with an error
   number.  A -1 returns a pointer the current error.
---------------------------------------------------------------------*********************************************************************

   Memory locked functions:

*********************************************************************---------------------------------------------------------------------
   Function: BLASTER_EnableInterrupt

   Enables the triggering of the sound card interrupt.
--------------------------------------------------------------------- Unmask system interrupt---------------------------------------------------------------------
   Function: BLASTER_DisableInterrupt

   Disables the triggering of the sound card interrupt.
--------------------------------------------------------------------- Restore interrupt mask---------------------------------------------------------------------
   Function: BLASTER_ServiceInterrupt

   Handles interrupt generated by sound card at the end of a voice
   transfer.  Calls the user supplied callback function.
--------------------------------------------------------------------- save stack set our stack Acknowledge interrupt Check if this is this an SB16 or newer Check if a 16-bit DMA interrupt occurred Acknowledge 16-bit transfer interrupt restore stack Wasn't our interrupt.  Call the old one. Older card - can't detect if an interrupt occurred. Keep track of current buffer Continue playback on cards without autoinit mode Call the caller's callback function restore stack send EOI to Interrupt Controller---------------------------------------------------------------------
   Function: BLASTER_WriteDSP

   Writes a byte of data to the sound card's DSP.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_ReadDSP

   Reads a byte of data from the sound card's DSP.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_ResetDSP

   Sends a reset command to the sound card's Digital Signal Processor
   (DSP), causing it to perform an initialization.
--------------------------------------------------------------------- What the hell am I doing here?
   count = 100;

   do
      {
      if ( inp( port ) == 255 )
         {
         break;
         }

      count--;
      }
   while( count > 0 );
---------------------------------------------------------------------
   Function: BLASTER_GetDSPVersion

   Returns the version number of the sound card's DSP.
--------------------------------------------------------------------- DSP_Version1xx---------------------------------------------------------------------
   Function: BLASTER_SpeakerOn

   Enables output from the DAC.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_SpeakerOff

   Disables output from the DAC.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_SetPlaybackRate

   Sets the rate at which the digitized sound will be played in
   hertz.
--------------------------------------------------------------------- Send sampling rate as time constant for older Sound Blaster compatible cards. Keep track of what the actual rate is Send literal sampling rate for cards with DSP version 4.xx (Sound Blaster 16) Set playback rate Set recording rate---------------------------------------------------------------------
   Function: BLASTER_GetPlaybackRate

   Returns the rate at which the digitized sound will be played in
   hertz.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_SetMixMode

   Sets the sound card to play samples in mono or stereo.
--------------------------------------------------------------------- For the Sound Blaster Pro, we have to set the mixer chip to play mono or stereo samples. Get current mode set stereo mode bit set the mode---------------------------------------------------------------------
   Function: BLASTER_StopPlayback

   Ends the DMA transfer of digitized sound to the sound card.
--------------------------------------------------------------------- Don't allow anymore interrupts Disable the DMA channel Turn off speaker---------------------------------------------------------------------
   Function: BLASTER_SetupDMABuffer

   Programs the DMAC for sound transfer.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_GetCurrentPos

   Returns the offset within the current sound being played.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_DSP1xx_BeginPlayback

   Starts playback of digitized sound on cards compatible with DSP
   version 1.xx.
--------------------------------------------------------------------- Program DSP to play sound---------------------------------------------------------------------
   Function: BLASTER_DSP2xx_BeginPlayback

   Starts playback of digitized sound on cards compatible with DSP
   version 2.xx.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_DSP4xx_BeginPlayback

   Starts playback of digitized sound on cards compatible with DSP
   version 4.xx, such as the Sound Blaster 16.
--------------------------------------------------------------------- Program DSP to play sound---------------------------------------------------------------------
   Function: BLASTER_BeginBufferedPlayback

   Begins multibuffered playback of digitized sound on the sound card.
---------------------------------------------------------------------JIM   if ( BLASTER_SoundPlaying || BLASTER_SoundRecording ) Turn on speaker  Program the sound card to start the transfer.---------------------------------------------------------------------
   Function: BLASTER_DSP4xx_BeginRecord

   Starts recording of digitized sound on cards compatible with DSP
   version 4.xx, such as the Sound Blaster 16.
--------------------------------------------------------------------- Program DSP to play sound---------------------------------------------------------------------
   Function: BLASTER_DSP2xx_BeginRecord

   Starts recording of digitized sound on cards compatible with DSP
   version 2.xx.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_DSP1xx_BeginRecord

   Starts recording of digitized sound on cards compatible with DSP
   version 1.xx.
--------------------------------------------------------------------- Program DSP to play sound---------------------------------------------------------------------
   Function: BLASTER_BeginBufferedRecord

   Begins multibuffered recording of digitized sound on the sound card.
---------------------------------------------------------------------JIM   if ( BLASTER_SoundPlaying || BLASTER_SoundRecording ) Turn off speaker  Program the sound card to start the transfer.---------------------------------------------------------------------
   Function: BLASTER_WriteMixer

   Writes a byte of data to the Sound Blaster's mixer chip.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_ReadMixer

   Reads a byte of data from the Sound Blaster's mixer chip.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_GetVoiceVolume

   Reads the average volume of the digitized sound channel from the
   Sound Blaster's mixer chip.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_SetVoiceVolume

   Sets the volume of the digitized sound channel on the Sound
   Blaster's mixer chip.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_GetMidiVolume

   Reads the average volume of the Midi sound channel from the
   Sound Blaster's mixer chip.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_SetMidiVolume

   Sets the volume of the Midi sound channel on the Sound
   Blaster's mixer chip.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_CardHasMixer

   Checks if the selected Sound Blaster card has a mixer.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_SaveVoiceVolume

   Saves the user's voice mixer settings.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_RestoreVoiceVolume

   Restores the user's voice mixer settings.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_SaveMidiVolume

   Saves the user's FM mixer settings.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_RestoreMidiVolume

   Restores the user's FM mixer settings.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_GetEnv

   Retrieves the BLASTER environment settings and returns them to
   the caller.
--------------------------------------------------------------------- Skip the offending data sscanf( Blaster, "%*s" );---------------------------------------------------------------------
   Function: BLASTER_SetCardSettings

   Sets up the sound card's parameters.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_GetCardSettings

   Sets up the sound card's parameters.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_GetCardInfo

   Returns the maximum number of bits that can represent a sample
   (8 or 16) and the number of channels (1 for mono, 2 for stereo).
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_SetCallBack

   Specifies the user function to call at the end of a sound transfer.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_LockEnd

   Used for determining the length of the functions to lock in memory.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_UnlockMemory

   Unlocks all neccessary data.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: BLASTER_LockMemory

   Locks all neccessary data.
------------------------------------------------------------------------------------------------------------------------------------------
   Function: allocateTimerStack

   Allocate a block of memory from conventional (low) memory and return
   the selector (which can go directly into a segment register) of the
   memory block or 0 if an error occured.
--------------------------------------------------------------------- clear all registers DPMI allocate conventional memory size in paragraphs DPMI call returns selector in dx (ax contains real mode segment which is ignored here) Couldn't allocate memory.---------------------------------------------------------------------
   Function: deallocateTimerStack

   Deallocate a block of conventional (low) memory given a selector to
   it.  Assumes the block was allocated with DPMI function 0x100.
--------------------------------------------------------------------- clear all registers---------------------------------------------------------------------
   Function: BLASTER_SetupWaveBlaster

   Allows the WaveBlaster to play music while the Sound Blaster 16
   plays digital sound.
--------------------------------------------------------------------- Disable MPU401 interrupts.  If they are not disabled, the SB16 will not produce sound or music.---------------------------------------------------------------------
   Function: BLASTER_ShutdownWaveBlaster

   Restores WaveBlaster mixer to original state.
--------------------------------------------------------------------- Restore the state of MPU401 interrupts.  If they are not disabled, the SB16 will not produce sound or music.---------------------------------------------------------------------
   Function: BLASTER_Init

   Initializes the sound card and prepares the module to play
   digitized sounds.
--------------------------------------------------------------------- Save the interrupt masks Install our interrupt handler Leave a little room at top of stack just for the hell of it...---------------------------------------------------------------------
   Function: BLASTER_Shutdown

   Ends transfer of sound data to the sound card and restores the
   system resources used by the card.
--------------------------------------------------------------------- Halt the DMA transfer Reset the DSP Restore the original interrupt