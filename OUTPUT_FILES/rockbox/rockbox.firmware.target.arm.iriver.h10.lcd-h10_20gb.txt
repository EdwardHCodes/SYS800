**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Barry Wardell
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** Initialized in lcd_init_device() * Is the power turned on?  Is the display turned on?  Amount of vertical offset. Used for flip offset correction/detection.  Reverse flag. Must be remembered when display is turned off.  Contrast setting << 8  Forward declarations  register defines for the Renesas HD66773R  Send command  Send 16-bit data  Send MSB first  Send 16-bit data byte-swapped. Only needed until we can use block transfer.  Send LSB first  Write value to register ** hardware configuration ** Clamp val in range 0-14, 16-30  VCOMG=1, VDV4-0=xxxxx, VCM4-0=11000  PT1-0=00, VLE2-1=00, SPT=0, GON=1, DTE=1, REV=x, D1-0=11  turn the display upside down (call lcd_update() afterwards)  The LCD controller is 132x160 while the LCD itself is 128x160, so we need
     * to shift the origin by 4 when we flip the LCD  SCN4-0=000x0 (G1/G160)  SM=0, GS=x, SS=x, NL4-0=10011 (G1-G160)  LCD init  The OF won't boot if this is done in the bootloader - ideally we should 
       tweak the lcd controller speed settings but this will do for now  Set LCD interface clock to PLL  Be sure standby bit is clear.  BT2-0=000, DC2-0=000, AP2-0=000, SLP=0, STB=0 * Power ON Sequence * Per datasheet Rev.1.10, Jun.21.2003, p. 99  Start Oscillation  10ms or more for oscillation circuit to stabilize  Instruction (1) for power setting; VC2-0, VRH3-0, CAD,
       VRL3-0, VCM4-0, VDV4-0  VC2-0=001  VRL3-0=0100, PON=0, VRH3-0=0001  CAD=1  VCOMG=0, VDV4-0=xxxxx (19), VCM4-0=11000  Instruction (2) for power setting; BT2-0, DC2-0, AP2-0  BT2-0=000, DC2-0=001, AP2-0=011, SLP=0, STB=0  Instruction (3) for power setting; VCOMG = "1"  VCOMG=1, VDV4-0=xxxxx (19), VCM4-0=11000  40ms or more; time for step-up circuits 1,2 to stabilize  Instruction (4) for power setting; PON = "1"  VRL3-0=0100, PON=1, VRH3-0=0001  40ms or more; time for step-up circuit 4 to stabilize  Instructions for other mode settings (in register order).  SM=0, GS=x, SS=x, NL4-0=10011 (G1-G160) different to X5  FLD1-0=01 (1 field), B/C=1, EOR=1 (C-pat), NW5-0=000000 (1 row)  DIT=0, BGR=1, HWM=0, I/D1-0=10, AM=1, LG2-0=000  different to X5  CP15-0=0000000000000000  NO1-0=01, SDT1-0=00, EQ1-0=00, DIV1-0=00, RTN3-00000  SCN4-0=000x0 (G1/G160)  VL7-0=0x00  SE17-10(End)=0x9f (159), SS17-10(Start)=0x00  SE27-20(End)=0x5c (92), SS27-20(Start)=0x00  HEA7-0=7f, HSA7-0=00  PKP12-10=0x0, PKP02-00=0x0  PKP32-30=0x4, PKP22-20=0x0  PKP52-50=0x4, PKP42-40=0x7  PRP12-10=0x3, PRP02-00=0x5  PKN12-10=0x0, PKN02-00=0x3  PKN32-30=0x7, PKN22-20=0x4  PKN52-50=0x4, PRN42-40=0x7  PRN12-10=0x5, PRN02-00=0x3  VRP14-10=0x14, VRP03-00=0x09  VRN14-00=0x06, VRN03-00=0x02  100ms or more; time for step-up circuits to stabilize  Display must be off first * Power OFF sequence * Per datasheet Rev.1.10, Jun.21.2003, p. 99  Step-up1 halt setting bit  BT2-0=110, DC2-0=001, AP2-0=011, SLP=0, STB=0  Step-up3,4 halt setting bit  VRL3-0=0100, PON=0, VRH3-0=0001  VCOMG=0, VDV4-0=10011, VCM4-0=11000  Wait 100ms or more  Step-up2,amp halt setting bit  BT2-0=000, DC2-0=000, AP2-0=000, SLP=0, STB=0  Set standby mode  BT2-0=000, DC2-0=000, AP2-0=000, SLP=0, STB=1 * Display OFF sequence * Per datasheet Rev.1.10, Jun.21.2003, p. 97  EQ1-0=00 already  PT1-0=00, VLE2-1=00, SPT=0, GON=1, DTE=1, REV=x, D1-0=10  Wait 2 frames or more  PT1-0=00, VLE2-1=00, SPT=0, GON=1, DTE=0, REV=x, D1-0=10  Wait 2 frames or more  PT1-0=00, VLE2-1=00, SPT=0, GON=0, DTE=0, REV=0, D1-0=00  Be sure power is on first * Display ON Sequence * Per datasheet Rev.1.10, Jun.21.2003, p. 97  PT1-0=00, VLE2-1=00, SPT=0, GON=0, DTE=0, REV=0, D1-0=01  Wait 2 frames or more  PT1-0=00, VLE2-1=00, SPT=0, GON=1, DTE=0, REV=x, D1-0=01  PT1-0=00, VLE2-1=00, SPT=0, GON=1, DTE=0, REV=x, D1-0=11  Wait 2 frames or more  PT1-0=00, VLE2-1=00, SPT=0, GON=1, DTE=1, REV=x, D1-0=11  Probably out of sync and we don't wanna pepper the code with
           lcd_update() calls for this. ** update functions ** Line write helper function for lcd_yuv_blit. Write two lines of yuv420.  To align dither pattern  Performance function to blit a YUV bitmap directly to the LCD  calculate the drawing region  The 20GB LCD is actually 128x160 but rotated 90 degrees so the origin
     * is actually the bottom left and horizontal and vertical are swapped. 
     * Rockbox expects the origin to be the top left so we need to use 
     * 127 - y instead of just y  max vert << 8 | start vert  DIT=0, BGR=1, HWM=0, I/D1-0=10, AM=0, LG2-0=000  max horiz << 8 | start horiz  position cursor (set AD0-AD15)  start vert << 8 | start horiz  start drawing  DIT=0, BGR=1, HWM=0, I/D1-0=10, AM=1, LG2-0=000  Update a fraction of the display.  calculate the drawing region  max vert  max horiz  nothing left to do, 0 is harmful to lcd_write_data()  The 20GB LCD is actually 128x160 but rotated 90 degrees so the origin
     * is actually the bottom left and horizontal and vertical are swapped. 
     * Rockbox expects the origin to be the top left so we need to use 
     * 127 - y instead of just y  max horiz << 8 | start horiz  max vert << 8 | start vert  position cursor (set AD0-AD15)  start vert << 8 | start horiz  start drawing  for each row  for each column  output 1 pixel  Update the display.
   This must be called after all other LCD functions that change the display. **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Barry Wardell
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** Initialized in lcd_init_device() * Is the power turned on?  Is the display turned on?  Amount of vertical offset. Used for flip offset correction/detection.  Reverse flag. Must be remembered when display is turned off.  Contrast setting << 8  Forward declarations  register defines for the Renesas HD66773R  Send command  Send 16-bit data  Send MSB first  Send 16-bit data byte-swapped. Only needed until we can use block transfer.  Send LSB first  Write value to register ** hardware configuration ** Clamp val in range 0-14, 16-30  VCOMG=1, VDV4-0=xxxxx, VCM4-0=11000  PT1-0=00, VLE2-1=00, SPT=0, GON=1, DTE=1, REV=x, D1-0=11  turn the display upside down (call lcd_update() afterwards)  The LCD controller is 132x160 while the LCD itself is 128x160, so we need
     * to shift the origin by 4 when we flip the LCD  SCN4-0=000x0 (G1/G160)  SM=0, GS=x, SS=x, NL4-0=10011 (G1-G160)  LCD init  The OF won't boot if this is done in the bootloader - ideally we should 
       tweak the lcd controller speed settings but this will do for now  Set LCD interface clock to PLL  Be sure standby bit is clear.  BT2-0=000, DC2-0=000, AP2-0=000, SLP=0, STB=0 * Power ON Sequence * Per datasheet Rev.1.10, Jun.21.2003, p. 99  Start Oscillation  10ms or more for oscillation circuit to stabilize  Instruction (1) for power setting; VC2-0, VRH3-0, CAD,
       VRL3-0, VCM4-0, VDV4-0  VC2-0=001  VRL3-0=0100, PON=0, VRH3-0=0001  CAD=1  VCOMG=0, VDV4-0=xxxxx (19), VCM4-0=11000  Instruction (2) for power setting; BT2-0, DC2-0, AP2-0  BT2-0=000, DC2-0=001, AP2-0=011, SLP=0, STB=0  Instruction (3) for power setting; VCOMG = "1"  VCOMG=1, VDV4-0=xxxxx (19), VCM4-0=11000  40ms or more; time for step-up circuits 1,2 to stabilize  Instruction (4) for power setting; PON = "1"  VRL3-0=0100, PON=1, VRH3-0=0001  40ms or more; time for step-up circuit 4 to stabilize  Instructions for other mode settings (in register order).  SM=0, GS=x, SS=x, NL4-0=10011 (G1-G160) different to X5  FLD1-0=01 (1 field), B/C=1, EOR=1 (C-pat), NW5-0=000000 (1 row)  DIT=0, BGR=1, HWM=0, I/D1-0=10, AM=1, LG2-0=000  different to X5  CP15-0=0000000000000000  NO1-0=01, SDT1-0=00, EQ1-0=00, DIV1-0=00, RTN3-00000  SCN4-0=000x0 (G1/G160)  VL7-0=0x00  SE17-10(End)=0x9f (159), SS17-10(Start)=0x00  SE27-20(End)=0x5c (92), SS27-20(Start)=0x00  HEA7-0=7f, HSA7-0=00  PKP12-10=0x0, PKP02-00=0x0  PKP32-30=0x4, PKP22-20=0x0  PKP52-50=0x4, PKP42-40=0x7  PRP12-10=0x3, PRP02-00=0x5  PKN12-10=0x0, PKN02-00=0x3  PKN32-30=0x7, PKN22-20=0x4  PKN52-50=0x4, PRN42-40=0x7  PRN12-10=0x5, PRN02-00=0x3  VRP14-10=0x14, VRP03-00=0x09  VRN14-00=0x06, VRN03-00=0x02  100ms or more; time for step-up circuits to stabilize  Display must be off first * Power OFF sequence * Per datasheet Rev.1.10, Jun.21.2003, p. 99  Step-up1 halt setting bit  BT2-0=110, DC2-0=001, AP2-0=011, SLP=0, STB=0  Step-up3,4 halt setting bit  VRL3-0=0100, PON=0, VRH3-0=0001  VCOMG=0, VDV4-0=10011, VCM4-0=11000  Wait 100ms or more  Step-up2,amp halt setting bit  BT2-0=000, DC2-0=000, AP2-0=000, SLP=0, STB=0  Set standby mode  BT2-0=000, DC2-0=000, AP2-0=000, SLP=0, STB=1 * Display OFF sequence * Per datasheet Rev.1.10, Jun.21.2003, p. 97  EQ1-0=00 already  PT1-0=00, VLE2-1=00, SPT=0, GON=1, DTE=1, REV=x, D1-0=10  Wait 2 frames or more  PT1-0=00, VLE2-1=00, SPT=0, GON=1, DTE=0, REV=x, D1-0=10  Wait 2 frames or more  PT1-0=00, VLE2-1=00, SPT=0, GON=0, DTE=0, REV=0, D1-0=00  Be sure power is on first * Display ON Sequence * Per datasheet Rev.1.10, Jun.21.2003, p. 97  PT1-0=00, VLE2-1=00, SPT=0, GON=0, DTE=0, REV=0, D1-0=01  Wait 2 frames or more  PT1-0=00, VLE2-1=00, SPT=0, GON=1, DTE=0, REV=x, D1-0=01  PT1-0=00, VLE2-1=00, SPT=0, GON=1, DTE=0, REV=x, D1-0=11  Wait 2 frames or more  PT1-0=00, VLE2-1=00, SPT=0, GON=1, DTE=1, REV=x, D1-0=11  Probably out of sync and we don't wanna pepper the code with
           lcd_update() calls for this. ** update functions ** Line write helper function for lcd_yuv_blit. Write two lines of yuv420.  To align dither pattern  Performance function to blit a YUV bitmap directly to the LCD  calculate the drawing region  The 20GB LCD is actually 128x160 but rotated 90 degrees so the origin
     * is actually the bottom left and horizontal and vertical are swapped. 
     * Rockbox expects the origin to be the top left so we need to use 
     * 127 - y instead of just y  max vert << 8 | start vert  DIT=0, BGR=1, HWM=0, I/D1-0=10, AM=0, LG2-0=000  max horiz << 8 | start horiz  position cursor (set AD0-AD15)  start vert << 8 | start horiz  start drawing  DIT=0, BGR=1, HWM=0, I/D1-0=10, AM=1, LG2-0=000  Update a fraction of the display.  calculate the drawing region  max vert  max horiz  nothing left to do, 0 is harmful to lcd_write_data()  The 20GB LCD is actually 128x160 but rotated 90 degrees so the origin
     * is actually the bottom left and horizontal and vertical are swapped. 
     * Rockbox expects the origin to be the top left so we need to use 
     * 127 - y instead of just y  max horiz << 8 | start horiz  max vert << 8 | start vert  position cursor (set AD0-AD15)  start vert << 8 | start horiz  start drawing  for each row  for each column  output 1 pixel  Update the display.
   This must be called after all other LCD functions that change the display. **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Barry Wardell
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** Initialized in lcd_init_device() * Is the power turned on?  Is the display turned on?  Amount of vertical offset. Used for flip offset correction/detection.  Reverse flag. Must be remembered when display is turned off.  Contrast setting << 8  Forward declarations  register defines for the Renesas HD66773R  Send command  Send 16-bit data  Send MSB first  Send 16-bit data byte-swapped. Only needed until we can use block transfer.  Send LSB first  Write value to register ** hardware configuration ** Clamp val in range 0-14, 16-30  VCOMG=1, VDV4-0=xxxxx, VCM4-0=11000  PT1-0=00, VLE2-1=00, SPT=0, GON=1, DTE=1, REV=x, D1-0=11  turn the display upside down (call lcd_update() afterwards)  The LCD controller is 132x160 while the LCD itself is 128x160, so we need
     * to shift the origin by 4 when we flip the LCD  SCN4-0=000x0 (G1/G160)  SM=0, GS=x, SS=x, NL4-0=10011 (G1-G160)  LCD init  The OF won't boot if this is done in the bootloader - ideally we should 
       tweak the lcd controller speed settings but this will do for now  Set LCD interface clock to PLL  Be sure standby bit is clear.  BT2-0=000, DC2-0=000, AP2-0=000, SLP=0, STB=0 * Power ON Sequence * Per datasheet Rev.1.10, Jun.21.2003, p. 99  Start Oscillation  10ms or more for oscillation circuit to stabilize  Instruction (1) for power setting; VC2-0, VRH3-0, CAD,
       VRL3-0, VCM4-0, VDV4-0  VC2-0=001  VRL3-0=0100, PON=0, VRH3-0=0001  CAD=1  VCOMG=0, VDV4-0=xxxxx (19), VCM4-0=11000  Instruction (2) for power setting; BT2-0, DC2-0, AP2-0  BT2-0=000, DC2-0=001, AP2-0=011, SLP=0, STB=0  Instruction (3) for power setting; VCOMG = "1"  VCOMG=1, VDV4-0=xxxxx (19), VCM4-0=11000  40ms or more; time for step-up circuits 1,2 to stabilize  Instruction (4) for power setting; PON = "1"  VRL3-0=0100, PON=1, VRH3-0=0001  40ms or more; time for step-up circuit 4 to stabilize  Instructions for other mode settings (in register order).  SM=0, GS=x, SS=x, NL4-0=10011 (G1-G160) different to X5  FLD1-0=01 (1 field), B/C=1, EOR=1 (C-pat), NW5-0=000000 (1 row)  DIT=0, BGR=1, HWM=0, I/D1-0=10, AM=1, LG2-0=000  different to X5  CP15-0=0000000000000000  NO1-0=01, SDT1-0=00, EQ1-0=00, DIV1-0=00, RTN3-00000  SCN4-0=000x0 (G1/G160)  VL7-0=0x00  SE17-10(End)=0x9f (159), SS17-10(Start)=0x00  SE27-20(End)=0x5c (92), SS27-20(Start)=0x00  HEA7-0=7f, HSA7-0=00  PKP12-10=0x0, PKP02-00=0x0  PKP32-30=0x4, PKP22-20=0x0  PKP52-50=0x4, PKP42-40=0x7  PRP12-10=0x3, PRP02-00=0x5  PKN12-10=0x0, PKN02-00=0x3  PKN32-30=0x7, PKN22-20=0x4  PKN52-50=0x4, PRN42-40=0x7  PRN12-10=0x5, PRN02-00=0x3  VRP14-10=0x14, VRP03-00=0x09  VRN14-00=0x06, VRN03-00=0x02  100ms or more; time for step-up circuits to stabilize  Display must be off first * Power OFF sequence * Per datasheet Rev.1.10, Jun.21.2003, p. 99  Step-up1 halt setting bit  BT2-0=110, DC2-0=001, AP2-0=011, SLP=0, STB=0  Step-up3,4 halt setting bit  VRL3-0=0100, PON=0, VRH3-0=0001  VCOMG=0, VDV4-0=10011, VCM4-0=11000  Wait 100ms or more  Step-up2,amp halt setting bit  BT2-0=000, DC2-0=000, AP2-0=000, SLP=0, STB=0  Set standby mode  BT2-0=000, DC2-0=000, AP2-0=000, SLP=0, STB=1 * Display OFF sequence * Per datasheet Rev.1.10, Jun.21.2003, p. 97  EQ1-0=00 already  PT1-0=00, VLE2-1=00, SPT=0, GON=1, DTE=1, REV=x, D1-0=10  Wait 2 frames or more  PT1-0=00, VLE2-1=00, SPT=0, GON=1, DTE=0, REV=x, D1-0=10  Wait 2 frames or more  PT1-0=00, VLE2-1=00, SPT=0, GON=0, DTE=0, REV=0, D1-0=00  Be sure power is on first * Display ON Sequence * Per datasheet Rev.1.10, Jun.21.2003, p. 97  PT1-0=00, VLE2-1=00, SPT=0, GON=0, DTE=0, REV=0, D1-0=01  Wait 2 frames or more  PT1-0=00, VLE2-1=00, SPT=0, GON=1, DTE=0, REV=x, D1-0=01  PT1-0=00, VLE2-1=00, SPT=0, GON=1, DTE=0, REV=x, D1-0=11  Wait 2 frames or more  PT1-0=00, VLE2-1=00, SPT=0, GON=1, DTE=1, REV=x, D1-0=11  Probably out of sync and we don't wanna pepper the code with
           lcd_update() calls for this. ** update functions ** Line write helper function for lcd_yuv_blit. Write two lines of yuv420.  To align dither pattern  Performance function to blit a YUV bitmap directly to the LCD  calculate the drawing region  The 20GB LCD is actually 128x160 but rotated 90 degrees so the origin
     * is actually the bottom left and horizontal and vertical are swapped. 
     * Rockbox expects the origin to be the top left so we need to use 
     * 127 - y instead of just y  max vert << 8 | start vert  DIT=0, BGR=1, HWM=0, I/D1-0=10, AM=0, LG2-0=000  max horiz << 8 | start horiz  position cursor (set AD0-AD15)  start vert << 8 | start horiz  start drawing  DIT=0, BGR=1, HWM=0, I/D1-0=10, AM=1, LG2-0=000  Update a fraction of the display.  calculate the drawing region  max vert  max horiz  nothing left to do, 0 is harmful to lcd_write_data()  The 20GB LCD is actually 128x160 but rotated 90 degrees so the origin
     * is actually the bottom left and horizontal and vertical are swapped. 
     * Rockbox expects the origin to be the top left so we need to use 
     * 127 - y instead of just y  max horiz << 8 | start horiz  max vert << 8 | start vert  position cursor (set AD0-AD15)  start vert << 8 | start horiz  start drawing  for each row  for each column  output 1 pixel  Update the display.
   This must be called after all other LCD functions that change the display. 