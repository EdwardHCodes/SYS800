
 * fifteen.c: standard 15-puzzle.
  move count at time of completion  used to suppress completion flash  structure copy 
     * Place everything else except the last two tiles.
     
     * Find the last two locations, and the last two pieces.
     
     * Determine the required parity of the overall permutation.
     * This is the XOR of:
     * 
     * 	- The chessboard parity ((x^y)&1) of the gap square. The
     * 	  bottom right counts as even.
     * 
     *  - The parity of n. (The target permutation is 1,...,n-1,0
     *    rather than 0,...,n-1; this is a cyclic permutation of
     *    the starting point and hence is odd iff n is even.)
     
     * Try the last two tiles one way round. If that fails, swap
     * them.
     
     * Now construct the game description, by describing the tile
     * array as a simple sequence of comma-separated integers.
      delete last comma  eat comma  eat comma 
     * First work out how many characters we need to display each
     * number.
     
     * Now we know the exact total size of the grid we're going to
     * produce: it's got h rows, each containing w lots of col, w-1
     * spaces and a trailing newline.
      When w = 3 and h = 2 and the tile going in the top left corner
     * is at (ax, ay) and the tile going in the bottom left corner is
     * at (bx, by) and the blank tile is at (gx, gy), how do you move?  Hard-coded shortest solutions.  Sorry.  not already in place  not placing the gap  because we're greedy (and flipping)  because we're greedy (and flipping)  TODO: define a termination function.  Idea: 0 if solved, or
     * the number of moves to solve the next piece plus the number of
     * further unsolved pieces times an upper bound on the number of
     * moves required to solve any piece.  If such a function can be
     * found, we have (termination && (termination => correctness)).
     * The catch is our temporary disturbance of 2x3 corners.  handles end-of-row, when 3 and 4 are in the top right 2x3 box  note that *dy = -1 is unsafe when gy = ty + 1 and gx < tx  then we know ny > ty  ... so this is safe  gy > ny  The overall solving process is this:
     * 1. Find the next piece to be put in its place
     * 2. Move it diagonally towards its place
     * 3. Move it horizontally or vertically towards its place
     * (Modulo the last two tiles at the end of each row/column)
      {target,next,next2}_{x,y}  1. Find the next piece
     * if (there are no more unfinished columns than rows) {
     *     fill the top-most row, left to right
     * } else { fill the left-most column, top to bottom }
      2, 3. Move the next piece towards its place  gx, gy already set  where we're going  where we're at  out of bounds  the default  undoes the first flip  shouldn't happen, since ^^we^^checked^^  no move 
     * Any click location should be equal to the gap location
     * in _precisely_ one coordinate.
     
	 * Simply replace the grid with a solved one. For this game,
	 * this isn't a useful operation for actually telling the user
	 * what they should have done, but it is useful for
	 * conveniently being able to get hold of a clean state from
	 * which to practise manoeuvres.
	 
     * Find the unit displacement from the original gap
     * position towards this one.
     
     * See if the game has been completed.
      ----------------------------------------------------------------------
 * Drawing routines.
  Ick: fake up `ds->tilesize' for macro expansion purposes  haven't decided yet 
         * Recessed area containing the whole puzzle.
         
     * Now draw each tile. We do this in two passes to make
     * animation easy.
     
             * Figure out what should be displayed at this
             * location. It's either a simple tile, or it's a
             * transition between two tiles (in which case we say
             * -1 because it must always be drawn).
              always redraw when flashing 
                 * Figure out what to _actually_ draw, and where to
                 * draw it.
                 
                     * On the first pass, just blank the tile.
                     
                         * Don't bother moving the gap; just don't
                         * draw it.
                         
                         * Find the coordinates of this tile in the old and
                         * new states.
                         
     * Update the status bar.
     
         * Don't show the new status until we're also showing the
         * new _state_ - after the game animation is complete.
          game_request_keys  wants_statusbar  flags  solver_show_working = true; 
 * fifteen.c: standard 15-puzzle.
  move count at time of completion  used to suppress completion flash  structure copy 
     * Place everything else except the last two tiles.
     
     * Find the last two locations, and the last two pieces.
     
     * Determine the required parity of the overall permutation.
     * This is the XOR of:
     * 
     * 	- The chessboard parity ((x^y)&1) of the gap square. The
     * 	  bottom right counts as even.
     * 
     *  - The parity of n. (The target permutation is 1,...,n-1,0
     *    rather than 0,...,n-1; this is a cyclic permutation of
     *    the starting point and hence is odd iff n is even.)
     
     * Try the last two tiles one way round. If that fails, swap
     * them.
     
     * Now construct the game description, by describing the tile
     * array as a simple sequence of comma-separated integers.
      delete last comma  eat comma  eat comma 
     * First work out how many characters we need to display each
     * number.
     
     * Now we know the exact total size of the grid we're going to
     * produce: it's got h rows, each containing w lots of col, w-1
     * spaces and a trailing newline.
      When w = 3 and h = 2 and the tile going in the top left corner
     * is at (ax, ay) and the tile going in the bottom left corner is
     * at (bx, by) and the blank tile is at (gx, gy), how do you move?  Hard-coded shortest solutions.  Sorry.  not already in place  not placing the gap  because we're greedy (and flipping)  because we're greedy (and flipping)  TODO: define a termination function.  Idea: 0 if solved, or
     * the number of moves to solve the next piece plus the number of
     * further unsolved pieces times an upper bound on the number of
     * moves required to solve any piece.  If such a function can be
     * found, we have (termination && (termination => correctness)).
     * The catch is our temporary disturbance of 2x3 corners.  handles end-of-row, when 3 and 4 are in the top right 2x3 box  note that *dy = -1 is unsafe when gy = ty + 1 and gx < tx  then we know ny > ty  ... so this is safe  gy > ny  The overall solving process is this:
     * 1. Find the next piece to be put in its place
     * 2. Move it diagonally towards its place
     * 3. Move it horizontally or vertically towards its place
     * (Modulo the last two tiles at the end of each row/column)
      {target,next,next2}_{x,y}  1. Find the next piece
     * if (there are no more unfinished columns than rows) {
     *     fill the top-most row, left to right
     * } else { fill the left-most column, top to bottom }
      2, 3. Move the next piece towards its place  gx, gy already set  where we're going  where we're at  out of bounds  the default  undoes the first flip  shouldn't happen, since ^^we^^checked^^  no move 
     * Any click location should be equal to the gap location
     * in _precisely_ one coordinate.
     
	 * Simply replace the grid with a solved one. For this game,
	 * this isn't a useful operation for actually telling the user
	 * what they should have done, but it is useful for
	 * conveniently being able to get hold of a clean state from
	 * which to practise manoeuvres.
	 
     * Find the unit displacement from the original gap
     * position towards this one.
     
     * See if the game has been completed.
      ----------------------------------------------------------------------
 * Drawing routines.
  Ick: fake up `ds->tilesize' for macro expansion purposes  haven't decided yet 
         * Recessed area containing the whole puzzle.
         
     * Now draw each tile. We do this in two passes to make
     * animation easy.
     
             * Figure out what should be displayed at this
             * location. It's either a simple tile, or it's a
             * transition between two tiles (in which case we say
             * -1 because it must always be drawn).
              always redraw when flashing 
                 * Figure out what to _actually_ draw, and where to
                 * draw it.
                 
                     * On the first pass, just blank the tile.
                     
                         * Don't bother moving the gap; just don't
                         * draw it.
                         
                         * Find the coordinates of this tile in the old and
                         * new states.
                         
     * Update the status bar.
     
         * Don't show the new status until we're also showing the
         * new _state_ - after the game animation is complete.
          game_request_keys  wants_statusbar  flags  solver_show_working = true; 
 * fifteen.c: standard 15-puzzle.
  move count at time of completion  used to suppress completion flash  structure copy 
     * Place everything else except the last two tiles.
     
     * Find the last two locations, and the last two pieces.
     
     * Determine the required parity of the overall permutation.
     * This is the XOR of:
     * 
     * 	- The chessboard parity ((x^y)&1) of the gap square. The
     * 	  bottom right counts as even.
     * 
     *  - The parity of n. (The target permutation is 1,...,n-1,0
     *    rather than 0,...,n-1; this is a cyclic permutation of
     *    the starting point and hence is odd iff n is even.)
     
     * Try the last two tiles one way round. If that fails, swap
     * them.
     
     * Now construct the game description, by describing the tile
     * array as a simple sequence of comma-separated integers.
      delete last comma  eat comma  eat comma 
     * First work out how many characters we need to display each
     * number.
     
     * Now we know the exact total size of the grid we're going to
     * produce: it's got h rows, each containing w lots of col, w-1
     * spaces and a trailing newline.
      When w = 3 and h = 2 and the tile going in the top left corner
     * is at (ax, ay) and the tile going in the bottom left corner is
     * at (bx, by) and the blank tile is at (gx, gy), how do you move?  Hard-coded shortest solutions.  Sorry.  not already in place  not placing the gap  because we're greedy (and flipping)  because we're greedy (and flipping)  TODO: define a termination function.  Idea: 0 if solved, or
     * the number of moves to solve the next piece plus the number of
     * further unsolved pieces times an upper bound on the number of
     * moves required to solve any piece.  If such a function can be
     * found, we have (termination && (termination => correctness)).
     * The catch is our temporary disturbance of 2x3 corners.  handles end-of-row, when 3 and 4 are in the top right 2x3 box  note that *dy = -1 is unsafe when gy = ty + 1 and gx < tx  then we know ny > ty  ... so this is safe  gy > ny  The overall solving process is this:
     * 1. Find the next piece to be put in its place
     * 2. Move it diagonally towards its place
     * 3. Move it horizontally or vertically towards its place
     * (Modulo the last two tiles at the end of each row/column)
      {target,next,next2}_{x,y}  1. Find the next piece
     * if (there are no more unfinished columns than rows) {
     *     fill the top-most row, left to right
     * } else { fill the left-most column, top to bottom }
      2, 3. Move the next piece towards its place  gx, gy already set  where we're going  where we're at  out of bounds  the default  undoes the first flip  shouldn't happen, since ^^we^^checked^^  no move 
     * Any click location should be equal to the gap location
     * in _precisely_ one coordinate.
     
	 * Simply replace the grid with a solved one. For this game,
	 * this isn't a useful operation for actually telling the user
	 * what they should have done, but it is useful for
	 * conveniently being able to get hold of a clean state from
	 * which to practise manoeuvres.
	 
     * Find the unit displacement from the original gap
     * position towards this one.
     
     * See if the game has been completed.
      ----------------------------------------------------------------------
 * Drawing routines.
  Ick: fake up `ds->tilesize' for macro expansion purposes  haven't decided yet 
         * Recessed area containing the whole puzzle.
         
     * Now draw each tile. We do this in two passes to make
     * animation easy.
     
             * Figure out what should be displayed at this
             * location. It's either a simple tile, or it's a
             * transition between two tiles (in which case we say
             * -1 because it must always be drawn).
              always redraw when flashing 
                 * Figure out what to _actually_ draw, and where to
                 * draw it.
                 
                     * On the first pass, just blank the tile.
                     
                         * Don't bother moving the gap; just don't
                         * draw it.
                         
                         * Find the coordinates of this tile in the old and
                         * new states.
                         
     * Update the status bar.
     
         * Don't show the new status until we're also showing the
         * new _state_ - after the game animation is complete.
          game_request_keys  wants_statusbar  flags  solver_show_working = true; 