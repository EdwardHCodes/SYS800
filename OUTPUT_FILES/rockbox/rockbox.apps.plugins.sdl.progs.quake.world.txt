
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 world.c -- world query functions

entities never clip against themselves, or their owner

line of sight checks trace->crosscontent, but bullets don't

 enclose the test object along entire move size of the moving object size when clipping against mosnters
===============================================================================

HULL BOXES

===============================================================================

===================
SV_InitBoxHull

Set up the planes and clipnodes so that the six floats of a bounding box
can just be stored out and get a proper hull_t structure.
===================

===================
SV_HullForBox

To keep everything totally uniform, bounding boxes are turned into small
BSP trees instead of being compared directly.
===================

================
SV_HullForEntity

Returns a hull that can be used for testing or clipping an object of mins/maxs
size.
Offset is filled in to contain the adjustment that must be added to the
testing object's origin to get a point to use with the returned hull.
================
 decide which clipping hull to use, based on the size explicit hulls in the BSP model calculate an offset value to center the origin create a temp hull from bounding box sizes
===============================================================================

ENTITY AREA CHECKING

===============================================================================
 -1 = leaf node
===============
SV_CreateAreaNode

===============

===============
SV_ClearWorld

===============

===============
SV_UnlinkEdict

===============
 not linked in anywhere
====================
SV_TouchLinks
====================
 touch linked edicts recurse down both sides
===============
SV_FindTouchedLeafs

===============
 add an efrag if the node is a leaf NODE_MIXED recurse down the contacted sides
===============
SV_LinkEdict

===============
 unlink from old position don't add the world set the abs box expand for rotation to make items easier to pick up and allow them to be grabbed off of shelves, the abs sizes are expanded because movement is clipped an epsilon away from an actual edge, we must fully check even when bounding boxes don't quite touch link to PVS leafs find the first node that the ent's box crosses crosses the node link it in	 if touch_triggers, touch all entities at this node and decend for more
===============================================================================

POINT TESTING IN HULLS

===============================================================================

==================
SV_HullPointContents

==================
 !id386
==================
SV_PointContents

==================
===========================================================================
============
SV_TestEntityPosition

This could be a lot more efficient...
============

===============================================================================

LINE TESTING IN HULLS

===============================================================================
 1/32 epsilon to keep floating point happy
==================
SV_RecursiveHullCheck

==================
 check for empty empty find the point distances put the crosspoint DIST_EPSILON pixels on the near side move up to the node go past the node never got out of the solid area================== the other side of the node is solid, this is the impact point================== shouldn't really happen, but does occasionally
==================
SV_ClipMoveToEntity

Handles selection or creation of a clipping hull, and offseting (and
eventually rotation) of the end points
==================
 fill in a default trace get the clipping hull rotate start and end into the models frame of reference trace a line through the apropriate clipping hull rotate endpos back to world frame of reference fix trace up by the offset did we clip the move?===========================================================================
====================
SV_ClipToLinks

Mins and maxs enclose the entire area swept by the move
====================
 touch linked edicts points never interact might intersect, so do an exact clip don't clip against own missiles don't clip against owner recurse down both sides
==================
SV_MoveBounds
==================
 debug to test against everything
==================
SV_Move
==================
 clip to world create the bounding box of the entire move clip to entities
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 world.c -- world query functions

entities never clip against themselves, or their owner

line of sight checks trace->crosscontent, but bullets don't

 enclose the test object along entire move size of the moving object size when clipping against mosnters
===============================================================================

HULL BOXES

===============================================================================

===================
SV_InitBoxHull

Set up the planes and clipnodes so that the six floats of a bounding box
can just be stored out and get a proper hull_t structure.
===================

===================
SV_HullForBox

To keep everything totally uniform, bounding boxes are turned into small
BSP trees instead of being compared directly.
===================

================
SV_HullForEntity

Returns a hull that can be used for testing or clipping an object of mins/maxs
size.
Offset is filled in to contain the adjustment that must be added to the
testing object's origin to get a point to use with the returned hull.
================
 decide which clipping hull to use, based on the size explicit hulls in the BSP model calculate an offset value to center the origin create a temp hull from bounding box sizes
===============================================================================

ENTITY AREA CHECKING

===============================================================================
 -1 = leaf node
===============
SV_CreateAreaNode

===============

===============
SV_ClearWorld

===============

===============
SV_UnlinkEdict

===============
 not linked in anywhere
====================
SV_TouchLinks
====================
 touch linked edicts recurse down both sides
===============
SV_FindTouchedLeafs

===============
 add an efrag if the node is a leaf NODE_MIXED recurse down the contacted sides
===============
SV_LinkEdict

===============
 unlink from old position don't add the world set the abs box expand for rotation to make items easier to pick up and allow them to be grabbed off of shelves, the abs sizes are expanded because movement is clipped an epsilon away from an actual edge, we must fully check even when bounding boxes don't quite touch link to PVS leafs find the first node that the ent's box crosses crosses the node link it in	 if touch_triggers, touch all entities at this node and decend for more
===============================================================================

POINT TESTING IN HULLS

===============================================================================

==================
SV_HullPointContents

==================
 !id386
==================
SV_PointContents

==================
===========================================================================
============
SV_TestEntityPosition

This could be a lot more efficient...
============

===============================================================================

LINE TESTING IN HULLS

===============================================================================
 1/32 epsilon to keep floating point happy
==================
SV_RecursiveHullCheck

==================
 check for empty empty find the point distances put the crosspoint DIST_EPSILON pixels on the near side move up to the node go past the node never got out of the solid area================== the other side of the node is solid, this is the impact point================== shouldn't really happen, but does occasionally
==================
SV_ClipMoveToEntity

Handles selection or creation of a clipping hull, and offseting (and
eventually rotation) of the end points
==================
 fill in a default trace get the clipping hull rotate start and end into the models frame of reference trace a line through the apropriate clipping hull rotate endpos back to world frame of reference fix trace up by the offset did we clip the move?===========================================================================
====================
SV_ClipToLinks

Mins and maxs enclose the entire area swept by the move
====================
 touch linked edicts points never interact might intersect, so do an exact clip don't clip against own missiles don't clip against owner recurse down both sides
==================
SV_MoveBounds
==================
 debug to test against everything
==================
SV_Move
==================
 clip to world create the bounding box of the entire move clip to entities
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 world.c -- world query functions

entities never clip against themselves, or their owner

line of sight checks trace->crosscontent, but bullets don't

 enclose the test object along entire move size of the moving object size when clipping against mosnters
===============================================================================

HULL BOXES

===============================================================================

===================
SV_InitBoxHull

Set up the planes and clipnodes so that the six floats of a bounding box
can just be stored out and get a proper hull_t structure.
===================

===================
SV_HullForBox

To keep everything totally uniform, bounding boxes are turned into small
BSP trees instead of being compared directly.
===================

================
SV_HullForEntity

Returns a hull that can be used for testing or clipping an object of mins/maxs
size.
Offset is filled in to contain the adjustment that must be added to the
testing object's origin to get a point to use with the returned hull.
================
 decide which clipping hull to use, based on the size explicit hulls in the BSP model calculate an offset value to center the origin create a temp hull from bounding box sizes
===============================================================================

ENTITY AREA CHECKING

===============================================================================
 -1 = leaf node
===============
SV_CreateAreaNode

===============

===============
SV_ClearWorld

===============

===============
SV_UnlinkEdict

===============
 not linked in anywhere
====================
SV_TouchLinks
====================
 touch linked edicts recurse down both sides
===============
SV_FindTouchedLeafs

===============
 add an efrag if the node is a leaf NODE_MIXED recurse down the contacted sides
===============
SV_LinkEdict

===============
 unlink from old position don't add the world set the abs box expand for rotation to make items easier to pick up and allow them to be grabbed off of shelves, the abs sizes are expanded because movement is clipped an epsilon away from an actual edge, we must fully check even when bounding boxes don't quite touch link to PVS leafs find the first node that the ent's box crosses crosses the node link it in	 if touch_triggers, touch all entities at this node and decend for more
===============================================================================

POINT TESTING IN HULLS

===============================================================================

==================
SV_HullPointContents

==================
 !id386
==================
SV_PointContents

==================
===========================================================================
============
SV_TestEntityPosition

This could be a lot more efficient...
============

===============================================================================

LINE TESTING IN HULLS

===============================================================================
 1/32 epsilon to keep floating point happy
==================
SV_RecursiveHullCheck

==================
 check for empty empty find the point distances put the crosspoint DIST_EPSILON pixels on the near side move up to the node go past the node never got out of the solid area================== the other side of the node is solid, this is the impact point================== shouldn't really happen, but does occasionally
==================
SV_ClipMoveToEntity

Handles selection or creation of a clipping hull, and offseting (and
eventually rotation) of the end points
==================
 fill in a default trace get the clipping hull rotate start and end into the models frame of reference trace a line through the apropriate clipping hull rotate endpos back to world frame of reference fix trace up by the offset did we clip the move?===========================================================================
====================
SV_ClipToLinks

Mins and maxs enclose the entire area swept by the move
====================
 touch linked edicts points never interact might intersect, so do an exact clip don't clip against own missiles don't clip against owner recurse down both sides
==================
SV_MoveBounds
==================
 debug to test against everything
==================
SV_Move
==================
 clip to world create the bounding box of the entire move clip to entities