

	WRT350Nv2-Builder 2.4 (previously called buildimg)
	Copyright (C) 2008-2009 Dirk Teurlings <info@upexia.nl>
	Copyright (C) 2009-2011 Matthias Buecher (http://www.maddes.net/)

	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

	A lot of thanks to Kaloz and juhosg from OpenWRT and Lennert Buytenhek from
	marvell for helping me figure this one out. This code is based on bash
	scripts wrote by Peter van Valderen so the real credit should go to him.

	This program reads the provided parameter file and creates an image which can
	be used to flash a Linksys WRT350N v2 from stock firmware.
	The trick is to fill unused space in the bin file with random, so that the
	resulting zip file passes the size check of the stock firmware.

	The parameter file layout for an original Linksys firmware:
		:kernel	0x001A0000	/path/to/uImage
		:rootfs	0	/path/to/root.squashfs
		:u-boot	0	/path/to/u-boot.bin
		#version	0x2020

	Additionally since v2.4 an already complete image can be used:
		:image		0	/path/to/openwrt-wrt350nv2-[squashfs|jffs2-64k].img

	args:
		1	wrt350nv2.par		parameter file describing the image layout
		2	wrt350nv2.img		output file for linksys style image

	A u-boot image inside the bin file is not necessary.
	The version is not important.
	The name of the bin file is not important, but still "wrt350n.bin" is used to
	keep as close as possible to the stock firmware.

	Linksys assumes that no mtd will be used to its maximum, so the last 16 bytes
	of the mtd are abused to define the length of the next mtd content (4 bytes for
	size + 12 pad bytes).

	At the end of "rootfs" additional 16 bytes are abused for some data and a
	highly important eRcOmM identifier, so the last 32 bytes of "rootfs" are abused.

	At the end of "u-boot" 128 bytes are abused for some data, a checksum and a
	highly important sErCoMm identifier.


	This program uses a special GNU scanf modifier to allocate
	sufficient memory for a strings with unknown length.
	See http://www.kernel.org/doc/man-pages/online/pages/man3/scanf.3.html#NOTES


	To extract everything from a Linksys style firmware image see
	https://forum.openwrt.org/viewtopic.php?pid=92928#p92928

	Changelog:
	v2.4 - added ":image" definition for parameter file, this allows
	       to use a complete sysupgrade image without any kernel size check
	v2.3 - allow jffs by adding its magic number (0x8519)
	       added parameter option -i to ignore unknown magic numbers
	v2.2 - fixed checksum byte calculation for other versions than 0x2019
	       fixed rare problem with padsize
	       updated info to stock firmware 2.00.20
	       fixed typos
	v2.1 - used "wrt350n.bin" for the created image (closer to stock)
		added option to create the image in two separate steps (-b / -z)
	v2.0 - complete re-write

 includes for GNU's basename() errno fopen(), fread(), fclose(), etc. system(), etc. basename(), strerror(), strdup(), etc. optopt(), access(), etc. WEXITSTATUS, etc. custom includes MD5 routines Linksys definitions from firmware 2.0.19 (unchanged up to 2.0.20) version info verbosity mtd info should be filled up to here, to make sure that the zip file is big enough to pass the size check of the stock firmware 2.0.17: filled up to 0x00640000 2.0.19: filled up to 0x00670000 2.0.20: filled up to 0x00670000 rootfs statics via: hexdump -v -e '1/1 "0x%02X, "' -s 0x0075FFE0 -n 16 "wrt350n.bin" ; echo -en "\n" seems to be a fixed value seems to be a fixed value seems to be a fixed value eRcOmM u-boot statics via: hexdump -v -e '1/1 "0x%02X, "' -s 0x007FFF80 -n 128 "wrt350n.bin" ; echo -en "\n"unsigned char sn[]   = {	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };	// (12) seems to be an unused valueunsigned char pin[]  = {	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };	// (8) seems to be an unused valueunsigned char node[] = {	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// (25) seems to be an unused value				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };unsigned char checksum[] = { 0xE9 };	// (1) is calculated, does it belong to node? (70) seems to be a fixed value, except for fw version protocol id? protocol id? firmware version, same as in rootfs sErCoMm img statics via: hexdump -v -e '1/1 "0x%02X, "' -s 0 -n 512 "WRT350N-EU-ETSI-2.00.19.img" ; echo -en "\n" (unchanged up to 2.0.20) firmware version, same as in rootfs md5 checksum read all lines read next line into memory allocate memory for input line if buffer was not completely filled, then assume that line is complete otherwise.... reset file position to line start double buffer size increase line number split line if starting with a colon populate mtd_info if supported mtd names Get file size integer values changing version strings
					if (!strcmp(string1, "something")) {
						something = strdup(string2);
					} else {
					} allocate memory for bin file initialize with zero add files adding file size adding file content padding start on next 64KB border get offset add special contents eRcOmM		memcpy(&buffer[KERNEL_CODE_OFFSET + SN_OFF], sn, 12);	// ToDo: currently zero, find out what's this for?		memcpy(&buffer[KERNEL_CODE_OFFSET + PIN_OFF], pin, 8);	// ToDo: currently zero, find out what's this for?		memcpy(&buffer[KERNEL_CODE_OFFSET + NODE_BASE_OFF], node, 25);	// ToDo: currently zero, find out what's this for? sErCoMm write bin file allocate memory for command line if buffer was not completely filled, then line fit in completely otherwise try again with more space glibc 2.1 precisely what is needed glibc 2.0 twice the old size zipping binfile copy firmware version clear md5 checksum prepare md5 checksum calculation add img header adding zip file add end byte append salt to md5 checksum finish md5 checksum calculation write md5 checksum into img header display program header command line processing options option with missing operand files if file already exists then check write access file name checks check for mutually exclusive options react on option problems or help request, then exit handle special case when zipfile is stated open files from command line parameter/zip file image file parameter file processing check all input data general checks no further checks if no file data present not updated by stock firmware general magic number check image kernel uImage rootfs squashfs jffs mtd specific size check general size check Check for mandatory parts Check for duplicate parts bin creation in memory zip file creation img file creation clean up end program

	WRT350Nv2-Builder 2.4 (previously called buildimg)
	Copyright (C) 2008-2009 Dirk Teurlings <info@upexia.nl>
	Copyright (C) 2009-2011 Matthias Buecher (http://www.maddes.net/)

	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

	A lot of thanks to Kaloz and juhosg from OpenWRT and Lennert Buytenhek from
	marvell for helping me figure this one out. This code is based on bash
	scripts wrote by Peter van Valderen so the real credit should go to him.

	This program reads the provided parameter file and creates an image which can
	be used to flash a Linksys WRT350N v2 from stock firmware.
	The trick is to fill unused space in the bin file with random, so that the
	resulting zip file passes the size check of the stock firmware.

	The parameter file layout for an original Linksys firmware:
		:kernel	0x001A0000	/path/to/uImage
		:rootfs	0	/path/to/root.squashfs
		:u-boot	0	/path/to/u-boot.bin
		#version	0x2020

	Additionally since v2.4 an already complete image can be used:
		:image		0	/path/to/openwrt-wrt350nv2-[squashfs|jffs2-64k].img

	args:
		1	wrt350nv2.par		parameter file describing the image layout
		2	wrt350nv2.img		output file for linksys style image

	A u-boot image inside the bin file is not necessary.
	The version is not important.
	The name of the bin file is not important, but still "wrt350n.bin" is used to
	keep as close as possible to the stock firmware.

	Linksys assumes that no mtd will be used to its maximum, so the last 16 bytes
	of the mtd are abused to define the length of the next mtd content (4 bytes for
	size + 12 pad bytes).

	At the end of "rootfs" additional 16 bytes are abused for some data and a
	highly important eRcOmM identifier, so the last 32 bytes of "rootfs" are abused.

	At the end of "u-boot" 128 bytes are abused for some data, a checksum and a
	highly important sErCoMm identifier.


	This program uses a special GNU scanf modifier to allocate
	sufficient memory for a strings with unknown length.
	See http://www.kernel.org/doc/man-pages/online/pages/man3/scanf.3.html#NOTES


	To extract everything from a Linksys style firmware image see
	https://forum.openwrt.org/viewtopic.php?pid=92928#p92928

	Changelog:
	v2.4 - added ":image" definition for parameter file, this allows
	       to use a complete sysupgrade image without any kernel size check
	v2.3 - allow jffs by adding its magic number (0x8519)
	       added parameter option -i to ignore unknown magic numbers
	v2.2 - fixed checksum byte calculation for other versions than 0x2019
	       fixed rare problem with padsize
	       updated info to stock firmware 2.00.20
	       fixed typos
	v2.1 - used "wrt350n.bin" for the created image (closer to stock)
		added option to create the image in two separate steps (-b / -z)
	v2.0 - complete re-write

 includes for GNU's basename() errno fopen(), fread(), fclose(), etc. system(), etc. basename(), strerror(), strdup(), etc. optopt(), access(), etc. WEXITSTATUS, etc. custom includes MD5 routines Linksys definitions from firmware 2.0.19 (unchanged up to 2.0.20) version info verbosity mtd info should be filled up to here, to make sure that the zip file is big enough to pass the size check of the stock firmware 2.0.17: filled up to 0x00640000 2.0.19: filled up to 0x00670000 2.0.20: filled up to 0x00670000 rootfs statics via: hexdump -v -e '1/1 "0x%02X, "' -s 0x0075FFE0 -n 16 "wrt350n.bin" ; echo -en "\n" seems to be a fixed value seems to be a fixed value seems to be a fixed value eRcOmM u-boot statics via: hexdump -v -e '1/1 "0x%02X, "' -s 0x007FFF80 -n 128 "wrt350n.bin" ; echo -en "\n"unsigned char sn[]   = {	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };	// (12) seems to be an unused valueunsigned char pin[]  = {	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };	// (8) seems to be an unused valueunsigned char node[] = {	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// (25) seems to be an unused value				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };unsigned char checksum[] = { 0xE9 };	// (1) is calculated, does it belong to node? (70) seems to be a fixed value, except for fw version protocol id? protocol id? firmware version, same as in rootfs sErCoMm img statics via: hexdump -v -e '1/1 "0x%02X, "' -s 0 -n 512 "WRT350N-EU-ETSI-2.00.19.img" ; echo -en "\n" (unchanged up to 2.0.20) firmware version, same as in rootfs md5 checksum read all lines read next line into memory allocate memory for input line if buffer was not completely filled, then assume that line is complete otherwise.... reset file position to line start double buffer size increase line number split line if starting with a colon populate mtd_info if supported mtd names Get file size integer values changing version strings
					if (!strcmp(string1, "something")) {
						something = strdup(string2);
					} else {
					} allocate memory for bin file initialize with zero add files adding file size adding file content padding start on next 64KB border get offset add special contents eRcOmM		memcpy(&buffer[KERNEL_CODE_OFFSET + SN_OFF], sn, 12);	// ToDo: currently zero, find out what's this for?		memcpy(&buffer[KERNEL_CODE_OFFSET + PIN_OFF], pin, 8);	// ToDo: currently zero, find out what's this for?		memcpy(&buffer[KERNEL_CODE_OFFSET + NODE_BASE_OFF], node, 25);	// ToDo: currently zero, find out what's this for? sErCoMm write bin file allocate memory for command line if buffer was not completely filled, then line fit in completely otherwise try again with more space glibc 2.1 precisely what is needed glibc 2.0 twice the old size zipping binfile copy firmware version clear md5 checksum prepare md5 checksum calculation add img header adding zip file add end byte append salt to md5 checksum finish md5 checksum calculation write md5 checksum into img header display program header command line processing options option with missing operand files if file already exists then check write access file name checks check for mutually exclusive options react on option problems or help request, then exit handle special case when zipfile is stated open files from command line parameter/zip file image file parameter file processing check all input data general checks no further checks if no file data present not updated by stock firmware general magic number check image kernel uImage rootfs squashfs jffs mtd specific size check general size check Check for mandatory parts Check for duplicate parts bin creation in memory zip file creation img file creation clean up end program