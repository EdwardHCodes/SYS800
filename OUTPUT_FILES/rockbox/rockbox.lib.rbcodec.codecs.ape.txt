**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 Dave Chapman
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Monkey's Audio files have one seekpoint per frame.  The framesize
   varies between 73728 and 1179648 samples.  

   At the smallest framesize, 30000 frames would be 50155 seconds of
   audio - almost 14 hours.  This should be enough for any file a user
   would want to play in Rockbox, given the 2GB FAT filesize (and 4GB
   seektable entry size) limit.

   This means the seektable is 120000 bytes, but we have a lot of
   spare room in the codec buffer - the APE codec itself is small.
 1024*4 = 4096 bytes per channel  Given an ape_ctx and a sample to seek to, return the file position
   to the frame containing that sample, and the number of samples to
   skip in that frame.
 We don't have a seekpoint for that frame  The resume offset is a value in bytes - we need to
   turn it into a frame number and samplestoskip value  APE's bytestream is weird...  We estimate where we were in the current frame, based on the
       byte offset  this is the codec entry point  Generic codec initialisation  this is called for each file to process  Remember the resume position - when the codec is opened, the
       playback engine will reset it.  Read the file headers to populate the ape_ctx struct  Initialise the seektable for this file  The seektable may be bigger than the guard buffer (32KB), so we
       do a read()  Byte-swap the little-endian seekpoints  Now advance the file position to the first frame  The main decoding loop  The resume offset is a value in bytes - we need to
           turn it into a frame number and samplestoskip value  Take account of the little-endian 32-bit byte ordering  Resume by simulated seeking  Initialise the buffer  The main decoding loop - we decode the frames a small chunk at a time  Calculate how many blocks there are in this frame  Initialise the frame decoder  Decode the frame a chunk at a time  Deal with any pending seek requests  APE's bytestream is weird...  Sorry...  Frame decoding error, abort  Update the elapsed-time indicator  Decrement the block count **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 Dave Chapman
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Monkey's Audio files have one seekpoint per frame.  The framesize
   varies between 73728 and 1179648 samples.  

   At the smallest framesize, 30000 frames would be 50155 seconds of
   audio - almost 14 hours.  This should be enough for any file a user
   would want to play in Rockbox, given the 2GB FAT filesize (and 4GB
   seektable entry size) limit.

   This means the seektable is 120000 bytes, but we have a lot of
   spare room in the codec buffer - the APE codec itself is small.
 1024*4 = 4096 bytes per channel  Given an ape_ctx and a sample to seek to, return the file position
   to the frame containing that sample, and the number of samples to
   skip in that frame.
 We don't have a seekpoint for that frame  The resume offset is a value in bytes - we need to
   turn it into a frame number and samplestoskip value  APE's bytestream is weird...  We estimate where we were in the current frame, based on the
       byte offset  this is the codec entry point  Generic codec initialisation  this is called for each file to process  Remember the resume position - when the codec is opened, the
       playback engine will reset it.  Read the file headers to populate the ape_ctx struct  Initialise the seektable for this file  The seektable may be bigger than the guard buffer (32KB), so we
       do a read()  Byte-swap the little-endian seekpoints  Now advance the file position to the first frame  The main decoding loop  The resume offset is a value in bytes - we need to
           turn it into a frame number and samplestoskip value  Take account of the little-endian 32-bit byte ordering  Resume by simulated seeking  Initialise the buffer  The main decoding loop - we decode the frames a small chunk at a time  Calculate how many blocks there are in this frame  Initialise the frame decoder  Decode the frame a chunk at a time  Deal with any pending seek requests  APE's bytestream is weird...  Sorry...  Frame decoding error, abort  Update the elapsed-time indicator  Decrement the block count **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 Dave Chapman
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Monkey's Audio files have one seekpoint per frame.  The framesize
   varies between 73728 and 1179648 samples.  

   At the smallest framesize, 30000 frames would be 50155 seconds of
   audio - almost 14 hours.  This should be enough for any file a user
   would want to play in Rockbox, given the 2GB FAT filesize (and 4GB
   seektable entry size) limit.

   This means the seektable is 120000 bytes, but we have a lot of
   spare room in the codec buffer - the APE codec itself is small.
 1024*4 = 4096 bytes per channel  Given an ape_ctx and a sample to seek to, return the file position
   to the frame containing that sample, and the number of samples to
   skip in that frame.
 We don't have a seekpoint for that frame  The resume offset is a value in bytes - we need to
   turn it into a frame number and samplestoskip value  APE's bytestream is weird...  We estimate where we were in the current frame, based on the
       byte offset  this is the codec entry point  Generic codec initialisation  this is called for each file to process  Remember the resume position - when the codec is opened, the
       playback engine will reset it.  Read the file headers to populate the ape_ctx struct  Initialise the seektable for this file  The seektable may be bigger than the guard buffer (32KB), so we
       do a read()  Byte-swap the little-endian seekpoints  Now advance the file position to the first frame  The main decoding loop  The resume offset is a value in bytes - we need to
           turn it into a frame number and samplestoskip value  Take account of the little-endian 32-bit byte ordering  Resume by simulated seeking  Initialise the buffer  The main decoding loop - we decode the frames a small chunk at a time  Calculate how many blocks there are in this frame  Initialise the frame decoder  Decode the frame a chunk at a time  Deal with any pending seek requests  APE's bytestream is weird...  Sorry...  Frame decoding error, abort  Update the elapsed-time indicator  Decrement the block count 