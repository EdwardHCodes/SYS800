 text.c - Text manipulation functions
 *	Copyright (c) 1995-1997 Stefan Jokisch
 *
 * This file is part of Frotz.
 *
 * Frotz is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Frotz is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
  
 * According to Matteo De Luigi <matteo.de.luigi@libero.it>, 
 * 0xab and 0xbb were in each other's proper positions.
 *   Sat Apr 21, 2001
 
 * translate_from_zscii
 *
 * Map a ZSCII character onto the ISO Latin-1 alphabet.
 *
  game has its own Unicode table  game uses standard set  Oe and oe ligatures  are not ISO-Latin 1  translate_from_zscii 
 * translate_to_zscii
 *
 * Map an ISO Latin-1 character onto the ZSCII alphabet.
 *
  game has its own Unicode table  game uses standard set  Safety thing from David Kinder  regarding his Unicode patches  Sept 15, 2002  translate_to_zscii 
 * alphabet
 *
 * Return a character from one of the three character sets.
 *
  game uses its own alphabet  game uses default alphabet  alphabet 
 * load_string
 *
 * Copy a ZSCII string from the memory to the global "decoded" string.
 *
  load_string 
 * encode_text
 *
 * Encode the Unicode text in the global "decoded" string then write
 * the result to the global "encoded" array. (This is used to look up
 * words in the dictionary.) Up to V3 the vocabulary resolution is
 * two, since V4 it is three words. Because each word contains three
 * Z-characters, that makes six or nine Z-characters respectively.
 * Longer words are chopped to the proper size, shorter words are are
 * padded out with 5's. For word completion we pad with 0s and 31s,
 * the minimum and maximum Z-characters.
 *
  Expand abbreviations that some old Infocom games lack  Translate string to a sequence of Z-characters  Search character in the alphabet  Character not found, store its ZSCII value  Character found, store its index  Three Z-characters make a 16bit word  encode_text 
 * z_check_unicode, test if a unicode character can be read and printed.
 *
 * 	zargs[0] = Unicode
 *
  z_check_unicode 
 * z_encode_text, encode a ZSCII string for use in a dictionary.
 *
 *	zargs[0] = address of text buffer
 *	zargs[1] = length of ASCII string
 *	zargs[2] = offset of ASCII string within the text buffer
 *	zargs[3] = address to store encoded text in
 *
 * This is a V5+ opcode and therefore the dictionary resolution must be
 * three 16bit words.
 *
  z_encode_text 
 * decode_text
 *
 * Convert encoded text to Unicode. The encoded text consists of 16bit
 * words. Every word holds 3 Z-characters (5 bits each) plus a spare
 * bit to mark the last word. The Z-characters translate to ZSCII by
 * looking at the current current character set. Some select another
 * character set, others refer to abbreviations.
 *
 * There are several different string types:
 *
 *    LOW_STRING - from the lower 64KB (byte address)
 *    ABBREVIATION - from the abbreviations table (word address)
 *    HIGH_STRING - from the end of the memory map (packed address)
 *    EMBEDDED_STRING - from the instruction stream (at PC)
 *    VOCABULARY - from the dictionary (byte address)
 *
 * The last type is only used for word completion.
 *
  makes compilers shut up  Calculate the byte address if necessary  h_version == V8  Loop until a 16bit word has the highest bit set  Fetch the next 16bit word  Read its three Z-characters  normal operation  abbreviation  ZSCII character - first part  ZSCII character - second part  decode_text 
 * z_new_line, print a new line.
 *
 * 	no zargs used
 *
  z_new_line 
 * z_print, print a string embedded in the instruction stream.
 *
 *	no zargs used
 *
  z_print 
 * z_print_addr, print a string from the lower 64KB.
 *
 *	zargs[0] = address of string to print
 *
  z_print_addr 
 * z_print_char print a single ZSCII character.
 *
 *	zargs[0] = ZSCII character to be printed
 *
  z_print_char 
 * z_print_form, print a formatted table.
 *
 *	zargs[0] = address of formatted table to be printed
 *
  z_print_form 
 * print_num
 *
 * Print a signed 16bit number.
 *
  Print sign  Print absolute value  print_num 
 * z_print_num, print a signed number.
 *
 * 	zargs[0] = number to print
 *
  z_print_num 
 * print_object
 *
 * Print an object description.
 *
  encoded text 0x94a5 == empty string  supply a generic name  for anonymous objects  print_object 
 * z_print_obj, print an object description.
 *
 * 	zargs[0] = number of object to be printed
 *
  z_print_obj 
 * z_print_paddr, print the string at the given packed address.
 *
 * 	zargs[0] = packed address of string to be printed
 *
  z_print_paddr 
 * z_print_ret, print the string at PC, print newline then return true.
 *
 * 	no zargs used
 *
  z_print_ret 
 * print_string
 *
 * Print a string of ASCII characters.
 *
  print_string 
 * z_print_unicode
 *
 * 	zargs[0] = Unicode
 *
  z_print_unicode 
 * lookup_text
 *
 * Scan a dictionary searching for the given word. The first argument
 * can be
 *
 * 0x00 - find the first word which is >= the given one
 * 0x05 - find the word which exactly matches the given one
 * 0x1f - find the last word which is <= the given one
 *
 * The return value is 0 if the search fails.
 *
  skip word separators  get length of entries  get number of entries  bad luck, entries aren't sorted  entries are sorted  binary search  linear search  Compare word to dictionary entry  exact match found, return now  binary search  linear search  No exact match has been found  lookup_text 
 * tokenise_text
 *
 * Translate a single word to a token and append it to the token
 * buffer. Every token consists of the address of the dictionary
 * entry, the length of the word and the offset of the word from
 * the start of the text buffer. Unknown words cause empty slots
 * if the flag is set (such that the text can be scanned several
 * times with different dictionaries); otherwise they are zero.
 *
  sufficient space left for token?  tokenise_text 
 * tokenise_line
 *
 * Split an input line into words and translate the words to tokens.
 *
  makes compilers shut up  Use standard dictionary if the given dictionary is zero  Remove all tokens before inserting new ones  Move the first pointer across the text buffer searching for the
       beginning of a word. If this succeeds, store the position in a
       second pointer. Move the first pointer searching for the end of
       the word. When it is found, "tokenise" the word. Continue until
       the end of the buffer is reached.  Fetch next ZSCII character  Check for separator  This could be the start or the end of a word  Translate separator (which is a word in its own right)  tokenise_line 
 * z_tokenise, make a lexical analysis of a ZSCII string.
 *
 *	zargs[0] = address of string to analyze
 *	zargs[1] = address of token buffer
 *	zargs[2] = address of dictionary (optional)
 *	zargs[3] = set when unknown words cause empty slots (optional)
 *
  Supply default arguments  Call tokenise_line to do the real work  z_tokenise 
 * completion
 *
 * Scan the vocabulary to complete the last word on the input line
 * (similar to "tcsh" under Unix). The return value is
 *
 *    2 ==> completion is impossible
 *    1 ==> completion is ambiguous
 *    0 ==> completion is successful
 *
 * The function also returns a string in its second argument. In case
 * of 2, the string is empty; in case of 1, the string is the longest
 * extension of the last word on the input line that is common to all
 * possible completions (for instance, if the last word on the input
 * is "fo" and its only possible completions are "follow" and "folly"
 * then the string is "ll"); in case of 0, the string is an extension
 * to the last word that results in the only possible completion.
 *
  Copy last word to "decoded" string  Search the dictionary for first and last possible extensions  Copy first extension to "result" string  Merge second extension with "result" string  Search was ambiguous or successful  completion  text.c - Text manipulation functions
 *	Copyright (c) 1995-1997 Stefan Jokisch
 *
 * This file is part of Frotz.
 *
 * Frotz is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Frotz is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
  
 * According to Matteo De Luigi <matteo.de.luigi@libero.it>, 
 * 0xab and 0xbb were in each other's proper positions.
 *   Sat Apr 21, 2001
 
 * translate_from_zscii
 *
 * Map a ZSCII character onto the ISO Latin-1 alphabet.
 *
  game has its own Unicode table  game uses standard set  Oe and oe ligatures  are not ISO-Latin 1  translate_from_zscii 
 * translate_to_zscii
 *
 * Map an ISO Latin-1 character onto the ZSCII alphabet.
 *
  game has its own Unicode table  game uses standard set  Safety thing from David Kinder  regarding his Unicode patches  Sept 15, 2002  translate_to_zscii 
 * alphabet
 *
 * Return a character from one of the three character sets.
 *
  game uses its own alphabet  game uses default alphabet  alphabet 
 * load_string
 *
 * Copy a ZSCII string from the memory to the global "decoded" string.
 *
  load_string 
 * encode_text
 *
 * Encode the Unicode text in the global "decoded" string then write
 * the result to the global "encoded" array. (This is used to look up
 * words in the dictionary.) Up to V3 the vocabulary resolution is
 * two, since V4 it is three words. Because each word contains three
 * Z-characters, that makes six or nine Z-characters respectively.
 * Longer words are chopped to the proper size, shorter words are are
 * padded out with 5's. For word completion we pad with 0s and 31s,
 * the minimum and maximum Z-characters.
 *
  Expand abbreviations that some old Infocom games lack  Translate string to a sequence of Z-characters  Search character in the alphabet  Character not found, store its ZSCII value  Character found, store its index  Three Z-characters make a 16bit word  encode_text 
 * z_check_unicode, test if a unicode character can be read and printed.
 *
 * 	zargs[0] = Unicode
 *
  z_check_unicode 
 * z_encode_text, encode a ZSCII string for use in a dictionary.
 *
 *	zargs[0] = address of text buffer
 *	zargs[1] = length of ASCII string
 *	zargs[2] = offset of ASCII string within the text buffer
 *	zargs[3] = address to store encoded text in
 *
 * This is a V5+ opcode and therefore the dictionary resolution must be
 * three 16bit words.
 *
  z_encode_text 
 * decode_text
 *
 * Convert encoded text to Unicode. The encoded text consists of 16bit
 * words. Every word holds 3 Z-characters (5 bits each) plus a spare
 * bit to mark the last word. The Z-characters translate to ZSCII by
 * looking at the current current character set. Some select another
 * character set, others refer to abbreviations.
 *
 * There are several different string types:
 *
 *    LOW_STRING - from the lower 64KB (byte address)
 *    ABBREVIATION - from the abbreviations table (word address)
 *    HIGH_STRING - from the end of the memory map (packed address)
 *    EMBEDDED_STRING - from the instruction stream (at PC)
 *    VOCABULARY - from the dictionary (byte address)
 *
 * The last type is only used for word completion.
 *
  makes compilers shut up  Calculate the byte address if necessary  h_version == V8  Loop until a 16bit word has the highest bit set  Fetch the next 16bit word  Read its three Z-characters  normal operation  abbreviation  ZSCII character - first part  ZSCII character - second part  decode_text 
 * z_new_line, print a new line.
 *
 * 	no zargs used
 *
  z_new_line 
 * z_print, print a string embedded in the instruction stream.
 *
 *	no zargs used
 *
  z_print 
 * z_print_addr, print a string from the lower 64KB.
 *
 *	zargs[0] = address of string to print
 *
  z_print_addr 
 * z_print_char print a single ZSCII character.
 *
 *	zargs[0] = ZSCII character to be printed
 *
  z_print_char 
 * z_print_form, print a formatted table.
 *
 *	zargs[0] = address of formatted table to be printed
 *
  z_print_form 
 * print_num
 *
 * Print a signed 16bit number.
 *
  Print sign  Print absolute value  print_num 
 * z_print_num, print a signed number.
 *
 * 	zargs[0] = number to print
 *
  z_print_num 
 * print_object
 *
 * Print an object description.
 *
  encoded text 0x94a5 == empty string  supply a generic name  for anonymous objects  print_object 
 * z_print_obj, print an object description.
 *
 * 	zargs[0] = number of object to be printed
 *
  z_print_obj 
 * z_print_paddr, print the string at the given packed address.
 *
 * 	zargs[0] = packed address of string to be printed
 *
  z_print_paddr 
 * z_print_ret, print the string at PC, print newline then return true.
 *
 * 	no zargs used
 *
  z_print_ret 
 * print_string
 *
 * Print a string of ASCII characters.
 *
  print_string 
 * z_print_unicode
 *
 * 	zargs[0] = Unicode
 *
  z_print_unicode 
 * lookup_text
 *
 * Scan a dictionary searching for the given word. The first argument
 * can be
 *
 * 0x00 - find the first word which is >= the given one
 * 0x05 - find the word which exactly matches the given one
 * 0x1f - find the last word which is <= the given one
 *
 * The return value is 0 if the search fails.
 *
  skip word separators  get length of entries  get number of entries  bad luck, entries aren't sorted  entries are sorted  binary search  linear search  Compare word to dictionary entry  exact match found, return now  binary search  linear search  No exact match has been found  lookup_text 
 * tokenise_text
 *
 * Translate a single word to a token and append it to the token
 * buffer. Every token consists of the address of the dictionary
 * entry, the length of the word and the offset of the word from
 * the start of the text buffer. Unknown words cause empty slots
 * if the flag is set (such that the text can be scanned several
 * times with different dictionaries); otherwise they are zero.
 *
  sufficient space left for token?  tokenise_text 
 * tokenise_line
 *
 * Split an input line into words and translate the words to tokens.
 *
  makes compilers shut up  Use standard dictionary if the given dictionary is zero  Remove all tokens before inserting new ones  Move the first pointer across the text buffer searching for the
       beginning of a word. If this succeeds, store the position in a
       second pointer. Move the first pointer searching for the end of
       the word. When it is found, "tokenise" the word. Continue until
       the end of the buffer is reached.  Fetch next ZSCII character  Check for separator  This could be the start or the end of a word  Translate separator (which is a word in its own right)  tokenise_line 
 * z_tokenise, make a lexical analysis of a ZSCII string.
 *
 *	zargs[0] = address of string to analyze
 *	zargs[1] = address of token buffer
 *	zargs[2] = address of dictionary (optional)
 *	zargs[3] = set when unknown words cause empty slots (optional)
 *
  Supply default arguments  Call tokenise_line to do the real work  z_tokenise 
 * completion
 *
 * Scan the vocabulary to complete the last word on the input line
 * (similar to "tcsh" under Unix). The return value is
 *
 *    2 ==> completion is impossible
 *    1 ==> completion is ambiguous
 *    0 ==> completion is successful
 *
 * The function also returns a string in its second argument. In case
 * of 2, the string is empty; in case of 1, the string is the longest
 * extension of the last word on the input line that is common to all
 * possible completions (for instance, if the last word on the input
 * is "fo" and its only possible completions are "follow" and "folly"
 * then the string is "ll"); in case of 0, the string is an extension
 * to the last word that results in the only possible completion.
 *
  Copy last word to "decoded" string  Search the dictionary for first and last possible extensions  Copy first extension to "result" string  Merge second extension with "result" string  Search was ambiguous or successful  completion  text.c - Text manipulation functions
 *	Copyright (c) 1995-1997 Stefan Jokisch
 *
 * This file is part of Frotz.
 *
 * Frotz is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Frotz is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
  
 * According to Matteo De Luigi <matteo.de.luigi@libero.it>, 
 * 0xab and 0xbb were in each other's proper positions.
 *   Sat Apr 21, 2001
 
 * translate_from_zscii
 *
 * Map a ZSCII character onto the ISO Latin-1 alphabet.
 *
  game has its own Unicode table  game uses standard set  Oe and oe ligatures  are not ISO-Latin 1  translate_from_zscii 
 * translate_to_zscii
 *
 * Map an ISO Latin-1 character onto the ZSCII alphabet.
 *
  game has its own Unicode table  game uses standard set  Safety thing from David Kinder  regarding his Unicode patches  Sept 15, 2002  translate_to_zscii 
 * alphabet
 *
 * Return a character from one of the three character sets.
 *
  game uses its own alphabet  game uses default alphabet  alphabet 
 * load_string
 *
 * Copy a ZSCII string from the memory to the global "decoded" string.
 *
  load_string 
 * encode_text
 *
 * Encode the Unicode text in the global "decoded" string then write
 * the result to the global "encoded" array. (This is used to look up
 * words in the dictionary.) Up to V3 the vocabulary resolution is
 * two, since V4 it is three words. Because each word contains three
 * Z-characters, that makes six or nine Z-characters respectively.
 * Longer words are chopped to the proper size, shorter words are are
 * padded out with 5's. For word completion we pad with 0s and 31s,
 * the minimum and maximum Z-characters.
 *
  Expand abbreviations that some old Infocom games lack  Translate string to a sequence of Z-characters  Search character in the alphabet  Character not found, store its ZSCII value  Character found, store its index  Three Z-characters make a 16bit word  encode_text 
 * z_check_unicode, test if a unicode character can be read and printed.
 *
 * 	zargs[0] = Unicode
 *
  z_check_unicode 
 * z_encode_text, encode a ZSCII string for use in a dictionary.
 *
 *	zargs[0] = address of text buffer
 *	zargs[1] = length of ASCII string
 *	zargs[2] = offset of ASCII string within the text buffer
 *	zargs[3] = address to store encoded text in
 *
 * This is a V5+ opcode and therefore the dictionary resolution must be
 * three 16bit words.
 *
  z_encode_text 
 * decode_text
 *
 * Convert encoded text to Unicode. The encoded text consists of 16bit
 * words. Every word holds 3 Z-characters (5 bits each) plus a spare
 * bit to mark the last word. The Z-characters translate to ZSCII by
 * looking at the current current character set. Some select another
 * character set, others refer to abbreviations.
 *
 * There are several different string types:
 *
 *    LOW_STRING - from the lower 64KB (byte address)
 *    ABBREVIATION - from the abbreviations table (word address)
 *    HIGH_STRING - from the end of the memory map (packed address)
 *    EMBEDDED_STRING - from the instruction stream (at PC)
 *    VOCABULARY - from the dictionary (byte address)
 *
 * The last type is only used for word completion.
 *
  makes compilers shut up  Calculate the byte address if necessary  h_version == V8  Loop until a 16bit word has the highest bit set  Fetch the next 16bit word  Read its three Z-characters  normal operation  abbreviation  ZSCII character - first part  ZSCII character - second part  decode_text 
 * z_new_line, print a new line.
 *
 * 	no zargs used
 *
  z_new_line 
 * z_print, print a string embedded in the instruction stream.
 *
 *	no zargs used
 *
  z_print 
 * z_print_addr, print a string from the lower 64KB.
 *
 *	zargs[0] = address of string to print
 *
  z_print_addr 
 * z_print_char print a single ZSCII character.
 *
 *	zargs[0] = ZSCII character to be printed
 *
  z_print_char 
 * z_print_form, print a formatted table.
 *
 *	zargs[0] = address of formatted table to be printed
 *
  z_print_form 
 * print_num
 *
 * Print a signed 16bit number.
 *
  Print sign  Print absolute value  print_num 
 * z_print_num, print a signed number.
 *
 * 	zargs[0] = number to print
 *
  z_print_num 
 * print_object
 *
 * Print an object description.
 *
  encoded text 0x94a5 == empty string  supply a generic name  for anonymous objects  print_object 
 * z_print_obj, print an object description.
 *
 * 	zargs[0] = number of object to be printed
 *
  z_print_obj 
 * z_print_paddr, print the string at the given packed address.
 *
 * 	zargs[0] = packed address of string to be printed
 *
  z_print_paddr 
 * z_print_ret, print the string at PC, print newline then return true.
 *
 * 	no zargs used
 *
  z_print_ret 
 * print_string
 *
 * Print a string of ASCII characters.
 *
  print_string 
 * z_print_unicode
 *
 * 	zargs[0] = Unicode
 *
  z_print_unicode 
 * lookup_text
 *
 * Scan a dictionary searching for the given word. The first argument
 * can be
 *
 * 0x00 - find the first word which is >= the given one
 * 0x05 - find the word which exactly matches the given one
 * 0x1f - find the last word which is <= the given one
 *
 * The return value is 0 if the search fails.
 *
  skip word separators  get length of entries  get number of entries  bad luck, entries aren't sorted  entries are sorted  binary search  linear search  Compare word to dictionary entry  exact match found, return now  binary search  linear search  No exact match has been found  lookup_text 
 * tokenise_text
 *
 * Translate a single word to a token and append it to the token
 * buffer. Every token consists of the address of the dictionary
 * entry, the length of the word and the offset of the word from
 * the start of the text buffer. Unknown words cause empty slots
 * if the flag is set (such that the text can be scanned several
 * times with different dictionaries); otherwise they are zero.
 *
  sufficient space left for token?  tokenise_text 
 * tokenise_line
 *
 * Split an input line into words and translate the words to tokens.
 *
  makes compilers shut up  Use standard dictionary if the given dictionary is zero  Remove all tokens before inserting new ones  Move the first pointer across the text buffer searching for the
       beginning of a word. If this succeeds, store the position in a
       second pointer. Move the first pointer searching for the end of
       the word. When it is found, "tokenise" the word. Continue until
       the end of the buffer is reached.  Fetch next ZSCII character  Check for separator  This could be the start or the end of a word  Translate separator (which is a word in its own right)  tokenise_line 
 * z_tokenise, make a lexical analysis of a ZSCII string.
 *
 *	zargs[0] = address of string to analyze
 *	zargs[1] = address of token buffer
 *	zargs[2] = address of dictionary (optional)
 *	zargs[3] = set when unknown words cause empty slots (optional)
 *
  Supply default arguments  Call tokenise_line to do the real work  z_tokenise 
 * completion
 *
 * Scan the vocabulary to complete the last word on the input line
 * (similar to "tcsh" under Unix). The return value is
 *
 *    2 ==> completion is impossible
 *    1 ==> completion is ambiguous
 *    0 ==> completion is successful
 *
 * The function also returns a string in its second argument. In case
 * of 2, the string is empty; in case of 1, the string is the longest
 * extension of the last word on the input line that is common to all
 * possible completions (for instance, if the last word on the input
 * is "fo" and its only possible completions are "follow" and "folly"
 * then the string is "ll"); in case of 0, the string is an extension
 * to the last word that results in the only possible completion.
 *
  Copy last word to "decoded" string  Search the dictionary for first and last possible extensions  Copy first extension to "result" string  Merge second extension with "result" string  Search was ambiguous or successful  completion 