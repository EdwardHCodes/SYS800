
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 snd_dma.c -- main control for any streaming sound output device ======================================================================= Internal sound data & structures ======================================================================= pointer should go away sample PAIRS sample PAIRS hunk allocated [MAX_SFX] lowest rockbox supported ==================================================================== User-setable variables ==================================================================== Fake dma is a synchronous faking of the DMA progress used for isolating performance in the renderer.  The fakedma_updates is number of times S_Update() is called per second.
================
S_Startup
================

================
S_Init
================
 create a piece of DMA memory provides a tick sound until washed clean	if (shm->buffer)		shm->buffer[4] = shm->buffer[5] = 0x7f;	// force a pop for debugging ======================================================================= Shutdown sound engine ======================================================================= ======================================================================= Load a sound =======================================================================
==================
S_FindName

==================
 see if already loaded
==================
S_TouchSound

==================

==================
S_PrecacheSound

==================
 cache it in=============================================================================
=================
SND_PickChannel
=================
 Check for replacement sound, or find the best one to replace channel 0 never overrides allways override sound from same entity don't let monster sounds override player sounds
=================
SND_Spatialize
=================
 anything coming from the view entity will allways be full volume calculate stereo seperation and distance attenuation add in distance effect ======================================================================= Start a sound effect ======================================================================= pick a channel to play on spatialize not audible at all new channel couldn't load the sound's data if an identical sound has also been started this frame, offset the pos a bit to keep it from just making the first one louder no statics
=================
S_StaticSound
=================
=============================================================================
===================
S_UpdateAmbientSounds
===================
 calc ambient sound levels don't adjust volume too fast
============
S_Update

Called once each time through the main loop
============
 update general area ambient sound sources update spatialization for static and dynamic sounds	 respatialize channel try to combine static sounds with a previous channel of the same sound effect so we don't mix five torches every frame see if it can just use the last one search for one debugging outputCon_Printf ("%3i %3i %s\n", ch->leftvol, ch->rightvol, ch->sfx->name); mix some sound it is possible to miscount buffers if it has wrapped twice between calls to S_Update.  Oh well. buffer wrapped time to chop things off to avoid 32 bit limits don't pollute timings Updates DMA time check to make sure that we haven't overshotCon_Printf ("S_Update_ : overflow\n"); mix ahead of current position ! SDL 
===============================================================================

console functions

===============================================================================

Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 snd_dma.c -- main control for any streaming sound output device ======================================================================= Internal sound data & structures ======================================================================= pointer should go away sample PAIRS sample PAIRS hunk allocated [MAX_SFX] lowest rockbox supported ==================================================================== User-setable variables ==================================================================== Fake dma is a synchronous faking of the DMA progress used for isolating performance in the renderer.  The fakedma_updates is number of times S_Update() is called per second.
================
S_Startup
================

================
S_Init
================
 create a piece of DMA memory provides a tick sound until washed clean	if (shm->buffer)		shm->buffer[4] = shm->buffer[5] = 0x7f;	// force a pop for debugging ======================================================================= Shutdown sound engine ======================================================================= ======================================================================= Load a sound =======================================================================
==================
S_FindName

==================
 see if already loaded
==================
S_TouchSound

==================

==================
S_PrecacheSound

==================
 cache it in=============================================================================
=================
SND_PickChannel
=================
 Check for replacement sound, or find the best one to replace channel 0 never overrides allways override sound from same entity don't let monster sounds override player sounds
=================
SND_Spatialize
=================
 anything coming from the view entity will allways be full volume calculate stereo seperation and distance attenuation add in distance effect ======================================================================= Start a sound effect ======================================================================= pick a channel to play on spatialize not audible at all new channel couldn't load the sound's data if an identical sound has also been started this frame, offset the pos a bit to keep it from just making the first one louder no statics
=================
S_StaticSound
=================
=============================================================================
===================
S_UpdateAmbientSounds
===================
 calc ambient sound levels don't adjust volume too fast
============
S_Update

Called once each time through the main loop
============
 update general area ambient sound sources update spatialization for static and dynamic sounds	 respatialize channel try to combine static sounds with a previous channel of the same sound effect so we don't mix five torches every frame see if it can just use the last one search for one debugging outputCon_Printf ("%3i %3i %s\n", ch->leftvol, ch->rightvol, ch->sfx->name); mix some sound it is possible to miscount buffers if it has wrapped twice between calls to S_Update.  Oh well. buffer wrapped time to chop things off to avoid 32 bit limits don't pollute timings Updates DMA time check to make sure that we haven't overshotCon_Printf ("S_Update_ : overflow\n"); mix ahead of current position ! SDL 
===============================================================================

console functions

===============================================================================

Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 snd_dma.c -- main control for any streaming sound output device ======================================================================= Internal sound data & structures ======================================================================= pointer should go away sample PAIRS sample PAIRS hunk allocated [MAX_SFX] lowest rockbox supported ==================================================================== User-setable variables ==================================================================== Fake dma is a synchronous faking of the DMA progress used for isolating performance in the renderer.  The fakedma_updates is number of times S_Update() is called per second.
================
S_Startup
================

================
S_Init
================
 create a piece of DMA memory provides a tick sound until washed clean	if (shm->buffer)		shm->buffer[4] = shm->buffer[5] = 0x7f;	// force a pop for debugging ======================================================================= Shutdown sound engine ======================================================================= ======================================================================= Load a sound =======================================================================
==================
S_FindName

==================
 see if already loaded
==================
S_TouchSound

==================

==================
S_PrecacheSound

==================
 cache it in=============================================================================
=================
SND_PickChannel
=================
 Check for replacement sound, or find the best one to replace channel 0 never overrides allways override sound from same entity don't let monster sounds override player sounds
=================
SND_Spatialize
=================
 anything coming from the view entity will allways be full volume calculate stereo seperation and distance attenuation add in distance effect ======================================================================= Start a sound effect ======================================================================= pick a channel to play on spatialize not audible at all new channel couldn't load the sound's data if an identical sound has also been started this frame, offset the pos a bit to keep it from just making the first one louder no statics
=================
S_StaticSound
=================
=============================================================================
===================
S_UpdateAmbientSounds
===================
 calc ambient sound levels don't adjust volume too fast
============
S_Update

Called once each time through the main loop
============
 update general area ambient sound sources update spatialization for static and dynamic sounds	 respatialize channel try to combine static sounds with a previous channel of the same sound effect so we don't mix five torches every frame see if it can just use the last one search for one debugging outputCon_Printf ("%3i %3i %s\n", ch->leftvol, ch->rightvol, ch->sfx->name); mix some sound it is possible to miscount buffers if it has wrapped twice between calls to S_Update.  Oh well. buffer wrapped time to chop things off to avoid 32 bit limits don't pollute timings Updates DMA time check to make sure that we haven't overshotCon_Printf ("S_Update_ : overflow\n"); mix ahead of current position ! SDL 
===============================================================================

console functions

===============================================================================
