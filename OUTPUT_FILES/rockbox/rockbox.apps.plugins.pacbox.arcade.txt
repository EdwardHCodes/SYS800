**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Pacbox - a Pacman Emulator for Rockbox
 *
 * Based on PIE - Pacman Instructional Emulator
 *
 * Copyright (c) 1997-2003,2004 Alessandro Scotti
 * http://www.ascotti.org/
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Convert RGB888 to 2-bit greyscale - logic taken from bmp2rb.c  Namco 3-channel Wave Sound Generator wave data (8 waveforms with 32 4-bit entries each) Putting this in IRAM actually slows down the iPods, but is good for
   the Coldfire
 Color palette  Color palette  Initialize the CPU and the RAM  Initialize the WSG3  Set the sound PROM to the default values for the original Namco chip  Initialize parameters  Reset the machine  Set the DIP switches to a default configuration  Initialize the video character translation tables: video memory has a 
       very peculiar arrangement in Pacman so we precompute a few tables to 
       move around faster 
    Run the machine for one frame.
 Run until the CPU has executed the number of cycles per frame
       (the function returns the number of "extra" cycles spent by the
       last instruction but that is not really important here)  Reset the CPU cycle counter to make sure it doesn't overflow,
       also take into account the extra cycles from the previous run  If interrupts are enabled, force a CPU interrupt with the vector
       set by the program * Returns the status of the coin lockout door. 
    Decode one byte from the encoded color palette.

    An encoded palette byte contains RGB information bit-packed as follows:
        
          bit: 7 6 5 4 3 2 1 0
        color: b b g g g r r r
 Joy1_Up Joy1_Left Joy1_Right Joy1_Down Switch_RackAdvance CoinSlot_1 CoinSlot_2 Switch_AddCredit Joy2_Up Joy2_Left Joy2_Right Joy2_Down Switch_Test Key_OnePlayer Key_TwoPlayers Switch_CocktailMode
    Fire an input event, telling the emulator for example
    that the joystick has been released from the down position.
 Coin slots are locked, ignore command and exit Make the index point to the character offset into the character table  Make the buffer point to the character position Flip character Go to the next line Go to the next line Exit now if sprite not visible at all Clip the sprite coordinates to cut the parts that fall off the screen Prepare variables for drawing Draw the 16x16 sprite Normal Draw the 16x16 sprite Flip Y Flip X Flip X and Y
    Draw the video into the specified buffer.
 Draw the background first... ...then add the sprites Clear the buffer  Exit now if sound is disabled  Let the chip play the sound  Enables/disables the speed hack.  rockbox: not used
int setSpeedHack( int enabled )
{
    int result = 0;

    if( enabled ) {
        if( (ram_[0x180B] == 0xBE) && (ram_[0x1FFD] == 0x00) ) {
            // Patch the ROM to activate the speed hack
            ram_[0x180B] = 0x01; // Activate speed hack
            ram_[0x1FFD] = 0xBD; // Fix ROM checksum

            result = 1;
        }
    }
    else {
        if( (ram_[0x180B] == 0x01) && (ram_[0x1FFD] == 0xBD) ) {
            // Restore the patched ROM locations
            ram_[0x180B] = 0xBE;
            ram_[0x1FFD] = 0x00;

            result = 1;
        }
    }

    return result;
}
**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Pacbox - a Pacman Emulator for Rockbox
 *
 * Based on PIE - Pacman Instructional Emulator
 *
 * Copyright (c) 1997-2003,2004 Alessandro Scotti
 * http://www.ascotti.org/
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Convert RGB888 to 2-bit greyscale - logic taken from bmp2rb.c  Namco 3-channel Wave Sound Generator wave data (8 waveforms with 32 4-bit entries each) Putting this in IRAM actually slows down the iPods, but is good for
   the Coldfire
 Color palette  Color palette  Initialize the CPU and the RAM  Initialize the WSG3  Set the sound PROM to the default values for the original Namco chip  Initialize parameters  Reset the machine  Set the DIP switches to a default configuration  Initialize the video character translation tables: video memory has a 
       very peculiar arrangement in Pacman so we precompute a few tables to 
       move around faster 
    Run the machine for one frame.
 Run until the CPU has executed the number of cycles per frame
       (the function returns the number of "extra" cycles spent by the
       last instruction but that is not really important here)  Reset the CPU cycle counter to make sure it doesn't overflow,
       also take into account the extra cycles from the previous run  If interrupts are enabled, force a CPU interrupt with the vector
       set by the program * Returns the status of the coin lockout door. 
    Decode one byte from the encoded color palette.

    An encoded palette byte contains RGB information bit-packed as follows:
        
          bit: 7 6 5 4 3 2 1 0
        color: b b g g g r r r
 Joy1_Up Joy1_Left Joy1_Right Joy1_Down Switch_RackAdvance CoinSlot_1 CoinSlot_2 Switch_AddCredit Joy2_Up Joy2_Left Joy2_Right Joy2_Down Switch_Test Key_OnePlayer Key_TwoPlayers Switch_CocktailMode
    Fire an input event, telling the emulator for example
    that the joystick has been released from the down position.
 Coin slots are locked, ignore command and exit Make the index point to the character offset into the character table  Make the buffer point to the character position Flip character Go to the next line Go to the next line Exit now if sprite not visible at all Clip the sprite coordinates to cut the parts that fall off the screen Prepare variables for drawing Draw the 16x16 sprite Normal Draw the 16x16 sprite Flip Y Flip X Flip X and Y
    Draw the video into the specified buffer.
 Draw the background first... ...then add the sprites Clear the buffer  Exit now if sound is disabled  Let the chip play the sound  Enables/disables the speed hack.  rockbox: not used
int setSpeedHack( int enabled )
{
    int result = 0;

    if( enabled ) {
        if( (ram_[0x180B] == 0xBE) && (ram_[0x1FFD] == 0x00) ) {
            // Patch the ROM to activate the speed hack
            ram_[0x180B] = 0x01; // Activate speed hack
            ram_[0x1FFD] = 0xBD; // Fix ROM checksum

            result = 1;
        }
    }
    else {
        if( (ram_[0x180B] == 0x01) && (ram_[0x1FFD] == 0xBD) ) {
            // Restore the patched ROM locations
            ram_[0x180B] = 0xBE;
            ram_[0x1FFD] = 0x00;

            result = 1;
        }
    }

    return result;
}
**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Pacbox - a Pacman Emulator for Rockbox
 *
 * Based on PIE - Pacman Instructional Emulator
 *
 * Copyright (c) 1997-2003,2004 Alessandro Scotti
 * http://www.ascotti.org/
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Convert RGB888 to 2-bit greyscale - logic taken from bmp2rb.c  Namco 3-channel Wave Sound Generator wave data (8 waveforms with 32 4-bit entries each) Putting this in IRAM actually slows down the iPods, but is good for
   the Coldfire
 Color palette  Color palette  Initialize the CPU and the RAM  Initialize the WSG3  Set the sound PROM to the default values for the original Namco chip  Initialize parameters  Reset the machine  Set the DIP switches to a default configuration  Initialize the video character translation tables: video memory has a 
       very peculiar arrangement in Pacman so we precompute a few tables to 
       move around faster 
    Run the machine for one frame.
 Run until the CPU has executed the number of cycles per frame
       (the function returns the number of "extra" cycles spent by the
       last instruction but that is not really important here)  Reset the CPU cycle counter to make sure it doesn't overflow,
       also take into account the extra cycles from the previous run  If interrupts are enabled, force a CPU interrupt with the vector
       set by the program * Returns the status of the coin lockout door. 
    Decode one byte from the encoded color palette.

    An encoded palette byte contains RGB information bit-packed as follows:
        
          bit: 7 6 5 4 3 2 1 0
        color: b b g g g r r r
 Joy1_Up Joy1_Left Joy1_Right Joy1_Down Switch_RackAdvance CoinSlot_1 CoinSlot_2 Switch_AddCredit Joy2_Up Joy2_Left Joy2_Right Joy2_Down Switch_Test Key_OnePlayer Key_TwoPlayers Switch_CocktailMode
    Fire an input event, telling the emulator for example
    that the joystick has been released from the down position.
 Coin slots are locked, ignore command and exit Make the index point to the character offset into the character table  Make the buffer point to the character position Flip character Go to the next line Go to the next line Exit now if sprite not visible at all Clip the sprite coordinates to cut the parts that fall off the screen Prepare variables for drawing Draw the 16x16 sprite Normal Draw the 16x16 sprite Flip Y Flip X Flip X and Y
    Draw the video into the specified buffer.
 Draw the background first... ...then add the sprites Clear the buffer  Exit now if sound is disabled  Let the chip play the sound  Enables/disables the speed hack.  rockbox: not used
int setSpeedHack( int enabled )
{
    int result = 0;

    if( enabled ) {
        if( (ram_[0x180B] == 0xBE) && (ram_[0x1FFD] == 0x00) ) {
            // Patch the ROM to activate the speed hack
            ram_[0x180B] = 0x01; // Activate speed hack
            ram_[0x1FFD] = 0xBD; // Fix ROM checksum

            result = 1;
        }
    }
    else {
        if( (ram_[0x180B] == 0x01) && (ram_[0x1FFD] == 0xBD) ) {
            // Restore the patched ROM locations
            ram_[0x180B] = 0xBE;
            ram_[0x1FFD] = 0x00;

            result = 1;
        }
    }

    return result;
}
