******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ***************************************************************************** TODO This should not be triggered as a numeric; it's a bad ideaThen we have a current and previous reading - publish a derived respiratory rate TODO ditto the bad idea-ness of using Numeric topic for this Theoretical maximum 16 streams, practical limit seems to be 3 Buffering ten points is for testing, size of this buffer might be a function of the sampling rate There are a couple of settings that we map to custom types in the ice package Stack traces here are too noisy on our EvitaXL  Before processing alarms codepage 1, mark current alarms After processing alarms codepage 2, clear unrenewed alarms This happens too routinely to expend the I/O here tried using the desination_order.source_timestamp_tolerance but that was even too tight TODO reconsider how we are deriving a device timestamp log.warn("Not emitting timestamp="+new Date(now)+" where last timestamp was "+new Date(then));Command.ReqAlarmsCP2,Command.ReqMeasuredDataCP2, Command.ReqLowAlarmLimitsCP2, Command.ReqHighAlarmLimitsCP2,  In this implementation we're not changing the requested realtime data; so we expedite here using the same preregistered instance flush NOTE: config.interval is the sampling interval expressed in MICRO-seconds The specification is ambiguous using ms for micro and milli... but in the examples '16000' is stated to mean 16 milliseconds int frequency = (int)(1000000f / realtimeConfig[i].interval / realtimeConfig[i].multiplier); Starts a process by requesting the realtime configuration see receiveRealtimeConfig(...) Should we send a new request?  If no requests have been sent or the previous request was acknowledged If too much time has elapsed since the request was made move on if (now - lastReqDateTime >= 15000L) { log.debug("Slow data too old, requesting DateTime"); lastReqDateTime = now; medibus.sendCommand(Command.ReqDateTime); return; } Data is sparse in standby mode; trying to keep alive TODO need to externalize all these timing settings eventually If it's not a class then maybe it's a static member******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ***************************************************************************** TODO This should not be triggered as a numeric; it's a bad ideaThen we have a current and previous reading - publish a derived respiratory rate TODO ditto the bad idea-ness of using Numeric topic for this Theoretical maximum 16 streams, practical limit seems to be 3 Buffering ten points is for testing, size of this buffer might be a function of the sampling rate There are a couple of settings that we map to custom types in the ice package Stack traces here are too noisy on our EvitaXL  Before processing alarms codepage 1, mark current alarms After processing alarms codepage 2, clear unrenewed alarms This happens too routinely to expend the I/O here tried using the desination_order.source_timestamp_tolerance but that was even too tight TODO reconsider how we are deriving a device timestamp log.warn("Not emitting timestamp="+new Date(now)+" where last timestamp was "+new Date(then));Command.ReqAlarmsCP2,Command.ReqMeasuredDataCP2, Command.ReqLowAlarmLimitsCP2, Command.ReqHighAlarmLimitsCP2,  In this implementation we're not changing the requested realtime data; so we expedite here using the same preregistered instance flush NOTE: config.interval is the sampling interval expressed in MICRO-seconds The specification is ambiguous using ms for micro and milli... but in the examples '16000' is stated to mean 16 milliseconds int frequency = (int)(1000000f / realtimeConfig[i].interval / realtimeConfig[i].multiplier); Starts a process by requesting the realtime configuration see receiveRealtimeConfig(...) Should we send a new request?  If no requests have been sent or the previous request was acknowledged If too much time has elapsed since the request was made move on if (now - lastReqDateTime >= 15000L) { log.debug("Slow data too old, requesting DateTime"); lastReqDateTime = now; medibus.sendCommand(Command.ReqDateTime); return; } Data is sparse in standby mode; trying to keep alive TODO need to externalize all these timing settings eventually If it's not a class then maybe it's a static member******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ***************************************************************************** TODO This should not be triggered as a numeric; it's a bad ideaThen we have a current and previous reading - publish a derived respiratory rate TODO ditto the bad idea-ness of using Numeric topic for this Theoretical maximum 16 streams, practical limit seems to be 3 Buffering ten points is for testing, size of this buffer might be a function of the sampling rate There are a couple of settings that we map to custom types in the ice package Stack traces here are too noisy on our EvitaXL  Before processing alarms codepage 1, mark current alarms After processing alarms codepage 2, clear unrenewed alarms This happens too routinely to expend the I/O here tried using the desination_order.source_timestamp_tolerance but that was even too tight TODO reconsider how we are deriving a device timestamp log.warn("Not emitting timestamp="+new Date(now)+" where last timestamp was "+new Date(then));Command.ReqAlarmsCP2,Command.ReqMeasuredDataCP2, Command.ReqLowAlarmLimitsCP2, Command.ReqHighAlarmLimitsCP2,  In this implementation we're not changing the requested realtime data; so we expedite here using the same preregistered instance flush NOTE: config.interval is the sampling interval expressed in MICRO-seconds The specification is ambiguous using ms for micro and milli... but in the examples '16000' is stated to mean 16 milliseconds int frequency = (int)(1000000f / realtimeConfig[i].interval / realtimeConfig[i].multiplier); Starts a process by requesting the realtime configuration see receiveRealtimeConfig(...) Should we send a new request?  If no requests have been sent or the previous request was acknowledged If too much time has elapsed since the request was made move on if (now - lastReqDateTime >= 15000L) { log.debug("Slow data too old, requesting DateTime"); lastReqDateTime = now; medibus.sendCommand(Command.ReqDateTime); return; } Data is sparse in standby mode; trying to keep alive TODO need to externalize all these timing settings eventually If it's not a class then maybe it's a static member******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ***************************************************************************** TODO This should not be triggered as a numeric; it's a bad ideaThen we have a current and previous reading - publish a derived respiratory rate TODO ditto the bad idea-ness of using Numeric topic for this Theoretical maximum 16 streams, practical limit seems to be 3 Buffering ten points is for testing, size of this buffer might be a function of the sampling rate There are a couple of settings that we map to custom types in the ice package Stack traces here are too noisy on our EvitaXL  Before processing alarms codepage 1, mark current alarms After processing alarms codepage 2, clear unrenewed alarms This happens too routinely to expend the I/O here tried using the desination_order.source_timestamp_tolerance but that was even too tight TODO reconsider how we are deriving a device timestamp log.warn("Not emitting timestamp="+new Date(now)+" where last timestamp was "+new Date(then));Command.ReqAlarmsCP2,Command.ReqMeasuredDataCP2, Command.ReqLowAlarmLimitsCP2, Command.ReqHighAlarmLimitsCP2,  In this implementation we're not changing the requested realtime data; so we expedite here using the same preregistered instance flush NOTE: config.interval is the sampling interval expressed in MICRO-seconds The specification is ambiguous using ms for micro and milli... but in the examples '16000' is stated to mean 16 milliseconds int frequency = (int)(1000000f / realtimeConfig[i].interval / realtimeConfig[i].multiplier); Starts a process by requesting the realtime configuration see receiveRealtimeConfig(...) Should we send a new request?  If no requests have been sent or the previous request was acknowledged If too much time has elapsed since the request was made move on if (now - lastReqDateTime >= 15000L) { log.debug("Slow data too old, requesting DateTime"); lastReqDateTime = now; medibus.sendCommand(Command.ReqDateTime); return; } Data is sparse in standby mode; trying to keep alive TODO need to externalize all these timing settings eventually If it's not a class then maybe it's a static member