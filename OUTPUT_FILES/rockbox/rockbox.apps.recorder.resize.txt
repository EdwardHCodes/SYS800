**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Akio Idehara, Andrew Mahone
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * Implementation of area average and linear row and vertical scalers, and
 * nearest-neighbor grey scaler (C) 2008 Andrew Mahone
 *
 * All files in this archive are subject to the GNU General Public License.
 * See the file COPYING in the source tree root for full license agreement.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** packed  calculate the maximum dimensions which will preserve the aspect ration of
   src while fitting in the constraints passed in dst, and store result in dst,
   returning 0 if rounding and 1 if not rounding.
 This only looks backwards. The input image size is being pre-scaled by
     * the inverse of the pixel aspect ratio, so that once the size it scaled
     * to meet the output constraints, the scaled image will have appropriate
     * proportions.
      All of these scalers use variations of Bresenham's algorithm to convert from
   their input to output coordinates.  The error value is shifted from the
   "classic" version such that it is a useful input to the scaling calculation.
 dither + pack on channel of RGB565, R an B share a packing macro  read new img_part unconditionally, return false on failure  read new img_part if current one is empty, return false on failure  horizontal area average scaler  give other tasks a chance to run  end of current area has been reached  fill buffer if needed  "reset" error, which now represents partial coverage of next
               pixel by the next area
             Coldfire EMAC math  add saved partial pixel from start of area  get new pixel , then add its partial coverage to this area  generic C math  add saved partial pixel from start of area  get new pixel , then add its partial coverage to this area  CPU  store or accumulate to output row  reset accumulator  inside an area  add pixel value to accumulator  "reset" error, which now represents partial coverage of next
               pixel by the next area
             Coldfire EMAC math  add saved partial pixel from start of area  get new pixel , then add its partial coverage to this area  generic C math  add saved partial pixel from start of area  get new pixel , then add its partial coverage to this area  CPU  round, divide, and either store or accumulate to output row  reset accumulator  inside an area  add pixel value to accumulator  vertical area average scaler  Set up rounding and scale factors  zero the accumulator and temp rows  end of current area has been reached  "reset" error, which now represents partial coverage of the next
               row by the next area
             add stored partial row to accumulator  store new scaled row in temp row  add partial coverage by new row to this area, then round and
               scale to final value
             clear accumulator row, store partial coverage for next row  inside an area  accumulate new scaled row to rowacc  horizontal linear scaler  type x = x is an ugly hack for hiding an unitialized data warning. The
       values are conditionally initialized before use, but other values are
       set such that this will occur before these are used.
     The error is set so that values are initialized on the first pass.  give other tasks a chance to run  Store the new "current" pixel value in rgbval, and the color
               step value in rgbinc.
             Coldfire EMAC math  generic C math  CPU  If this wasn't the last pixel, add the next one to rgbinc.  Fetch new pixels if needed  Add a partial step to rgbval, in this pixel isn't precisely
                   aligned with the new source pixel
                 Coldfire EMAC math  generic C math  get final EMAC result out of ACC registers  Now multiply the color increment to its proper value  round and scale values, and accumulate or store to output  Store the new "current" pixel value in rgbval, and the color
               step value in rgbinc.
             Coldfire EMAC math  generic C math  If this wasn't the last pixel, add the next one to rgbinc.  Fetch new pixels if needed  Add a partial step to rgbval, in this pixel isn't precisely
                   aligned with the new source pixel
                 Coldfire EMAC math  generic C math  get final EMAC result out of ACC register  Now multiply the color increment to its proper value  generic C math  round and scale values, and accumulate or store to output  vertical linear scaler  Set up our buffers, to store the increment and current value for each
       column, and one temp buffer used to read in new rows.
     get first scaled row in rowtmp  HAVE_UPSCALER  greyscale iPods  iriver H1x0  iAudio M3  LCD_PIXELFORMAT  iriver h300, colour iPods, X5  setup alpha channel buffer  pack alpha channel for 2 pixels into 1 byte  LCD_DEPTH  buffer for 1 line + 2 spare lines  Restore emac status; other modules like tone control filter
     * calculation may rely on it. **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Akio Idehara, Andrew Mahone
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * Implementation of area average and linear row and vertical scalers, and
 * nearest-neighbor grey scaler (C) 2008 Andrew Mahone
 *
 * All files in this archive are subject to the GNU General Public License.
 * See the file COPYING in the source tree root for full license agreement.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** packed  calculate the maximum dimensions which will preserve the aspect ration of
   src while fitting in the constraints passed in dst, and store result in dst,
   returning 0 if rounding and 1 if not rounding.
 This only looks backwards. The input image size is being pre-scaled by
     * the inverse of the pixel aspect ratio, so that once the size it scaled
     * to meet the output constraints, the scaled image will have appropriate
     * proportions.
      All of these scalers use variations of Bresenham's algorithm to convert from
   their input to output coordinates.  The error value is shifted from the
   "classic" version such that it is a useful input to the scaling calculation.
 dither + pack on channel of RGB565, R an B share a packing macro  read new img_part unconditionally, return false on failure  read new img_part if current one is empty, return false on failure  horizontal area average scaler  give other tasks a chance to run  end of current area has been reached  fill buffer if needed  "reset" error, which now represents partial coverage of next
               pixel by the next area
             Coldfire EMAC math  add saved partial pixel from start of area  get new pixel , then add its partial coverage to this area  generic C math  add saved partial pixel from start of area  get new pixel , then add its partial coverage to this area  CPU  store or accumulate to output row  reset accumulator  inside an area  add pixel value to accumulator  "reset" error, which now represents partial coverage of next
               pixel by the next area
             Coldfire EMAC math  add saved partial pixel from start of area  get new pixel , then add its partial coverage to this area  generic C math  add saved partial pixel from start of area  get new pixel , then add its partial coverage to this area  CPU  round, divide, and either store or accumulate to output row  reset accumulator  inside an area  add pixel value to accumulator  vertical area average scaler  Set up rounding and scale factors  zero the accumulator and temp rows  end of current area has been reached  "reset" error, which now represents partial coverage of the next
               row by the next area
             add stored partial row to accumulator  store new scaled row in temp row  add partial coverage by new row to this area, then round and
               scale to final value
             clear accumulator row, store partial coverage for next row  inside an area  accumulate new scaled row to rowacc  horizontal linear scaler  type x = x is an ugly hack for hiding an unitialized data warning. The
       values are conditionally initialized before use, but other values are
       set such that this will occur before these are used.
     The error is set so that values are initialized on the first pass.  give other tasks a chance to run  Store the new "current" pixel value in rgbval, and the color
               step value in rgbinc.
             Coldfire EMAC math  generic C math  CPU  If this wasn't the last pixel, add the next one to rgbinc.  Fetch new pixels if needed  Add a partial step to rgbval, in this pixel isn't precisely
                   aligned with the new source pixel
                 Coldfire EMAC math  generic C math  get final EMAC result out of ACC registers  Now multiply the color increment to its proper value  round and scale values, and accumulate or store to output  Store the new "current" pixel value in rgbval, and the color
               step value in rgbinc.
             Coldfire EMAC math  generic C math  If this wasn't the last pixel, add the next one to rgbinc.  Fetch new pixels if needed  Add a partial step to rgbval, in this pixel isn't precisely
                   aligned with the new source pixel
                 Coldfire EMAC math  generic C math  get final EMAC result out of ACC register  Now multiply the color increment to its proper value  generic C math  round and scale values, and accumulate or store to output  vertical linear scaler  Set up our buffers, to store the increment and current value for each
       column, and one temp buffer used to read in new rows.
     get first scaled row in rowtmp  HAVE_UPSCALER  greyscale iPods  iriver H1x0  iAudio M3  LCD_PIXELFORMAT  iriver h300, colour iPods, X5  setup alpha channel buffer  pack alpha channel for 2 pixels into 1 byte  LCD_DEPTH  buffer for 1 line + 2 spare lines  Restore emac status; other modules like tone control filter
     * calculation may rely on it. **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Akio Idehara, Andrew Mahone
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * Implementation of area average and linear row and vertical scalers, and
 * nearest-neighbor grey scaler (C) 2008 Andrew Mahone
 *
 * All files in this archive are subject to the GNU General Public License.
 * See the file COPYING in the source tree root for full license agreement.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** packed  calculate the maximum dimensions which will preserve the aspect ration of
   src while fitting in the constraints passed in dst, and store result in dst,
   returning 0 if rounding and 1 if not rounding.
 This only looks backwards. The input image size is being pre-scaled by
     * the inverse of the pixel aspect ratio, so that once the size it scaled
     * to meet the output constraints, the scaled image will have appropriate
     * proportions.
      All of these scalers use variations of Bresenham's algorithm to convert from
   their input to output coordinates.  The error value is shifted from the
   "classic" version such that it is a useful input to the scaling calculation.
 dither + pack on channel of RGB565, R an B share a packing macro  read new img_part unconditionally, return false on failure  read new img_part if current one is empty, return false on failure  horizontal area average scaler  give other tasks a chance to run  end of current area has been reached  fill buffer if needed  "reset" error, which now represents partial coverage of next
               pixel by the next area
             Coldfire EMAC math  add saved partial pixel from start of area  get new pixel , then add its partial coverage to this area  generic C math  add saved partial pixel from start of area  get new pixel , then add its partial coverage to this area  CPU  store or accumulate to output row  reset accumulator  inside an area  add pixel value to accumulator  "reset" error, which now represents partial coverage of next
               pixel by the next area
             Coldfire EMAC math  add saved partial pixel from start of area  get new pixel , then add its partial coverage to this area  generic C math  add saved partial pixel from start of area  get new pixel , then add its partial coverage to this area  CPU  round, divide, and either store or accumulate to output row  reset accumulator  inside an area  add pixel value to accumulator  vertical area average scaler  Set up rounding and scale factors  zero the accumulator and temp rows  end of current area has been reached  "reset" error, which now represents partial coverage of the next
               row by the next area
             add stored partial row to accumulator  store new scaled row in temp row  add partial coverage by new row to this area, then round and
               scale to final value
             clear accumulator row, store partial coverage for next row  inside an area  accumulate new scaled row to rowacc  horizontal linear scaler  type x = x is an ugly hack for hiding an unitialized data warning. The
       values are conditionally initialized before use, but other values are
       set such that this will occur before these are used.
     The error is set so that values are initialized on the first pass.  give other tasks a chance to run  Store the new "current" pixel value in rgbval, and the color
               step value in rgbinc.
             Coldfire EMAC math  generic C math  CPU  If this wasn't the last pixel, add the next one to rgbinc.  Fetch new pixels if needed  Add a partial step to rgbval, in this pixel isn't precisely
                   aligned with the new source pixel
                 Coldfire EMAC math  generic C math  get final EMAC result out of ACC registers  Now multiply the color increment to its proper value  round and scale values, and accumulate or store to output  Store the new "current" pixel value in rgbval, and the color
               step value in rgbinc.
             Coldfire EMAC math  generic C math  If this wasn't the last pixel, add the next one to rgbinc.  Fetch new pixels if needed  Add a partial step to rgbval, in this pixel isn't precisely
                   aligned with the new source pixel
                 Coldfire EMAC math  generic C math  get final EMAC result out of ACC register  Now multiply the color increment to its proper value  generic C math  round and scale values, and accumulate or store to output  vertical linear scaler  Set up our buffers, to store the increment and current value for each
       column, and one temp buffer used to read in new rows.
     get first scaled row in rowtmp  HAVE_UPSCALER  greyscale iPods  iriver H1x0  iAudio M3  LCD_PIXELFORMAT  iriver h300, colour iPods, X5  setup alpha channel buffer  pack alpha channel for 2 pixels into 1 byte  LCD_DEPTH  buffer for 1 line + 2 spare lines  Restore emac status; other modules like tone control filter
     * calculation may rely on it. 