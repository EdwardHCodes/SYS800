//////////////////////////////////////////////////////////////////////////                           **** WAVPACK ****                            //                  Hybrid Lossless Wavefile Compressor                   //              Copyright (c) 1998 - 2005 Conifer Software.               //                          All Rights Reserved.                          //      Distributed under the BSD Software License (see license.txt)      //////////////////////////////////////////////////////////////////////////// pack.c This module actually handles the compression of the audio data, except for the entropy coding which is handled by the words? modules. For efficiency, the conversion is isolated to tight loops that handle an entire buffer. This flag provides faster encoding speed at the expense of more code. The improvement applies to 16-bit stereo lossless only.////////////////////////////// local tables /////////////////////////////// These two tables specify the characteristics of the decorrelation filters. Each term represents one layer of the sequential filter, where positive values indicate the relative sample involved from the same channel (1=prev), 17 & 18 are special functions using the previous 2 samples, and negative values indicate cross channel decorrelation (in stereo only)./////////////////////////// executable code //////////////////////////////// This function initializes everything required to pack WavPack bitstreams and must be called BEFORE any other function in this module. Allocate room for and copy the decorrelation terms from the decorr_passes array into the specified metadata structure. Both the actual term id and the delta are packed into single characters. Allocate room for and copy the decorrelation term weights from the decorr_passes array into the specified metadata structure. The weights range +/-1024, but are rounded and truncated to fit in signed chars for metadata storage. Weights are separate for the two channels Allocate room for and copy the decorrelation samples from the decorr_passes array into the specified metadata structure. The samples are signed 32-bit values, but are converted to signed log2 values for storage in metadata. Values are stored for both channels and are specified from the first term with unspecified samples set to zero. The number of samples stored varies with the actual term value, so those must obviously be specified before these in the metadata list. Any number of terms can have their samples specified from no terms to all the terms, however I have found that sending more than the first term's samples is a waste. The "wcount" variable can be set to the number of terms to have their samples stored. Allocate room for and copy the configuration information into the specified metadata structure. Currently, we just store the upper 3 bytes of config.flags and only in the first block of audio data. Note that this is for informational purposes not required for playback or decoding (like whether high or fast mode was specified). Pack an entire block of samples (either mono or stereo) into a completed WavPack block. It is assumed that there is sufficient space for the completed block at "wps->blockbuff" and that "wps->blockend" points to the end of the available space. A return value of FALSE indicates an error. Any unsent metadata is transmitted first, then required metadata for this block is sent, and finally the compressed integer data is sent. If a "wpx" stream is required for floating point data or large integer data, then this must be handled outside this function. To find out how much data was written the caller must look at the ckSize field of the written WavpackHeader, NOT the one in the WavpackStream.///////////////////// handle lossless mono mode /////////////////////////////////////////// handle the lossless stereo mode ////////////////////////////////////////////////////////////////////////////////////////////////                           **** WAVPACK ****                            //                  Hybrid Lossless Wavefile Compressor                   //              Copyright (c) 1998 - 2005 Conifer Software.               //                          All Rights Reserved.                          //      Distributed under the BSD Software License (see license.txt)      //////////////////////////////////////////////////////////////////////////// pack.c This module actually handles the compression of the audio data, except for the entropy coding which is handled by the words? modules. For efficiency, the conversion is isolated to tight loops that handle an entire buffer. This flag provides faster encoding speed at the expense of more code. The improvement applies to 16-bit stereo lossless only.////////////////////////////// local tables /////////////////////////////// These two tables specify the characteristics of the decorrelation filters. Each term represents one layer of the sequential filter, where positive values indicate the relative sample involved from the same channel (1=prev), 17 & 18 are special functions using the previous 2 samples, and negative values indicate cross channel decorrelation (in stereo only)./////////////////////////// executable code //////////////////////////////// This function initializes everything required to pack WavPack bitstreams and must be called BEFORE any other function in this module. Allocate room for and copy the decorrelation terms from the decorr_passes array into the specified metadata structure. Both the actual term id and the delta are packed into single characters. Allocate room for and copy the decorrelation term weights from the decorr_passes array into the specified metadata structure. The weights range +/-1024, but are rounded and truncated to fit in signed chars for metadata storage. Weights are separate for the two channels Allocate room for and copy the decorrelation samples from the decorr_passes array into the specified metadata structure. The samples are signed 32-bit values, but are converted to signed log2 values for storage in metadata. Values are stored for both channels and are specified from the first term with unspecified samples set to zero. The number of samples stored varies with the actual term value, so those must obviously be specified before these in the metadata list. Any number of terms can have their samples specified from no terms to all the terms, however I have found that sending more than the first term's samples is a waste. The "wcount" variable can be set to the number of terms to have their samples stored. Allocate room for and copy the configuration information into the specified metadata structure. Currently, we just store the upper 3 bytes of config.flags and only in the first block of audio data. Note that this is for informational purposes not required for playback or decoding (like whether high or fast mode was specified). Pack an entire block of samples (either mono or stereo) into a completed WavPack block. It is assumed that there is sufficient space for the completed block at "wps->blockbuff" and that "wps->blockend" points to the end of the available space. A return value of FALSE indicates an error. Any unsent metadata is transmitted first, then required metadata for this block is sent, and finally the compressed integer data is sent. If a "wpx" stream is required for floating point data or large integer data, then this must be handled outside this function. To find out how much data was written the caller must look at the ckSize field of the written WavpackHeader, NOT the one in the WavpackStream.///////////////////// handle lossless mono mode /////////////////////////////////////////// handle the lossless stereo mode ////////////////////////////////////////////////////////////////////////////////////////////////                           **** WAVPACK ****                            //                  Hybrid Lossless Wavefile Compressor                   //              Copyright (c) 1998 - 2005 Conifer Software.               //                          All Rights Reserved.                          //      Distributed under the BSD Software License (see license.txt)      //////////////////////////////////////////////////////////////////////////// pack.c This module actually handles the compression of the audio data, except for the entropy coding which is handled by the words? modules. For efficiency, the conversion is isolated to tight loops that handle an entire buffer. This flag provides faster encoding speed at the expense of more code. The improvement applies to 16-bit stereo lossless only.////////////////////////////// local tables /////////////////////////////// These two tables specify the characteristics of the decorrelation filters. Each term represents one layer of the sequential filter, where positive values indicate the relative sample involved from the same channel (1=prev), 17 & 18 are special functions using the previous 2 samples, and negative values indicate cross channel decorrelation (in stereo only)./////////////////////////// executable code //////////////////////////////// This function initializes everything required to pack WavPack bitstreams and must be called BEFORE any other function in this module. Allocate room for and copy the decorrelation terms from the decorr_passes array into the specified metadata structure. Both the actual term id and the delta are packed into single characters. Allocate room for and copy the decorrelation term weights from the decorr_passes array into the specified metadata structure. The weights range +/-1024, but are rounded and truncated to fit in signed chars for metadata storage. Weights are separate for the two channels Allocate room for and copy the decorrelation samples from the decorr_passes array into the specified metadata structure. The samples are signed 32-bit values, but are converted to signed log2 values for storage in metadata. Values are stored for both channels and are specified from the first term with unspecified samples set to zero. The number of samples stored varies with the actual term value, so those must obviously be specified before these in the metadata list. Any number of terms can have their samples specified from no terms to all the terms, however I have found that sending more than the first term's samples is a waste. The "wcount" variable can be set to the number of terms to have their samples stored. Allocate room for and copy the configuration information into the specified metadata structure. Currently, we just store the upper 3 bytes of config.flags and only in the first block of audio data. Note that this is for informational purposes not required for playback or decoding (like whether high or fast mode was specified). Pack an entire block of samples (either mono or stereo) into a completed WavPack block. It is assumed that there is sufficient space for the completed block at "wps->blockbuff" and that "wps->blockend" points to the end of the available space. A return value of FALSE indicates an error. Any unsent metadata is transmitted first, then required metadata for this block is sent, and finally the compressed integer data is sent. If a "wpx" stream is required for floating point data or large integer data, then this must be handled outside this function. To find out how much data was written the caller must look at the ckSize field of the written WavpackHeader, NOT the one in the WavpackStream.///////////////////// handle lossless mono mode /////////////////////////////////////////// handle the lossless stereo mode //////////////////////