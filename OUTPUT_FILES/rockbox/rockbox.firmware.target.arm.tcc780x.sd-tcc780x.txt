**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Daniel Ankers
 * Copyright (C) 2009 Rob Purchase
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** for compatibility  current active card  max wait time | enable  response type & response required flag  request data transfer  We only support the default card  low active  This is called only if the state was stable for 300ms - check state
     * and post appropriate event.  HAVE_HOTSWAP  Initialise card data as blank  Switch card mux to card to initialize  Check card is inserted  Card will not power up unless this is done  Use slow clock during identification (24MHz / 60 = 400kHz)  4 bit  Card failed to initialize so disable it  lock must already be acquired  This card is already initialized - switch to it  Card needs (re)init  no external sd-card inserted  Use full SD clock for data transfer (PCK_SDMMC)  bypass divider | enable   Block count | FIFO count | Block size (2^9) | 4-bit bus  nReset  multi block, read  Write support is not finished yet  TODO: The standard suggests using ACMD23 prior to writing multiple blocks
   to improve performance  write protect tab set  no external sd-card inserted  Use full SD clock for data transfer (PCK_SDMMC)  bypass divider | enable  Block count | FIFO count | Block size (2^9) | 4-bit bus  nReset  multi block, write  Wait for the FIFO to empty  Enable controller & clock  192/8 = 24MHz  Disable controller & clock  Configure dual-purpose pins for SD usage  SD_D0 & SD_D1  SD_D2/D3/CK/CMD  Configure card detection GPIO as input  Configure card power(?) GPIO as output  Configure interrupts for the card slot  edge-triggered  trigger on both edges  enable the interrupt  Store which logical drive number(s) we have been assigned  CONFIG_STORAGE_MULTI  Force card init for new card, re-init for re-inserted one or
         * clear if the last attempt to init failed with an error.  HAVE_HOTSWAP **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Daniel Ankers
 * Copyright (C) 2009 Rob Purchase
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** for compatibility  current active card  max wait time | enable  response type & response required flag  request data transfer  We only support the default card  low active  This is called only if the state was stable for 300ms - check state
     * and post appropriate event.  HAVE_HOTSWAP  Initialise card data as blank  Switch card mux to card to initialize  Check card is inserted  Card will not power up unless this is done  Use slow clock during identification (24MHz / 60 = 400kHz)  4 bit  Card failed to initialize so disable it  lock must already be acquired  This card is already initialized - switch to it  Card needs (re)init  no external sd-card inserted  Use full SD clock for data transfer (PCK_SDMMC)  bypass divider | enable   Block count | FIFO count | Block size (2^9) | 4-bit bus  nReset  multi block, read  Write support is not finished yet  TODO: The standard suggests using ACMD23 prior to writing multiple blocks
   to improve performance  write protect tab set  no external sd-card inserted  Use full SD clock for data transfer (PCK_SDMMC)  bypass divider | enable  Block count | FIFO count | Block size (2^9) | 4-bit bus  nReset  multi block, write  Wait for the FIFO to empty  Enable controller & clock  192/8 = 24MHz  Disable controller & clock  Configure dual-purpose pins for SD usage  SD_D0 & SD_D1  SD_D2/D3/CK/CMD  Configure card detection GPIO as input  Configure card power(?) GPIO as output  Configure interrupts for the card slot  edge-triggered  trigger on both edges  enable the interrupt  Store which logical drive number(s) we have been assigned  CONFIG_STORAGE_MULTI  Force card init for new card, re-init for re-inserted one or
         * clear if the last attempt to init failed with an error.  HAVE_HOTSWAP **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Daniel Ankers
 * Copyright (C) 2009 Rob Purchase
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** for compatibility  current active card  max wait time | enable  response type & response required flag  request data transfer  We only support the default card  low active  This is called only if the state was stable for 300ms - check state
     * and post appropriate event.  HAVE_HOTSWAP  Initialise card data as blank  Switch card mux to card to initialize  Check card is inserted  Card will not power up unless this is done  Use slow clock during identification (24MHz / 60 = 400kHz)  4 bit  Card failed to initialize so disable it  lock must already be acquired  This card is already initialized - switch to it  Card needs (re)init  no external sd-card inserted  Use full SD clock for data transfer (PCK_SDMMC)  bypass divider | enable   Block count | FIFO count | Block size (2^9) | 4-bit bus  nReset  multi block, read  Write support is not finished yet  TODO: The standard suggests using ACMD23 prior to writing multiple blocks
   to improve performance  write protect tab set  no external sd-card inserted  Use full SD clock for data transfer (PCK_SDMMC)  bypass divider | enable  Block count | FIFO count | Block size (2^9) | 4-bit bus  nReset  multi block, write  Wait for the FIFO to empty  Enable controller & clock  192/8 = 24MHz  Disable controller & clock  Configure dual-purpose pins for SD usage  SD_D0 & SD_D1  SD_D2/D3/CK/CMD  Configure card detection GPIO as input  Configure card power(?) GPIO as output  Configure interrupts for the card slot  edge-triggered  trigger on both edges  enable the interrupt  Store which logical drive number(s) we have been assigned  CONFIG_STORAGE_MULTI  Force card init for new card, re-init for re-inserted one or
         * clear if the last attempt to init failed with an error.  HAVE_HOTSWAP 