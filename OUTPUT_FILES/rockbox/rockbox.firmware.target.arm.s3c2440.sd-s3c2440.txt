**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2009 by Bob Cousins
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define SD_DEBUG The configuration method is not very flexible.  command flags for send_cmd  Initial clock  Clock for SD cards  Clock for MMC cards * static, private data * for compatibility  current active card  align on cache line size  TODO: should be in target include file ****************************************************************************
    Definitions specific to Mini2440
 **************************************************************************** Port G  Port H ****************************************************************************
    Functions specific to S3C2440 SoC
 **************************************************************************** needed to clear int   Ack the interrupt  needed to clear int  *************************************************************************** Specific to Mini2440  Enable pullups on SDCMD and SDDAT pins  Enable special function for SDCMD, SDCLK and SDDAT pins  Card Detect input  enable external irq 8-23 on the internal interrupt controller  enable GPG8 IRQ on the external interrupt controller  Write Protect input ****************************************************************************************************************************************************** About 400KHz for initial comms with card  Byte order=Type A (Little Endian), clock enable  Set timeout count - max value  Enable interupt on Data Finish or data transfer error  Clear pending source  Enable interrupt in controller  A major bodge. For some reason a delay is required here  wait ??  set up new command  Clear command/data status flags  Initiate the command  wait for response or timeout  resp received  store the response in reverse word order  wait for command completion or timeout  Clear Command status flags  timeout for initialization is 1sec, from SD Specification 2.00  timeout  app_cmd  acmd41  send CID  send RCA  send CSD  full speed for controller clock ****************************************************************************
    Generic functions
 **************************************************************************** TODO - use interrupt on change? *************************************************************************** This is called only if the state was stable for 300ms - check state
     * and post appropriate event.  ack irq on external, then internal irq controller  add task to inform the system about the SD insertion
     * sanity check if it's still inserted after 300ms  *************************************************************************** not applicable  HAVE_HOTSWAP *************************************************************************** ticks  128 * 512 = 2^16, and doesn't fit in the 16 bits of DATA_LENGTH
         * register, so we have to transfer maximum 127 sectors at a time.  sectors  Set start_addr to the correct unit (blocks or bytes)  not SDHC  TODO?  needed to clear int   Initiate read/write command  FIXME : we should check if the timeouts calculated from the card's
         * CSD are lower, and use them if it is the case
         * Note : the OF doesn't seem to use them anyway  enable  transfer direction  DMA  2^9 = 512 TIMEOUT_BLOCK wait for DMA to finish  reset errors counter  panicf("SD transfer error : 0x%x", transfer_error[card_no]);  error  assume success *************************************************************************** we don't need write support in bootloader  assume success *************************************************************************** TODO: enable/disable SDI clock  nothing to do  init mutex 
     * prepare detecting of SD insertion (not extraction)  detect falling edge only (0 means SD inserted)  detect both, raising and falling, edges  enable interrupt on pin 8 *************************************************************************** Store which logical drive number(s) we have been assigned  CONFIG_STORAGE_MULTI *************************************************************************** Force card init for new card, re-init for re-inserted one or
         * clear if the last attempt to init failed with an error.  HAVE_HOTSWAP **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2009 by Bob Cousins
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define SD_DEBUG The configuration method is not very flexible.  command flags for send_cmd  Initial clock  Clock for SD cards  Clock for MMC cards * static, private data * for compatibility  current active card  align on cache line size  TODO: should be in target include file ****************************************************************************
    Definitions specific to Mini2440
 **************************************************************************** Port G  Port H ****************************************************************************
    Functions specific to S3C2440 SoC
 **************************************************************************** needed to clear int   Ack the interrupt  needed to clear int  *************************************************************************** Specific to Mini2440  Enable pullups on SDCMD and SDDAT pins  Enable special function for SDCMD, SDCLK and SDDAT pins  Card Detect input  enable external irq 8-23 on the internal interrupt controller  enable GPG8 IRQ on the external interrupt controller  Write Protect input ****************************************************************************************************************************************************** About 400KHz for initial comms with card  Byte order=Type A (Little Endian), clock enable  Set timeout count - max value  Enable interupt on Data Finish or data transfer error  Clear pending source  Enable interrupt in controller  A major bodge. For some reason a delay is required here  wait ??  set up new command  Clear command/data status flags  Initiate the command  wait for response or timeout  resp received  store the response in reverse word order  wait for command completion or timeout  Clear Command status flags  timeout for initialization is 1sec, from SD Specification 2.00  timeout  app_cmd  acmd41  send CID  send RCA  send CSD  full speed for controller clock ****************************************************************************
    Generic functions
 **************************************************************************** TODO - use interrupt on change? *************************************************************************** This is called only if the state was stable for 300ms - check state
     * and post appropriate event.  ack irq on external, then internal irq controller  add task to inform the system about the SD insertion
     * sanity check if it's still inserted after 300ms  *************************************************************************** not applicable  HAVE_HOTSWAP *************************************************************************** ticks  128 * 512 = 2^16, and doesn't fit in the 16 bits of DATA_LENGTH
         * register, so we have to transfer maximum 127 sectors at a time.  sectors  Set start_addr to the correct unit (blocks or bytes)  not SDHC  TODO?  needed to clear int   Initiate read/write command  FIXME : we should check if the timeouts calculated from the card's
         * CSD are lower, and use them if it is the case
         * Note : the OF doesn't seem to use them anyway  enable  transfer direction  DMA  2^9 = 512 TIMEOUT_BLOCK wait for DMA to finish  reset errors counter  panicf("SD transfer error : 0x%x", transfer_error[card_no]);  error  assume success *************************************************************************** we don't need write support in bootloader  assume success *************************************************************************** TODO: enable/disable SDI clock  nothing to do  init mutex 
     * prepare detecting of SD insertion (not extraction)  detect falling edge only (0 means SD inserted)  detect both, raising and falling, edges  enable interrupt on pin 8 *************************************************************************** Store which logical drive number(s) we have been assigned  CONFIG_STORAGE_MULTI *************************************************************************** Force card init for new card, re-init for re-inserted one or
         * clear if the last attempt to init failed with an error.  HAVE_HOTSWAP **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2009 by Bob Cousins
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define SD_DEBUG The configuration method is not very flexible.  command flags for send_cmd  Initial clock  Clock for SD cards  Clock for MMC cards * static, private data * for compatibility  current active card  align on cache line size  TODO: should be in target include file ****************************************************************************
    Definitions specific to Mini2440
 **************************************************************************** Port G  Port H ****************************************************************************
    Functions specific to S3C2440 SoC
 **************************************************************************** needed to clear int   Ack the interrupt  needed to clear int  *************************************************************************** Specific to Mini2440  Enable pullups on SDCMD and SDDAT pins  Enable special function for SDCMD, SDCLK and SDDAT pins  Card Detect input  enable external irq 8-23 on the internal interrupt controller  enable GPG8 IRQ on the external interrupt controller  Write Protect input ****************************************************************************************************************************************************** About 400KHz for initial comms with card  Byte order=Type A (Little Endian), clock enable  Set timeout count - max value  Enable interupt on Data Finish or data transfer error  Clear pending source  Enable interrupt in controller  A major bodge. For some reason a delay is required here  wait ??  set up new command  Clear command/data status flags  Initiate the command  wait for response or timeout  resp received  store the response in reverse word order  wait for command completion or timeout  Clear Command status flags  timeout for initialization is 1sec, from SD Specification 2.00  timeout  app_cmd  acmd41  send CID  send RCA  send CSD  full speed for controller clock ****************************************************************************
    Generic functions
 **************************************************************************** TODO - use interrupt on change? *************************************************************************** This is called only if the state was stable for 300ms - check state
     * and post appropriate event.  ack irq on external, then internal irq controller  add task to inform the system about the SD insertion
     * sanity check if it's still inserted after 300ms  *************************************************************************** not applicable  HAVE_HOTSWAP *************************************************************************** ticks  128 * 512 = 2^16, and doesn't fit in the 16 bits of DATA_LENGTH
         * register, so we have to transfer maximum 127 sectors at a time.  sectors  Set start_addr to the correct unit (blocks or bytes)  not SDHC  TODO?  needed to clear int   Initiate read/write command  FIXME : we should check if the timeouts calculated from the card's
         * CSD are lower, and use them if it is the case
         * Note : the OF doesn't seem to use them anyway  enable  transfer direction  DMA  2^9 = 512 TIMEOUT_BLOCK wait for DMA to finish  reset errors counter  panicf("SD transfer error : 0x%x", transfer_error[card_no]);  error  assume success *************************************************************************** we don't need write support in bootloader  assume success *************************************************************************** TODO: enable/disable SDI clock  nothing to do  init mutex 
     * prepare detecting of SD insertion (not extraction)  detect falling edge only (0 means SD inserted)  detect both, raising and falling, edges  enable interrupt on pin 8 *************************************************************************** Store which logical drive number(s) we have been assigned  CONFIG_STORAGE_MULTI *************************************************************************** Force card init for new card, re-init for re-inserted one or
         * clear if the last attempt to init failed with an error.  HAVE_HOTSWAP 