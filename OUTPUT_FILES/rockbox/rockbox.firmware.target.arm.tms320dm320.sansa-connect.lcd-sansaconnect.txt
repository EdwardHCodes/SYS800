**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id: $
 *
 * Copyright (C) 2011 by Tomasz Moń
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** lcd-memframe.c  disable video encoder  disable video encoder clock  enable video encoder clock  enable video encoder  Disable Video Encoder clock  configure GIO39, GIO34 as outputs  GIO39  GIO34  GIO39 - FIELD_VENC  GIO34 - PWM1 (brightness control)  OSD Clock = VENC Clock /2,
       CCD clock PCLK,
       VENC Clock from PLLA  Set VENC Clock Division to 11
       OF bootloader sets division to 8, vmlinux sets it to 11  Enable OSD clock  magic values based on OF bootloader initialization  Set DAC to powerdown mode (bit 2 to 1 in VMOD)  OF sets 0x2010  OF sets 0x2011  Copy Rockbox frame buffer to the second framebuffer  set framebuffer address - OF sets RAM start address to 0x1000000  OF bootloader sets 480  OF bootloader sets 320  OF bootloader sets 25C3,
                                 vmlinux changes this to 0x25FB  disable video windows (OF sets 0x03)  disable OSD window 1  Enable Video Encoder and OSD clocks  Enable Video Encoder - RGB666, custom timing  Image buffer A is 4KW, every pixel is one Word  lines is maximum number of lines we can transfer in single run  Set source and destination addresses  Flush cache to memory  Addresses are relative to start of SDRAM  Enable Image Buffer clock  Use Image Buffer A for DMA  Setup buffer offsets and transfer width/height  DMA: No byte SWAP, no transformation, data bus shift down 0 bit  Set the start address of buffer  Setup SDRAM stride  Addresses are in 16-bit words  Setup the registers to initiate the read from SDRAM  Set direction and start  Wait for read to finish  Set direction and start transfer  Wait for the transfer to complete  Decrease height, update pointers  Disable Image Buffer clock  Update a fraction of the display.  Nothing left to do  Clip right  Clip left  Clip bottom  Clip top  Update the display.
   This must be called after all other LCD functions that change the display.  TODO: TODO: TODO:**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id: $
 *
 * Copyright (C) 2011 by Tomasz Moń
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** lcd-memframe.c  disable video encoder  disable video encoder clock  enable video encoder clock  enable video encoder  Disable Video Encoder clock  configure GIO39, GIO34 as outputs  GIO39  GIO34  GIO39 - FIELD_VENC  GIO34 - PWM1 (brightness control)  OSD Clock = VENC Clock /2,
       CCD clock PCLK,
       VENC Clock from PLLA  Set VENC Clock Division to 11
       OF bootloader sets division to 8, vmlinux sets it to 11  Enable OSD clock  magic values based on OF bootloader initialization  Set DAC to powerdown mode (bit 2 to 1 in VMOD)  OF sets 0x2010  OF sets 0x2011  Copy Rockbox frame buffer to the second framebuffer  set framebuffer address - OF sets RAM start address to 0x1000000  OF bootloader sets 480  OF bootloader sets 320  OF bootloader sets 25C3,
                                 vmlinux changes this to 0x25FB  disable video windows (OF sets 0x03)  disable OSD window 1  Enable Video Encoder and OSD clocks  Enable Video Encoder - RGB666, custom timing  Image buffer A is 4KW, every pixel is one Word  lines is maximum number of lines we can transfer in single run  Set source and destination addresses  Flush cache to memory  Addresses are relative to start of SDRAM  Enable Image Buffer clock  Use Image Buffer A for DMA  Setup buffer offsets and transfer width/height  DMA: No byte SWAP, no transformation, data bus shift down 0 bit  Set the start address of buffer  Setup SDRAM stride  Addresses are in 16-bit words  Setup the registers to initiate the read from SDRAM  Set direction and start  Wait for read to finish  Set direction and start transfer  Wait for the transfer to complete  Decrease height, update pointers  Disable Image Buffer clock  Update a fraction of the display.  Nothing left to do  Clip right  Clip left  Clip bottom  Clip top  Update the display.
   This must be called after all other LCD functions that change the display.  TODO: TODO: TODO:**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id: $
 *
 * Copyright (C) 2011 by Tomasz Moń
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** lcd-memframe.c  disable video encoder  disable video encoder clock  enable video encoder clock  enable video encoder  Disable Video Encoder clock  configure GIO39, GIO34 as outputs  GIO39  GIO34  GIO39 - FIELD_VENC  GIO34 - PWM1 (brightness control)  OSD Clock = VENC Clock /2,
       CCD clock PCLK,
       VENC Clock from PLLA  Set VENC Clock Division to 11
       OF bootloader sets division to 8, vmlinux sets it to 11  Enable OSD clock  magic values based on OF bootloader initialization  Set DAC to powerdown mode (bit 2 to 1 in VMOD)  OF sets 0x2010  OF sets 0x2011  Copy Rockbox frame buffer to the second framebuffer  set framebuffer address - OF sets RAM start address to 0x1000000  OF bootloader sets 480  OF bootloader sets 320  OF bootloader sets 25C3,
                                 vmlinux changes this to 0x25FB  disable video windows (OF sets 0x03)  disable OSD window 1  Enable Video Encoder and OSD clocks  Enable Video Encoder - RGB666, custom timing  Image buffer A is 4KW, every pixel is one Word  lines is maximum number of lines we can transfer in single run  Set source and destination addresses  Flush cache to memory  Addresses are relative to start of SDRAM  Enable Image Buffer clock  Use Image Buffer A for DMA  Setup buffer offsets and transfer width/height  DMA: No byte SWAP, no transformation, data bus shift down 0 bit  Set the start address of buffer  Setup SDRAM stride  Addresses are in 16-bit words  Setup the registers to initiate the read from SDRAM  Set direction and start  Wait for read to finish  Set direction and start transfer  Wait for the transfer to complete  Decrease height, update pointers  Disable Image Buffer clock  Update a fraction of the display.  Nothing left to do  Clip right  Clip left  Clip bottom  Clip top  Update the display.
   This must be called after all other LCD functions that change the display.  TODO: TODO: TODO: