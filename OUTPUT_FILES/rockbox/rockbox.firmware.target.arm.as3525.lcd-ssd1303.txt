**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Alan Korr
 * Copyright (C) 2008 François Dinel
 * Copyright (C) 2008-2009 Rafaël Carré
 * Copyright (C) 2017 William Wilgus
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************** definitions ** LCD command codes  Contrast  Output scan direction  Segment remap  Display on  Page address  Upper column address  Lower column address * globals * used by lcd_enable  Display variant, always 0 in clipv1, clipv2, can be 0 or 1 in clip+
 * variant 0: has 132 pixel wide framebuffer, max brightness about 50
 * variant 1: has 128 pixel wide framebuffer, max brightness about 128
  column offset ** hardware configuration ** turn the display upside down (call lcd_update() afterwards)  simple '=' is not a typo !  LCD init, largely based on what OF does  power on display to accept commands  Set display clock  Set display clock (divide ratio = 1) and oscillator frequency (1)  Set VCOM deselect level  Set VCOM deselect level to 0.76V  Set pre-charge period  Set pre-charge period (p1period is 2 dclk and p2period is 5 dclk)  Set contrast register to 12%  Configure DC-DC  Configure DC-DC  Set starting line as 0 |(0 & 0x3f) Column 131 is remapped to SEG0  Invert COM scan direction (N-1 to 0)  Set normal display mode (not every pixel ON)  Set normal display mode (not inverted)  set upper 4 bits of 8-bit column address | 0 set lower 4 bits of 8-bit column address | 0 fills with 0 : pixel off & 0xf** Update functions ** returns LCD_CNTL_HIGHCOL or'd with higher 4 bits of
   the 8-bit column address for the display data RAM.
 returns LCD_CNTL_LOWCOL or'd with lower 4 bits of
   the 8-bit column address for the display data RAM.
 Performance function that works with an external buffer
   note that by and bheight are in 8-pixel units!  Copy display bitmap to hardware  Helper function for lcd_grey_phase_blit().  Performance function that works with an external buffer
   note that by and bheight are in 8-pixel units!  8 pixels per block  Copy display bitmap to hardware  Shared internal function for lcd_update and lcd_update_rect
   WARNING does NOT check bounds
 Copy specified rectange bitmap to hardware  return to command mode  Update the display.
   This must be called after all other LCD functions that change the display.  Copy display bitmap to hardware  Update a fraction of the display.  make sure the rectangle is bounded in the screen  Clip right  Clip left  nothing left to do, 0 is harmful to lcd_write_data()  Clip bottom  Clip top  nothing left to do  The Y coordinates have to work on even 8 pixel rows  Copy specified rectange bitmap to hardware **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Alan Korr
 * Copyright (C) 2008 François Dinel
 * Copyright (C) 2008-2009 Rafaël Carré
 * Copyright (C) 2017 William Wilgus
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************** definitions ** LCD command codes  Contrast  Output scan direction  Segment remap  Display on  Page address  Upper column address  Lower column address * globals * used by lcd_enable  Display variant, always 0 in clipv1, clipv2, can be 0 or 1 in clip+
 * variant 0: has 132 pixel wide framebuffer, max brightness about 50
 * variant 1: has 128 pixel wide framebuffer, max brightness about 128
  column offset ** hardware configuration ** turn the display upside down (call lcd_update() afterwards)  simple '=' is not a typo !  LCD init, largely based on what OF does  power on display to accept commands  Set display clock  Set display clock (divide ratio = 1) and oscillator frequency (1)  Set VCOM deselect level  Set VCOM deselect level to 0.76V  Set pre-charge period  Set pre-charge period (p1period is 2 dclk and p2period is 5 dclk)  Set contrast register to 12%  Configure DC-DC  Configure DC-DC  Set starting line as 0 |(0 & 0x3f) Column 131 is remapped to SEG0  Invert COM scan direction (N-1 to 0)  Set normal display mode (not every pixel ON)  Set normal display mode (not inverted)  set upper 4 bits of 8-bit column address | 0 set lower 4 bits of 8-bit column address | 0 fills with 0 : pixel off & 0xf** Update functions ** returns LCD_CNTL_HIGHCOL or'd with higher 4 bits of
   the 8-bit column address for the display data RAM.
 returns LCD_CNTL_LOWCOL or'd with lower 4 bits of
   the 8-bit column address for the display data RAM.
 Performance function that works with an external buffer
   note that by and bheight are in 8-pixel units!  Copy display bitmap to hardware  Helper function for lcd_grey_phase_blit().  Performance function that works with an external buffer
   note that by and bheight are in 8-pixel units!  8 pixels per block  Copy display bitmap to hardware  Shared internal function for lcd_update and lcd_update_rect
   WARNING does NOT check bounds
 Copy specified rectange bitmap to hardware  return to command mode  Update the display.
   This must be called after all other LCD functions that change the display.  Copy display bitmap to hardware  Update a fraction of the display.  make sure the rectangle is bounded in the screen  Clip right  Clip left  nothing left to do, 0 is harmful to lcd_write_data()  Clip bottom  Clip top  nothing left to do  The Y coordinates have to work on even 8 pixel rows  Copy specified rectange bitmap to hardware **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Alan Korr
 * Copyright (C) 2008 François Dinel
 * Copyright (C) 2008-2009 Rafaël Carré
 * Copyright (C) 2017 William Wilgus
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************** definitions ** LCD command codes  Contrast  Output scan direction  Segment remap  Display on  Page address  Upper column address  Lower column address * globals * used by lcd_enable  Display variant, always 0 in clipv1, clipv2, can be 0 or 1 in clip+
 * variant 0: has 132 pixel wide framebuffer, max brightness about 50
 * variant 1: has 128 pixel wide framebuffer, max brightness about 128
  column offset ** hardware configuration ** turn the display upside down (call lcd_update() afterwards)  simple '=' is not a typo !  LCD init, largely based on what OF does  power on display to accept commands  Set display clock  Set display clock (divide ratio = 1) and oscillator frequency (1)  Set VCOM deselect level  Set VCOM deselect level to 0.76V  Set pre-charge period  Set pre-charge period (p1period is 2 dclk and p2period is 5 dclk)  Set contrast register to 12%  Configure DC-DC  Configure DC-DC  Set starting line as 0 |(0 & 0x3f) Column 131 is remapped to SEG0  Invert COM scan direction (N-1 to 0)  Set normal display mode (not every pixel ON)  Set normal display mode (not inverted)  set upper 4 bits of 8-bit column address | 0 set lower 4 bits of 8-bit column address | 0 fills with 0 : pixel off & 0xf** Update functions ** returns LCD_CNTL_HIGHCOL or'd with higher 4 bits of
   the 8-bit column address for the display data RAM.
 returns LCD_CNTL_LOWCOL or'd with lower 4 bits of
   the 8-bit column address for the display data RAM.
 Performance function that works with an external buffer
   note that by and bheight are in 8-pixel units!  Copy display bitmap to hardware  Helper function for lcd_grey_phase_blit().  Performance function that works with an external buffer
   note that by and bheight are in 8-pixel units!  8 pixels per block  Copy display bitmap to hardware  Shared internal function for lcd_update and lcd_update_rect
   WARNING does NOT check bounds
 Copy specified rectange bitmap to hardware  return to command mode  Update the display.
   This must be called after all other LCD functions that change the display.  Copy display bitmap to hardware  Update a fraction of the display.  make sure the rectangle is bounded in the screen  Clip right  Clip left  nothing left to do, 0 is harmful to lcd_write_data()  Clip bottom  Clip top  nothing left to do  The Y coordinates have to work on even 8 pixel rows  Copy specified rectange bitmap to hardware 