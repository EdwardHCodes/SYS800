**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2012 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** compute image size (without userdata)  now take crypto marks and sector size into account: there is one crypto mark per sector, ie 4 bytes for 508 = 512 (sector) allocate buffer and fill it (ignoring crypto for now)  handle most common cases  move everything to prepare crypto marks (start at the end !)  Quick and dirty way to check a key is valid.
 * We don't do any form of format checking because we are trying to bruteforce
 * the key anyway. Assume buffer is of size SECTOR_SIZE  copy key and data because it's modified by the crypto code  try to decrypt the first sector  copy key again it's modified by the crypto code  copy rom version, padding and drive tag  copy versions  reduce size w.r.t to userdata part  find key  copy key and data because it's modified by the crypto code  try to decrypt the first sector  copy key again it's modified by the crypto code  found !  decrypt image in-place (and removing crypto markers)  reduce image size given the removed marks  copy command  last instruction ?  copy userdata  decrypt the xor key which is xor'ed **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2012 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** compute image size (without userdata)  now take crypto marks and sector size into account: there is one crypto mark per sector, ie 4 bytes for 508 = 512 (sector) allocate buffer and fill it (ignoring crypto for now)  handle most common cases  move everything to prepare crypto marks (start at the end !)  Quick and dirty way to check a key is valid.
 * We don't do any form of format checking because we are trying to bruteforce
 * the key anyway. Assume buffer is of size SECTOR_SIZE  copy key and data because it's modified by the crypto code  try to decrypt the first sector  copy key again it's modified by the crypto code  copy rom version, padding and drive tag  copy versions  reduce size w.r.t to userdata part  find key  copy key and data because it's modified by the crypto code  try to decrypt the first sector  copy key again it's modified by the crypto code  found !  decrypt image in-place (and removing crypto markers)  reduce image size given the removed marks  copy command  last instruction ?  copy userdata  decrypt the xor key which is xor'ed **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2012 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** compute image size (without userdata)  now take crypto marks and sector size into account: there is one crypto mark per sector, ie 4 bytes for 508 = 512 (sector) allocate buffer and fill it (ignoring crypto for now)  handle most common cases  move everything to prepare crypto marks (start at the end !)  Quick and dirty way to check a key is valid.
 * We don't do any form of format checking because we are trying to bruteforce
 * the key anyway. Assume buffer is of size SECTOR_SIZE  copy key and data because it's modified by the crypto code  try to decrypt the first sector  copy key again it's modified by the crypto code  copy rom version, padding and drive tag  copy versions  reduce size w.r.t to userdata part  find key  copy key and data because it's modified by the crypto code  try to decrypt the first sector  copy key again it's modified by the crypto code  found !  decrypt image in-place (and removing crypto markers)  reduce image size given the removed marks  copy command  last instruction ?  copy userdata  decrypt the xor key which is xor'ed 