	MikMod sound library
	(c) 1998, 1999, 2000, 2001, 2002 Miodrag Vallat and others - see file
	AUTHORS for complete list.

	This library is free software; you can redistribute it and/or modify
	it under the terms of the GNU Library General Public License as
	published by the Free Software Foundation; either version 2 of
	the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Library General Public License for more details.

	You should have received a copy of the GNU Library General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
	02111-1307, USA.
==============================================================================

  $Id$

  Fasttracker (XM) module loader

======================================================================================== Module structure  ID text: 'Extended module: '  Module name  Tracker name  Version number  Header size  Song length (in patten order table)  Restart position  Number of channels (2,4,6,8,10,...,32)  Number of patterns (max 256)  Number of instruments (max 128)  Default tempo  Default BPM  Pattern order table   Instrument size  Instrument name  Instrument type (always 0)  Number of samples in instrument   Sample number for all notes   Points for volume envelope   Points for panning envelope   Number of volume points   Number of panning points   Volume sustain point   Volume loop start point   Volume loop end point   Panning sustain point   Panning loop start point   Panning loop end point   Volume type: bit 0: On; 1: Sustain; 2: Loop   Panning type: bit 0: On; 1: Sustain; 2: Loop   Vibrato type   Vibrato sweep   Vibrato depth   Vibrato rate   Volume fadeout  Sample length  Sample loop start  Sample loop length  Volume   Finetune (signed byte -128..+127)  Loop type  Panning (0-255)  Relative note number (signed byte)  Sample name  Vibrato type  Vibrato sweep  Vibrato depth  Vibrato rate  Pattern header length   Packing type (always 0)  Number of rows in pattern (1..256)  Packed patterndata size ========== Loader variables  increment unit for sample array reallocation ========== Loader code  volslide down  volslide up  volume-row fine volume slide is compatible with protracker
				   EBx and EAx effects i.e. a zero nibble means DO NOT SLIDE, as
				   opposed to 'take the last sliding value'.  finevol down  finevol up  set vibrato speed  vibrato  set panning  panning slide left (only slide when data not zero)  panning slide right (only slide when data not zero)  tone porta  Extended effects  XM fine porta up  XM fine porta down  XM fine volume up  XM fine volume down  G - set global volume  H - global volume slide  K - keyOff and KeyFade  L - set envelope position  P - panning slide  R - multi retrig note  T - Tremor  X1 - Extra Fine Porta up  X2 - Extra Fine Porta down  the pattern jump destination is written in decimal,
					   but it seems some poor tracker software writes them
					   in hexadecimal... (sigh)  don't change anything if we're sure it's in hexa  otherwise, convert from dec to hex  when packsize is 0, don't try to load a pattern.. it's empty.  Some broken XM editing program will only save the low byte
		   of the position value. Try to compensate by adding the
		   missing high byte.  same hex century  different brokenness style... fix unknown  read instrument header  read the remainder of the header
				   (2 bytes for 1.03, 22 for 1.04)  we can't trust the envelope point count here, as some
				   modules have incorrect values (K_OSPACE.XM reports 32 volume
				   points, for example).  scale envelope  scale envelope  Samples are stored outside the instrument struct now, so we
				   have to load them all into a temp area, count the of.numsmp
				   along the way and then do an AllocSamples() and move
				   everything over  XM sample header is 40 bytes: make sure we won't hit EOF  Note: last instrument is at the end of file in version 0x0104  Allocate more room for sample information if necessary  read the remainder of the header  last instrument is at the end of file in version 0x0104  sanity check  try to read module header 	_mm_read_UBYTES(mh->orders,256,modreader);	_mm_read_UBYTES(mh->orders,mh->headersize-20,modreader); set module variables  some modules have the tracker name empty  get number of channels  copy the songlength  store channel volumes  We have to check for any pattern numbers in the order list greater than
	   the number of patterns total. If one or more is found, we set it equal to
	   the pattern total and make a dummy pattern to workaround the problem ========== Loader information  ex:set ts=4: 	MikMod sound library
	(c) 1998, 1999, 2000, 2001, 2002 Miodrag Vallat and others - see file
	AUTHORS for complete list.

	This library is free software; you can redistribute it and/or modify
	it under the terms of the GNU Library General Public License as
	published by the Free Software Foundation; either version 2 of
	the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Library General Public License for more details.

	You should have received a copy of the GNU Library General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
	02111-1307, USA.
==============================================================================

  $Id$

  Fasttracker (XM) module loader

======================================================================================== Module structure  ID text: 'Extended module: '  Module name  Tracker name  Version number  Header size  Song length (in patten order table)  Restart position  Number of channels (2,4,6,8,10,...,32)  Number of patterns (max 256)  Number of instruments (max 128)  Default tempo  Default BPM  Pattern order table   Instrument size  Instrument name  Instrument type (always 0)  Number of samples in instrument   Sample number for all notes   Points for volume envelope   Points for panning envelope   Number of volume points   Number of panning points   Volume sustain point   Volume loop start point   Volume loop end point   Panning sustain point   Panning loop start point   Panning loop end point   Volume type: bit 0: On; 1: Sustain; 2: Loop   Panning type: bit 0: On; 1: Sustain; 2: Loop   Vibrato type   Vibrato sweep   Vibrato depth   Vibrato rate   Volume fadeout  Sample length  Sample loop start  Sample loop length  Volume   Finetune (signed byte -128..+127)  Loop type  Panning (0-255)  Relative note number (signed byte)  Sample name  Vibrato type  Vibrato sweep  Vibrato depth  Vibrato rate  Pattern header length   Packing type (always 0)  Number of rows in pattern (1..256)  Packed patterndata size ========== Loader variables  increment unit for sample array reallocation ========== Loader code  volslide down  volslide up  volume-row fine volume slide is compatible with protracker
				   EBx and EAx effects i.e. a zero nibble means DO NOT SLIDE, as
				   opposed to 'take the last sliding value'.  finevol down  finevol up  set vibrato speed  vibrato  set panning  panning slide left (only slide when data not zero)  panning slide right (only slide when data not zero)  tone porta  Extended effects  XM fine porta up  XM fine porta down  XM fine volume up  XM fine volume down  G - set global volume  H - global volume slide  K - keyOff and KeyFade  L - set envelope position  P - panning slide  R - multi retrig note  T - Tremor  X1 - Extra Fine Porta up  X2 - Extra Fine Porta down  the pattern jump destination is written in decimal,
					   but it seems some poor tracker software writes them
					   in hexadecimal... (sigh)  don't change anything if we're sure it's in hexa  otherwise, convert from dec to hex  when packsize is 0, don't try to load a pattern.. it's empty.  Some broken XM editing program will only save the low byte
		   of the position value. Try to compensate by adding the
		   missing high byte.  same hex century  different brokenness style... fix unknown  read instrument header  read the remainder of the header
				   (2 bytes for 1.03, 22 for 1.04)  we can't trust the envelope point count here, as some
				   modules have incorrect values (K_OSPACE.XM reports 32 volume
				   points, for example).  scale envelope  scale envelope  Samples are stored outside the instrument struct now, so we
				   have to load them all into a temp area, count the of.numsmp
				   along the way and then do an AllocSamples() and move
				   everything over  XM sample header is 40 bytes: make sure we won't hit EOF  Note: last instrument is at the end of file in version 0x0104  Allocate more room for sample information if necessary  read the remainder of the header  last instrument is at the end of file in version 0x0104  sanity check  try to read module header 	_mm_read_UBYTES(mh->orders,256,modreader);	_mm_read_UBYTES(mh->orders,mh->headersize-20,modreader); set module variables  some modules have the tracker name empty  get number of channels  copy the songlength  store channel volumes  We have to check for any pattern numbers in the order list greater than
	   the number of patterns total. If one or more is found, we set it equal to
	   the pattern total and make a dummy pattern to workaround the problem ========== Loader information  ex:set ts=4: 	MikMod sound library
	(c) 1998, 1999, 2000, 2001, 2002 Miodrag Vallat and others - see file
	AUTHORS for complete list.

	This library is free software; you can redistribute it and/or modify
	it under the terms of the GNU Library General Public License as
	published by the Free Software Foundation; either version 2 of
	the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Library General Public License for more details.

	You should have received a copy of the GNU Library General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
	02111-1307, USA.
==============================================================================

  $Id$

  Fasttracker (XM) module loader

======================================================================================== Module structure  ID text: 'Extended module: '  Module name  Tracker name  Version number  Header size  Song length (in patten order table)  Restart position  Number of channels (2,4,6,8,10,...,32)  Number of patterns (max 256)  Number of instruments (max 128)  Default tempo  Default BPM  Pattern order table   Instrument size  Instrument name  Instrument type (always 0)  Number of samples in instrument   Sample number for all notes   Points for volume envelope   Points for panning envelope   Number of volume points   Number of panning points   Volume sustain point   Volume loop start point   Volume loop end point   Panning sustain point   Panning loop start point   Panning loop end point   Volume type: bit 0: On; 1: Sustain; 2: Loop   Panning type: bit 0: On; 1: Sustain; 2: Loop   Vibrato type   Vibrato sweep   Vibrato depth   Vibrato rate   Volume fadeout  Sample length  Sample loop start  Sample loop length  Volume   Finetune (signed byte -128..+127)  Loop type  Panning (0-255)  Relative note number (signed byte)  Sample name  Vibrato type  Vibrato sweep  Vibrato depth  Vibrato rate  Pattern header length   Packing type (always 0)  Number of rows in pattern (1..256)  Packed patterndata size ========== Loader variables  increment unit for sample array reallocation ========== Loader code  volslide down  volslide up  volume-row fine volume slide is compatible with protracker
				   EBx and EAx effects i.e. a zero nibble means DO NOT SLIDE, as
				   opposed to 'take the last sliding value'.  finevol down  finevol up  set vibrato speed  vibrato  set panning  panning slide left (only slide when data not zero)  panning slide right (only slide when data not zero)  tone porta  Extended effects  XM fine porta up  XM fine porta down  XM fine volume up  XM fine volume down  G - set global volume  H - global volume slide  K - keyOff and KeyFade  L - set envelope position  P - panning slide  R - multi retrig note  T - Tremor  X1 - Extra Fine Porta up  X2 - Extra Fine Porta down  the pattern jump destination is written in decimal,
					   but it seems some poor tracker software writes them
					   in hexadecimal... (sigh)  don't change anything if we're sure it's in hexa  otherwise, convert from dec to hex  when packsize is 0, don't try to load a pattern.. it's empty.  Some broken XM editing program will only save the low byte
		   of the position value. Try to compensate by adding the
		   missing high byte.  same hex century  different brokenness style... fix unknown  read instrument header  read the remainder of the header
				   (2 bytes for 1.03, 22 for 1.04)  we can't trust the envelope point count here, as some
				   modules have incorrect values (K_OSPACE.XM reports 32 volume
				   points, for example).  scale envelope  scale envelope  Samples are stored outside the instrument struct now, so we
				   have to load them all into a temp area, count the of.numsmp
				   along the way and then do an AllocSamples() and move
				   everything over  XM sample header is 40 bytes: make sure we won't hit EOF  Note: last instrument is at the end of file in version 0x0104  Allocate more room for sample information if necessary  read the remainder of the header  last instrument is at the end of file in version 0x0104  sanity check  try to read module header 	_mm_read_UBYTES(mh->orders,256,modreader);	_mm_read_UBYTES(mh->orders,mh->headersize-20,modreader); set module variables  some modules have the tracker name empty  get number of channels  copy the songlength  store channel volumes  We have to check for any pattern numbers in the order list greater than
	   the number of patterns total. If one or more is found, we set it equal to
	   the pattern total and make a dummy pattern to workaround the problem ========== Loader information  ex:set ts=4: 