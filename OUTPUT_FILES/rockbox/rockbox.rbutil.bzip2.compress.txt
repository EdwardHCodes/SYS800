---------------------------------------------------------------- Compression machinery (not incl block sorting)        ------                                            compress.c ---------------------------------------------------------------- ------------------------------------------------------------------
   This file is part of bzip2/libbzip2, a program and library for
   lossless, block-sorting data compression.

   bzip2/libbzip2 version 1.0.6 of 6 September 2010
   Copyright (C) 1996-2010 Julian Seward <jseward@bzip.org>

   Please read the WARNING, DISCLAIMER and PATENTS sections in the 
   README file.

   This program is released under the terms of the license contained
   in the file LICENSE.
   ------------------------------------------------------------------  CHANGES
    0.9.0    -- original version.
    0.9.0a/b -- no changes in this file.
    0.9.0c   -- changed setting of nGroups in sendMTFValues() 
                so as to do a bit better on small files
------------------------------------------------------ Bit stream I/O                              ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ The back end proper                         ------------------------------------------------------------------------------------------------------------------------------------------------------------ 
      After sorting (eg, here),
         s->arr1 [ 0 .. s->nblock-1 ] holds sorted order,
         and
         ((UChar*)s->arr2) [ 0 .. s->nblock-1 ] 
         holds the original block data.

      The first thing to do is generate the MTF values,
      and put them in
         ((UInt16*)s->arr1) [ 0 .. s->nblock-1 ].
      Because there are strictly fewer or equal MTF values
      than block values, ptr values in this area are overwritten
      with MTF values only when they are no longer needed.

      The final compressed bitstream is generated into the
      area starting at
         (UChar*) (&((UChar*)s->arr2)[s->nblock])

      These storage aliases are set up in bzCompressInit(),
      except for the last one, which is arranged in 
      compressBlock().
   -----------------------------------------------------
   UChar  len [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
   is a global since the decoder also needs it.

   Int32  code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
   Int32  rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
   are also globals only used in this proc.
   Made global to keep stack frame size small.
   ----- Decide how many coding tables to use ------ Generate an initial set of coding tables ------ 
      Iterate up to BZ_N_ITERS times to improve the tables.
   ------
        Set up an auxiliary length table which is used to fast-track
	the common case (nGroups == 6). 
      ------ Set group start & end marks. ---- 
            Calculate the cost of this group as coded
            by each of the coding tables.
         ----- fast track the common case ------ slow version which correctly handles all situations ----- 
            Find the coding table which is best for this group,
            and record its identity in the selector table.
         ---- 
            Increment the symbol frequencies for the selected table.
          ----- fast track the common case ------ slow version which correctly handles all situations -----
        Recompute the tables based on the accumulated frequencies.
      -- maxLen was changed from 20 to 17 in bzip2-1.0.3.  See 
         comment in huffman.c for details. 20--- Compute MTF values for the selectors. ------ Assign actual codes for the tables. --20--- Transmit the mapping table. ------ Now the selectors. ------ Now the coding tables. --- 10  11 --- And finally, the block data proper ------ fast track the common case ------ slow version which correctly handles all situations -------------------------------------------------------- If this is the first block, create the stream header. ---- Now the block's CRC, so it is in a known place. ---- 
         Now a single bit indicating (non-)randomisation. 
         As of version 0.9.5, we use a better sorting algorithm
         which makes randomisation unnecessary.  So always set
         the randomised bit to 'no'.  Of course, the decoder
         still needs to be able to handle randomised blocks
         so as to maintain backwards compatibility with
         older versions of bzip2.
      ---- If this is the last block, add the stream trailer. ------------------------------------------------------------------ end                                        compress.c -------------------------------------------------------------------------------------------------------------------------------- Compression machinery (not incl block sorting)        ------                                            compress.c ---------------------------------------------------------------- ------------------------------------------------------------------
   This file is part of bzip2/libbzip2, a program and library for
   lossless, block-sorting data compression.

   bzip2/libbzip2 version 1.0.6 of 6 September 2010
   Copyright (C) 1996-2010 Julian Seward <jseward@bzip.org>

   Please read the WARNING, DISCLAIMER and PATENTS sections in the 
   README file.

   This program is released under the terms of the license contained
   in the file LICENSE.
   ------------------------------------------------------------------  CHANGES
    0.9.0    -- original version.
    0.9.0a/b -- no changes in this file.
    0.9.0c   -- changed setting of nGroups in sendMTFValues() 
                so as to do a bit better on small files
------------------------------------------------------ Bit stream I/O                              ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ The back end proper                         ------------------------------------------------------------------------------------------------------------------------------------------------------------ 
      After sorting (eg, here),
         s->arr1 [ 0 .. s->nblock-1 ] holds sorted order,
         and
         ((UChar*)s->arr2) [ 0 .. s->nblock-1 ] 
         holds the original block data.

      The first thing to do is generate the MTF values,
      and put them in
         ((UInt16*)s->arr1) [ 0 .. s->nblock-1 ].
      Because there are strictly fewer or equal MTF values
      than block values, ptr values in this area are overwritten
      with MTF values only when they are no longer needed.

      The final compressed bitstream is generated into the
      area starting at
         (UChar*) (&((UChar*)s->arr2)[s->nblock])

      These storage aliases are set up in bzCompressInit(),
      except for the last one, which is arranged in 
      compressBlock().
   -----------------------------------------------------
   UChar  len [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
   is a global since the decoder also needs it.

   Int32  code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
   Int32  rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
   are also globals only used in this proc.
   Made global to keep stack frame size small.
   ----- Decide how many coding tables to use ------ Generate an initial set of coding tables ------ 
      Iterate up to BZ_N_ITERS times to improve the tables.
   ------
        Set up an auxiliary length table which is used to fast-track
	the common case (nGroups == 6). 
      ------ Set group start & end marks. ---- 
            Calculate the cost of this group as coded
            by each of the coding tables.
         ----- fast track the common case ------ slow version which correctly handles all situations ----- 
            Find the coding table which is best for this group,
            and record its identity in the selector table.
         ---- 
            Increment the symbol frequencies for the selected table.
          ----- fast track the common case ------ slow version which correctly handles all situations -----
        Recompute the tables based on the accumulated frequencies.
      -- maxLen was changed from 20 to 17 in bzip2-1.0.3.  See 
         comment in huffman.c for details. 20--- Compute MTF values for the selectors. ------ Assign actual codes for the tables. --20--- Transmit the mapping table. ------ Now the selectors. ------ Now the coding tables. --- 10  11 --- And finally, the block data proper ------ fast track the common case ------ slow version which correctly handles all situations -------------------------------------------------------- If this is the first block, create the stream header. ---- Now the block's CRC, so it is in a known place. ---- 
         Now a single bit indicating (non-)randomisation. 
         As of version 0.9.5, we use a better sorting algorithm
         which makes randomisation unnecessary.  So always set
         the randomised bit to 'no'.  Of course, the decoder
         still needs to be able to handle randomised blocks
         so as to maintain backwards compatibility with
         older versions of bzip2.
      ---- If this is the last block, add the stream trailer. ------------------------------------------------------------------ end                                        compress.c -------------------------------------------------------------------------------------------------------------------------------- Compression machinery (not incl block sorting)        ------                                            compress.c ---------------------------------------------------------------- ------------------------------------------------------------------
   This file is part of bzip2/libbzip2, a program and library for
   lossless, block-sorting data compression.

   bzip2/libbzip2 version 1.0.6 of 6 September 2010
   Copyright (C) 1996-2010 Julian Seward <jseward@bzip.org>

   Please read the WARNING, DISCLAIMER and PATENTS sections in the 
   README file.

   This program is released under the terms of the license contained
   in the file LICENSE.
   ------------------------------------------------------------------  CHANGES
    0.9.0    -- original version.
    0.9.0a/b -- no changes in this file.
    0.9.0c   -- changed setting of nGroups in sendMTFValues() 
                so as to do a bit better on small files
------------------------------------------------------ Bit stream I/O                              ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ The back end proper                         ------------------------------------------------------------------------------------------------------------------------------------------------------------ 
      After sorting (eg, here),
         s->arr1 [ 0 .. s->nblock-1 ] holds sorted order,
         and
         ((UChar*)s->arr2) [ 0 .. s->nblock-1 ] 
         holds the original block data.

      The first thing to do is generate the MTF values,
      and put them in
         ((UInt16*)s->arr1) [ 0 .. s->nblock-1 ].
      Because there are strictly fewer or equal MTF values
      than block values, ptr values in this area are overwritten
      with MTF values only when they are no longer needed.

      The final compressed bitstream is generated into the
      area starting at
         (UChar*) (&((UChar*)s->arr2)[s->nblock])

      These storage aliases are set up in bzCompressInit(),
      except for the last one, which is arranged in 
      compressBlock().
   -----------------------------------------------------
   UChar  len [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
   is a global since the decoder also needs it.

   Int32  code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
   Int32  rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
   are also globals only used in this proc.
   Made global to keep stack frame size small.
   ----- Decide how many coding tables to use ------ Generate an initial set of coding tables ------ 
      Iterate up to BZ_N_ITERS times to improve the tables.
   ------
        Set up an auxiliary length table which is used to fast-track
	the common case (nGroups == 6). 
      ------ Set group start & end marks. ---- 
            Calculate the cost of this group as coded
            by each of the coding tables.
         ----- fast track the common case ------ slow version which correctly handles all situations ----- 
            Find the coding table which is best for this group,
            and record its identity in the selector table.
         ---- 
            Increment the symbol frequencies for the selected table.
          ----- fast track the common case ------ slow version which correctly handles all situations -----
        Recompute the tables based on the accumulated frequencies.
      -- maxLen was changed from 20 to 17 in bzip2-1.0.3.  See 
         comment in huffman.c for details. 20--- Compute MTF values for the selectors. ------ Assign actual codes for the tables. --20--- Transmit the mapping table. ------ Now the selectors. ------ Now the coding tables. --- 10  11 --- And finally, the block data proper ------ fast track the common case ------ slow version which correctly handles all situations -------------------------------------------------------- If this is the first block, create the stream header. ---- Now the block's CRC, so it is in a known place. ---- 
         Now a single bit indicating (non-)randomisation. 
         As of version 0.9.5, we use a better sorting algorithm
         which makes randomisation unnecessary.  So always set
         the randomised bit to 'no'.  Of course, the decoder
         still needs to be able to handle randomised blocks
         so as to maintain backwards compatibility with
         older versions of bzip2.
      ---- If this is the last block, add the stream trailer. ------------------------------------------------------------------ end                                        compress.c ----------------------------------------------------------------