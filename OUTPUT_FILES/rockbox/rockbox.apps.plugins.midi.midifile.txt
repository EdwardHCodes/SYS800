**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Stepan Moskovchenko
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Global again. Not static. What if track 1 ends on a running status event
 * and then track 2 starts loading  Returns 0 if done, 1 if keep going and -1 in case of error  If we are just counting events instead of loading them  if not a running status event  Allocate and read in the data block  Null-terminate for text events  Extra byte for the null termination  Generic text  A copyright string within the file  Sequence of track name  Instrument (synth) name  Lyrics. These appear on the tracks at the right times  Usually only a small 'piece' of the lyrics.            Maybe the sequencer should print these at play time?   Text marker  Cue point  Program name  Device name. Very much irrelevant here, though. 
                 * Don't allocate anything, just see how much it would take
                 * To make memory usage efficient
                 Skip skip Termination meta-event  If part of a running status event  Running Status  Memory saving technique                    Attempt to read in events, count how many  THEN allocate memory and read them in      This came from the MIDI file format guide 
void unloadFile(struct MIDIfile * mf)
{
    if(mf == NULL)
        return;
    int a=0;
    //Unload each track
    for(a=0; a<mf->numTracks; a++)
    {
        int b=0;

        if(mf->tracks[a] != NULL)
            for(b=0; b<mf->tracks[a]->numEvents; b++)
            {
                if(((struct Event*)((mf->tracks[a]->dataBlock)+b*sizeof(struct Event)))->evData!=NULL)
                    free(((struct Event*)((mf->tracks[a]->dataBlock)+b*sizeof(struct Event)))->evData);
            }

        if(mf->tracks[a]!=NULL && mf->tracks[a]->dataBlock != NULL)
            free(mf->tracks[a]->dataBlock); //Unload the event block

        if(mf->tracks[a]!=NULL)
            free(mf->tracks[a]);    //Unload the track structure itself
    }
    free(mf);   //Unload the main struct
}
**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Stepan Moskovchenko
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Global again. Not static. What if track 1 ends on a running status event
 * and then track 2 starts loading  Returns 0 if done, 1 if keep going and -1 in case of error  If we are just counting events instead of loading them  if not a running status event  Allocate and read in the data block  Null-terminate for text events  Extra byte for the null termination  Generic text  A copyright string within the file  Sequence of track name  Instrument (synth) name  Lyrics. These appear on the tracks at the right times  Usually only a small 'piece' of the lyrics.            Maybe the sequencer should print these at play time?   Text marker  Cue point  Program name  Device name. Very much irrelevant here, though. 
                 * Don't allocate anything, just see how much it would take
                 * To make memory usage efficient
                 Skip skip Termination meta-event  If part of a running status event  Running Status  Memory saving technique                    Attempt to read in events, count how many  THEN allocate memory and read them in      This came from the MIDI file format guide 
void unloadFile(struct MIDIfile * mf)
{
    if(mf == NULL)
        return;
    int a=0;
    //Unload each track
    for(a=0; a<mf->numTracks; a++)
    {
        int b=0;

        if(mf->tracks[a] != NULL)
            for(b=0; b<mf->tracks[a]->numEvents; b++)
            {
                if(((struct Event*)((mf->tracks[a]->dataBlock)+b*sizeof(struct Event)))->evData!=NULL)
                    free(((struct Event*)((mf->tracks[a]->dataBlock)+b*sizeof(struct Event)))->evData);
            }

        if(mf->tracks[a]!=NULL && mf->tracks[a]->dataBlock != NULL)
            free(mf->tracks[a]->dataBlock); //Unload the event block

        if(mf->tracks[a]!=NULL)
            free(mf->tracks[a]);    //Unload the track structure itself
    }
    free(mf);   //Unload the main struct
}
**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Stepan Moskovchenko
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Global again. Not static. What if track 1 ends on a running status event
 * and then track 2 starts loading  Returns 0 if done, 1 if keep going and -1 in case of error  If we are just counting events instead of loading them  if not a running status event  Allocate and read in the data block  Null-terminate for text events  Extra byte for the null termination  Generic text  A copyright string within the file  Sequence of track name  Instrument (synth) name  Lyrics. These appear on the tracks at the right times  Usually only a small 'piece' of the lyrics.            Maybe the sequencer should print these at play time?   Text marker  Cue point  Program name  Device name. Very much irrelevant here, though. 
                 * Don't allocate anything, just see how much it would take
                 * To make memory usage efficient
                 Skip skip Termination meta-event  If part of a running status event  Running Status  Memory saving technique                    Attempt to read in events, count how many  THEN allocate memory and read them in      This came from the MIDI file format guide 
void unloadFile(struct MIDIfile * mf)
{
    if(mf == NULL)
        return;
    int a=0;
    //Unload each track
    for(a=0; a<mf->numTracks; a++)
    {
        int b=0;

        if(mf->tracks[a] != NULL)
            for(b=0; b<mf->tracks[a]->numEvents; b++)
            {
                if(((struct Event*)((mf->tracks[a]->dataBlock)+b*sizeof(struct Event)))->evData!=NULL)
                    free(((struct Event*)((mf->tracks[a]->dataBlock)+b*sizeof(struct Event)))->evData);
            }

        if(mf->tracks[a]!=NULL && mf->tracks[a]->dataBlock != NULL)
            free(mf->tracks[a]->dataBlock); //Unload the event block

        if(mf->tracks[a]!=NULL)
            free(mf->tracks[a]);    //Unload the track structure itself
    }
    free(mf);   //Unload the main struct
}
