
 * sixteen.c: `16-puzzle', a sliding-tiles jigsaw which differs
 * from the 15-puzzle in that you toroidally rotate a row or column
 * at a time.
  used to suppress completion flash  structure copy  Shuffle limit is part of the limited parameters, because we have to
     * supply the target move count. 
	 * Shuffle the old-fashioned way, by making a series of
	 * single moves on the grid.
	 
	     * Choose a move to make. We can choose from any row
	     * or any column.
	      Column.  Row. 
		 * To at least _try_ to avoid boring cases, check
		 * that this move doesn't directly undo a previous
		 * one, or repeat it so many times as to turn it
		 * into fewer moves in the opposite direction. (For
		 * example, in a row of length 4, we're allowed to
		 * move it the same way twice, but not three
		 * times.)
                 * 
                 * We track this for each individual row/column,
                 * and clear all the counters as soon as a
                 * perpendicular move is made. This isn't perfect
                 * (it _can't_ guaranteeably be perfect - there
                 * will always come a move count beyond which a
                 * shorter solution will be possible than the one
                 * which constructed the position) but it should
                 * sort out all the obvious cases.
		  If we didn't `continue', we've found an OK move to make. 
	     * Make the move.
	     
	 * If both dimensions are odd, there is a parity
	 * constraint.
	 
	 * Place everything except (possibly) the last two tiles.
	 
	     * Find the last two locations, and the last two
	     * pieces.
	     
	     * Try the last two tiles one way round. If that fails,
	     * swap them.
	     
     * Now construct the game description, by describing the tile
     * array as a simple sequence of comma-separated integers.
      delete last comma  eat comma  eat comma 
     * First work out how many characters we need to display each
     * number.
     
     * Now we know the exact total size of the grid we're going to
     * produce: it's got h rows, each containing w lots of col, w-1
     * spaces and a trailing newline.
      invalid click location  reverse direction if right hand button is pressed 
	 * Simply replace the grid with a solved one. For this game,
	 * this isn't a useful operation for actually telling the user
	 * what they should have done, but it is useful for
	 * conveniently being able to get hold of a clean state from
	 * which to practise manoeuvres.
	 
     * See if the game has been completed.
      ----------------------------------------------------------------------
 * Drawing routines.
  Ick: fake up `ds->tilesize' for macro expansion purposes  haven't decided yet  top of arrow  right corner  right concave  bottom right  bottom left  left concave  left corner  'no cursur here  LH column.  RH column  Top row  Bottom row 
         * Recessed area containing the whole puzzle.
         
         * Arrows for making moves.
         
     * Cursor (highlighted arrow around edge)
      Cursor has changed; redraw two (prev and curr) arrows. 
     * Now draw each tile.
     
	 * Figure out what should be displayed at this
	 * location. It's either a simple tile, or it's a
	 * transition between two tiles (in which case we say
	 * -1 because it must always be drawn).
	  always redraw when flashing  cursor moved 
	     * Figure out what to _actually_ draw, and where to
	     * draw it.
	     
		 * FIXME: must be prepared to draw a double
		 * tile in some situations.
		 
		 * Find the coordinates of this tile in the old and
		 * new states.
		 
     * Update the status bar.
     
         * Don't show the new status until we're also showing the
         * new _state_ - after the game animation is complete.
          game_request_keys  wants_statusbar  flags  vim: set shiftwidth=4 tabstop=8: 
 * sixteen.c: `16-puzzle', a sliding-tiles jigsaw which differs
 * from the 15-puzzle in that you toroidally rotate a row or column
 * at a time.
  used to suppress completion flash  structure copy  Shuffle limit is part of the limited parameters, because we have to
     * supply the target move count. 
	 * Shuffle the old-fashioned way, by making a series of
	 * single moves on the grid.
	 
	     * Choose a move to make. We can choose from any row
	     * or any column.
	      Column.  Row. 
		 * To at least _try_ to avoid boring cases, check
		 * that this move doesn't directly undo a previous
		 * one, or repeat it so many times as to turn it
		 * into fewer moves in the opposite direction. (For
		 * example, in a row of length 4, we're allowed to
		 * move it the same way twice, but not three
		 * times.)
                 * 
                 * We track this for each individual row/column,
                 * and clear all the counters as soon as a
                 * perpendicular move is made. This isn't perfect
                 * (it _can't_ guaranteeably be perfect - there
                 * will always come a move count beyond which a
                 * shorter solution will be possible than the one
                 * which constructed the position) but it should
                 * sort out all the obvious cases.
		  If we didn't `continue', we've found an OK move to make. 
	     * Make the move.
	     
	 * If both dimensions are odd, there is a parity
	 * constraint.
	 
	 * Place everything except (possibly) the last two tiles.
	 
	     * Find the last two locations, and the last two
	     * pieces.
	     
	     * Try the last two tiles one way round. If that fails,
	     * swap them.
	     
     * Now construct the game description, by describing the tile
     * array as a simple sequence of comma-separated integers.
      delete last comma  eat comma  eat comma 
     * First work out how many characters we need to display each
     * number.
     
     * Now we know the exact total size of the grid we're going to
     * produce: it's got h rows, each containing w lots of col, w-1
     * spaces and a trailing newline.
      invalid click location  reverse direction if right hand button is pressed 
	 * Simply replace the grid with a solved one. For this game,
	 * this isn't a useful operation for actually telling the user
	 * what they should have done, but it is useful for
	 * conveniently being able to get hold of a clean state from
	 * which to practise manoeuvres.
	 
     * See if the game has been completed.
      ----------------------------------------------------------------------
 * Drawing routines.
  Ick: fake up `ds->tilesize' for macro expansion purposes  haven't decided yet  top of arrow  right corner  right concave  bottom right  bottom left  left concave  left corner  'no cursur here  LH column.  RH column  Top row  Bottom row 
         * Recessed area containing the whole puzzle.
         
         * Arrows for making moves.
         
     * Cursor (highlighted arrow around edge)
      Cursor has changed; redraw two (prev and curr) arrows. 
     * Now draw each tile.
     
	 * Figure out what should be displayed at this
	 * location. It's either a simple tile, or it's a
	 * transition between two tiles (in which case we say
	 * -1 because it must always be drawn).
	  always redraw when flashing  cursor moved 
	     * Figure out what to _actually_ draw, and where to
	     * draw it.
	     
		 * FIXME: must be prepared to draw a double
		 * tile in some situations.
		 
		 * Find the coordinates of this tile in the old and
		 * new states.
		 
     * Update the status bar.
     
         * Don't show the new status until we're also showing the
         * new _state_ - after the game animation is complete.
          game_request_keys  wants_statusbar  flags  vim: set shiftwidth=4 tabstop=8: 
 * sixteen.c: `16-puzzle', a sliding-tiles jigsaw which differs
 * from the 15-puzzle in that you toroidally rotate a row or column
 * at a time.
  used to suppress completion flash  structure copy  Shuffle limit is part of the limited parameters, because we have to
     * supply the target move count. 
	 * Shuffle the old-fashioned way, by making a series of
	 * single moves on the grid.
	 
	     * Choose a move to make. We can choose from any row
	     * or any column.
	      Column.  Row. 
		 * To at least _try_ to avoid boring cases, check
		 * that this move doesn't directly undo a previous
		 * one, or repeat it so many times as to turn it
		 * into fewer moves in the opposite direction. (For
		 * example, in a row of length 4, we're allowed to
		 * move it the same way twice, but not three
		 * times.)
                 * 
                 * We track this for each individual row/column,
                 * and clear all the counters as soon as a
                 * perpendicular move is made. This isn't perfect
                 * (it _can't_ guaranteeably be perfect - there
                 * will always come a move count beyond which a
                 * shorter solution will be possible than the one
                 * which constructed the position) but it should
                 * sort out all the obvious cases.
		  If we didn't `continue', we've found an OK move to make. 
	     * Make the move.
	     
	 * If both dimensions are odd, there is a parity
	 * constraint.
	 
	 * Place everything except (possibly) the last two tiles.
	 
	     * Find the last two locations, and the last two
	     * pieces.
	     
	     * Try the last two tiles one way round. If that fails,
	     * swap them.
	     
     * Now construct the game description, by describing the tile
     * array as a simple sequence of comma-separated integers.
      delete last comma  eat comma  eat comma 
     * First work out how many characters we need to display each
     * number.
     
     * Now we know the exact total size of the grid we're going to
     * produce: it's got h rows, each containing w lots of col, w-1
     * spaces and a trailing newline.
      invalid click location  reverse direction if right hand button is pressed 
	 * Simply replace the grid with a solved one. For this game,
	 * this isn't a useful operation for actually telling the user
	 * what they should have done, but it is useful for
	 * conveniently being able to get hold of a clean state from
	 * which to practise manoeuvres.
	 
     * See if the game has been completed.
      ----------------------------------------------------------------------
 * Drawing routines.
  Ick: fake up `ds->tilesize' for macro expansion purposes  haven't decided yet  top of arrow  right corner  right concave  bottom right  bottom left  left concave  left corner  'no cursur here  LH column.  RH column  Top row  Bottom row 
         * Recessed area containing the whole puzzle.
         
         * Arrows for making moves.
         
     * Cursor (highlighted arrow around edge)
      Cursor has changed; redraw two (prev and curr) arrows. 
     * Now draw each tile.
     
	 * Figure out what should be displayed at this
	 * location. It's either a simple tile, or it's a
	 * transition between two tiles (in which case we say
	 * -1 because it must always be drawn).
	  always redraw when flashing  cursor moved 
	     * Figure out what to _actually_ draw, and where to
	     * draw it.
	     
		 * FIXME: must be prepared to draw a double
		 * tile in some situations.
		 
		 * Find the coordinates of this tile in the old and
		 * new states.
		 
     * Update the status bar.
     
         * Don't show the new status until we're also showing the
         * new _state_ - after the game animation is complete.
          game_request_keys  wants_statusbar  flags  vim: set shiftwidth=4 tabstop=8: 