**************************************************************************
 *             __________               __   ___
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2014 by Ilia Sergachev: Initial Rockbox port to iBasso DX50
 * Copyright (C) 2014 by Mario Basister: iBasso DX90 port
 * Copyright (C) 2014 by Simon Rothen: Initial Rockbox repository submission, additional features
 * Copyright (C) 2014 by Udo Schläpfer: Code clean up, additional features
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Framebuffer device handle.  Get the changeable information. 
        Framebuffer does not fit the screen, a bug of iBassos Firmware, not Rockbox.
        Cannot be solved with parameters.
    vinfo.bits_per_pixel = LCD_DEPTH;
    vinfo.xres           = LCD_WIDTH;
    vinfo.xres_virtual   = LCD_WIDTH;
    vinfo.width          = LCD_WIDTH;
    vinfo.yres           = LCD_HEIGHT;
    vinfo.yres_virtual   = LCD_HEIGHT;
    vinfo.height         = LCD_HEIGHT;
    vinfo.activate       = FB_ACTIVATE_NOW;
    if(ioctl(dev_fd, FBIOPUT_VSCREENINFO, &vinfo) == -1)
    {
        DEBUGF("ERROR %s: ioctl FBIOPUT_VSCREENINFO failed on /dev/graphics/fb0, errno: %d.", __func__, errno);
        exit(EXIT_FAILURE);
    } Sanity check: Does framebuffer config match Rockbox config?  Map the device to memory.  Activate Rockbox LCD. 
    Left as reference. Unblanking does not work as expected, will not enable LCD after a few
    seconds of power down.
    Instead the backlight power is toggled.
void lcd_power_on(void)
{
    TRACE;

    if(ioctl(dev_fd, FBIOBLANK, VESA_NO_BLANKING) == -1)
    {
        DEBUGF("ERROR %s: ioctl FBIOBLANK failed on /dev/graphics/fb0, errno: %d.", __func__, errno);
        panicf("ERROR %s: ioctl FBIOBLANK failed on /dev/graphics/fb0, errno: %d.", __func__, errno);
        return;
    }

    lcd_set_active(true);
    send_event(LCD_EVENT_ACTIVATION, NULL);
}


void lcd_power_off(void)
{
    TRACE;

    lcd_set_active(false);

    if(ioctl(dev_fd, FBIOBLANK, VESA_POWERDOWN) == -1)
    {
        DEBUGF("ERROR %s: ioctl FBIOBLANK failed on /dev/graphics/fb0, errno: %d.", __func__, errno);
        panicf("ERROR %s: ioctl FBIOBLANK failed on /dev/graphics/fb0, errno: %d.", __func__, errno);
        return;
    }
}
            /sys/power/state
            on: Cancel suspend.
        
        See system_init(). Without suspend blocker und mute prevention this will interrupt playback.
        Essentially, we are turning off the touch screen.
        /sys/power/state
        mem: Suspend to RAM.
    **************************************************************************
 *             __________               __   ___
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2014 by Ilia Sergachev: Initial Rockbox port to iBasso DX50
 * Copyright (C) 2014 by Mario Basister: iBasso DX90 port
 * Copyright (C) 2014 by Simon Rothen: Initial Rockbox repository submission, additional features
 * Copyright (C) 2014 by Udo Schläpfer: Code clean up, additional features
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Framebuffer device handle.  Get the changeable information. 
        Framebuffer does not fit the screen, a bug of iBassos Firmware, not Rockbox.
        Cannot be solved with parameters.
    vinfo.bits_per_pixel = LCD_DEPTH;
    vinfo.xres           = LCD_WIDTH;
    vinfo.xres_virtual   = LCD_WIDTH;
    vinfo.width          = LCD_WIDTH;
    vinfo.yres           = LCD_HEIGHT;
    vinfo.yres_virtual   = LCD_HEIGHT;
    vinfo.height         = LCD_HEIGHT;
    vinfo.activate       = FB_ACTIVATE_NOW;
    if(ioctl(dev_fd, FBIOPUT_VSCREENINFO, &vinfo) == -1)
    {
        DEBUGF("ERROR %s: ioctl FBIOPUT_VSCREENINFO failed on /dev/graphics/fb0, errno: %d.", __func__, errno);
        exit(EXIT_FAILURE);
    } Sanity check: Does framebuffer config match Rockbox config?  Map the device to memory.  Activate Rockbox LCD. 
    Left as reference. Unblanking does not work as expected, will not enable LCD after a few
    seconds of power down.
    Instead the backlight power is toggled.
void lcd_power_on(void)
{
    TRACE;

    if(ioctl(dev_fd, FBIOBLANK, VESA_NO_BLANKING) == -1)
    {
        DEBUGF("ERROR %s: ioctl FBIOBLANK failed on /dev/graphics/fb0, errno: %d.", __func__, errno);
        panicf("ERROR %s: ioctl FBIOBLANK failed on /dev/graphics/fb0, errno: %d.", __func__, errno);
        return;
    }

    lcd_set_active(true);
    send_event(LCD_EVENT_ACTIVATION, NULL);
}


void lcd_power_off(void)
{
    TRACE;

    lcd_set_active(false);

    if(ioctl(dev_fd, FBIOBLANK, VESA_POWERDOWN) == -1)
    {
        DEBUGF("ERROR %s: ioctl FBIOBLANK failed on /dev/graphics/fb0, errno: %d.", __func__, errno);
        panicf("ERROR %s: ioctl FBIOBLANK failed on /dev/graphics/fb0, errno: %d.", __func__, errno);
        return;
    }
}
            /sys/power/state
            on: Cancel suspend.
        
        See system_init(). Without suspend blocker und mute prevention this will interrupt playback.
        Essentially, we are turning off the touch screen.
        /sys/power/state
        mem: Suspend to RAM.
    **************************************************************************
 *             __________               __   ___
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2014 by Ilia Sergachev: Initial Rockbox port to iBasso DX50
 * Copyright (C) 2014 by Mario Basister: iBasso DX90 port
 * Copyright (C) 2014 by Simon Rothen: Initial Rockbox repository submission, additional features
 * Copyright (C) 2014 by Udo Schläpfer: Code clean up, additional features
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Framebuffer device handle.  Get the changeable information. 
        Framebuffer does not fit the screen, a bug of iBassos Firmware, not Rockbox.
        Cannot be solved with parameters.
    vinfo.bits_per_pixel = LCD_DEPTH;
    vinfo.xres           = LCD_WIDTH;
    vinfo.xres_virtual   = LCD_WIDTH;
    vinfo.width          = LCD_WIDTH;
    vinfo.yres           = LCD_HEIGHT;
    vinfo.yres_virtual   = LCD_HEIGHT;
    vinfo.height         = LCD_HEIGHT;
    vinfo.activate       = FB_ACTIVATE_NOW;
    if(ioctl(dev_fd, FBIOPUT_VSCREENINFO, &vinfo) == -1)
    {
        DEBUGF("ERROR %s: ioctl FBIOPUT_VSCREENINFO failed on /dev/graphics/fb0, errno: %d.", __func__, errno);
        exit(EXIT_FAILURE);
    } Sanity check: Does framebuffer config match Rockbox config?  Map the device to memory.  Activate Rockbox LCD. 
    Left as reference. Unblanking does not work as expected, will not enable LCD after a few
    seconds of power down.
    Instead the backlight power is toggled.
void lcd_power_on(void)
{
    TRACE;

    if(ioctl(dev_fd, FBIOBLANK, VESA_NO_BLANKING) == -1)
    {
        DEBUGF("ERROR %s: ioctl FBIOBLANK failed on /dev/graphics/fb0, errno: %d.", __func__, errno);
        panicf("ERROR %s: ioctl FBIOBLANK failed on /dev/graphics/fb0, errno: %d.", __func__, errno);
        return;
    }

    lcd_set_active(true);
    send_event(LCD_EVENT_ACTIVATION, NULL);
}


void lcd_power_off(void)
{
    TRACE;

    lcd_set_active(false);

    if(ioctl(dev_fd, FBIOBLANK, VESA_POWERDOWN) == -1)
    {
        DEBUGF("ERROR %s: ioctl FBIOBLANK failed on /dev/graphics/fb0, errno: %d.", __func__, errno);
        panicf("ERROR %s: ioctl FBIOBLANK failed on /dev/graphics/fb0, errno: %d.", __func__, errno);
        return;
    }
}
            /sys/power/state
            on: Cancel suspend.
        
        See system_init(). Without suspend blocker und mute prevention this will interrupt playback.
        Essentially, we are turning off the touch screen.
        /sys/power/state
        mem: Suspend to RAM.
    