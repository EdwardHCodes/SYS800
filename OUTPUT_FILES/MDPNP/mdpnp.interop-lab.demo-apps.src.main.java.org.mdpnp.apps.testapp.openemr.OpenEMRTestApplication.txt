*
	 * The default interval, in seconds.
	 *
	 * The currently selected time interval between attempts to send to OpenEMR, in seconds.
	 *
	 * The last sequence number 
	 *
	 * The next time we need to try and transmit data to the server.
	 *
	 * Session id for transferring data
	 *
	 * The time at which this process was created - effectively the process start time.
	 * The assumption is that no device/patient association can occur before this, and
	 * so this time is used to select device/patient associations that occurred after this
	 * time. Knowing that, we can select numerics and samples produced by devices that are
	 * associated with the current patient, where the association occurred after this time
	 * and where the associated has not been ended.  That gives us devices, that we can then
	 * match to the numerics or samples produced by those devices.
	 We don't have a max seq num yetThere is nothing to do.TODO: give some indication that the app is not running.long t_tmp=0;We set this to allow time for sendData to execute without us missing any metrics that happen during that execution time.t_tmp=System.currentTimeMillis();log.info("set t_tmp to "+t_tmp);TODO: Exit somehow...Nothing to do at the moment...
		            	 * The patient has definitely changed - even if the selected patient is "Unassigned",
		            	 * then that "Patient" has an ID
		            	 Nothing else to do.Patient has changedWe have a result setUDIMETRIC_IDVALUET_SECSEQNUMFlip to the last known sequence number from the result set for the transfer just sent.
			if(samplesStatement==null) {
				samplesStatement=dbconn.prepareStatement("select allsamples.t_sec,allsamples.udi,allsamples.metric_id,allsamples.floats from allsamples where allsamples.t_sec>?");
			}
			log.info("Using "+(t_last/1000)+" for samplesStatment");
			samplesStatement.setLong(1, (t_last/1000));
			if(samplesStatement.execute()) {
				//We have a result set
				ResultSet rs=samplesStatement.getResultSet();
				JsonArrayBuilder resultsBuilder=Json.createArrayBuilder();
				while(rs.next()) {
					JsonArrayBuilder rowBuilder=Json.createArrayBuilder();
					rowBuilder.add(rs.getString(2));	//UDI
					rowBuilder.add(rs.getString(3));	//METRIC_ID
					rowBuilder.add(rs.getString(4));		//VALUE
					rowBuilder.add(rs.getInt(1));		//T_SEC
					resultsBuilder.add(rowBuilder);
				}
				JsonArray allRows=resultsBuilder.build();
				JsonObjectBuilder builder=Json.createObjectBuilder();
				builder.add("sessionid", transferSession);
				builder.add("payload", allRows);
				String jsonPayload=builder.build().toString();
				log.info("About to call sendSamplesOverApi with "+allRows.size()+" elements");
				//sendSamplesOverApi(jsonPayload);
				return true;
			} else {
				log.warn("Unexpected result from executing samplesStatement");
			}
			*
	 * Used to retrieve a session id from OpenEMR.
	 Fallback value - and potentially a confusing one. the dot character is not legal in the dispatch handler for OpenEMR, so hostnames must be trimmed down.*
	 * Used to retrieve the max sequence number from openemr for this machine
	 Fallback value - and potentially a confusing one. the dot character is not legal in the dispatch handler for OpenEMR, so hostnames must be trimmed down. "null" in this case is the literal string value returned by OpenEMR when no records matched.Not sure why it has the double quotes in it?*
	 * The default interval, in seconds.
	 *
	 * The currently selected time interval between attempts to send to OpenEMR, in seconds.
	 *
	 * The last sequence number 
	 *
	 * The next time we need to try and transmit data to the server.
	 *
	 * Session id for transferring data
	 *
	 * The time at which this process was created - effectively the process start time.
	 * The assumption is that no device/patient association can occur before this, and
	 * so this time is used to select device/patient associations that occurred after this
	 * time. Knowing that, we can select numerics and samples produced by devices that are
	 * associated with the current patient, where the association occurred after this time
	 * and where the associated has not been ended.  That gives us devices, that we can then
	 * match to the numerics or samples produced by those devices.
	 We don't have a max seq num yetThere is nothing to do.TODO: give some indication that the app is not running.long t_tmp=0;We set this to allow time for sendData to execute without us missing any metrics that happen during that execution time.t_tmp=System.currentTimeMillis();log.info("set t_tmp to "+t_tmp);TODO: Exit somehow...Nothing to do at the moment...
		            	 * The patient has definitely changed - even if the selected patient is "Unassigned",
		            	 * then that "Patient" has an ID
		            	 Nothing else to do.Patient has changedWe have a result setUDIMETRIC_IDVALUET_SECSEQNUMFlip to the last known sequence number from the result set for the transfer just sent.
			if(samplesStatement==null) {
				samplesStatement=dbconn.prepareStatement("select allsamples.t_sec,allsamples.udi,allsamples.metric_id,allsamples.floats from allsamples where allsamples.t_sec>?");
			}
			log.info("Using "+(t_last/1000)+" for samplesStatment");
			samplesStatement.setLong(1, (t_last/1000));
			if(samplesStatement.execute()) {
				//We have a result set
				ResultSet rs=samplesStatement.getResultSet();
				JsonArrayBuilder resultsBuilder=Json.createArrayBuilder();
				while(rs.next()) {
					JsonArrayBuilder rowBuilder=Json.createArrayBuilder();
					rowBuilder.add(rs.getString(2));	//UDI
					rowBuilder.add(rs.getString(3));	//METRIC_ID
					rowBuilder.add(rs.getString(4));		//VALUE
					rowBuilder.add(rs.getInt(1));		//T_SEC
					resultsBuilder.add(rowBuilder);
				}
				JsonArray allRows=resultsBuilder.build();
				JsonObjectBuilder builder=Json.createObjectBuilder();
				builder.add("sessionid", transferSession);
				builder.add("payload", allRows);
				String jsonPayload=builder.build().toString();
				log.info("About to call sendSamplesOverApi with "+allRows.size()+" elements");
				//sendSamplesOverApi(jsonPayload);
				return true;
			} else {
				log.warn("Unexpected result from executing samplesStatement");
			}
			*
	 * Used to retrieve a session id from OpenEMR.
	 Fallback value - and potentially a confusing one. the dot character is not legal in the dispatch handler for OpenEMR, so hostnames must be trimmed down.*
	 * Used to retrieve the max sequence number from openemr for this machine
	 Fallback value - and potentially a confusing one. the dot character is not legal in the dispatch handler for OpenEMR, so hostnames must be trimmed down. "null" in this case is the literal string value returned by OpenEMR when no records matched.Not sure why it has the double quotes in it?*
	 * The default interval, in seconds.
	 *
	 * The currently selected time interval between attempts to send to OpenEMR, in seconds.
	 *
	 * The last sequence number 
	 *
	 * The next time we need to try and transmit data to the server.
	 *
	 * Session id for transferring data
	 *
	 * The time at which this process was created - effectively the process start time.
	 * The assumption is that no device/patient association can occur before this, and
	 * so this time is used to select device/patient associations that occurred after this
	 * time. Knowing that, we can select numerics and samples produced by devices that are
	 * associated with the current patient, where the association occurred after this time
	 * and where the associated has not been ended.  That gives us devices, that we can then
	 * match to the numerics or samples produced by those devices.
	 We don't have a max seq num yetThere is nothing to do.TODO: give some indication that the app is not running.long t_tmp=0;We set this to allow time for sendData to execute without us missing any metrics that happen during that execution time.t_tmp=System.currentTimeMillis();log.info("set t_tmp to "+t_tmp);TODO: Exit somehow...Nothing to do at the moment...
		            	 * The patient has definitely changed - even if the selected patient is "Unassigned",
		            	 * then that "Patient" has an ID
		            	 Nothing else to do.Patient has changedWe have a result setUDIMETRIC_IDVALUET_SECSEQNUMFlip to the last known sequence number from the result set for the transfer just sent.
			if(samplesStatement==null) {
				samplesStatement=dbconn.prepareStatement("select allsamples.t_sec,allsamples.udi,allsamples.metric_id,allsamples.floats from allsamples where allsamples.t_sec>?");
			}
			log.info("Using "+(t_last/1000)+" for samplesStatment");
			samplesStatement.setLong(1, (t_last/1000));
			if(samplesStatement.execute()) {
				//We have a result set
				ResultSet rs=samplesStatement.getResultSet();
				JsonArrayBuilder resultsBuilder=Json.createArrayBuilder();
				while(rs.next()) {
					JsonArrayBuilder rowBuilder=Json.createArrayBuilder();
					rowBuilder.add(rs.getString(2));	//UDI
					rowBuilder.add(rs.getString(3));	//METRIC_ID
					rowBuilder.add(rs.getString(4));		//VALUE
					rowBuilder.add(rs.getInt(1));		//T_SEC
					resultsBuilder.add(rowBuilder);
				}
				JsonArray allRows=resultsBuilder.build();
				JsonObjectBuilder builder=Json.createObjectBuilder();
				builder.add("sessionid", transferSession);
				builder.add("payload", allRows);
				String jsonPayload=builder.build().toString();
				log.info("About to call sendSamplesOverApi with "+allRows.size()+" elements");
				//sendSamplesOverApi(jsonPayload);
				return true;
			} else {
				log.warn("Unexpected result from executing samplesStatement");
			}
			*
	 * Used to retrieve a session id from OpenEMR.
	 Fallback value - and potentially a confusing one. the dot character is not legal in the dispatch handler for OpenEMR, so hostnames must be trimmed down.*
	 * Used to retrieve the max sequence number from openemr for this machine
	 Fallback value - and potentially a confusing one. the dot character is not legal in the dispatch handler for OpenEMR, so hostnames must be trimmed down. "null" in this case is the literal string value returned by OpenEMR when no records matched.Not sure why it has the double quotes in it?*
	 * The default interval, in seconds.
	 *
	 * The currently selected time interval between attempts to send to OpenEMR, in seconds.
	 *
	 * The last sequence number 
	 *
	 * The next time we need to try and transmit data to the server.
	 *
	 * Session id for transferring data
	 *
	 * The time at which this process was created - effectively the process start time.
	 * The assumption is that no device/patient association can occur before this, and
	 * so this time is used to select device/patient associations that occurred after this
	 * time. Knowing that, we can select numerics and samples produced by devices that are
	 * associated with the current patient, where the association occurred after this time
	 * and where the associated has not been ended.  That gives us devices, that we can then
	 * match to the numerics or samples produced by those devices.
	 We don't have a max seq num yetThere is nothing to do.TODO: give some indication that the app is not running.long t_tmp=0;We set this to allow time for sendData to execute without us missing any metrics that happen during that execution time.t_tmp=System.currentTimeMillis();log.info("set t_tmp to "+t_tmp);TODO: Exit somehow...Nothing to do at the moment...
		            	 * The patient has definitely changed - even if the selected patient is "Unassigned",
		            	 * then that "Patient" has an ID
		            	 Nothing else to do.Patient has changedWe have a result setUDIMETRIC_IDVALUET_SECSEQNUMFlip to the last known sequence number from the result set for the transfer just sent.
			if(samplesStatement==null) {
				samplesStatement=dbconn.prepareStatement("select allsamples.t_sec,allsamples.udi,allsamples.metric_id,allsamples.floats from allsamples where allsamples.t_sec>?");
			}
			log.info("Using "+(t_last/1000)+" for samplesStatment");
			samplesStatement.setLong(1, (t_last/1000));
			if(samplesStatement.execute()) {
				//We have a result set
				ResultSet rs=samplesStatement.getResultSet();
				JsonArrayBuilder resultsBuilder=Json.createArrayBuilder();
				while(rs.next()) {
					JsonArrayBuilder rowBuilder=Json.createArrayBuilder();
					rowBuilder.add(rs.getString(2));	//UDI
					rowBuilder.add(rs.getString(3));	//METRIC_ID
					rowBuilder.add(rs.getString(4));		//VALUE
					rowBuilder.add(rs.getInt(1));		//T_SEC
					resultsBuilder.add(rowBuilder);
				}
				JsonArray allRows=resultsBuilder.build();
				JsonObjectBuilder builder=Json.createObjectBuilder();
				builder.add("sessionid", transferSession);
				builder.add("payload", allRows);
				String jsonPayload=builder.build().toString();
				log.info("About to call sendSamplesOverApi with "+allRows.size()+" elements");
				//sendSamplesOverApi(jsonPayload);
				return true;
			} else {
				log.warn("Unexpected result from executing samplesStatement");
			}
			*
	 * Used to retrieve a session id from OpenEMR.
	 Fallback value - and potentially a confusing one. the dot character is not legal in the dispatch handler for OpenEMR, so hostnames must be trimmed down.*
	 * Used to retrieve the max sequence number from openemr for this machine
	 Fallback value - and potentially a confusing one. the dot character is not legal in the dispatch handler for OpenEMR, so hostnames must be trimmed down. "null" in this case is the literal string value returned by OpenEMR when no records matched.Not sure why it has the double quotes in it?