**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** NOTE: Defined the base to be original firmware compatible if needed -
 * ie. the day and year as it would interpret a DAY register value of zero.  None of this code concerns itself with (year mod 100) = 0 leap year
 * exceptions because all (year mod 4) = 0 years in the relevant range are
 * leap years. A base year of 1901 to an end date of 28 Feb 2100 are ok.  Gigabeat S seems to be 1 day behind the ususual - this will
     * make the RTC match file dates created by retailos.  Monday  31 Dec  Tuesday  01 Jan  Thursday  01 Jan  Reference year for leap calculation - year that is on or before the base
 * year and immediately follows a leap year  was it an alarm that triggered power on ?  force a read right away  Since 1 Jan, how many days have passed this year? (non-leap)
    +31   28   31   30   31   30   31   31   30   31   30   31  Read time, day, time - 2nd read of time should be the same or
     * greater  Couldn't read registers  If TOD counter turned over - reread * Public APIs * only needs to be polled on startup  TOD: 0 to 86399  Hour  Minute  Second  DAY: 0 to 32767  Weekday  Year  Lag year increment by subtracting leaps since the reference year
     * on 31 Dec of each leap year, essentially removing them from the
     * calculation  Year day  If (x + 1) mod 1461 == 0, then it is yday 365 of a leap year  1 Mar or after; lag date by one day  29 Feb or after, lag month by one day  Get the current month  yday / 32, close enough  Round to next  1 to 31  0 to 11  {BY to (BY+89 or 90)} - 1900  Convert time of day into seconds since midnight  Keep in range (it throws off the PMIC counters otherwise)  Get the number of days elapsed from 1 Jan of reference year to 1 Jan of
     * this year  Add the number of days passed this year since 1 Jan and offset by the
     * base yearday and the reference offset in days from the base  Sub one day because tm_mday starts at 1, otherwise the offset is
         * required because of 29 Feb  Keep in range  We don't need to do anything special if it has already fired **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** NOTE: Defined the base to be original firmware compatible if needed -
 * ie. the day and year as it would interpret a DAY register value of zero.  None of this code concerns itself with (year mod 100) = 0 leap year
 * exceptions because all (year mod 4) = 0 years in the relevant range are
 * leap years. A base year of 1901 to an end date of 28 Feb 2100 are ok.  Gigabeat S seems to be 1 day behind the ususual - this will
     * make the RTC match file dates created by retailos.  Monday  31 Dec  Tuesday  01 Jan  Thursday  01 Jan  Reference year for leap calculation - year that is on or before the base
 * year and immediately follows a leap year  was it an alarm that triggered power on ?  force a read right away  Since 1 Jan, how many days have passed this year? (non-leap)
    +31   28   31   30   31   30   31   31   30   31   30   31  Read time, day, time - 2nd read of time should be the same or
     * greater  Couldn't read registers  If TOD counter turned over - reread * Public APIs * only needs to be polled on startup  TOD: 0 to 86399  Hour  Minute  Second  DAY: 0 to 32767  Weekday  Year  Lag year increment by subtracting leaps since the reference year
     * on 31 Dec of each leap year, essentially removing them from the
     * calculation  Year day  If (x + 1) mod 1461 == 0, then it is yday 365 of a leap year  1 Mar or after; lag date by one day  29 Feb or after, lag month by one day  Get the current month  yday / 32, close enough  Round to next  1 to 31  0 to 11  {BY to (BY+89 or 90)} - 1900  Convert time of day into seconds since midnight  Keep in range (it throws off the PMIC counters otherwise)  Get the number of days elapsed from 1 Jan of reference year to 1 Jan of
     * this year  Add the number of days passed this year since 1 Jan and offset by the
     * base yearday and the reference offset in days from the base  Sub one day because tm_mday starts at 1, otherwise the offset is
         * required because of 29 Feb  Keep in range  We don't need to do anything special if it has already fired **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** NOTE: Defined the base to be original firmware compatible if needed -
 * ie. the day and year as it would interpret a DAY register value of zero.  None of this code concerns itself with (year mod 100) = 0 leap year
 * exceptions because all (year mod 4) = 0 years in the relevant range are
 * leap years. A base year of 1901 to an end date of 28 Feb 2100 are ok.  Gigabeat S seems to be 1 day behind the ususual - this will
     * make the RTC match file dates created by retailos.  Monday  31 Dec  Tuesday  01 Jan  Thursday  01 Jan  Reference year for leap calculation - year that is on or before the base
 * year and immediately follows a leap year  was it an alarm that triggered power on ?  force a read right away  Since 1 Jan, how many days have passed this year? (non-leap)
    +31   28   31   30   31   30   31   31   30   31   30   31  Read time, day, time - 2nd read of time should be the same or
     * greater  Couldn't read registers  If TOD counter turned over - reread * Public APIs * only needs to be polled on startup  TOD: 0 to 86399  Hour  Minute  Second  DAY: 0 to 32767  Weekday  Year  Lag year increment by subtracting leaps since the reference year
     * on 31 Dec of each leap year, essentially removing them from the
     * calculation  Year day  If (x + 1) mod 1461 == 0, then it is yday 365 of a leap year  1 Mar or after; lag date by one day  29 Feb or after, lag month by one day  Get the current month  yday / 32, close enough  Round to next  1 to 31  0 to 11  {BY to (BY+89 or 90)} - 1900  Convert time of day into seconds since midnight  Keep in range (it throws off the PMIC counters otherwise)  Get the number of days elapsed from 1 Jan of reference year to 1 Jan of
     * this year  Add the number of days passed this year since 1 Jan and offset by the
     * base yearday and the reference offset in days from the base  Sub one day because tm_mday starts at 1, otherwise the offset is
         * required because of 29 Feb  Keep in range  We don't need to do anything special if it has already fired 