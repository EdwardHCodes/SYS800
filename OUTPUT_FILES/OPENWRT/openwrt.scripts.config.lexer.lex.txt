 A lexical scanner generated by flex  First, we deal with  platform-specific or compiler-specific issues.  begin standard C headers.  end standard C headers.  flex integer type definitions  C99 systems have <inttypes.h>. Non-C99 systems may or may not.  C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
  Limits of integral types.  ! C99  ! FLEXINT_H  begin standard C++ headers.  TODO: this is always defined, so inline it  Returned upon end-of-file.  Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
  Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
  Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
  Action number for EOF rule of a given start state.  Special action meaning "start processing a new file".  Size of default input buffer.  On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
  __ia64__  The state buf must be large enough to hold one state per character in the main buffer.
  Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
      Return all but the first "n" matched characters back to the input stream.  Undo effects of setting up yytext.  set up yytext again  input buffer  current position in input buffer  Size of input buffer in bytes, not including room for EOB
	 * characters.
	  Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	  Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	  Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	  Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 *< The line count. *< The column count.  Whether to try to fill the input buffer when we reach the
	 * end of it.
	  When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	  !YY_STRUCT_YY_BUFFER_STATE  Stack of input buffers. *< index of top of stack. *< capacity of stack. *< Stack as an array.  We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
  Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
  yy_hold_char holds the character lost when yytext is formed.  number of characters read into yy_ch_buf  Points to current character in buffer.  whether we need to initialize  start state number  Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
  Begin user sect3 CONSTCOND Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
  This struct is not used in this scanner,
   but its presence is necessary.  Table of booleans, true if rule could match eol.  The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
  SPDX-License-Identifier: GPL-2.0 
 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>
  Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
  Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience.  Macros after this point can all be overridden by user definitions in
 * section 1.
  Amount of stuff to slurp up with each read.  On IA-64, the buffer size is 16k, not 8k  __ia64__  Copy whatever the last rule matched to the standard output.  This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
  Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
  No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
  Number of entries by which start-condition stack grows.  Report a fatal error.  end tables serialization structures and prototypes  Default declaration of generated scanner - a define so the user can
 * easily add parameters.
  !YY_DECL  Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
  Code executed at the end of each rule. LINTED* The main scanner function which does all the work.
  first start state CONSTCOND loops until end-of-file is reached  Support of yytext.  yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		  This label is used only to access EOF actions.  beginning of action switch  ignore comment  whitespaces  rule 3 can match eol  escaped new line  rule 4 can match eol  this token includes at least one '$'  rule 56 can match eol  rule 62 can match eol  rule 64 can match eol  undo effects of setting up yytext  set up yytext again  rule 65 can match eol  Amount of text matched not including the EOB char.  Undo the effects of YY_DO_BEFORE_ACTION.  We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			  Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		  This was really a NUL.  Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			  Consume the NUL.  Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					  end of action switch  end of scanning one token  end of user's declarations  end of yylex  yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
  Don't try to fill the buffer, so this is an EOF.  We matched a single character, the EOB, so
			 * treat this as a final EOF.
			  We matched some text prior to the EOB, first
			 * process it.
			  Try to read more data.  First move last chars to start of buffer.  don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		  Not enough room in the buffer - grow it.  just a shorter name for the current buffer  Include room in for 2 EOB chars.  Can't grow it, we don't own it.  Read in more data.  Extend the array by 50%, plus the number we really need.  "- 2" to take care of EOB's  yy_get_previous_state - get the state just before the EOB char was reached  yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
  undo effects of setting up yytext  need to shift things up to make room  +2 for EOB chars.  yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		  This was really a NUL.  need more input  This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					  Reset buffer status. FALLTHROUGH cast for 8-bit char's  preserve yytext  ifndef YY_NO_INPUT * Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 * Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
  TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
      Flush out information for old buffer.  We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 * Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
  yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 * Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
  Not sure if we should pop here.  Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
  If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     * Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
  We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 * Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
  This block is copied from yy_switch_to_buffer.  Flush out information for old buffer.  Only push if top exists. Otherwise, replace top.  copied from yy_switch_to_buffer. * Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
  Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
  First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
          After all that talk, this was set to 1 anyways...  Increase the buffer to prepare for a possible push.  arbitrary grow size  zero only the new slots.* Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
  They forgot to leave room for the EOB's.  "- 2" to take care of EOB's * Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 * Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
  Get memory for full buffer, including space for trailing EOB's.  It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	  Redefine yyless() so it works in section 3 code.  Undo effects of setting up yytext.  Accessor  methods (get/set functions) to struct members. * Get the current line number.
 * 
 * Get the input stream.
 * 
 * Get the output stream.
 * 
 * Get the length of the current token.
 * 
 * Get the current token.
 * 
 * Set the current line number.
 * @param _line_number line number
 * 
 * Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
  Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
      We do not touch yylineno unless the option is enabled.  Defined in main.c  For future reference: Set errno on error, since we are called by
     * yylex_init()
      yylex_destroy is for both reentrant and non-reentrant scanners.  Pop the buffer stack, destroying each element.  Destroy the stack itself.  Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. 
 * Internal utility routines.
  The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	  see yyrealloc() for (char *) cast  second stage lexer  Do not pass unneeded T_EOL to the parser. 
			 * For the parser, update file/lineno at the first token
			 * of each statement. Generally, \n is a statement
			 * terminator in Kconfig, but it is not always true
			 * because \n could be escaped by a backslash.
			  get the whole line because we do not know the end of token.  push back unused characters to the input stream  push back unused characters to the input stream 
 * Try to open specified file with following names:
 * ./name
 * $(srctree)/name
 * The latter is used when srctree is separate from objtree
 * when compiling the kernel.
 * Return NULL if file is not found.
  ignore wildcard patterns that return no result  A lexical scanner generated by flex  First, we deal with  platform-specific or compiler-specific issues.  begin standard C headers.  end standard C headers.  flex integer type definitions  C99 systems have <inttypes.h>. Non-C99 systems may or may not.  C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
  Limits of integral types.  ! C99  ! FLEXINT_H  begin standard C++ headers.  TODO: this is always defined, so inline it  Returned upon end-of-file.  Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
  Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
  Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
  Action number for EOF rule of a given start state.  Special action meaning "start processing a new file".  Size of default input buffer.  On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
  __ia64__  The state buf must be large enough to hold one state per character in the main buffer.
  Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
      Return all but the first "n" matched characters back to the input stream.  Undo effects of setting up yytext.  set up yytext again  input buffer  current position in input buffer  Size of input buffer in bytes, not including room for EOB
	 * characters.
	  Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	  Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	  Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	  Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 *< The line count. *< The column count.  Whether to try to fill the input buffer when we reach the
	 * end of it.
	  When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	  !YY_STRUCT_YY_BUFFER_STATE  Stack of input buffers. *< index of top of stack. *< capacity of stack. *< Stack as an array.  We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
  Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
  yy_hold_char holds the character lost when yytext is formed.  number of characters read into yy_ch_buf  Points to current character in buffer.  whether we need to initialize  start state number  Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
  Begin user sect3 CONSTCOND Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
  This struct is not used in this scanner,
   but its presence is necessary.  Table of booleans, true if rule could match eol.  The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
  SPDX-License-Identifier: GPL-2.0 
 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>
  Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
  Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience.  Macros after this point can all be overridden by user definitions in
 * section 1.
  Amount of stuff to slurp up with each read.  On IA-64, the buffer size is 16k, not 8k  __ia64__  Copy whatever the last rule matched to the standard output.  This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
  Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
  No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
  Number of entries by which start-condition stack grows.  Report a fatal error.  end tables serialization structures and prototypes  Default declaration of generated scanner - a define so the user can
 * easily add parameters.
  !YY_DECL  Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
  Code executed at the end of each rule. LINTED* The main scanner function which does all the work.
  first start state CONSTCOND loops until end-of-file is reached  Support of yytext.  yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		  This label is used only to access EOF actions.  beginning of action switch  ignore comment  whitespaces  rule 3 can match eol  escaped new line  rule 4 can match eol  this token includes at least one '$'  rule 56 can match eol  rule 62 can match eol  rule 64 can match eol  undo effects of setting up yytext  set up yytext again  rule 65 can match eol  Amount of text matched not including the EOB char.  Undo the effects of YY_DO_BEFORE_ACTION.  We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			  Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		  This was really a NUL.  Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			  Consume the NUL.  Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					  end of action switch  end of scanning one token  end of user's declarations  end of yylex  yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
  Don't try to fill the buffer, so this is an EOF.  We matched a single character, the EOB, so
			 * treat this as a final EOF.
			  We matched some text prior to the EOB, first
			 * process it.
			  Try to read more data.  First move last chars to start of buffer.  don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		  Not enough room in the buffer - grow it.  just a shorter name for the current buffer  Include room in for 2 EOB chars.  Can't grow it, we don't own it.  Read in more data.  Extend the array by 50%, plus the number we really need.  "- 2" to take care of EOB's  yy_get_previous_state - get the state just before the EOB char was reached  yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
  undo effects of setting up yytext  need to shift things up to make room  +2 for EOB chars.  yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		  This was really a NUL.  need more input  This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					  Reset buffer status. FALLTHROUGH cast for 8-bit char's  preserve yytext  ifndef YY_NO_INPUT * Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 * Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
  TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
      Flush out information for old buffer.  We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 * Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
  yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 * Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
  Not sure if we should pop here.  Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
  If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     * Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
  We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 * Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
  This block is copied from yy_switch_to_buffer.  Flush out information for old buffer.  Only push if top exists. Otherwise, replace top.  copied from yy_switch_to_buffer. * Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
  Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
  First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
          After all that talk, this was set to 1 anyways...  Increase the buffer to prepare for a possible push.  arbitrary grow size  zero only the new slots.* Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
  They forgot to leave room for the EOB's.  "- 2" to take care of EOB's * Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 * Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
  Get memory for full buffer, including space for trailing EOB's.  It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	  Redefine yyless() so it works in section 3 code.  Undo effects of setting up yytext.  Accessor  methods (get/set functions) to struct members. * Get the current line number.
 * 
 * Get the input stream.
 * 
 * Get the output stream.
 * 
 * Get the length of the current token.
 * 
 * Get the current token.
 * 
 * Set the current line number.
 * @param _line_number line number
 * 
 * Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
  Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
      We do not touch yylineno unless the option is enabled.  Defined in main.c  For future reference: Set errno on error, since we are called by
     * yylex_init()
      yylex_destroy is for both reentrant and non-reentrant scanners.  Pop the buffer stack, destroying each element.  Destroy the stack itself.  Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. 
 * Internal utility routines.
  The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	  see yyrealloc() for (char *) cast  second stage lexer  Do not pass unneeded T_EOL to the parser. 
			 * For the parser, update file/lineno at the first token
			 * of each statement. Generally, \n is a statement
			 * terminator in Kconfig, but it is not always true
			 * because \n could be escaped by a backslash.
			  get the whole line because we do not know the end of token.  push back unused characters to the input stream  push back unused characters to the input stream 
 * Try to open specified file with following names:
 * ./name
 * $(srctree)/name
 * The latter is used when srctree is separate from objtree
 * when compiling the kernel.
 * Return NULL if file is not found.
  ignore wildcard patterns that return no result  A lexical scanner generated by flex  First, we deal with  platform-specific or compiler-specific issues.  begin standard C headers.  end standard C headers.  flex integer type definitions  C99 systems have <inttypes.h>. Non-C99 systems may or may not.  C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
  Limits of integral types.  ! C99  ! FLEXINT_H  begin standard C++ headers.  TODO: this is always defined, so inline it  Returned upon end-of-file.  Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
  Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
  Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
  Action number for EOF rule of a given start state.  Special action meaning "start processing a new file".  Size of default input buffer.  On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
  __ia64__  The state buf must be large enough to hold one state per character in the main buffer.
  Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
      Return all but the first "n" matched characters back to the input stream.  Undo effects of setting up yytext.  set up yytext again  input buffer  current position in input buffer  Size of input buffer in bytes, not including room for EOB
	 * characters.
	  Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	  Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	  Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	  Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 *< The line count. *< The column count.  Whether to try to fill the input buffer when we reach the
	 * end of it.
	  When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	  !YY_STRUCT_YY_BUFFER_STATE  Stack of input buffers. *< index of top of stack. *< capacity of stack. *< Stack as an array.  We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
  Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
  yy_hold_char holds the character lost when yytext is formed.  number of characters read into yy_ch_buf  Points to current character in buffer.  whether we need to initialize  start state number  Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
  Begin user sect3 CONSTCOND Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
  This struct is not used in this scanner,
   but its presence is necessary.  Table of booleans, true if rule could match eol.  The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
  SPDX-License-Identifier: GPL-2.0 
 * Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>
  Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
  Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience.  Macros after this point can all be overridden by user definitions in
 * section 1.
  Amount of stuff to slurp up with each read.  On IA-64, the buffer size is 16k, not 8k  __ia64__  Copy whatever the last rule matched to the standard output.  This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
  Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
  No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
  Number of entries by which start-condition stack grows.  Report a fatal error.  end tables serialization structures and prototypes  Default declaration of generated scanner - a define so the user can
 * easily add parameters.
  !YY_DECL  Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
  Code executed at the end of each rule. LINTED* The main scanner function which does all the work.
  first start state CONSTCOND loops until end-of-file is reached  Support of yytext.  yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		  This label is used only to access EOF actions.  beginning of action switch  ignore comment  whitespaces  rule 3 can match eol  escaped new line  rule 4 can match eol  this token includes at least one '$'  rule 56 can match eol  rule 62 can match eol  rule 64 can match eol  undo effects of setting up yytext  set up yytext again  rule 65 can match eol  Amount of text matched not including the EOB char.  Undo the effects of YY_DO_BEFORE_ACTION.  We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			  Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		  This was really a NUL.  Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			  Consume the NUL.  Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					  end of action switch  end of scanning one token  end of user's declarations  end of yylex  yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
  Don't try to fill the buffer, so this is an EOF.  We matched a single character, the EOB, so
			 * treat this as a final EOF.
			  We matched some text prior to the EOB, first
			 * process it.
			  Try to read more data.  First move last chars to start of buffer.  don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		  Not enough room in the buffer - grow it.  just a shorter name for the current buffer  Include room in for 2 EOB chars.  Can't grow it, we don't own it.  Read in more data.  Extend the array by 50%, plus the number we really need.  "- 2" to take care of EOB's  yy_get_previous_state - get the state just before the EOB char was reached  yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
  undo effects of setting up yytext  need to shift things up to make room  +2 for EOB chars.  yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		  This was really a NUL.  need more input  This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					  Reset buffer status. FALLTHROUGH cast for 8-bit char's  preserve yytext  ifndef YY_NO_INPUT * Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 * Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
  TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
      Flush out information for old buffer.  We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 * Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
  yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 * Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
  Not sure if we should pop here.  Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
  If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     * Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
  We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 * Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
  This block is copied from yy_switch_to_buffer.  Flush out information for old buffer.  Only push if top exists. Otherwise, replace top.  copied from yy_switch_to_buffer. * Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
  Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
  First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
          After all that talk, this was set to 1 anyways...  Increase the buffer to prepare for a possible push.  arbitrary grow size  zero only the new slots.* Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
  They forgot to leave room for the EOB's.  "- 2" to take care of EOB's * Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 * Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
  Get memory for full buffer, including space for trailing EOB's.  It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	  Redefine yyless() so it works in section 3 code.  Undo effects of setting up yytext.  Accessor  methods (get/set functions) to struct members. * Get the current line number.
 * 
 * Get the input stream.
 * 
 * Get the output stream.
 * 
 * Get the length of the current token.
 * 
 * Get the current token.
 * 
 * Set the current line number.
 * @param _line_number line number
 * 
 * Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
  Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
      We do not touch yylineno unless the option is enabled.  Defined in main.c  For future reference: Set errno on error, since we are called by
     * yylex_init()
      yylex_destroy is for both reentrant and non-reentrant scanners.  Pop the buffer stack, destroying each element.  Destroy the stack itself.  Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. 
 * Internal utility routines.
  The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	  see yyrealloc() for (char *) cast  second stage lexer  Do not pass unneeded T_EOL to the parser. 
			 * For the parser, update file/lineno at the first token
			 * of each statement. Generally, \n is a statement
			 * terminator in Kconfig, but it is not always true
			 * because \n could be escaped by a backslash.
			  get the whole line because we do not know the end of token.  push back unused characters to the input stream  push back unused characters to the input stream 
 * Try to open specified file with following names:
 * ./name
 * $(srctree)/name
 * The latter is used when srctree is separate from objtree
 * when compiling the kernel.
 * Return NULL if file is not found.
  ignore wildcard patterns that return no result 