**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 Jonathan Gordon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** For isspace() * NOTE: NVRAM_CONFIG_VERSION is in settings_list.h
     and you may need to update it if you edit this file  in all the following macros the args are:
    - flags: bitwise | or the F_ bits in settings_list.h
    - var: pointer to the variable being changed (usually in global_settings)
    - lang_id: LANG_* id to display in menus and setting screens for the setting
    - default: the default value for the variable, set if settings are reset
    - name: the name of the setting in config files
    - cfg_vals: comma separated list of legal values to write to cfg files.
                The values correspond to the values 0,1,2,etc. of the setting.
                NULL if just the number itself should be written to the file.
                No spaces between the values and the commas!
    - cb: the callback used by the setting screen.
 Use for int settings which use the set_sound() function to set them  Use for bool variables which don't use LANG_SET_BOOL_YES and LANG_SET_BOOL_NO
      or dont save as "off" or "on" in the cfg.
   cfgvals are comma separated values (without spaces after the comma!) to write
      for 'false' and 'true' (in this order)
   yes_id is the lang_id for the 'yes' (or 'on') option in the menu
   no_id is the lang_id for the 'no' (or 'off') option in the menu
  bool setting which does use LANG_YES and _NO and save as "off,on"  int variable which is NOT saved to .cfg files,
    (Use NVRAM() in the flags to save to the nvram (or nvram.bin file)  setting which stores as a filename (or another string) in the .cfgvals
    The string must be a char array (which all of our string settings are),
    not just a char pointer.
    prefix: The absolute path to not save in the variable, ex /.rockbox/wps_file
    suffix: The file extention (usually...) e.g .wps_file
    If the prefix is set (not NULL), then the suffix must be set as well.
   Used for settings which use the set_option() setting screen.
    The ... arg is a list of pointers to strings to display in the setting
    screen. These can either be literal strings, or ID2P(LANG_*)  Similar to above, except the strings to display are taken from cfg_vals,
   the ... arg is a list of ID's to talk for the strings, can use TALK_ID()'s   for settings which use the set_int() setting screen.
    unit is the UNIT_ define to display/talk.
    the first one saves a string to the config file,
    the second one saves the variable value to the config file  some sets of values which are used more than once, to save memory  Default theme settings  sandisk sansa clip zip and samsung yh-820  ugly expansion needed  greyscale  monochrome  HAVE_REMOTE_LCD  these should be in the config.h files  HAVE_RECORDING  HAVE_BACKLIGHT  HAVE_BACKLIGHT || HAVE_LCD_SLEEP_SETTING  cutoff/center  q  gain  Replacement for sscanf(value, "%d ..., &var->A, ...);  HAVE_HOTKEY  volume limiter  sound settings  Tone controls  Hardware EQ tone controls  Band gain is generic  AUDIOHW_HAVE_EQ_BAND2  AUDIOHW_HAVE_EQ_BAND3  AUDIOHW_HAVE_EQ_BAND4  AUDIOHW_HAVE_EQ_BAND5  Frequencies vary with samplerate but at least the user has an idea
     * about the bands and it will be correct with normal playback rates.  Band 1  Band 2  Band 3  Band 4  Band 5  HAVE_WM8978  AUDIOHW_HAVE_EQ  3-d enhancement effect  playback  CHOICE_SETTING( repeat_mode )  HAVE_PLAY_FREQ  LCD  its easier to leave this one un-macro()ed for the time being  HAVE_BACKLIGHT  display  system  use this setting for user code even if there's no exchangable battery
 * support enabled  define min/max/inc for this file if there's only one battery  its easier to leave this one un-macro()ed for the time being  IPOD_VIDEO  IPOD_VIDEO  tuner  remote lcd  HAVE_BACKLIGHT * End of old RTC config block * !HAS_BUTTON_HOLD  backlight fading  HAVE_BACKLIGHT  more playback  disk  HAVE_DISK_STORAGE  browser  file sorting  bookmarks  peak meter  skip -1 entry  HAVE_RECORDING  voice  recording  DEFAULT_REC_MIC_GAIN  DEFAULT_REC_LEFT_GAIN  DEFAULT_REC_RIGHT_GAIN * Encoder settings start - keep these together * aiff_enc  (no settings yet)  mp3_enc  wav_enc  (no settings yet)  wavpack_enc  (no settings yet) * Encoder settings end * values for the trigger  HAVE_RECORDING  TO DO: additional restictions of following REP items?  HAVE_HISTOGRAM  replay gain  crossfade  crossfeed  equalizer  0..32768 Hz  0..64 (or 0.0 to 6.4)  -240..240 (or -24db to +24db)  dithering  surround  auditory fatigue reduction  PBE  timestretch  compressor enable dircache for all targets > 2MB of RAM by default The order must match with that in unicode.c  HAVE_LCD_SLEEP_SETTING  HAVE_BACKLIGHT  CONFIG_TUNER  HAVE_RTC_ALARM  Customizable icons  HAVE_REMOTE_LCD  HAVE_WHEEL_ACCELERATION  keyclick  If specific values are set for touchpad sensitivity setting we use those  we failback to boolean normal/high values  boolean or analogig values  HAVE_TOUCHPAD_SENSITIVITY_SETTING  HAVE_HEADPHONE_DETECTION  HAVE_HEADPHONE_DETECTION  HAVE_SPEAKER  CHOICE_SETTING( usb_keypad_mode )  Customizable list  lang string here is never actually used **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 Jonathan Gordon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** For isspace() * NOTE: NVRAM_CONFIG_VERSION is in settings_list.h
     and you may need to update it if you edit this file  in all the following macros the args are:
    - flags: bitwise | or the F_ bits in settings_list.h
    - var: pointer to the variable being changed (usually in global_settings)
    - lang_id: LANG_* id to display in menus and setting screens for the setting
    - default: the default value for the variable, set if settings are reset
    - name: the name of the setting in config files
    - cfg_vals: comma separated list of legal values to write to cfg files.
                The values correspond to the values 0,1,2,etc. of the setting.
                NULL if just the number itself should be written to the file.
                No spaces between the values and the commas!
    - cb: the callback used by the setting screen.
 Use for int settings which use the set_sound() function to set them  Use for bool variables which don't use LANG_SET_BOOL_YES and LANG_SET_BOOL_NO
      or dont save as "off" or "on" in the cfg.
   cfgvals are comma separated values (without spaces after the comma!) to write
      for 'false' and 'true' (in this order)
   yes_id is the lang_id for the 'yes' (or 'on') option in the menu
   no_id is the lang_id for the 'no' (or 'off') option in the menu
  bool setting which does use LANG_YES and _NO and save as "off,on"  int variable which is NOT saved to .cfg files,
    (Use NVRAM() in the flags to save to the nvram (or nvram.bin file)  setting which stores as a filename (or another string) in the .cfgvals
    The string must be a char array (which all of our string settings are),
    not just a char pointer.
    prefix: The absolute path to not save in the variable, ex /.rockbox/wps_file
    suffix: The file extention (usually...) e.g .wps_file
    If the prefix is set (not NULL), then the suffix must be set as well.
   Used for settings which use the set_option() setting screen.
    The ... arg is a list of pointers to strings to display in the setting
    screen. These can either be literal strings, or ID2P(LANG_*)  Similar to above, except the strings to display are taken from cfg_vals,
   the ... arg is a list of ID's to talk for the strings, can use TALK_ID()'s   for settings which use the set_int() setting screen.
    unit is the UNIT_ define to display/talk.
    the first one saves a string to the config file,
    the second one saves the variable value to the config file  some sets of values which are used more than once, to save memory  Default theme settings  sandisk sansa clip zip and samsung yh-820  ugly expansion needed  greyscale  monochrome  HAVE_REMOTE_LCD  these should be in the config.h files  HAVE_RECORDING  HAVE_BACKLIGHT  HAVE_BACKLIGHT || HAVE_LCD_SLEEP_SETTING  cutoff/center  q  gain  Replacement for sscanf(value, "%d ..., &var->A, ...);  HAVE_HOTKEY  volume limiter  sound settings  Tone controls  Hardware EQ tone controls  Band gain is generic  AUDIOHW_HAVE_EQ_BAND2  AUDIOHW_HAVE_EQ_BAND3  AUDIOHW_HAVE_EQ_BAND4  AUDIOHW_HAVE_EQ_BAND5  Frequencies vary with samplerate but at least the user has an idea
     * about the bands and it will be correct with normal playback rates.  Band 1  Band 2  Band 3  Band 4  Band 5  HAVE_WM8978  AUDIOHW_HAVE_EQ  3-d enhancement effect  playback  CHOICE_SETTING( repeat_mode )  HAVE_PLAY_FREQ  LCD  its easier to leave this one un-macro()ed for the time being  HAVE_BACKLIGHT  display  system  use this setting for user code even if there's no exchangable battery
 * support enabled  define min/max/inc for this file if there's only one battery  its easier to leave this one un-macro()ed for the time being  IPOD_VIDEO  IPOD_VIDEO  tuner  remote lcd  HAVE_BACKLIGHT * End of old RTC config block * !HAS_BUTTON_HOLD  backlight fading  HAVE_BACKLIGHT  more playback  disk  HAVE_DISK_STORAGE  browser  file sorting  bookmarks  peak meter  skip -1 entry  HAVE_RECORDING  voice  recording  DEFAULT_REC_MIC_GAIN  DEFAULT_REC_LEFT_GAIN  DEFAULT_REC_RIGHT_GAIN * Encoder settings start - keep these together * aiff_enc  (no settings yet)  mp3_enc  wav_enc  (no settings yet)  wavpack_enc  (no settings yet) * Encoder settings end * values for the trigger  HAVE_RECORDING  TO DO: additional restictions of following REP items?  HAVE_HISTOGRAM  replay gain  crossfade  crossfeed  equalizer  0..32768 Hz  0..64 (or 0.0 to 6.4)  -240..240 (or -24db to +24db)  dithering  surround  auditory fatigue reduction  PBE  timestretch  compressor enable dircache for all targets > 2MB of RAM by default The order must match with that in unicode.c  HAVE_LCD_SLEEP_SETTING  HAVE_BACKLIGHT  CONFIG_TUNER  HAVE_RTC_ALARM  Customizable icons  HAVE_REMOTE_LCD  HAVE_WHEEL_ACCELERATION  keyclick  If specific values are set for touchpad sensitivity setting we use those  we failback to boolean normal/high values  boolean or analogig values  HAVE_TOUCHPAD_SENSITIVITY_SETTING  HAVE_HEADPHONE_DETECTION  HAVE_HEADPHONE_DETECTION  HAVE_SPEAKER  CHOICE_SETTING( usb_keypad_mode )  Customizable list  lang string here is never actually used **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 Jonathan Gordon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** For isspace() * NOTE: NVRAM_CONFIG_VERSION is in settings_list.h
     and you may need to update it if you edit this file  in all the following macros the args are:
    - flags: bitwise | or the F_ bits in settings_list.h
    - var: pointer to the variable being changed (usually in global_settings)
    - lang_id: LANG_* id to display in menus and setting screens for the setting
    - default: the default value for the variable, set if settings are reset
    - name: the name of the setting in config files
    - cfg_vals: comma separated list of legal values to write to cfg files.
                The values correspond to the values 0,1,2,etc. of the setting.
                NULL if just the number itself should be written to the file.
                No spaces between the values and the commas!
    - cb: the callback used by the setting screen.
 Use for int settings which use the set_sound() function to set them  Use for bool variables which don't use LANG_SET_BOOL_YES and LANG_SET_BOOL_NO
      or dont save as "off" or "on" in the cfg.
   cfgvals are comma separated values (without spaces after the comma!) to write
      for 'false' and 'true' (in this order)
   yes_id is the lang_id for the 'yes' (or 'on') option in the menu
   no_id is the lang_id for the 'no' (or 'off') option in the menu
  bool setting which does use LANG_YES and _NO and save as "off,on"  int variable which is NOT saved to .cfg files,
    (Use NVRAM() in the flags to save to the nvram (or nvram.bin file)  setting which stores as a filename (or another string) in the .cfgvals
    The string must be a char array (which all of our string settings are),
    not just a char pointer.
    prefix: The absolute path to not save in the variable, ex /.rockbox/wps_file
    suffix: The file extention (usually...) e.g .wps_file
    If the prefix is set (not NULL), then the suffix must be set as well.
   Used for settings which use the set_option() setting screen.
    The ... arg is a list of pointers to strings to display in the setting
    screen. These can either be literal strings, or ID2P(LANG_*)  Similar to above, except the strings to display are taken from cfg_vals,
   the ... arg is a list of ID's to talk for the strings, can use TALK_ID()'s   for settings which use the set_int() setting screen.
    unit is the UNIT_ define to display/talk.
    the first one saves a string to the config file,
    the second one saves the variable value to the config file  some sets of values which are used more than once, to save memory  Default theme settings  sandisk sansa clip zip and samsung yh-820  ugly expansion needed  greyscale  monochrome  HAVE_REMOTE_LCD  these should be in the config.h files  HAVE_RECORDING  HAVE_BACKLIGHT  HAVE_BACKLIGHT || HAVE_LCD_SLEEP_SETTING  cutoff/center  q  gain  Replacement for sscanf(value, "%d ..., &var->A, ...);  HAVE_HOTKEY  volume limiter  sound settings  Tone controls  Hardware EQ tone controls  Band gain is generic  AUDIOHW_HAVE_EQ_BAND2  AUDIOHW_HAVE_EQ_BAND3  AUDIOHW_HAVE_EQ_BAND4  AUDIOHW_HAVE_EQ_BAND5  Frequencies vary with samplerate but at least the user has an idea
     * about the bands and it will be correct with normal playback rates.  Band 1  Band 2  Band 3  Band 4  Band 5  HAVE_WM8978  AUDIOHW_HAVE_EQ  3-d enhancement effect  playback  CHOICE_SETTING( repeat_mode )  HAVE_PLAY_FREQ  LCD  its easier to leave this one un-macro()ed for the time being  HAVE_BACKLIGHT  display  system  use this setting for user code even if there's no exchangable battery
 * support enabled  define min/max/inc for this file if there's only one battery  its easier to leave this one un-macro()ed for the time being  IPOD_VIDEO  IPOD_VIDEO  tuner  remote lcd  HAVE_BACKLIGHT * End of old RTC config block * !HAS_BUTTON_HOLD  backlight fading  HAVE_BACKLIGHT  more playback  disk  HAVE_DISK_STORAGE  browser  file sorting  bookmarks  peak meter  skip -1 entry  HAVE_RECORDING  voice  recording  DEFAULT_REC_MIC_GAIN  DEFAULT_REC_LEFT_GAIN  DEFAULT_REC_RIGHT_GAIN * Encoder settings start - keep these together * aiff_enc  (no settings yet)  mp3_enc  wav_enc  (no settings yet)  wavpack_enc  (no settings yet) * Encoder settings end * values for the trigger  HAVE_RECORDING  TO DO: additional restictions of following REP items?  HAVE_HISTOGRAM  replay gain  crossfade  crossfeed  equalizer  0..32768 Hz  0..64 (or 0.0 to 6.4)  -240..240 (or -24db to +24db)  dithering  surround  auditory fatigue reduction  PBE  timestretch  compressor enable dircache for all targets > 2MB of RAM by default The order must match with that in unicode.c  HAVE_LCD_SLEEP_SETTING  HAVE_BACKLIGHT  CONFIG_TUNER  HAVE_RTC_ALARM  Customizable icons  HAVE_REMOTE_LCD  HAVE_WHEEL_ACCELERATION  keyclick  If specific values are set for touchpad sensitivity setting we use those  we failback to boolean normal/high values  boolean or analogig values  HAVE_TOUCHPAD_SENSITIVITY_SETTING  HAVE_HEADPHONE_DETECTION  HAVE_HEADPHONE_DETECTION  HAVE_SPEAKER  CHOICE_SETTING( usb_keypad_mode )  Customizable list  lang string here is never actually used 