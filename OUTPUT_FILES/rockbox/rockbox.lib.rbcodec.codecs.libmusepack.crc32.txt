
*  C Implementation: crc32
*
*  code from http://www.w3.org/TR/PNG/#D-CRCAppendix
*
 Table of CRCs of all 8-bit messages.  Flag: has the table been computed? Initially false.  Make the table for a fast CRC.  Update a running CRC with the bytes buf[0..len-1]--the CRC
    should be initialized to all 1's, and the transmitted value
    is the 1's complement of the final running CRC (see the
    crc() routine below).  Return the CRC of the bytes buf[0..len-1]. 
*  C Implementation: crc32
*
*  code from http://www.w3.org/TR/PNG/#D-CRCAppendix
*
 Table of CRCs of all 8-bit messages.  Flag: has the table been computed? Initially false.  Make the table for a fast CRC.  Update a running CRC with the bytes buf[0..len-1]--the CRC
    should be initialized to all 1's, and the transmitted value
    is the 1's complement of the final running CRC (see the
    crc() routine below).  Return the CRC of the bytes buf[0..len-1]. 
*  C Implementation: crc32
*
*  code from http://www.w3.org/TR/PNG/#D-CRCAppendix
*
 Table of CRCs of all 8-bit messages.  Flag: has the table been computed? Initially false.  Make the table for a fast CRC.  Update a running CRC with the bytes buf[0..len-1]--the CRC
    should be initialized to all 1's, and the transmitted value
    is the 1's complement of the final running CRC (see the
    crc() routine below).  Return the CRC of the bytes buf[0..len-1]. 