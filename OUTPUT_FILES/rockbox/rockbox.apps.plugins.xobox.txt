**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Eli Sherer
 *               2007 Antoine Cellerier
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** player movement     1      3 0 4      2     ball movement (12 ways)     UUL   UR       UL       UR    ULL    .    URR  DLL         DRR    DL       DR       DDL   DDR     8x22=176  used to imply danger  used for frame and filling  color used for the player  used to imply danger  used for frame and filling  color used for the player  empty spot  filled spot  the red trail of the player  The time (in ms) for one iteration through the game loop - decrease this
   to speed up the game - note that current_tick is (currently) only accurate
   to 10ms.
 CYCLETIME = (11-speed)*10 ms  Percentage of screen that needs to be filled
                             * in order to win the game 
   00011000 0x18 - 11100111 0xe7
   00111100 0x3c - 11100111 0xe7
   01111110 0x7e - 11000011 0xc3
   11111111 0xff - 00000000 0x00
   11111111 0xff - 00000000 0x00
   01111110 0x7e - 11000011 0xc3
   00111100 0x3c - 11100111 0xe7
   00011000 0x18 - 11100111 0xe7
  Alien (QIX)  Player (XONIX) 
   0110 0x6 - 1001 0x9
   1111 0xf - 0110 0x6
   1111 0xf - 0110 0x6
   0110 0x6 - 1001 0x9
  Alien (QIX)  Player (XONIX)  velocity  position on screen  angle  black_qix  position on board ************************** STACK STUFF ********************* the stack  position on board  SE  SOF ********************** END OF STACK STUFF ******************** calculate the new x coordinate of the ball according to angle and speed  (def & DIR_LL)  calculate the new y coordinate of the ball according to angle and speed  (deg & DIR_UU)  make random function get it's value from the device ticker  get a random number between 0 and range-1  initializes the test help board  testboard  UNCHEKED == (int)0  initializes the game board on with the player,qix's and black qix  make a nice cyan frame  (level+2) is the number of qixes  1 or 2 pix-per-sec  not on frame  Work arround a nasty bug. FIXME black_qix.velocity=1;
       black_qix.x=BOARD_X+(BOARD_W*CUBE_SIZE)/2-CUBE_SIZE/2;
       black_qix.y=BOARD_Y+(BOARD_H*CUBE_SIZE)-CUBE_SIZE-CUBE_SIZE/2;
       black_qix.angle=MOVE_UR;  calculates the percentage of the screen filling  draw the board on with all the game figures  This area was previously flagged as infested  Infested area  take care of stuff after xonix has landed on a filled spot  add qixes to board  add qixes to board  returns the color the real pixel(x,y) on the lcd is pointing at  if inside board  returns the color the ball on (newx,newy) is heading at *----*
   checks the four edge points of the square if 1st of all |    |
   are a trail (cause it's a lose life situation) and 2nd  |    |
   if it's filled so it needs to bounce.                   *____*
  returns true if the (side) of the block          -***-
   starting from (newx,newy) has any filled pixels  *   *
                                                    -***-
  move the board forward timewise  move_qix(&black_qix,true);  continue drawing  finish drawing  stop moving  start drawing  if the block after next is empty and we're moving onto filled, stop  finished level  init game's variables  the main menu  general keypad handler loop  end while  for no warnings on compiling  plugin main procedure  Turn off backlight timeout  Turn on backlight timeout (revert to settings) **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Eli Sherer
 *               2007 Antoine Cellerier
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** player movement     1      3 0 4      2     ball movement (12 ways)     UUL   UR       UL       UR    ULL    .    URR  DLL         DRR    DL       DR       DDL   DDR     8x22=176  used to imply danger  used for frame and filling  color used for the player  used to imply danger  used for frame and filling  color used for the player  empty spot  filled spot  the red trail of the player  The time (in ms) for one iteration through the game loop - decrease this
   to speed up the game - note that current_tick is (currently) only accurate
   to 10ms.
 CYCLETIME = (11-speed)*10 ms  Percentage of screen that needs to be filled
                             * in order to win the game 
   00011000 0x18 - 11100111 0xe7
   00111100 0x3c - 11100111 0xe7
   01111110 0x7e - 11000011 0xc3
   11111111 0xff - 00000000 0x00
   11111111 0xff - 00000000 0x00
   01111110 0x7e - 11000011 0xc3
   00111100 0x3c - 11100111 0xe7
   00011000 0x18 - 11100111 0xe7
  Alien (QIX)  Player (XONIX) 
   0110 0x6 - 1001 0x9
   1111 0xf - 0110 0x6
   1111 0xf - 0110 0x6
   0110 0x6 - 1001 0x9
  Alien (QIX)  Player (XONIX)  velocity  position on screen  angle  black_qix  position on board ************************** STACK STUFF ********************* the stack  position on board  SE  SOF ********************** END OF STACK STUFF ******************** calculate the new x coordinate of the ball according to angle and speed  (def & DIR_LL)  calculate the new y coordinate of the ball according to angle and speed  (deg & DIR_UU)  make random function get it's value from the device ticker  get a random number between 0 and range-1  initializes the test help board  testboard  UNCHEKED == (int)0  initializes the game board on with the player,qix's and black qix  make a nice cyan frame  (level+2) is the number of qixes  1 or 2 pix-per-sec  not on frame  Work arround a nasty bug. FIXME black_qix.velocity=1;
       black_qix.x=BOARD_X+(BOARD_W*CUBE_SIZE)/2-CUBE_SIZE/2;
       black_qix.y=BOARD_Y+(BOARD_H*CUBE_SIZE)-CUBE_SIZE-CUBE_SIZE/2;
       black_qix.angle=MOVE_UR;  calculates the percentage of the screen filling  draw the board on with all the game figures  This area was previously flagged as infested  Infested area  take care of stuff after xonix has landed on a filled spot  add qixes to board  add qixes to board  returns the color the real pixel(x,y) on the lcd is pointing at  if inside board  returns the color the ball on (newx,newy) is heading at *----*
   checks the four edge points of the square if 1st of all |    |
   are a trail (cause it's a lose life situation) and 2nd  |    |
   if it's filled so it needs to bounce.                   *____*
  returns true if the (side) of the block          -***-
   starting from (newx,newy) has any filled pixels  *   *
                                                    -***-
  move the board forward timewise  move_qix(&black_qix,true);  continue drawing  finish drawing  stop moving  start drawing  if the block after next is empty and we're moving onto filled, stop  finished level  init game's variables  the main menu  general keypad handler loop  end while  for no warnings on compiling  plugin main procedure  Turn off backlight timeout  Turn on backlight timeout (revert to settings) **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Eli Sherer
 *               2007 Antoine Cellerier
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** player movement     1      3 0 4      2     ball movement (12 ways)     UUL   UR       UL       UR    ULL    .    URR  DLL         DRR    DL       DR       DDL   DDR     8x22=176  used to imply danger  used for frame and filling  color used for the player  used to imply danger  used for frame and filling  color used for the player  empty spot  filled spot  the red trail of the player  The time (in ms) for one iteration through the game loop - decrease this
   to speed up the game - note that current_tick is (currently) only accurate
   to 10ms.
 CYCLETIME = (11-speed)*10 ms  Percentage of screen that needs to be filled
                             * in order to win the game 
   00011000 0x18 - 11100111 0xe7
   00111100 0x3c - 11100111 0xe7
   01111110 0x7e - 11000011 0xc3
   11111111 0xff - 00000000 0x00
   11111111 0xff - 00000000 0x00
   01111110 0x7e - 11000011 0xc3
   00111100 0x3c - 11100111 0xe7
   00011000 0x18 - 11100111 0xe7
  Alien (QIX)  Player (XONIX) 
   0110 0x6 - 1001 0x9
   1111 0xf - 0110 0x6
   1111 0xf - 0110 0x6
   0110 0x6 - 1001 0x9
  Alien (QIX)  Player (XONIX)  velocity  position on screen  angle  black_qix  position on board ************************** STACK STUFF ********************* the stack  position on board  SE  SOF ********************** END OF STACK STUFF ******************** calculate the new x coordinate of the ball according to angle and speed  (def & DIR_LL)  calculate the new y coordinate of the ball according to angle and speed  (deg & DIR_UU)  make random function get it's value from the device ticker  get a random number between 0 and range-1  initializes the test help board  testboard  UNCHEKED == (int)0  initializes the game board on with the player,qix's and black qix  make a nice cyan frame  (level+2) is the number of qixes  1 or 2 pix-per-sec  not on frame  Work arround a nasty bug. FIXME black_qix.velocity=1;
       black_qix.x=BOARD_X+(BOARD_W*CUBE_SIZE)/2-CUBE_SIZE/2;
       black_qix.y=BOARD_Y+(BOARD_H*CUBE_SIZE)-CUBE_SIZE-CUBE_SIZE/2;
       black_qix.angle=MOVE_UR;  calculates the percentage of the screen filling  draw the board on with all the game figures  This area was previously flagged as infested  Infested area  take care of stuff after xonix has landed on a filled spot  add qixes to board  add qixes to board  returns the color the real pixel(x,y) on the lcd is pointing at  if inside board  returns the color the ball on (newx,newy) is heading at *----*
   checks the four edge points of the square if 1st of all |    |
   are a trail (cause it's a lose life situation) and 2nd  |    |
   if it's filled so it needs to bounce.                   *____*
  returns true if the (side) of the block          -***-
   starting from (newx,newy) has any filled pixels  *   *
                                                    -***-
  move the board forward timewise  move_qix(&black_qix,true);  continue drawing  finish drawing  stop moving  start drawing  if the block after next is empty and we're moving onto filled, stop  finished level  init game's variables  the main menu  general keypad handler loop  end while  for no warnings on compiling  plugin main procedure  Turn off backlight timeout  Turn on backlight timeout (revert to settings) 