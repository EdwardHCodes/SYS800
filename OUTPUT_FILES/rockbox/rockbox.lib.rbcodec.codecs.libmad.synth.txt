
 * libmad - MPEG audio decoder library
 * Copyright (C) 2000-2004 Underbit Technologies, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * $Id$
 
 * NAME:        synth->init()
 * DESCRIPTION: initialize synth struct
  init the emac unit here, since this function should always be called
     before using libmad 
 * NAME:        synth->mute()
 * DESCRIPTION: zero all polyphase filterbank values, resetting synthesis
  dct32 asm implementation is slower on current arm systems  #ifdef FPM_ARM 
 * An optional optimization called here the Subband Synthesis Optimization
 * (SSO) improves the performance of subband synthesis at the expense of
 * accuracy.
 *
 * The idea is to simplify 32x32->64-bit multiplication to 32x32->32 such
 * that extra scaling and rounding are not necessary. This often allows the
 * compiler to use faster 32-bit multiply-accumulate instructions instead of
 * explicit 64-bit multiply, shift, and add instructions.
 *
 * SSO works like this: a full 32x32->64-bit multiply of two mad_fixed_t
 * values requires the result to be right-shifted 28 bits to be properly
 * scaled to the same fixed-point format. Right shifts can be applied at any
 * time to either operand or to the result, so the optimization involves
 * careful placement of these shifts to minimize the loss of accuracy.
 *
 * First, a 14-bit shift is applied with rounding at compile-time to the D[]
 * table of coefficients for the subband synthesis window. This only loses 2
 * bits of accuracy because the lower 12 bits are always zero. A second
 * 12-bit shift occurs after the DCT calculation. This loses 12 bits of
 * accuracy. Finally, a third 2-bit shift occurs just before the sample is
 * saved in the PCM buffer. 14 + 12 + 2 == 28 bits.
  FPM_DEFAULT without OPT_SSO will actually not work.  second SSO shift, with rounding  possible DCT speed optimization  This is a Coldfire version of the OPT_SPEED optimisation below, but in the
   case of Coldfire it does not loose additional precision.  This is an ARM version of the OPT_SPEED optimisation below. This
   implementation will loose 1 bit of accuracy.  hi = result  hi <<= 1 
 * NAME:        dct32()
 * DESCRIPTION: perform fast in[32]->out[32] DCT
  costab[i] = cos(PI / (2 * 32) * i)  0.998795456  0.995184727  0.989176510  0.980785280  0.970031253  0.956940336  0.941544065  0.923879533  0.903989293  0.881921264  0.857728610  0.831469612  0.803207531  0.773010453  0.740951125  0.707106781  0.671558955  0.634393284  0.595699304  0.555570233  0.514102744  0.471396737  0.427555093  0.382683432  0.336889853  0.290284677  0.242980180  0.195090322  0.146730474  0.098017140  0.049067674   0  16   1   2   3   4   5   6   7   8  24   9  10  11  12  20  28  13  14  18  22  26  30  15  17  19  21  23  25  27  29  31 
   * Totals:
   *  80 multiplies
   *  80 additions
   * 119 subtractions
   *  49 shifts (not counting SSO)
    third SSO shift and/or D[] optimization preshift 
 * NAME:        synth->full()
 * DESCRIPTION: perform full frequency PCM synthesis
  optimised version of synth_full  calculate 32 samples  shift result to libmad's fixed point format  D[32 - sb][i] == -D[sb][31 - i]  shift result to libmad's fixed point format  D[32 - sb][i] == -D[sb][31 - i]  calculate 32 samples  not FPM_COLDFIRE_EMAC and not FPM_ARM  calculate 32 samples  D[32 - sb][i] == -D[sb][31 - i]  D[32 - sb][i] == -D[sb][31 - i]  FPM_COLDFIRE_EMAC, FPM_ARM  rockbox: unused 
 * NAME:        synth->half()
 * DESCRIPTION: perform half frequency PCM synthesis
  calculate 16 samples  D[32 - sb][i] == -D[sb][31 - i]  unused 
 * NAME:        synth->frame()
 * DESCRIPTION: perform PCM synthesis of frame subband samples
  rockbox: unused  rockbox: unused 
 * libmad - MPEG audio decoder library
 * Copyright (C) 2000-2004 Underbit Technologies, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * $Id$
 
 * NAME:        synth->init()
 * DESCRIPTION: initialize synth struct
  init the emac unit here, since this function should always be called
     before using libmad 
 * NAME:        synth->mute()
 * DESCRIPTION: zero all polyphase filterbank values, resetting synthesis
  dct32 asm implementation is slower on current arm systems  #ifdef FPM_ARM 
 * An optional optimization called here the Subband Synthesis Optimization
 * (SSO) improves the performance of subband synthesis at the expense of
 * accuracy.
 *
 * The idea is to simplify 32x32->64-bit multiplication to 32x32->32 such
 * that extra scaling and rounding are not necessary. This often allows the
 * compiler to use faster 32-bit multiply-accumulate instructions instead of
 * explicit 64-bit multiply, shift, and add instructions.
 *
 * SSO works like this: a full 32x32->64-bit multiply of two mad_fixed_t
 * values requires the result to be right-shifted 28 bits to be properly
 * scaled to the same fixed-point format. Right shifts can be applied at any
 * time to either operand or to the result, so the optimization involves
 * careful placement of these shifts to minimize the loss of accuracy.
 *
 * First, a 14-bit shift is applied with rounding at compile-time to the D[]
 * table of coefficients for the subband synthesis window. This only loses 2
 * bits of accuracy because the lower 12 bits are always zero. A second
 * 12-bit shift occurs after the DCT calculation. This loses 12 bits of
 * accuracy. Finally, a third 2-bit shift occurs just before the sample is
 * saved in the PCM buffer. 14 + 12 + 2 == 28 bits.
  FPM_DEFAULT without OPT_SSO will actually not work.  second SSO shift, with rounding  possible DCT speed optimization  This is a Coldfire version of the OPT_SPEED optimisation below, but in the
   case of Coldfire it does not loose additional precision.  This is an ARM version of the OPT_SPEED optimisation below. This
   implementation will loose 1 bit of accuracy.  hi = result  hi <<= 1 
 * NAME:        dct32()
 * DESCRIPTION: perform fast in[32]->out[32] DCT
  costab[i] = cos(PI / (2 * 32) * i)  0.998795456  0.995184727  0.989176510  0.980785280  0.970031253  0.956940336  0.941544065  0.923879533  0.903989293  0.881921264  0.857728610  0.831469612  0.803207531  0.773010453  0.740951125  0.707106781  0.671558955  0.634393284  0.595699304  0.555570233  0.514102744  0.471396737  0.427555093  0.382683432  0.336889853  0.290284677  0.242980180  0.195090322  0.146730474  0.098017140  0.049067674   0  16   1   2   3   4   5   6   7   8  24   9  10  11  12  20  28  13  14  18  22  26  30  15  17  19  21  23  25  27  29  31 
   * Totals:
   *  80 multiplies
   *  80 additions
   * 119 subtractions
   *  49 shifts (not counting SSO)
    third SSO shift and/or D[] optimization preshift 
 * NAME:        synth->full()
 * DESCRIPTION: perform full frequency PCM synthesis
  optimised version of synth_full  calculate 32 samples  shift result to libmad's fixed point format  D[32 - sb][i] == -D[sb][31 - i]  shift result to libmad's fixed point format  D[32 - sb][i] == -D[sb][31 - i]  calculate 32 samples  not FPM_COLDFIRE_EMAC and not FPM_ARM  calculate 32 samples  D[32 - sb][i] == -D[sb][31 - i]  D[32 - sb][i] == -D[sb][31 - i]  FPM_COLDFIRE_EMAC, FPM_ARM  rockbox: unused 
 * NAME:        synth->half()
 * DESCRIPTION: perform half frequency PCM synthesis
  calculate 16 samples  D[32 - sb][i] == -D[sb][31 - i]  unused 
 * NAME:        synth->frame()
 * DESCRIPTION: perform PCM synthesis of frame subband samples
  rockbox: unused  rockbox: unused 
 * libmad - MPEG audio decoder library
 * Copyright (C) 2000-2004 Underbit Technologies, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * $Id$
 
 * NAME:        synth->init()
 * DESCRIPTION: initialize synth struct
  init the emac unit here, since this function should always be called
     before using libmad 
 * NAME:        synth->mute()
 * DESCRIPTION: zero all polyphase filterbank values, resetting synthesis
  dct32 asm implementation is slower on current arm systems  #ifdef FPM_ARM 
 * An optional optimization called here the Subband Synthesis Optimization
 * (SSO) improves the performance of subband synthesis at the expense of
 * accuracy.
 *
 * The idea is to simplify 32x32->64-bit multiplication to 32x32->32 such
 * that extra scaling and rounding are not necessary. This often allows the
 * compiler to use faster 32-bit multiply-accumulate instructions instead of
 * explicit 64-bit multiply, shift, and add instructions.
 *
 * SSO works like this: a full 32x32->64-bit multiply of two mad_fixed_t
 * values requires the result to be right-shifted 28 bits to be properly
 * scaled to the same fixed-point format. Right shifts can be applied at any
 * time to either operand or to the result, so the optimization involves
 * careful placement of these shifts to minimize the loss of accuracy.
 *
 * First, a 14-bit shift is applied with rounding at compile-time to the D[]
 * table of coefficients for the subband synthesis window. This only loses 2
 * bits of accuracy because the lower 12 bits are always zero. A second
 * 12-bit shift occurs after the DCT calculation. This loses 12 bits of
 * accuracy. Finally, a third 2-bit shift occurs just before the sample is
 * saved in the PCM buffer. 14 + 12 + 2 == 28 bits.
  FPM_DEFAULT without OPT_SSO will actually not work.  second SSO shift, with rounding  possible DCT speed optimization  This is a Coldfire version of the OPT_SPEED optimisation below, but in the
   case of Coldfire it does not loose additional precision.  This is an ARM version of the OPT_SPEED optimisation below. This
   implementation will loose 1 bit of accuracy.  hi = result  hi <<= 1 
 * NAME:        dct32()
 * DESCRIPTION: perform fast in[32]->out[32] DCT
  costab[i] = cos(PI / (2 * 32) * i)  0.998795456  0.995184727  0.989176510  0.980785280  0.970031253  0.956940336  0.941544065  0.923879533  0.903989293  0.881921264  0.857728610  0.831469612  0.803207531  0.773010453  0.740951125  0.707106781  0.671558955  0.634393284  0.595699304  0.555570233  0.514102744  0.471396737  0.427555093  0.382683432  0.336889853  0.290284677  0.242980180  0.195090322  0.146730474  0.098017140  0.049067674   0  16   1   2   3   4   5   6   7   8  24   9  10  11  12  20  28  13  14  18  22  26  30  15  17  19  21  23  25  27  29  31 
   * Totals:
   *  80 multiplies
   *  80 additions
   * 119 subtractions
   *  49 shifts (not counting SSO)
    third SSO shift and/or D[] optimization preshift 
 * NAME:        synth->full()
 * DESCRIPTION: perform full frequency PCM synthesis
  optimised version of synth_full  calculate 32 samples  shift result to libmad's fixed point format  D[32 - sb][i] == -D[sb][31 - i]  shift result to libmad's fixed point format  D[32 - sb][i] == -D[sb][31 - i]  calculate 32 samples  not FPM_COLDFIRE_EMAC and not FPM_ARM  calculate 32 samples  D[32 - sb][i] == -D[sb][31 - i]  D[32 - sb][i] == -D[sb][31 - i]  FPM_COLDFIRE_EMAC, FPM_ARM  rockbox: unused 
 * NAME:        synth->half()
 * DESCRIPTION: perform half frequency PCM synthesis
  calculate 16 samples  D[32 - sb][i] == -D[sb][31 - i]  unused 
 * NAME:        synth->frame()
 * DESCRIPTION: perform PCM synthesis of frame subband samples
  rockbox: unused  rockbox: unused 