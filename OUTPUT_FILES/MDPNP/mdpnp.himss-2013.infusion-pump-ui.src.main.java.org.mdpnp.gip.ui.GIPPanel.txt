*
 * @author Jeff Plourde
 *
 	private int img_src_x1, img_src_y1;			Dimension size = getSize();			double img_width = ice_cubes.getImage().getWidth(this);			double img_height = ice_cubes.getImage().getHeight(this);			if(img_width > 0 && img_height > 0) {				double scr_width = size.getWidth();				double scr_height = size.getHeight();				img_src_x1 = (int)((img_width-scr_width) / 2.0);				img_src_x2 = (int)( img_src_x1 + scr_width );				img_src_y1 = (int)((img_height-scr_height) /2.0);				img_src_y2 = (int)(img_src_y1+scr_height);			}				private final InfusionPumpModel infusionPumpModel;	private final ScheduledExecutorService executor;		this.infusionPumpModel = infusionPumpModel;		setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 36));		setBackground(new Color(255,255,255,180));		UIManager.put("FormattedTextField.background", new Color(185, 223, 246));		this.executor = executor; Drug Name Concentration  total mass/total volume in container Weight BSA (from weight/height) m^2 Dose mL/hr , mL/kg/hr, mcg/min|hr|day, mcg/kg/time,       volume / time , volume / body-mass / hr, drug mass / time, drug mass / body mass / time, drug mass / BSA / time, drug mass / time 		comp.setBorder(BorderFactory.createTitledBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED), text));, false	private final ImageIcon ice_cubes = new ImageIcon(GIPPanel.class.getResource("gradient.png"));		g.drawImage(ice_cubes.getImage(), 0, 0, getWidth(), getHeight(), img_src_x1, img_src_y1, img_src_x2, img_src_y2, null);		g.drawImage(mdpnp.getImage(), 0, 0, null);		super.paintComponent(g);*
 * @author Jeff Plourde
 *
 	private int img_src_x1, img_src_y1;			Dimension size = getSize();			double img_width = ice_cubes.getImage().getWidth(this);			double img_height = ice_cubes.getImage().getHeight(this);			if(img_width > 0 && img_height > 0) {				double scr_width = size.getWidth();				double scr_height = size.getHeight();				img_src_x1 = (int)((img_width-scr_width) / 2.0);				img_src_x2 = (int)( img_src_x1 + scr_width );				img_src_y1 = (int)((img_height-scr_height) /2.0);				img_src_y2 = (int)(img_src_y1+scr_height);			}				private final InfusionPumpModel infusionPumpModel;	private final ScheduledExecutorService executor;		this.infusionPumpModel = infusionPumpModel;		setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 36));		setBackground(new Color(255,255,255,180));		UIManager.put("FormattedTextField.background", new Color(185, 223, 246));		this.executor = executor; Drug Name Concentration  total mass/total volume in container Weight BSA (from weight/height) m^2 Dose mL/hr , mL/kg/hr, mcg/min|hr|day, mcg/kg/time,       volume / time , volume / body-mass / hr, drug mass / time, drug mass / body mass / time, drug mass / BSA / time, drug mass / time 		comp.setBorder(BorderFactory.createTitledBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED), text));, false	private final ImageIcon ice_cubes = new ImageIcon(GIPPanel.class.getResource("gradient.png"));		g.drawImage(ice_cubes.getImage(), 0, 0, getWidth(), getHeight(), img_src_x1, img_src_y1, img_src_x2, img_src_y2, null);		g.drawImage(mdpnp.getImage(), 0, 0, null);		super.paintComponent(g);*
 * @author Jeff Plourde
 *
 	private int img_src_x1, img_src_y1;			Dimension size = getSize();			double img_width = ice_cubes.getImage().getWidth(this);			double img_height = ice_cubes.getImage().getHeight(this);			if(img_width > 0 && img_height > 0) {				double scr_width = size.getWidth();				double scr_height = size.getHeight();				img_src_x1 = (int)((img_width-scr_width) / 2.0);				img_src_x2 = (int)( img_src_x1 + scr_width );				img_src_y1 = (int)((img_height-scr_height) /2.0);				img_src_y2 = (int)(img_src_y1+scr_height);			}				private final InfusionPumpModel infusionPumpModel;	private final ScheduledExecutorService executor;		this.infusionPumpModel = infusionPumpModel;		setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 36));		setBackground(new Color(255,255,255,180));		UIManager.put("FormattedTextField.background", new Color(185, 223, 246));		this.executor = executor; Drug Name Concentration  total mass/total volume in container Weight BSA (from weight/height) m^2 Dose mL/hr , mL/kg/hr, mcg/min|hr|day, mcg/kg/time,       volume / time , volume / body-mass / hr, drug mass / time, drug mass / body mass / time, drug mass / BSA / time, drug mass / time 		comp.setBorder(BorderFactory.createTitledBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED), text));, false	private final ImageIcon ice_cubes = new ImageIcon(GIPPanel.class.getResource("gradient.png"));		g.drawImage(ice_cubes.getImage(), 0, 0, getWidth(), getHeight(), img_src_x1, img_src_y1, img_src_x2, img_src_y2, null);		g.drawImage(mdpnp.getImage(), 0, 0, null);		super.paintComponent(g);*
 * @author Jeff Plourde
 *
 	private int img_src_x1, img_src_y1;			Dimension size = getSize();			double img_width = ice_cubes.getImage().getWidth(this);			double img_height = ice_cubes.getImage().getHeight(this);			if(img_width > 0 && img_height > 0) {				double scr_width = size.getWidth();				double scr_height = size.getHeight();				img_src_x1 = (int)((img_width-scr_width) / 2.0);				img_src_x2 = (int)( img_src_x1 + scr_width );				img_src_y1 = (int)((img_height-scr_height) /2.0);				img_src_y2 = (int)(img_src_y1+scr_height);			}				private final InfusionPumpModel infusionPumpModel;	private final ScheduledExecutorService executor;		this.infusionPumpModel = infusionPumpModel;		setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 36));		setBackground(new Color(255,255,255,180));		UIManager.put("FormattedTextField.background", new Color(185, 223, 246));		this.executor = executor; Drug Name Concentration  total mass/total volume in container Weight BSA (from weight/height) m^2 Dose mL/hr , mL/kg/hr, mcg/min|hr|day, mcg/kg/time,       volume / time , volume / body-mass / hr, drug mass / time, drug mass / body mass / time, drug mass / BSA / time, drug mass / time 		comp.setBorder(BorderFactory.createTitledBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED), text));, false	private final ImageIcon ice_cubes = new ImageIcon(GIPPanel.class.getResource("gradient.png"));		g.drawImage(ice_cubes.getImage(), 0, 0, getWidth(), getHeight(), img_src_x1, img_src_y1, img_src_x2, img_src_y2, null);		g.drawImage(mdpnp.getImage(), 0, 0, null);		super.paintComponent(g);