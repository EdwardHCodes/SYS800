**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2016 by Roman Stolyarov
 * Copyright (C) 2020 by William Wilgus
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** LCD pins  LCD_PINS_MASK D0-D7 RD DC CS RES WR  LCD_DATA_MASK D0-D7  FRAMEBUF_TO_LCD_DATA -- translate data to match LCD data pins  LCD setup codes  LCD command codes  Contrast  Output scan direction  Segment remap  Display on  Page address  Upper column address  Lower column address  column offset  GPIO/INTERRUPT  GPIO  ENABLE PULLUP OUTPUT  SET BIT  slew -- fast rate  Low pin drive strength  UNUSED  UNUSED  We don't use the LCD controller * globals * used by lcd_enable ** hardware configuration ** brightness menu  here we change the voltage level and drive times
         * longer precharge = dimmer display
         * higher voltage = shorter precharge required
          Set pre-charge period  VCC Generated by Internal DC/DC Circuit  Set VCOM deselect level  turn the display upside down (call lcd_update() afterwards)  simple '=' is not a typo !  LCD init, largely based on what OF does  Set display off  Set display clock and oscillator frequency  External clock Bits [0-3] for divider  Set multiplex ratio Set display offset  Set starting line as 0  Set charge pump  VCC Generated by Internal DC/DC Circuit  Column 131 is remapped to SEG0  Invert COM scan direction (N-1 to 0)  Set COM hardware configuration  Set contrast control  VCC Generated by Internal DC/DC Circuit  Set pre-charge period  VCC Generated by Internal DC/DC Circuit  Set VCOM deselect level  Set normal display mode (not every pixel ON)  Set normal display mode (not inverted)  fills with 0 : pixel off & 0xf** Update functions ** returns LCD_CNTL_HIGHCOL or'd with higher 4 bits of
   the 8-bit column address for the display data RAM.
 returns LCD_CNTL_LOWCOL or'd with lower 4 bits of
   the 8-bit column address for the display data RAM.
 Performance function that works with an external buffer
   note that by and bheight are in 8-pixel units!  Copy display bitmap to hardware  Helper function for lcd_grey_phase_blit().  calculate disp data from phase we only use the last byte (8bits)  ltmp= 3.......2.......1.......0....... ltmp= 7.......6.......5.......4....... phase0 | phase1 >> 4  ltmp= 3...7...2...6...1...5...0...4... ltmp= 3...7...23..67..12..56..01..45.. ltmp= 3...7...23..67..123.567.012.456. ltmp= 3...7...23..67..123.567.01234567 update the phases BITDELAY(); //enough instructions above to satisfy data hold time  Performance function that works with an external buffer
   note that by and bheight are in 8-pixel units!  8 pixels per block  Copy display bitmap to hardware  Update the display.
   This must be called after all other LCD functions that change the display.  Copy display bitmap to hardware  Update a fraction of the display.  The Y coordinates have to work on even 8 pixel rows  nothing left to do, 0 is harmful to lcd_write_data()  nothing left to do  Copy specified rectange bitmap to hardware **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2016 by Roman Stolyarov
 * Copyright (C) 2020 by William Wilgus
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** LCD pins  LCD_PINS_MASK D0-D7 RD DC CS RES WR  LCD_DATA_MASK D0-D7  FRAMEBUF_TO_LCD_DATA -- translate data to match LCD data pins  LCD setup codes  LCD command codes  Contrast  Output scan direction  Segment remap  Display on  Page address  Upper column address  Lower column address  column offset  GPIO/INTERRUPT  GPIO  ENABLE PULLUP OUTPUT  SET BIT  slew -- fast rate  Low pin drive strength  UNUSED  UNUSED  We don't use the LCD controller * globals * used by lcd_enable ** hardware configuration ** brightness menu  here we change the voltage level and drive times
         * longer precharge = dimmer display
         * higher voltage = shorter precharge required
          Set pre-charge period  VCC Generated by Internal DC/DC Circuit  Set VCOM deselect level  turn the display upside down (call lcd_update() afterwards)  simple '=' is not a typo !  LCD init, largely based on what OF does  Set display off  Set display clock and oscillator frequency  External clock Bits [0-3] for divider  Set multiplex ratio Set display offset  Set starting line as 0  Set charge pump  VCC Generated by Internal DC/DC Circuit  Column 131 is remapped to SEG0  Invert COM scan direction (N-1 to 0)  Set COM hardware configuration  Set contrast control  VCC Generated by Internal DC/DC Circuit  Set pre-charge period  VCC Generated by Internal DC/DC Circuit  Set VCOM deselect level  Set normal display mode (not every pixel ON)  Set normal display mode (not inverted)  fills with 0 : pixel off & 0xf** Update functions ** returns LCD_CNTL_HIGHCOL or'd with higher 4 bits of
   the 8-bit column address for the display data RAM.
 returns LCD_CNTL_LOWCOL or'd with lower 4 bits of
   the 8-bit column address for the display data RAM.
 Performance function that works with an external buffer
   note that by and bheight are in 8-pixel units!  Copy display bitmap to hardware  Helper function for lcd_grey_phase_blit().  calculate disp data from phase we only use the last byte (8bits)  ltmp= 3.......2.......1.......0....... ltmp= 7.......6.......5.......4....... phase0 | phase1 >> 4  ltmp= 3...7...2...6...1...5...0...4... ltmp= 3...7...23..67..12..56..01..45.. ltmp= 3...7...23..67..123.567.012.456. ltmp= 3...7...23..67..123.567.01234567 update the phases BITDELAY(); //enough instructions above to satisfy data hold time  Performance function that works with an external buffer
   note that by and bheight are in 8-pixel units!  8 pixels per block  Copy display bitmap to hardware  Update the display.
   This must be called after all other LCD functions that change the display.  Copy display bitmap to hardware  Update a fraction of the display.  The Y coordinates have to work on even 8 pixel rows  nothing left to do, 0 is harmful to lcd_write_data()  nothing left to do  Copy specified rectange bitmap to hardware **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2016 by Roman Stolyarov
 * Copyright (C) 2020 by William Wilgus
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** LCD pins  LCD_PINS_MASK D0-D7 RD DC CS RES WR  LCD_DATA_MASK D0-D7  FRAMEBUF_TO_LCD_DATA -- translate data to match LCD data pins  LCD setup codes  LCD command codes  Contrast  Output scan direction  Segment remap  Display on  Page address  Upper column address  Lower column address  column offset  GPIO/INTERRUPT  GPIO  ENABLE PULLUP OUTPUT  SET BIT  slew -- fast rate  Low pin drive strength  UNUSED  UNUSED  We don't use the LCD controller * globals * used by lcd_enable ** hardware configuration ** brightness menu  here we change the voltage level and drive times
         * longer precharge = dimmer display
         * higher voltage = shorter precharge required
          Set pre-charge period  VCC Generated by Internal DC/DC Circuit  Set VCOM deselect level  turn the display upside down (call lcd_update() afterwards)  simple '=' is not a typo !  LCD init, largely based on what OF does  Set display off  Set display clock and oscillator frequency  External clock Bits [0-3] for divider  Set multiplex ratio Set display offset  Set starting line as 0  Set charge pump  VCC Generated by Internal DC/DC Circuit  Column 131 is remapped to SEG0  Invert COM scan direction (N-1 to 0)  Set COM hardware configuration  Set contrast control  VCC Generated by Internal DC/DC Circuit  Set pre-charge period  VCC Generated by Internal DC/DC Circuit  Set VCOM deselect level  Set normal display mode (not every pixel ON)  Set normal display mode (not inverted)  fills with 0 : pixel off & 0xf** Update functions ** returns LCD_CNTL_HIGHCOL or'd with higher 4 bits of
   the 8-bit column address for the display data RAM.
 returns LCD_CNTL_LOWCOL or'd with lower 4 bits of
   the 8-bit column address for the display data RAM.
 Performance function that works with an external buffer
   note that by and bheight are in 8-pixel units!  Copy display bitmap to hardware  Helper function for lcd_grey_phase_blit().  calculate disp data from phase we only use the last byte (8bits)  ltmp= 3.......2.......1.......0....... ltmp= 7.......6.......5.......4....... phase0 | phase1 >> 4  ltmp= 3...7...2...6...1...5...0...4... ltmp= 3...7...23..67..12..56..01..45.. ltmp= 3...7...23..67..123.567.012.456. ltmp= 3...7...23..67..123.567.01234567 update the phases BITDELAY(); //enough instructions above to satisfy data hold time  Performance function that works with an external buffer
   note that by and bheight are in 8-pixel units!  8 pixels per block  Copy display bitmap to hardware  Update the display.
   This must be called after all other LCD functions that change the display.  Copy display bitmap to hardware  Update a fraction of the display.  The Y coordinates have to work on even 8 pixel rows  nothing left to do, 0 is harmful to lcd_write_data()  nothing left to do  Copy specified rectange bitmap to hardware 