-------------------------------------------------------------------------
Copyright (C) 1996, 2003 - 3D Realms Entertainment

This file is part of Duke Nukem 3D version 1.5 - Atomic Edition

Duke Nukem 3D is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
aint32_t with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

Original Source: 1996 - Todd Replogle
Prepared for public release: 03/21/2003 - Charlie Wiederhold, 3D Realms
------------------------------------------------------------------------- #define DEBUG_SCRIPLIB  Utility functions  Free dependant nodes first  Free dependant nodes first  printf ("addsib: %p, %p, %p\n", node, node->sibling, sibling);  Trim off any extra whitespace  Fills in a scriptnode with the interpreted contents of a line  Needs to handle 5 cases:  	key = someint  	key = 0xsomehexnum  	key = ~  	key = "onestring"  	key = "two" "strings"  Sanity check... this token should be "="  Error state, free the memory allocated  This is where the real fun begins...  we can begin to determine which of the 6  possibilities the node is now  Found a hex digit!  Found a float  Found a number!  Found a negative number! - FIX_00067: *.cfg parser fails to read negative values (as it could be for the Midi selection) was node->data.number = 0; Can't find a reason for this. Found a ... who knows  Found one of possibly two strings r = sscanf(workbuf, "\"%[^\"]\"", workbuf);if (r == 0) workbuf[0] = '\0'; discard "  other "  Check for a second string r = sscanf(workbuf, "\"%[^\"]\"", workbuf);if (r == 0) workbuf[0] = '\0'; other "  Error state! 
==============
=
= SCRIPT_Init
=
==============

==============
=
= SCRIPT_Free
=
==============
 STUBBED("Free"); 
==============
=
= SCRIPT_Parse
=
==============

==============
=
= SCRIPT_Load
=
==============
 The main program does not check for any sort of  error in loading, so each SCRIPT_ function needs  to check if the handle is -1 before doing anything  Start loading the script  Loads and parse the entire file into a tree  script_nexthandle is the current handle until we increment it  Skip comments  Parse line  We have two options... it starts with a [, making it  a new subsection (child of headnode) or it starts with  a letter, making it a child of a subsection.  Remove [] manually  Insert into head  printf ("Working in section \"%s\"\n", node->key);  Ignore if not under a subsection  TODO: Parse line here  printf ("Adding node with key \"%s\"\n", node->key);  postincrement is important here 
==============
=
= SCRIPT_Save
=
==============

==============
=
= SCRIPT_NumberSections
=
==============

==============
=
= SCRIPT_Section
=
==============

==============
=
= SCRIPT_NumberEntries
=
==============

==============
=
= SCRIPT_Entry
=
==============

==============
=
= SCRIPT_GetRaw
=
==============

==============
=
= SCRIPT_GetString
=
==============
 STUBBED("GetString"); 
==============
=
= SCRIPT_GetDoubleString
=
==============
 STUBBED("GetDoubleString"); 
==============
=
= SCRIPT_GetNumber
=
==============
 STUBBED("GetNumber"); 
==============
=
= SCRIPT_GetBoolean
=
==============

==============
=
= SCRIPT_GetFloat
=
==============

==============
=
= SCRIPT_GetDouble
=
==============

==============
=
= SCRIPT_PutComment
=
==============

==============
=
= SCRIPT_PutEOL
=
==============

==============
=
= SCRIPT_PutMultiComment
=
==============

==============
=
= SCRIPT_PutSection
=
==============

==============
=
= SCRIPT_PutRaw
=
==============

==============
=
= SCRIPT_PutString
=
==============
 We're screwed if there's no head  Add the section if it does not exist  Add the section if it does not exist 
==============
=
= SCRIPT_PutDoubleString
=
==============
 We're screwed if there's no head  Add the section if it does not exist  Add the section if it does not exist 
==============
=
= SCRIPT_PutNumber
=
==============
 DDOI - I don't know what "defaultvalue" is for so it's ignored  We're screwed if there's no head  Add the section if it does not exist  Add the section if it does not exist 
==============
=
= SCRIPT_PutBoolean
=
==============

==============
=
= SCRIPT_PutDouble
=
==============
-------------------------------------------------------------------------
Copyright (C) 1996, 2003 - 3D Realms Entertainment

This file is part of Duke Nukem 3D version 1.5 - Atomic Edition

Duke Nukem 3D is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
aint32_t with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

Original Source: 1996 - Todd Replogle
Prepared for public release: 03/21/2003 - Charlie Wiederhold, 3D Realms
------------------------------------------------------------------------- #define DEBUG_SCRIPLIB  Utility functions  Free dependant nodes first  Free dependant nodes first  printf ("addsib: %p, %p, %p\n", node, node->sibling, sibling);  Trim off any extra whitespace  Fills in a scriptnode with the interpreted contents of a line  Needs to handle 5 cases:  	key = someint  	key = 0xsomehexnum  	key = ~  	key = "onestring"  	key = "two" "strings"  Sanity check... this token should be "="  Error state, free the memory allocated  This is where the real fun begins...  we can begin to determine which of the 6  possibilities the node is now  Found a hex digit!  Found a float  Found a number!  Found a negative number! - FIX_00067: *.cfg parser fails to read negative values (as it could be for the Midi selection) was node->data.number = 0; Can't find a reason for this. Found a ... who knows  Found one of possibly two strings r = sscanf(workbuf, "\"%[^\"]\"", workbuf);if (r == 0) workbuf[0] = '\0'; discard "  other "  Check for a second string r = sscanf(workbuf, "\"%[^\"]\"", workbuf);if (r == 0) workbuf[0] = '\0'; other "  Error state! 
==============
=
= SCRIPT_Init
=
==============

==============
=
= SCRIPT_Free
=
==============
 STUBBED("Free"); 
==============
=
= SCRIPT_Parse
=
==============

==============
=
= SCRIPT_Load
=
==============
 The main program does not check for any sort of  error in loading, so each SCRIPT_ function needs  to check if the handle is -1 before doing anything  Start loading the script  Loads and parse the entire file into a tree  script_nexthandle is the current handle until we increment it  Skip comments  Parse line  We have two options... it starts with a [, making it  a new subsection (child of headnode) or it starts with  a letter, making it a child of a subsection.  Remove [] manually  Insert into head  printf ("Working in section \"%s\"\n", node->key);  Ignore if not under a subsection  TODO: Parse line here  printf ("Adding node with key \"%s\"\n", node->key);  postincrement is important here 
==============
=
= SCRIPT_Save
=
==============

==============
=
= SCRIPT_NumberSections
=
==============

==============
=
= SCRIPT_Section
=
==============

==============
=
= SCRIPT_NumberEntries
=
==============

==============
=
= SCRIPT_Entry
=
==============

==============
=
= SCRIPT_GetRaw
=
==============

==============
=
= SCRIPT_GetString
=
==============
 STUBBED("GetString"); 
==============
=
= SCRIPT_GetDoubleString
=
==============
 STUBBED("GetDoubleString"); 
==============
=
= SCRIPT_GetNumber
=
==============
 STUBBED("GetNumber"); 
==============
=
= SCRIPT_GetBoolean
=
==============

==============
=
= SCRIPT_GetFloat
=
==============

==============
=
= SCRIPT_GetDouble
=
==============

==============
=
= SCRIPT_PutComment
=
==============

==============
=
= SCRIPT_PutEOL
=
==============

==============
=
= SCRIPT_PutMultiComment
=
==============

==============
=
= SCRIPT_PutSection
=
==============

==============
=
= SCRIPT_PutRaw
=
==============

==============
=
= SCRIPT_PutString
=
==============
 We're screwed if there's no head  Add the section if it does not exist  Add the section if it does not exist 
==============
=
= SCRIPT_PutDoubleString
=
==============
 We're screwed if there's no head  Add the section if it does not exist  Add the section if it does not exist 
==============
=
= SCRIPT_PutNumber
=
==============
 DDOI - I don't know what "defaultvalue" is for so it's ignored  We're screwed if there's no head  Add the section if it does not exist  Add the section if it does not exist 
==============
=
= SCRIPT_PutBoolean
=
==============

==============
=
= SCRIPT_PutDouble
=
==============
-------------------------------------------------------------------------
Copyright (C) 1996, 2003 - 3D Realms Entertainment

This file is part of Duke Nukem 3D version 1.5 - Atomic Edition

Duke Nukem 3D is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
aint32_t with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

Original Source: 1996 - Todd Replogle
Prepared for public release: 03/21/2003 - Charlie Wiederhold, 3D Realms
------------------------------------------------------------------------- #define DEBUG_SCRIPLIB  Utility functions  Free dependant nodes first  Free dependant nodes first  printf ("addsib: %p, %p, %p\n", node, node->sibling, sibling);  Trim off any extra whitespace  Fills in a scriptnode with the interpreted contents of a line  Needs to handle 5 cases:  	key = someint  	key = 0xsomehexnum  	key = ~  	key = "onestring"  	key = "two" "strings"  Sanity check... this token should be "="  Error state, free the memory allocated  This is where the real fun begins...  we can begin to determine which of the 6  possibilities the node is now  Found a hex digit!  Found a float  Found a number!  Found a negative number! - FIX_00067: *.cfg parser fails to read negative values (as it could be for the Midi selection) was node->data.number = 0; Can't find a reason for this. Found a ... who knows  Found one of possibly two strings r = sscanf(workbuf, "\"%[^\"]\"", workbuf);if (r == 0) workbuf[0] = '\0'; discard "  other "  Check for a second string r = sscanf(workbuf, "\"%[^\"]\"", workbuf);if (r == 0) workbuf[0] = '\0'; other "  Error state! 
==============
=
= SCRIPT_Init
=
==============

==============
=
= SCRIPT_Free
=
==============
 STUBBED("Free"); 
==============
=
= SCRIPT_Parse
=
==============

==============
=
= SCRIPT_Load
=
==============
 The main program does not check for any sort of  error in loading, so each SCRIPT_ function needs  to check if the handle is -1 before doing anything  Start loading the script  Loads and parse the entire file into a tree  script_nexthandle is the current handle until we increment it  Skip comments  Parse line  We have two options... it starts with a [, making it  a new subsection (child of headnode) or it starts with  a letter, making it a child of a subsection.  Remove [] manually  Insert into head  printf ("Working in section \"%s\"\n", node->key);  Ignore if not under a subsection  TODO: Parse line here  printf ("Adding node with key \"%s\"\n", node->key);  postincrement is important here 
==============
=
= SCRIPT_Save
=
==============

==============
=
= SCRIPT_NumberSections
=
==============

==============
=
= SCRIPT_Section
=
==============

==============
=
= SCRIPT_NumberEntries
=
==============

==============
=
= SCRIPT_Entry
=
==============

==============
=
= SCRIPT_GetRaw
=
==============

==============
=
= SCRIPT_GetString
=
==============
 STUBBED("GetString"); 
==============
=
= SCRIPT_GetDoubleString
=
==============
 STUBBED("GetDoubleString"); 
==============
=
= SCRIPT_GetNumber
=
==============
 STUBBED("GetNumber"); 
==============
=
= SCRIPT_GetBoolean
=
==============

==============
=
= SCRIPT_GetFloat
=
==============

==============
=
= SCRIPT_GetDouble
=
==============

==============
=
= SCRIPT_PutComment
=
==============

==============
=
= SCRIPT_PutEOL
=
==============

==============
=
= SCRIPT_PutMultiComment
=
==============

==============
=
= SCRIPT_PutSection
=
==============

==============
=
= SCRIPT_PutRaw
=
==============

==============
=
= SCRIPT_PutString
=
==============
 We're screwed if there's no head  Add the section if it does not exist  Add the section if it does not exist 
==============
=
= SCRIPT_PutDoubleString
=
==============
 We're screwed if there's no head  Add the section if it does not exist  Add the section if it does not exist 
==============
=
= SCRIPT_PutNumber
=
==============
 DDOI - I don't know what "defaultvalue" is for so it's ignored  We're screwed if there's no head  Add the section if it does not exist  Add the section if it does not exist 
==============
=
= SCRIPT_PutBoolean
=
==============

==============
=
= SCRIPT_PutDouble
=
==============
