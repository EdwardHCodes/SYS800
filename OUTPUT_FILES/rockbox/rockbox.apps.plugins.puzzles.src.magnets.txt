
 * magnets.c: implementation of janko.at 'magnets puzzle' game.
 *
 * http://64.233.179.104/translate_c?hl=en&u=http://www.janko.at/Raetsel/Magnete/Beispiel.htm
 *
 * Puzzle definition is just the size, and then the list of + (across then
 * down) and - (across then down) present, then domino edges.
 *
 * An example:
 *
 *  + 2 0 1
 *   +-----+
 *  1|+ -| |1
 *   |-+-+ |
 *  0|-|#| |1
 *   | +-+-|
 *  2|+|- +|1
 *   +-----+
 *    1 2 0 -
 *
 * 3x3:201,102,120,111,LRTT*BBLR
 *
 * 'Zotmeister' examples:
 * 5x5:.2..1,3..1.,.2..2,2..2.,LRLRTTLRTBBT*BTTBLRBBLRLR
 * 9x9:3.51...33,.2..23.13,..33.33.2,12...5.3.,**TLRTLR*,*TBLRBTLR,TBLRLRBTT,BLRTLRTBB,LRTB*TBLR,LRBLRBLRT,TTTLRLRTB,BBBTLRTB*,*LRBLRB**
 *
 * Janko 6x6 with solution:
 * 6x6:322223,323132,232223,232223,LRTLRTTTBLRBBBTTLRLRBBLRTTLRTTBBLRBB
 *
 * janko 8x8:
 * 8x8:34131323,23131334,43122323,21332243,LRTLRLRT,LRBTTTTB,LRTBBBBT,TTBTLRTB,BBTBTTBT,TTBTBBTB,BBTBLRBT,LRBLRLRB
  Cell states.  0 --> 0,
                                       1 --> 2,
                                       2 --> 4 --> 1  Macro ickery copied from slant.c  ---------------------------------------------------------------  Game parameter functions.  struct copy  structure copy  ---------------------------------------------------------------  Game state allocation, deallocation.  size w*h, dominoes[i] points to other end of domino.  size 3*h, array of [plus, minus, neutral] counts  size 3*w, ditto  size w*h, for cell state (pos/neg)  size w*h  domino layout never changes.  ---------------------------------------------------------------  Game generation and reading.  For a game of size w*h the game description is:
 * w-sized string of column + numbers (L-R), or '.' for none
 * semicolon
 * h-sized string of row + numbers (T-B), or '.'
 * semicolon
 * w-sized string of column - numbers (L-R), or '.'
 * semicolon
 * h-sized string of row - numbers (T-B), or '.'
 * semicolon
 * w*h-sized string of 'L', 'R', 'U', 'D' for domino associations,
 *   or '*' for a black singleton square.
 *
 * for a total length of 2w + 2h + wh + 4.
  XXX cloned from singles.c  XXX cloned from singles.c  top row, left-to-right  left column, top-to-bottom  bottom row, left-to-right  right column, top-to-bottom  Add neutral counts (== size - pos - neg) to columns and rows.
     * Any singleton cells will just be treated as permanently neutral.  this square is LHS of a domino  ... RHS of a domino  ... top of a domino  ... bottom of a domino  singleton  spacer, ignore  Check dominoes as input are sensibly consistent
     * (i.e. each end points to the other)  Success.  top row: '+' then column totals for plus.  top border.  bottom border.  bottom row: column totals for minus then '-'.  no number to check against.  Check row and column counts for magnets.  Check each domino has been filled, and that we don't have
     * touching identical terminals.  no domino here  Knowing a given cell cannot be a certain colour also tells us
 * something about the other cell in that domino.  Sets a cell to a particular colour, and also perform other
 * housekeeping around that.  was already set and held, do nothing.  counts should be int[4].  only useful (should only be called) if numbered. debug(("%s %d for %s: target %d, count %d, unset %d",
               rc.name, rc.num, NAME(which),
               target, counts[which], unset[which])); We have the correct no. of the colour in this row/column
             * already; unflag all the rest.  We need all the remaining unset squares for this colour;
             * set them all.  For this row/col, look for a domino entirely within the row where
     * both ends can only be + or - (but isn't held).
     * The +/- counts can thus be decremented by 1 each, and the 'unset'
     * count by 2.
     *
     * Once that's done for all such dominoes (and they're marked), try
     * and made usual deductions about rest of the row based on new totals.  don't have a target for either colour, nothing to do.  both colours are full up already, nothing to do.  We're looking for a domino in our row/col, thus if
         * dominoes[i] -> i+di we've found one.  We need both squares of this domino to be either + or -
         * (i.e. both NOTNEUTRAL only).  nfound is #dominoes we matched, which will all be marked.  If we only have one neutral still to place on a row/column then no
   dominoes entirely in that row/column can be neutral.  If we need to fill all unfilled cells with +-, and we need 1 more of
 * one than the other, and we have a single odd-numbered region of unfilled
 * cells, that odd-numbered region must start and end with the extra number.  need zero neutral cells still to find...  ...and #positive and #negative to differ by one.  we've just finished an odd-length section.  Count the number of remaining empty dominoes in any row/col.
 * If that number is equal to the #remaining positive,
 * or to the #remaining negative, no empty cells can be neutral.  need at least one target to compare.  Skip solo cells, or second cell in domino.  Skip solo cells or 2nd in domino.  second cell of domino is on our row: test that too.  Count number of dominoes we could put each of + and - into. If it is equal
 * to the #left, any domino we can only put + or - in one cell of must have it.  paranoia, should have been checked by solve_domino_count.  danger, evil macro. can't use the do { ... } while(0) trick because
 * the continue breaks.  more ...  Find a space ...  already laid here.  ...and lay a domino if we can.  The choice of which type of domino to lay here leads to subtle differences
         * in the sorts of boards that get produced. Too much bias towards magnets
         * leads to games that are too easy.
         *
         * Currently, it lays a small set of dominoes at random as neutral, and
         * then lays the rest preferring to be magnets -- however, if the
         * current layout is such that a magnet won't go there, then it lays
         * another neutral.
         *
         * The number of initially neutral dominoes is limited as grids get bigger:
         * too many neutral dominoes invariably ends up with insoluble puzzle at
         * this size, and the positioning process means it'll always end up laying
         * more than the initial 5 anyway.
          We should always be able to lay a neutral anywhere.  bit grotty.  for each cell, update colcount/rowcount as appropriate.  If this is too easy, return.  Copy the correct grid away.  Create shuffled array of side-clue locations.  For each clue, check whether removing it makes the puzzle unsoluble;
     * put it back if so.  work out which clue we meant.  num is now the row/column index in question.  Remove clue, storing original...  ...and see if we can still solve it.  We made it ambiguous: put clue back.  now we're complete, generate the description string
     * and an aux_info for the completed game.  size w*h  size 3*w, 3*h  ... empty --> positive --> negative --> empty ...  can't cycle a magnet from a neutral.  ... empty -> neutral -> !neutral --> empty ...  can't cycle through neutral from a magnet.  All of these are grid == EMPTY == NEUTRAL; it twiddles
         * combinations of flags.  neutral  !neutral  placate optimiser  ----------------------------------------------------------------------
 * Drawing routines.
  Ick: fake up `ds->tilesize' for macro expansion purposes  not-a-neutral is a blue question mark.  NOT responsible for redrawing background or updating.  gutter is TSZ/16 for 100%, 8*TSZ/16 (TSZ/2) for 0%  domino drawing shamelessly stolen from dominosa.c.  off-white white for cursor  green inner for neutral cells  light grey for empty cells.  don't draw cross unless actually set as neutral.  draw background, corner +-.  Draw grid  Draw counts around side 
     * I'll use 6mm squares by default.
      Ick: fake up `ds->tilesize' for macro expansion purposes  Border.  Numbers and +/- for corners.  Dominoes.  Ink the domino  Un-ink the domino interior  Grid symbols (solution).  game_request_keys  wants_statusbar  flags  We just generated this ourself.  vim: set shiftwidth=4 tabstop=8: 
 * magnets.c: implementation of janko.at 'magnets puzzle' game.
 *
 * http://64.233.179.104/translate_c?hl=en&u=http://www.janko.at/Raetsel/Magnete/Beispiel.htm
 *
 * Puzzle definition is just the size, and then the list of + (across then
 * down) and - (across then down) present, then domino edges.
 *
 * An example:
 *
 *  + 2 0 1
 *   +-----+
 *  1|+ -| |1
 *   |-+-+ |
 *  0|-|#| |1
 *   | +-+-|
 *  2|+|- +|1
 *   +-----+
 *    1 2 0 -
 *
 * 3x3:201,102,120,111,LRTT*BBLR
 *
 * 'Zotmeister' examples:
 * 5x5:.2..1,3..1.,.2..2,2..2.,LRLRTTLRTBBT*BTTBLRBBLRLR
 * 9x9:3.51...33,.2..23.13,..33.33.2,12...5.3.,**TLRTLR*,*TBLRBTLR,TBLRLRBTT,BLRTLRTBB,LRTB*TBLR,LRBLRBLRT,TTTLRLRTB,BBBTLRTB*,*LRBLRB**
 *
 * Janko 6x6 with solution:
 * 6x6:322223,323132,232223,232223,LRTLRTTTBLRBBBTTLRLRBBLRTTLRTTBBLRBB
 *
 * janko 8x8:
 * 8x8:34131323,23131334,43122323,21332243,LRTLRLRT,LRBTTTTB,LRTBBBBT,TTBTLRTB,BBTBTTBT,TTBTBBTB,BBTBLRBT,LRBLRLRB
  Cell states.  0 --> 0,
                                       1 --> 2,
                                       2 --> 4 --> 1  Macro ickery copied from slant.c  ---------------------------------------------------------------  Game parameter functions.  struct copy  structure copy  ---------------------------------------------------------------  Game state allocation, deallocation.  size w*h, dominoes[i] points to other end of domino.  size 3*h, array of [plus, minus, neutral] counts  size 3*w, ditto  size w*h, for cell state (pos/neg)  size w*h  domino layout never changes.  ---------------------------------------------------------------  Game generation and reading.  For a game of size w*h the game description is:
 * w-sized string of column + numbers (L-R), or '.' for none
 * semicolon
 * h-sized string of row + numbers (T-B), or '.'
 * semicolon
 * w-sized string of column - numbers (L-R), or '.'
 * semicolon
 * h-sized string of row - numbers (T-B), or '.'
 * semicolon
 * w*h-sized string of 'L', 'R', 'U', 'D' for domino associations,
 *   or '*' for a black singleton square.
 *
 * for a total length of 2w + 2h + wh + 4.
  XXX cloned from singles.c  XXX cloned from singles.c  top row, left-to-right  left column, top-to-bottom  bottom row, left-to-right  right column, top-to-bottom  Add neutral counts (== size - pos - neg) to columns and rows.
     * Any singleton cells will just be treated as permanently neutral.  this square is LHS of a domino  ... RHS of a domino  ... top of a domino  ... bottom of a domino  singleton  spacer, ignore  Check dominoes as input are sensibly consistent
     * (i.e. each end points to the other)  Success.  top row: '+' then column totals for plus.  top border.  bottom border.  bottom row: column totals for minus then '-'.  no number to check against.  Check row and column counts for magnets.  Check each domino has been filled, and that we don't have
     * touching identical terminals.  no domino here  Knowing a given cell cannot be a certain colour also tells us
 * something about the other cell in that domino.  Sets a cell to a particular colour, and also perform other
 * housekeeping around that.  was already set and held, do nothing.  counts should be int[4].  only useful (should only be called) if numbered. debug(("%s %d for %s: target %d, count %d, unset %d",
               rc.name, rc.num, NAME(which),
               target, counts[which], unset[which])); We have the correct no. of the colour in this row/column
             * already; unflag all the rest.  We need all the remaining unset squares for this colour;
             * set them all.  For this row/col, look for a domino entirely within the row where
     * both ends can only be + or - (but isn't held).
     * The +/- counts can thus be decremented by 1 each, and the 'unset'
     * count by 2.
     *
     * Once that's done for all such dominoes (and they're marked), try
     * and made usual deductions about rest of the row based on new totals.  don't have a target for either colour, nothing to do.  both colours are full up already, nothing to do.  We're looking for a domino in our row/col, thus if
         * dominoes[i] -> i+di we've found one.  We need both squares of this domino to be either + or -
         * (i.e. both NOTNEUTRAL only).  nfound is #dominoes we matched, which will all be marked.  If we only have one neutral still to place on a row/column then no
   dominoes entirely in that row/column can be neutral.  If we need to fill all unfilled cells with +-, and we need 1 more of
 * one than the other, and we have a single odd-numbered region of unfilled
 * cells, that odd-numbered region must start and end with the extra number.  need zero neutral cells still to find...  ...and #positive and #negative to differ by one.  we've just finished an odd-length section.  Count the number of remaining empty dominoes in any row/col.
 * If that number is equal to the #remaining positive,
 * or to the #remaining negative, no empty cells can be neutral.  need at least one target to compare.  Skip solo cells, or second cell in domino.  Skip solo cells or 2nd in domino.  second cell of domino is on our row: test that too.  Count number of dominoes we could put each of + and - into. If it is equal
 * to the #left, any domino we can only put + or - in one cell of must have it.  paranoia, should have been checked by solve_domino_count.  danger, evil macro. can't use the do { ... } while(0) trick because
 * the continue breaks.  more ...  Find a space ...  already laid here.  ...and lay a domino if we can.  The choice of which type of domino to lay here leads to subtle differences
         * in the sorts of boards that get produced. Too much bias towards magnets
         * leads to games that are too easy.
         *
         * Currently, it lays a small set of dominoes at random as neutral, and
         * then lays the rest preferring to be magnets -- however, if the
         * current layout is such that a magnet won't go there, then it lays
         * another neutral.
         *
         * The number of initially neutral dominoes is limited as grids get bigger:
         * too many neutral dominoes invariably ends up with insoluble puzzle at
         * this size, and the positioning process means it'll always end up laying
         * more than the initial 5 anyway.
          We should always be able to lay a neutral anywhere.  bit grotty.  for each cell, update colcount/rowcount as appropriate.  If this is too easy, return.  Copy the correct grid away.  Create shuffled array of side-clue locations.  For each clue, check whether removing it makes the puzzle unsoluble;
     * put it back if so.  work out which clue we meant.  num is now the row/column index in question.  Remove clue, storing original...  ...and see if we can still solve it.  We made it ambiguous: put clue back.  now we're complete, generate the description string
     * and an aux_info for the completed game.  size w*h  size 3*w, 3*h  ... empty --> positive --> negative --> empty ...  can't cycle a magnet from a neutral.  ... empty -> neutral -> !neutral --> empty ...  can't cycle through neutral from a magnet.  All of these are grid == EMPTY == NEUTRAL; it twiddles
         * combinations of flags.  neutral  !neutral  placate optimiser  ----------------------------------------------------------------------
 * Drawing routines.
  Ick: fake up `ds->tilesize' for macro expansion purposes  not-a-neutral is a blue question mark.  NOT responsible for redrawing background or updating.  gutter is TSZ/16 for 100%, 8*TSZ/16 (TSZ/2) for 0%  domino drawing shamelessly stolen from dominosa.c.  off-white white for cursor  green inner for neutral cells  light grey for empty cells.  don't draw cross unless actually set as neutral.  draw background, corner +-.  Draw grid  Draw counts around side 
     * I'll use 6mm squares by default.
      Ick: fake up `ds->tilesize' for macro expansion purposes  Border.  Numbers and +/- for corners.  Dominoes.  Ink the domino  Un-ink the domino interior  Grid symbols (solution).  game_request_keys  wants_statusbar  flags  We just generated this ourself.  vim: set shiftwidth=4 tabstop=8: 
 * magnets.c: implementation of janko.at 'magnets puzzle' game.
 *
 * http://64.233.179.104/translate_c?hl=en&u=http://www.janko.at/Raetsel/Magnete/Beispiel.htm
 *
 * Puzzle definition is just the size, and then the list of + (across then
 * down) and - (across then down) present, then domino edges.
 *
 * An example:
 *
 *  + 2 0 1
 *   +-----+
 *  1|+ -| |1
 *   |-+-+ |
 *  0|-|#| |1
 *   | +-+-|
 *  2|+|- +|1
 *   +-----+
 *    1 2 0 -
 *
 * 3x3:201,102,120,111,LRTT*BBLR
 *
 * 'Zotmeister' examples:
 * 5x5:.2..1,3..1.,.2..2,2..2.,LRLRTTLRTBBT*BTTBLRBBLRLR
 * 9x9:3.51...33,.2..23.13,..33.33.2,12...5.3.,**TLRTLR*,*TBLRBTLR,TBLRLRBTT,BLRTLRTBB,LRTB*TBLR,LRBLRBLRT,TTTLRLRTB,BBBTLRTB*,*LRBLRB**
 *
 * Janko 6x6 with solution:
 * 6x6:322223,323132,232223,232223,LRTLRTTTBLRBBBTTLRLRBBLRTTLRTTBBLRBB
 *
 * janko 8x8:
 * 8x8:34131323,23131334,43122323,21332243,LRTLRLRT,LRBTTTTB,LRTBBBBT,TTBTLRTB,BBTBTTBT,TTBTBBTB,BBTBLRBT,LRBLRLRB
  Cell states.  0 --> 0,
                                       1 --> 2,
                                       2 --> 4 --> 1  Macro ickery copied from slant.c  ---------------------------------------------------------------  Game parameter functions.  struct copy  structure copy  ---------------------------------------------------------------  Game state allocation, deallocation.  size w*h, dominoes[i] points to other end of domino.  size 3*h, array of [plus, minus, neutral] counts  size 3*w, ditto  size w*h, for cell state (pos/neg)  size w*h  domino layout never changes.  ---------------------------------------------------------------  Game generation and reading.  For a game of size w*h the game description is:
 * w-sized string of column + numbers (L-R), or '.' for none
 * semicolon
 * h-sized string of row + numbers (T-B), or '.'
 * semicolon
 * w-sized string of column - numbers (L-R), or '.'
 * semicolon
 * h-sized string of row - numbers (T-B), or '.'
 * semicolon
 * w*h-sized string of 'L', 'R', 'U', 'D' for domino associations,
 *   or '*' for a black singleton square.
 *
 * for a total length of 2w + 2h + wh + 4.
  XXX cloned from singles.c  XXX cloned from singles.c  top row, left-to-right  left column, top-to-bottom  bottom row, left-to-right  right column, top-to-bottom  Add neutral counts (== size - pos - neg) to columns and rows.
     * Any singleton cells will just be treated as permanently neutral.  this square is LHS of a domino  ... RHS of a domino  ... top of a domino  ... bottom of a domino  singleton  spacer, ignore  Check dominoes as input are sensibly consistent
     * (i.e. each end points to the other)  Success.  top row: '+' then column totals for plus.  top border.  bottom border.  bottom row: column totals for minus then '-'.  no number to check against.  Check row and column counts for magnets.  Check each domino has been filled, and that we don't have
     * touching identical terminals.  no domino here  Knowing a given cell cannot be a certain colour also tells us
 * something about the other cell in that domino.  Sets a cell to a particular colour, and also perform other
 * housekeeping around that.  was already set and held, do nothing.  counts should be int[4].  only useful (should only be called) if numbered. debug(("%s %d for %s: target %d, count %d, unset %d",
               rc.name, rc.num, NAME(which),
               target, counts[which], unset[which])); We have the correct no. of the colour in this row/column
             * already; unflag all the rest.  We need all the remaining unset squares for this colour;
             * set them all.  For this row/col, look for a domino entirely within the row where
     * both ends can only be + or - (but isn't held).
     * The +/- counts can thus be decremented by 1 each, and the 'unset'
     * count by 2.
     *
     * Once that's done for all such dominoes (and they're marked), try
     * and made usual deductions about rest of the row based on new totals.  don't have a target for either colour, nothing to do.  both colours are full up already, nothing to do.  We're looking for a domino in our row/col, thus if
         * dominoes[i] -> i+di we've found one.  We need both squares of this domino to be either + or -
         * (i.e. both NOTNEUTRAL only).  nfound is #dominoes we matched, which will all be marked.  If we only have one neutral still to place on a row/column then no
   dominoes entirely in that row/column can be neutral.  If we need to fill all unfilled cells with +-, and we need 1 more of
 * one than the other, and we have a single odd-numbered region of unfilled
 * cells, that odd-numbered region must start and end with the extra number.  need zero neutral cells still to find...  ...and #positive and #negative to differ by one.  we've just finished an odd-length section.  Count the number of remaining empty dominoes in any row/col.
 * If that number is equal to the #remaining positive,
 * or to the #remaining negative, no empty cells can be neutral.  need at least one target to compare.  Skip solo cells, or second cell in domino.  Skip solo cells or 2nd in domino.  second cell of domino is on our row: test that too.  Count number of dominoes we could put each of + and - into. If it is equal
 * to the #left, any domino we can only put + or - in one cell of must have it.  paranoia, should have been checked by solve_domino_count.  danger, evil macro. can't use the do { ... } while(0) trick because
 * the continue breaks.  more ...  Find a space ...  already laid here.  ...and lay a domino if we can.  The choice of which type of domino to lay here leads to subtle differences
         * in the sorts of boards that get produced. Too much bias towards magnets
         * leads to games that are too easy.
         *
         * Currently, it lays a small set of dominoes at random as neutral, and
         * then lays the rest preferring to be magnets -- however, if the
         * current layout is such that a magnet won't go there, then it lays
         * another neutral.
         *
         * The number of initially neutral dominoes is limited as grids get bigger:
         * too many neutral dominoes invariably ends up with insoluble puzzle at
         * this size, and the positioning process means it'll always end up laying
         * more than the initial 5 anyway.
          We should always be able to lay a neutral anywhere.  bit grotty.  for each cell, update colcount/rowcount as appropriate.  If this is too easy, return.  Copy the correct grid away.  Create shuffled array of side-clue locations.  For each clue, check whether removing it makes the puzzle unsoluble;
     * put it back if so.  work out which clue we meant.  num is now the row/column index in question.  Remove clue, storing original...  ...and see if we can still solve it.  We made it ambiguous: put clue back.  now we're complete, generate the description string
     * and an aux_info for the completed game.  size w*h  size 3*w, 3*h  ... empty --> positive --> negative --> empty ...  can't cycle a magnet from a neutral.  ... empty -> neutral -> !neutral --> empty ...  can't cycle through neutral from a magnet.  All of these are grid == EMPTY == NEUTRAL; it twiddles
         * combinations of flags.  neutral  !neutral  placate optimiser  ----------------------------------------------------------------------
 * Drawing routines.
  Ick: fake up `ds->tilesize' for macro expansion purposes  not-a-neutral is a blue question mark.  NOT responsible for redrawing background or updating.  gutter is TSZ/16 for 100%, 8*TSZ/16 (TSZ/2) for 0%  domino drawing shamelessly stolen from dominosa.c.  off-white white for cursor  green inner for neutral cells  light grey for empty cells.  don't draw cross unless actually set as neutral.  draw background, corner +-.  Draw grid  Draw counts around side 
     * I'll use 6mm squares by default.
      Ick: fake up `ds->tilesize' for macro expansion purposes  Border.  Numbers and +/- for corners.  Dominoes.  Ink the domino  Un-ink the domino interior  Grid symbols (solution).  game_request_keys  wants_statusbar  flags  We just generated this ourself.  vim: set shiftwidth=4 tabstop=8: 