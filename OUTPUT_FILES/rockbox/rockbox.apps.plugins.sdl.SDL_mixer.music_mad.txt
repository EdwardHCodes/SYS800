
  SDL_mixer:  An audio mixer library based on the SDL library
  Copyright (C) 1997-2012 Sam Lantinga <slouken@libsdl.org>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
 Starts the playback.  Stops the playback.  Returns true if the playing is engaged, false otherwise.  Reads the next frame from the file.  Returns true on success or
   false on failure.  There might be some bytes in the buffer left over from last
	   time.  If so, move them down and read more bytes following
	   them.  Now read additional bytes from the input file.  At the end of the file, we must stuff MAD_BUFFER_GUARD
		   number of 0 bytes.  Now feed those bytes into the libmad stream.  Now ask libmad to extract a frame from the data we just put in
	 its buffer.  Scale a MAD sample to 16 bits for output.  round  clip  quantize  Once the frame has been read, copies its samples into the output
   buffer.  The first frame determines some key properties of the stream.
	   In particular, it tells us enough to set up the convert
	   structure now.  pcm->samplerate contains the sampling frequency  output sample(s) in 16-bit signed little-endian PCM assert(mp3_mad->output_end <= MAD_OUTPUT_BUFFER_SIZE); We're not supposed to be playing, so send silence instead.  We need to get a new frame.  Couldn't read a frame; either an error condition or
			 end-of-file.  Stop.  Now convert the frame data to the appropriate format for
		   output. assert(mp3_mad->output_end <= MAD_OUTPUT_BUFFER_SIZE); In order to seek backwards in a VBR file, we have to rewind and
	   start again from the beginning.  This isn't necessary if the
	   file happens to be CBR, of course; in that case we could seek
	   directly to the frame we want.  But I leave that little
	   optimization for the future developer who discovers she really
	   needs it.  Now we have to skip frames until we come to the right one.
	 Again, only truly necessary if the file is VBR.  Couldn't read a frame; either an error condition or
		   end-of-file.  Stop.  Here we are, at the beginning of the frame that contains the
	 target time.  Ehh, I say that's close enough.  If we wanted to,
	 we could get more precise by decoding the frame now and counting
	 the appropriate number of samples out of it.  MP3_MAD_MUSIC 
  SDL_mixer:  An audio mixer library based on the SDL library
  Copyright (C) 1997-2012 Sam Lantinga <slouken@libsdl.org>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
 Starts the playback.  Stops the playback.  Returns true if the playing is engaged, false otherwise.  Reads the next frame from the file.  Returns true on success or
   false on failure.  There might be some bytes in the buffer left over from last
	   time.  If so, move them down and read more bytes following
	   them.  Now read additional bytes from the input file.  At the end of the file, we must stuff MAD_BUFFER_GUARD
		   number of 0 bytes.  Now feed those bytes into the libmad stream.  Now ask libmad to extract a frame from the data we just put in
	 its buffer.  Scale a MAD sample to 16 bits for output.  round  clip  quantize  Once the frame has been read, copies its samples into the output
   buffer.  The first frame determines some key properties of the stream.
	   In particular, it tells us enough to set up the convert
	   structure now.  pcm->samplerate contains the sampling frequency  output sample(s) in 16-bit signed little-endian PCM assert(mp3_mad->output_end <= MAD_OUTPUT_BUFFER_SIZE); We're not supposed to be playing, so send silence instead.  We need to get a new frame.  Couldn't read a frame; either an error condition or
			 end-of-file.  Stop.  Now convert the frame data to the appropriate format for
		   output. assert(mp3_mad->output_end <= MAD_OUTPUT_BUFFER_SIZE); In order to seek backwards in a VBR file, we have to rewind and
	   start again from the beginning.  This isn't necessary if the
	   file happens to be CBR, of course; in that case we could seek
	   directly to the frame we want.  But I leave that little
	   optimization for the future developer who discovers she really
	   needs it.  Now we have to skip frames until we come to the right one.
	 Again, only truly necessary if the file is VBR.  Couldn't read a frame; either an error condition or
		   end-of-file.  Stop.  Here we are, at the beginning of the frame that contains the
	 target time.  Ehh, I say that's close enough.  If we wanted to,
	 we could get more precise by decoding the frame now and counting
	 the appropriate number of samples out of it.  MP3_MAD_MUSIC 
  SDL_mixer:  An audio mixer library based on the SDL library
  Copyright (C) 1997-2012 Sam Lantinga <slouken@libsdl.org>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
 Starts the playback.  Stops the playback.  Returns true if the playing is engaged, false otherwise.  Reads the next frame from the file.  Returns true on success or
   false on failure.  There might be some bytes in the buffer left over from last
	   time.  If so, move them down and read more bytes following
	   them.  Now read additional bytes from the input file.  At the end of the file, we must stuff MAD_BUFFER_GUARD
		   number of 0 bytes.  Now feed those bytes into the libmad stream.  Now ask libmad to extract a frame from the data we just put in
	 its buffer.  Scale a MAD sample to 16 bits for output.  round  clip  quantize  Once the frame has been read, copies its samples into the output
   buffer.  The first frame determines some key properties of the stream.
	   In particular, it tells us enough to set up the convert
	   structure now.  pcm->samplerate contains the sampling frequency  output sample(s) in 16-bit signed little-endian PCM assert(mp3_mad->output_end <= MAD_OUTPUT_BUFFER_SIZE); We're not supposed to be playing, so send silence instead.  We need to get a new frame.  Couldn't read a frame; either an error condition or
			 end-of-file.  Stop.  Now convert the frame data to the appropriate format for
		   output. assert(mp3_mad->output_end <= MAD_OUTPUT_BUFFER_SIZE); In order to seek backwards in a VBR file, we have to rewind and
	   start again from the beginning.  This isn't necessary if the
	   file happens to be CBR, of course; in that case we could seek
	   directly to the frame we want.  But I leave that little
	   optimization for the future developer who discovers she really
	   needs it.  Now we have to skip frames until we come to the right one.
	 Again, only truly necessary if the file is VBR.  Couldn't read a frame; either an error condition or
		   end-of-file.  Stop.  Here we are, at the beginning of the frame that contains the
	 target time.  Ehh, I say that's close enough.  If we wanted to,
	 we could get more precise by decoding the frame now and counting
	 the appropriate number of samples out of it.  MP3_MAD_MUSIC 