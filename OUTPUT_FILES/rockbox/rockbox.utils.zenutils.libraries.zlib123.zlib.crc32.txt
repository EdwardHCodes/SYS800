 crc32.c -- compute the CRC-32 of a data stream
 * Copyright (C) 1995-2005 Mark Adler
 * For conditions of distribution and use, see copyright notice in zlib.h
 *
 * Thanks to Rodney Brown <rbrown64@csc.com.au> for his contribution of faster
 * CRC methods: exclusive-oring 32 bits of data at a time, and pre-computing
 * tables for updating the shift register in one step with three exclusive-ors
 * instead of four steps with four exclusive-ors.  This results in about a
 * factor of two increase in speed on a Power PC G4 (PPC7455) using gcc -O3.
  @(#) $Id$ 
  Note on the use of DYNAMIC_CRC_TABLE: there is no mutex or semaphore
  protection on the static variables used to control the first-use generation
  of the crc tables.  Therefore, if you #define DYNAMIC_CRC_TABLE, you should
  first call get_crc_table() to initialize the tables before allowing more than
  one thread to use crc32().
  !DYNAMIC_CRC_TABLE  MAKECRCH  for STDC and FAR definitions  Find a four-byte integer type for crc32_little() and crc32_big().  need ANSI C limits.h to determine sizes  can't find a four-byte integer type!  STDC  !NOBYFOUR  Definitions for doing the crc four data bytes at a time.  BYFOUR  Local functions for crc concatenation  MAKECRCH 
  Generate tables for a byte-wise 32-bit CRC calculation on the polynomial:
  x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.

  Polynomials over GF(2) are represented in binary, one bit per coefficient,
  with the lowest powers in the most significant bit.  Then adding polynomials
  is just exclusive-or, and multiplying a polynomial by x is a right shift by
  one.  If we call the above polynomial p, and represent a byte as the
  polynomial q, also with the lowest power in the most significant bit (so the
  byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
  where a mod b means the remainder after dividing a by b.

  This calculation is done using the shift-register method of multiplying and
  taking the remainder.  The register is initialized to zero, and for each
  incoming bit, x^32 is added mod p to the register if the bit is a one (where
  x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
  x (which is shifting right by one and adding x^32 mod p if the bit shifted
  out is a one).  We start with the highest power (least significant bit) of
  q and repeat for all eight bits of q.

  The first table is simply the CRC of all possible eight bit values.  This is
  all the information needed to generate CRCs on data a byte at a time for all
  combinations of CRC register values and incoming bytes.  The remaining tables
  allow for word-at-a-time CRC calculation for both big-endian and little-
  endian machines, where a word is four bytes.
 polynomial exclusive-or pattern  terms of polynomial defining this crc (except x^32):  flag to limit concurrent making  See if another task is already doing this (not thread-safe, but better
       than nothing -- significantly reduces duration of vulnerability in
       case the advice about DYNAMIC_CRC_TABLE is ignored)  make exclusive-or pattern from polynomial (0xedb88320UL)  generate a crc for every 8-bit value  generate crc for each value followed by one, two, and three zeros,
           and then the byte reversal of those as well as the first table  BYFOUR  not first  wait for the other guy to finish (not efficient, but rare)  write out CRC tables to crc32.h  BYFOUR  MAKECRCH  MAKECRCH  !DYNAMIC_CRC_TABLE  ========================================================================
 * Tables of CRC-32s of all single-byte values, made by make_crc_table().
  DYNAMIC_CRC_TABLE  =========================================================================
 * This function can be used by asm versions of crc32()
dimension of GF(2) vectors (length of CRC)  =========================================================================  =========================================================================  =========================================================================  even-power-of-two zeros operator  odd-power-of-two zeros operator  degenerate case  put operator for one zero bit in odd  CRC-32 polynomial  put operator for two zero bits in even  put operator for four zero bits in odd  apply len2 zeros to crc1 (first square will put the operator for one
       zero byte, eight zero bits, in even)  apply zeros operator for this bit of len2  if no more bits set, then done  another iteration of the loop with odd and even swapped  if no more bits set, then done  return combined crc  crc32.c -- compute the CRC-32 of a data stream
 * Copyright (C) 1995-2005 Mark Adler
 * For conditions of distribution and use, see copyright notice in zlib.h
 *
 * Thanks to Rodney Brown <rbrown64@csc.com.au> for his contribution of faster
 * CRC methods: exclusive-oring 32 bits of data at a time, and pre-computing
 * tables for updating the shift register in one step with three exclusive-ors
 * instead of four steps with four exclusive-ors.  This results in about a
 * factor of two increase in speed on a Power PC G4 (PPC7455) using gcc -O3.
  @(#) $Id$ 
  Note on the use of DYNAMIC_CRC_TABLE: there is no mutex or semaphore
  protection on the static variables used to control the first-use generation
  of the crc tables.  Therefore, if you #define DYNAMIC_CRC_TABLE, you should
  first call get_crc_table() to initialize the tables before allowing more than
  one thread to use crc32().
  !DYNAMIC_CRC_TABLE  MAKECRCH  for STDC and FAR definitions  Find a four-byte integer type for crc32_little() and crc32_big().  need ANSI C limits.h to determine sizes  can't find a four-byte integer type!  STDC  !NOBYFOUR  Definitions for doing the crc four data bytes at a time.  BYFOUR  Local functions for crc concatenation  MAKECRCH 
  Generate tables for a byte-wise 32-bit CRC calculation on the polynomial:
  x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.

  Polynomials over GF(2) are represented in binary, one bit per coefficient,
  with the lowest powers in the most significant bit.  Then adding polynomials
  is just exclusive-or, and multiplying a polynomial by x is a right shift by
  one.  If we call the above polynomial p, and represent a byte as the
  polynomial q, also with the lowest power in the most significant bit (so the
  byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
  where a mod b means the remainder after dividing a by b.

  This calculation is done using the shift-register method of multiplying and
  taking the remainder.  The register is initialized to zero, and for each
  incoming bit, x^32 is added mod p to the register if the bit is a one (where
  x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
  x (which is shifting right by one and adding x^32 mod p if the bit shifted
  out is a one).  We start with the highest power (least significant bit) of
  q and repeat for all eight bits of q.

  The first table is simply the CRC of all possible eight bit values.  This is
  all the information needed to generate CRCs on data a byte at a time for all
  combinations of CRC register values and incoming bytes.  The remaining tables
  allow for word-at-a-time CRC calculation for both big-endian and little-
  endian machines, where a word is four bytes.
 polynomial exclusive-or pattern  terms of polynomial defining this crc (except x^32):  flag to limit concurrent making  See if another task is already doing this (not thread-safe, but better
       than nothing -- significantly reduces duration of vulnerability in
       case the advice about DYNAMIC_CRC_TABLE is ignored)  make exclusive-or pattern from polynomial (0xedb88320UL)  generate a crc for every 8-bit value  generate crc for each value followed by one, two, and three zeros,
           and then the byte reversal of those as well as the first table  BYFOUR  not first  wait for the other guy to finish (not efficient, but rare)  write out CRC tables to crc32.h  BYFOUR  MAKECRCH  MAKECRCH  !DYNAMIC_CRC_TABLE  ========================================================================
 * Tables of CRC-32s of all single-byte values, made by make_crc_table().
  DYNAMIC_CRC_TABLE  =========================================================================
 * This function can be used by asm versions of crc32()
dimension of GF(2) vectors (length of CRC)  =========================================================================  =========================================================================  =========================================================================  even-power-of-two zeros operator  odd-power-of-two zeros operator  degenerate case  put operator for one zero bit in odd  CRC-32 polynomial  put operator for two zero bits in even  put operator for four zero bits in odd  apply len2 zeros to crc1 (first square will put the operator for one
       zero byte, eight zero bits, in even)  apply zeros operator for this bit of len2  if no more bits set, then done  another iteration of the loop with odd and even swapped  if no more bits set, then done  return combined crc  crc32.c -- compute the CRC-32 of a data stream
 * Copyright (C) 1995-2005 Mark Adler
 * For conditions of distribution and use, see copyright notice in zlib.h
 *
 * Thanks to Rodney Brown <rbrown64@csc.com.au> for his contribution of faster
 * CRC methods: exclusive-oring 32 bits of data at a time, and pre-computing
 * tables for updating the shift register in one step with three exclusive-ors
 * instead of four steps with four exclusive-ors.  This results in about a
 * factor of two increase in speed on a Power PC G4 (PPC7455) using gcc -O3.
  @(#) $Id$ 
  Note on the use of DYNAMIC_CRC_TABLE: there is no mutex or semaphore
  protection on the static variables used to control the first-use generation
  of the crc tables.  Therefore, if you #define DYNAMIC_CRC_TABLE, you should
  first call get_crc_table() to initialize the tables before allowing more than
  one thread to use crc32().
  !DYNAMIC_CRC_TABLE  MAKECRCH  for STDC and FAR definitions  Find a four-byte integer type for crc32_little() and crc32_big().  need ANSI C limits.h to determine sizes  can't find a four-byte integer type!  STDC  !NOBYFOUR  Definitions for doing the crc four data bytes at a time.  BYFOUR  Local functions for crc concatenation  MAKECRCH 
  Generate tables for a byte-wise 32-bit CRC calculation on the polynomial:
  x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.

  Polynomials over GF(2) are represented in binary, one bit per coefficient,
  with the lowest powers in the most significant bit.  Then adding polynomials
  is just exclusive-or, and multiplying a polynomial by x is a right shift by
  one.  If we call the above polynomial p, and represent a byte as the
  polynomial q, also with the lowest power in the most significant bit (so the
  byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
  where a mod b means the remainder after dividing a by b.

  This calculation is done using the shift-register method of multiplying and
  taking the remainder.  The register is initialized to zero, and for each
  incoming bit, x^32 is added mod p to the register if the bit is a one (where
  x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
  x (which is shifting right by one and adding x^32 mod p if the bit shifted
  out is a one).  We start with the highest power (least significant bit) of
  q and repeat for all eight bits of q.

  The first table is simply the CRC of all possible eight bit values.  This is
  all the information needed to generate CRCs on data a byte at a time for all
  combinations of CRC register values and incoming bytes.  The remaining tables
  allow for word-at-a-time CRC calculation for both big-endian and little-
  endian machines, where a word is four bytes.
 polynomial exclusive-or pattern  terms of polynomial defining this crc (except x^32):  flag to limit concurrent making  See if another task is already doing this (not thread-safe, but better
       than nothing -- significantly reduces duration of vulnerability in
       case the advice about DYNAMIC_CRC_TABLE is ignored)  make exclusive-or pattern from polynomial (0xedb88320UL)  generate a crc for every 8-bit value  generate crc for each value followed by one, two, and three zeros,
           and then the byte reversal of those as well as the first table  BYFOUR  not first  wait for the other guy to finish (not efficient, but rare)  write out CRC tables to crc32.h  BYFOUR  MAKECRCH  MAKECRCH  !DYNAMIC_CRC_TABLE  ========================================================================
 * Tables of CRC-32s of all single-byte values, made by make_crc_table().
  DYNAMIC_CRC_TABLE  =========================================================================
 * This function can be used by asm versions of crc32()
dimension of GF(2) vectors (length of CRC)  =========================================================================  =========================================================================  =========================================================================  even-power-of-two zeros operator  odd-power-of-two zeros operator  degenerate case  put operator for one zero bit in odd  CRC-32 polynomial  put operator for two zero bits in even  put operator for four zero bits in odd  apply len2 zeros to crc1 (first square will put the operator for one
       zero byte, eight zero bits, in even)  apply zeros operator for this bit of len2  if no more bits set, then done  another iteration of the loop with odd and even swapped  if no more bits set, then done  return combined crc 