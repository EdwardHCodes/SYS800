**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Dave Chapman
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Externally defined interrupt handlers  Clears the corresponding IRQ status  TODO  TODO - these should live in the target-specific directories and
   once we understand what all the GPIO pins do, move the init to the
   specific driver for that hardware.   For now, we just perform the 
   same GPIO init as the original firmware - this makes it easier to
   investigate what the GPIO pins do.
 Do what the original firmware does  0 - 0xf000  mvn r2, 0xfc000000  Do what the original firmware does  TODO - Implement for M200  Do what the original firmware does  Second function called in the original firmware's startup code - we just
   set up the clocks in the same way as the original firmware for now.  STP = 0x1, PW = 0x04 , HLD = 0x0  XIN=External main, Fcpu=Fsys, BCKDIV=1 (Fbus = Fsys / 2)  EN1 = 1, XIN=Ext. main, DIV1 = 0x2d, P1 = 1  EN1 = 1, XIN=Ext. main, DIV1 = 0xba, P1 = 1  Only seen in the Logik DAX original firmware  Disable PLL  Enable PLL, M=0xcf, P=0x13. m=M+8, p=P+2, S = 0
       Fout = (215/21)*12MHz = 122857142Hz  Enable PLL0  Fsys = PLL0, Fcpu = Fsys, Fbus=Fsys / 2  Enable Z-Clock  Timer Z-Clock enable, XIN direct Set TC32 timer to be our USEC_TIMER (Xin divided by 12 = 1MHz)  Memory protection - see page 48 of ARM946 TRM
http://infocenter.arm.com/help/topic/com.arm.doc.ddi0201d/DDI0201D_arm946es_r1p1_trm.pdf
  Region 0 - addr=0, size=4GB, enabled  Address region 1 - addr 0x2fff0000, size=64KB, enabled Address region 1 - addr 0x20000000, size=8KB, enabled Address region 1 - addr 0x20000000, size=256MB, enabled Address region 2 - addr 0x30000000, size=256MB, enabled Address region 2 - addr 0x40000000, size=512MB, enabled Address region 4 - addr 0x60000000, size=256MB, enabled Address region 5 - addr 0x10000000, size=256MB, enabled Address region 6 - addr 0x80000000, size=2GB, enabled Address region 7 - addr 0x3000f000, size=4KB, enabled Register 5 - Access Permission Registers  write data access permission bits  write instruction access permission bits  set write buffer control register  Flush instruction cache  Flush data cache  CPU control bits  mask all interrupts  Set all interrupts as IRQ for now - some may need to be FIQ in future  Set master enable bit **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Dave Chapman
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Externally defined interrupt handlers  Clears the corresponding IRQ status  TODO  TODO - these should live in the target-specific directories and
   once we understand what all the GPIO pins do, move the init to the
   specific driver for that hardware.   For now, we just perform the 
   same GPIO init as the original firmware - this makes it easier to
   investigate what the GPIO pins do.
 Do what the original firmware does  0 - 0xf000  mvn r2, 0xfc000000  Do what the original firmware does  TODO - Implement for M200  Do what the original firmware does  Second function called in the original firmware's startup code - we just
   set up the clocks in the same way as the original firmware for now.  STP = 0x1, PW = 0x04 , HLD = 0x0  XIN=External main, Fcpu=Fsys, BCKDIV=1 (Fbus = Fsys / 2)  EN1 = 1, XIN=Ext. main, DIV1 = 0x2d, P1 = 1  EN1 = 1, XIN=Ext. main, DIV1 = 0xba, P1 = 1  Only seen in the Logik DAX original firmware  Disable PLL  Enable PLL, M=0xcf, P=0x13. m=M+8, p=P+2, S = 0
       Fout = (215/21)*12MHz = 122857142Hz  Enable PLL0  Fsys = PLL0, Fcpu = Fsys, Fbus=Fsys / 2  Enable Z-Clock  Timer Z-Clock enable, XIN direct Set TC32 timer to be our USEC_TIMER (Xin divided by 12 = 1MHz)  Memory protection - see page 48 of ARM946 TRM
http://infocenter.arm.com/help/topic/com.arm.doc.ddi0201d/DDI0201D_arm946es_r1p1_trm.pdf
  Region 0 - addr=0, size=4GB, enabled  Address region 1 - addr 0x2fff0000, size=64KB, enabled Address region 1 - addr 0x20000000, size=8KB, enabled Address region 1 - addr 0x20000000, size=256MB, enabled Address region 2 - addr 0x30000000, size=256MB, enabled Address region 2 - addr 0x40000000, size=512MB, enabled Address region 4 - addr 0x60000000, size=256MB, enabled Address region 5 - addr 0x10000000, size=256MB, enabled Address region 6 - addr 0x80000000, size=2GB, enabled Address region 7 - addr 0x3000f000, size=4KB, enabled Register 5 - Access Permission Registers  write data access permission bits  write instruction access permission bits  set write buffer control register  Flush instruction cache  Flush data cache  CPU control bits  mask all interrupts  Set all interrupts as IRQ for now - some may need to be FIQ in future  Set master enable bit **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Dave Chapman
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Externally defined interrupt handlers  Clears the corresponding IRQ status  TODO  TODO - these should live in the target-specific directories and
   once we understand what all the GPIO pins do, move the init to the
   specific driver for that hardware.   For now, we just perform the 
   same GPIO init as the original firmware - this makes it easier to
   investigate what the GPIO pins do.
 Do what the original firmware does  0 - 0xf000  mvn r2, 0xfc000000  Do what the original firmware does  TODO - Implement for M200  Do what the original firmware does  Second function called in the original firmware's startup code - we just
   set up the clocks in the same way as the original firmware for now.  STP = 0x1, PW = 0x04 , HLD = 0x0  XIN=External main, Fcpu=Fsys, BCKDIV=1 (Fbus = Fsys / 2)  EN1 = 1, XIN=Ext. main, DIV1 = 0x2d, P1 = 1  EN1 = 1, XIN=Ext. main, DIV1 = 0xba, P1 = 1  Only seen in the Logik DAX original firmware  Disable PLL  Enable PLL, M=0xcf, P=0x13. m=M+8, p=P+2, S = 0
       Fout = (215/21)*12MHz = 122857142Hz  Enable PLL0  Fsys = PLL0, Fcpu = Fsys, Fbus=Fsys / 2  Enable Z-Clock  Timer Z-Clock enable, XIN direct Set TC32 timer to be our USEC_TIMER (Xin divided by 12 = 1MHz)  Memory protection - see page 48 of ARM946 TRM
http://infocenter.arm.com/help/topic/com.arm.doc.ddi0201d/DDI0201D_arm946es_r1p1_trm.pdf
  Region 0 - addr=0, size=4GB, enabled  Address region 1 - addr 0x2fff0000, size=64KB, enabled Address region 1 - addr 0x20000000, size=8KB, enabled Address region 1 - addr 0x20000000, size=256MB, enabled Address region 2 - addr 0x30000000, size=256MB, enabled Address region 2 - addr 0x40000000, size=512MB, enabled Address region 4 - addr 0x60000000, size=256MB, enabled Address region 5 - addr 0x10000000, size=256MB, enabled Address region 6 - addr 0x80000000, size=2GB, enabled Address region 7 - addr 0x3000f000, size=4KB, enabled Register 5 - Access Permission Registers  write data access permission bits  write instruction access permission bits  set write buffer control register  Flush instruction cache  Flush data cache  CPU control bits  mask all interrupts  Set all interrupts as IRQ for now - some may need to be FIQ in future  Set master enable bit 