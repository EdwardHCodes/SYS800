**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 Thomas Martitz
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** snprintf  YPR0, YPR1, NWZ  Special dirs are user-accessible (and user-writable) dirs which take priority
 * over the ones where Rockbox is installed to. Classic example would be
 * $HOME/.config/rockbox.org vs /usr/share/rockbox  This is to compare any opened directories with the home directory so that
   the special drive links may be returned for it only  A special link is created under e.g. HOME_DIR/<microSD1>, e.g. to access
 * external storage in a convenient location, much similar to the mount
 * point on our native targets. Here they are treated as symlink (one which
 * doesn't actually exist in the filesystem and therefore we have to override
 * readlink()  link might be passed with or without HOME_DIR expanded. To handle
         * both perform substring matching (VOL_NAMES is unique enough)  begin now points to the start of vol_string within link,
             * we want to copy the remainder of the paths, prefixed by
             * the actual mount point (the remainder might be "")  we keep an open descriptor of the home directory to detect when it has been
   opened by opendir() so that its "symlinks" may be enumerated  HAVE_MULTIDRIVE  make sure $HOME/.config/rockbox.org exists, it's needed for config.cfg  Plugin data directory  HAVE_SPECIAL_DIRS  if this fails then alternate volumes will not work, but this function
       cannot return that fact  HAVE_MULTIDRIVE  replace ROCKBOX_DIR in path with $HOME/.config/rockbox.org  always return the replacement buffer (pointing to $HOME) if
     * write access is needed  not found in $HOME, try ROCKBOX_BASE_DIR, !NEED_WRITE only  HAVE_SDL_THREADS  need to wrap around DIR* because we need to save the parent's directory
 * path in order to determine dirinfo for volumes or convert the path to UTF-8;
 * also is required to implement get_dir_info()  allocate what we're really going to return to callers, making certain
       it has at least the d_name size we want  only the d_name field will be valid but that is all that anyone may
       truely count on portably existing  USE_DIRENTP  assume NOT $HOME  there's no place like $HOME  HAVE_MULTIDRIVE  do normal directory reads  HAVE_MULTIDRIVE  OS_DIRENT_CONVERT  last thing read was a "symlink"  On MD we create a virtual symlink for the external drive,
 * for this we need to override readlink().  if path == _buf then we can be sure handle_special_dir() did something
     * and path is not an ordinary directory  copying NUL is not required as per readlink specification  does not append NUL !! **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 Thomas Martitz
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** snprintf  YPR0, YPR1, NWZ  Special dirs are user-accessible (and user-writable) dirs which take priority
 * over the ones where Rockbox is installed to. Classic example would be
 * $HOME/.config/rockbox.org vs /usr/share/rockbox  This is to compare any opened directories with the home directory so that
   the special drive links may be returned for it only  A special link is created under e.g. HOME_DIR/<microSD1>, e.g. to access
 * external storage in a convenient location, much similar to the mount
 * point on our native targets. Here they are treated as symlink (one which
 * doesn't actually exist in the filesystem and therefore we have to override
 * readlink()  link might be passed with or without HOME_DIR expanded. To handle
         * both perform substring matching (VOL_NAMES is unique enough)  begin now points to the start of vol_string within link,
             * we want to copy the remainder of the paths, prefixed by
             * the actual mount point (the remainder might be "")  we keep an open descriptor of the home directory to detect when it has been
   opened by opendir() so that its "symlinks" may be enumerated  HAVE_MULTIDRIVE  make sure $HOME/.config/rockbox.org exists, it's needed for config.cfg  Plugin data directory  HAVE_SPECIAL_DIRS  if this fails then alternate volumes will not work, but this function
       cannot return that fact  HAVE_MULTIDRIVE  replace ROCKBOX_DIR in path with $HOME/.config/rockbox.org  always return the replacement buffer (pointing to $HOME) if
     * write access is needed  not found in $HOME, try ROCKBOX_BASE_DIR, !NEED_WRITE only  HAVE_SDL_THREADS  need to wrap around DIR* because we need to save the parent's directory
 * path in order to determine dirinfo for volumes or convert the path to UTF-8;
 * also is required to implement get_dir_info()  allocate what we're really going to return to callers, making certain
       it has at least the d_name size we want  only the d_name field will be valid but that is all that anyone may
       truely count on portably existing  USE_DIRENTP  assume NOT $HOME  there's no place like $HOME  HAVE_MULTIDRIVE  do normal directory reads  HAVE_MULTIDRIVE  OS_DIRENT_CONVERT  last thing read was a "symlink"  On MD we create a virtual symlink for the external drive,
 * for this we need to override readlink().  if path == _buf then we can be sure handle_special_dir() did something
     * and path is not an ordinary directory  copying NUL is not required as per readlink specification  does not append NUL !! **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 Thomas Martitz
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** snprintf  YPR0, YPR1, NWZ  Special dirs are user-accessible (and user-writable) dirs which take priority
 * over the ones where Rockbox is installed to. Classic example would be
 * $HOME/.config/rockbox.org vs /usr/share/rockbox  This is to compare any opened directories with the home directory so that
   the special drive links may be returned for it only  A special link is created under e.g. HOME_DIR/<microSD1>, e.g. to access
 * external storage in a convenient location, much similar to the mount
 * point on our native targets. Here they are treated as symlink (one which
 * doesn't actually exist in the filesystem and therefore we have to override
 * readlink()  link might be passed with or without HOME_DIR expanded. To handle
         * both perform substring matching (VOL_NAMES is unique enough)  begin now points to the start of vol_string within link,
             * we want to copy the remainder of the paths, prefixed by
             * the actual mount point (the remainder might be "")  we keep an open descriptor of the home directory to detect when it has been
   opened by opendir() so that its "symlinks" may be enumerated  HAVE_MULTIDRIVE  make sure $HOME/.config/rockbox.org exists, it's needed for config.cfg  Plugin data directory  HAVE_SPECIAL_DIRS  if this fails then alternate volumes will not work, but this function
       cannot return that fact  HAVE_MULTIDRIVE  replace ROCKBOX_DIR in path with $HOME/.config/rockbox.org  always return the replacement buffer (pointing to $HOME) if
     * write access is needed  not found in $HOME, try ROCKBOX_BASE_DIR, !NEED_WRITE only  HAVE_SDL_THREADS  need to wrap around DIR* because we need to save the parent's directory
 * path in order to determine dirinfo for volumes or convert the path to UTF-8;
 * also is required to implement get_dir_info()  allocate what we're really going to return to callers, making certain
       it has at least the d_name size we want  only the d_name field will be valid but that is all that anyone may
       truely count on portably existing  USE_DIRENTP  assume NOT $HOME  there's no place like $HOME  HAVE_MULTIDRIVE  do normal directory reads  HAVE_MULTIDRIVE  OS_DIRENT_CONVERT  last thing read was a "symlink"  On MD we create a virtual symlink for the external drive,
 * for this we need to override readlink().  if path == _buf then we can be sure handle_special_dir() did something
     * and path is not an ordinary directory  copying NUL is not required as per readlink specification  does not append NUL !! 