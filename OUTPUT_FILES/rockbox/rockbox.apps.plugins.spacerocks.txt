**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Mat Holton
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** variable button definitions  The array of points that make up an asteroid  The array of points that make up an asteroid  The array of points that make up an asteroid  The array of points the make up the ship  The array of points the make up the bad spaceship  Asteroid structure, contains an array of points ************************************************
** Handle polygon and point
************************************************ Check if point is in a polygon  Check if point is within a rectangle  Rotate polygon  normalize vector. this is not accurate but would be enough.  Draw polygon  Check bounds on the x-axis:  Check bounds on the y-axis: ************************************************
** Handle trail blaiz.
************************************************ give the point a random countdown timer, so they dissapears at different
       times  find a space in the array of trail_points that is NULL or DEAD or
           whatever and place this one here.  take a random point near the position.  give the points a speed based on direction of travel
               - i.e. opposite  loop through, if alive then move and draw.
       when drawn, countdown it's timer.
       if zero kill it!  intensity = tpoint->alive/2; ************************************************
** Handle asteroid.
************************************************ Initialise the passed Asteroid.
 * if position is NULL, place it at the random loacation
 * where ship doesn't exist
  Set the radius of the asteroid:  shall we move Clockwise and Fast  dx and dy are used when rotate polygon  Set the position randomly:  Now rotate the asteroid a bit, so they all look a bit different  great, we've created an asteroid, don't forget to increment the total: 
 * Creates a new asteroid of the given 4type (size) and at the given location.
  Draw and move all asteroids ************************************************
** Handle ship.
************************************************ Initialise the ship  dx and dy are used when rotate polygon  grab a copy of the ships points for the lives display: 
 * Draws the ship, moves the ship and creates a new
 * one if it's finished exploding.
  if not invulnerable, blow up ship  Rotate the ship using the passed sin & cos values  if dx and dy are below a certain threshold, then set 'em to 0
           but to do this we need to ascertain if the spacehip as moved on
           screen for more than a certain amount.  stop movement of ship, 'cos that's what happens when you go into hyperspace. 
 * missile
  Initialise a missile  Fire the next missile  Draw and Move all the missiles ************************************************
** Handle enemy.
************************************************ if no missile and the enemy is here and not exploding..
           then shoot baby!  lame, needs to be sorted - it's trying to shoot at the ship ************************************************
** Check collisions.
************************************************ Add score if missile hit asteroid or enemy  Check for collsions between the missiles and the asteroids and the ship  if the asteroids exists then test missile collision:  if the missiles exists:  has the missile hit the asteroid?  now check collision with ship:  has the enemy missile blown something up?  is an asteroid still exploding?  now check collision between ship and enemy  has the enemy collided with the ship?  Now see if the enemy has been shot at by the ships missiles:  test collision with enemy missile and ship:  if all asteroids cleared then start again: 
 * stars
 ************************************************
** Creates start_num number of new asteroids of
** full size.
************************************************* no enemy  clear asteroids  make some LARGE asteroids  ensure all missiles are out of action:  menu stuff  maybe shield if it gets too hard  universal font  Turn off backlight timeout  create stars once, and once only:  Turn on backlight timeout (revert to settings) **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Mat Holton
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** variable button definitions  The array of points that make up an asteroid  The array of points that make up an asteroid  The array of points that make up an asteroid  The array of points the make up the ship  The array of points the make up the bad spaceship  Asteroid structure, contains an array of points ************************************************
** Handle polygon and point
************************************************ Check if point is in a polygon  Check if point is within a rectangle  Rotate polygon  normalize vector. this is not accurate but would be enough.  Draw polygon  Check bounds on the x-axis:  Check bounds on the y-axis: ************************************************
** Handle trail blaiz.
************************************************ give the point a random countdown timer, so they dissapears at different
       times  find a space in the array of trail_points that is NULL or DEAD or
           whatever and place this one here.  take a random point near the position.  give the points a speed based on direction of travel
               - i.e. opposite  loop through, if alive then move and draw.
       when drawn, countdown it's timer.
       if zero kill it!  intensity = tpoint->alive/2; ************************************************
** Handle asteroid.
************************************************ Initialise the passed Asteroid.
 * if position is NULL, place it at the random loacation
 * where ship doesn't exist
  Set the radius of the asteroid:  shall we move Clockwise and Fast  dx and dy are used when rotate polygon  Set the position randomly:  Now rotate the asteroid a bit, so they all look a bit different  great, we've created an asteroid, don't forget to increment the total: 
 * Creates a new asteroid of the given 4type (size) and at the given location.
  Draw and move all asteroids ************************************************
** Handle ship.
************************************************ Initialise the ship  dx and dy are used when rotate polygon  grab a copy of the ships points for the lives display: 
 * Draws the ship, moves the ship and creates a new
 * one if it's finished exploding.
  if not invulnerable, blow up ship  Rotate the ship using the passed sin & cos values  if dx and dy are below a certain threshold, then set 'em to 0
           but to do this we need to ascertain if the spacehip as moved on
           screen for more than a certain amount.  stop movement of ship, 'cos that's what happens when you go into hyperspace. 
 * missile
  Initialise a missile  Fire the next missile  Draw and Move all the missiles ************************************************
** Handle enemy.
************************************************ if no missile and the enemy is here and not exploding..
           then shoot baby!  lame, needs to be sorted - it's trying to shoot at the ship ************************************************
** Check collisions.
************************************************ Add score if missile hit asteroid or enemy  Check for collsions between the missiles and the asteroids and the ship  if the asteroids exists then test missile collision:  if the missiles exists:  has the missile hit the asteroid?  now check collision with ship:  has the enemy missile blown something up?  is an asteroid still exploding?  now check collision between ship and enemy  has the enemy collided with the ship?  Now see if the enemy has been shot at by the ships missiles:  test collision with enemy missile and ship:  if all asteroids cleared then start again: 
 * stars
 ************************************************
** Creates start_num number of new asteroids of
** full size.
************************************************* no enemy  clear asteroids  make some LARGE asteroids  ensure all missiles are out of action:  menu stuff  maybe shield if it gets too hard  universal font  Turn off backlight timeout  create stars once, and once only:  Turn on backlight timeout (revert to settings) **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Mat Holton
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** variable button definitions  The array of points that make up an asteroid  The array of points that make up an asteroid  The array of points that make up an asteroid  The array of points the make up the ship  The array of points the make up the bad spaceship  Asteroid structure, contains an array of points ************************************************
** Handle polygon and point
************************************************ Check if point is in a polygon  Check if point is within a rectangle  Rotate polygon  normalize vector. this is not accurate but would be enough.  Draw polygon  Check bounds on the x-axis:  Check bounds on the y-axis: ************************************************
** Handle trail blaiz.
************************************************ give the point a random countdown timer, so they dissapears at different
       times  find a space in the array of trail_points that is NULL or DEAD or
           whatever and place this one here.  take a random point near the position.  give the points a speed based on direction of travel
               - i.e. opposite  loop through, if alive then move and draw.
       when drawn, countdown it's timer.
       if zero kill it!  intensity = tpoint->alive/2; ************************************************
** Handle asteroid.
************************************************ Initialise the passed Asteroid.
 * if position is NULL, place it at the random loacation
 * where ship doesn't exist
  Set the radius of the asteroid:  shall we move Clockwise and Fast  dx and dy are used when rotate polygon  Set the position randomly:  Now rotate the asteroid a bit, so they all look a bit different  great, we've created an asteroid, don't forget to increment the total: 
 * Creates a new asteroid of the given 4type (size) and at the given location.
  Draw and move all asteroids ************************************************
** Handle ship.
************************************************ Initialise the ship  dx and dy are used when rotate polygon  grab a copy of the ships points for the lives display: 
 * Draws the ship, moves the ship and creates a new
 * one if it's finished exploding.
  if not invulnerable, blow up ship  Rotate the ship using the passed sin & cos values  if dx and dy are below a certain threshold, then set 'em to 0
           but to do this we need to ascertain if the spacehip as moved on
           screen for more than a certain amount.  stop movement of ship, 'cos that's what happens when you go into hyperspace. 
 * missile
  Initialise a missile  Fire the next missile  Draw and Move all the missiles ************************************************
** Handle enemy.
************************************************ if no missile and the enemy is here and not exploding..
           then shoot baby!  lame, needs to be sorted - it's trying to shoot at the ship ************************************************
** Check collisions.
************************************************ Add score if missile hit asteroid or enemy  Check for collsions between the missiles and the asteroids and the ship  if the asteroids exists then test missile collision:  if the missiles exists:  has the missile hit the asteroid?  now check collision with ship:  has the enemy missile blown something up?  is an asteroid still exploding?  now check collision between ship and enemy  has the enemy collided with the ship?  Now see if the enemy has been shot at by the ships missiles:  test collision with enemy missile and ship:  if all asteroids cleared then start again: 
 * stars
 ************************************************
** Creates start_num number of new asteroids of
** full size.
************************************************* no enemy  clear asteroids  make some LARGE asteroids  ensure all missiles are out of action:  menu stuff  maybe shield if it gets too hard  universal font  Turn off backlight timeout  create stars once, and once only:  Turn on backlight timeout (revert to settings) 