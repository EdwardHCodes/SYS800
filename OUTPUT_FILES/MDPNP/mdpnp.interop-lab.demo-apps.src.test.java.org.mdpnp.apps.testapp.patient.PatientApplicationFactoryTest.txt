*
     * test jdbc back end for the app.
     *
     * Over all test for the patient assignment app. As a part of automated test
     * suite will bring the app up, populate it with mock data and then bring the
     * ui down. if 'PatientApplicationFactoryTest.UpTimeMS' environment variable
     * set to -1, this test wil not exit automatically and ui will stay up forever.
     * It is suitable to be used a boot-strap entry point for app development.
      Pump the data into the screen and then shut down the app. if <0, keep the ui up forever - used to debugging. if <0, keep the ui up forever - used to debugging. Now that the lists are populated, fake the assignment event 'real' controller will send out the 'proposed device association event', wait for the device to respond, and only after that update the database and ui. For the purpose of testing, we do not want to sent events out as there as the devices are faked and go directly to handling the event as if the response came back.*
     * test jdbc back end for the app.
     *
     * Over all test for the patient assignment app. As a part of automated test
     * suite will bring the app up, populate it with mock data and then bring the
     * ui down. if 'PatientApplicationFactoryTest.UpTimeMS' environment variable
     * set to -1, this test wil not exit automatically and ui will stay up forever.
     * It is suitable to be used a boot-strap entry point for app development.
      Pump the data into the screen and then shut down the app. if <0, keep the ui up forever - used to debugging. if <0, keep the ui up forever - used to debugging. Now that the lists are populated, fake the assignment event 'real' controller will send out the 'proposed device association event', wait for the device to respond, and only after that update the database and ui. For the purpose of testing, we do not want to sent events out as there as the devices are faked and go directly to handling the event as if the response came back.*
     * test jdbc back end for the app.
     *
     * Over all test for the patient assignment app. As a part of automated test
     * suite will bring the app up, populate it with mock data and then bring the
     * ui down. if 'PatientApplicationFactoryTest.UpTimeMS' environment variable
     * set to -1, this test wil not exit automatically and ui will stay up forever.
     * It is suitable to be used a boot-strap entry point for app development.
      Pump the data into the screen and then shut down the app. if <0, keep the ui up forever - used to debugging. if <0, keep the ui up forever - used to debugging. Now that the lists are populated, fake the assignment event 'real' controller will send out the 'proposed device association event', wait for the device to respond, and only after that update the database and ui. For the purpose of testing, we do not want to sent events out as there as the devices are faked and go directly to handling the event as if the response came back.*
     * test jdbc back end for the app.
     *
     * Over all test for the patient assignment app. As a part of automated test
     * suite will bring the app up, populate it with mock data and then bring the
     * ui down. if 'PatientApplicationFactoryTest.UpTimeMS' environment variable
     * set to -1, this test wil not exit automatically and ui will stay up forever.
     * It is suitable to be used a boot-strap entry point for app development.
      Pump the data into the screen and then shut down the app. if <0, keep the ui up forever - used to debugging. if <0, keep the ui up forever - used to debugging. Now that the lists are populated, fake the assignment event 'real' controller will send out the 'proposed device association event', wait for the device to respond, and only after that update the database and ui. For the purpose of testing, we do not want to sent events out as there as the devices are faked and go directly to handling the event as if the response came back.