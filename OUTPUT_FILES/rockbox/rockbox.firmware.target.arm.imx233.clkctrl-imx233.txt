**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright © 2011 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** NOTE some registers like HW_CLKCTRL_PIX don't have a CLR/SET variant !  pll is a special case  warning: some registers like HW_CLKCTRL_PIX don't have a CLR/SET variant !
     * assume that we always derive emi and cpu from ref_XX  assume that we always derive emi and cpu from ref_XX  disable interrupts to avoid an IRQ being triggered at the point
     * where we are slow/weird speeds, that would result in massive slow-down...  we need to be very careful here: putting the wrong dividers could blow-up the
     * frequency and result in crash, also the cpu could be running from XTAL or
     * PLL at this point  since HBUS is tied to cpu, we first ensure that the HBUS is safe to handle
     * both old and new speed: take maximum of old and new dividers  we are about to change cpu speed: we first ensure that the fractional
     * divider is safe to handle both old and new integer divided frequency: take max  we are safe for major divider change  if the final fractional divider is lower than previous one, it's time to switch  if we were running from XTAL, switch to PLL  finally restore HBUS to its proper value  we are free again  the SLOW_DIV must only be set when auto-slow is disabled  NOTE: don't use SET/CLR because it doesn't exist on stmp3600  PLL: 480MHz when enable  crystal: 24MHz  In bypass mode: clk_p derived from clk_xtal via int/binfrac divider
             * otherwise, clk_p derived from clk_cpu via int div and clk_cpu
             * derived from clk_pll fracdiv  Integer divide mode vs fractional divide mode  fractional divider enable ?  Derived from clk_p via integer/fractional div  Derived from clk_pll via fracdiv  Derived from clk_pll or clk_xtal  Derived from clk_pll or clk_xtal  Derived from clk_pll or clk_xtal  set auto-slow monitor to all **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright © 2011 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** NOTE some registers like HW_CLKCTRL_PIX don't have a CLR/SET variant !  pll is a special case  warning: some registers like HW_CLKCTRL_PIX don't have a CLR/SET variant !
     * assume that we always derive emi and cpu from ref_XX  assume that we always derive emi and cpu from ref_XX  disable interrupts to avoid an IRQ being triggered at the point
     * where we are slow/weird speeds, that would result in massive slow-down...  we need to be very careful here: putting the wrong dividers could blow-up the
     * frequency and result in crash, also the cpu could be running from XTAL or
     * PLL at this point  since HBUS is tied to cpu, we first ensure that the HBUS is safe to handle
     * both old and new speed: take maximum of old and new dividers  we are about to change cpu speed: we first ensure that the fractional
     * divider is safe to handle both old and new integer divided frequency: take max  we are safe for major divider change  if the final fractional divider is lower than previous one, it's time to switch  if we were running from XTAL, switch to PLL  finally restore HBUS to its proper value  we are free again  the SLOW_DIV must only be set when auto-slow is disabled  NOTE: don't use SET/CLR because it doesn't exist on stmp3600  PLL: 480MHz when enable  crystal: 24MHz  In bypass mode: clk_p derived from clk_xtal via int/binfrac divider
             * otherwise, clk_p derived from clk_cpu via int div and clk_cpu
             * derived from clk_pll fracdiv  Integer divide mode vs fractional divide mode  fractional divider enable ?  Derived from clk_p via integer/fractional div  Derived from clk_pll via fracdiv  Derived from clk_pll or clk_xtal  Derived from clk_pll or clk_xtal  Derived from clk_pll or clk_xtal  set auto-slow monitor to all **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright © 2011 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** NOTE some registers like HW_CLKCTRL_PIX don't have a CLR/SET variant !  pll is a special case  warning: some registers like HW_CLKCTRL_PIX don't have a CLR/SET variant !
     * assume that we always derive emi and cpu from ref_XX  assume that we always derive emi and cpu from ref_XX  disable interrupts to avoid an IRQ being triggered at the point
     * where we are slow/weird speeds, that would result in massive slow-down...  we need to be very careful here: putting the wrong dividers could blow-up the
     * frequency and result in crash, also the cpu could be running from XTAL or
     * PLL at this point  since HBUS is tied to cpu, we first ensure that the HBUS is safe to handle
     * both old and new speed: take maximum of old and new dividers  we are about to change cpu speed: we first ensure that the fractional
     * divider is safe to handle both old and new integer divided frequency: take max  we are safe for major divider change  if the final fractional divider is lower than previous one, it's time to switch  if we were running from XTAL, switch to PLL  finally restore HBUS to its proper value  we are free again  the SLOW_DIV must only be set when auto-slow is disabled  NOTE: don't use SET/CLR because it doesn't exist on stmp3600  PLL: 480MHz when enable  crystal: 24MHz  In bypass mode: clk_p derived from clk_xtal via int/binfrac divider
             * otherwise, clk_p derived from clk_cpu via int div and clk_cpu
             * derived from clk_pll fracdiv  Integer divide mode vs fractional divide mode  fractional divider enable ?  Derived from clk_p via integer/fractional div  Derived from clk_pll via fracdiv  Derived from clk_pll or clk_xtal  Derived from clk_pll or clk_xtal  Derived from clk_pll or clk_xtal  set auto-slow monitor to all 