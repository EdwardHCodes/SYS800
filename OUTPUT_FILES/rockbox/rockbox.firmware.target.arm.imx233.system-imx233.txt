**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** stop hardware watchdog, we catched the error  recover current PC and trigger abort, so in the hope to get a useful
     * backtrace  ms  setting up a timer is not exactly a cheap operation so only do so
     * every second  setup two mechanisms:
     * - hardware watchdog to reset the player after 10 seconds
     * - software watchdog using a timer to panic after 5 seconds
     * The hardware mechanism ensures reset when the player is completely
     * dead and it actually resets the whole chip. On the contrary, the software
     * mechanism allows partial recovery by panicing and printing (maybe) useful
     * information, it uses a dedicated timer with the highest level of interrupt
     * priority so it works even if the player is stuck in IRQ context  wait a bit, useful for the user to stop touching anything  disable watchdog just in case since we will disable interrupts  disable interrupts, it's probably better to avoid any action so close
     * to shutdown  This pin seems to be important to shutdown the hardware properly  reset  stop hadrware watchdog, IRQs are stopped  make sure lcd and backlight are on  wait until button release (if a button is pressed)
     * NOTE at this point, interrupts are off so that rules out touchpad and
     * ADC, so we are pretty much left with PSWITCH only. If other buttons are
     * wanted, it is possible to implement a busy polling version of button
     * reading for GPIO and ADC in button-imx233 but this is not done at the
     * moment.  map every memory region to itself  map RAM and enable caching for it  NOTE: don't use anything here that might require tick task !
     * It is initialized by kernel_init *after* system_init().
     * The main() will naturally set cpu speed to normal after kernel_init()
     * so don't bother if the cpu is running at 24MHz here.
     * Make sure IO clock is running at expected speed  clk_io@clk_pll setup watchdog  make sure auto-slow is disable now, we don't know at which frequency we
     * are running and auto-slow could violate constraints on {xbus,hbus}  variable in Hz  keep alive to get enough time, stop watchdog  deassert reset and clock gate  soft-reset  make sure block is gated off  bring block out of reset  make sure clock is running  increase number of us by 1 to make sure we wait *at least* the requested
     * time  key  parameters  Some devices don't handle very well memory frequency changes, so avoid them
 * by running at highest speed at all time  we need a VDDD of at least 1.2V to run the EMI at 130Mhz  weird targets  clk_p@454.74 MHz, clk_h@151.58 MHz, clk_emi@130.91 MHz, VDDD@1.550 V  clk_p@320.00 MHz, clk_h@106.66 MHz, clk_emi@130.91 MHz, VDDD@1.450 V  clk_p@261.82 MHz, clk_h@130.91 MHz, clk_emi@130.91 MHz, VDDD@1.275 V  clk_p@64 MHz, clk_h@64 MHz, clk_emi@64 MHz, VDDD@1.050 V (or 1.275V)  dummy  don't change the frequency if it is useless (changes are expensive)  disable auto-slow (enable back afterwards)  WARNING watch out the order !  Change VDDD regulator  Change ARM cache timings  Change CPU and HBUS frequencies  Set the new EMI frequency  Change CPU and HBUS frequencies  Set the new EMI frequency  Change ARM cache timings  Change VDDD regulator  enable auto slow again only at lower cpu frequencies  update frequency **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** stop hardware watchdog, we catched the error  recover current PC and trigger abort, so in the hope to get a useful
     * backtrace  ms  setting up a timer is not exactly a cheap operation so only do so
     * every second  setup two mechanisms:
     * - hardware watchdog to reset the player after 10 seconds
     * - software watchdog using a timer to panic after 5 seconds
     * The hardware mechanism ensures reset when the player is completely
     * dead and it actually resets the whole chip. On the contrary, the software
     * mechanism allows partial recovery by panicing and printing (maybe) useful
     * information, it uses a dedicated timer with the highest level of interrupt
     * priority so it works even if the player is stuck in IRQ context  wait a bit, useful for the user to stop touching anything  disable watchdog just in case since we will disable interrupts  disable interrupts, it's probably better to avoid any action so close
     * to shutdown  This pin seems to be important to shutdown the hardware properly  reset  stop hadrware watchdog, IRQs are stopped  make sure lcd and backlight are on  wait until button release (if a button is pressed)
     * NOTE at this point, interrupts are off so that rules out touchpad and
     * ADC, so we are pretty much left with PSWITCH only. If other buttons are
     * wanted, it is possible to implement a busy polling version of button
     * reading for GPIO and ADC in button-imx233 but this is not done at the
     * moment.  map every memory region to itself  map RAM and enable caching for it  NOTE: don't use anything here that might require tick task !
     * It is initialized by kernel_init *after* system_init().
     * The main() will naturally set cpu speed to normal after kernel_init()
     * so don't bother if the cpu is running at 24MHz here.
     * Make sure IO clock is running at expected speed  clk_io@clk_pll setup watchdog  make sure auto-slow is disable now, we don't know at which frequency we
     * are running and auto-slow could violate constraints on {xbus,hbus}  variable in Hz  keep alive to get enough time, stop watchdog  deassert reset and clock gate  soft-reset  make sure block is gated off  bring block out of reset  make sure clock is running  increase number of us by 1 to make sure we wait *at least* the requested
     * time  key  parameters  Some devices don't handle very well memory frequency changes, so avoid them
 * by running at highest speed at all time  we need a VDDD of at least 1.2V to run the EMI at 130Mhz  weird targets  clk_p@454.74 MHz, clk_h@151.58 MHz, clk_emi@130.91 MHz, VDDD@1.550 V  clk_p@320.00 MHz, clk_h@106.66 MHz, clk_emi@130.91 MHz, VDDD@1.450 V  clk_p@261.82 MHz, clk_h@130.91 MHz, clk_emi@130.91 MHz, VDDD@1.275 V  clk_p@64 MHz, clk_h@64 MHz, clk_emi@64 MHz, VDDD@1.050 V (or 1.275V)  dummy  don't change the frequency if it is useless (changes are expensive)  disable auto-slow (enable back afterwards)  WARNING watch out the order !  Change VDDD regulator  Change ARM cache timings  Change CPU and HBUS frequencies  Set the new EMI frequency  Change CPU and HBUS frequencies  Set the new EMI frequency  Change ARM cache timings  Change VDDD regulator  enable auto slow again only at lower cpu frequencies  update frequency **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** stop hardware watchdog, we catched the error  recover current PC and trigger abort, so in the hope to get a useful
     * backtrace  ms  setting up a timer is not exactly a cheap operation so only do so
     * every second  setup two mechanisms:
     * - hardware watchdog to reset the player after 10 seconds
     * - software watchdog using a timer to panic after 5 seconds
     * The hardware mechanism ensures reset when the player is completely
     * dead and it actually resets the whole chip. On the contrary, the software
     * mechanism allows partial recovery by panicing and printing (maybe) useful
     * information, it uses a dedicated timer with the highest level of interrupt
     * priority so it works even if the player is stuck in IRQ context  wait a bit, useful for the user to stop touching anything  disable watchdog just in case since we will disable interrupts  disable interrupts, it's probably better to avoid any action so close
     * to shutdown  This pin seems to be important to shutdown the hardware properly  reset  stop hadrware watchdog, IRQs are stopped  make sure lcd and backlight are on  wait until button release (if a button is pressed)
     * NOTE at this point, interrupts are off so that rules out touchpad and
     * ADC, so we are pretty much left with PSWITCH only. If other buttons are
     * wanted, it is possible to implement a busy polling version of button
     * reading for GPIO and ADC in button-imx233 but this is not done at the
     * moment.  map every memory region to itself  map RAM and enable caching for it  NOTE: don't use anything here that might require tick task !
     * It is initialized by kernel_init *after* system_init().
     * The main() will naturally set cpu speed to normal after kernel_init()
     * so don't bother if the cpu is running at 24MHz here.
     * Make sure IO clock is running at expected speed  clk_io@clk_pll setup watchdog  make sure auto-slow is disable now, we don't know at which frequency we
     * are running and auto-slow could violate constraints on {xbus,hbus}  variable in Hz  keep alive to get enough time, stop watchdog  deassert reset and clock gate  soft-reset  make sure block is gated off  bring block out of reset  make sure clock is running  increase number of us by 1 to make sure we wait *at least* the requested
     * time  key  parameters  Some devices don't handle very well memory frequency changes, so avoid them
 * by running at highest speed at all time  we need a VDDD of at least 1.2V to run the EMI at 130Mhz  weird targets  clk_p@454.74 MHz, clk_h@151.58 MHz, clk_emi@130.91 MHz, VDDD@1.550 V  clk_p@320.00 MHz, clk_h@106.66 MHz, clk_emi@130.91 MHz, VDDD@1.450 V  clk_p@261.82 MHz, clk_h@130.91 MHz, clk_emi@130.91 MHz, VDDD@1.275 V  clk_p@64 MHz, clk_h@64 MHz, clk_emi@64 MHz, VDDD@1.050 V (or 1.275V)  dummy  don't change the frequency if it is useless (changes are expensive)  disable auto-slow (enable back afterwards)  WARNING watch out the order !  Change VDDD regulator  Change ARM cache timings  Change CPU and HBUS frequencies  Set the new EMI frequency  Change CPU and HBUS frequencies  Set the new EMI frequency  Change ARM cache timings  Change VDDD regulator  enable auto slow again only at lower cpu frequencies  update frequency 