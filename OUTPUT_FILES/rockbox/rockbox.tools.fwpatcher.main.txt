**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 by Thom Johansen
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** TODO: integrate the iriver.c and mkboot stuff better, they're pretty much
 * intended to be called from a command line tool, and i haven't changed that.
  precalculated checksums for H110/H115  precalculated checksums for H120/H140  precalculated checksums for H320/H340  begin mkboot.c excerpt  First, read the iriver original firmware into the image  This is the length of the binary image without the scrambling
       overhead (but including the ESTFBINR header)  Read the rest of the binary data, but not the checksum block  Patch the reset vector to start the boot loader  This is the actual length of the binary, excluding all headers  Patch the ESTFBINR header  This is the length of the binary, including the ESTFBINR header and
       rounded up to the nearest 0x200 boundary  The number of checksums, i.e number of 0x200 byte blocks  The total file length, including all headers and checksums  Patch the scrambler header with the new length info  end mkboot.c excerpt  get pointer to the correct bootloader.bin  get filename from edit box  store temp files in temp directory  descrambled file  patched file  patched and scrambled file  now md5sum it  delete temp files  all is fine, rename the patched file to original name of the firmware  Deleting a perfectly good firmware here really  delete all temp files, don't care if some aren't created yet  no default filename text label  text field for inputing file name  browse button  patch button  set default font on all controls, will be ugly if we don't do this  user pressed browse button  user pressed patch button  Check firmware against md5sums in h120sums and h100sums  command line driven patch button  end of cmd line**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 by Thom Johansen
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** TODO: integrate the iriver.c and mkboot stuff better, they're pretty much
 * intended to be called from a command line tool, and i haven't changed that.
  precalculated checksums for H110/H115  precalculated checksums for H120/H140  precalculated checksums for H320/H340  begin mkboot.c excerpt  First, read the iriver original firmware into the image  This is the length of the binary image without the scrambling
       overhead (but including the ESTFBINR header)  Read the rest of the binary data, but not the checksum block  Patch the reset vector to start the boot loader  This is the actual length of the binary, excluding all headers  Patch the ESTFBINR header  This is the length of the binary, including the ESTFBINR header and
       rounded up to the nearest 0x200 boundary  The number of checksums, i.e number of 0x200 byte blocks  The total file length, including all headers and checksums  Patch the scrambler header with the new length info  end mkboot.c excerpt  get pointer to the correct bootloader.bin  get filename from edit box  store temp files in temp directory  descrambled file  patched file  patched and scrambled file  now md5sum it  delete temp files  all is fine, rename the patched file to original name of the firmware  Deleting a perfectly good firmware here really  delete all temp files, don't care if some aren't created yet  no default filename text label  text field for inputing file name  browse button  patch button  set default font on all controls, will be ugly if we don't do this  user pressed browse button  user pressed patch button  Check firmware against md5sums in h120sums and h100sums  command line driven patch button  end of cmd line**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 by Thom Johansen
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** TODO: integrate the iriver.c and mkboot stuff better, they're pretty much
 * intended to be called from a command line tool, and i haven't changed that.
  precalculated checksums for H110/H115  precalculated checksums for H120/H140  precalculated checksums for H320/H340  begin mkboot.c excerpt  First, read the iriver original firmware into the image  This is the length of the binary image without the scrambling
       overhead (but including the ESTFBINR header)  Read the rest of the binary data, but not the checksum block  Patch the reset vector to start the boot loader  This is the actual length of the binary, excluding all headers  Patch the ESTFBINR header  This is the length of the binary, including the ESTFBINR header and
       rounded up to the nearest 0x200 boundary  The number of checksums, i.e number of 0x200 byte blocks  The total file length, including all headers and checksums  Patch the scrambler header with the new length info  end mkboot.c excerpt  get pointer to the correct bootloader.bin  get filename from edit box  store temp files in temp directory  descrambled file  patched file  patched and scrambled file  now md5sum it  delete temp files  all is fine, rename the patched file to original name of the firmware  Deleting a perfectly good firmware here really  delete all temp files, don't care if some aren't created yet  no default filename text label  text field for inputing file name  browse button  patch button  set default font on all controls, will be ugly if we don't do this  user pressed browse button  user pressed patch button  Check firmware against md5sums in h120sums and h100sums  command line driven patch button  end of cmd line