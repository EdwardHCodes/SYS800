**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2006 Alexander Levin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * Reversi. Code is heavily based on othello code by Claudio Clemens which is
 * copyright (c) 2003-2006 Claudio Clemens <asturio at gmx dot net> and is
 * released under the GNU General Public License as published by the Free
 * Software Foundation; either version 2, or (at your option) any later version.
 
 * Constants for directions. The values are chosen so that
 * they can be bit combined.
  UP          DOWN        LEFT        RIGHT       UP LEFT     UP RIGHT    DOWN LEFT   DOWN RIGHT  Array of directions for easy iteration through all of them  Initializes a reversi game  Invalidate the history  Returns the 'flipped' color, e.g. WHITE for BLACK and vice versa  Counts and returns the number of occupied cells on the board.
 * If white_count and/or black_count is not null, the number of
 * white/black stones is placed there.  Returns the number of free cells on the board  Checks whether the game is finished. That means that nobody
 * can make a move. Note that the implementation is not correct
 * as a game may be finished even if there are free cells
  Returns the total number of moves made so far  Returns the number of moves made by the specified
 * player (WHITE or BLACK) so far
  Returns the number of moves available for the specified player  Returns the number of players who HAVE to pass (2 == game is stuck)  Returns the number of moves made by WHITE so far  Returns the number of moves made by BLACK so far  Checks whether the specified position is on the board
 * (and not beyond)
  Returns the delta for row to move in the specified direction  Returns the delta for column to move in the specified direction  Checks if some stones would be captured in the specified direction
 * if a stone were placed in the specified cell by the specified player.
 *
 * Returns 0 if no stones would be captured or 'direction' otherwise
  Number of stones that would be flipped  Checks whether the move at the specified position would be valid.
 * Params:
 *   - game: current state of the game
 *   - row: 0-based row number of the move in question
 *   - col: 0-based column number of the move in question
 *   - player: who is about to make the move (WHITE/BLACK)
 *
 * Checks if the place is empty, the coordinates are legal,
 * and some stones can be captured.
 *
 * Returns 0 if the move is not valid or, otherwise, the or'd
 * directions in which stones would be captured.
  Check if coordinates are legal  Check if the place is free  Check the directions of capture  Flips the stones in the specified direction after the specified
 * player has placed a stone in the specified cell. The move is
 * assumed to be valid.
 *
 * Returns the number of flipped stones in that direction
  Number of stones flipped  Tries to make a move (place a stone) at the specified position.
 * If the move is valid the board is changed. Otherwise nothing happens.
 *
 * Params:
 *   - game: current state of the game
 *   - row: 0-based row number of the move to make
 *   - col: 0-based column number of the move to make
 *   - player: who makes the move (WHITE/BLACK)
 *
 * Returns the number of flipped (captured) stones (>0) iff the move
 * was valid or 0 if the move was not valid. Note that in the case of
 * a valid move, the stone itself is not counted.
  Place the stone into the cell  Capture stones in all possible directions  Remember the move **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2006 Alexander Levin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * Reversi. Code is heavily based on othello code by Claudio Clemens which is
 * copyright (c) 2003-2006 Claudio Clemens <asturio at gmx dot net> and is
 * released under the GNU General Public License as published by the Free
 * Software Foundation; either version 2, or (at your option) any later version.
 
 * Constants for directions. The values are chosen so that
 * they can be bit combined.
  UP          DOWN        LEFT        RIGHT       UP LEFT     UP RIGHT    DOWN LEFT   DOWN RIGHT  Array of directions for easy iteration through all of them  Initializes a reversi game  Invalidate the history  Returns the 'flipped' color, e.g. WHITE for BLACK and vice versa  Counts and returns the number of occupied cells on the board.
 * If white_count and/or black_count is not null, the number of
 * white/black stones is placed there.  Returns the number of free cells on the board  Checks whether the game is finished. That means that nobody
 * can make a move. Note that the implementation is not correct
 * as a game may be finished even if there are free cells
  Returns the total number of moves made so far  Returns the number of moves made by the specified
 * player (WHITE or BLACK) so far
  Returns the number of moves available for the specified player  Returns the number of players who HAVE to pass (2 == game is stuck)  Returns the number of moves made by WHITE so far  Returns the number of moves made by BLACK so far  Checks whether the specified position is on the board
 * (and not beyond)
  Returns the delta for row to move in the specified direction  Returns the delta for column to move in the specified direction  Checks if some stones would be captured in the specified direction
 * if a stone were placed in the specified cell by the specified player.
 *
 * Returns 0 if no stones would be captured or 'direction' otherwise
  Number of stones that would be flipped  Checks whether the move at the specified position would be valid.
 * Params:
 *   - game: current state of the game
 *   - row: 0-based row number of the move in question
 *   - col: 0-based column number of the move in question
 *   - player: who is about to make the move (WHITE/BLACK)
 *
 * Checks if the place is empty, the coordinates are legal,
 * and some stones can be captured.
 *
 * Returns 0 if the move is not valid or, otherwise, the or'd
 * directions in which stones would be captured.
  Check if coordinates are legal  Check if the place is free  Check the directions of capture  Flips the stones in the specified direction after the specified
 * player has placed a stone in the specified cell. The move is
 * assumed to be valid.
 *
 * Returns the number of flipped stones in that direction
  Number of stones flipped  Tries to make a move (place a stone) at the specified position.
 * If the move is valid the board is changed. Otherwise nothing happens.
 *
 * Params:
 *   - game: current state of the game
 *   - row: 0-based row number of the move to make
 *   - col: 0-based column number of the move to make
 *   - player: who makes the move (WHITE/BLACK)
 *
 * Returns the number of flipped (captured) stones (>0) iff the move
 * was valid or 0 if the move was not valid. Note that in the case of
 * a valid move, the stone itself is not counted.
  Place the stone into the cell  Capture stones in all possible directions  Remember the move **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2006 Alexander Levin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * Reversi. Code is heavily based on othello code by Claudio Clemens which is
 * copyright (c) 2003-2006 Claudio Clemens <asturio at gmx dot net> and is
 * released under the GNU General Public License as published by the Free
 * Software Foundation; either version 2, or (at your option) any later version.
 
 * Constants for directions. The values are chosen so that
 * they can be bit combined.
  UP          DOWN        LEFT        RIGHT       UP LEFT     UP RIGHT    DOWN LEFT   DOWN RIGHT  Array of directions for easy iteration through all of them  Initializes a reversi game  Invalidate the history  Returns the 'flipped' color, e.g. WHITE for BLACK and vice versa  Counts and returns the number of occupied cells on the board.
 * If white_count and/or black_count is not null, the number of
 * white/black stones is placed there.  Returns the number of free cells on the board  Checks whether the game is finished. That means that nobody
 * can make a move. Note that the implementation is not correct
 * as a game may be finished even if there are free cells
  Returns the total number of moves made so far  Returns the number of moves made by the specified
 * player (WHITE or BLACK) so far
  Returns the number of moves available for the specified player  Returns the number of players who HAVE to pass (2 == game is stuck)  Returns the number of moves made by WHITE so far  Returns the number of moves made by BLACK so far  Checks whether the specified position is on the board
 * (and not beyond)
  Returns the delta for row to move in the specified direction  Returns the delta for column to move in the specified direction  Checks if some stones would be captured in the specified direction
 * if a stone were placed in the specified cell by the specified player.
 *
 * Returns 0 if no stones would be captured or 'direction' otherwise
  Number of stones that would be flipped  Checks whether the move at the specified position would be valid.
 * Params:
 *   - game: current state of the game
 *   - row: 0-based row number of the move in question
 *   - col: 0-based column number of the move in question
 *   - player: who is about to make the move (WHITE/BLACK)
 *
 * Checks if the place is empty, the coordinates are legal,
 * and some stones can be captured.
 *
 * Returns 0 if the move is not valid or, otherwise, the or'd
 * directions in which stones would be captured.
  Check if coordinates are legal  Check if the place is free  Check the directions of capture  Flips the stones in the specified direction after the specified
 * player has placed a stone in the specified cell. The move is
 * assumed to be valid.
 *
 * Returns the number of flipped stones in that direction
  Number of stones flipped  Tries to make a move (place a stone) at the specified position.
 * If the move is valid the board is changed. Otherwise nothing happens.
 *
 * Params:
 *   - game: current state of the game
 *   - row: 0-based row number of the move to make
 *   - col: 0-based column number of the move to make
 *   - player: who makes the move (WHITE/BLACK)
 *
 * Returns the number of flipped (captured) stones (>0) iff the move
 * was valid or 0 if the move was not valid. Note that in the case of
 * a valid move, the stone itself is not counted.
  Place the stone into the cell  Capture stones in all possible directions  Remember the move 