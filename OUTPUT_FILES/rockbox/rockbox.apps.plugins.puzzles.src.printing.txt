
 * printing.c: Cross-platform printing manager. Handles document
 * setup and layout.
 
 * Create a new print document. pw and ph are the layout
 * parameters: they state how many puzzles will be printed across
 * the page, and down the page.
 
 * Free a document structure, whether it's been printed or not.
 
 * Called from midend.c to add a puzzle to be printed. Provides a
 * game_params (for initial layout computation), a game_state, and
 * optionally a second game_state to be printed in parallel on
 * another sheet (typically the solution to the first game_state).
  Get the preferred size of the game, in mm.  Adjust for user-supplied scale factor. 
     * FIXME: scale it down here if it's too big for the page size.
     * Rather than do complicated things involving scaling all
     * columns down in proportion, the simplest approach seems to
     * me to be to scale down until the game fits within one evenly
     * divided cell of the page (i.e. width/pw by height/ph).
     * 
     * In order to do this step we need the page size available.
     
 * Calculate the the number of pages for a document.
  puzzles per page 
 * Begin a document.
 
 * End a document.
 
 * Print a single page of a document.
  puzzles per page  Get the current page, pass, and pageno based on page_nr. 
     * Lay the page out by computing all the puzzle sizes.
      Update the maximum width/height of this column. 
     * Add up the maximum column/row widths to get the
     * total amount of space used up by puzzles on the
     * page. We will use this to compute gutter widths.
     
     * Now do the printing.
      nothing to do 
         * The total amount of gutter space is the page
         * width minus colsum. This is divided into pw+1
         * gutters, so the amount of horizontal gutter
         * space appearing to the left of this puzzle
         * column is
         *
         *   (width-colsum) * (x+1)/(pw+1)
         * = width * (x+1)/(pw+1) - (colsum * (x+1)/(pw+1))
          And similarly for y. 
         * However, the amount of space to the left of this
         * puzzle isn't just gutter space: we must also
         * count the widths of all the previous columns.
          And similarly for rows. 
         * Now we adjust for this _specific_ puzzle, which
         * means centring it within the cell we've just
         * computed.
         
         * And now we know where and how big we want to
         * print the puzzle, just go ahead and do so. For
         * the moment I'll pick a standard pixel tile size
         * of 512.
         *
         * (FIXME: would it be better to pick this value
         * with reference to the printer resolution? Or
         * permit each game to choose its own?)
         
 * Having accumulated a load of puzzles, actually do the printing.
 
 * printing.c: Cross-platform printing manager. Handles document
 * setup and layout.
 
 * Create a new print document. pw and ph are the layout
 * parameters: they state how many puzzles will be printed across
 * the page, and down the page.
 
 * Free a document structure, whether it's been printed or not.
 
 * Called from midend.c to add a puzzle to be printed. Provides a
 * game_params (for initial layout computation), a game_state, and
 * optionally a second game_state to be printed in parallel on
 * another sheet (typically the solution to the first game_state).
  Get the preferred size of the game, in mm.  Adjust for user-supplied scale factor. 
     * FIXME: scale it down here if it's too big for the page size.
     * Rather than do complicated things involving scaling all
     * columns down in proportion, the simplest approach seems to
     * me to be to scale down until the game fits within one evenly
     * divided cell of the page (i.e. width/pw by height/ph).
     * 
     * In order to do this step we need the page size available.
     
 * Calculate the the number of pages for a document.
  puzzles per page 
 * Begin a document.
 
 * End a document.
 
 * Print a single page of a document.
  puzzles per page  Get the current page, pass, and pageno based on page_nr. 
     * Lay the page out by computing all the puzzle sizes.
      Update the maximum width/height of this column. 
     * Add up the maximum column/row widths to get the
     * total amount of space used up by puzzles on the
     * page. We will use this to compute gutter widths.
     
     * Now do the printing.
      nothing to do 
         * The total amount of gutter space is the page
         * width minus colsum. This is divided into pw+1
         * gutters, so the amount of horizontal gutter
         * space appearing to the left of this puzzle
         * column is
         *
         *   (width-colsum) * (x+1)/(pw+1)
         * = width * (x+1)/(pw+1) - (colsum * (x+1)/(pw+1))
          And similarly for y. 
         * However, the amount of space to the left of this
         * puzzle isn't just gutter space: we must also
         * count the widths of all the previous columns.
          And similarly for rows. 
         * Now we adjust for this _specific_ puzzle, which
         * means centring it within the cell we've just
         * computed.
         
         * And now we know where and how big we want to
         * print the puzzle, just go ahead and do so. For
         * the moment I'll pick a standard pixel tile size
         * of 512.
         *
         * (FIXME: would it be better to pick this value
         * with reference to the printer resolution? Or
         * permit each game to choose its own?)
         
 * Having accumulated a load of puzzles, actually do the printing.
 
 * printing.c: Cross-platform printing manager. Handles document
 * setup and layout.
 
 * Create a new print document. pw and ph are the layout
 * parameters: they state how many puzzles will be printed across
 * the page, and down the page.
 
 * Free a document structure, whether it's been printed or not.
 
 * Called from midend.c to add a puzzle to be printed. Provides a
 * game_params (for initial layout computation), a game_state, and
 * optionally a second game_state to be printed in parallel on
 * another sheet (typically the solution to the first game_state).
  Get the preferred size of the game, in mm.  Adjust for user-supplied scale factor. 
     * FIXME: scale it down here if it's too big for the page size.
     * Rather than do complicated things involving scaling all
     * columns down in proportion, the simplest approach seems to
     * me to be to scale down until the game fits within one evenly
     * divided cell of the page (i.e. width/pw by height/ph).
     * 
     * In order to do this step we need the page size available.
     
 * Calculate the the number of pages for a document.
  puzzles per page 
 * Begin a document.
 
 * End a document.
 
 * Print a single page of a document.
  puzzles per page  Get the current page, pass, and pageno based on page_nr. 
     * Lay the page out by computing all the puzzle sizes.
      Update the maximum width/height of this column. 
     * Add up the maximum column/row widths to get the
     * total amount of space used up by puzzles on the
     * page. We will use this to compute gutter widths.
     
     * Now do the printing.
      nothing to do 
         * The total amount of gutter space is the page
         * width minus colsum. This is divided into pw+1
         * gutters, so the amount of horizontal gutter
         * space appearing to the left of this puzzle
         * column is
         *
         *   (width-colsum) * (x+1)/(pw+1)
         * = width * (x+1)/(pw+1) - (colsum * (x+1)/(pw+1))
          And similarly for y. 
         * However, the amount of space to the left of this
         * puzzle isn't just gutter space: we must also
         * count the widths of all the previous columns.
          And similarly for rows. 
         * Now we adjust for this _specific_ puzzle, which
         * means centring it within the cell we've just
         * computed.
         
         * And now we know where and how big we want to
         * print the puzzle, just go ahead and do so. For
         * the moment I'll pick a standard pixel tile size
         * of 512.
         *
         * (FIXME: would it be better to pick this value
         * with reference to the printer resolution? Or
         * permit each game to choose its own?)
         
 * Having accumulated a load of puzzles, actually do the printing.
 