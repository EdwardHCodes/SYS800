**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Alan Korr
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Trap #0  Trap #1  Trap #2  Trap #3  Trap #4  Trap #5  Trap #6  Trap #7  Trap #8  Trap #9  Trap #10  Trap #11  Trap #12  Trap #13  Trap #14  Trap #15  Software Watchdog Timer  Timer 0  Timer 1  I2C  UART 1  UART 2  DMA 0  DMA 1  DMA 2  DMA 3  QSPI  Processor data in 1 full  Processor data in 2 full  EBU transmit FIFO empty  IIS2 transmit FIFO empty  IIS1 transmit FIFO empty  Processor data in 3 full  Processor data in 3 resync  IEC958-2 Rx U/Q channel error  "tick" interrupt  Processor data in 2 resync  Processor data in 2 under/overrun  Processor data in 1 resync  Processor data in 1 under/overrun  IEC958-1 Rx U/Q channel error  IEC958-2 channel buffer full  IEC958-2 Rx parity or symbol error  IEC958-2 flag not good  IEC958-2 New C-channel received  IEC958-1 channel buffer full  U channel Tx reg next byte is first  U channel Tx reg underrun  U channel Tx reg is empty  Processor data in 3 under/overrun  IEC958-1 Rx parity or symbol error  IEC958-1 flag not good  IEC958-1 New C-channel received  EBU Tx FIFO resync  EBU Tx FIFO under/overrun  IIS2 Tx FIFO resync  IIS2 Tx FIFO under/overrun  IIS1 Tx FIFO resync  IIS1 Tx FIFO under/overrun  GPIO interrupt 0  GPIO interrupt 1  GPIO interrupt 2  GPIO interrupt 3  GPIO interrupt 4  GPIO interrupt 5  GPIO interrupt 6  GPIO interrupt 7  Software interrupt 0  Software interrupt 1  Software interrupt 2  Software interrupt 3  CD-ROM CRC error  CD-ROM No sync  CD-ROM Illegal sync  CD-ROM New block  I2C 2  A/D converter  On button and !hold  On button and !hold  Play button and !hold  Play button and !hold  clear screen  Start watchdog timer with 512 cycles timeout. Don't service it.  We need a reset method that works in all cases. Calling system_reboot()
       doesn't work when we're called from the debug interrupt, because then
       the CPU is in emulator mode and the only ways leaving it are exexcuting
       an rte instruction or performing a reset. Even disabling the breakpoint
       logic and performing special rte magic doesn't make system_reboot()
       reliable. The system restarts, but boot often fails with ata error -42.  phony return address - never used  loop to silence 'noreturn' function does return  reset vectors are handled in crt0.S           lvl 3  lvl 4              Clear the accumulators. From here on it's the responsibility of
       whoever uses them to clear them after use and before giving control
       to "foreign" code (use movclr instruction).  Set EMAC unit to fractional mode with saturation, since that's
       what'll be the most useful for most things which the main thread
       will do.  Set INTBASE and SPURVEC  PARK[1,0]=10 + BCR24BIT                    Reset the cookie for the crt0 crash check  set cpu frequency to 11mhz (to prevent overheating)  Utilise the breakpoint hardware to catch invalid memory accesses.  catch nothing  TDR  = 0x00000000  ABLR = 0x00000000  ABHR = 0x00000000  AATR = 0x0005  catch flash ROM writes  ABLR = 0x00000000  ABHR = 0x0FFFFFFF  AATR = 0x6F05  TDR  = 0x80002008  catch all accesses to zero area  ABLR = 0x00000000  ABHR = 0x0FFFFFFF  AATR = 0xEF05  TDR  = 0x80002008  Note: CPU space accesses (movec instruction), interrupt acknowledges
           and emulator mode accesses are never caught.  Always set the new mode, we don't know the old settings
       as we cannot read back  allow setting of audio clock related bits  Safely modify the interrupt mask register as the core interrupt level is
   required to be at least as high as the level interrupt being
   masked/unmasked  Set DATAINCONTROL without disturbing FIFO reset state  Have to be atomic against recording stop initiated by DMA1 **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Alan Korr
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Trap #0  Trap #1  Trap #2  Trap #3  Trap #4  Trap #5  Trap #6  Trap #7  Trap #8  Trap #9  Trap #10  Trap #11  Trap #12  Trap #13  Trap #14  Trap #15  Software Watchdog Timer  Timer 0  Timer 1  I2C  UART 1  UART 2  DMA 0  DMA 1  DMA 2  DMA 3  QSPI  Processor data in 1 full  Processor data in 2 full  EBU transmit FIFO empty  IIS2 transmit FIFO empty  IIS1 transmit FIFO empty  Processor data in 3 full  Processor data in 3 resync  IEC958-2 Rx U/Q channel error  "tick" interrupt  Processor data in 2 resync  Processor data in 2 under/overrun  Processor data in 1 resync  Processor data in 1 under/overrun  IEC958-1 Rx U/Q channel error  IEC958-2 channel buffer full  IEC958-2 Rx parity or symbol error  IEC958-2 flag not good  IEC958-2 New C-channel received  IEC958-1 channel buffer full  U channel Tx reg next byte is first  U channel Tx reg underrun  U channel Tx reg is empty  Processor data in 3 under/overrun  IEC958-1 Rx parity or symbol error  IEC958-1 flag not good  IEC958-1 New C-channel received  EBU Tx FIFO resync  EBU Tx FIFO under/overrun  IIS2 Tx FIFO resync  IIS2 Tx FIFO under/overrun  IIS1 Tx FIFO resync  IIS1 Tx FIFO under/overrun  GPIO interrupt 0  GPIO interrupt 1  GPIO interrupt 2  GPIO interrupt 3  GPIO interrupt 4  GPIO interrupt 5  GPIO interrupt 6  GPIO interrupt 7  Software interrupt 0  Software interrupt 1  Software interrupt 2  Software interrupt 3  CD-ROM CRC error  CD-ROM No sync  CD-ROM Illegal sync  CD-ROM New block  I2C 2  A/D converter  On button and !hold  On button and !hold  Play button and !hold  Play button and !hold  clear screen  Start watchdog timer with 512 cycles timeout. Don't service it.  We need a reset method that works in all cases. Calling system_reboot()
       doesn't work when we're called from the debug interrupt, because then
       the CPU is in emulator mode and the only ways leaving it are exexcuting
       an rte instruction or performing a reset. Even disabling the breakpoint
       logic and performing special rte magic doesn't make system_reboot()
       reliable. The system restarts, but boot often fails with ata error -42.  phony return address - never used  loop to silence 'noreturn' function does return  reset vectors are handled in crt0.S           lvl 3  lvl 4              Clear the accumulators. From here on it's the responsibility of
       whoever uses them to clear them after use and before giving control
       to "foreign" code (use movclr instruction).  Set EMAC unit to fractional mode with saturation, since that's
       what'll be the most useful for most things which the main thread
       will do.  Set INTBASE and SPURVEC  PARK[1,0]=10 + BCR24BIT                    Reset the cookie for the crt0 crash check  set cpu frequency to 11mhz (to prevent overheating)  Utilise the breakpoint hardware to catch invalid memory accesses.  catch nothing  TDR  = 0x00000000  ABLR = 0x00000000  ABHR = 0x00000000  AATR = 0x0005  catch flash ROM writes  ABLR = 0x00000000  ABHR = 0x0FFFFFFF  AATR = 0x6F05  TDR  = 0x80002008  catch all accesses to zero area  ABLR = 0x00000000  ABHR = 0x0FFFFFFF  AATR = 0xEF05  TDR  = 0x80002008  Note: CPU space accesses (movec instruction), interrupt acknowledges
           and emulator mode accesses are never caught.  Always set the new mode, we don't know the old settings
       as we cannot read back  allow setting of audio clock related bits  Safely modify the interrupt mask register as the core interrupt level is
   required to be at least as high as the level interrupt being
   masked/unmasked  Set DATAINCONTROL without disturbing FIFO reset state  Have to be atomic against recording stop initiated by DMA1 **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Alan Korr
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Trap #0  Trap #1  Trap #2  Trap #3  Trap #4  Trap #5  Trap #6  Trap #7  Trap #8  Trap #9  Trap #10  Trap #11  Trap #12  Trap #13  Trap #14  Trap #15  Software Watchdog Timer  Timer 0  Timer 1  I2C  UART 1  UART 2  DMA 0  DMA 1  DMA 2  DMA 3  QSPI  Processor data in 1 full  Processor data in 2 full  EBU transmit FIFO empty  IIS2 transmit FIFO empty  IIS1 transmit FIFO empty  Processor data in 3 full  Processor data in 3 resync  IEC958-2 Rx U/Q channel error  "tick" interrupt  Processor data in 2 resync  Processor data in 2 under/overrun  Processor data in 1 resync  Processor data in 1 under/overrun  IEC958-1 Rx U/Q channel error  IEC958-2 channel buffer full  IEC958-2 Rx parity or symbol error  IEC958-2 flag not good  IEC958-2 New C-channel received  IEC958-1 channel buffer full  U channel Tx reg next byte is first  U channel Tx reg underrun  U channel Tx reg is empty  Processor data in 3 under/overrun  IEC958-1 Rx parity or symbol error  IEC958-1 flag not good  IEC958-1 New C-channel received  EBU Tx FIFO resync  EBU Tx FIFO under/overrun  IIS2 Tx FIFO resync  IIS2 Tx FIFO under/overrun  IIS1 Tx FIFO resync  IIS1 Tx FIFO under/overrun  GPIO interrupt 0  GPIO interrupt 1  GPIO interrupt 2  GPIO interrupt 3  GPIO interrupt 4  GPIO interrupt 5  GPIO interrupt 6  GPIO interrupt 7  Software interrupt 0  Software interrupt 1  Software interrupt 2  Software interrupt 3  CD-ROM CRC error  CD-ROM No sync  CD-ROM Illegal sync  CD-ROM New block  I2C 2  A/D converter  On button and !hold  On button and !hold  Play button and !hold  Play button and !hold  clear screen  Start watchdog timer with 512 cycles timeout. Don't service it.  We need a reset method that works in all cases. Calling system_reboot()
       doesn't work when we're called from the debug interrupt, because then
       the CPU is in emulator mode and the only ways leaving it are exexcuting
       an rte instruction or performing a reset. Even disabling the breakpoint
       logic and performing special rte magic doesn't make system_reboot()
       reliable. The system restarts, but boot often fails with ata error -42.  phony return address - never used  loop to silence 'noreturn' function does return  reset vectors are handled in crt0.S           lvl 3  lvl 4              Clear the accumulators. From here on it's the responsibility of
       whoever uses them to clear them after use and before giving control
       to "foreign" code (use movclr instruction).  Set EMAC unit to fractional mode with saturation, since that's
       what'll be the most useful for most things which the main thread
       will do.  Set INTBASE and SPURVEC  PARK[1,0]=10 + BCR24BIT                    Reset the cookie for the crt0 crash check  set cpu frequency to 11mhz (to prevent overheating)  Utilise the breakpoint hardware to catch invalid memory accesses.  catch nothing  TDR  = 0x00000000  ABLR = 0x00000000  ABHR = 0x00000000  AATR = 0x0005  catch flash ROM writes  ABLR = 0x00000000  ABHR = 0x0FFFFFFF  AATR = 0x6F05  TDR  = 0x80002008  catch all accesses to zero area  ABLR = 0x00000000  ABHR = 0x0FFFFFFF  AATR = 0xEF05  TDR  = 0x80002008  Note: CPU space accesses (movec instruction), interrupt acknowledges
           and emulator mode accesses are never caught.  Always set the new mode, we don't know the old settings
       as we cannot read back  allow setting of audio clock related bits  Safely modify the interrupt mask register as the core interrupt level is
   required to be at least as high as the level interrupt being
   masked/unmasked  Set DATAINCONTROL without disturbing FIFO reset state  Have to be atomic against recording stop initiated by DMA1 