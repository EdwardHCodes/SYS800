
 * imdct.c
 * Copyright (C) 2000-2003 Michel Lespinasse <walken@zoy.org>
 * Copyright (C) 1999-2000 Aaron Holtzman <aholtzma@ess.engr.uvic.ca>
 *
 * The ifft algorithms in this file have been largely inspired by Dan
 * Bernstein's work, djbfft, available at http://cr.yp.to/djbfft.html
 *
 * This file is part of a52dec, a free ATSC A-52 stream decoder.
 * See http://liba52.sourceforge.net/ for updates.
 *
 * a52dec is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * a52dec is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  Root values for IFFT static sample_t roots16[3];static sample_t roots32[7];static sample_t roots64[15];static sample_t roots128[31]; Twiddle factors for IMDCT static complex_t pre1[128];static complex_t post1[64];static complex_t pre2[64];static complex_t post2[32];static sample_t a52_imdct_window[256];
static void (* ifft128) (complex_t * buf);
static void (* ifft64) (complex_t * buf);

static inline void ifft2 (complex_t * buf)
{
    sample_t r, i;

    r = buf[0].real;
    i = buf[0].imag;
    buf[0].real += buf[1].real;
    buf[0].imag += buf[1].imag;
    buf[1].real = r - buf[1].real;
    buf[1].imag = i - buf[1].imag;
}

static inline void ifft4 (complex_t * buf)
{
    sample_t tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8;

    tmp1 = buf[0].real + buf[1].real;
    tmp2 = buf[3].real + buf[2].real;
    tmp3 = buf[0].imag + buf[1].imag;
    tmp4 = buf[2].imag + buf[3].imag;
    tmp5 = buf[0].real - buf[1].real;
    tmp6 = buf[0].imag - buf[1].imag;
    tmp7 = buf[2].imag - buf[3].imag;
    tmp8 = buf[3].real - buf[2].real;

    buf[0].real = tmp1 + tmp2;
    buf[0].imag = tmp3 + tmp4;
    buf[2].real = tmp1 - tmp2;
    buf[2].imag = tmp3 - tmp4;
    buf[1].real = tmp5 + tmp7;
    buf[1].imag = tmp6 + tmp8;
    buf[3].real = tmp5 - tmp7;
    buf[3].imag = tmp6 - tmp8;
}
 basic radix-2 ifft butterfly  radix-2 ifft butterfly with bias  the basic split-radix ifft butterfly  split-radix ifft butterfly, specialized for wr=1 wi=0  split-radix ifft butterfly, specialized for wr=wi 
#define BUTTERFLY_HALF(a0,a1,a2,a3,w) do {      \
    tmp5 = MUL (a2.real + a2.imag, w);          \
    tmp6 = MUL (a2.imag - a2.real, w);          \
    tmp7 = MUL (a3.real - a3.imag, w);          \
    tmp8 = MUL (a3.imag + a3.real, w);          \
    tmp1 = tmp5 + tmp7;                         \
    tmp2 = tmp6 + tmp8;                         \
    tmp3 = tmp6 - tmp8;                         \
    tmp4 = tmp7 - tmp5;                         \
    a2.real = a0.real - tmp1;                   \
    a2.imag = a0.imag - tmp2;                   \
    a3.real = a1.real - tmp3;                   \
    a3.imag = a1.imag - tmp4;                   \
    a0.real += tmp1;                            \
    a0.imag += tmp2;                            \
    a1.real += tmp3;                            \
    a1.imag += tmp4;                            \
} while (0)

static inline void ifft8 (complex_t * buf)
{
    sample_t tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8;

    ifft4 (buf);
    ifft2 (buf + 4);
    ifft2 (buf + 6);
    BUTTERFLY_ZERO (buf[0], buf[2], buf[4], buf[6]);
    BUTTERFLY_HALF (buf[1], buf[3], buf[5], buf[7], roots16[1]);
}

static void ifft_pass (complex_t * buf, const sample_t * weight, int n)
{
    complex_t * buf1;
    complex_t * buf2;
    complex_t * buf3;
    sample_t tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8;
    int i;

    buf++;
    buf1 = buf + n;
    buf2 = buf + 2 * n;
    buf3 = buf + 3 * n;

    BUTTERFLY_ZERO (buf[-1], buf1[-1], buf2[-1], buf3[-1]);

    i = n - 1;

    do {
        BUTTERFLY (buf[0], buf1[0], buf2[0], buf3[0],
                   weight[0], weight[2*i-n]);
        buf++;
        buf1++;
        buf2++;
        buf3++;
        weight++;
    } while (--i);
}

static void ifft16 (complex_t * buf)
{
    ifft8 (buf);
    ifft4 (buf + 8);
    ifft4 (buf + 12);
    ifft_pass (buf, roots16, 4);
}

static void ifft32 (complex_t * buf)
{
    ifft16 (buf);
    ifft8 (buf + 16);
    ifft8 (buf + 24);
    ifft_pass (buf, roots32, 8);
}

static void ifft64_c (complex_t * buf)
{
    ifft32 (buf);
    ifft16 (buf + 32);
    ifft16 (buf + 48);
    ifft_pass (buf, roots64, 16);
}

static void ifft128_c (complex_t * buf)
{
    ifft32 (buf);
    ifft16 (buf + 32);
    ifft16 (buf + 48);
    ifft_pass (buf, roots64, 16);

    ifft32 (buf + 64);
    ifft32 (buf + 96);
    ifft_pass (buf, roots128, 32);
}
ifft128 (buf); Post IFFT complex multiply plus IFFT complex conjugate Window and convert to real valued signal  y[n] = z[n] * (xcos1[n] + j * xsin1[n]) ;  Pre IFFT complex multiply plus IFFT cmplx conjugate ifft64 (buf1);ifft64 (buf2); Post IFFT complex multiply  Window and convert to real valued signal  y1[n] = z1[n] * (xcos2[n] + j * xs in2[n]) ; 
static double besselI0 (double x)
{
    double bessel = 1;
    int i = 100;

    do
        bessel = bessel * x / (i * i) + 1;
    while (--i);
    return bessel;
}
ff_fft_init(&s128, 7, 1);ff_fft_init(&s64, 6, 1);    int i, k;
    double sum;
    double local_imdct_window[256]; compute imdct window - kaiser-bessel derived window, alpha = 5.0     sum = 0;
    for (i = 0; i < 256; i++) {
        sum += besselI0 (i * (256 - i) * (5 * M_PI / 256) * (5 * M_PI / 256));
        local_imdct_window[i] = sum;
    }
    sum++;
        for (i = 0; i < 256; i++)
        a52_imdct_window[i] = SAMPLE (sqrt (local_imdct_window[i] / sum));

    printf("static sample_t a52_imdct_window[256]={");
    for (i=0;i<256;i++) {
      if ((i % 16)==0) { printf("\n"); }
      printf("%d,",a52_imdct_window[i]);
    }
    printf("\n}\n");
        for (i = 0; i < 3; i++)
        roots16[i] = SAMPLE (cos ((M_PI / 8) * (i + 1)));

    printf("static sample_t roots16[3]={%d,%d,%d};\n\n",roots16[0],roots16[1],roots16[2]);

    for (i = 0; i < 7; i++)
        roots32[i] = SAMPLE (cos ((M_PI / 16) * (i + 1)));

    printf("static sample_t roots32[7]={");
    for (i=0;i<7;i++) { printf("%d%s",roots32[i],(i < 6 ? "," : "")); }
    printf("};\n");

    for (i = 0; i < 15; i++)
        roots64[i] = SAMPLE (cos ((M_PI / 32) * (i + 1)));

    printf("static sample_t roots64[15]={");
    for (i=0;i<15;i++) { printf("%d%s",roots64[i],(i < 14 ? "," : "")); }
    printf("};\n");

    for (i = 0; i < 31; i++)
        roots128[i] = SAMPLE (cos ((M_PI / 64) * (i + 1)));

    printf("static sample_t roots128[31]={");
    for (i=0;i<31;i++) { printf("%d%s",roots128[i],(i < 30 ? "," : "")); }
    printf("};\n");
    
    for (i = 0; i < 64; i++) {
        k = fftorder[i] / 2 + 64;
        pre1[i].real = SAMPLE (cos ((M_PI / 256) * (k - 0.25)));
        pre1[i].imag = SAMPLE (sin ((M_PI / 256) * (k - 0.25)));
    }

    for (i = 64; i < 128; i++) {
        k = fftorder[i] / 2 + 64;
        pre1[i].real = SAMPLE (-cos ((M_PI / 256) * (k - 0.25)));
        pre1[i].imag = SAMPLE (-sin ((M_PI / 256) * (k - 0.25)));
    }

    printf("static complex_t pre1[128]={");
    for (i=0;i<128;i++) { printf("{%d,%d}%s",pre1[i].real,pre1[i].imag,(i < 127 ? "," : "")); }
    printf("};\n");
    
    for (i = 0; i < 64; i++) {
        post1[i].real = SAMPLE (cos ((M_PI / 256) * (i + 0.5)));
        post1[i].imag = SAMPLE (sin ((M_PI / 256) * (i + 0.5)));
    }

    printf("static complex_t post1[64]={");
    for (i=0;i<64;i++) { printf("{%d,%d}%s",post1[i].real,post1[i].imag,(i < 63 ? "," : "")); }
    printf("};\n");
    
    for (i = 0; i < 64; i++) {
        k = fftorder[i] / 4;
        pre2[i].real = SAMPLE (cos ((M_PI / 128) * (k - 0.25)));
        pre2[i].imag = SAMPLE (sin ((M_PI / 128) * (k - 0.25)));
    }

    printf("static complex_t pre2[64]={");
    for (i=0;i<64;i++) { printf("{%d,%d}%s",pre2[i].real,pre2[i].imag,(i < 63 ? "," : "")); }
    printf("};\n");

    for (i = 0; i < 32; i++) {
        post2[i].real = SAMPLE (cos ((M_PI / 128) * (i + 0.5)));
        post2[i].imag = SAMPLE (sin ((M_PI / 128) * (i + 0.5)));
    }

    printf("static complex_t post2[32]={");
    for (i=0;i<32;i++) { printf("{%d,%d}%s",post2[i].real,post2[i].imag,(i < 31 ? "," : "")); }
    printf("};\n");
    

#ifdef LIBA52_DJBFFT
    if (mm_accel & MM_ACCEL_DJBFFT) {
#ifndef LIBA52_DOUBLE
        ifft128 = (void (*) (complex_t *)) fftc4_un128;
        ifft64 = (void (*) (complex_t *)) fftc4_un64;
#else
        ifft128 = (void (*) (complex_t *)) fftc8_un128;
        ifft64 = (void (*) (complex_t *)) fftc8_un64;
#endif
    } else
#endif
    {
        ifft128 = ifft128_c;
        ifft64 = ifft64_c;
    }
    
 * imdct.c
 * Copyright (C) 2000-2003 Michel Lespinasse <walken@zoy.org>
 * Copyright (C) 1999-2000 Aaron Holtzman <aholtzma@ess.engr.uvic.ca>
 *
 * The ifft algorithms in this file have been largely inspired by Dan
 * Bernstein's work, djbfft, available at http://cr.yp.to/djbfft.html
 *
 * This file is part of a52dec, a free ATSC A-52 stream decoder.
 * See http://liba52.sourceforge.net/ for updates.
 *
 * a52dec is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * a52dec is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  Root values for IFFT static sample_t roots16[3];static sample_t roots32[7];static sample_t roots64[15];static sample_t roots128[31]; Twiddle factors for IMDCT static complex_t pre1[128];static complex_t post1[64];static complex_t pre2[64];static complex_t post2[32];static sample_t a52_imdct_window[256];
static void (* ifft128) (complex_t * buf);
static void (* ifft64) (complex_t * buf);

static inline void ifft2 (complex_t * buf)
{
    sample_t r, i;

    r = buf[0].real;
    i = buf[0].imag;
    buf[0].real += buf[1].real;
    buf[0].imag += buf[1].imag;
    buf[1].real = r - buf[1].real;
    buf[1].imag = i - buf[1].imag;
}

static inline void ifft4 (complex_t * buf)
{
    sample_t tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8;

    tmp1 = buf[0].real + buf[1].real;
    tmp2 = buf[3].real + buf[2].real;
    tmp3 = buf[0].imag + buf[1].imag;
    tmp4 = buf[2].imag + buf[3].imag;
    tmp5 = buf[0].real - buf[1].real;
    tmp6 = buf[0].imag - buf[1].imag;
    tmp7 = buf[2].imag - buf[3].imag;
    tmp8 = buf[3].real - buf[2].real;

    buf[0].real = tmp1 + tmp2;
    buf[0].imag = tmp3 + tmp4;
    buf[2].real = tmp1 - tmp2;
    buf[2].imag = tmp3 - tmp4;
    buf[1].real = tmp5 + tmp7;
    buf[1].imag = tmp6 + tmp8;
    buf[3].real = tmp5 - tmp7;
    buf[3].imag = tmp6 - tmp8;
}
 basic radix-2 ifft butterfly  radix-2 ifft butterfly with bias  the basic split-radix ifft butterfly  split-radix ifft butterfly, specialized for wr=1 wi=0  split-radix ifft butterfly, specialized for wr=wi 
#define BUTTERFLY_HALF(a0,a1,a2,a3,w) do {      \
    tmp5 = MUL (a2.real + a2.imag, w);          \
    tmp6 = MUL (a2.imag - a2.real, w);          \
    tmp7 = MUL (a3.real - a3.imag, w);          \
    tmp8 = MUL (a3.imag + a3.real, w);          \
    tmp1 = tmp5 + tmp7;                         \
    tmp2 = tmp6 + tmp8;                         \
    tmp3 = tmp6 - tmp8;                         \
    tmp4 = tmp7 - tmp5;                         \
    a2.real = a0.real - tmp1;                   \
    a2.imag = a0.imag - tmp2;                   \
    a3.real = a1.real - tmp3;                   \
    a3.imag = a1.imag - tmp4;                   \
    a0.real += tmp1;                            \
    a0.imag += tmp2;                            \
    a1.real += tmp3;                            \
    a1.imag += tmp4;                            \
} while (0)

static inline void ifft8 (complex_t * buf)
{
    sample_t tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8;

    ifft4 (buf);
    ifft2 (buf + 4);
    ifft2 (buf + 6);
    BUTTERFLY_ZERO (buf[0], buf[2], buf[4], buf[6]);
    BUTTERFLY_HALF (buf[1], buf[3], buf[5], buf[7], roots16[1]);
}

static void ifft_pass (complex_t * buf, const sample_t * weight, int n)
{
    complex_t * buf1;
    complex_t * buf2;
    complex_t * buf3;
    sample_t tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8;
    int i;

    buf++;
    buf1 = buf + n;
    buf2 = buf + 2 * n;
    buf3 = buf + 3 * n;

    BUTTERFLY_ZERO (buf[-1], buf1[-1], buf2[-1], buf3[-1]);

    i = n - 1;

    do {
        BUTTERFLY (buf[0], buf1[0], buf2[0], buf3[0],
                   weight[0], weight[2*i-n]);
        buf++;
        buf1++;
        buf2++;
        buf3++;
        weight++;
    } while (--i);
}

static void ifft16 (complex_t * buf)
{
    ifft8 (buf);
    ifft4 (buf + 8);
    ifft4 (buf + 12);
    ifft_pass (buf, roots16, 4);
}

static void ifft32 (complex_t * buf)
{
    ifft16 (buf);
    ifft8 (buf + 16);
    ifft8 (buf + 24);
    ifft_pass (buf, roots32, 8);
}

static void ifft64_c (complex_t * buf)
{
    ifft32 (buf);
    ifft16 (buf + 32);
    ifft16 (buf + 48);
    ifft_pass (buf, roots64, 16);
}

static void ifft128_c (complex_t * buf)
{
    ifft32 (buf);
    ifft16 (buf + 32);
    ifft16 (buf + 48);
    ifft_pass (buf, roots64, 16);

    ifft32 (buf + 64);
    ifft32 (buf + 96);
    ifft_pass (buf, roots128, 32);
}
ifft128 (buf); Post IFFT complex multiply plus IFFT complex conjugate Window and convert to real valued signal  y[n] = z[n] * (xcos1[n] + j * xsin1[n]) ;  Pre IFFT complex multiply plus IFFT cmplx conjugate ifft64 (buf1);ifft64 (buf2); Post IFFT complex multiply  Window and convert to real valued signal  y1[n] = z1[n] * (xcos2[n] + j * xs in2[n]) ; 
static double besselI0 (double x)
{
    double bessel = 1;
    int i = 100;

    do
        bessel = bessel * x / (i * i) + 1;
    while (--i);
    return bessel;
}
ff_fft_init(&s128, 7, 1);ff_fft_init(&s64, 6, 1);    int i, k;
    double sum;
    double local_imdct_window[256]; compute imdct window - kaiser-bessel derived window, alpha = 5.0     sum = 0;
    for (i = 0; i < 256; i++) {
        sum += besselI0 (i * (256 - i) * (5 * M_PI / 256) * (5 * M_PI / 256));
        local_imdct_window[i] = sum;
    }
    sum++;
        for (i = 0; i < 256; i++)
        a52_imdct_window[i] = SAMPLE (sqrt (local_imdct_window[i] / sum));

    printf("static sample_t a52_imdct_window[256]={");
    for (i=0;i<256;i++) {
      if ((i % 16)==0) { printf("\n"); }
      printf("%d,",a52_imdct_window[i]);
    }
    printf("\n}\n");
        for (i = 0; i < 3; i++)
        roots16[i] = SAMPLE (cos ((M_PI / 8) * (i + 1)));

    printf("static sample_t roots16[3]={%d,%d,%d};\n\n",roots16[0],roots16[1],roots16[2]);

    for (i = 0; i < 7; i++)
        roots32[i] = SAMPLE (cos ((M_PI / 16) * (i + 1)));

    printf("static sample_t roots32[7]={");
    for (i=0;i<7;i++) { printf("%d%s",roots32[i],(i < 6 ? "," : "")); }
    printf("};\n");

    for (i = 0; i < 15; i++)
        roots64[i] = SAMPLE (cos ((M_PI / 32) * (i + 1)));

    printf("static sample_t roots64[15]={");
    for (i=0;i<15;i++) { printf("%d%s",roots64[i],(i < 14 ? "," : "")); }
    printf("};\n");

    for (i = 0; i < 31; i++)
        roots128[i] = SAMPLE (cos ((M_PI / 64) * (i + 1)));

    printf("static sample_t roots128[31]={");
    for (i=0;i<31;i++) { printf("%d%s",roots128[i],(i < 30 ? "," : "")); }
    printf("};\n");
    
    for (i = 0; i < 64; i++) {
        k = fftorder[i] / 2 + 64;
        pre1[i].real = SAMPLE (cos ((M_PI / 256) * (k - 0.25)));
        pre1[i].imag = SAMPLE (sin ((M_PI / 256) * (k - 0.25)));
    }

    for (i = 64; i < 128; i++) {
        k = fftorder[i] / 2 + 64;
        pre1[i].real = SAMPLE (-cos ((M_PI / 256) * (k - 0.25)));
        pre1[i].imag = SAMPLE (-sin ((M_PI / 256) * (k - 0.25)));
    }

    printf("static complex_t pre1[128]={");
    for (i=0;i<128;i++) { printf("{%d,%d}%s",pre1[i].real,pre1[i].imag,(i < 127 ? "," : "")); }
    printf("};\n");
    
    for (i = 0; i < 64; i++) {
        post1[i].real = SAMPLE (cos ((M_PI / 256) * (i + 0.5)));
        post1[i].imag = SAMPLE (sin ((M_PI / 256) * (i + 0.5)));
    }

    printf("static complex_t post1[64]={");
    for (i=0;i<64;i++) { printf("{%d,%d}%s",post1[i].real,post1[i].imag,(i < 63 ? "," : "")); }
    printf("};\n");
    
    for (i = 0; i < 64; i++) {
        k = fftorder[i] / 4;
        pre2[i].real = SAMPLE (cos ((M_PI / 128) * (k - 0.25)));
        pre2[i].imag = SAMPLE (sin ((M_PI / 128) * (k - 0.25)));
    }

    printf("static complex_t pre2[64]={");
    for (i=0;i<64;i++) { printf("{%d,%d}%s",pre2[i].real,pre2[i].imag,(i < 63 ? "," : "")); }
    printf("};\n");

    for (i = 0; i < 32; i++) {
        post2[i].real = SAMPLE (cos ((M_PI / 128) * (i + 0.5)));
        post2[i].imag = SAMPLE (sin ((M_PI / 128) * (i + 0.5)));
    }

    printf("static complex_t post2[32]={");
    for (i=0;i<32;i++) { printf("{%d,%d}%s",post2[i].real,post2[i].imag,(i < 31 ? "," : "")); }
    printf("};\n");
    

#ifdef LIBA52_DJBFFT
    if (mm_accel & MM_ACCEL_DJBFFT) {
#ifndef LIBA52_DOUBLE
        ifft128 = (void (*) (complex_t *)) fftc4_un128;
        ifft64 = (void (*) (complex_t *)) fftc4_un64;
#else
        ifft128 = (void (*) (complex_t *)) fftc8_un128;
        ifft64 = (void (*) (complex_t *)) fftc8_un64;
#endif
    } else
#endif
    {
        ifft128 = ifft128_c;
        ifft64 = ifft64_c;
    }
    
 * imdct.c
 * Copyright (C) 2000-2003 Michel Lespinasse <walken@zoy.org>
 * Copyright (C) 1999-2000 Aaron Holtzman <aholtzma@ess.engr.uvic.ca>
 *
 * The ifft algorithms in this file have been largely inspired by Dan
 * Bernstein's work, djbfft, available at http://cr.yp.to/djbfft.html
 *
 * This file is part of a52dec, a free ATSC A-52 stream decoder.
 * See http://liba52.sourceforge.net/ for updates.
 *
 * a52dec is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * a52dec is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  Root values for IFFT static sample_t roots16[3];static sample_t roots32[7];static sample_t roots64[15];static sample_t roots128[31]; Twiddle factors for IMDCT static complex_t pre1[128];static complex_t post1[64];static complex_t pre2[64];static complex_t post2[32];static sample_t a52_imdct_window[256];
static void (* ifft128) (complex_t * buf);
static void (* ifft64) (complex_t * buf);

static inline void ifft2 (complex_t * buf)
{
    sample_t r, i;

    r = buf[0].real;
    i = buf[0].imag;
    buf[0].real += buf[1].real;
    buf[0].imag += buf[1].imag;
    buf[1].real = r - buf[1].real;
    buf[1].imag = i - buf[1].imag;
}

static inline void ifft4 (complex_t * buf)
{
    sample_t tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8;

    tmp1 = buf[0].real + buf[1].real;
    tmp2 = buf[3].real + buf[2].real;
    tmp3 = buf[0].imag + buf[1].imag;
    tmp4 = buf[2].imag + buf[3].imag;
    tmp5 = buf[0].real - buf[1].real;
    tmp6 = buf[0].imag - buf[1].imag;
    tmp7 = buf[2].imag - buf[3].imag;
    tmp8 = buf[3].real - buf[2].real;

    buf[0].real = tmp1 + tmp2;
    buf[0].imag = tmp3 + tmp4;
    buf[2].real = tmp1 - tmp2;
    buf[2].imag = tmp3 - tmp4;
    buf[1].real = tmp5 + tmp7;
    buf[1].imag = tmp6 + tmp8;
    buf[3].real = tmp5 - tmp7;
    buf[3].imag = tmp6 - tmp8;
}
 basic radix-2 ifft butterfly  radix-2 ifft butterfly with bias  the basic split-radix ifft butterfly  split-radix ifft butterfly, specialized for wr=1 wi=0  split-radix ifft butterfly, specialized for wr=wi 
#define BUTTERFLY_HALF(a0,a1,a2,a3,w) do {      \
    tmp5 = MUL (a2.real + a2.imag, w);          \
    tmp6 = MUL (a2.imag - a2.real, w);          \
    tmp7 = MUL (a3.real - a3.imag, w);          \
    tmp8 = MUL (a3.imag + a3.real, w);          \
    tmp1 = tmp5 + tmp7;                         \
    tmp2 = tmp6 + tmp8;                         \
    tmp3 = tmp6 - tmp8;                         \
    tmp4 = tmp7 - tmp5;                         \
    a2.real = a0.real - tmp1;                   \
    a2.imag = a0.imag - tmp2;                   \
    a3.real = a1.real - tmp3;                   \
    a3.imag = a1.imag - tmp4;                   \
    a0.real += tmp1;                            \
    a0.imag += tmp2;                            \
    a1.real += tmp3;                            \
    a1.imag += tmp4;                            \
} while (0)

static inline void ifft8 (complex_t * buf)
{
    sample_t tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8;

    ifft4 (buf);
    ifft2 (buf + 4);
    ifft2 (buf + 6);
    BUTTERFLY_ZERO (buf[0], buf[2], buf[4], buf[6]);
    BUTTERFLY_HALF (buf[1], buf[3], buf[5], buf[7], roots16[1]);
}

static void ifft_pass (complex_t * buf, const sample_t * weight, int n)
{
    complex_t * buf1;
    complex_t * buf2;
    complex_t * buf3;
    sample_t tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8;
    int i;

    buf++;
    buf1 = buf + n;
    buf2 = buf + 2 * n;
    buf3 = buf + 3 * n;

    BUTTERFLY_ZERO (buf[-1], buf1[-1], buf2[-1], buf3[-1]);

    i = n - 1;

    do {
        BUTTERFLY (buf[0], buf1[0], buf2[0], buf3[0],
                   weight[0], weight[2*i-n]);
        buf++;
        buf1++;
        buf2++;
        buf3++;
        weight++;
    } while (--i);
}

static void ifft16 (complex_t * buf)
{
    ifft8 (buf);
    ifft4 (buf + 8);
    ifft4 (buf + 12);
    ifft_pass (buf, roots16, 4);
}

static void ifft32 (complex_t * buf)
{
    ifft16 (buf);
    ifft8 (buf + 16);
    ifft8 (buf + 24);
    ifft_pass (buf, roots32, 8);
}

static void ifft64_c (complex_t * buf)
{
    ifft32 (buf);
    ifft16 (buf + 32);
    ifft16 (buf + 48);
    ifft_pass (buf, roots64, 16);
}

static void ifft128_c (complex_t * buf)
{
    ifft32 (buf);
    ifft16 (buf + 32);
    ifft16 (buf + 48);
    ifft_pass (buf, roots64, 16);

    ifft32 (buf + 64);
    ifft32 (buf + 96);
    ifft_pass (buf, roots128, 32);
}
ifft128 (buf); Post IFFT complex multiply plus IFFT complex conjugate Window and convert to real valued signal  y[n] = z[n] * (xcos1[n] + j * xsin1[n]) ;  Pre IFFT complex multiply plus IFFT cmplx conjugate ifft64 (buf1);ifft64 (buf2); Post IFFT complex multiply  Window and convert to real valued signal  y1[n] = z1[n] * (xcos2[n] + j * xs in2[n]) ; 
static double besselI0 (double x)
{
    double bessel = 1;
    int i = 100;

    do
        bessel = bessel * x / (i * i) + 1;
    while (--i);
    return bessel;
}
ff_fft_init(&s128, 7, 1);ff_fft_init(&s64, 6, 1);    int i, k;
    double sum;
    double local_imdct_window[256]; compute imdct window - kaiser-bessel derived window, alpha = 5.0     sum = 0;
    for (i = 0; i < 256; i++) {
        sum += besselI0 (i * (256 - i) * (5 * M_PI / 256) * (5 * M_PI / 256));
        local_imdct_window[i] = sum;
    }
    sum++;
        for (i = 0; i < 256; i++)
        a52_imdct_window[i] = SAMPLE (sqrt (local_imdct_window[i] / sum));

    printf("static sample_t a52_imdct_window[256]={");
    for (i=0;i<256;i++) {
      if ((i % 16)==0) { printf("\n"); }
      printf("%d,",a52_imdct_window[i]);
    }
    printf("\n}\n");
        for (i = 0; i < 3; i++)
        roots16[i] = SAMPLE (cos ((M_PI / 8) * (i + 1)));

    printf("static sample_t roots16[3]={%d,%d,%d};\n\n",roots16[0],roots16[1],roots16[2]);

    for (i = 0; i < 7; i++)
        roots32[i] = SAMPLE (cos ((M_PI / 16) * (i + 1)));

    printf("static sample_t roots32[7]={");
    for (i=0;i<7;i++) { printf("%d%s",roots32[i],(i < 6 ? "," : "")); }
    printf("};\n");

    for (i = 0; i < 15; i++)
        roots64[i] = SAMPLE (cos ((M_PI / 32) * (i + 1)));

    printf("static sample_t roots64[15]={");
    for (i=0;i<15;i++) { printf("%d%s",roots64[i],(i < 14 ? "," : "")); }
    printf("};\n");

    for (i = 0; i < 31; i++)
        roots128[i] = SAMPLE (cos ((M_PI / 64) * (i + 1)));

    printf("static sample_t roots128[31]={");
    for (i=0;i<31;i++) { printf("%d%s",roots128[i],(i < 30 ? "," : "")); }
    printf("};\n");
    
    for (i = 0; i < 64; i++) {
        k = fftorder[i] / 2 + 64;
        pre1[i].real = SAMPLE (cos ((M_PI / 256) * (k - 0.25)));
        pre1[i].imag = SAMPLE (sin ((M_PI / 256) * (k - 0.25)));
    }

    for (i = 64; i < 128; i++) {
        k = fftorder[i] / 2 + 64;
        pre1[i].real = SAMPLE (-cos ((M_PI / 256) * (k - 0.25)));
        pre1[i].imag = SAMPLE (-sin ((M_PI / 256) * (k - 0.25)));
    }

    printf("static complex_t pre1[128]={");
    for (i=0;i<128;i++) { printf("{%d,%d}%s",pre1[i].real,pre1[i].imag,(i < 127 ? "," : "")); }
    printf("};\n");
    
    for (i = 0; i < 64; i++) {
        post1[i].real = SAMPLE (cos ((M_PI / 256) * (i + 0.5)));
        post1[i].imag = SAMPLE (sin ((M_PI / 256) * (i + 0.5)));
    }

    printf("static complex_t post1[64]={");
    for (i=0;i<64;i++) { printf("{%d,%d}%s",post1[i].real,post1[i].imag,(i < 63 ? "," : "")); }
    printf("};\n");
    
    for (i = 0; i < 64; i++) {
        k = fftorder[i] / 4;
        pre2[i].real = SAMPLE (cos ((M_PI / 128) * (k - 0.25)));
        pre2[i].imag = SAMPLE (sin ((M_PI / 128) * (k - 0.25)));
    }

    printf("static complex_t pre2[64]={");
    for (i=0;i<64;i++) { printf("{%d,%d}%s",pre2[i].real,pre2[i].imag,(i < 63 ? "," : "")); }
    printf("};\n");

    for (i = 0; i < 32; i++) {
        post2[i].real = SAMPLE (cos ((M_PI / 128) * (i + 0.5)));
        post2[i].imag = SAMPLE (sin ((M_PI / 128) * (i + 0.5)));
    }

    printf("static complex_t post2[32]={");
    for (i=0;i<32;i++) { printf("{%d,%d}%s",post2[i].real,post2[i].imag,(i < 31 ? "," : "")); }
    printf("};\n");
    

#ifdef LIBA52_DJBFFT
    if (mm_accel & MM_ACCEL_DJBFFT) {
#ifndef LIBA52_DOUBLE
        ifft128 = (void (*) (complex_t *)) fftc4_un128;
        ifft64 = (void (*) (complex_t *)) fftc4_un64;
#else
        ifft128 = (void (*) (complex_t *)) fftc8_un128;
        ifft64 = (void (*) (complex_t *)) fftc8_un64;
#endif
    } else
#endif
    {
        ifft128 = ifft128_c;
        ifft64 = ifft64_c;
    }
    