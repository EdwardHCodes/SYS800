
 * FFT/IFFT transforms converted to integer precision
 * Copyright (c) 2010 Dave Hooper, Mohamed Tarek, Michael Giacomelli
 * Copyright (c) 2008 Loren Merritt
 * Copyright (c) 2002 Fabrice Bellard
 * Partly based on libdjbfft by D. J. Bernstein
 *
 * This file is part of FFmpeg.
 *
 * FFmpeg is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * FFmpeg is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with FFmpeg; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 *
 * @file libavcodec/fft.c
 * FFT/IFFT transforms.
  we definitely want CONFIG_SMALL undefined for ipod so we get the inlined version of fft16 (which is measurably faster) constants for fft_16 (same constants as in mdct_arm.S ... )  cos(pi/8) s.31  cos(2pi/8) = 1/sqrt(2) s.31  cos(3pi/8) s.31  asm-optimised functions and/or macros const uint16_t *revtab = s->revtab; reverse  force loading all the inputs before storing any. this is slightly slower for small data, but avoids store->load aliasing for addresses separated by large powers of 2.
  see conjugate pair description in
  http://www.fftw.org/newsplit.pdf

  a0 = z[k]
  a1 = z[k+N/4]
  a2 = z[k+2N/4]
  a3 = z[k+3N/4]
  
  result:
  y[k]      = z[k]+w(z[k+2N/4])+w'(z[k+3N/4])
  y[k+N/4]  = z[k+N/4]-iw(z[k+2N/4])+iw'(z[k+3N/4])
  y[k+2N/4] = z[k]-w(z[k+2N/4])-w'(z[k+3N/4])
  y[k+3N/4] = z[k+N/4]+iw(z[k+2N/4])-iw'(z[k+3N/4])
  
  i.e.
  
  a0        = a0 +  (w.a2 + w'.a3)
  a1        = a1 - i(w.a2 - w'.a3)
  a2        = a0 -  (w.a2 + w'.a3)
  a3        = a1 + i(w.a2 - w'.a3)
  
  note re(w') = re(w) and im(w') = -im(w)
  
  so therefore
  
  re(a0)   = re(a0) + re(w.a2) + re(w.a3)
  im(a0)   = im(a0) + im(w.a2) - im(w.a3) etc

  and remember also that  
  Re([s+it][u+iv]) = su-tv
  Im([s+it][u+iv]) = sv+tu
  
  so
  Re(w'.(s+it)) = Re(w').s - Im(w').t = Re(w).s + Im(w).t
  Im(w'.(s+it)) = Re(w').t + Im(w').s = Re(w).t - Im(w).s

  For inverse dft we take the complex conjugate of all twiddle factors.
  Hence 
  
  a0        = a0 +  (w'.a2 + w.a3)
  a1        = a1 - i(w'.a2 - w.a3)
  a2        = a0 -  (w'.a2 + w.a3)
  a3        = a1 + i(w'.a2 - w.a3)
  
  Define t1 = Re(w'.a2)  =  Re(w)*Re(a2) + Im(w)*Im(a2)
         t2 = Im(w'.a2)  =  Re(w)*Im(a2) - Im(w)*Re(a2)
         t5 = Re(w.a3)   =  Re(w)*Re(a3) - Im(w)*Im(a3)
         t6 = Im(w.a3)   =  Re(w)*Im(a3) + Im(w)*Re(a3)
         
  Then we just output:
  a0.re = a0.re + ( t1 + t5 )
  a0.im = a0.im + ( t2 + t6 )
  a1.re = a1.re + ( t2 - t6 )   // since we multiply by -i and i(-i) = 1
  a1.im = a1.im - ( t1 - t5 )   // since we multiply by -i and 1(-i) = -i
  a2.re = a0.re - ( t1 + t5 )
  a2.im = a0.im - ( t1 + t5 )
  a3.re = a1.re - ( t2 - t6 )   // since we multiply by +i and i(+i) = -1
  a3.im = a1.im + ( t1 - t5 )   // since we multiply by +i and 1(+i) = i
    
    
 z[0...8n-1], w[1...2n-1]  wre = *(wim+1) .  ordering is sin,cos  first two are special (well, first one is special, but we need to do pairs)  first pass forwards through sincos_lookup0 second half: pass backwards through sincos_lookup0 wim and wre are now in opposite places so ordering now [0],[1]  what is STEP?
   sincos_lookup0 has sin,cos pairs for 1/4 cycle, in 1024 points
   so half cycle would be 2048 points
   ff_cos_16 has 8 elements corresponding to 4 cos points and 4 sin points
   so each of the 4 points pairs corresponds to a 256*2-byte jump in sincos_lookup0
   8192/16 (from "ff_cos_16") is 512 bytes.
   i.e.  for fft16, STEP = 8192/16  t3=r1-r3 ; t1 = r1+r3 t8=r7-r5 ; t6 = r7+r5 r5=t1-t6 ; r1 = t1+t6 t4=r2-r4 ; t2 = r2+r4 t7=r6-r8 ; t5 = r6+r8 r8=t4-t8 ; r4 = t4+t8 r7=t3-t7 ; r3 = t3+t7 r6=t2-t5 ; r2 = t2+t5 Generate saw-tooth test data z[n].re =  1.1      + sin(      t) +                
                   0.5      * sin(2.0 * t) +
                  (1.0/3.0) * sin(3.0 * t) +
                   0.25     * sin(4.0 * t) +
                   0.2      * sin(5.0 * t) +
                  (1.0/6.0) * sin(6.0 * t) +
                  (1.0/7.0) * sin(7.0 * t) ;printf("z[%d] = %f\n", n, z[n].re);getchar();start = clock();for(n = 0; n < 1000000; n++)end   = clock();exec_time = (((double)end-(double)start)/CLOCKS_PER_SEC);getchar();printf(" Time elapsed = %f\n", exec_time);ff_fft_end(&s);
 * FFT/IFFT transforms converted to integer precision
 * Copyright (c) 2010 Dave Hooper, Mohamed Tarek, Michael Giacomelli
 * Copyright (c) 2008 Loren Merritt
 * Copyright (c) 2002 Fabrice Bellard
 * Partly based on libdjbfft by D. J. Bernstein
 *
 * This file is part of FFmpeg.
 *
 * FFmpeg is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * FFmpeg is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with FFmpeg; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 *
 * @file libavcodec/fft.c
 * FFT/IFFT transforms.
  we definitely want CONFIG_SMALL undefined for ipod so we get the inlined version of fft16 (which is measurably faster) constants for fft_16 (same constants as in mdct_arm.S ... )  cos(pi/8) s.31  cos(2pi/8) = 1/sqrt(2) s.31  cos(3pi/8) s.31  asm-optimised functions and/or macros const uint16_t *revtab = s->revtab; reverse  force loading all the inputs before storing any. this is slightly slower for small data, but avoids store->load aliasing for addresses separated by large powers of 2.
  see conjugate pair description in
  http://www.fftw.org/newsplit.pdf

  a0 = z[k]
  a1 = z[k+N/4]
  a2 = z[k+2N/4]
  a3 = z[k+3N/4]
  
  result:
  y[k]      = z[k]+w(z[k+2N/4])+w'(z[k+3N/4])
  y[k+N/4]  = z[k+N/4]-iw(z[k+2N/4])+iw'(z[k+3N/4])
  y[k+2N/4] = z[k]-w(z[k+2N/4])-w'(z[k+3N/4])
  y[k+3N/4] = z[k+N/4]+iw(z[k+2N/4])-iw'(z[k+3N/4])
  
  i.e.
  
  a0        = a0 +  (w.a2 + w'.a3)
  a1        = a1 - i(w.a2 - w'.a3)
  a2        = a0 -  (w.a2 + w'.a3)
  a3        = a1 + i(w.a2 - w'.a3)
  
  note re(w') = re(w) and im(w') = -im(w)
  
  so therefore
  
  re(a0)   = re(a0) + re(w.a2) + re(w.a3)
  im(a0)   = im(a0) + im(w.a2) - im(w.a3) etc

  and remember also that  
  Re([s+it][u+iv]) = su-tv
  Im([s+it][u+iv]) = sv+tu
  
  so
  Re(w'.(s+it)) = Re(w').s - Im(w').t = Re(w).s + Im(w).t
  Im(w'.(s+it)) = Re(w').t + Im(w').s = Re(w).t - Im(w).s

  For inverse dft we take the complex conjugate of all twiddle factors.
  Hence 
  
  a0        = a0 +  (w'.a2 + w.a3)
  a1        = a1 - i(w'.a2 - w.a3)
  a2        = a0 -  (w'.a2 + w.a3)
  a3        = a1 + i(w'.a2 - w.a3)
  
  Define t1 = Re(w'.a2)  =  Re(w)*Re(a2) + Im(w)*Im(a2)
         t2 = Im(w'.a2)  =  Re(w)*Im(a2) - Im(w)*Re(a2)
         t5 = Re(w.a3)   =  Re(w)*Re(a3) - Im(w)*Im(a3)
         t6 = Im(w.a3)   =  Re(w)*Im(a3) + Im(w)*Re(a3)
         
  Then we just output:
  a0.re = a0.re + ( t1 + t5 )
  a0.im = a0.im + ( t2 + t6 )
  a1.re = a1.re + ( t2 - t6 )   // since we multiply by -i and i(-i) = 1
  a1.im = a1.im - ( t1 - t5 )   // since we multiply by -i and 1(-i) = -i
  a2.re = a0.re - ( t1 + t5 )
  a2.im = a0.im - ( t1 + t5 )
  a3.re = a1.re - ( t2 - t6 )   // since we multiply by +i and i(+i) = -1
  a3.im = a1.im + ( t1 - t5 )   // since we multiply by +i and 1(+i) = i
    
    
 z[0...8n-1], w[1...2n-1]  wre = *(wim+1) .  ordering is sin,cos  first two are special (well, first one is special, but we need to do pairs)  first pass forwards through sincos_lookup0 second half: pass backwards through sincos_lookup0 wim and wre are now in opposite places so ordering now [0],[1]  what is STEP?
   sincos_lookup0 has sin,cos pairs for 1/4 cycle, in 1024 points
   so half cycle would be 2048 points
   ff_cos_16 has 8 elements corresponding to 4 cos points and 4 sin points
   so each of the 4 points pairs corresponds to a 256*2-byte jump in sincos_lookup0
   8192/16 (from "ff_cos_16") is 512 bytes.
   i.e.  for fft16, STEP = 8192/16  t3=r1-r3 ; t1 = r1+r3 t8=r7-r5 ; t6 = r7+r5 r5=t1-t6 ; r1 = t1+t6 t4=r2-r4 ; t2 = r2+r4 t7=r6-r8 ; t5 = r6+r8 r8=t4-t8 ; r4 = t4+t8 r7=t3-t7 ; r3 = t3+t7 r6=t2-t5 ; r2 = t2+t5 Generate saw-tooth test data z[n].re =  1.1      + sin(      t) +                
                   0.5      * sin(2.0 * t) +
                  (1.0/3.0) * sin(3.0 * t) +
                   0.25     * sin(4.0 * t) +
                   0.2      * sin(5.0 * t) +
                  (1.0/6.0) * sin(6.0 * t) +
                  (1.0/7.0) * sin(7.0 * t) ;printf("z[%d] = %f\n", n, z[n].re);getchar();start = clock();for(n = 0; n < 1000000; n++)end   = clock();exec_time = (((double)end-(double)start)/CLOCKS_PER_SEC);getchar();printf(" Time elapsed = %f\n", exec_time);ff_fft_end(&s);
 * FFT/IFFT transforms converted to integer precision
 * Copyright (c) 2010 Dave Hooper, Mohamed Tarek, Michael Giacomelli
 * Copyright (c) 2008 Loren Merritt
 * Copyright (c) 2002 Fabrice Bellard
 * Partly based on libdjbfft by D. J. Bernstein
 *
 * This file is part of FFmpeg.
 *
 * FFmpeg is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * FFmpeg is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with FFmpeg; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 *
 * @file libavcodec/fft.c
 * FFT/IFFT transforms.
  we definitely want CONFIG_SMALL undefined for ipod so we get the inlined version of fft16 (which is measurably faster) constants for fft_16 (same constants as in mdct_arm.S ... )  cos(pi/8) s.31  cos(2pi/8) = 1/sqrt(2) s.31  cos(3pi/8) s.31  asm-optimised functions and/or macros const uint16_t *revtab = s->revtab; reverse  force loading all the inputs before storing any. this is slightly slower for small data, but avoids store->load aliasing for addresses separated by large powers of 2.
  see conjugate pair description in
  http://www.fftw.org/newsplit.pdf

  a0 = z[k]
  a1 = z[k+N/4]
  a2 = z[k+2N/4]
  a3 = z[k+3N/4]
  
  result:
  y[k]      = z[k]+w(z[k+2N/4])+w'(z[k+3N/4])
  y[k+N/4]  = z[k+N/4]-iw(z[k+2N/4])+iw'(z[k+3N/4])
  y[k+2N/4] = z[k]-w(z[k+2N/4])-w'(z[k+3N/4])
  y[k+3N/4] = z[k+N/4]+iw(z[k+2N/4])-iw'(z[k+3N/4])
  
  i.e.
  
  a0        = a0 +  (w.a2 + w'.a3)
  a1        = a1 - i(w.a2 - w'.a3)
  a2        = a0 -  (w.a2 + w'.a3)
  a3        = a1 + i(w.a2 - w'.a3)
  
  note re(w') = re(w) and im(w') = -im(w)
  
  so therefore
  
  re(a0)   = re(a0) + re(w.a2) + re(w.a3)
  im(a0)   = im(a0) + im(w.a2) - im(w.a3) etc

  and remember also that  
  Re([s+it][u+iv]) = su-tv
  Im([s+it][u+iv]) = sv+tu
  
  so
  Re(w'.(s+it)) = Re(w').s - Im(w').t = Re(w).s + Im(w).t
  Im(w'.(s+it)) = Re(w').t + Im(w').s = Re(w).t - Im(w).s

  For inverse dft we take the complex conjugate of all twiddle factors.
  Hence 
  
  a0        = a0 +  (w'.a2 + w.a3)
  a1        = a1 - i(w'.a2 - w.a3)
  a2        = a0 -  (w'.a2 + w.a3)
  a3        = a1 + i(w'.a2 - w.a3)
  
  Define t1 = Re(w'.a2)  =  Re(w)*Re(a2) + Im(w)*Im(a2)
         t2 = Im(w'.a2)  =  Re(w)*Im(a2) - Im(w)*Re(a2)
         t5 = Re(w.a3)   =  Re(w)*Re(a3) - Im(w)*Im(a3)
         t6 = Im(w.a3)   =  Re(w)*Im(a3) + Im(w)*Re(a3)
         
  Then we just output:
  a0.re = a0.re + ( t1 + t5 )
  a0.im = a0.im + ( t2 + t6 )
  a1.re = a1.re + ( t2 - t6 )   // since we multiply by -i and i(-i) = 1
  a1.im = a1.im - ( t1 - t5 )   // since we multiply by -i and 1(-i) = -i
  a2.re = a0.re - ( t1 + t5 )
  a2.im = a0.im - ( t1 + t5 )
  a3.re = a1.re - ( t2 - t6 )   // since we multiply by +i and i(+i) = -1
  a3.im = a1.im + ( t1 - t5 )   // since we multiply by +i and 1(+i) = i
    
    
 z[0...8n-1], w[1...2n-1]  wre = *(wim+1) .  ordering is sin,cos  first two are special (well, first one is special, but we need to do pairs)  first pass forwards through sincos_lookup0 second half: pass backwards through sincos_lookup0 wim and wre are now in opposite places so ordering now [0],[1]  what is STEP?
   sincos_lookup0 has sin,cos pairs for 1/4 cycle, in 1024 points
   so half cycle would be 2048 points
   ff_cos_16 has 8 elements corresponding to 4 cos points and 4 sin points
   so each of the 4 points pairs corresponds to a 256*2-byte jump in sincos_lookup0
   8192/16 (from "ff_cos_16") is 512 bytes.
   i.e.  for fft16, STEP = 8192/16  t3=r1-r3 ; t1 = r1+r3 t8=r7-r5 ; t6 = r7+r5 r5=t1-t6 ; r1 = t1+t6 t4=r2-r4 ; t2 = r2+r4 t7=r6-r8 ; t5 = r6+r8 r8=t4-t8 ; r4 = t4+t8 r7=t3-t7 ; r3 = t3+t7 r6=t2-t5 ; r2 = t2+t5 Generate saw-tooth test data z[n].re =  1.1      + sin(      t) +                
                   0.5      * sin(2.0 * t) +
                  (1.0/3.0) * sin(3.0 * t) +
                   0.25     * sin(4.0 * t) +
                   0.2      * sin(5.0 * t) +
                  (1.0/6.0) * sin(6.0 * t) +
                  (1.0/7.0) * sin(7.0 * t) ;printf("z[%d] = %f\n", n, z[n].re);getchar();start = clock();for(n = 0; n < 1000000; n++)end   = clock();exec_time = (((double)end-(double)start)/CLOCKS_PER_SEC);getchar();printf(" Time elapsed = %f\n", exec_time);ff_fft_end(&s);