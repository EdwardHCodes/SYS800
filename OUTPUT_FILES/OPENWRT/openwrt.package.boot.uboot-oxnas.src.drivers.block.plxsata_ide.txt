
 * (C) Copyright 2005
 * Oxford Semiconductor Ltd
 *
 * See file CREDITS for list of people who contributed to this
 * project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,`
 * MA 02111-1307 USA
 *
 * SATA related definitions
  The offsets to the SATA registers  Read only  Write only  Read only  Write only  Write only  The offsets to the link registers that are access in an asynchronous manner  SATA interrupt status register fields  SATA core command register commands  ATA status (7) register field definitions  ATA device (6) register field definitions  ATA Command register initiated commands  The available buses to which the DMA controller is attached  Direction of data flow between the DMA controller's pair of interfaces  The available data widths  The mode of the DMA transfer  The available transfer targets  Chained transfers must take account of FIFO offset at end of previous transfer 1 second in units of 10uS  30 seconds in units of 100uS  0.1 second in units of 10uS  0.1 second in units of 10uS  0.1 second in units of 10uS  1 second in units of 100uS  The internal SATA drive on which we should attempt to find partitions  need keeping a record of NSECT LBAL LBAM LBAH ide_outb values for lba48 support  master/slave has no meaning to SATA core  Only permit accesses to disks found to be present during ide_preinit()     printf("inb: %d:%01x => %02x\n", device, port, val);*
 * Possible that ATA status will not become no-error, so must have timeout
 * @returns An int which is zero on error
  Check for ATA core error  Check for ATA device error *
 * Expect SATA command to always finish, perhaps with error
 * @returns An int which is zero on error
  Wait for data to be available  Only permit accesses to disks found to be present during ide_preinit()     printf("outb: %d:%01x <= %02x\n", device, port, val); fill high bytes of LBA48 && NSECT  start a paused DMA transfer in channel 0 of the SATA DMA core  Paused High priority Dreq Dreq !RESET Use new interrupt clearing register Setup the transfer direction and burst/single mode for the two DMA busses Set the burst/single mode for bus A based on src device's settings Set the burst/single mode for bus B based on dst device's settings Set the burst/single mode for bus B based on src device's settings Set the burst/single mode for bus A based on dst device's settings Setup source address mode fixed or increment Fixed address Set up whether fixed address is _really_ fixed Incrementing address Setup destination address mode fixed or increment Fixed address Set up whether fixed address is _really_ fixed Incrementing address Set up the width of the transfers on the DMA buses Setup the priority arbitration scheme !Starve low priority Write the length, with EOT configuration for a final transfer    if((src_settings->transfer_mode_) ||
	 (src_settings->transfer_mode_)) {
	 encoded |= DMA_BYTE_CNT_BURST_MASK;
	 } else {
	 encoded &= ~DMA_BYTE_CNT_BURST_MASK;
	 } Assemble complete memory settings Assemble complete memory settings Poll for DMA completion  Abort DMA to make sure it has finished.  Wait for the channel to become idle - should be quick as should finish after the next AHB single or burst transfer Successfully cleanup the DMA channel  Deassert reset for the channel*
 * Possible that ATA status will not become not-busy, so must have timeout
  Test the ATA status register BUSY flag Not busy, so stop polling  Wait for 50mS before sampling ATA status register again Only permit accesses to disks found to be present during ide_preinit()  Select the required internal SATA drive  Start the DMA channel sending data from the passed buffer to the SATA core  Don't know why we need this delay, but without it the wait for DMA not
	 busy times soemtimes out, e.g. when saving environment to second disk  Wait for DMA to finish  Sata core should finish after DMA  Sata core debug1 register bits *
 * Ref bug-6320
 *
 * This code is a work around for a DMA hardware bug that will repeat the
 * penultimate 8-bytes on some reads. This code will check that the amount
 * of data transferred is a multiple of 512 bytes, if not the in it will
 * fetch the correct data from a buffer in the SATA core and copy it into
 * memory.
 *
  Only want to apply fix to reads  Check for an incomplete transfer, i.e. not a multiple of 512 bytes
	 transferred (datacount_port register counts quads transferred)  Only permit accesses to disks found to be present during ide_preinit()  Select the required internal SATA drive  Start the DMA channel receiving data from the SATA core into the passed buffer  Sata core should finish before DMA  Wait for DMA to finish  Setup adr of required register. std regs start eight into async region  Wait for data to be available  Read the data from the async register  Setup the data for the write  Setup adr of required register. std regs start eight into async region  Wait for data to be written  Wait for upto 5 seconds for PHY to be found  limit it to Gen-1 SATA (1.5G)  Issue phy wake & core reset  Dummy read; flush  Issue phy wake & clear core reset  Wait for upto 5 seconds for PHY to become ready printf("No SATA PHY found status:0x%x\n", scr_read(device, SATA_SCR_STATUS)); wait half a second  Wait for upto 5 seconds for FIS to be received *
 * initialise functions and macros for ASIC implementation
  wait for an ack bit to be set  Initialise records of which disks are present to all present  Block reset SATA and DMA cores  Enable clocks to SATA and DMA cores  Apply the Synopsis SATA PHY workarounds  disable and clear core interrupts  Disable SATA interrupts  Clear any pending SATA interrupts  clear sector count register for FIS detection  Get the PHY working  Record whether disk is present, so won't attempt to access it later  post disk detection clean-up  set as ata-5 (28-bit)  clear phy/link errors  clear host errors  clear interrupt register as this clears the error bit in the IDE
			 status register 
 * (C) Copyright 2005
 * Oxford Semiconductor Ltd
 *
 * See file CREDITS for list of people who contributed to this
 * project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,`
 * MA 02111-1307 USA
 *
 * SATA related definitions
  The offsets to the SATA registers  Read only  Write only  Read only  Write only  Write only  The offsets to the link registers that are access in an asynchronous manner  SATA interrupt status register fields  SATA core command register commands  ATA status (7) register field definitions  ATA device (6) register field definitions  ATA Command register initiated commands  The available buses to which the DMA controller is attached  Direction of data flow between the DMA controller's pair of interfaces  The available data widths  The mode of the DMA transfer  The available transfer targets  Chained transfers must take account of FIFO offset at end of previous transfer 1 second in units of 10uS  30 seconds in units of 100uS  0.1 second in units of 10uS  0.1 second in units of 10uS  0.1 second in units of 10uS  1 second in units of 100uS  The internal SATA drive on which we should attempt to find partitions  need keeping a record of NSECT LBAL LBAM LBAH ide_outb values for lba48 support  master/slave has no meaning to SATA core  Only permit accesses to disks found to be present during ide_preinit()     printf("inb: %d:%01x => %02x\n", device, port, val);*
 * Possible that ATA status will not become no-error, so must have timeout
 * @returns An int which is zero on error
  Check for ATA core error  Check for ATA device error *
 * Expect SATA command to always finish, perhaps with error
 * @returns An int which is zero on error
  Wait for data to be available  Only permit accesses to disks found to be present during ide_preinit()     printf("outb: %d:%01x <= %02x\n", device, port, val); fill high bytes of LBA48 && NSECT  start a paused DMA transfer in channel 0 of the SATA DMA core  Paused High priority Dreq Dreq !RESET Use new interrupt clearing register Setup the transfer direction and burst/single mode for the two DMA busses Set the burst/single mode for bus A based on src device's settings Set the burst/single mode for bus B based on dst device's settings Set the burst/single mode for bus B based on src device's settings Set the burst/single mode for bus A based on dst device's settings Setup source address mode fixed or increment Fixed address Set up whether fixed address is _really_ fixed Incrementing address Setup destination address mode fixed or increment Fixed address Set up whether fixed address is _really_ fixed Incrementing address Set up the width of the transfers on the DMA buses Setup the priority arbitration scheme !Starve low priority Write the length, with EOT configuration for a final transfer    if((src_settings->transfer_mode_) ||
	 (src_settings->transfer_mode_)) {
	 encoded |= DMA_BYTE_CNT_BURST_MASK;
	 } else {
	 encoded &= ~DMA_BYTE_CNT_BURST_MASK;
	 } Assemble complete memory settings Assemble complete memory settings Poll for DMA completion  Abort DMA to make sure it has finished.  Wait for the channel to become idle - should be quick as should finish after the next AHB single or burst transfer Successfully cleanup the DMA channel  Deassert reset for the channel*
 * Possible that ATA status will not become not-busy, so must have timeout
  Test the ATA status register BUSY flag Not busy, so stop polling  Wait for 50mS before sampling ATA status register again Only permit accesses to disks found to be present during ide_preinit()  Select the required internal SATA drive  Start the DMA channel sending data from the passed buffer to the SATA core  Don't know why we need this delay, but without it the wait for DMA not
	 busy times soemtimes out, e.g. when saving environment to second disk  Wait for DMA to finish  Sata core should finish after DMA  Sata core debug1 register bits *
 * Ref bug-6320
 *
 * This code is a work around for a DMA hardware bug that will repeat the
 * penultimate 8-bytes on some reads. This code will check that the amount
 * of data transferred is a multiple of 512 bytes, if not the in it will
 * fetch the correct data from a buffer in the SATA core and copy it into
 * memory.
 *
  Only want to apply fix to reads  Check for an incomplete transfer, i.e. not a multiple of 512 bytes
	 transferred (datacount_port register counts quads transferred)  Only permit accesses to disks found to be present during ide_preinit()  Select the required internal SATA drive  Start the DMA channel receiving data from the SATA core into the passed buffer  Sata core should finish before DMA  Wait for DMA to finish  Setup adr of required register. std regs start eight into async region  Wait for data to be available  Read the data from the async register  Setup the data for the write  Setup adr of required register. std regs start eight into async region  Wait for data to be written  Wait for upto 5 seconds for PHY to be found  limit it to Gen-1 SATA (1.5G)  Issue phy wake & core reset  Dummy read; flush  Issue phy wake & clear core reset  Wait for upto 5 seconds for PHY to become ready printf("No SATA PHY found status:0x%x\n", scr_read(device, SATA_SCR_STATUS)); wait half a second  Wait for upto 5 seconds for FIS to be received *
 * initialise functions and macros for ASIC implementation
  wait for an ack bit to be set  Initialise records of which disks are present to all present  Block reset SATA and DMA cores  Enable clocks to SATA and DMA cores  Apply the Synopsis SATA PHY workarounds  disable and clear core interrupts  Disable SATA interrupts  Clear any pending SATA interrupts  clear sector count register for FIS detection  Get the PHY working  Record whether disk is present, so won't attempt to access it later  post disk detection clean-up  set as ata-5 (28-bit)  clear phy/link errors  clear host errors  clear interrupt register as this clears the error bit in the IDE
			 status register 
 * (C) Copyright 2005
 * Oxford Semiconductor Ltd
 *
 * See file CREDITS for list of people who contributed to this
 * project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,`
 * MA 02111-1307 USA
 *
 * SATA related definitions
  The offsets to the SATA registers  Read only  Write only  Read only  Write only  Write only  The offsets to the link registers that are access in an asynchronous manner  SATA interrupt status register fields  SATA core command register commands  ATA status (7) register field definitions  ATA device (6) register field definitions  ATA Command register initiated commands  The available buses to which the DMA controller is attached  Direction of data flow between the DMA controller's pair of interfaces  The available data widths  The mode of the DMA transfer  The available transfer targets  Chained transfers must take account of FIFO offset at end of previous transfer 1 second in units of 10uS  30 seconds in units of 100uS  0.1 second in units of 10uS  0.1 second in units of 10uS  0.1 second in units of 10uS  1 second in units of 100uS  The internal SATA drive on which we should attempt to find partitions  need keeping a record of NSECT LBAL LBAM LBAH ide_outb values for lba48 support  master/slave has no meaning to SATA core  Only permit accesses to disks found to be present during ide_preinit()     printf("inb: %d:%01x => %02x\n", device, port, val);*
 * Possible that ATA status will not become no-error, so must have timeout
 * @returns An int which is zero on error
  Check for ATA core error  Check for ATA device error *
 * Expect SATA command to always finish, perhaps with error
 * @returns An int which is zero on error
  Wait for data to be available  Only permit accesses to disks found to be present during ide_preinit()     printf("outb: %d:%01x <= %02x\n", device, port, val); fill high bytes of LBA48 && NSECT  start a paused DMA transfer in channel 0 of the SATA DMA core  Paused High priority Dreq Dreq !RESET Use new interrupt clearing register Setup the transfer direction and burst/single mode for the two DMA busses Set the burst/single mode for bus A based on src device's settings Set the burst/single mode for bus B based on dst device's settings Set the burst/single mode for bus B based on src device's settings Set the burst/single mode for bus A based on dst device's settings Setup source address mode fixed or increment Fixed address Set up whether fixed address is _really_ fixed Incrementing address Setup destination address mode fixed or increment Fixed address Set up whether fixed address is _really_ fixed Incrementing address Set up the width of the transfers on the DMA buses Setup the priority arbitration scheme !Starve low priority Write the length, with EOT configuration for a final transfer    if((src_settings->transfer_mode_) ||
	 (src_settings->transfer_mode_)) {
	 encoded |= DMA_BYTE_CNT_BURST_MASK;
	 } else {
	 encoded &= ~DMA_BYTE_CNT_BURST_MASK;
	 } Assemble complete memory settings Assemble complete memory settings Poll for DMA completion  Abort DMA to make sure it has finished.  Wait for the channel to become idle - should be quick as should finish after the next AHB single or burst transfer Successfully cleanup the DMA channel  Deassert reset for the channel*
 * Possible that ATA status will not become not-busy, so must have timeout
  Test the ATA status register BUSY flag Not busy, so stop polling  Wait for 50mS before sampling ATA status register again Only permit accesses to disks found to be present during ide_preinit()  Select the required internal SATA drive  Start the DMA channel sending data from the passed buffer to the SATA core  Don't know why we need this delay, but without it the wait for DMA not
	 busy times soemtimes out, e.g. when saving environment to second disk  Wait for DMA to finish  Sata core should finish after DMA  Sata core debug1 register bits *
 * Ref bug-6320
 *
 * This code is a work around for a DMA hardware bug that will repeat the
 * penultimate 8-bytes on some reads. This code will check that the amount
 * of data transferred is a multiple of 512 bytes, if not the in it will
 * fetch the correct data from a buffer in the SATA core and copy it into
 * memory.
 *
  Only want to apply fix to reads  Check for an incomplete transfer, i.e. not a multiple of 512 bytes
	 transferred (datacount_port register counts quads transferred)  Only permit accesses to disks found to be present during ide_preinit()  Select the required internal SATA drive  Start the DMA channel receiving data from the SATA core into the passed buffer  Sata core should finish before DMA  Wait for DMA to finish  Setup adr of required register. std regs start eight into async region  Wait for data to be available  Read the data from the async register  Setup the data for the write  Setup adr of required register. std regs start eight into async region  Wait for data to be written  Wait for upto 5 seconds for PHY to be found  limit it to Gen-1 SATA (1.5G)  Issue phy wake & core reset  Dummy read; flush  Issue phy wake & clear core reset  Wait for upto 5 seconds for PHY to become ready printf("No SATA PHY found status:0x%x\n", scr_read(device, SATA_SCR_STATUS)); wait half a second  Wait for upto 5 seconds for FIS to be received *
 * initialise functions and macros for ASIC implementation
  wait for an ack bit to be set  Initialise records of which disks are present to all present  Block reset SATA and DMA cores  Enable clocks to SATA and DMA cores  Apply the Synopsis SATA PHY workarounds  disable and clear core interrupts  Disable SATA interrupts  Clear any pending SATA interrupts  clear sector count register for FIS detection  Get the PHY working  Record whether disk is present, so won't attempt to access it later  post disk detection clean-up  set as ata-5 (28-bit)  clear phy/link errors  clear host errors  clear interrupt register as this clears the error bit in the IDE
			 status register 
 * (C) Copyright 2005
 * Oxford Semiconductor Ltd
 *
 * See file CREDITS for list of people who contributed to this
 * project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,`
 * MA 02111-1307 USA
 *
 * SATA related definitions
  The offsets to the SATA registers  Read only  Write only  Read only  Write only  Write only  The offsets to the link registers that are access in an asynchronous manner  SATA interrupt status register fields  SATA core command register commands  ATA status (7) register field definitions  ATA device (6) register field definitions  ATA Command register initiated commands  The available buses to which the DMA controller is attached  Direction of data flow between the DMA controller's pair of interfaces  The available data widths  The mode of the DMA transfer  The available transfer targets  Chained transfers must take account of FIFO offset at end of previous transfer 1 second in units of 10uS  30 seconds in units of 100uS  0.1 second in units of 10uS  0.1 second in units of 10uS  0.1 second in units of 10uS  1 second in units of 100uS  The internal SATA drive on which we should attempt to find partitions  need keeping a record of NSECT LBAL LBAM LBAH ide_outb values for lba48 support  master/slave has no meaning to SATA core  Only permit accesses to disks found to be present during ide_preinit()     printf("inb: %d:%01x => %02x\n", device, port, val);*
 * Possible that ATA status will not become no-error, so must have timeout
 * @returns An int which is zero on error
  Check for ATA core error  Check for ATA device error *
 * Expect SATA command to always finish, perhaps with error
 * @returns An int which is zero on error
  Wait for data to be available  Only permit accesses to disks found to be present during ide_preinit()     printf("outb: %d:%01x <= %02x\n", device, port, val); fill high bytes of LBA48 && NSECT  start a paused DMA transfer in channel 0 of the SATA DMA core  Paused High priority Dreq Dreq !RESET Use new interrupt clearing register Setup the transfer direction and burst/single mode for the two DMA busses Set the burst/single mode for bus A based on src device's settings Set the burst/single mode for bus B based on dst device's settings Set the burst/single mode for bus B based on src device's settings Set the burst/single mode for bus A based on dst device's settings Setup source address mode fixed or increment Fixed address Set up whether fixed address is _really_ fixed Incrementing address Setup destination address mode fixed or increment Fixed address Set up whether fixed address is _really_ fixed Incrementing address Set up the width of the transfers on the DMA buses Setup the priority arbitration scheme !Starve low priority Write the length, with EOT configuration for a final transfer    if((src_settings->transfer_mode_) ||
	 (src_settings->transfer_mode_)) {
	 encoded |= DMA_BYTE_CNT_BURST_MASK;
	 } else {
	 encoded &= ~DMA_BYTE_CNT_BURST_MASK;
	 } Assemble complete memory settings Assemble complete memory settings Poll for DMA completion  Abort DMA to make sure it has finished.  Wait for the channel to become idle - should be quick as should finish after the next AHB single or burst transfer Successfully cleanup the DMA channel  Deassert reset for the channel*
 * Possible that ATA status will not become not-busy, so must have timeout
  Test the ATA status register BUSY flag Not busy, so stop polling  Wait for 50mS before sampling ATA status register again Only permit accesses to disks found to be present during ide_preinit()  Select the required internal SATA drive  Start the DMA channel sending data from the passed buffer to the SATA core  Don't know why we need this delay, but without it the wait for DMA not
	 busy times soemtimes out, e.g. when saving environment to second disk  Wait for DMA to finish  Sata core should finish after DMA  Sata core debug1 register bits *
 * Ref bug-6320
 *
 * This code is a work around for a DMA hardware bug that will repeat the
 * penultimate 8-bytes on some reads. This code will check that the amount
 * of data transferred is a multiple of 512 bytes, if not the in it will
 * fetch the correct data from a buffer in the SATA core and copy it into
 * memory.
 *
  Only want to apply fix to reads  Check for an incomplete transfer, i.e. not a multiple of 512 bytes
	 transferred (datacount_port register counts quads transferred)  Only permit accesses to disks found to be present during ide_preinit()  Select the required internal SATA drive  Start the DMA channel receiving data from the SATA core into the passed buffer  Sata core should finish before DMA  Wait for DMA to finish  Setup adr of required register. std regs start eight into async region  Wait for data to be available  Read the data from the async register  Setup the data for the write  Setup adr of required register. std regs start eight into async region  Wait for data to be written  Wait for upto 5 seconds for PHY to be found  limit it to Gen-1 SATA (1.5G)  Issue phy wake & core reset  Dummy read; flush  Issue phy wake & clear core reset  Wait for upto 5 seconds for PHY to become ready printf("No SATA PHY found status:0x%x\n", scr_read(device, SATA_SCR_STATUS)); wait half a second  Wait for upto 5 seconds for FIS to be received *
 * initialise functions and macros for ASIC implementation
  wait for an ack bit to be set  Initialise records of which disks are present to all present  Block reset SATA and DMA cores  Enable clocks to SATA and DMA cores  Apply the Synopsis SATA PHY workarounds  disable and clear core interrupts  Disable SATA interrupts  Clear any pending SATA interrupts  clear sector count register for FIS detection  Get the PHY working  Record whether disk is present, so won't attempt to access it later  post disk detection clean-up  set as ata-5 (28-bit)  clear phy/link errors  clear host errors  clear interrupt register as this clears the error bit in the IDE
			 status register 
 * (C) Copyright 2005
 * Oxford Semiconductor Ltd
 *
 * See file CREDITS for list of people who contributed to this
 * project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,`
 * MA 02111-1307 USA
 *
 * SATA related definitions
  The offsets to the SATA registers  Read only  Write only  Read only  Write only  Write only  The offsets to the link registers that are access in an asynchronous manner  SATA interrupt status register fields  SATA core command register commands  ATA status (7) register field definitions  ATA device (6) register field definitions  ATA Command register initiated commands  The available buses to which the DMA controller is attached  Direction of data flow between the DMA controller's pair of interfaces  The available data widths  The mode of the DMA transfer  The available transfer targets  Chained transfers must take account of FIFO offset at end of previous transfer 1 second in units of 10uS  30 seconds in units of 100uS  0.1 second in units of 10uS  0.1 second in units of 10uS  0.1 second in units of 10uS  1 second in units of 100uS  The internal SATA drive on which we should attempt to find partitions  need keeping a record of NSECT LBAL LBAM LBAH ide_outb values for lba48 support  master/slave has no meaning to SATA core  Only permit accesses to disks found to be present during ide_preinit()     printf("inb: %d:%01x => %02x\n", device, port, val);*
 * Possible that ATA status will not become no-error, so must have timeout
 * @returns An int which is zero on error
  Check for ATA core error  Check for ATA device error *
 * Expect SATA command to always finish, perhaps with error
 * @returns An int which is zero on error
  Wait for data to be available  Only permit accesses to disks found to be present during ide_preinit()     printf("outb: %d:%01x <= %02x\n", device, port, val); fill high bytes of LBA48 && NSECT  start a paused DMA transfer in channel 0 of the SATA DMA core  Paused High priority Dreq Dreq !RESET Use new interrupt clearing register Setup the transfer direction and burst/single mode for the two DMA busses Set the burst/single mode for bus A based on src device's settings Set the burst/single mode for bus B based on dst device's settings Set the burst/single mode for bus B based on src device's settings Set the burst/single mode for bus A based on dst device's settings Setup source address mode fixed or increment Fixed address Set up whether fixed address is _really_ fixed Incrementing address Setup destination address mode fixed or increment Fixed address Set up whether fixed address is _really_ fixed Incrementing address Set up the width of the transfers on the DMA buses Setup the priority arbitration scheme !Starve low priority Write the length, with EOT configuration for a final transfer    if((src_settings->transfer_mode_) ||
	 (src_settings->transfer_mode_)) {
	 encoded |= DMA_BYTE_CNT_BURST_MASK;
	 } else {
	 encoded &= ~DMA_BYTE_CNT_BURST_MASK;
	 } Assemble complete memory settings Assemble complete memory settings Poll for DMA completion  Abort DMA to make sure it has finished.  Wait for the channel to become idle - should be quick as should finish after the next AHB single or burst transfer Successfully cleanup the DMA channel  Deassert reset for the channel*
 * Possible that ATA status will not become not-busy, so must have timeout
  Test the ATA status register BUSY flag Not busy, so stop polling  Wait for 50mS before sampling ATA status register again Only permit accesses to disks found to be present during ide_preinit()  Select the required internal SATA drive  Start the DMA channel sending data from the passed buffer to the SATA core  Don't know why we need this delay, but without it the wait for DMA not
	 busy times soemtimes out, e.g. when saving environment to second disk  Wait for DMA to finish  Sata core should finish after DMA  Sata core debug1 register bits *
 * Ref bug-6320
 *
 * This code is a work around for a DMA hardware bug that will repeat the
 * penultimate 8-bytes on some reads. This code will check that the amount
 * of data transferred is a multiple of 512 bytes, if not the in it will
 * fetch the correct data from a buffer in the SATA core and copy it into
 * memory.
 *
  Only want to apply fix to reads  Check for an incomplete transfer, i.e. not a multiple of 512 bytes
	 transferred (datacount_port register counts quads transferred)  Only permit accesses to disks found to be present during ide_preinit()  Select the required internal SATA drive  Start the DMA channel receiving data from the SATA core into the passed buffer  Sata core should finish before DMA  Wait for DMA to finish  Setup adr of required register. std regs start eight into async region  Wait for data to be available  Read the data from the async register  Setup the data for the write  Setup adr of required register. std regs start eight into async region  Wait for data to be written  Wait for upto 5 seconds for PHY to be found  limit it to Gen-1 SATA (1.5G)  Issue phy wake & core reset  Dummy read; flush  Issue phy wake & clear core reset  Wait for upto 5 seconds for PHY to become ready printf("No SATA PHY found status:0x%x\n", scr_read(device, SATA_SCR_STATUS)); wait half a second  Wait for upto 5 seconds for FIS to be received *
 * initialise functions and macros for ASIC implementation
  wait for an ack bit to be set  Initialise records of which disks are present to all present  Block reset SATA and DMA cores  Enable clocks to SATA and DMA cores  Apply the Synopsis SATA PHY workarounds  disable and clear core interrupts  Disable SATA interrupts  Clear any pending SATA interrupts  clear sector count register for FIS detection  Get the PHY working  Record whether disk is present, so won't attempt to access it later  post disk detection clean-up  set as ata-5 (28-bit)  clear phy/link errors  clear host errors  clear interrupt register as this clears the error bit in the IDE
			 status register 
 * (C) Copyright 2005
 * Oxford Semiconductor Ltd
 *
 * See file CREDITS for list of people who contributed to this
 * project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,`
 * MA 02111-1307 USA
 *
 * SATA related definitions
  The offsets to the SATA registers  Read only  Write only  Read only  Write only  Write only  The offsets to the link registers that are access in an asynchronous manner  SATA interrupt status register fields  SATA core command register commands  ATA status (7) register field definitions  ATA device (6) register field definitions  ATA Command register initiated commands  The available buses to which the DMA controller is attached  Direction of data flow between the DMA controller's pair of interfaces  The available data widths  The mode of the DMA transfer  The available transfer targets  Chained transfers must take account of FIFO offset at end of previous transfer 1 second in units of 10uS  30 seconds in units of 100uS  0.1 second in units of 10uS  0.1 second in units of 10uS  0.1 second in units of 10uS  1 second in units of 100uS  The internal SATA drive on which we should attempt to find partitions  need keeping a record of NSECT LBAL LBAM LBAH ide_outb values for lba48 support  master/slave has no meaning to SATA core  Only permit accesses to disks found to be present during ide_preinit()     printf("inb: %d:%01x => %02x\n", device, port, val);*
 * Possible that ATA status will not become no-error, so must have timeout
 * @returns An int which is zero on error
  Check for ATA core error  Check for ATA device error *
 * Expect SATA command to always finish, perhaps with error
 * @returns An int which is zero on error
  Wait for data to be available  Only permit accesses to disks found to be present during ide_preinit()     printf("outb: %d:%01x <= %02x\n", device, port, val); fill high bytes of LBA48 && NSECT  start a paused DMA transfer in channel 0 of the SATA DMA core  Paused High priority Dreq Dreq !RESET Use new interrupt clearing register Setup the transfer direction and burst/single mode for the two DMA busses Set the burst/single mode for bus A based on src device's settings Set the burst/single mode for bus B based on dst device's settings Set the burst/single mode for bus B based on src device's settings Set the burst/single mode for bus A based on dst device's settings Setup source address mode fixed or increment Fixed address Set up whether fixed address is _really_ fixed Incrementing address Setup destination address mode fixed or increment Fixed address Set up whether fixed address is _really_ fixed Incrementing address Set up the width of the transfers on the DMA buses Setup the priority arbitration scheme !Starve low priority Write the length, with EOT configuration for a final transfer    if((src_settings->transfer_mode_) ||
	 (src_settings->transfer_mode_)) {
	 encoded |= DMA_BYTE_CNT_BURST_MASK;
	 } else {
	 encoded &= ~DMA_BYTE_CNT_BURST_MASK;
	 } Assemble complete memory settings Assemble complete memory settings Poll for DMA completion  Abort DMA to make sure it has finished.  Wait for the channel to become idle - should be quick as should finish after the next AHB single or burst transfer Successfully cleanup the DMA channel  Deassert reset for the channel*
 * Possible that ATA status will not become not-busy, so must have timeout
  Test the ATA status register BUSY flag Not busy, so stop polling  Wait for 50mS before sampling ATA status register again Only permit accesses to disks found to be present during ide_preinit()  Select the required internal SATA drive  Start the DMA channel sending data from the passed buffer to the SATA core  Don't know why we need this delay, but without it the wait for DMA not
	 busy times soemtimes out, e.g. when saving environment to second disk  Wait for DMA to finish  Sata core should finish after DMA  Sata core debug1 register bits *
 * Ref bug-6320
 *
 * This code is a work around for a DMA hardware bug that will repeat the
 * penultimate 8-bytes on some reads. This code will check that the amount
 * of data transferred is a multiple of 512 bytes, if not the in it will
 * fetch the correct data from a buffer in the SATA core and copy it into
 * memory.
 *
  Only want to apply fix to reads  Check for an incomplete transfer, i.e. not a multiple of 512 bytes
	 transferred (datacount_port register counts quads transferred)  Only permit accesses to disks found to be present during ide_preinit()  Select the required internal SATA drive  Start the DMA channel receiving data from the SATA core into the passed buffer  Sata core should finish before DMA  Wait for DMA to finish  Setup adr of required register. std regs start eight into async region  Wait for data to be available  Read the data from the async register  Setup the data for the write  Setup adr of required register. std regs start eight into async region  Wait for data to be written  Wait for upto 5 seconds for PHY to be found  limit it to Gen-1 SATA (1.5G)  Issue phy wake & core reset  Dummy read; flush  Issue phy wake & clear core reset  Wait for upto 5 seconds for PHY to become ready printf("No SATA PHY found status:0x%x\n", scr_read(device, SATA_SCR_STATUS)); wait half a second  Wait for upto 5 seconds for FIS to be received *
 * initialise functions and macros for ASIC implementation
  wait for an ack bit to be set  Initialise records of which disks are present to all present  Block reset SATA and DMA cores  Enable clocks to SATA and DMA cores  Apply the Synopsis SATA PHY workarounds  disable and clear core interrupts  Disable SATA interrupts  Clear any pending SATA interrupts  clear sector count register for FIS detection  Get the PHY working  Record whether disk is present, so won't attempt to access it later  post disk detection clean-up  set as ata-5 (28-bit)  clear phy/link errors  clear host errors  clear interrupt register as this clears the error bit in the IDE
			 status register 
 * (C) Copyright 2005
 * Oxford Semiconductor Ltd
 *
 * See file CREDITS for list of people who contributed to this
 * project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,`
 * MA 02111-1307 USA
 *
 * SATA related definitions
  The offsets to the SATA registers  Read only  Write only  Read only  Write only  Write only  The offsets to the link registers that are access in an asynchronous manner  SATA interrupt status register fields  SATA core command register commands  ATA status (7) register field definitions  ATA device (6) register field definitions  ATA Command register initiated commands  The available buses to which the DMA controller is attached  Direction of data flow between the DMA controller's pair of interfaces  The available data widths  The mode of the DMA transfer  The available transfer targets  Chained transfers must take account of FIFO offset at end of previous transfer 1 second in units of 10uS  30 seconds in units of 100uS  0.1 second in units of 10uS  0.1 second in units of 10uS  0.1 second in units of 10uS  1 second in units of 100uS  The internal SATA drive on which we should attempt to find partitions  need keeping a record of NSECT LBAL LBAM LBAH ide_outb values for lba48 support  master/slave has no meaning to SATA core  Only permit accesses to disks found to be present during ide_preinit()     printf("inb: %d:%01x => %02x\n", device, port, val);*
 * Possible that ATA status will not become no-error, so must have timeout
 * @returns An int which is zero on error
  Check for ATA core error  Check for ATA device error *
 * Expect SATA command to always finish, perhaps with error
 * @returns An int which is zero on error
  Wait for data to be available  Only permit accesses to disks found to be present during ide_preinit()     printf("outb: %d:%01x <= %02x\n", device, port, val); fill high bytes of LBA48 && NSECT  start a paused DMA transfer in channel 0 of the SATA DMA core  Paused High priority Dreq Dreq !RESET Use new interrupt clearing register Setup the transfer direction and burst/single mode for the two DMA busses Set the burst/single mode for bus A based on src device's settings Set the burst/single mode for bus B based on dst device's settings Set the burst/single mode for bus B based on src device's settings Set the burst/single mode for bus A based on dst device's settings Setup source address mode fixed or increment Fixed address Set up whether fixed address is _really_ fixed Incrementing address Setup destination address mode fixed or increment Fixed address Set up whether fixed address is _really_ fixed Incrementing address Set up the width of the transfers on the DMA buses Setup the priority arbitration scheme !Starve low priority Write the length, with EOT configuration for a final transfer    if((src_settings->transfer_mode_) ||
	 (src_settings->transfer_mode_)) {
	 encoded |= DMA_BYTE_CNT_BURST_MASK;
	 } else {
	 encoded &= ~DMA_BYTE_CNT_BURST_MASK;
	 } Assemble complete memory settings Assemble complete memory settings Poll for DMA completion  Abort DMA to make sure it has finished.  Wait for the channel to become idle - should be quick as should finish after the next AHB single or burst transfer Successfully cleanup the DMA channel  Deassert reset for the channel*
 * Possible that ATA status will not become not-busy, so must have timeout
  Test the ATA status register BUSY flag Not busy, so stop polling  Wait for 50mS before sampling ATA status register again Only permit accesses to disks found to be present during ide_preinit()  Select the required internal SATA drive  Start the DMA channel sending data from the passed buffer to the SATA core  Don't know why we need this delay, but without it the wait for DMA not
	 busy times soemtimes out, e.g. when saving environment to second disk  Wait for DMA to finish  Sata core should finish after DMA  Sata core debug1 register bits *
 * Ref bug-6320
 *
 * This code is a work around for a DMA hardware bug that will repeat the
 * penultimate 8-bytes on some reads. This code will check that the amount
 * of data transferred is a multiple of 512 bytes, if not the in it will
 * fetch the correct data from a buffer in the SATA core and copy it into
 * memory.
 *
  Only want to apply fix to reads  Check for an incomplete transfer, i.e. not a multiple of 512 bytes
	 transferred (datacount_port register counts quads transferred)  Only permit accesses to disks found to be present during ide_preinit()  Select the required internal SATA drive  Start the DMA channel receiving data from the SATA core into the passed buffer  Sata core should finish before DMA  Wait for DMA to finish  Setup adr of required register. std regs start eight into async region  Wait for data to be available  Read the data from the async register  Setup the data for the write  Setup adr of required register. std regs start eight into async region  Wait for data to be written  Wait for upto 5 seconds for PHY to be found  limit it to Gen-1 SATA (1.5G)  Issue phy wake & core reset  Dummy read; flush  Issue phy wake & clear core reset  Wait for upto 5 seconds for PHY to become ready printf("No SATA PHY found status:0x%x\n", scr_read(device, SATA_SCR_STATUS)); wait half a second  Wait for upto 5 seconds for FIS to be received *
 * initialise functions and macros for ASIC implementation
  wait for an ack bit to be set  Initialise records of which disks are present to all present  Block reset SATA and DMA cores  Enable clocks to SATA and DMA cores  Apply the Synopsis SATA PHY workarounds  disable and clear core interrupts  Disable SATA interrupts  Clear any pending SATA interrupts  clear sector count register for FIS detection  Get the PHY working  Record whether disk is present, so won't attempt to access it later  post disk detection clean-up  set as ata-5 (28-bit)  clear phy/link errors  clear host errors  clear interrupt register as this clears the error bit in the IDE
			 status register 
 * (C) Copyright 2005
 * Oxford Semiconductor Ltd
 *
 * See file CREDITS for list of people who contributed to this
 * project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,`
 * MA 02111-1307 USA
 *
 * SATA related definitions
  The offsets to the SATA registers  Read only  Write only  Read only  Write only  Write only  The offsets to the link registers that are access in an asynchronous manner  SATA interrupt status register fields  SATA core command register commands  ATA status (7) register field definitions  ATA device (6) register field definitions  ATA Command register initiated commands  The available buses to which the DMA controller is attached  Direction of data flow between the DMA controller's pair of interfaces  The available data widths  The mode of the DMA transfer  The available transfer targets  Chained transfers must take account of FIFO offset at end of previous transfer 1 second in units of 10uS  30 seconds in units of 100uS  0.1 second in units of 10uS  0.1 second in units of 10uS  0.1 second in units of 10uS  1 second in units of 100uS  The internal SATA drive on which we should attempt to find partitions  need keeping a record of NSECT LBAL LBAM LBAH ide_outb values for lba48 support  master/slave has no meaning to SATA core  Only permit accesses to disks found to be present during ide_preinit()     printf("inb: %d:%01x => %02x\n", device, port, val);*
 * Possible that ATA status will not become no-error, so must have timeout
 * @returns An int which is zero on error
  Check for ATA core error  Check for ATA device error *
 * Expect SATA command to always finish, perhaps with error
 * @returns An int which is zero on error
  Wait for data to be available  Only permit accesses to disks found to be present during ide_preinit()     printf("outb: %d:%01x <= %02x\n", device, port, val); fill high bytes of LBA48 && NSECT  start a paused DMA transfer in channel 0 of the SATA DMA core  Paused High priority Dreq Dreq !RESET Use new interrupt clearing register Setup the transfer direction and burst/single mode for the two DMA busses Set the burst/single mode for bus A based on src device's settings Set the burst/single mode for bus B based on dst device's settings Set the burst/single mode for bus B based on src device's settings Set the burst/single mode for bus A based on dst device's settings Setup source address mode fixed or increment Fixed address Set up whether fixed address is _really_ fixed Incrementing address Setup destination address mode fixed or increment Fixed address Set up whether fixed address is _really_ fixed Incrementing address Set up the width of the transfers on the DMA buses Setup the priority arbitration scheme !Starve low priority Write the length, with EOT configuration for a final transfer    if((src_settings->transfer_mode_) ||
	 (src_settings->transfer_mode_)) {
	 encoded |= DMA_BYTE_CNT_BURST_MASK;
	 } else {
	 encoded &= ~DMA_BYTE_CNT_BURST_MASK;
	 } Assemble complete memory settings Assemble complete memory settings Poll for DMA completion  Abort DMA to make sure it has finished.  Wait for the channel to become idle - should be quick as should finish after the next AHB single or burst transfer Successfully cleanup the DMA channel  Deassert reset for the channel*
 * Possible that ATA status will not become not-busy, so must have timeout
  Test the ATA status register BUSY flag Not busy, so stop polling  Wait for 50mS before sampling ATA status register again Only permit accesses to disks found to be present during ide_preinit()  Select the required internal SATA drive  Start the DMA channel sending data from the passed buffer to the SATA core  Don't know why we need this delay, but without it the wait for DMA not
	 busy times soemtimes out, e.g. when saving environment to second disk  Wait for DMA to finish  Sata core should finish after DMA  Sata core debug1 register bits *
 * Ref bug-6320
 *
 * This code is a work around for a DMA hardware bug that will repeat the
 * penultimate 8-bytes on some reads. This code will check that the amount
 * of data transferred is a multiple of 512 bytes, if not the in it will
 * fetch the correct data from a buffer in the SATA core and copy it into
 * memory.
 *
  Only want to apply fix to reads  Check for an incomplete transfer, i.e. not a multiple of 512 bytes
	 transferred (datacount_port register counts quads transferred)  Only permit accesses to disks found to be present during ide_preinit()  Select the required internal SATA drive  Start the DMA channel receiving data from the SATA core into the passed buffer  Sata core should finish before DMA  Wait for DMA to finish  Setup adr of required register. std regs start eight into async region  Wait for data to be available  Read the data from the async register  Setup the data for the write  Setup adr of required register. std regs start eight into async region  Wait for data to be written  Wait for upto 5 seconds for PHY to be found  limit it to Gen-1 SATA (1.5G)  Issue phy wake & core reset  Dummy read; flush  Issue phy wake & clear core reset  Wait for upto 5 seconds for PHY to become ready printf("No SATA PHY found status:0x%x\n", scr_read(device, SATA_SCR_STATUS)); wait half a second  Wait for upto 5 seconds for FIS to be received *
 * initialise functions and macros for ASIC implementation
  wait for an ack bit to be set  Initialise records of which disks are present to all present  Block reset SATA and DMA cores  Enable clocks to SATA and DMA cores  Apply the Synopsis SATA PHY workarounds  disable and clear core interrupts  Disable SATA interrupts  Clear any pending SATA interrupts  clear sector count register for FIS detection  Get the PHY working  Record whether disk is present, so won't attempt to access it later  post disk detection clean-up  set as ata-5 (28-bit)  clear phy/link errors  clear host errors  clear interrupt register as this clears the error bit in the IDE
			 status register 