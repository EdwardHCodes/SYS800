**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Linus Nielsen Feltzing
 * Additional work by Martin Ritter (2007) and Thomas Martitz (2008)
 *                  for backlight thread fading
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
    Device specific implementation:
    bool backlight_hw_init(void);
    void backlight_hw_on(void);
    void backlight_hw_off(void);
    void backlight_hw_brightness(int brightness);
 HAVE_BUTTON_LIGHT  Update state of buttonlight according to timeout setting  Buttonlight == OFF in the setting?  Disable the timeout  external interface  HAVE_BUTTON_LIGHT  HAVE_REMOTE_LCD  Target defines needed value  Cancel the LCD sleep countdown  Start LCD sleep countdown  Setting == Always  Ensure lcd_sleep() is called from backlight_thread()  HAVE_LCD_SLEEP  backlight fading  Cycle interval in ms  s15.16 fixed point variables  New cycle  Dim main screen  protect from extraneous calls with the same target value  Prevent cpu frequency changes while dimming.  on  on  make sure the backlight is at lowest level  write the lowest brightness level to the hardware so that
         * fading up is glitch free  CONFIG_BACKLIGHT_FADING  targets that have fading need to start the countdown when done with
     * fading  Update state of backlight according to timeout setting  Backlight == OFF in the setting?  LCD must be enabled to allow "passive" operation (backlight always off)  necessary step to issue fading down when the setting is selected  wake up lcd  Update state of remote backlight according to timeout setting  Backlight == OFF in the setting?  Disable the timeout  HAVE_REMOTE_LCD  These events must always be processed  Here for now or else the aggressive init messes up scrolling  HAVE_REMOTE_LCD/ HAVE_REMOTE_LCD_AS_MAIN  !SIMULATOR  Get out of here  These events are only processed if backlight isn't locked  Disable the timeout  HAVE_REMOTE_LCD  receive backlight brightness  HAVE_BACKLIGHT_BRIGHTNESS  HAVE_BUTTONLIGHT_BRIGHTNESS  HAVE_BUTTON_LIGHT  Lock backlight on poweroff so it doesn't  go off before power is actually cut.  fall through  finished fading  start sleep countdown  CONFIG_BACKLIGHT_FADING  end while  HAVE_LCD_SLEEP  HAVE_REMOVE_LCD  HAVE_BUTTON_LIGHT  If backlight is already on, don't fade in.  Leave all lights as set by the bootloader here. The settings load will
     * call the appropriate backlight_set_*() functions, only changing light
     * status if necessary.  Wait for thread to exit  BACKLIGHT_DRIVER_CLOSE  returns true when the backlight is on,
 * and optionally when it's set to always off.  countdown  always on  return value in ticks; 0 means always on, <0 means always off  always on or always off  CONFIG_CHARGING  Hold button change event handler.  if unlocked or override in effect backlight_on(); REMOVED if given a weird value, use default  HAS_BUTTON_HOLD  Timer will be set when bl turns off or bl set to on.  Backlight is Off  Never  Always - sleep next tick  other  HAVE_LCD_SLEEP_SETTING  CONFIG_CHARGING  Remote hold button change event handler.  if unlocked or override  if given a weird value, use default  HAS_REMOTE_BUTTON_HOLD  return value in ticks; 0 means always on, <0 means always off  always on or always off  returns true when the backlight is on, and
 * optionally  when it's set to always off  countdown  always on  HAVE_REMOTE_LCD  HAVE_BACKLIGHT_BRIGHTNESS  HAVE_BUTTONLIGHT_BRIGHTNESS  !defined(HAVE_BACKLIGHT) || !defined(BACKLIGHT_FULL_INIT)
    -- no backlight, empty dummy functions  HAVE_REMOTE_LCD  HAVE_BUTTON_LIGHT  defined(HAVE_BACKLIGHT) && defined(BACKLIGHT_FULL_INIT) **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Linus Nielsen Feltzing
 * Additional work by Martin Ritter (2007) and Thomas Martitz (2008)
 *                  for backlight thread fading
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
    Device specific implementation:
    bool backlight_hw_init(void);
    void backlight_hw_on(void);
    void backlight_hw_off(void);
    void backlight_hw_brightness(int brightness);
 HAVE_BUTTON_LIGHT  Update state of buttonlight according to timeout setting  Buttonlight == OFF in the setting?  Disable the timeout  external interface  HAVE_BUTTON_LIGHT  HAVE_REMOTE_LCD  Target defines needed value  Cancel the LCD sleep countdown  Start LCD sleep countdown  Setting == Always  Ensure lcd_sleep() is called from backlight_thread()  HAVE_LCD_SLEEP  backlight fading  Cycle interval in ms  s15.16 fixed point variables  New cycle  Dim main screen  protect from extraneous calls with the same target value  Prevent cpu frequency changes while dimming.  on  on  make sure the backlight is at lowest level  write the lowest brightness level to the hardware so that
         * fading up is glitch free  CONFIG_BACKLIGHT_FADING  targets that have fading need to start the countdown when done with
     * fading  Update state of backlight according to timeout setting  Backlight == OFF in the setting?  LCD must be enabled to allow "passive" operation (backlight always off)  necessary step to issue fading down when the setting is selected  wake up lcd  Update state of remote backlight according to timeout setting  Backlight == OFF in the setting?  Disable the timeout  HAVE_REMOTE_LCD  These events must always be processed  Here for now or else the aggressive init messes up scrolling  HAVE_REMOTE_LCD/ HAVE_REMOTE_LCD_AS_MAIN  !SIMULATOR  Get out of here  These events are only processed if backlight isn't locked  Disable the timeout  HAVE_REMOTE_LCD  receive backlight brightness  HAVE_BACKLIGHT_BRIGHTNESS  HAVE_BUTTONLIGHT_BRIGHTNESS  HAVE_BUTTON_LIGHT  Lock backlight on poweroff so it doesn't  go off before power is actually cut.  fall through  finished fading  start sleep countdown  CONFIG_BACKLIGHT_FADING  end while  HAVE_LCD_SLEEP  HAVE_REMOVE_LCD  HAVE_BUTTON_LIGHT  If backlight is already on, don't fade in.  Leave all lights as set by the bootloader here. The settings load will
     * call the appropriate backlight_set_*() functions, only changing light
     * status if necessary.  Wait for thread to exit  BACKLIGHT_DRIVER_CLOSE  returns true when the backlight is on,
 * and optionally when it's set to always off.  countdown  always on  return value in ticks; 0 means always on, <0 means always off  always on or always off  CONFIG_CHARGING  Hold button change event handler.  if unlocked or override in effect backlight_on(); REMOVED if given a weird value, use default  HAS_BUTTON_HOLD  Timer will be set when bl turns off or bl set to on.  Backlight is Off  Never  Always - sleep next tick  other  HAVE_LCD_SLEEP_SETTING  CONFIG_CHARGING  Remote hold button change event handler.  if unlocked or override  if given a weird value, use default  HAS_REMOTE_BUTTON_HOLD  return value in ticks; 0 means always on, <0 means always off  always on or always off  returns true when the backlight is on, and
 * optionally  when it's set to always off  countdown  always on  HAVE_REMOTE_LCD  HAVE_BACKLIGHT_BRIGHTNESS  HAVE_BUTTONLIGHT_BRIGHTNESS  !defined(HAVE_BACKLIGHT) || !defined(BACKLIGHT_FULL_INIT)
    -- no backlight, empty dummy functions  HAVE_REMOTE_LCD  HAVE_BUTTON_LIGHT  defined(HAVE_BACKLIGHT) && defined(BACKLIGHT_FULL_INIT) **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Linus Nielsen Feltzing
 * Additional work by Martin Ritter (2007) and Thomas Martitz (2008)
 *                  for backlight thread fading
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
    Device specific implementation:
    bool backlight_hw_init(void);
    void backlight_hw_on(void);
    void backlight_hw_off(void);
    void backlight_hw_brightness(int brightness);
 HAVE_BUTTON_LIGHT  Update state of buttonlight according to timeout setting  Buttonlight == OFF in the setting?  Disable the timeout  external interface  HAVE_BUTTON_LIGHT  HAVE_REMOTE_LCD  Target defines needed value  Cancel the LCD sleep countdown  Start LCD sleep countdown  Setting == Always  Ensure lcd_sleep() is called from backlight_thread()  HAVE_LCD_SLEEP  backlight fading  Cycle interval in ms  s15.16 fixed point variables  New cycle  Dim main screen  protect from extraneous calls with the same target value  Prevent cpu frequency changes while dimming.  on  on  make sure the backlight is at lowest level  write the lowest brightness level to the hardware so that
         * fading up is glitch free  CONFIG_BACKLIGHT_FADING  targets that have fading need to start the countdown when done with
     * fading  Update state of backlight according to timeout setting  Backlight == OFF in the setting?  LCD must be enabled to allow "passive" operation (backlight always off)  necessary step to issue fading down when the setting is selected  wake up lcd  Update state of remote backlight according to timeout setting  Backlight == OFF in the setting?  Disable the timeout  HAVE_REMOTE_LCD  These events must always be processed  Here for now or else the aggressive init messes up scrolling  HAVE_REMOTE_LCD/ HAVE_REMOTE_LCD_AS_MAIN  !SIMULATOR  Get out of here  These events are only processed if backlight isn't locked  Disable the timeout  HAVE_REMOTE_LCD  receive backlight brightness  HAVE_BACKLIGHT_BRIGHTNESS  HAVE_BUTTONLIGHT_BRIGHTNESS  HAVE_BUTTON_LIGHT  Lock backlight on poweroff so it doesn't  go off before power is actually cut.  fall through  finished fading  start sleep countdown  CONFIG_BACKLIGHT_FADING  end while  HAVE_LCD_SLEEP  HAVE_REMOVE_LCD  HAVE_BUTTON_LIGHT  If backlight is already on, don't fade in.  Leave all lights as set by the bootloader here. The settings load will
     * call the appropriate backlight_set_*() functions, only changing light
     * status if necessary.  Wait for thread to exit  BACKLIGHT_DRIVER_CLOSE  returns true when the backlight is on,
 * and optionally when it's set to always off.  countdown  always on  return value in ticks; 0 means always on, <0 means always off  always on or always off  CONFIG_CHARGING  Hold button change event handler.  if unlocked or override in effect backlight_on(); REMOVED if given a weird value, use default  HAS_BUTTON_HOLD  Timer will be set when bl turns off or bl set to on.  Backlight is Off  Never  Always - sleep next tick  other  HAVE_LCD_SLEEP_SETTING  CONFIG_CHARGING  Remote hold button change event handler.  if unlocked or override  if given a weird value, use default  HAS_REMOTE_BUTTON_HOLD  return value in ticks; 0 means always on, <0 means always off  always on or always off  returns true when the backlight is on, and
 * optionally  when it's set to always off  countdown  always on  HAVE_REMOTE_LCD  HAVE_BACKLIGHT_BRIGHTNESS  HAVE_BUTTONLIGHT_BRIGHTNESS  !defined(HAVE_BACKLIGHT) || !defined(BACKLIGHT_FULL_INIT)
    -- no backlight, empty dummy functions  HAVE_REMOTE_LCD  HAVE_BUTTON_LIGHT  defined(HAVE_BACKLIGHT) && defined(BACKLIGHT_FULL_INIT) 