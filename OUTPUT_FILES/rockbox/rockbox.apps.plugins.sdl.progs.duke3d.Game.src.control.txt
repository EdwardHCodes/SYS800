-------------------------------------------------------------------------
Copyright (C) 1996, 2003 - 3D Realms Entertainment

This file is part of Duke Nukem 3D version 1.5 - Atomic Edition

Duke Nukem 3D is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
aint32_t with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

Original Source: 1996 - Todd Replogle
Prepared for public release: 03/21/2003 - Charlie Wiederhold, 3D Realms
-------------------------------------------------------------------------*************************************************************************** GLOBALS*************************************************************************** FIX_00018: Removed the "smoothmouse" option. This was just a bad fix. Mouse is now faster,            smoother. extern int g_CV_EnableSmoothMouse; extern int g_CV_SmoothMouseSensX; extern int g_CV_SmoothMouseSensY; FIX_00019: DigitalAxis Handling now supported. (cool for medkit use)uint32   CONTROL_ButtonHeldState1;uint32   CONTROL_ButtonHeldState2;[MAXJOYHATS];[MAXJOYHATS];*************************************************************************** FUNCTIONS*************************************************************************** Joystick/Gamepad bindingsKeyboard input Check mouseMouse buttons	 FIX_00019: DigitalAxis Handling now supported. (cool for medkit use)Mouse Digital Axes	 Check joystick Check the joystick Check the hats Check the hatsCONTROL_MouseButtonState1 |= (1<<i);CONTROL_MouseButtonState1 &= ~(1<<i); FIX_00019: DigitalAxis Handling now supported. (cool for medkit use)CONTROL_JoyButtonState |= (1<<i);CONTROL_JoyHatState1 |= (1<<i);CONTROL_JoyHatState1 &= ~(1<<i);

		if(pressed)
		{
			CONTROL_KeyStates[key] = 1;
		}
		else
		{
			CONTROL_KeyStates[key] = 0;
		}
		
	int i;
	
	for (i = 0; i < MAXGAMEBUTTONS; i++) 
	{
		if (KeyMapping[i].key_active == false) 
		{
			continue;
		}
	
		if (KeyMapping[i].key1 == key || 
			KeyMapping[i].key2 == key) 
		{
			
			if (pressed) 
			{
				SETBUTTON(i);
			} 
			else 
			{
				RESBUTTON(i);
			}
		}
	}
	 FIX_00020: Protect you from assigning a function to the ESC key through duke3d.cfg TODO TODO STUBBED("CONTROL_DefineFlag");info->dx = info->dz = 0; get the very last mouse position before reading it.GetCursorPos(&point);	SDL_GetMouseState(&x, &y);	SDL_WarpMouse(160, 100);mx = (-xx+point.x)<<2;my = (-yy+point.y)<<2;xx=point.x; yy=point.y; Not sure what I was thinking here... Commented this out because it totally breaks smooth mouse etc...
			{
				// Mouse should use pitch instead of forward movement.
				info->dpitch = my * sens*2;
			}
			break;
			 If mouse aim is active FIX_00052: Y axis for the mouse is now twice as sensitive as before TODO: releasing the mouse button does not honor if a keyboard key with the same function is still pressed. how should it?MouseMapping[i]printf("mouse button: %d\n", i);MouseMapping[i] FIX_00019: DigitalAxis Handling now supported. (cool for medkit use) update digital axis update stick state. Check the hats TODO: make this NOT use the BUTTON() system for storing the hat input. (requires much game code changing)printf("Joy %d = %d\n", i, info->dx);STUBSTUB !!! FIXME: Do this.SETBUTTON based on _joystick_button().RESBUTTON(whichbutton); FIX_00014: Added Y cursor setup for mouse sensitivity in the menus  Init the joystickSTUBBED("CONTROL_MapAnalogAxis"); FIX_00019: DigitalAxis Handling now supported. (cool for medkit use) Set it... make sure we don't let them set it to 0.. div by 0 is bad. Set it...  this is in buildengine.updateMouse();for(j=0; j<8; j++){}-------------------------------------------------------------------------
Copyright (C) 1996, 2003 - 3D Realms Entertainment

This file is part of Duke Nukem 3D version 1.5 - Atomic Edition

Duke Nukem 3D is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
aint32_t with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

Original Source: 1996 - Todd Replogle
Prepared for public release: 03/21/2003 - Charlie Wiederhold, 3D Realms
-------------------------------------------------------------------------*************************************************************************** GLOBALS*************************************************************************** FIX_00018: Removed the "smoothmouse" option. This was just a bad fix. Mouse is now faster,            smoother. extern int g_CV_EnableSmoothMouse; extern int g_CV_SmoothMouseSensX; extern int g_CV_SmoothMouseSensY; FIX_00019: DigitalAxis Handling now supported. (cool for medkit use)uint32   CONTROL_ButtonHeldState1;uint32   CONTROL_ButtonHeldState2;[MAXJOYHATS];[MAXJOYHATS];*************************************************************************** FUNCTIONS*************************************************************************** Joystick/Gamepad bindingsKeyboard input Check mouseMouse buttons	 FIX_00019: DigitalAxis Handling now supported. (cool for medkit use)Mouse Digital Axes	 Check joystick Check the joystick Check the hats Check the hatsCONTROL_MouseButtonState1 |= (1<<i);CONTROL_MouseButtonState1 &= ~(1<<i); FIX_00019: DigitalAxis Handling now supported. (cool for medkit use)CONTROL_JoyButtonState |= (1<<i);CONTROL_JoyHatState1 |= (1<<i);CONTROL_JoyHatState1 &= ~(1<<i);

		if(pressed)
		{
			CONTROL_KeyStates[key] = 1;
		}
		else
		{
			CONTROL_KeyStates[key] = 0;
		}
		
	int i;
	
	for (i = 0; i < MAXGAMEBUTTONS; i++) 
	{
		if (KeyMapping[i].key_active == false) 
		{
			continue;
		}
	
		if (KeyMapping[i].key1 == key || 
			KeyMapping[i].key2 == key) 
		{
			
			if (pressed) 
			{
				SETBUTTON(i);
			} 
			else 
			{
				RESBUTTON(i);
			}
		}
	}
	 FIX_00020: Protect you from assigning a function to the ESC key through duke3d.cfg TODO TODO STUBBED("CONTROL_DefineFlag");info->dx = info->dz = 0; get the very last mouse position before reading it.GetCursorPos(&point);	SDL_GetMouseState(&x, &y);	SDL_WarpMouse(160, 100);mx = (-xx+point.x)<<2;my = (-yy+point.y)<<2;xx=point.x; yy=point.y; Not sure what I was thinking here... Commented this out because it totally breaks smooth mouse etc...
			{
				// Mouse should use pitch instead of forward movement.
				info->dpitch = my * sens*2;
			}
			break;
			 If mouse aim is active FIX_00052: Y axis for the mouse is now twice as sensitive as before TODO: releasing the mouse button does not honor if a keyboard key with the same function is still pressed. how should it?MouseMapping[i]printf("mouse button: %d\n", i);MouseMapping[i] FIX_00019: DigitalAxis Handling now supported. (cool for medkit use) update digital axis update stick state. Check the hats TODO: make this NOT use the BUTTON() system for storing the hat input. (requires much game code changing)printf("Joy %d = %d\n", i, info->dx);STUBSTUB !!! FIXME: Do this.SETBUTTON based on _joystick_button().RESBUTTON(whichbutton); FIX_00014: Added Y cursor setup for mouse sensitivity in the menus  Init the joystickSTUBBED("CONTROL_MapAnalogAxis"); FIX_00019: DigitalAxis Handling now supported. (cool for medkit use) Set it... make sure we don't let them set it to 0.. div by 0 is bad. Set it...  this is in buildengine.updateMouse();for(j=0; j<8; j++){}-------------------------------------------------------------------------
Copyright (C) 1996, 2003 - 3D Realms Entertainment

This file is part of Duke Nukem 3D version 1.5 - Atomic Edition

Duke Nukem 3D is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
aint32_t with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

Original Source: 1996 - Todd Replogle
Prepared for public release: 03/21/2003 - Charlie Wiederhold, 3D Realms
-------------------------------------------------------------------------*************************************************************************** GLOBALS*************************************************************************** FIX_00018: Removed the "smoothmouse" option. This was just a bad fix. Mouse is now faster,            smoother. extern int g_CV_EnableSmoothMouse; extern int g_CV_SmoothMouseSensX; extern int g_CV_SmoothMouseSensY; FIX_00019: DigitalAxis Handling now supported. (cool for medkit use)uint32   CONTROL_ButtonHeldState1;uint32   CONTROL_ButtonHeldState2;[MAXJOYHATS];[MAXJOYHATS];*************************************************************************** FUNCTIONS*************************************************************************** Joystick/Gamepad bindingsKeyboard input Check mouseMouse buttons	 FIX_00019: DigitalAxis Handling now supported. (cool for medkit use)Mouse Digital Axes	 Check joystick Check the joystick Check the hats Check the hatsCONTROL_MouseButtonState1 |= (1<<i);CONTROL_MouseButtonState1 &= ~(1<<i); FIX_00019: DigitalAxis Handling now supported. (cool for medkit use)CONTROL_JoyButtonState |= (1<<i);CONTROL_JoyHatState1 |= (1<<i);CONTROL_JoyHatState1 &= ~(1<<i);

		if(pressed)
		{
			CONTROL_KeyStates[key] = 1;
		}
		else
		{
			CONTROL_KeyStates[key] = 0;
		}
		
	int i;
	
	for (i = 0; i < MAXGAMEBUTTONS; i++) 
	{
		if (KeyMapping[i].key_active == false) 
		{
			continue;
		}
	
		if (KeyMapping[i].key1 == key || 
			KeyMapping[i].key2 == key) 
		{
			
			if (pressed) 
			{
				SETBUTTON(i);
			} 
			else 
			{
				RESBUTTON(i);
			}
		}
	}
	 FIX_00020: Protect you from assigning a function to the ESC key through duke3d.cfg TODO TODO STUBBED("CONTROL_DefineFlag");info->dx = info->dz = 0; get the very last mouse position before reading it.GetCursorPos(&point);	SDL_GetMouseState(&x, &y);	SDL_WarpMouse(160, 100);mx = (-xx+point.x)<<2;my = (-yy+point.y)<<2;xx=point.x; yy=point.y; Not sure what I was thinking here... Commented this out because it totally breaks smooth mouse etc...
			{
				// Mouse should use pitch instead of forward movement.
				info->dpitch = my * sens*2;
			}
			break;
			 If mouse aim is active FIX_00052: Y axis for the mouse is now twice as sensitive as before TODO: releasing the mouse button does not honor if a keyboard key with the same function is still pressed. how should it?MouseMapping[i]printf("mouse button: %d\n", i);MouseMapping[i] FIX_00019: DigitalAxis Handling now supported. (cool for medkit use) update digital axis update stick state. Check the hats TODO: make this NOT use the BUTTON() system for storing the hat input. (requires much game code changing)printf("Joy %d = %d\n", i, info->dx);STUBSTUB !!! FIXME: Do this.SETBUTTON based on _joystick_button().RESBUTTON(whichbutton); FIX_00014: Added Y cursor setup for mouse sensitivity in the menus  Init the joystickSTUBBED("CONTROL_MapAnalogAxis"); FIX_00019: DigitalAxis Handling now supported. (cool for medkit use) Set it... make sure we don't let them set it to 0.. div by 0 is bad. Set it...  this is in buildengine.updateMouse();for(j=0; j<8; j++){}