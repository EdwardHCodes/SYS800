**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Jonathan Gordon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Button Code Definitions for touchscreen targets  How this file is used:
   get_context_mapping() at the bottom of the file is called by action.c as usual.
   if the context is for the remote control its then passed straight to
   target_get_context_mapping().
   These tables are only used for the touchscreen buttons, so at the end of each
   CONTEXT_CUSTOM2 is OR'ed with the context and then sent to target_get_context_mapping()
   (NOTE: CONTEXT_CUSTOM2 will be stripped before being sent to make it easier.)
   In the target keymap, remember to |CONTEXT_CUSTOM2 in the  LAST_ITEM_IN_LIST__NEXTLIST() macro
   to speed it up a tiny bit... if you dont it will go through these tables first before going
   back to the target file.
  touchscreen "buttons"
   screen is split into a 3x3 grid for buttons...
    BUTTON_TOPLEFT      BUTTON_TOPMIDDLE    BUTTON_TOPRIGHT
    BUTTON_MIDLEFT      BUTTON_CENTER       BUTTON_MIDRIGHT
    BUTTON_BOTTOMLEFT   BUTTON_BOTTOMMIDDLE BUTTON_BOTTOMRIGHT
 button_context_standard  button_context_wps  this is all to show how the poor-mans-gestures can be used...  button_context_list     { ACTION_TREE_HOTKEY, BUTTON_NONE,                        BUTTON_NONE }, button_context_tree  button_context_settings  button_context_settingsgraphical  button_context_settings_yesno  button_context_colorchooser  override the std context since we're using MIDRIGHT for settings inc  button_context_eq  Bookmark Screen  button_context_bmark  button_context_time  override ACTION_STD_CANCEL from standard context  button_context_quickscreen  button_context_pitchcreen  button_context_keyboard  button_context_radio  button_context_usb_hid  button_context_usb_hid_mode_multimedia  button_context_usb_hid_mode_presentation  button_context_usb_hid_mode_browser  button_context_usb_hid_mode_mouse **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Jonathan Gordon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Button Code Definitions for touchscreen targets  How this file is used:
   get_context_mapping() at the bottom of the file is called by action.c as usual.
   if the context is for the remote control its then passed straight to
   target_get_context_mapping().
   These tables are only used for the touchscreen buttons, so at the end of each
   CONTEXT_CUSTOM2 is OR'ed with the context and then sent to target_get_context_mapping()
   (NOTE: CONTEXT_CUSTOM2 will be stripped before being sent to make it easier.)
   In the target keymap, remember to |CONTEXT_CUSTOM2 in the  LAST_ITEM_IN_LIST__NEXTLIST() macro
   to speed it up a tiny bit... if you dont it will go through these tables first before going
   back to the target file.
  touchscreen "buttons"
   screen is split into a 3x3 grid for buttons...
    BUTTON_TOPLEFT      BUTTON_TOPMIDDLE    BUTTON_TOPRIGHT
    BUTTON_MIDLEFT      BUTTON_CENTER       BUTTON_MIDRIGHT
    BUTTON_BOTTOMLEFT   BUTTON_BOTTOMMIDDLE BUTTON_BOTTOMRIGHT
 button_context_standard  button_context_wps  this is all to show how the poor-mans-gestures can be used...  button_context_list     { ACTION_TREE_HOTKEY, BUTTON_NONE,                        BUTTON_NONE }, button_context_tree  button_context_settings  button_context_settingsgraphical  button_context_settings_yesno  button_context_colorchooser  override the std context since we're using MIDRIGHT for settings inc  button_context_eq  Bookmark Screen  button_context_bmark  button_context_time  override ACTION_STD_CANCEL from standard context  button_context_quickscreen  button_context_pitchcreen  button_context_keyboard  button_context_radio  button_context_usb_hid  button_context_usb_hid_mode_multimedia  button_context_usb_hid_mode_presentation  button_context_usb_hid_mode_browser  button_context_usb_hid_mode_mouse **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Jonathan Gordon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Button Code Definitions for touchscreen targets  How this file is used:
   get_context_mapping() at the bottom of the file is called by action.c as usual.
   if the context is for the remote control its then passed straight to
   target_get_context_mapping().
   These tables are only used for the touchscreen buttons, so at the end of each
   CONTEXT_CUSTOM2 is OR'ed with the context and then sent to target_get_context_mapping()
   (NOTE: CONTEXT_CUSTOM2 will be stripped before being sent to make it easier.)
   In the target keymap, remember to |CONTEXT_CUSTOM2 in the  LAST_ITEM_IN_LIST__NEXTLIST() macro
   to speed it up a tiny bit... if you dont it will go through these tables first before going
   back to the target file.
  touchscreen "buttons"
   screen is split into a 3x3 grid for buttons...
    BUTTON_TOPLEFT      BUTTON_TOPMIDDLE    BUTTON_TOPRIGHT
    BUTTON_MIDLEFT      BUTTON_CENTER       BUTTON_MIDRIGHT
    BUTTON_BOTTOMLEFT   BUTTON_BOTTOMMIDDLE BUTTON_BOTTOMRIGHT
 button_context_standard  button_context_wps  this is all to show how the poor-mans-gestures can be used...  button_context_list     { ACTION_TREE_HOTKEY, BUTTON_NONE,                        BUTTON_NONE }, button_context_tree  button_context_settings  button_context_settingsgraphical  button_context_settings_yesno  button_context_colorchooser  override the std context since we're using MIDRIGHT for settings inc  button_context_eq  Bookmark Screen  button_context_bmark  button_context_time  override ACTION_STD_CANCEL from standard context  button_context_quickscreen  button_context_pitchcreen  button_context_keyboard  button_context_radio  button_context_usb_hid  button_context_usb_hid_mode_multimedia  button_context_usb_hid_mode_presentation  button_context_usb_hid_mode_browser  button_context_usb_hid_mode_mouse 