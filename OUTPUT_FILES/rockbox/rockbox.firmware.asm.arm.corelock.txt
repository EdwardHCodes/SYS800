**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Daniel Ankers
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Core locks using Peterson's mutual exclusion algorithm.
 * ASM optimized version of C code, see firmware/asm/corelock.c ---------------------------------------------------------------------------
 * Wait for the corelock to become free and acquire it when it does.
 *---------------------------------------------------------------------------
  Relies on the fact that core IDs are complementary bitmasks (0x55,0xaa)  r1 = PROCESSOR_ID  cl->myl[core] = core  r2 = othercore  cl->turn = othercore  cl->myl[othercore] == 0 ?  yes? lock acquired  || cl->turn == core ?  no? try again  Done ---------------------------------------------------------------------------
 * Try to aquire the corelock. If free, caller gets it, otherwise return 0.
 *---------------------------------------------------------------------------
  Relies on the fact that core IDs are complementary bitmasks (0x55,0xaa)  r1 = PROCESSOR_ID  cl->myl[core] = core  r2 = othercore  cl->turn = othercore  cl->myl[othercore] == 0 ?  yes? lock acquired  || cl->turn == core?  if not, cl->myl[core] = 0  Done ---------------------------------------------------------------------------
 * Release ownership of the corelock
 *---------------------------------------------------------------------------
  r1 = PROCESSOR_ID  cl->myl[core] = 0 **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Daniel Ankers
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Core locks using Peterson's mutual exclusion algorithm.
 * ASM optimized version of C code, see firmware/asm/corelock.c ---------------------------------------------------------------------------
 * Wait for the corelock to become free and acquire it when it does.
 *---------------------------------------------------------------------------
  Relies on the fact that core IDs are complementary bitmasks (0x55,0xaa)  r1 = PROCESSOR_ID  cl->myl[core] = core  r2 = othercore  cl->turn = othercore  cl->myl[othercore] == 0 ?  yes? lock acquired  || cl->turn == core ?  no? try again  Done ---------------------------------------------------------------------------
 * Try to aquire the corelock. If free, caller gets it, otherwise return 0.
 *---------------------------------------------------------------------------
  Relies on the fact that core IDs are complementary bitmasks (0x55,0xaa)  r1 = PROCESSOR_ID  cl->myl[core] = core  r2 = othercore  cl->turn = othercore  cl->myl[othercore] == 0 ?  yes? lock acquired  || cl->turn == core?  if not, cl->myl[core] = 0  Done ---------------------------------------------------------------------------
 * Release ownership of the corelock
 *---------------------------------------------------------------------------
  r1 = PROCESSOR_ID  cl->myl[core] = 0 **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Daniel Ankers
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Core locks using Peterson's mutual exclusion algorithm.
 * ASM optimized version of C code, see firmware/asm/corelock.c ---------------------------------------------------------------------------
 * Wait for the corelock to become free and acquire it when it does.
 *---------------------------------------------------------------------------
  Relies on the fact that core IDs are complementary bitmasks (0x55,0xaa)  r1 = PROCESSOR_ID  cl->myl[core] = core  r2 = othercore  cl->turn = othercore  cl->myl[othercore] == 0 ?  yes? lock acquired  || cl->turn == core ?  no? try again  Done ---------------------------------------------------------------------------
 * Try to aquire the corelock. If free, caller gets it, otherwise return 0.
 *---------------------------------------------------------------------------
  Relies on the fact that core IDs are complementary bitmasks (0x55,0xaa)  r1 = PROCESSOR_ID  cl->myl[core] = core  r2 = othercore  cl->turn = othercore  cl->myl[othercore] == 0 ?  yes? lock acquired  || cl->turn == core?  if not, cl->myl[core] = 0  Done ---------------------------------------------------------------------------
 * Release ownership of the corelock
 *---------------------------------------------------------------------------
  r1 = PROCESSOR_ID  cl->myl[core] = 0 