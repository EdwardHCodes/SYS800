**************************************************************************
 *             __________               __   ___
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2014 by Ilia Sergachev: Initial Rockbox port to iBasso DX50
 * Copyright (C) 2014 by Mario Basister: iBasso DX90 port
 * Copyright (C) 2014 by Simon Rothen: Initial Rockbox repository submission, additional features
 * Copyright (C) 2014 by Udo Schläpfer: Code clean up, additional features
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** /dev/input/event0  /dev/input/event1  /dev/input/event2 
    Changing bit, when hold switch is toggled.
    Bit is off when hold switch is engaged.

    Changing bit, when coaxial out is plugged.
    Bit is off when coaxial out is plugged in.

    Changing bit, when line out is plugged.
    Bit is off when line out is plugged in.
 State of the hold switch; true: hold switch engaged.  See button.h. DEBUGF("%s: hold_state: %d, %c.", __func__, hold_state, hold_state);bool coax_connected = ! (hold_state & COAX_BIT);
    bool spdif_connected = ! (hold_state & SPDIF_BIT);DEBUGF("%s: _hold: %d, coax_connected: %d, spdif_connected: %d.", __func__, _hold, coax_connected, spdif_connected); Input devices monitored with poll API.  Number of input devices monitored with poll API.  The names of the devices in _fds.  Open device device_name and add it to the list of polled devices.  See button.h.  The input device directory.  Path delimeter.  Open all devices in device_path.  Open and add device to _fds.  Sanity check. 
        Hold switch has a separate interface for its state.
        Input events just report that it has been toggled, but not the state.
     Last known touchscreen coordinates.  Last known touchscreen state.  x -> next will be y.  Press -> next will be x.  Last known hardware buttons pressed.  See button.h.  Poll all input devices. DEBUGF("DEBUG %s: device: %s, event.type: %d, event.code: %d, event.value: %d", __func__, _device_names[fds_idx], event.type, event.code, event.value); Hold switch toggled, update hold switch state.  Hold switch engaged. Ignore all button events. DEBUGF("DEBUG %s: _last_btns: %#8.8x", __func__, _last_btns); Hold switch engaged, ignore all touchscreen events. DEBUGF("DEBUG %s: _last_touch_state: %d, _last_x: %d, _last_y: %d, read_more: %s", __func__, _last_touch_state, _last_x, _last_y, read_more ? "true" : "false");
        Get grid button/coordinates based on the current touchscreen mode
        Caveat: The caller seemingly depends on *data always being filled with
                the last known touchscreen position, so always call
                touchscreen_to_pixels().
    DEBUGF("DEBUG %s: _last_btns: %#8.8x.", __func__, _last_btns);**************************************************************************
 *             __________               __   ___
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2014 by Ilia Sergachev: Initial Rockbox port to iBasso DX50
 * Copyright (C) 2014 by Mario Basister: iBasso DX90 port
 * Copyright (C) 2014 by Simon Rothen: Initial Rockbox repository submission, additional features
 * Copyright (C) 2014 by Udo Schläpfer: Code clean up, additional features
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** /dev/input/event0  /dev/input/event1  /dev/input/event2 
    Changing bit, when hold switch is toggled.
    Bit is off when hold switch is engaged.

    Changing bit, when coaxial out is plugged.
    Bit is off when coaxial out is plugged in.

    Changing bit, when line out is plugged.
    Bit is off when line out is plugged in.
 State of the hold switch; true: hold switch engaged.  See button.h. DEBUGF("%s: hold_state: %d, %c.", __func__, hold_state, hold_state);bool coax_connected = ! (hold_state & COAX_BIT);
    bool spdif_connected = ! (hold_state & SPDIF_BIT);DEBUGF("%s: _hold: %d, coax_connected: %d, spdif_connected: %d.", __func__, _hold, coax_connected, spdif_connected); Input devices monitored with poll API.  Number of input devices monitored with poll API.  The names of the devices in _fds.  Open device device_name and add it to the list of polled devices.  See button.h.  The input device directory.  Path delimeter.  Open all devices in device_path.  Open and add device to _fds.  Sanity check. 
        Hold switch has a separate interface for its state.
        Input events just report that it has been toggled, but not the state.
     Last known touchscreen coordinates.  Last known touchscreen state.  x -> next will be y.  Press -> next will be x.  Last known hardware buttons pressed.  See button.h.  Poll all input devices. DEBUGF("DEBUG %s: device: %s, event.type: %d, event.code: %d, event.value: %d", __func__, _device_names[fds_idx], event.type, event.code, event.value); Hold switch toggled, update hold switch state.  Hold switch engaged. Ignore all button events. DEBUGF("DEBUG %s: _last_btns: %#8.8x", __func__, _last_btns); Hold switch engaged, ignore all touchscreen events. DEBUGF("DEBUG %s: _last_touch_state: %d, _last_x: %d, _last_y: %d, read_more: %s", __func__, _last_touch_state, _last_x, _last_y, read_more ? "true" : "false");
        Get grid button/coordinates based on the current touchscreen mode
        Caveat: The caller seemingly depends on *data always being filled with
                the last known touchscreen position, so always call
                touchscreen_to_pixels().
    DEBUGF("DEBUG %s: _last_btns: %#8.8x.", __func__, _last_btns);**************************************************************************
 *             __________               __   ___
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2014 by Ilia Sergachev: Initial Rockbox port to iBasso DX50
 * Copyright (C) 2014 by Mario Basister: iBasso DX90 port
 * Copyright (C) 2014 by Simon Rothen: Initial Rockbox repository submission, additional features
 * Copyright (C) 2014 by Udo Schläpfer: Code clean up, additional features
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** /dev/input/event0  /dev/input/event1  /dev/input/event2 
    Changing bit, when hold switch is toggled.
    Bit is off when hold switch is engaged.

    Changing bit, when coaxial out is plugged.
    Bit is off when coaxial out is plugged in.

    Changing bit, when line out is plugged.
    Bit is off when line out is plugged in.
 State of the hold switch; true: hold switch engaged.  See button.h. DEBUGF("%s: hold_state: %d, %c.", __func__, hold_state, hold_state);bool coax_connected = ! (hold_state & COAX_BIT);
    bool spdif_connected = ! (hold_state & SPDIF_BIT);DEBUGF("%s: _hold: %d, coax_connected: %d, spdif_connected: %d.", __func__, _hold, coax_connected, spdif_connected); Input devices monitored with poll API.  Number of input devices monitored with poll API.  The names of the devices in _fds.  Open device device_name and add it to the list of polled devices.  See button.h.  The input device directory.  Path delimeter.  Open all devices in device_path.  Open and add device to _fds.  Sanity check. 
        Hold switch has a separate interface for its state.
        Input events just report that it has been toggled, but not the state.
     Last known touchscreen coordinates.  Last known touchscreen state.  x -> next will be y.  Press -> next will be x.  Last known hardware buttons pressed.  See button.h.  Poll all input devices. DEBUGF("DEBUG %s: device: %s, event.type: %d, event.code: %d, event.value: %d", __func__, _device_names[fds_idx], event.type, event.code, event.value); Hold switch toggled, update hold switch state.  Hold switch engaged. Ignore all button events. DEBUGF("DEBUG %s: _last_btns: %#8.8x", __func__, _last_btns); Hold switch engaged, ignore all touchscreen events. DEBUGF("DEBUG %s: _last_touch_state: %d, _last_x: %d, _last_y: %d, read_more: %s", __func__, _last_touch_state, _last_x, _last_y, read_more ? "true" : "false");
        Get grid button/coordinates based on the current touchscreen mode
        Caveat: The caller seemingly depends on *data always being filled with
                the last known touchscreen position, so always call
                touchscreen_to_pixels().
    DEBUGF("DEBUG %s: _last_btns: %#8.8x.", __func__, _last_btns);