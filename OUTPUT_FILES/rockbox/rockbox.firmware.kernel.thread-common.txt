**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Ulf Ralberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Unless otherwise defined, do nothing  Array indexing is more efficient in inlines if the elements are a native
   word size (100s of bytes fewer instructions) * Internal functions *---------------------------------------------------------------------------
 * Find an empty thread slot or NULL if none found. The slot returned will
 * be locked on multicore.
 *---------------------------------------------------------------------------
 ---------------------------------------------------------------------------
 * Initialize the thread allocator
 *---------------------------------------------------------------------------
  Something not in the past ---------------------------------------------------------------------------
 * Allocate a thread alot 
 *---------------------------------------------------------------------------
 ---------------------------------------------------------------------------
 * Free the thread slot of 'thread'
 *---------------------------------------------------------------------------
 ---------------------------------------------------------------------------
 * Assign the thread slot a new ID. Version is 0x00000100..0xffffff00.
 *---------------------------------------------------------------------------
  If wrapped to 0, make it 1 ---------------------------------------------------------------------------
 * Wakeup an entire queue of threads - returns bitwise-or of return bitmask
 * from each operation or THREAD_NONE of nothing was awakened.
 *---------------------------------------------------------------------------
 * Public functions *---------------------------------------------------------------------------
 * Return the thread id of the calling thread
 * --------------------------------------------------------------------------
 ---------------------------------------------------------------------------
 * Suspends a thread's execution for at least the specified number of ticks.
 *
 * May result in CPU core entering wait-for-interrupt mode if no other thread
 * may be scheduled.
 *
 * NOTE: sleep(0) sleeps until the end of the current tick
 *       sleep(n) that doesn't result in rescheduling:
 *                      n <= ticks suspended < n + 1
 *       n to n+1 is a lower bound. Other factors may affect the actual time
 *       a thread is suspended before it runs again.
 *---------------------------------------------------------------------------
  In certain situations, certain bootloaders in particular, a normal
     * threading call is inappropriate.  Handled ---------------------------------------------------------------------------
 * Elects another thread to run or, if no other thread may be made ready to
 * run, immediately returns control back to the calling thread.
 *---------------------------------------------------------------------------
  In certain situations, certain bootloaders in particular, a normal
     * threading call is inappropriate.  Handled * Debug screen stuff *---------------------------------------------------------------------------
 * Returns the maximum percentage of the stack ever used during runtime.
 *---------------------------------------------------------------------------
  HAVE_SDL_THREADS  NUM_CORES > 1 **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Ulf Ralberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Unless otherwise defined, do nothing  Array indexing is more efficient in inlines if the elements are a native
   word size (100s of bytes fewer instructions) * Internal functions *---------------------------------------------------------------------------
 * Find an empty thread slot or NULL if none found. The slot returned will
 * be locked on multicore.
 *---------------------------------------------------------------------------
 ---------------------------------------------------------------------------
 * Initialize the thread allocator
 *---------------------------------------------------------------------------
  Something not in the past ---------------------------------------------------------------------------
 * Allocate a thread alot 
 *---------------------------------------------------------------------------
 ---------------------------------------------------------------------------
 * Free the thread slot of 'thread'
 *---------------------------------------------------------------------------
 ---------------------------------------------------------------------------
 * Assign the thread slot a new ID. Version is 0x00000100..0xffffff00.
 *---------------------------------------------------------------------------
  If wrapped to 0, make it 1 ---------------------------------------------------------------------------
 * Wakeup an entire queue of threads - returns bitwise-or of return bitmask
 * from each operation or THREAD_NONE of nothing was awakened.
 *---------------------------------------------------------------------------
 * Public functions *---------------------------------------------------------------------------
 * Return the thread id of the calling thread
 * --------------------------------------------------------------------------
 ---------------------------------------------------------------------------
 * Suspends a thread's execution for at least the specified number of ticks.
 *
 * May result in CPU core entering wait-for-interrupt mode if no other thread
 * may be scheduled.
 *
 * NOTE: sleep(0) sleeps until the end of the current tick
 *       sleep(n) that doesn't result in rescheduling:
 *                      n <= ticks suspended < n + 1
 *       n to n+1 is a lower bound. Other factors may affect the actual time
 *       a thread is suspended before it runs again.
 *---------------------------------------------------------------------------
  In certain situations, certain bootloaders in particular, a normal
     * threading call is inappropriate.  Handled ---------------------------------------------------------------------------
 * Elects another thread to run or, if no other thread may be made ready to
 * run, immediately returns control back to the calling thread.
 *---------------------------------------------------------------------------
  In certain situations, certain bootloaders in particular, a normal
     * threading call is inappropriate.  Handled * Debug screen stuff *---------------------------------------------------------------------------
 * Returns the maximum percentage of the stack ever used during runtime.
 *---------------------------------------------------------------------------
  HAVE_SDL_THREADS  NUM_CORES > 1 **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Ulf Ralberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Unless otherwise defined, do nothing  Array indexing is more efficient in inlines if the elements are a native
   word size (100s of bytes fewer instructions) * Internal functions *---------------------------------------------------------------------------
 * Find an empty thread slot or NULL if none found. The slot returned will
 * be locked on multicore.
 *---------------------------------------------------------------------------
 ---------------------------------------------------------------------------
 * Initialize the thread allocator
 *---------------------------------------------------------------------------
  Something not in the past ---------------------------------------------------------------------------
 * Allocate a thread alot 
 *---------------------------------------------------------------------------
 ---------------------------------------------------------------------------
 * Free the thread slot of 'thread'
 *---------------------------------------------------------------------------
 ---------------------------------------------------------------------------
 * Assign the thread slot a new ID. Version is 0x00000100..0xffffff00.
 *---------------------------------------------------------------------------
  If wrapped to 0, make it 1 ---------------------------------------------------------------------------
 * Wakeup an entire queue of threads - returns bitwise-or of return bitmask
 * from each operation or THREAD_NONE of nothing was awakened.
 *---------------------------------------------------------------------------
 * Public functions *---------------------------------------------------------------------------
 * Return the thread id of the calling thread
 * --------------------------------------------------------------------------
 ---------------------------------------------------------------------------
 * Suspends a thread's execution for at least the specified number of ticks.
 *
 * May result in CPU core entering wait-for-interrupt mode if no other thread
 * may be scheduled.
 *
 * NOTE: sleep(0) sleeps until the end of the current tick
 *       sleep(n) that doesn't result in rescheduling:
 *                      n <= ticks suspended < n + 1
 *       n to n+1 is a lower bound. Other factors may affect the actual time
 *       a thread is suspended before it runs again.
 *---------------------------------------------------------------------------
  In certain situations, certain bootloaders in particular, a normal
     * threading call is inappropriate.  Handled ---------------------------------------------------------------------------
 * Elects another thread to run or, if no other thread may be made ready to
 * run, immediately returns control back to the calling thread.
 *---------------------------------------------------------------------------
  In certain situations, certain bootloaders in particular, a normal
     * threading call is inappropriate.  Handled * Debug screen stuff *---------------------------------------------------------------------------
 * Returns the maximum percentage of the stack ever used during runtime.
 *---------------------------------------------------------------------------
  HAVE_SDL_THREADS  NUM_CORES > 1 