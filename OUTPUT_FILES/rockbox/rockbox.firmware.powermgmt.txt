**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Heikki Hannikainen, Uwe Freese
 * Revisions copyright (C) 2005 by Gerald Van Baren
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** Shared by sim * battery level (0-100%)  Whether an active sleep timer should be restarted when a key is pressed  The number of seconds the sleep timer was last set to  State of the charger input as seen by the power thread  Power inputs as seen by the power thread  Charging state (mode) as seen by the power thread  CONFIG_CHARGING 
 * Average battery voltage and charger voltage, filtered via a digital
 * exponential filter (aka. exponential moving average, scaled):
 * avgbat = y[n] = (N-1)/N*y[n-1] + x[n]. battery_millivolts = y[n] / N.
  filtered battery voltage, millivolts  default value, mAh  Power history: power_history[0] is the newest sample only used if we have run current recalculate the battery status  recalculate the battery status  no estimation without current  nor without capacity  Returns battery level in percent  Tells if the battery level is safe for disk writes  Cannot rely upon the battery reading to be valid and the
     * device could be powered externally.  look into the percent_to_volt_* table and get a realistic battery level  search nearest value  interpolate linear between the smaller and greater value  Tens digit, 10% per entry,  ones digit: interpolated  update battery level and estimated runtime, called once per minute or
 * when battery capacity / type settings are changed  battery level is defined to be < 100% until charging is finished  CONFIG_CHARGING >= CHARGING_MONITOR  DISCHARGING or error state don't try to estimate run or charge
                        time without normal current defined calculate estimated remaining running time  charging: remaining charging time  discharging: remaining running time  linear extrapolation check that we have a current defined in a config file
 * Estimate how much current we are drawing just to run.
  LED always on  BOOTLOADER  CURRENT_NORMAL  Check to see whether or not we've received an alarm in the last second  switch off unit if battery level is too low for reliable operation  Cannot rely upon the battery reading to be valid and the
     * device could be powered externally. 
 * Reset the battery voltage filter to a new value and update the
 * status.
  HAVE_BATTERY_SWITCH * Generic charging algorithms for common charging types * Nothing to do  Nothing to do  Nothing to do 
 * Monitor CHARGING/DISCHARGING state.
  Nothing to do  Fallthrough  Nothing to do  CONFIG_CHARGING == *  Shortcut function calls - compatibility, simplicity.  Returns true if any power input is capable of charging.  Returns true if any power input is connected - charging-capable
 * or not. 
 * Detect charger inserted. Return true if the state is transistional.
 
     * Detect charger plugged/unplugged transitions.  On a plugged or
     * unplugged event, we return immediately, run once through the main
     * loop (including the subroutines), and end up back here where we
     * transition to the appropriate steady state charger on/off state.
      Steady state  charger not inserted  Steady state  Transitional state  CONFIG_CHARGING  Returns filtered battery voltage [millivolts]  initialize the voltages for the exponential filter  this adjustment is only needed for HD based  The battery voltage is usually a little lower directly after
       turning on, because the disk was used heavily. Raise it by 5%  only if charger not connected  HAVE_DISK_STORAGE 
     * battery_millivolts is the millivolt-scaled filtered battery value.
      rotate the power history 
 * Monitor the presence of a charger and perform critical frequent steps
 * such as running the battery voltage filter.
  If the power off timeout expires, the main thread has failed
       to shut down the system, and we need to force a power off 
     * Do a digital exponential filter.  We don't sample the battery if
     * the disk is spinning unless we are in USB mode (the disk will most
     * likely always be spinning in USB mode) or charging.
      update battery status every time an update is available  update battery status every time an update is available 
         * If battery is low, observe voltage during disk activity.
         * Shut down if voltage drops below shutoff level and we are not
         * using NiMH or Alkaline batteries.
          power_thread_step  Delay reading the first battery level  gives false readings initially  can give false readings initially  Initialize power input status before calling other routines.  initialize voltage averaging (if available)  get initial battery level value (in %)  get some initial data for the power curve  call target specific init now  CONFIG_CHARGING  Steady state  Do common power tasks  Perform target tasks  check if some idle or sleep timer wears off  increment to ensure there is a record for every minute
             * rather than go forward from the current tick  power_thread  Various hardware housekeeping tasks relating to shutting down the player  do not save on critical battery  Commit pending writes if needed. Even though we don't do write caching,
   things like flash translation layers may need this to commit scattered
   pages to their final locations. So far only used for iPod Nano 2G.  If HD is still active we try to wait for spindown, otherwise the
       shutdown_timeout in power_thread_step will force a power off  Small delay to make sure all HW gets time to flush. Especially
       eeprom chips are quite slow and might be still writing the last
       byte.  If the main thread fails to shut down the system, we will force a
       power off after an 20 second timeout - 28 seconds if recording  Reset timer on first attempt only  The FTL alone may take half a minute to shut down cleanly.  BOOTLOADER  TODO: Move some things to target/ tree  Send system battery level update events on reaching certain significant
   levels. This must be called after battery_percent has been updated.  Handle sleeptimer  Nighty, nighty...  BOOTLOADER 
 * We shut off in the following cases:
 * 1) The unit is idle, not playing music
 * 2) The unit is playing music, but is paused
 * 3) The battery level has reached shutdown limit
 *
 * We do not shut off in the following cases:
 * 1) The USB is connected
 * 2) The charger is connected
 * 3) We are recording, or recording with pause
 * 4) The radio is playing
 
     * Inhibit shutdown as long as the charger is plugged in.  If it is
     * unplugged, wait for a timeout period and then shut down.
     **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Heikki Hannikainen, Uwe Freese
 * Revisions copyright (C) 2005 by Gerald Van Baren
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** Shared by sim * battery level (0-100%)  Whether an active sleep timer should be restarted when a key is pressed  The number of seconds the sleep timer was last set to  State of the charger input as seen by the power thread  Power inputs as seen by the power thread  Charging state (mode) as seen by the power thread  CONFIG_CHARGING 
 * Average battery voltage and charger voltage, filtered via a digital
 * exponential filter (aka. exponential moving average, scaled):
 * avgbat = y[n] = (N-1)/N*y[n-1] + x[n]. battery_millivolts = y[n] / N.
  filtered battery voltage, millivolts  default value, mAh  Power history: power_history[0] is the newest sample only used if we have run current recalculate the battery status  recalculate the battery status  no estimation without current  nor without capacity  Returns battery level in percent  Tells if the battery level is safe for disk writes  Cannot rely upon the battery reading to be valid and the
     * device could be powered externally.  look into the percent_to_volt_* table and get a realistic battery level  search nearest value  interpolate linear between the smaller and greater value  Tens digit, 10% per entry,  ones digit: interpolated  update battery level and estimated runtime, called once per minute or
 * when battery capacity / type settings are changed  battery level is defined to be < 100% until charging is finished  CONFIG_CHARGING >= CHARGING_MONITOR  DISCHARGING or error state don't try to estimate run or charge
                        time without normal current defined calculate estimated remaining running time  charging: remaining charging time  discharging: remaining running time  linear extrapolation check that we have a current defined in a config file
 * Estimate how much current we are drawing just to run.
  LED always on  BOOTLOADER  CURRENT_NORMAL  Check to see whether or not we've received an alarm in the last second  switch off unit if battery level is too low for reliable operation  Cannot rely upon the battery reading to be valid and the
     * device could be powered externally. 
 * Reset the battery voltage filter to a new value and update the
 * status.
  HAVE_BATTERY_SWITCH * Generic charging algorithms for common charging types * Nothing to do  Nothing to do  Nothing to do 
 * Monitor CHARGING/DISCHARGING state.
  Nothing to do  Fallthrough  Nothing to do  CONFIG_CHARGING == *  Shortcut function calls - compatibility, simplicity.  Returns true if any power input is capable of charging.  Returns true if any power input is connected - charging-capable
 * or not. 
 * Detect charger inserted. Return true if the state is transistional.
 
     * Detect charger plugged/unplugged transitions.  On a plugged or
     * unplugged event, we return immediately, run once through the main
     * loop (including the subroutines), and end up back here where we
     * transition to the appropriate steady state charger on/off state.
      Steady state  charger not inserted  Steady state  Transitional state  CONFIG_CHARGING  Returns filtered battery voltage [millivolts]  initialize the voltages for the exponential filter  this adjustment is only needed for HD based  The battery voltage is usually a little lower directly after
       turning on, because the disk was used heavily. Raise it by 5%  only if charger not connected  HAVE_DISK_STORAGE 
     * battery_millivolts is the millivolt-scaled filtered battery value.
      rotate the power history 
 * Monitor the presence of a charger and perform critical frequent steps
 * such as running the battery voltage filter.
  If the power off timeout expires, the main thread has failed
       to shut down the system, and we need to force a power off 
     * Do a digital exponential filter.  We don't sample the battery if
     * the disk is spinning unless we are in USB mode (the disk will most
     * likely always be spinning in USB mode) or charging.
      update battery status every time an update is available  update battery status every time an update is available 
         * If battery is low, observe voltage during disk activity.
         * Shut down if voltage drops below shutoff level and we are not
         * using NiMH or Alkaline batteries.
          power_thread_step  Delay reading the first battery level  gives false readings initially  can give false readings initially  Initialize power input status before calling other routines.  initialize voltage averaging (if available)  get initial battery level value (in %)  get some initial data for the power curve  call target specific init now  CONFIG_CHARGING  Steady state  Do common power tasks  Perform target tasks  check if some idle or sleep timer wears off  increment to ensure there is a record for every minute
             * rather than go forward from the current tick  power_thread  Various hardware housekeeping tasks relating to shutting down the player  do not save on critical battery  Commit pending writes if needed. Even though we don't do write caching,
   things like flash translation layers may need this to commit scattered
   pages to their final locations. So far only used for iPod Nano 2G.  If HD is still active we try to wait for spindown, otherwise the
       shutdown_timeout in power_thread_step will force a power off  Small delay to make sure all HW gets time to flush. Especially
       eeprom chips are quite slow and might be still writing the last
       byte.  If the main thread fails to shut down the system, we will force a
       power off after an 20 second timeout - 28 seconds if recording  Reset timer on first attempt only  The FTL alone may take half a minute to shut down cleanly.  BOOTLOADER  TODO: Move some things to target/ tree  Send system battery level update events on reaching certain significant
   levels. This must be called after battery_percent has been updated.  Handle sleeptimer  Nighty, nighty...  BOOTLOADER 
 * We shut off in the following cases:
 * 1) The unit is idle, not playing music
 * 2) The unit is playing music, but is paused
 * 3) The battery level has reached shutdown limit
 *
 * We do not shut off in the following cases:
 * 1) The USB is connected
 * 2) The charger is connected
 * 3) We are recording, or recording with pause
 * 4) The radio is playing
 
     * Inhibit shutdown as long as the charger is plugged in.  If it is
     * unplugged, wait for a timeout period and then shut down.
     **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Heikki Hannikainen, Uwe Freese
 * Revisions copyright (C) 2005 by Gerald Van Baren
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** Shared by sim * battery level (0-100%)  Whether an active sleep timer should be restarted when a key is pressed  The number of seconds the sleep timer was last set to  State of the charger input as seen by the power thread  Power inputs as seen by the power thread  Charging state (mode) as seen by the power thread  CONFIG_CHARGING 
 * Average battery voltage and charger voltage, filtered via a digital
 * exponential filter (aka. exponential moving average, scaled):
 * avgbat = y[n] = (N-1)/N*y[n-1] + x[n]. battery_millivolts = y[n] / N.
  filtered battery voltage, millivolts  default value, mAh  Power history: power_history[0] is the newest sample only used if we have run current recalculate the battery status  recalculate the battery status  no estimation without current  nor without capacity  Returns battery level in percent  Tells if the battery level is safe for disk writes  Cannot rely upon the battery reading to be valid and the
     * device could be powered externally.  look into the percent_to_volt_* table and get a realistic battery level  search nearest value  interpolate linear between the smaller and greater value  Tens digit, 10% per entry,  ones digit: interpolated  update battery level and estimated runtime, called once per minute or
 * when battery capacity / type settings are changed  battery level is defined to be < 100% until charging is finished  CONFIG_CHARGING >= CHARGING_MONITOR  DISCHARGING or error state don't try to estimate run or charge
                        time without normal current defined calculate estimated remaining running time  charging: remaining charging time  discharging: remaining running time  linear extrapolation check that we have a current defined in a config file
 * Estimate how much current we are drawing just to run.
  LED always on  BOOTLOADER  CURRENT_NORMAL  Check to see whether or not we've received an alarm in the last second  switch off unit if battery level is too low for reliable operation  Cannot rely upon the battery reading to be valid and the
     * device could be powered externally. 
 * Reset the battery voltage filter to a new value and update the
 * status.
  HAVE_BATTERY_SWITCH * Generic charging algorithms for common charging types * Nothing to do  Nothing to do  Nothing to do 
 * Monitor CHARGING/DISCHARGING state.
  Nothing to do  Fallthrough  Nothing to do  CONFIG_CHARGING == *  Shortcut function calls - compatibility, simplicity.  Returns true if any power input is capable of charging.  Returns true if any power input is connected - charging-capable
 * or not. 
 * Detect charger inserted. Return true if the state is transistional.
 
     * Detect charger plugged/unplugged transitions.  On a plugged or
     * unplugged event, we return immediately, run once through the main
     * loop (including the subroutines), and end up back here where we
     * transition to the appropriate steady state charger on/off state.
      Steady state  charger not inserted  Steady state  Transitional state  CONFIG_CHARGING  Returns filtered battery voltage [millivolts]  initialize the voltages for the exponential filter  this adjustment is only needed for HD based  The battery voltage is usually a little lower directly after
       turning on, because the disk was used heavily. Raise it by 5%  only if charger not connected  HAVE_DISK_STORAGE 
     * battery_millivolts is the millivolt-scaled filtered battery value.
      rotate the power history 
 * Monitor the presence of a charger and perform critical frequent steps
 * such as running the battery voltage filter.
  If the power off timeout expires, the main thread has failed
       to shut down the system, and we need to force a power off 
     * Do a digital exponential filter.  We don't sample the battery if
     * the disk is spinning unless we are in USB mode (the disk will most
     * likely always be spinning in USB mode) or charging.
      update battery status every time an update is available  update battery status every time an update is available 
         * If battery is low, observe voltage during disk activity.
         * Shut down if voltage drops below shutoff level and we are not
         * using NiMH or Alkaline batteries.
          power_thread_step  Delay reading the first battery level  gives false readings initially  can give false readings initially  Initialize power input status before calling other routines.  initialize voltage averaging (if available)  get initial battery level value (in %)  get some initial data for the power curve  call target specific init now  CONFIG_CHARGING  Steady state  Do common power tasks  Perform target tasks  check if some idle or sleep timer wears off  increment to ensure there is a record for every minute
             * rather than go forward from the current tick  power_thread  Various hardware housekeeping tasks relating to shutting down the player  do not save on critical battery  Commit pending writes if needed. Even though we don't do write caching,
   things like flash translation layers may need this to commit scattered
   pages to their final locations. So far only used for iPod Nano 2G.  If HD is still active we try to wait for spindown, otherwise the
       shutdown_timeout in power_thread_step will force a power off  Small delay to make sure all HW gets time to flush. Especially
       eeprom chips are quite slow and might be still writing the last
       byte.  If the main thread fails to shut down the system, we will force a
       power off after an 20 second timeout - 28 seconds if recording  Reset timer on first attempt only  The FTL alone may take half a minute to shut down cleanly.  BOOTLOADER  TODO: Move some things to target/ tree  Send system battery level update events on reaching certain significant
   levels. This must be called after battery_percent has been updated.  Handle sleeptimer  Nighty, nighty...  BOOTLOADER 
 * We shut off in the following cases:
 * 1) The unit is idle, not playing music
 * 2) The unit is playing music, but is paused
 * 3) The battery level has reached shutdown limit
 *
 * We do not shut off in the following cases:
 * 1) The USB is connected
 * 2) The charger is connected
 * 3) We are recording, or recording with pause
 * 4) The radio is playing
 
     * Inhibit shutdown as long as the charger is plugged in.  If it is
     * unplugged, wait for a timeout period and then shut down.
     