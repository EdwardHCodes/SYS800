**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 Rob Purchase
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** ECC on read is implemented on the assumption that MLC-style 4-bit correction
   is always used regardless of NAND chip type. This assumption is true for at
   least D2 (MLC) and M200 (SLC).  for compatibility * static, private data * Sector type identifiers - main data area  We don't touch the hidden area at all - these are for reference  Offsets to data within sector's spare area  Chip characteristics, initialised by nand_get_chip_info()  Maximum values for static buffers  Logical/Physical translation table  core_alloc()'d in nand_init() when the correct size has been determined  Write Caches  Conversion functions  Data is located in block+1  Data is located in 2nd half of bank  NAND physical access functions  Disable both chip selects  NFC chip select  Secondary chip select  Enable NFC bus clock  Reset NAND controller  Set slow cycle timings since the chip is as yet unidentified  Set write protect  Reset command  Set 8-bit data width  Read ID command, single address cycle  Read the 5 chip ID bytes  Disable NFC bus clock  Enable NFC bus clock  Set cycle timing (stp = 1, pw = 3, hold = 1)  Set write protect  Set 8-bit data width  Undocumented (SAMSUNG specific?) commands set the chip into a
       special mode allowing a normally-hidden UID block to be read.  Read command  Write row/column address  End of read  Wait until complete  Copy data to buffer (data repeats after 8 words)  Reset the chip back to normal mode  Disable NFC bus clock  Enable NFC bus clock  Set cycle timing (stp = 1, pw = 3, hold = 1)  Set write protect  Set 8-bit data width  Read command  Write column address  Write row address  End of read command  Wait until complete  Disable NFC bus clock  Read data into page buffer  Use byte copy since either the buffer or size are not word-aligned  TODO: Byte copy only where necessary (use words for mid-section)  Use 4-byte copy as buffer and size are both word-aligned  Read chip id from bank 0  Identify the chip geometry  Establish how many banks are present  Bank 1 is populated, now check if banks 2/3 are valid  Bank 2 returned matching id - check if 2/3 are shadowing 0/1  UIDs match, assume banks 2/3 are shadowing 0/1  UIDs differ, assume banks 2/3 are valid  Bank 2 returned differing id - assume 2/3 are junk  Bank 1 returned differing id - assume it is junk 
       Sanity checks:
       1. "BMP" tag at block 0, page 0, offset <page_size> [always present]
       2. On most D2s, <page_size>+3 is 'M' and <page_size>+4 is no. of banks.
          This is not present on some older players (formatted with early FW?)
      bank, page  offset  length, dest  Set up the ECC controller to monitor reads from NFC_WDATA  Read the sector data  Read data into page buffer  If unaligned, read into a temporary buffer and copy to destination.
           This way, reads are always done through NFC_WDATA - otherwise they
           would not be 'seen' by the ECC controller.  Use straight word copy as buffer and size are both word-aligned  Stop monitoring before we read the OOB data  Read a further 4 words (sector OOB data)  Calculate MLC4 ECC using bytes 0,1,8-15  nothing to correct  fail, can't correct  between 1 and 4 errors  Disable ECC block  Check if any of the write caches refer to this segment/page.
       If present we need to read the cached page instead.  data is located in random pages cache  data is located in in-place pages cache  Miscellaneous helper functions  offset to first sector's spare  Find which cache this is related to  Loop over each page in the phys segment (from page 1 onwards).
       Read spare for 1st sector, store location of page in array.  offset to first sector's spare  !FTL_V1  offset to first sector's spare  Find which cache this is related to  Find how many pages have been written to the new segment  unused for now  unused for now  TODO: Learn more about TNFTL and implement this one day...  unused for now  firmware version  blocks count  Set GPIO direction for chip select & write protect  Get chip characteristics and number of banks  Use chip info to allocate the correct size LPT buffer  Use a static array in the bootloader  Scan banks to build up block translation table  Read spare bytes from first sector of each segment  offset  Since this type of segment is written to sequentially, its
                   job is complete if the final page has been written. In this
                   case we need to treat it as a normal data segment.  Main data area segment panicf("duplicate data segment 0x%x!", log_segment); Newly-written random page data (Main data area)  Newly-written sequential page data (Main data area)  We don't care which logical drive number we have been assigned  CONFIG_STORAGE_MULTI **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 Rob Purchase
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** ECC on read is implemented on the assumption that MLC-style 4-bit correction
   is always used regardless of NAND chip type. This assumption is true for at
   least D2 (MLC) and M200 (SLC).  for compatibility * static, private data * Sector type identifiers - main data area  We don't touch the hidden area at all - these are for reference  Offsets to data within sector's spare area  Chip characteristics, initialised by nand_get_chip_info()  Maximum values for static buffers  Logical/Physical translation table  core_alloc()'d in nand_init() when the correct size has been determined  Write Caches  Conversion functions  Data is located in block+1  Data is located in 2nd half of bank  NAND physical access functions  Disable both chip selects  NFC chip select  Secondary chip select  Enable NFC bus clock  Reset NAND controller  Set slow cycle timings since the chip is as yet unidentified  Set write protect  Reset command  Set 8-bit data width  Read ID command, single address cycle  Read the 5 chip ID bytes  Disable NFC bus clock  Enable NFC bus clock  Set cycle timing (stp = 1, pw = 3, hold = 1)  Set write protect  Set 8-bit data width  Undocumented (SAMSUNG specific?) commands set the chip into a
       special mode allowing a normally-hidden UID block to be read.  Read command  Write row/column address  End of read  Wait until complete  Copy data to buffer (data repeats after 8 words)  Reset the chip back to normal mode  Disable NFC bus clock  Enable NFC bus clock  Set cycle timing (stp = 1, pw = 3, hold = 1)  Set write protect  Set 8-bit data width  Read command  Write column address  Write row address  End of read command  Wait until complete  Disable NFC bus clock  Read data into page buffer  Use byte copy since either the buffer or size are not word-aligned  TODO: Byte copy only where necessary (use words for mid-section)  Use 4-byte copy as buffer and size are both word-aligned  Read chip id from bank 0  Identify the chip geometry  Establish how many banks are present  Bank 1 is populated, now check if banks 2/3 are valid  Bank 2 returned matching id - check if 2/3 are shadowing 0/1  UIDs match, assume banks 2/3 are shadowing 0/1  UIDs differ, assume banks 2/3 are valid  Bank 2 returned differing id - assume 2/3 are junk  Bank 1 returned differing id - assume it is junk 
       Sanity checks:
       1. "BMP" tag at block 0, page 0, offset <page_size> [always present]
       2. On most D2s, <page_size>+3 is 'M' and <page_size>+4 is no. of banks.
          This is not present on some older players (formatted with early FW?)
      bank, page  offset  length, dest  Set up the ECC controller to monitor reads from NFC_WDATA  Read the sector data  Read data into page buffer  If unaligned, read into a temporary buffer and copy to destination.
           This way, reads are always done through NFC_WDATA - otherwise they
           would not be 'seen' by the ECC controller.  Use straight word copy as buffer and size are both word-aligned  Stop monitoring before we read the OOB data  Read a further 4 words (sector OOB data)  Calculate MLC4 ECC using bytes 0,1,8-15  nothing to correct  fail, can't correct  between 1 and 4 errors  Disable ECC block  Check if any of the write caches refer to this segment/page.
       If present we need to read the cached page instead.  data is located in random pages cache  data is located in in-place pages cache  Miscellaneous helper functions  offset to first sector's spare  Find which cache this is related to  Loop over each page in the phys segment (from page 1 onwards).
       Read spare for 1st sector, store location of page in array.  offset to first sector's spare  !FTL_V1  offset to first sector's spare  Find which cache this is related to  Find how many pages have been written to the new segment  unused for now  unused for now  TODO: Learn more about TNFTL and implement this one day...  unused for now  firmware version  blocks count  Set GPIO direction for chip select & write protect  Get chip characteristics and number of banks  Use chip info to allocate the correct size LPT buffer  Use a static array in the bootloader  Scan banks to build up block translation table  Read spare bytes from first sector of each segment  offset  Since this type of segment is written to sequentially, its
                   job is complete if the final page has been written. In this
                   case we need to treat it as a normal data segment.  Main data area segment panicf("duplicate data segment 0x%x!", log_segment); Newly-written random page data (Main data area)  Newly-written sequential page data (Main data area)  We don't care which logical drive number we have been assigned  CONFIG_STORAGE_MULTI **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 Rob Purchase
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** ECC on read is implemented on the assumption that MLC-style 4-bit correction
   is always used regardless of NAND chip type. This assumption is true for at
   least D2 (MLC) and M200 (SLC).  for compatibility * static, private data * Sector type identifiers - main data area  We don't touch the hidden area at all - these are for reference  Offsets to data within sector's spare area  Chip characteristics, initialised by nand_get_chip_info()  Maximum values for static buffers  Logical/Physical translation table  core_alloc()'d in nand_init() when the correct size has been determined  Write Caches  Conversion functions  Data is located in block+1  Data is located in 2nd half of bank  NAND physical access functions  Disable both chip selects  NFC chip select  Secondary chip select  Enable NFC bus clock  Reset NAND controller  Set slow cycle timings since the chip is as yet unidentified  Set write protect  Reset command  Set 8-bit data width  Read ID command, single address cycle  Read the 5 chip ID bytes  Disable NFC bus clock  Enable NFC bus clock  Set cycle timing (stp = 1, pw = 3, hold = 1)  Set write protect  Set 8-bit data width  Undocumented (SAMSUNG specific?) commands set the chip into a
       special mode allowing a normally-hidden UID block to be read.  Read command  Write row/column address  End of read  Wait until complete  Copy data to buffer (data repeats after 8 words)  Reset the chip back to normal mode  Disable NFC bus clock  Enable NFC bus clock  Set cycle timing (stp = 1, pw = 3, hold = 1)  Set write protect  Set 8-bit data width  Read command  Write column address  Write row address  End of read command  Wait until complete  Disable NFC bus clock  Read data into page buffer  Use byte copy since either the buffer or size are not word-aligned  TODO: Byte copy only where necessary (use words for mid-section)  Use 4-byte copy as buffer and size are both word-aligned  Read chip id from bank 0  Identify the chip geometry  Establish how many banks are present  Bank 1 is populated, now check if banks 2/3 are valid  Bank 2 returned matching id - check if 2/3 are shadowing 0/1  UIDs match, assume banks 2/3 are shadowing 0/1  UIDs differ, assume banks 2/3 are valid  Bank 2 returned differing id - assume 2/3 are junk  Bank 1 returned differing id - assume it is junk 
       Sanity checks:
       1. "BMP" tag at block 0, page 0, offset <page_size> [always present]
       2. On most D2s, <page_size>+3 is 'M' and <page_size>+4 is no. of banks.
          This is not present on some older players (formatted with early FW?)
      bank, page  offset  length, dest  Set up the ECC controller to monitor reads from NFC_WDATA  Read the sector data  Read data into page buffer  If unaligned, read into a temporary buffer and copy to destination.
           This way, reads are always done through NFC_WDATA - otherwise they
           would not be 'seen' by the ECC controller.  Use straight word copy as buffer and size are both word-aligned  Stop monitoring before we read the OOB data  Read a further 4 words (sector OOB data)  Calculate MLC4 ECC using bytes 0,1,8-15  nothing to correct  fail, can't correct  between 1 and 4 errors  Disable ECC block  Check if any of the write caches refer to this segment/page.
       If present we need to read the cached page instead.  data is located in random pages cache  data is located in in-place pages cache  Miscellaneous helper functions  offset to first sector's spare  Find which cache this is related to  Loop over each page in the phys segment (from page 1 onwards).
       Read spare for 1st sector, store location of page in array.  offset to first sector's spare  !FTL_V1  offset to first sector's spare  Find which cache this is related to  Find how many pages have been written to the new segment  unused for now  unused for now  TODO: Learn more about TNFTL and implement this one day...  unused for now  firmware version  blocks count  Set GPIO direction for chip select & write protect  Get chip characteristics and number of banks  Use chip info to allocate the correct size LPT buffer  Use a static array in the bootloader  Scan banks to build up block translation table  Read spare bytes from first sector of each segment  offset  Since this type of segment is written to sequentially, its
                   job is complete if the final page has been written. In this
                   case we need to treat it as a normal data segment.  Main data area segment panicf("duplicate data segment 0x%x!", log_segment); Newly-written random page data (Main data area)  Newly-written sequential page data (Main data area)  We don't care which logical drive number we have been assigned  CONFIG_STORAGE_MULTI 