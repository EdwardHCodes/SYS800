**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2009 Wincent Balin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** This implementation of strncat is taken from lua plug-in.  gcc is broken and has a non-SUSv2 compliant internal prototype.
 * This causes it to warn about a type mismatch here.  Ignore it.  Implementation of floor, original.  If value is negative, decrement value to match function's definition.  Truncate fractional part (convert to integer)
       and afterwards convert back to double.  Implementation of strtod() and atof(),
   taken from SanOS (http://www.jbox.dk/sanos/).  Reset Rockbox errno -- W.B.  Skip leading whitespace Handle optional sign Fall through to increment position Process string of digits Process decimal part Correct for sign Process an exponent string Handle optional sign Fall through to increment pos Process string of digits Scale the result Implementation of ftoa(), original.  Zero out string.  Handle negative numbers.  Find and convert integer part.  Append integral part to output string.  Check whether further content is possible.  Append decimal point.  Calculate first rest.  If there is no fractional part, return here.  Convert the first rest to string.  Append first rest to output string.  Check whether output string still has enough space.  Calculate second rest.  If no second rest, check whether
       the output string has unwanted zero trail,
       remove it and end processing here.  Convert second rest.  Append second rest to the output string.  Cut trailing zeroes.  Implementation of atol(), adapted from
   the atoi() implementation in Rockbox.  Implementation of sin() and cos(),
   adapted from http://lab.polygonal.de/2007/07/18/fast-and-accurate-sinecosine-approximation/
 Trim input value to -PI..PI interval.  Compute cosine: sin(x + PI/2) = cos(x)  Emulation of fscanf(fd, "%f", (float*) xxx);
   Basically a reimplementation of rb_strtod() above.  Read line from file.  Terminate string.  Convert buffer to float.  If there was an error, no float was read.  Emulation of fprintf(fd, "%f\n", (float*) xxx);  Convert float to string.  Add next line character.  Write string into file.  Natural logarithm.
   Taken from glibc-2.8  0x3f317180  0x3717f7d1  0x4c000000  3F2AAAAB  3ECCCCCD  3E924925  3E638E29  3E3A3325  3E1CD04F  3E178897  A union which permits us to convert between a float and a 32 bit
   int.   Get a 32 bit int from a float.   Set a float from a 32 bit int.   x < 2**-126   log(+-0)=-inf  log(-#) = NaN  subnormal number, scale up x  normalize x or x/2  |f| < 2**-20  Logarithm for 10th base,
   taken from glibc-2.8  0x3ede5bd9  0x3e9a2080  0x355427db  x < 2**-126   log(+-0)=-inf  log(-#) = NaN  subnormal number, scale up x  Power function, taken from glibc-2.8 and dietlibc-0.32  Special cases 0^x  Special case x^n where n is integer  Normal case  Square root function, original.  take care of Inf and NaN  sqrt(NaN)=NaN, sqrt(+inf)=+inf
					   sqrt(-inf)=sNaN  take care of zero  sqrt(+-0) = +-0  sqrt(-ve) = sNaN  normalize x  subnormal x  unbias exponent  odd m, double x to make it even  m = [m/2]  generate sqrt(x) bit by bit  q = sqrt(x)  r = moving bit from right to left  use floating add to find out rounding direction  trigger inexact flag  Absolute value, simple calculus  Arc tangent,
   taken from glibc-2.8.  atan(0.5)hi 0x3eed6338  atan(1.0)hi 0x3f490fda  atan(1.5)hi 0x3f7b985e  atan(inf)hi 0x3fc90fda  atan(0.5)lo 0x31ac3769  atan(1.0)lo 0x33222168  atan(1.5)lo 0x33140fb4  atan(inf)lo 0x33a22168  0x3eaaaaaa  0xbe4ccccd  0x3e124925  0xbde38e38  0x3dba2e6e  0xbd9d8795  0x3d886b35  0xbd6ef16b  0x3d4bda59  0xbd15a221  0x3c8569d7  if |x| >= 2^34  NaN  |x| < 0.4375  |x| < 2^-29  raise inexact  |x| < 1.1875  7/16 <=|x|<11/16  11/16<=|x|< 19/16  |x| < 2.4375  2.4375 <= |x| < 2^66  end of argument reduction  break sum from i=0 to 10 aT[i]z**(i+1) into odd and even poly  Arc tangent from two variables, original.  0x3f490fdb  0x3fc90fdb  0x40490fdb  0xb3bbbd2e  x or y is NaN  x=1.0  2*sign(x)+sign(y)  when y = 0  atan(+-0,+anything)=+-0  atan(+0,-anything) = pi  atan(-0,-anything) =-pi  when x = 0  when x is INF  atan(+INF,+INF)  atan(-INF,+INF) atan(+INF,-INF)atan(-INF,-INF) atan(+...,+INF)  atan(-...,+INF)  atan(+...,-INF)  atan(-...,-INF)  when y is INF  compute y/x  |y/x| >  2**60  |y|/x < -2**60  safe to do y/x  atan(+,+)  atan(-,+)  atan(+,-)  case 3  atan(-,-)  Sine hyperbolic, taken from dietlibc-0.32  Tangent, simple calculus solution.  Exponential function,
   taken from glibc-2.8
   As it uses double values and udefines some symbols,
   it was moved to the end of the source code  __attribute__((mode(DF)))  0x0.b52d4e46605c27ffd  0x0.b587fb96f75097ffb  0x0.b5e2d649899167ffd  0x0.b63dde74d36bdfffe  0x0.b699142f945f87ffc  0x0.b6f477909c4ea0001  0x0.b75008aec758f8004  0x0.b7abc7a0eea7e0002  0x0.b807b47e1586c7ff8  0x0.b863cf5d10e380003  0x0.b8c01855195c37ffb  0x0.b91c8f7d213740004  0x0.b97934ec5002d0007  0x0.b9d608b9c92ea7ffc  0x0.ba330afcc29e98003  0x0.ba903bcc8618b7ffc  0x0.baed9b40591ba0000  0x0.bb4b296f931e30002  0x0.bba8e671a05617ff9  0x0.bc06d25dd49568001  0x0.bc64ed4bce8f6fff9  0x0.bcc33752f915d7ff9  0x0.bd21b08af98e78005  0x0.bd80590b65e9a8000  0x0.bddf30ebec4a10000  0x0.be3e38443c84e0007  0x0.be9d6f2c1d32a0002  0x0.befcd5bb59baf8004  0x0.bf5c6c09ca84c0003  0x0.bfbc322f5b18b7ff8  0x0.c01c2843f776fffff  0x0.c07c4e5fa18b88002  0x0.c0dca49a5fb18fffd  0x0.c13d2b0c444db0005  0x0.c19de1cd798578006  0x0.c1fec8f623723fffd  0x0.c25fe09e8a0f47ff8  0x0.c2c128dedc88f8000  0x0.c322a1cf7d6e7fffa  0x0.c3844b88cb9347ffc  0x0.c3e626232bd8f7ffc  0x0.c44831b719bf18002  0x0.c4aa6e5d12d078001  0x0.c50cdc2da64a37ffb  0x0.c56f7b41744490001  0x0.c5d24bb1259e70004  0x0.c6354d95640dd0007  0x0.c6988106fec447fff  0x0.c6fbe61eb1bd0ffff  0x0.c75f7cf560942fffc  0x0.c7c345a3f1983fffe  0x0.c8274043594cb0002  0x0.c88b6cec94b3b7ff9  0x0.c8efcbb89cba27ffe  0x0.c9545cc0a88c70003  0x0.c9b9201dc643bfffa  0x0.ca1e15e92a5410007  0x0.ca833e3c1ae510005  0x0.cae8992fd84667ffd  0x0.cb4e26ddbc207fff8  0x0.cbb3e75f301b60003  0x0.cc19dacd978cd8002  0x0.cc8001427e55d7ffb  0x0.cce65ade24d360006  0x0.cd4ce7a5de839fffb  0x0.cdb3a7c79a678fffd  0x0.ce1a9b563965ffffc  0x0.ce81c26b838db8000  0x0.cee91d213f8428002  0x0.cf50ab9144d92fff9  0x0.cfb86dd5758c2ffff  0x0.d0206407c20e20005  0x0.d0888e4223facfff9  0x0.d0f0ec9eb3f7c8002  0x0.d1597f377d6768002  0x0.d1c24626a46eafff8  0x0.d22b41865ff1e7ff9  0x0.d2947170f32ec7ff9  0x0.d2fdd60097795fff8  0x0.d3676f4fb796d0001  0x0.d3d13d78b5f68fffb  0x0.d43b40960546d8001  0x0.d4a578c222a058000  0x0.d50fe617a3ba78005  0x0.d57a88b1218e90002  0x0.d5e560a94048f8006  0x0.d6506e1aac8078003  0x0.d6bbb1204074e0001  0x0.d72729d4c28518004  0x0.d792d8530e12b0001  0x0.d7febcb61273e7fff  0x0.d86ad718c308dfff9  0x0.d8d727962c69d7fff  0x0.d943ae49621ce7ffb  0x0.d9b06b4d832ef8005  0x0.da1d5ebdc22220005  0x0.da8a88b555baa0006  0x0.daf7e94f965f98004  0x0.db6580a7c98f7fff8  0x0.dbd34ed9617befff8  0x0.dc4153ffc8b65fff9  0x0.dcaf90368bfca8004  0x0.dd1e0399328d87ffe  0x0.dd8cae435d303fff9  0x0.ddfb9050b1cee8006  0x0.de6aa9dced8448001  0x0.ded9fb03db7320006  0x0.df4983e1380657ff8  0x0.dfb94490ffff77ffd  0x0.e0293d2f1cb01fff9  0x0.e0996dd786fff0007  0x0.e109d6a64f5d57ffc  0x0.e17a77b78e72a7ffe  0x0.e1eb5127722cc7ff8  0x0.e25c63121fb0c8006  0x0.e2cdad93ec5340003  0x0.e33f30c925fb97ffb  0x0.e3b0ecce2d05ffff9  0x0.e422e1bf727718006  0x0.e4950fb9713fc7ffe  0x0.e50776d8b0e60fff8  0x0.e57a1739c8fadfffc  0x0.e5ecf0f97c5798007  0x0.e660043464e378005  0x0.e6d3510747e150006  0x0.e746d78f06cd97ffd  0x0.e7ba97e879c91fffc  0x0.e82e92309390b0007  0x0.e8a2c6845544afffa  0x0.e9173500c8abc7ff8  0x0.e98bddc30f98b0002  0x0.ea00c0e84bc4c7fff  0x0.ea75de8db8094fffe  0x0.eaeb36d09d3137ffe  0x0.eb60c9ce4ed3dffff  0x0.ebd697a43995b0007  0x0.ec4ca06fc7768fffa  0x0.ecc2e44e865b6fffb  0x0.ed39635df34e70006  0x0.edb01dbbc2f5b7ffa  0x0.ee2713859aab57ffa  0x0.ee9e44d9342870004  0x0.ef15b1d4635438005  0x0.ef8d5a94f60f50007  0x0.f0053f38f345cffff  0x0.f07d5fde3a2d98001  0x0.f0f5bca2d481a8004  0x0.f16e55a4e497d7ffe  0x0.f1e72b028a2827ffb  0x0.f2603cd9fb5430001  0x0.f2d98b497d2a87ff9  0x0.f353166f63e3dffff  0x0.f3ccde6a11ae37ffe  0x0.f446e357f66120000  0x0.f4c12557964f0fff9  0x0.f53ba48781046fffb  0x0.f5b66106555d07ffa  0x0.f6315af2c2027fffc  0x0.f6ac926b8aeb80004  0x0.f728078f7c5008002  0x0.f7a3ba7d66a908001  0x0.f81fab543e1897ffb  0x0.f89bda33122c78007  0x0.f9184738d4cf97ff8  0x0.f994f284d3a5c0008  0x0.fa11dc35bc7820002  0x0.fa8f046b4fb7f8007  0x0.fb0c6b449ab1cfff9  0x0.fb8a10e1088fb7ffa  0x0.fc07f5602d79afffc  0x0.fc8618e0e55e47ffb  0x0.fd047b83571b1fffa  0x0.fd831d66f4c018002  0x0.fe01fead3320bfff8  0x0.fe811f703491e8006  0x0.ff007fd5744490005  0x0.ff801ffa9b9280007  0x1.00000000000000000  0x1.0080200565d29ffff  0x1.0100802aa0e80fff0  0x1.01812090377240007  0x1.020201541aad7fff6  0x1.0283229c4c9820007  0x1.030484836910a000e  0x1.0386272b9c077fffe  0x1.04080ab526304fff0  0x1.048a2f412375ffff0  0x1.050c94ef7ad5e000a  0x1.058f3be0f1c2d0004  0x1.06122436442e2000e  0x1.06954e0fec63afff2  0x1.0718b98f41c92fff6  0x1.079c66d49bb2ffff1  0x1.082056011a9230009  0x1.08a487359ebd50002  0x1.0928fa93490d4fff3  0x1.09adb03b3e5b3000d  0x1.0a32a84e9e5760004  0x1.0ab7e2eea5340ffff  0x1.0b3d603ca784f0009  0x1.0bc3205a042060000  0x1.0c4923682a086fffe  0x1.0ccf698898f3a000d  0x1.0d55f2dce5d1dfffb  0x1.0ddcbf86b09a5fff6  0x1.0e63cfa7abc97fffd  0x1.0eeb23619c146fffb  0x1.0f72bad65714bffff  0x1.0ffa9627c38d30004  0x1.1082b577d0eef0003  0x1.110b18e893a90000a  0x1.1193c09c267610006  0x1.121cacb4959befff6  0x1.12a5dd543cf36ffff  0x1.132f529d59552000b  0x1.13b90cb250d08fff5  0x1.14430bb58da3dfff9  0x1.14cd4fc984c4a000e  0x1.1557d910df9c7000e  0x1.15e2a7ae292d30002  0x1.166dbbc422d8c0004  0x1.16f9157586772ffff  0x1.1784b4e533cacfff0  0x1.18109a360fc23fff2  0x1.189cc58b155a70008  0x1.1929370751ea50002  0x1.19b5eecdd79cefff0  0x1.1a42ed01dbdba000e  0x1.1ad031c69a2eafff0  0x1.1b5dbd3f66e120003  0x1.1beb8f8fa8150000b  0x1.1c79a8dac6ad0fff4  0x1.1d0809445a97ffffc  0x1.1d96b0effc9db000e  0x1.1e25a001332190000  0x1.1eb4d69bdb2a9fff1  0x1.1f4454e3bfae00006  0x1.1fd41afcbb48bfff8  0x1.2064290abc98c0001  0x1.20f47f31c9aa7000f  0x1.21851d95f776dfff0  0x1.2216045b6784efffa  0x1.22a733a6692ae0004  0x1.2338ab9b3221a0004  0x1.23ca6c5e27aadfff7  0x1.245c7613b7f6c0004  0x1.24eec8e06b035000c  0x1.258164e8cea85fff8  0x1.26144a5180d380009  0x1.26a7793f5de2efffa  0x1.273af1d712179000d  0x1.27ceb43d81d42fff1  0x1.2862c097a3d29000c  0x1.28f7170a74cf4fff1  0x1.298bb7bb0faed0004  0x1.2a20a2ce920dffff4  0x1.2ab5d86a4631ffff6  0x1.2b4b58b36d5220009  0x1.2be123cf786790002  0x1.2c7739e3c0aac000d  0x1.2d0d9b15deb58fff6  0x1.2da4478b627040002  0x1.2e3b3f69fb794fffc  0x1.2ed282d76421d0004  0x1.2f6a11f96c685fff3  0x1.3001ecf60082ffffa  0x1.309a13f30f28a0004  0x1.31328716a758cfff7  0x1.31cb4686e1e85fffb  0x1.32645269dfd04000a  0x1.32fdaae604c39000f  0x1.339750219980dfff3  0x1.3431424300e480007  0x1.34cb8170b3fee000e  0x1.35660dd14dbd4fffc  0x1.3600e78b6bdfc0005  0x1.369c0ec5c38ebfff2  0x1.373783a718d29000f  0x1.37d3465662f480007  0x1.386f56fa770fe0008  0x1.390bb5ba5fc540004  0x1.39a862bd3c7a8fff3  0x1.3a455e2a37bcafffd  0x1.3ae2a8287dfbefff6  0x1.3b8040df76f39fffa  0x1.3c1e287682e48fff1  0x1.3cbc5f151b86bfff8  0x1.3d5ae4e2cc0a8000f  0x1.3df9ba07373bf0006  0x1.3e98deaa0d8cafffe  0x1.3f3852f32973efff0  0x1.3fd816ffc72b90001  0x1.40782b17863250005  0x1.41188f42caf400000  0x1.41b943b42945bfffd  0x1.425a4893e5f10000a  0x1.42fb9e0a2df4c0009  0x1.439d443f608c4fff9  0x1.443f3b5bebf850008  0x1.44e183883e561fff7  0x1.45841cecf7a7a0001  0x1.462707b2c43020009  0x1.46ca44023aa410007  0x1.476dd2045d46ffff0  0x1.4811b1e1f1f19000b  0x1.48b5e3c3edd74fff4  0x1.495a67d3613c8fff7  0x1.49ff3e396e19d000b  0x1.4aa4671f5b401fff1  0x1.4b49e2ae56d19000d  0x1.4befb10fd84a3fff4  0x1.4c95d26d41d84fff8  0x1.4d3c46f01d9f0fff3  0x1.4de30ec21097d0003  0x1.4e8a2a0ccce3d0002  0x1.4f3198fa10346fff5  0x1.4fd95bb3be8cffffd  0x1.50817263bf0e5fffb  0x1.5129dd3418575000e  0x1.51d29c4f01c54ffff  0x1.527bafde83a310009  0x1.5325180cfb8b3fffd  0x1.53ced504b2bd0fff4  0x1.5478e6f02775e0001  0x1.55234df9d8a59fff8  0x1.55ce0a4c5a6a9fff6  0x1.56791c1263abefff7  0x1.57248376aef21fffa  0x1.57d040a420c0bfff3  0x1.587c53c5a630f0002  0x1.5928bd063fd7bfff9  0x1.59d57c9110ad60006  0x1.5a8292913d68cfffc  0x1.5b2fff3212db00007  0x1.5bddc29edcc06fff3  0x1.5c8bdd032ed16000f  0x1.5d3a4e8a5bf61fff4  0x1.5de9176042f1effff  0x1.5e9837b062f4e0005  0x1.5f47afa69436cfff1  0x1.5ff77f6eb3f8cfffd  0x1.60a7a734a9742fff9  0x1.6158272490016000c  0x1.6208ff6a8978a000f  0x1.62ba3032c0a280004  0x1.636bb9a994784000f  0x1.641d9bfb29a7bfff6  0x1.64cfd7545928b0002  0x1.65826be167badfff8  0x1.663559cf20826000c  0x1.66e8a14a29486fffc  0x1.679c427f5a4b6000b  0x1.68503d9ba0add000f  0x1.690492cbf6303fff9  0x1.69b9423d7b548fff6  All floating-point numbers can be put in one of these categories.   Return nonzero value if arguments are unordered.   Return nonzero value if X is less than Y.   Return nonzero value if X is greater than Y.   This is the IEEE 754 double-precision format.   Together these comprise the mantissa.   ROCKBOX_LITTLE_ENDIAN  Together these comprise the mantissa.   ROCKBOX_LITTLE_ENDIAN  This format makes it easier to see if a NaN is a signalling NaN.   Together these comprise the mantissa.   ROCKBOX_LITTLE_ENDIAN  Together these comprise the mantissa.   ROCKBOX_LITTLE_ENDIAN  Check for usual case.   1/ln(2).   ln(2)  Calculate n.   Calculate t/512.   Compute tval = t.   Compute ex2 = 2^n e^(t/512+delta[t]).   Approximate e^(dx+delta) - 1, using a second-degree polynomial,
	 with maximum error in [-2^-10-2^-28,2^-10+2^-28]
	 less than 5e-11.   Return result.   Exceptional cases:   e^-inf == 0, with no error.   Underflow  Return x, if x is a NaN or Inf; or overflow, otherwise.   Division with rest, original.  Addition from glibc-2.8:  Placeholder function.  Originally defined in s_midi.c  Placeholder function,
   as we do sleep in the core thread
   and not in the scheduler function.  Originally defined in s_inter.c  Get running time in milliseconds.  Originally defined in s_inter.c  Place holder, as we do no IPC.  Originally defined in s_inter.c  Call to quit.  Originally defined in s_inter.c  Close audio subsystem.  Will be done by the main program: sys_close_audio();  Stop main loop.  Open file. Originally in s_main.c  Workaround: If the file resides in the root directory,
                   add a trailing slash to prevent directory part
                   of the filename from being removed -- W.B.  Get current working directory.  Initialize buffer.  Search for the last slash.  Check whether length of directory path is correct.
       If not, abort.  Copy current working directory to buffer.  Execute instructions supplied on command-line.
   Basically a placeholder, because the only
   command line argument we get is the name of the .pd file.  Originally defined in s_main.c  Get current working directory.  open patches specifies with "-open" args  Fake GUI start. Originally in s_inter.c  Return default DAC block size.  Originally defined in s_main.c  Find library directory and set it.  Make current working directory the system library directory. **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2009 Wincent Balin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** This implementation of strncat is taken from lua plug-in.  gcc is broken and has a non-SUSv2 compliant internal prototype.
 * This causes it to warn about a type mismatch here.  Ignore it.  Implementation of floor, original.  If value is negative, decrement value to match function's definition.  Truncate fractional part (convert to integer)
       and afterwards convert back to double.  Implementation of strtod() and atof(),
   taken from SanOS (http://www.jbox.dk/sanos/).  Reset Rockbox errno -- W.B.  Skip leading whitespace Handle optional sign Fall through to increment position Process string of digits Process decimal part Correct for sign Process an exponent string Handle optional sign Fall through to increment pos Process string of digits Scale the result Implementation of ftoa(), original.  Zero out string.  Handle negative numbers.  Find and convert integer part.  Append integral part to output string.  Check whether further content is possible.  Append decimal point.  Calculate first rest.  If there is no fractional part, return here.  Convert the first rest to string.  Append first rest to output string.  Check whether output string still has enough space.  Calculate second rest.  If no second rest, check whether
       the output string has unwanted zero trail,
       remove it and end processing here.  Convert second rest.  Append second rest to the output string.  Cut trailing zeroes.  Implementation of atol(), adapted from
   the atoi() implementation in Rockbox.  Implementation of sin() and cos(),
   adapted from http://lab.polygonal.de/2007/07/18/fast-and-accurate-sinecosine-approximation/
 Trim input value to -PI..PI interval.  Compute cosine: sin(x + PI/2) = cos(x)  Emulation of fscanf(fd, "%f", (float*) xxx);
   Basically a reimplementation of rb_strtod() above.  Read line from file.  Terminate string.  Convert buffer to float.  If there was an error, no float was read.  Emulation of fprintf(fd, "%f\n", (float*) xxx);  Convert float to string.  Add next line character.  Write string into file.  Natural logarithm.
   Taken from glibc-2.8  0x3f317180  0x3717f7d1  0x4c000000  3F2AAAAB  3ECCCCCD  3E924925  3E638E29  3E3A3325  3E1CD04F  3E178897  A union which permits us to convert between a float and a 32 bit
   int.   Get a 32 bit int from a float.   Set a float from a 32 bit int.   x < 2**-126   log(+-0)=-inf  log(-#) = NaN  subnormal number, scale up x  normalize x or x/2  |f| < 2**-20  Logarithm for 10th base,
   taken from glibc-2.8  0x3ede5bd9  0x3e9a2080  0x355427db  x < 2**-126   log(+-0)=-inf  log(-#) = NaN  subnormal number, scale up x  Power function, taken from glibc-2.8 and dietlibc-0.32  Special cases 0^x  Special case x^n where n is integer  Normal case  Square root function, original.  take care of Inf and NaN  sqrt(NaN)=NaN, sqrt(+inf)=+inf
					   sqrt(-inf)=sNaN  take care of zero  sqrt(+-0) = +-0  sqrt(-ve) = sNaN  normalize x  subnormal x  unbias exponent  odd m, double x to make it even  m = [m/2]  generate sqrt(x) bit by bit  q = sqrt(x)  r = moving bit from right to left  use floating add to find out rounding direction  trigger inexact flag  Absolute value, simple calculus  Arc tangent,
   taken from glibc-2.8.  atan(0.5)hi 0x3eed6338  atan(1.0)hi 0x3f490fda  atan(1.5)hi 0x3f7b985e  atan(inf)hi 0x3fc90fda  atan(0.5)lo 0x31ac3769  atan(1.0)lo 0x33222168  atan(1.5)lo 0x33140fb4  atan(inf)lo 0x33a22168  0x3eaaaaaa  0xbe4ccccd  0x3e124925  0xbde38e38  0x3dba2e6e  0xbd9d8795  0x3d886b35  0xbd6ef16b  0x3d4bda59  0xbd15a221  0x3c8569d7  if |x| >= 2^34  NaN  |x| < 0.4375  |x| < 2^-29  raise inexact  |x| < 1.1875  7/16 <=|x|<11/16  11/16<=|x|< 19/16  |x| < 2.4375  2.4375 <= |x| < 2^66  end of argument reduction  break sum from i=0 to 10 aT[i]z**(i+1) into odd and even poly  Arc tangent from two variables, original.  0x3f490fdb  0x3fc90fdb  0x40490fdb  0xb3bbbd2e  x or y is NaN  x=1.0  2*sign(x)+sign(y)  when y = 0  atan(+-0,+anything)=+-0  atan(+0,-anything) = pi  atan(-0,-anything) =-pi  when x = 0  when x is INF  atan(+INF,+INF)  atan(-INF,+INF) atan(+INF,-INF)atan(-INF,-INF) atan(+...,+INF)  atan(-...,+INF)  atan(+...,-INF)  atan(-...,-INF)  when y is INF  compute y/x  |y/x| >  2**60  |y|/x < -2**60  safe to do y/x  atan(+,+)  atan(-,+)  atan(+,-)  case 3  atan(-,-)  Sine hyperbolic, taken from dietlibc-0.32  Tangent, simple calculus solution.  Exponential function,
   taken from glibc-2.8
   As it uses double values and udefines some symbols,
   it was moved to the end of the source code  __attribute__((mode(DF)))  0x0.b52d4e46605c27ffd  0x0.b587fb96f75097ffb  0x0.b5e2d649899167ffd  0x0.b63dde74d36bdfffe  0x0.b699142f945f87ffc  0x0.b6f477909c4ea0001  0x0.b75008aec758f8004  0x0.b7abc7a0eea7e0002  0x0.b807b47e1586c7ff8  0x0.b863cf5d10e380003  0x0.b8c01855195c37ffb  0x0.b91c8f7d213740004  0x0.b97934ec5002d0007  0x0.b9d608b9c92ea7ffc  0x0.ba330afcc29e98003  0x0.ba903bcc8618b7ffc  0x0.baed9b40591ba0000  0x0.bb4b296f931e30002  0x0.bba8e671a05617ff9  0x0.bc06d25dd49568001  0x0.bc64ed4bce8f6fff9  0x0.bcc33752f915d7ff9  0x0.bd21b08af98e78005  0x0.bd80590b65e9a8000  0x0.bddf30ebec4a10000  0x0.be3e38443c84e0007  0x0.be9d6f2c1d32a0002  0x0.befcd5bb59baf8004  0x0.bf5c6c09ca84c0003  0x0.bfbc322f5b18b7ff8  0x0.c01c2843f776fffff  0x0.c07c4e5fa18b88002  0x0.c0dca49a5fb18fffd  0x0.c13d2b0c444db0005  0x0.c19de1cd798578006  0x0.c1fec8f623723fffd  0x0.c25fe09e8a0f47ff8  0x0.c2c128dedc88f8000  0x0.c322a1cf7d6e7fffa  0x0.c3844b88cb9347ffc  0x0.c3e626232bd8f7ffc  0x0.c44831b719bf18002  0x0.c4aa6e5d12d078001  0x0.c50cdc2da64a37ffb  0x0.c56f7b41744490001  0x0.c5d24bb1259e70004  0x0.c6354d95640dd0007  0x0.c6988106fec447fff  0x0.c6fbe61eb1bd0ffff  0x0.c75f7cf560942fffc  0x0.c7c345a3f1983fffe  0x0.c8274043594cb0002  0x0.c88b6cec94b3b7ff9  0x0.c8efcbb89cba27ffe  0x0.c9545cc0a88c70003  0x0.c9b9201dc643bfffa  0x0.ca1e15e92a5410007  0x0.ca833e3c1ae510005  0x0.cae8992fd84667ffd  0x0.cb4e26ddbc207fff8  0x0.cbb3e75f301b60003  0x0.cc19dacd978cd8002  0x0.cc8001427e55d7ffb  0x0.cce65ade24d360006  0x0.cd4ce7a5de839fffb  0x0.cdb3a7c79a678fffd  0x0.ce1a9b563965ffffc  0x0.ce81c26b838db8000  0x0.cee91d213f8428002  0x0.cf50ab9144d92fff9  0x0.cfb86dd5758c2ffff  0x0.d0206407c20e20005  0x0.d0888e4223facfff9  0x0.d0f0ec9eb3f7c8002  0x0.d1597f377d6768002  0x0.d1c24626a46eafff8  0x0.d22b41865ff1e7ff9  0x0.d2947170f32ec7ff9  0x0.d2fdd60097795fff8  0x0.d3676f4fb796d0001  0x0.d3d13d78b5f68fffb  0x0.d43b40960546d8001  0x0.d4a578c222a058000  0x0.d50fe617a3ba78005  0x0.d57a88b1218e90002  0x0.d5e560a94048f8006  0x0.d6506e1aac8078003  0x0.d6bbb1204074e0001  0x0.d72729d4c28518004  0x0.d792d8530e12b0001  0x0.d7febcb61273e7fff  0x0.d86ad718c308dfff9  0x0.d8d727962c69d7fff  0x0.d943ae49621ce7ffb  0x0.d9b06b4d832ef8005  0x0.da1d5ebdc22220005  0x0.da8a88b555baa0006  0x0.daf7e94f965f98004  0x0.db6580a7c98f7fff8  0x0.dbd34ed9617befff8  0x0.dc4153ffc8b65fff9  0x0.dcaf90368bfca8004  0x0.dd1e0399328d87ffe  0x0.dd8cae435d303fff9  0x0.ddfb9050b1cee8006  0x0.de6aa9dced8448001  0x0.ded9fb03db7320006  0x0.df4983e1380657ff8  0x0.dfb94490ffff77ffd  0x0.e0293d2f1cb01fff9  0x0.e0996dd786fff0007  0x0.e109d6a64f5d57ffc  0x0.e17a77b78e72a7ffe  0x0.e1eb5127722cc7ff8  0x0.e25c63121fb0c8006  0x0.e2cdad93ec5340003  0x0.e33f30c925fb97ffb  0x0.e3b0ecce2d05ffff9  0x0.e422e1bf727718006  0x0.e4950fb9713fc7ffe  0x0.e50776d8b0e60fff8  0x0.e57a1739c8fadfffc  0x0.e5ecf0f97c5798007  0x0.e660043464e378005  0x0.e6d3510747e150006  0x0.e746d78f06cd97ffd  0x0.e7ba97e879c91fffc  0x0.e82e92309390b0007  0x0.e8a2c6845544afffa  0x0.e9173500c8abc7ff8  0x0.e98bddc30f98b0002  0x0.ea00c0e84bc4c7fff  0x0.ea75de8db8094fffe  0x0.eaeb36d09d3137ffe  0x0.eb60c9ce4ed3dffff  0x0.ebd697a43995b0007  0x0.ec4ca06fc7768fffa  0x0.ecc2e44e865b6fffb  0x0.ed39635df34e70006  0x0.edb01dbbc2f5b7ffa  0x0.ee2713859aab57ffa  0x0.ee9e44d9342870004  0x0.ef15b1d4635438005  0x0.ef8d5a94f60f50007  0x0.f0053f38f345cffff  0x0.f07d5fde3a2d98001  0x0.f0f5bca2d481a8004  0x0.f16e55a4e497d7ffe  0x0.f1e72b028a2827ffb  0x0.f2603cd9fb5430001  0x0.f2d98b497d2a87ff9  0x0.f353166f63e3dffff  0x0.f3ccde6a11ae37ffe  0x0.f446e357f66120000  0x0.f4c12557964f0fff9  0x0.f53ba48781046fffb  0x0.f5b66106555d07ffa  0x0.f6315af2c2027fffc  0x0.f6ac926b8aeb80004  0x0.f728078f7c5008002  0x0.f7a3ba7d66a908001  0x0.f81fab543e1897ffb  0x0.f89bda33122c78007  0x0.f9184738d4cf97ff8  0x0.f994f284d3a5c0008  0x0.fa11dc35bc7820002  0x0.fa8f046b4fb7f8007  0x0.fb0c6b449ab1cfff9  0x0.fb8a10e1088fb7ffa  0x0.fc07f5602d79afffc  0x0.fc8618e0e55e47ffb  0x0.fd047b83571b1fffa  0x0.fd831d66f4c018002  0x0.fe01fead3320bfff8  0x0.fe811f703491e8006  0x0.ff007fd5744490005  0x0.ff801ffa9b9280007  0x1.00000000000000000  0x1.0080200565d29ffff  0x1.0100802aa0e80fff0  0x1.01812090377240007  0x1.020201541aad7fff6  0x1.0283229c4c9820007  0x1.030484836910a000e  0x1.0386272b9c077fffe  0x1.04080ab526304fff0  0x1.048a2f412375ffff0  0x1.050c94ef7ad5e000a  0x1.058f3be0f1c2d0004  0x1.06122436442e2000e  0x1.06954e0fec63afff2  0x1.0718b98f41c92fff6  0x1.079c66d49bb2ffff1  0x1.082056011a9230009  0x1.08a487359ebd50002  0x1.0928fa93490d4fff3  0x1.09adb03b3e5b3000d  0x1.0a32a84e9e5760004  0x1.0ab7e2eea5340ffff  0x1.0b3d603ca784f0009  0x1.0bc3205a042060000  0x1.0c4923682a086fffe  0x1.0ccf698898f3a000d  0x1.0d55f2dce5d1dfffb  0x1.0ddcbf86b09a5fff6  0x1.0e63cfa7abc97fffd  0x1.0eeb23619c146fffb  0x1.0f72bad65714bffff  0x1.0ffa9627c38d30004  0x1.1082b577d0eef0003  0x1.110b18e893a90000a  0x1.1193c09c267610006  0x1.121cacb4959befff6  0x1.12a5dd543cf36ffff  0x1.132f529d59552000b  0x1.13b90cb250d08fff5  0x1.14430bb58da3dfff9  0x1.14cd4fc984c4a000e  0x1.1557d910df9c7000e  0x1.15e2a7ae292d30002  0x1.166dbbc422d8c0004  0x1.16f9157586772ffff  0x1.1784b4e533cacfff0  0x1.18109a360fc23fff2  0x1.189cc58b155a70008  0x1.1929370751ea50002  0x1.19b5eecdd79cefff0  0x1.1a42ed01dbdba000e  0x1.1ad031c69a2eafff0  0x1.1b5dbd3f66e120003  0x1.1beb8f8fa8150000b  0x1.1c79a8dac6ad0fff4  0x1.1d0809445a97ffffc  0x1.1d96b0effc9db000e  0x1.1e25a001332190000  0x1.1eb4d69bdb2a9fff1  0x1.1f4454e3bfae00006  0x1.1fd41afcbb48bfff8  0x1.2064290abc98c0001  0x1.20f47f31c9aa7000f  0x1.21851d95f776dfff0  0x1.2216045b6784efffa  0x1.22a733a6692ae0004  0x1.2338ab9b3221a0004  0x1.23ca6c5e27aadfff7  0x1.245c7613b7f6c0004  0x1.24eec8e06b035000c  0x1.258164e8cea85fff8  0x1.26144a5180d380009  0x1.26a7793f5de2efffa  0x1.273af1d712179000d  0x1.27ceb43d81d42fff1  0x1.2862c097a3d29000c  0x1.28f7170a74cf4fff1  0x1.298bb7bb0faed0004  0x1.2a20a2ce920dffff4  0x1.2ab5d86a4631ffff6  0x1.2b4b58b36d5220009  0x1.2be123cf786790002  0x1.2c7739e3c0aac000d  0x1.2d0d9b15deb58fff6  0x1.2da4478b627040002  0x1.2e3b3f69fb794fffc  0x1.2ed282d76421d0004  0x1.2f6a11f96c685fff3  0x1.3001ecf60082ffffa  0x1.309a13f30f28a0004  0x1.31328716a758cfff7  0x1.31cb4686e1e85fffb  0x1.32645269dfd04000a  0x1.32fdaae604c39000f  0x1.339750219980dfff3  0x1.3431424300e480007  0x1.34cb8170b3fee000e  0x1.35660dd14dbd4fffc  0x1.3600e78b6bdfc0005  0x1.369c0ec5c38ebfff2  0x1.373783a718d29000f  0x1.37d3465662f480007  0x1.386f56fa770fe0008  0x1.390bb5ba5fc540004  0x1.39a862bd3c7a8fff3  0x1.3a455e2a37bcafffd  0x1.3ae2a8287dfbefff6  0x1.3b8040df76f39fffa  0x1.3c1e287682e48fff1  0x1.3cbc5f151b86bfff8  0x1.3d5ae4e2cc0a8000f  0x1.3df9ba07373bf0006  0x1.3e98deaa0d8cafffe  0x1.3f3852f32973efff0  0x1.3fd816ffc72b90001  0x1.40782b17863250005  0x1.41188f42caf400000  0x1.41b943b42945bfffd  0x1.425a4893e5f10000a  0x1.42fb9e0a2df4c0009  0x1.439d443f608c4fff9  0x1.443f3b5bebf850008  0x1.44e183883e561fff7  0x1.45841cecf7a7a0001  0x1.462707b2c43020009  0x1.46ca44023aa410007  0x1.476dd2045d46ffff0  0x1.4811b1e1f1f19000b  0x1.48b5e3c3edd74fff4  0x1.495a67d3613c8fff7  0x1.49ff3e396e19d000b  0x1.4aa4671f5b401fff1  0x1.4b49e2ae56d19000d  0x1.4befb10fd84a3fff4  0x1.4c95d26d41d84fff8  0x1.4d3c46f01d9f0fff3  0x1.4de30ec21097d0003  0x1.4e8a2a0ccce3d0002  0x1.4f3198fa10346fff5  0x1.4fd95bb3be8cffffd  0x1.50817263bf0e5fffb  0x1.5129dd3418575000e  0x1.51d29c4f01c54ffff  0x1.527bafde83a310009  0x1.5325180cfb8b3fffd  0x1.53ced504b2bd0fff4  0x1.5478e6f02775e0001  0x1.55234df9d8a59fff8  0x1.55ce0a4c5a6a9fff6  0x1.56791c1263abefff7  0x1.57248376aef21fffa  0x1.57d040a420c0bfff3  0x1.587c53c5a630f0002  0x1.5928bd063fd7bfff9  0x1.59d57c9110ad60006  0x1.5a8292913d68cfffc  0x1.5b2fff3212db00007  0x1.5bddc29edcc06fff3  0x1.5c8bdd032ed16000f  0x1.5d3a4e8a5bf61fff4  0x1.5de9176042f1effff  0x1.5e9837b062f4e0005  0x1.5f47afa69436cfff1  0x1.5ff77f6eb3f8cfffd  0x1.60a7a734a9742fff9  0x1.6158272490016000c  0x1.6208ff6a8978a000f  0x1.62ba3032c0a280004  0x1.636bb9a994784000f  0x1.641d9bfb29a7bfff6  0x1.64cfd7545928b0002  0x1.65826be167badfff8  0x1.663559cf20826000c  0x1.66e8a14a29486fffc  0x1.679c427f5a4b6000b  0x1.68503d9ba0add000f  0x1.690492cbf6303fff9  0x1.69b9423d7b548fff6  All floating-point numbers can be put in one of these categories.   Return nonzero value if arguments are unordered.   Return nonzero value if X is less than Y.   Return nonzero value if X is greater than Y.   This is the IEEE 754 double-precision format.   Together these comprise the mantissa.   ROCKBOX_LITTLE_ENDIAN  Together these comprise the mantissa.   ROCKBOX_LITTLE_ENDIAN  This format makes it easier to see if a NaN is a signalling NaN.   Together these comprise the mantissa.   ROCKBOX_LITTLE_ENDIAN  Together these comprise the mantissa.   ROCKBOX_LITTLE_ENDIAN  Check for usual case.   1/ln(2).   ln(2)  Calculate n.   Calculate t/512.   Compute tval = t.   Compute ex2 = 2^n e^(t/512+delta[t]).   Approximate e^(dx+delta) - 1, using a second-degree polynomial,
	 with maximum error in [-2^-10-2^-28,2^-10+2^-28]
	 less than 5e-11.   Return result.   Exceptional cases:   e^-inf == 0, with no error.   Underflow  Return x, if x is a NaN or Inf; or overflow, otherwise.   Division with rest, original.  Addition from glibc-2.8:  Placeholder function.  Originally defined in s_midi.c  Placeholder function,
   as we do sleep in the core thread
   and not in the scheduler function.  Originally defined in s_inter.c  Get running time in milliseconds.  Originally defined in s_inter.c  Place holder, as we do no IPC.  Originally defined in s_inter.c  Call to quit.  Originally defined in s_inter.c  Close audio subsystem.  Will be done by the main program: sys_close_audio();  Stop main loop.  Open file. Originally in s_main.c  Workaround: If the file resides in the root directory,
                   add a trailing slash to prevent directory part
                   of the filename from being removed -- W.B.  Get current working directory.  Initialize buffer.  Search for the last slash.  Check whether length of directory path is correct.
       If not, abort.  Copy current working directory to buffer.  Execute instructions supplied on command-line.
   Basically a placeholder, because the only
   command line argument we get is the name of the .pd file.  Originally defined in s_main.c  Get current working directory.  open patches specifies with "-open" args  Fake GUI start. Originally in s_inter.c  Return default DAC block size.  Originally defined in s_main.c  Find library directory and set it.  Make current working directory the system library directory. **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2009 Wincent Balin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** This implementation of strncat is taken from lua plug-in.  gcc is broken and has a non-SUSv2 compliant internal prototype.
 * This causes it to warn about a type mismatch here.  Ignore it.  Implementation of floor, original.  If value is negative, decrement value to match function's definition.  Truncate fractional part (convert to integer)
       and afterwards convert back to double.  Implementation of strtod() and atof(),
   taken from SanOS (http://www.jbox.dk/sanos/).  Reset Rockbox errno -- W.B.  Skip leading whitespace Handle optional sign Fall through to increment position Process string of digits Process decimal part Correct for sign Process an exponent string Handle optional sign Fall through to increment pos Process string of digits Scale the result Implementation of ftoa(), original.  Zero out string.  Handle negative numbers.  Find and convert integer part.  Append integral part to output string.  Check whether further content is possible.  Append decimal point.  Calculate first rest.  If there is no fractional part, return here.  Convert the first rest to string.  Append first rest to output string.  Check whether output string still has enough space.  Calculate second rest.  If no second rest, check whether
       the output string has unwanted zero trail,
       remove it and end processing here.  Convert second rest.  Append second rest to the output string.  Cut trailing zeroes.  Implementation of atol(), adapted from
   the atoi() implementation in Rockbox.  Implementation of sin() and cos(),
   adapted from http://lab.polygonal.de/2007/07/18/fast-and-accurate-sinecosine-approximation/
 Trim input value to -PI..PI interval.  Compute cosine: sin(x + PI/2) = cos(x)  Emulation of fscanf(fd, "%f", (float*) xxx);
   Basically a reimplementation of rb_strtod() above.  Read line from file.  Terminate string.  Convert buffer to float.  If there was an error, no float was read.  Emulation of fprintf(fd, "%f\n", (float*) xxx);  Convert float to string.  Add next line character.  Write string into file.  Natural logarithm.
   Taken from glibc-2.8  0x3f317180  0x3717f7d1  0x4c000000  3F2AAAAB  3ECCCCCD  3E924925  3E638E29  3E3A3325  3E1CD04F  3E178897  A union which permits us to convert between a float and a 32 bit
   int.   Get a 32 bit int from a float.   Set a float from a 32 bit int.   x < 2**-126   log(+-0)=-inf  log(-#) = NaN  subnormal number, scale up x  normalize x or x/2  |f| < 2**-20  Logarithm for 10th base,
   taken from glibc-2.8  0x3ede5bd9  0x3e9a2080  0x355427db  x < 2**-126   log(+-0)=-inf  log(-#) = NaN  subnormal number, scale up x  Power function, taken from glibc-2.8 and dietlibc-0.32  Special cases 0^x  Special case x^n where n is integer  Normal case  Square root function, original.  take care of Inf and NaN  sqrt(NaN)=NaN, sqrt(+inf)=+inf
					   sqrt(-inf)=sNaN  take care of zero  sqrt(+-0) = +-0  sqrt(-ve) = sNaN  normalize x  subnormal x  unbias exponent  odd m, double x to make it even  m = [m/2]  generate sqrt(x) bit by bit  q = sqrt(x)  r = moving bit from right to left  use floating add to find out rounding direction  trigger inexact flag  Absolute value, simple calculus  Arc tangent,
   taken from glibc-2.8.  atan(0.5)hi 0x3eed6338  atan(1.0)hi 0x3f490fda  atan(1.5)hi 0x3f7b985e  atan(inf)hi 0x3fc90fda  atan(0.5)lo 0x31ac3769  atan(1.0)lo 0x33222168  atan(1.5)lo 0x33140fb4  atan(inf)lo 0x33a22168  0x3eaaaaaa  0xbe4ccccd  0x3e124925  0xbde38e38  0x3dba2e6e  0xbd9d8795  0x3d886b35  0xbd6ef16b  0x3d4bda59  0xbd15a221  0x3c8569d7  if |x| >= 2^34  NaN  |x| < 0.4375  |x| < 2^-29  raise inexact  |x| < 1.1875  7/16 <=|x|<11/16  11/16<=|x|< 19/16  |x| < 2.4375  2.4375 <= |x| < 2^66  end of argument reduction  break sum from i=0 to 10 aT[i]z**(i+1) into odd and even poly  Arc tangent from two variables, original.  0x3f490fdb  0x3fc90fdb  0x40490fdb  0xb3bbbd2e  x or y is NaN  x=1.0  2*sign(x)+sign(y)  when y = 0  atan(+-0,+anything)=+-0  atan(+0,-anything) = pi  atan(-0,-anything) =-pi  when x = 0  when x is INF  atan(+INF,+INF)  atan(-INF,+INF) atan(+INF,-INF)atan(-INF,-INF) atan(+...,+INF)  atan(-...,+INF)  atan(+...,-INF)  atan(-...,-INF)  when y is INF  compute y/x  |y/x| >  2**60  |y|/x < -2**60  safe to do y/x  atan(+,+)  atan(-,+)  atan(+,-)  case 3  atan(-,-)  Sine hyperbolic, taken from dietlibc-0.32  Tangent, simple calculus solution.  Exponential function,
   taken from glibc-2.8
   As it uses double values and udefines some symbols,
   it was moved to the end of the source code  __attribute__((mode(DF)))  0x0.b52d4e46605c27ffd  0x0.b587fb96f75097ffb  0x0.b5e2d649899167ffd  0x0.b63dde74d36bdfffe  0x0.b699142f945f87ffc  0x0.b6f477909c4ea0001  0x0.b75008aec758f8004  0x0.b7abc7a0eea7e0002  0x0.b807b47e1586c7ff8  0x0.b863cf5d10e380003  0x0.b8c01855195c37ffb  0x0.b91c8f7d213740004  0x0.b97934ec5002d0007  0x0.b9d608b9c92ea7ffc  0x0.ba330afcc29e98003  0x0.ba903bcc8618b7ffc  0x0.baed9b40591ba0000  0x0.bb4b296f931e30002  0x0.bba8e671a05617ff9  0x0.bc06d25dd49568001  0x0.bc64ed4bce8f6fff9  0x0.bcc33752f915d7ff9  0x0.bd21b08af98e78005  0x0.bd80590b65e9a8000  0x0.bddf30ebec4a10000  0x0.be3e38443c84e0007  0x0.be9d6f2c1d32a0002  0x0.befcd5bb59baf8004  0x0.bf5c6c09ca84c0003  0x0.bfbc322f5b18b7ff8  0x0.c01c2843f776fffff  0x0.c07c4e5fa18b88002  0x0.c0dca49a5fb18fffd  0x0.c13d2b0c444db0005  0x0.c19de1cd798578006  0x0.c1fec8f623723fffd  0x0.c25fe09e8a0f47ff8  0x0.c2c128dedc88f8000  0x0.c322a1cf7d6e7fffa  0x0.c3844b88cb9347ffc  0x0.c3e626232bd8f7ffc  0x0.c44831b719bf18002  0x0.c4aa6e5d12d078001  0x0.c50cdc2da64a37ffb  0x0.c56f7b41744490001  0x0.c5d24bb1259e70004  0x0.c6354d95640dd0007  0x0.c6988106fec447fff  0x0.c6fbe61eb1bd0ffff  0x0.c75f7cf560942fffc  0x0.c7c345a3f1983fffe  0x0.c8274043594cb0002  0x0.c88b6cec94b3b7ff9  0x0.c8efcbb89cba27ffe  0x0.c9545cc0a88c70003  0x0.c9b9201dc643bfffa  0x0.ca1e15e92a5410007  0x0.ca833e3c1ae510005  0x0.cae8992fd84667ffd  0x0.cb4e26ddbc207fff8  0x0.cbb3e75f301b60003  0x0.cc19dacd978cd8002  0x0.cc8001427e55d7ffb  0x0.cce65ade24d360006  0x0.cd4ce7a5de839fffb  0x0.cdb3a7c79a678fffd  0x0.ce1a9b563965ffffc  0x0.ce81c26b838db8000  0x0.cee91d213f8428002  0x0.cf50ab9144d92fff9  0x0.cfb86dd5758c2ffff  0x0.d0206407c20e20005  0x0.d0888e4223facfff9  0x0.d0f0ec9eb3f7c8002  0x0.d1597f377d6768002  0x0.d1c24626a46eafff8  0x0.d22b41865ff1e7ff9  0x0.d2947170f32ec7ff9  0x0.d2fdd60097795fff8  0x0.d3676f4fb796d0001  0x0.d3d13d78b5f68fffb  0x0.d43b40960546d8001  0x0.d4a578c222a058000  0x0.d50fe617a3ba78005  0x0.d57a88b1218e90002  0x0.d5e560a94048f8006  0x0.d6506e1aac8078003  0x0.d6bbb1204074e0001  0x0.d72729d4c28518004  0x0.d792d8530e12b0001  0x0.d7febcb61273e7fff  0x0.d86ad718c308dfff9  0x0.d8d727962c69d7fff  0x0.d943ae49621ce7ffb  0x0.d9b06b4d832ef8005  0x0.da1d5ebdc22220005  0x0.da8a88b555baa0006  0x0.daf7e94f965f98004  0x0.db6580a7c98f7fff8  0x0.dbd34ed9617befff8  0x0.dc4153ffc8b65fff9  0x0.dcaf90368bfca8004  0x0.dd1e0399328d87ffe  0x0.dd8cae435d303fff9  0x0.ddfb9050b1cee8006  0x0.de6aa9dced8448001  0x0.ded9fb03db7320006  0x0.df4983e1380657ff8  0x0.dfb94490ffff77ffd  0x0.e0293d2f1cb01fff9  0x0.e0996dd786fff0007  0x0.e109d6a64f5d57ffc  0x0.e17a77b78e72a7ffe  0x0.e1eb5127722cc7ff8  0x0.e25c63121fb0c8006  0x0.e2cdad93ec5340003  0x0.e33f30c925fb97ffb  0x0.e3b0ecce2d05ffff9  0x0.e422e1bf727718006  0x0.e4950fb9713fc7ffe  0x0.e50776d8b0e60fff8  0x0.e57a1739c8fadfffc  0x0.e5ecf0f97c5798007  0x0.e660043464e378005  0x0.e6d3510747e150006  0x0.e746d78f06cd97ffd  0x0.e7ba97e879c91fffc  0x0.e82e92309390b0007  0x0.e8a2c6845544afffa  0x0.e9173500c8abc7ff8  0x0.e98bddc30f98b0002  0x0.ea00c0e84bc4c7fff  0x0.ea75de8db8094fffe  0x0.eaeb36d09d3137ffe  0x0.eb60c9ce4ed3dffff  0x0.ebd697a43995b0007  0x0.ec4ca06fc7768fffa  0x0.ecc2e44e865b6fffb  0x0.ed39635df34e70006  0x0.edb01dbbc2f5b7ffa  0x0.ee2713859aab57ffa  0x0.ee9e44d9342870004  0x0.ef15b1d4635438005  0x0.ef8d5a94f60f50007  0x0.f0053f38f345cffff  0x0.f07d5fde3a2d98001  0x0.f0f5bca2d481a8004  0x0.f16e55a4e497d7ffe  0x0.f1e72b028a2827ffb  0x0.f2603cd9fb5430001  0x0.f2d98b497d2a87ff9  0x0.f353166f63e3dffff  0x0.f3ccde6a11ae37ffe  0x0.f446e357f66120000  0x0.f4c12557964f0fff9  0x0.f53ba48781046fffb  0x0.f5b66106555d07ffa  0x0.f6315af2c2027fffc  0x0.f6ac926b8aeb80004  0x0.f728078f7c5008002  0x0.f7a3ba7d66a908001  0x0.f81fab543e1897ffb  0x0.f89bda33122c78007  0x0.f9184738d4cf97ff8  0x0.f994f284d3a5c0008  0x0.fa11dc35bc7820002  0x0.fa8f046b4fb7f8007  0x0.fb0c6b449ab1cfff9  0x0.fb8a10e1088fb7ffa  0x0.fc07f5602d79afffc  0x0.fc8618e0e55e47ffb  0x0.fd047b83571b1fffa  0x0.fd831d66f4c018002  0x0.fe01fead3320bfff8  0x0.fe811f703491e8006  0x0.ff007fd5744490005  0x0.ff801ffa9b9280007  0x1.00000000000000000  0x1.0080200565d29ffff  0x1.0100802aa0e80fff0  0x1.01812090377240007  0x1.020201541aad7fff6  0x1.0283229c4c9820007  0x1.030484836910a000e  0x1.0386272b9c077fffe  0x1.04080ab526304fff0  0x1.048a2f412375ffff0  0x1.050c94ef7ad5e000a  0x1.058f3be0f1c2d0004  0x1.06122436442e2000e  0x1.06954e0fec63afff2  0x1.0718b98f41c92fff6  0x1.079c66d49bb2ffff1  0x1.082056011a9230009  0x1.08a487359ebd50002  0x1.0928fa93490d4fff3  0x1.09adb03b3e5b3000d  0x1.0a32a84e9e5760004  0x1.0ab7e2eea5340ffff  0x1.0b3d603ca784f0009  0x1.0bc3205a042060000  0x1.0c4923682a086fffe  0x1.0ccf698898f3a000d  0x1.0d55f2dce5d1dfffb  0x1.0ddcbf86b09a5fff6  0x1.0e63cfa7abc97fffd  0x1.0eeb23619c146fffb  0x1.0f72bad65714bffff  0x1.0ffa9627c38d30004  0x1.1082b577d0eef0003  0x1.110b18e893a90000a  0x1.1193c09c267610006  0x1.121cacb4959befff6  0x1.12a5dd543cf36ffff  0x1.132f529d59552000b  0x1.13b90cb250d08fff5  0x1.14430bb58da3dfff9  0x1.14cd4fc984c4a000e  0x1.1557d910df9c7000e  0x1.15e2a7ae292d30002  0x1.166dbbc422d8c0004  0x1.16f9157586772ffff  0x1.1784b4e533cacfff0  0x1.18109a360fc23fff2  0x1.189cc58b155a70008  0x1.1929370751ea50002  0x1.19b5eecdd79cefff0  0x1.1a42ed01dbdba000e  0x1.1ad031c69a2eafff0  0x1.1b5dbd3f66e120003  0x1.1beb8f8fa8150000b  0x1.1c79a8dac6ad0fff4  0x1.1d0809445a97ffffc  0x1.1d96b0effc9db000e  0x1.1e25a001332190000  0x1.1eb4d69bdb2a9fff1  0x1.1f4454e3bfae00006  0x1.1fd41afcbb48bfff8  0x1.2064290abc98c0001  0x1.20f47f31c9aa7000f  0x1.21851d95f776dfff0  0x1.2216045b6784efffa  0x1.22a733a6692ae0004  0x1.2338ab9b3221a0004  0x1.23ca6c5e27aadfff7  0x1.245c7613b7f6c0004  0x1.24eec8e06b035000c  0x1.258164e8cea85fff8  0x1.26144a5180d380009  0x1.26a7793f5de2efffa  0x1.273af1d712179000d  0x1.27ceb43d81d42fff1  0x1.2862c097a3d29000c  0x1.28f7170a74cf4fff1  0x1.298bb7bb0faed0004  0x1.2a20a2ce920dffff4  0x1.2ab5d86a4631ffff6  0x1.2b4b58b36d5220009  0x1.2be123cf786790002  0x1.2c7739e3c0aac000d  0x1.2d0d9b15deb58fff6  0x1.2da4478b627040002  0x1.2e3b3f69fb794fffc  0x1.2ed282d76421d0004  0x1.2f6a11f96c685fff3  0x1.3001ecf60082ffffa  0x1.309a13f30f28a0004  0x1.31328716a758cfff7  0x1.31cb4686e1e85fffb  0x1.32645269dfd04000a  0x1.32fdaae604c39000f  0x1.339750219980dfff3  0x1.3431424300e480007  0x1.34cb8170b3fee000e  0x1.35660dd14dbd4fffc  0x1.3600e78b6bdfc0005  0x1.369c0ec5c38ebfff2  0x1.373783a718d29000f  0x1.37d3465662f480007  0x1.386f56fa770fe0008  0x1.390bb5ba5fc540004  0x1.39a862bd3c7a8fff3  0x1.3a455e2a37bcafffd  0x1.3ae2a8287dfbefff6  0x1.3b8040df76f39fffa  0x1.3c1e287682e48fff1  0x1.3cbc5f151b86bfff8  0x1.3d5ae4e2cc0a8000f  0x1.3df9ba07373bf0006  0x1.3e98deaa0d8cafffe  0x1.3f3852f32973efff0  0x1.3fd816ffc72b90001  0x1.40782b17863250005  0x1.41188f42caf400000  0x1.41b943b42945bfffd  0x1.425a4893e5f10000a  0x1.42fb9e0a2df4c0009  0x1.439d443f608c4fff9  0x1.443f3b5bebf850008  0x1.44e183883e561fff7  0x1.45841cecf7a7a0001  0x1.462707b2c43020009  0x1.46ca44023aa410007  0x1.476dd2045d46ffff0  0x1.4811b1e1f1f19000b  0x1.48b5e3c3edd74fff4  0x1.495a67d3613c8fff7  0x1.49ff3e396e19d000b  0x1.4aa4671f5b401fff1  0x1.4b49e2ae56d19000d  0x1.4befb10fd84a3fff4  0x1.4c95d26d41d84fff8  0x1.4d3c46f01d9f0fff3  0x1.4de30ec21097d0003  0x1.4e8a2a0ccce3d0002  0x1.4f3198fa10346fff5  0x1.4fd95bb3be8cffffd  0x1.50817263bf0e5fffb  0x1.5129dd3418575000e  0x1.51d29c4f01c54ffff  0x1.527bafde83a310009  0x1.5325180cfb8b3fffd  0x1.53ced504b2bd0fff4  0x1.5478e6f02775e0001  0x1.55234df9d8a59fff8  0x1.55ce0a4c5a6a9fff6  0x1.56791c1263abefff7  0x1.57248376aef21fffa  0x1.57d040a420c0bfff3  0x1.587c53c5a630f0002  0x1.5928bd063fd7bfff9  0x1.59d57c9110ad60006  0x1.5a8292913d68cfffc  0x1.5b2fff3212db00007  0x1.5bddc29edcc06fff3  0x1.5c8bdd032ed16000f  0x1.5d3a4e8a5bf61fff4  0x1.5de9176042f1effff  0x1.5e9837b062f4e0005  0x1.5f47afa69436cfff1  0x1.5ff77f6eb3f8cfffd  0x1.60a7a734a9742fff9  0x1.6158272490016000c  0x1.6208ff6a8978a000f  0x1.62ba3032c0a280004  0x1.636bb9a994784000f  0x1.641d9bfb29a7bfff6  0x1.64cfd7545928b0002  0x1.65826be167badfff8  0x1.663559cf20826000c  0x1.66e8a14a29486fffc  0x1.679c427f5a4b6000b  0x1.68503d9ba0add000f  0x1.690492cbf6303fff9  0x1.69b9423d7b548fff6  All floating-point numbers can be put in one of these categories.   Return nonzero value if arguments are unordered.   Return nonzero value if X is less than Y.   Return nonzero value if X is greater than Y.   This is the IEEE 754 double-precision format.   Together these comprise the mantissa.   ROCKBOX_LITTLE_ENDIAN  Together these comprise the mantissa.   ROCKBOX_LITTLE_ENDIAN  This format makes it easier to see if a NaN is a signalling NaN.   Together these comprise the mantissa.   ROCKBOX_LITTLE_ENDIAN  Together these comprise the mantissa.   ROCKBOX_LITTLE_ENDIAN  Check for usual case.   1/ln(2).   ln(2)  Calculate n.   Calculate t/512.   Compute tval = t.   Compute ex2 = 2^n e^(t/512+delta[t]).   Approximate e^(dx+delta) - 1, using a second-degree polynomial,
	 with maximum error in [-2^-10-2^-28,2^-10+2^-28]
	 less than 5e-11.   Return result.   Exceptional cases:   e^-inf == 0, with no error.   Underflow  Return x, if x is a NaN or Inf; or overflow, otherwise.   Division with rest, original.  Addition from glibc-2.8:  Placeholder function.  Originally defined in s_midi.c  Placeholder function,
   as we do sleep in the core thread
   and not in the scheduler function.  Originally defined in s_inter.c  Get running time in milliseconds.  Originally defined in s_inter.c  Place holder, as we do no IPC.  Originally defined in s_inter.c  Call to quit.  Originally defined in s_inter.c  Close audio subsystem.  Will be done by the main program: sys_close_audio();  Stop main loop.  Open file. Originally in s_main.c  Workaround: If the file resides in the root directory,
                   add a trailing slash to prevent directory part
                   of the filename from being removed -- W.B.  Get current working directory.  Initialize buffer.  Search for the last slash.  Check whether length of directory path is correct.
       If not, abort.  Copy current working directory to buffer.  Execute instructions supplied on command-line.
   Basically a placeholder, because the only
   command line argument we get is the name of the .pd file.  Originally defined in s_main.c  Get current working directory.  open patches specifies with "-open" args  Fake GUI start. Originally in s_inter.c  Return default DAC block size.  Originally defined in s_main.c  Find library directory and set it.  Make current working directory the system library directory. 