
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org
 General event handling code for SDL  Public data -- the event filter  Private data -- event queue  Private data -- event locking structure  Thread functions  Thread handle  The event thread id  Grab lock and spin until we're sure event thread stopped 
 * We'll increase the priority of GobbleEvents thread, so it will process
 *  events in time for sure! For this, we need the DosSetPriority() API
 *  from the os2.h include file.
  Increase thread priority, so it will process events in time for sure!  Get events from the video subsystem  Queue pending key-repeat events  Check for joystick state change  Give up the CPU for the rest of our timeslice  Check for event locking.
		   On the P of the lock mutex, if the lock is held, this thread
		   will wait until the lock is released before continuing.  The
		   safe flag will be set, meaning that the other thread can go
		   about it's business.  The safe flag is reset before the V,
		   so as soon as the mutex is free, other threads can see that
		   it's not safe to interfere with the event thread.
		  Reset everything to zero  Create the lock and set ourselves active  MacOS classic you can't multithread, so no lock needed  !SDL_THREADS_DISABLED  The event thread will handle timers too  Public functions  Halt the event thread, if running  Shutdown event handlers  Clean out EventQ  This function (and associated calls) may be called more than once  Clean out the event queue  No filter to start with, process most event types  It's not save to call SDL_EventState() yet  Initialize event handlers  We don't expect them to fail, but...  Create the lock and event thread  Add an event to the event queue -- called with the queue locked  Overflow, drop event  Note that it's possible to lose an event  Cut an event, and return the next valid spot, or the tail                            -- called with the queue locked  We cut the middle -- shift everything over  This can probably be optimized with SDL_memcpy() -- careful!  NOTREACHED  Lock the event queue, take a peep at it, and unlock it  Don't look after we've quit  Lock the event queue  If 'events' is NULL, just see if they exist  Run the system dependent event loops  Get events from the video subsystem  Queue pending key-repeat events  Check for joystick state change  Public functions  We can't return -1, just return 0 (no event) on error  Set filter and discard pending events  If SDL_ALLEVENTS was specified...  Just set the state for one event type  Set state and discard pending events  Querying state?  This is a generic event handler.
  Update internal event state 
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org
 General event handling code for SDL  Public data -- the event filter  Private data -- event queue  Private data -- event locking structure  Thread functions  Thread handle  The event thread id  Grab lock and spin until we're sure event thread stopped 
 * We'll increase the priority of GobbleEvents thread, so it will process
 *  events in time for sure! For this, we need the DosSetPriority() API
 *  from the os2.h include file.
  Increase thread priority, so it will process events in time for sure!  Get events from the video subsystem  Queue pending key-repeat events  Check for joystick state change  Give up the CPU for the rest of our timeslice  Check for event locking.
		   On the P of the lock mutex, if the lock is held, this thread
		   will wait until the lock is released before continuing.  The
		   safe flag will be set, meaning that the other thread can go
		   about it's business.  The safe flag is reset before the V,
		   so as soon as the mutex is free, other threads can see that
		   it's not safe to interfere with the event thread.
		  Reset everything to zero  Create the lock and set ourselves active  MacOS classic you can't multithread, so no lock needed  !SDL_THREADS_DISABLED  The event thread will handle timers too  Public functions  Halt the event thread, if running  Shutdown event handlers  Clean out EventQ  This function (and associated calls) may be called more than once  Clean out the event queue  No filter to start with, process most event types  It's not save to call SDL_EventState() yet  Initialize event handlers  We don't expect them to fail, but...  Create the lock and event thread  Add an event to the event queue -- called with the queue locked  Overflow, drop event  Note that it's possible to lose an event  Cut an event, and return the next valid spot, or the tail                            -- called with the queue locked  We cut the middle -- shift everything over  This can probably be optimized with SDL_memcpy() -- careful!  NOTREACHED  Lock the event queue, take a peep at it, and unlock it  Don't look after we've quit  Lock the event queue  If 'events' is NULL, just see if they exist  Run the system dependent event loops  Get events from the video subsystem  Queue pending key-repeat events  Check for joystick state change  Public functions  We can't return -1, just return 0 (no event) on error  Set filter and discard pending events  If SDL_ALLEVENTS was specified...  Just set the state for one event type  Set state and discard pending events  Querying state?  This is a generic event handler.
  Update internal event state 
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org
 General event handling code for SDL  Public data -- the event filter  Private data -- event queue  Private data -- event locking structure  Thread functions  Thread handle  The event thread id  Grab lock and spin until we're sure event thread stopped 
 * We'll increase the priority of GobbleEvents thread, so it will process
 *  events in time for sure! For this, we need the DosSetPriority() API
 *  from the os2.h include file.
  Increase thread priority, so it will process events in time for sure!  Get events from the video subsystem  Queue pending key-repeat events  Check for joystick state change  Give up the CPU for the rest of our timeslice  Check for event locking.
		   On the P of the lock mutex, if the lock is held, this thread
		   will wait until the lock is released before continuing.  The
		   safe flag will be set, meaning that the other thread can go
		   about it's business.  The safe flag is reset before the V,
		   so as soon as the mutex is free, other threads can see that
		   it's not safe to interfere with the event thread.
		  Reset everything to zero  Create the lock and set ourselves active  MacOS classic you can't multithread, so no lock needed  !SDL_THREADS_DISABLED  The event thread will handle timers too  Public functions  Halt the event thread, if running  Shutdown event handlers  Clean out EventQ  This function (and associated calls) may be called more than once  Clean out the event queue  No filter to start with, process most event types  It's not save to call SDL_EventState() yet  Initialize event handlers  We don't expect them to fail, but...  Create the lock and event thread  Add an event to the event queue -- called with the queue locked  Overflow, drop event  Note that it's possible to lose an event  Cut an event, and return the next valid spot, or the tail                            -- called with the queue locked  We cut the middle -- shift everything over  This can probably be optimized with SDL_memcpy() -- careful!  NOTREACHED  Lock the event queue, take a peep at it, and unlock it  Don't look after we've quit  Lock the event queue  If 'events' is NULL, just see if they exist  Run the system dependent event loops  Get events from the video subsystem  Queue pending key-repeat events  Check for joystick state change  Public functions  We can't return -1, just return 0 (no event) on error  Set filter and discard pending events  If SDL_ALLEVENTS was specified...  Just set the state for one event type  Set state and discard pending events  Querying state?  This is a generic event handler.
  Update internal event state 