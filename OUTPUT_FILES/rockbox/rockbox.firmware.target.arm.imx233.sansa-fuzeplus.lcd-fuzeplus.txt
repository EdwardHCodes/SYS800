**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2011 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** off_t  used to invert display  controls to flip display  WARNING
     * the B1P22 and B1P24 pins are used by the tuner i2c! Do NOT drive
     * them as lcd_dotclk and lcd_hsync or it will break the tuner! imx233_pinctrl_acquire_mask(1, 0x3ffff, "lcd data"); lcd_vsync  lcd_cs  lcd_enable  lcd_reset  lcd_rs  lcd_d16  lcd_d17  lcd_wr  lcd_d{0-15}  lcd_d{0-15}  lcd_d16  lcd_d17  lcd_rs  lcd_wr  lcd_cs  lcd_enable  lcd_vsync  lcd_rs  lcd_wr  lcd_cs  lcd_enable  lcd_rs  lcd_wr  lcd_cs  lcd_enable  lcd_{rs,wr,cs,enable}  lcd_d{0-17}  lcd_d{0-15} as GPIO  lcd_d16  lcd_d17  lcd_reset  lcd_rs  lcd_rs  lcd_wr  lcd_cs  lcd_enable  lcd_rs  lcd_wr  lcd_cs  lcd_d{0-17}  lcd_d{0-15} as lcd_d{0-15}  lcd_d16  lcd_d17  lcd_reset  lcd_rs  use GPIO pins when disable  the LCD seems to work at 24Mhz, so use the xtal clock with no divider  use XTAL  lcd_enable is mapped to the RD pin of the controller  lcd_cs  lcd_rs  lcd_enable  lcd_wr  lcd_d{0-17}  lcd_rs  lcd_cs  lcd_wr  lcd_d{0-17}  lcd_wr  lcd_d{0-17}  lcd_enable  lcd_rs  lcd_enable  lcd_enable  lcd_d{0-17}  lcd_enable  lcd_cs  get back to 18-bit word length  left X ?  right X ?  top Y ?  bottom Y ?  left X ?  top Y ?  reset device same for both kinds  same for both kinds  make sure the rectangle is bounded in the screen  Clip right  Clip left  nothing left to do  Clip bottom  Clip top  nothing left to do  two pixels per 32-bit word  there are two cases here:
     * - either width = LCD_WIDTH and we can directly memcopy a part of lcd_framebuffer to FRAME
     *   and send it
     * - either width != LCD_WIDTH and we have to build a contiguous copy of the rectangular area
     *   into FRAME before sending it (which is slower and doesn't use the hardware)
     * In all cases, FRAME just acts as a temporary buffer.
     * NOTE It's more interesting to do a copy to FRAME in all cases since in system mode
     * the clock runs at 24MHz which provides barely 10MB/s bandwidth compared to >100MB/s
     * for memcopy operations
      WARNING The LCDIF has a limitation on the vertical count ! In 16-bit packed mode
     * (which we used, ie 16-bit per pixel, 2 pixels per 32-bit words), the v_count
     * field must be a multiple of 2. Furthermore, it seems the lcd controller doesn't
     * really like when both w and h are even, probably because the writes to the GRAM
     * are done on several words and the controller requires dummy writes.
     * The workaround is to always make sure that we send a number of pixels which is
     * a multiple of 4 so that both the lcdif and the controller are happy. If any
     * of w or h is odd, we will send a copy of the first pixels as dummy writes. We will
     * send at most 3 bytes. We then send (w * h + 3) / 4 x 4 bytes.
      copy three pixel after the last one  WARNING we need to update w and h to reflect the pixel count BUT it
         * has no relation to w * h (it can even be 2 * prime). Hopefully, w <= 240 and
         * h <= 320 so w * h <= 76800 and (w * h + 3) / 4 <= 38400 which fits into
         * a 16-bit integer (horizontal count). **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2011 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** off_t  used to invert display  controls to flip display  WARNING
     * the B1P22 and B1P24 pins are used by the tuner i2c! Do NOT drive
     * them as lcd_dotclk and lcd_hsync or it will break the tuner! imx233_pinctrl_acquire_mask(1, 0x3ffff, "lcd data"); lcd_vsync  lcd_cs  lcd_enable  lcd_reset  lcd_rs  lcd_d16  lcd_d17  lcd_wr  lcd_d{0-15}  lcd_d{0-15}  lcd_d16  lcd_d17  lcd_rs  lcd_wr  lcd_cs  lcd_enable  lcd_vsync  lcd_rs  lcd_wr  lcd_cs  lcd_enable  lcd_rs  lcd_wr  lcd_cs  lcd_enable  lcd_{rs,wr,cs,enable}  lcd_d{0-17}  lcd_d{0-15} as GPIO  lcd_d16  lcd_d17  lcd_reset  lcd_rs  lcd_rs  lcd_wr  lcd_cs  lcd_enable  lcd_rs  lcd_wr  lcd_cs  lcd_d{0-17}  lcd_d{0-15} as lcd_d{0-15}  lcd_d16  lcd_d17  lcd_reset  lcd_rs  use GPIO pins when disable  the LCD seems to work at 24Mhz, so use the xtal clock with no divider  use XTAL  lcd_enable is mapped to the RD pin of the controller  lcd_cs  lcd_rs  lcd_enable  lcd_wr  lcd_d{0-17}  lcd_rs  lcd_cs  lcd_wr  lcd_d{0-17}  lcd_wr  lcd_d{0-17}  lcd_enable  lcd_rs  lcd_enable  lcd_enable  lcd_d{0-17}  lcd_enable  lcd_cs  get back to 18-bit word length  left X ?  right X ?  top Y ?  bottom Y ?  left X ?  top Y ?  reset device same for both kinds  same for both kinds  make sure the rectangle is bounded in the screen  Clip right  Clip left  nothing left to do  Clip bottom  Clip top  nothing left to do  two pixels per 32-bit word  there are two cases here:
     * - either width = LCD_WIDTH and we can directly memcopy a part of lcd_framebuffer to FRAME
     *   and send it
     * - either width != LCD_WIDTH and we have to build a contiguous copy of the rectangular area
     *   into FRAME before sending it (which is slower and doesn't use the hardware)
     * In all cases, FRAME just acts as a temporary buffer.
     * NOTE It's more interesting to do a copy to FRAME in all cases since in system mode
     * the clock runs at 24MHz which provides barely 10MB/s bandwidth compared to >100MB/s
     * for memcopy operations
      WARNING The LCDIF has a limitation on the vertical count ! In 16-bit packed mode
     * (which we used, ie 16-bit per pixel, 2 pixels per 32-bit words), the v_count
     * field must be a multiple of 2. Furthermore, it seems the lcd controller doesn't
     * really like when both w and h are even, probably because the writes to the GRAM
     * are done on several words and the controller requires dummy writes.
     * The workaround is to always make sure that we send a number of pixels which is
     * a multiple of 4 so that both the lcdif and the controller are happy. If any
     * of w or h is odd, we will send a copy of the first pixels as dummy writes. We will
     * send at most 3 bytes. We then send (w * h + 3) / 4 x 4 bytes.
      copy three pixel after the last one  WARNING we need to update w and h to reflect the pixel count BUT it
         * has no relation to w * h (it can even be 2 * prime). Hopefully, w <= 240 and
         * h <= 320 so w * h <= 76800 and (w * h + 3) / 4 <= 38400 which fits into
         * a 16-bit integer (horizontal count). **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2011 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** off_t  used to invert display  controls to flip display  WARNING
     * the B1P22 and B1P24 pins are used by the tuner i2c! Do NOT drive
     * them as lcd_dotclk and lcd_hsync or it will break the tuner! imx233_pinctrl_acquire_mask(1, 0x3ffff, "lcd data"); lcd_vsync  lcd_cs  lcd_enable  lcd_reset  lcd_rs  lcd_d16  lcd_d17  lcd_wr  lcd_d{0-15}  lcd_d{0-15}  lcd_d16  lcd_d17  lcd_rs  lcd_wr  lcd_cs  lcd_enable  lcd_vsync  lcd_rs  lcd_wr  lcd_cs  lcd_enable  lcd_rs  lcd_wr  lcd_cs  lcd_enable  lcd_{rs,wr,cs,enable}  lcd_d{0-17}  lcd_d{0-15} as GPIO  lcd_d16  lcd_d17  lcd_reset  lcd_rs  lcd_rs  lcd_wr  lcd_cs  lcd_enable  lcd_rs  lcd_wr  lcd_cs  lcd_d{0-17}  lcd_d{0-15} as lcd_d{0-15}  lcd_d16  lcd_d17  lcd_reset  lcd_rs  use GPIO pins when disable  the LCD seems to work at 24Mhz, so use the xtal clock with no divider  use XTAL  lcd_enable is mapped to the RD pin of the controller  lcd_cs  lcd_rs  lcd_enable  lcd_wr  lcd_d{0-17}  lcd_rs  lcd_cs  lcd_wr  lcd_d{0-17}  lcd_wr  lcd_d{0-17}  lcd_enable  lcd_rs  lcd_enable  lcd_enable  lcd_d{0-17}  lcd_enable  lcd_cs  get back to 18-bit word length  left X ?  right X ?  top Y ?  bottom Y ?  left X ?  top Y ?  reset device same for both kinds  same for both kinds  make sure the rectangle is bounded in the screen  Clip right  Clip left  nothing left to do  Clip bottom  Clip top  nothing left to do  two pixels per 32-bit word  there are two cases here:
     * - either width = LCD_WIDTH and we can directly memcopy a part of lcd_framebuffer to FRAME
     *   and send it
     * - either width != LCD_WIDTH and we have to build a contiguous copy of the rectangular area
     *   into FRAME before sending it (which is slower and doesn't use the hardware)
     * In all cases, FRAME just acts as a temporary buffer.
     * NOTE It's more interesting to do a copy to FRAME in all cases since in system mode
     * the clock runs at 24MHz which provides barely 10MB/s bandwidth compared to >100MB/s
     * for memcopy operations
      WARNING The LCDIF has a limitation on the vertical count ! In 16-bit packed mode
     * (which we used, ie 16-bit per pixel, 2 pixels per 32-bit words), the v_count
     * field must be a multiple of 2. Furthermore, it seems the lcd controller doesn't
     * really like when both w and h are even, probably because the writes to the GRAM
     * are done on several words and the controller requires dummy writes.
     * The workaround is to always make sure that we send a number of pixels which is
     * a multiple of 4 so that both the lcdif and the controller are happy. If any
     * of w or h is odd, we will send a copy of the first pixels as dummy writes. We will
     * send at most 3 bytes. We then send (w * h + 3) / 4 x 4 bytes.
      copy three pixel after the last one  WARNING we need to update w and h to reflect the pixel count BUT it
         * has no relation to w * h (it can even be 2 * prime). Hopefully, w <= 240 and
         * h <= 320 so w * h <= 76800 and (w * h + 3) / 4 <= 38400 which fits into
         * a 16-bit integer (horizontal count). 