**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007-2009 Joshua Simmons <mud at majidejima dot com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** the next handle to check  everything starts free  if there are extra bits at the end of the free list (because
       storage_buffer_size is not divisible by 8) then we set them not
       free, so we won't end up using those ever by accident (shouldn't be
       possible anyways, but makes calculation easier later)  try again  so we know where we started, to prevent infinite loop  simple, just 'or' the byte with the specific bit switched on  start with a byte with all bits turned on and turn off the one
           we're trying to set to zero.  then take that result and 'and'
           it with the current value  loaded as an overlay plugin, protect from overwriting ourselves  same as temp = size / (sizeof(union storage_t) + 1/8)
       (we need 1 bit extra for each union storage_t, for the free list)  the - ALIGNMENT_VAL - 1 is for possible wasted space in alignment
       and possible extra byte needed in the free list **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007-2009 Joshua Simmons <mud at majidejima dot com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** the next handle to check  everything starts free  if there are extra bits at the end of the free list (because
       storage_buffer_size is not divisible by 8) then we set them not
       free, so we won't end up using those ever by accident (shouldn't be
       possible anyways, but makes calculation easier later)  try again  so we know where we started, to prevent infinite loop  simple, just 'or' the byte with the specific bit switched on  start with a byte with all bits turned on and turn off the one
           we're trying to set to zero.  then take that result and 'and'
           it with the current value  loaded as an overlay plugin, protect from overwriting ourselves  same as temp = size / (sizeof(union storage_t) + 1/8)
       (we need 1 bit extra for each union storage_t, for the free list)  the - ALIGNMENT_VAL - 1 is for possible wasted space in alignment
       and possible extra byte needed in the free list **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007-2009 Joshua Simmons <mud at majidejima dot com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** the next handle to check  everything starts free  if there are extra bits at the end of the free list (because
       storage_buffer_size is not divisible by 8) then we set them not
       free, so we won't end up using those ever by accident (shouldn't be
       possible anyways, but makes calculation easier later)  try again  so we know where we started, to prevent infinite loop  simple, just 'or' the byte with the specific bit switched on  start with a byte with all bits turned on and turn off the one
           we're trying to set to zero.  then take that result and 'and'
           it with the current value  loaded as an overlay plugin, protect from overwriting ourselves  same as temp = size / (sizeof(union storage_t) + 1/8)
       (we need 1 bit extra for each union storage_t, for the free list)  the - ALIGNMENT_VAL - 1 is for possible wasted space in alignment
       and possible extra byte needed in the free list 