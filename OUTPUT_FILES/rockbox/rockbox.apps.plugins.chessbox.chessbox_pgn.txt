**************************************************************************
*             __________               __   ___.
*   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
*   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
*   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
*   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
*                     \/            \/     \/    \/            \/
* $Id$
*
* Copyright (C) 2007 Mauricio Peccorini
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
* KIND, either express or implied.
*
*************************************************************************** global vars for pl_malloc()  simple function to "allocate" memory in pluginbuffer.
 * (borrowed from dict.c)
  init function for pl_malloc()  truncate tag values that are too large  ignore annotations  castling  castle queenside  update the rook's position, the king's position will be updated later  castle kingside  pawns  en-passant, remove the pawn  the pawn moved two squares  promotion  change the piece in the original position and wait
             * for the code at the end to move it
              the other pieces  taken a piece and move was ambiguous  taken a piece  no piece taken and move was ambiguous  regular move  leave a very complete log of the parsing of the game while it gets stable  check bounds of row and columns should be 0-7 bad .pgn returns 0xFF  update the board ERROR check castling  castling kingside  castling queenside  check enpassant  check promotions when taking a piece  check promotions when not taking a piece  verify ambiguous moves for the different kinds of pieces  generate the first portion of the PGN text
         * always as white so all uppercase, black/white considerations
         * will be useful for FEN notation but not in this case
          update the board  The function returns false if the move is invalid, but since we're
     * replaying the game, that should not be posible
      add check/mate indicators  ---- api functions ----  looking for a game header  a new game header is found  seek the line where the pgn of the selected game starts  Null pointer can be returned from pl_malloc check for this  bad .pgn break loop and notify user  additional dummy ply to represent end of file without
     *loosing the previous node's pointer
      create an "end of game" dummy ply and assign defaults  create the game and assign defaults  move the pointer to the "end of game" marker ply  arrange the pointers to insert the ply before the marker  the first 7 tags are mandatory according to the PGN specification so we
     * have to include them even if the values don't make much sense
      leave a blank line between the tag section and the game section  write the plies in several lines of up to 80 characters  write the move number  write the actual move  write the result of the game at the end  unknown end of the game  leave a blank line between the tag section and the game section **************************************************************************
*             __________               __   ___.
*   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
*   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
*   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
*   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
*                     \/            \/     \/    \/            \/
* $Id$
*
* Copyright (C) 2007 Mauricio Peccorini
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
* KIND, either express or implied.
*
*************************************************************************** global vars for pl_malloc()  simple function to "allocate" memory in pluginbuffer.
 * (borrowed from dict.c)
  init function for pl_malloc()  truncate tag values that are too large  ignore annotations  castling  castle queenside  update the rook's position, the king's position will be updated later  castle kingside  pawns  en-passant, remove the pawn  the pawn moved two squares  promotion  change the piece in the original position and wait
             * for the code at the end to move it
              the other pieces  taken a piece and move was ambiguous  taken a piece  no piece taken and move was ambiguous  regular move  leave a very complete log of the parsing of the game while it gets stable  check bounds of row and columns should be 0-7 bad .pgn returns 0xFF  update the board ERROR check castling  castling kingside  castling queenside  check enpassant  check promotions when taking a piece  check promotions when not taking a piece  verify ambiguous moves for the different kinds of pieces  generate the first portion of the PGN text
         * always as white so all uppercase, black/white considerations
         * will be useful for FEN notation but not in this case
          update the board  The function returns false if the move is invalid, but since we're
     * replaying the game, that should not be posible
      add check/mate indicators  ---- api functions ----  looking for a game header  a new game header is found  seek the line where the pgn of the selected game starts  Null pointer can be returned from pl_malloc check for this  bad .pgn break loop and notify user  additional dummy ply to represent end of file without
     *loosing the previous node's pointer
      create an "end of game" dummy ply and assign defaults  create the game and assign defaults  move the pointer to the "end of game" marker ply  arrange the pointers to insert the ply before the marker  the first 7 tags are mandatory according to the PGN specification so we
     * have to include them even if the values don't make much sense
      leave a blank line between the tag section and the game section  write the plies in several lines of up to 80 characters  write the move number  write the actual move  write the result of the game at the end  unknown end of the game  leave a blank line between the tag section and the game section **************************************************************************
*             __________               __   ___.
*   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
*   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
*   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
*   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
*                     \/            \/     \/    \/            \/
* $Id$
*
* Copyright (C) 2007 Mauricio Peccorini
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
* KIND, either express or implied.
*
*************************************************************************** global vars for pl_malloc()  simple function to "allocate" memory in pluginbuffer.
 * (borrowed from dict.c)
  init function for pl_malloc()  truncate tag values that are too large  ignore annotations  castling  castle queenside  update the rook's position, the king's position will be updated later  castle kingside  pawns  en-passant, remove the pawn  the pawn moved two squares  promotion  change the piece in the original position and wait
             * for the code at the end to move it
              the other pieces  taken a piece and move was ambiguous  taken a piece  no piece taken and move was ambiguous  regular move  leave a very complete log of the parsing of the game while it gets stable  check bounds of row and columns should be 0-7 bad .pgn returns 0xFF  update the board ERROR check castling  castling kingside  castling queenside  check enpassant  check promotions when taking a piece  check promotions when not taking a piece  verify ambiguous moves for the different kinds of pieces  generate the first portion of the PGN text
         * always as white so all uppercase, black/white considerations
         * will be useful for FEN notation but not in this case
          update the board  The function returns false if the move is invalid, but since we're
     * replaying the game, that should not be posible
      add check/mate indicators  ---- api functions ----  looking for a game header  a new game header is found  seek the line where the pgn of the selected game starts  Null pointer can be returned from pl_malloc check for this  bad .pgn break loop and notify user  additional dummy ply to represent end of file without
     *loosing the previous node's pointer
      create an "end of game" dummy ply and assign defaults  create the game and assign defaults  move the pointer to the "end of game" marker ply  arrange the pointers to insert the ply before the marker  the first 7 tags are mandatory according to the PGN specification so we
     * have to include them even if the values don't make much sense
      leave a blank line between the tag section and the game section  write the plies in several lines of up to 80 characters  write the move number  write the actual move  write the result of the game at the end  unknown end of the game  leave a blank line between the tag section and the game section 