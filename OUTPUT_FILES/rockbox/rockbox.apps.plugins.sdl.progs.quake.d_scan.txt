
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 d_scan.c Portable C scan-level rasterization code, all pixel depths.
=============
D_WarpScreen

// this performs a slight compression of the screen at the same time as
// the sine warp, to keep the edges from wrapping
=============

=============
D_DrawTurbulent8Span
=============
 !id386
=============
Turbulent8
=============
 keep compiler happy ditto calculate the initial s/z, t/z, 1/z, s, and t and clamp prescale to 16.16 fixed-point calculate s and t at the far end of the span calculate s/z, t/z, zi->fixed s and t at far end of span, calculate s and t steps across span by shifting prescale to 16.16 fixed-point prevent round-off error on <0 steps from  from causing overstepping & running off the  edge of the texture guard against round-off error on <0 steps calculate s/z, t/z, zi->fixed s and t at last pixel in span (so can't step off polygon), clamp, calculate s and t steps across span by division, biasing steps low so we don't run off the texture prescale to 16.16 fixed-point prevent round-off error on <0 steps from  from causing overstepping & running off the  edge of the texture guard against round-off error on <0 steps
=============
D_DrawSpans8
=============
 keep compiler happy ditto calculate the initial s/z, t/z, 1/z, s, and t and clamp prescale to 16.16 fixed-point calculate s and t at the far end of the span calculate s/z, t/z, zi->fixed s and t at far end of span, calculate s and t steps across span by shifting prescale to 16.16 fixed-point prevent round-off error on <0 steps from  from causing overstepping & running off the  edge of the texture guard against round-off error on <0 steps calculate s/z, t/z, zi->fixed s and t at last pixel in span (so can't step off polygon), clamp, calculate s and t steps across span by division, biasing steps low so we don't run off the texture prescale to 16.16 fixed-point prevent round-off error on <0 steps from  from causing overstepping & running off the  edge of the texture guard against round-off error on <0 steps==============================================
// Fixed-point D_DrawSpans
//PocketQuake- Dan East
//fixed-point conversion- Jacco Biker
//unrolled- mh, MK, qbism
//============================================qbism524288.0f is 13.19 fixed point 2097152.0f is 11.214194304.0f is 10.22 (this is what PocketQuake used)8388608.0f is 9.23 JB: Store texture transformation matrix in fixed point varsqbism from PocketQuakeJacco Biker's fixed point conversion Recalc fixed point values calculate the initial s/z, t/z, 1/z, s, and t and clamp 5.27 / 13.19 = 24.8 >> 8 = 16.16End Jacco Biker mod Manoel Kasimier - begin Manoel Kasimier - end Manoel Kasimier calculate s/z, t/z, zi->fixed s and t at far end of span, calculate s and t steps across span by shifting prevent round-off error on <0 steps from causing overstepping & running off the edge of the texture guard against round-off error on <0 steps Manoel Kasimier - end Manoel Kasimier - begin Manoel Kasimier - end calculate s/z, t/z, zi->fixed s and t at last pixel in span (so can't step off polygon), clamp, calculate s and t steps across span by division, biasing steps low so we don't run off the textureif (!zi) zi = 1;z = zi;//(float)0x10000 / zi;   // prescale to 16.16 fixed-point prevent round-off error on <0 steps from causing overstepping & running off the edge of the texture guard against round-off error on <0 steps !id386
=============
D_DrawZSpans
=============
 FIXME: check for clamping/range problems we count on FP exceptions being turned off to avoid range problems calculate the initial 1/z we count on FP exceptions being turned off to avoid range problems
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 d_scan.c Portable C scan-level rasterization code, all pixel depths.
=============
D_WarpScreen

// this performs a slight compression of the screen at the same time as
// the sine warp, to keep the edges from wrapping
=============

=============
D_DrawTurbulent8Span
=============
 !id386
=============
Turbulent8
=============
 keep compiler happy ditto calculate the initial s/z, t/z, 1/z, s, and t and clamp prescale to 16.16 fixed-point calculate s and t at the far end of the span calculate s/z, t/z, zi->fixed s and t at far end of span, calculate s and t steps across span by shifting prescale to 16.16 fixed-point prevent round-off error on <0 steps from  from causing overstepping & running off the  edge of the texture guard against round-off error on <0 steps calculate s/z, t/z, zi->fixed s and t at last pixel in span (so can't step off polygon), clamp, calculate s and t steps across span by division, biasing steps low so we don't run off the texture prescale to 16.16 fixed-point prevent round-off error on <0 steps from  from causing overstepping & running off the  edge of the texture guard against round-off error on <0 steps
=============
D_DrawSpans8
=============
 keep compiler happy ditto calculate the initial s/z, t/z, 1/z, s, and t and clamp prescale to 16.16 fixed-point calculate s and t at the far end of the span calculate s/z, t/z, zi->fixed s and t at far end of span, calculate s and t steps across span by shifting prescale to 16.16 fixed-point prevent round-off error on <0 steps from  from causing overstepping & running off the  edge of the texture guard against round-off error on <0 steps calculate s/z, t/z, zi->fixed s and t at last pixel in span (so can't step off polygon), clamp, calculate s and t steps across span by division, biasing steps low so we don't run off the texture prescale to 16.16 fixed-point prevent round-off error on <0 steps from  from causing overstepping & running off the  edge of the texture guard against round-off error on <0 steps==============================================
// Fixed-point D_DrawSpans
//PocketQuake- Dan East
//fixed-point conversion- Jacco Biker
//unrolled- mh, MK, qbism
//============================================qbism524288.0f is 13.19 fixed point 2097152.0f is 11.214194304.0f is 10.22 (this is what PocketQuake used)8388608.0f is 9.23 JB: Store texture transformation matrix in fixed point varsqbism from PocketQuakeJacco Biker's fixed point conversion Recalc fixed point values calculate the initial s/z, t/z, 1/z, s, and t and clamp 5.27 / 13.19 = 24.8 >> 8 = 16.16End Jacco Biker mod Manoel Kasimier - begin Manoel Kasimier - end Manoel Kasimier calculate s/z, t/z, zi->fixed s and t at far end of span, calculate s and t steps across span by shifting prevent round-off error on <0 steps from causing overstepping & running off the edge of the texture guard against round-off error on <0 steps Manoel Kasimier - end Manoel Kasimier - begin Manoel Kasimier - end calculate s/z, t/z, zi->fixed s and t at last pixel in span (so can't step off polygon), clamp, calculate s and t steps across span by division, biasing steps low so we don't run off the textureif (!zi) zi = 1;z = zi;//(float)0x10000 / zi;   // prescale to 16.16 fixed-point prevent round-off error on <0 steps from causing overstepping & running off the edge of the texture guard against round-off error on <0 steps !id386
=============
D_DrawZSpans
=============
 FIXME: check for clamping/range problems we count on FP exceptions being turned off to avoid range problems calculate the initial 1/z we count on FP exceptions being turned off to avoid range problems
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 d_scan.c Portable C scan-level rasterization code, all pixel depths.
=============
D_WarpScreen

// this performs a slight compression of the screen at the same time as
// the sine warp, to keep the edges from wrapping
=============

=============
D_DrawTurbulent8Span
=============
 !id386
=============
Turbulent8
=============
 keep compiler happy ditto calculate the initial s/z, t/z, 1/z, s, and t and clamp prescale to 16.16 fixed-point calculate s and t at the far end of the span calculate s/z, t/z, zi->fixed s and t at far end of span, calculate s and t steps across span by shifting prescale to 16.16 fixed-point prevent round-off error on <0 steps from  from causing overstepping & running off the  edge of the texture guard against round-off error on <0 steps calculate s/z, t/z, zi->fixed s and t at last pixel in span (so can't step off polygon), clamp, calculate s and t steps across span by division, biasing steps low so we don't run off the texture prescale to 16.16 fixed-point prevent round-off error on <0 steps from  from causing overstepping & running off the  edge of the texture guard against round-off error on <0 steps
=============
D_DrawSpans8
=============
 keep compiler happy ditto calculate the initial s/z, t/z, 1/z, s, and t and clamp prescale to 16.16 fixed-point calculate s and t at the far end of the span calculate s/z, t/z, zi->fixed s and t at far end of span, calculate s and t steps across span by shifting prescale to 16.16 fixed-point prevent round-off error on <0 steps from  from causing overstepping & running off the  edge of the texture guard against round-off error on <0 steps calculate s/z, t/z, zi->fixed s and t at last pixel in span (so can't step off polygon), clamp, calculate s and t steps across span by division, biasing steps low so we don't run off the texture prescale to 16.16 fixed-point prevent round-off error on <0 steps from  from causing overstepping & running off the  edge of the texture guard against round-off error on <0 steps==============================================
// Fixed-point D_DrawSpans
//PocketQuake- Dan East
//fixed-point conversion- Jacco Biker
//unrolled- mh, MK, qbism
//============================================qbism524288.0f is 13.19 fixed point 2097152.0f is 11.214194304.0f is 10.22 (this is what PocketQuake used)8388608.0f is 9.23 JB: Store texture transformation matrix in fixed point varsqbism from PocketQuakeJacco Biker's fixed point conversion Recalc fixed point values calculate the initial s/z, t/z, 1/z, s, and t and clamp 5.27 / 13.19 = 24.8 >> 8 = 16.16End Jacco Biker mod Manoel Kasimier - begin Manoel Kasimier - end Manoel Kasimier calculate s/z, t/z, zi->fixed s and t at far end of span, calculate s and t steps across span by shifting prevent round-off error on <0 steps from causing overstepping & running off the edge of the texture guard against round-off error on <0 steps Manoel Kasimier - end Manoel Kasimier - begin Manoel Kasimier - end calculate s/z, t/z, zi->fixed s and t at last pixel in span (so can't step off polygon), clamp, calculate s and t steps across span by division, biasing steps low so we don't run off the textureif (!zi) zi = 1;z = zi;//(float)0x10000 / zi;   // prescale to 16.16 fixed-point prevent round-off error on <0 steps from causing overstepping & running off the edge of the texture guard against round-off error on <0 steps !id386
=============
D_DrawZSpans
=============
 FIXME: check for clamping/range problems we count on FP exceptions being turned off to avoid range problems calculate the initial 1/z we count on FP exceptions being turned off to avoid range problems