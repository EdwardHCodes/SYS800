**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Linus Nielsen Feltzing
 *
 * iPod driver based on code from the ipodlinux project - http://ipodlinux.org
 * Adapted for Rockbox in January 2006
 * Original file: podzilla/usb.c
 * Copyright (C) 2005 Adam Johnston
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Conditions under which we want the entire driver  TODO: condition should be reset to be only the original
   (defined(HAVE_USBSTACK) && defined(HAVE_BOOTLOADER_USB_MODE))  We assume that the USB cable is extracted  Make sure there's enough stack space for screendump  USB_FULL_INIT  Immediately spindown the disk.  The following code is based on ipodlinux  CONFIG_CPU  IPOD_ARCH  Reboot  USB_FIRWIRE_HANDLING  Screen dump  HAVE_REMOTE_LCD  Power (charging-only) button  USB_FIREWIRE_HANDLING --- Routines that differ depending upon the presence of a USB stack --- Enable / disable USB when the stack is enabled - otherwise a noop  Note: No MMC storage handling is needed with the stack atm.  HAVE_HOTSWAP  USB_ENABLE_CHARGING_ONLY  USB_ENABLE_HID  Powered only: attach now.  USB_POWERED:  Check any drivers enabled at this point for exclusive storage
         * access requirements.  Not exclusive: attach now.  USB_INSERTED:  USB_EXTRACTED:  usb_state == USB_INSERTED (only!)  Entered exclusive mode  no partition  !HAVE_USBSTACK  re-enable after 0.5 sec  reenable only if still inserted  STORAGE_MMC  HAVE_HOTSWAP  Let the ISDx00 settle  no partition  HAVE_USBSTACK  Only charging is desired  Exclusive storage access not required  Tell all threads that they have to back off the storage.
       We subtract one for our own thread. Expect an ACK for every
       listener for each broadcast they received. If it has been too
       long, the user might have entered a screen that didn't ACK
       when inserting the cable, such as a debugging screen. In that
       case, reset the count or else USB would be locked out until
       rebooting because it most likely won't ever come. Simply
       resetting to the most recent broadcast count is racy. --- General driver code ---** Main USB thread duties ** HAVE_USBSTACK  USB_INSERTED  SYS_USB_CONNECTED_ACK  Only disable the USB slave mode if we really have enabled
               it. Some expected acks may not have been received.  USB_EXTRACTED: ** Miscellaneous USB thread duties ** HOTSWAP  FIREWIRE  CHARGING  CLOSE  switch  while  Caller isn't expected to filter for changes in status.
     * current_status:
     *   USB_INSERTED, USB_EXTRACTED
      Dual-use function  Sync to event  An event may have been missed because it was sent before monitoring
     * was enabled due to the connector already having been inserted before
     * before or during boot.  USB_FIREWIRE_HANDLING  !USB_STATUS_BY_EVENT  Count down until it gets negative  Report to the thread if we have had 3 identical status
               readings in a row  USB_FIREWIRE_HANDLING  Only report when the status has changed  Count down until it gets negative  Report to the thread if we have had 3 identical status
               readings in a row  USB_STATUS_BY_EVENT  USB_FULL_INIT  Do required hardware inits first. For software USB the driver has
     * to make sure this won't trigger a transfer completion before the
     * queue and thread are created.  USB_FULL_INIT  Don't return until we get SYS_USB_DISCONNECTED  USB_FULL_INIT  Don't return until we get SYS_USB_DISCONNECTED or SYS_TIMEOUT  USB_FULL_INIT  USB_DRIVER_CLOSE  Storage isn't actually exclusive until slave mode has been entered  HAVE_USBSTACK  Tell all threads that we are back in business  HAVE_USB_POWER  USB_ENABLE_HID  Dummy functions for USB_NONE   USB_NONE **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Linus Nielsen Feltzing
 *
 * iPod driver based on code from the ipodlinux project - http://ipodlinux.org
 * Adapted for Rockbox in January 2006
 * Original file: podzilla/usb.c
 * Copyright (C) 2005 Adam Johnston
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Conditions under which we want the entire driver  TODO: condition should be reset to be only the original
   (defined(HAVE_USBSTACK) && defined(HAVE_BOOTLOADER_USB_MODE))  We assume that the USB cable is extracted  Make sure there's enough stack space for screendump  USB_FULL_INIT  Immediately spindown the disk.  The following code is based on ipodlinux  CONFIG_CPU  IPOD_ARCH  Reboot  USB_FIRWIRE_HANDLING  Screen dump  HAVE_REMOTE_LCD  Power (charging-only) button  USB_FIREWIRE_HANDLING --- Routines that differ depending upon the presence of a USB stack --- Enable / disable USB when the stack is enabled - otherwise a noop  Note: No MMC storage handling is needed with the stack atm.  HAVE_HOTSWAP  USB_ENABLE_CHARGING_ONLY  USB_ENABLE_HID  Powered only: attach now.  USB_POWERED:  Check any drivers enabled at this point for exclusive storage
         * access requirements.  Not exclusive: attach now.  USB_INSERTED:  USB_EXTRACTED:  usb_state == USB_INSERTED (only!)  Entered exclusive mode  no partition  !HAVE_USBSTACK  re-enable after 0.5 sec  reenable only if still inserted  STORAGE_MMC  HAVE_HOTSWAP  Let the ISDx00 settle  no partition  HAVE_USBSTACK  Only charging is desired  Exclusive storage access not required  Tell all threads that they have to back off the storage.
       We subtract one for our own thread. Expect an ACK for every
       listener for each broadcast they received. If it has been too
       long, the user might have entered a screen that didn't ACK
       when inserting the cable, such as a debugging screen. In that
       case, reset the count or else USB would be locked out until
       rebooting because it most likely won't ever come. Simply
       resetting to the most recent broadcast count is racy. --- General driver code ---** Main USB thread duties ** HAVE_USBSTACK  USB_INSERTED  SYS_USB_CONNECTED_ACK  Only disable the USB slave mode if we really have enabled
               it. Some expected acks may not have been received.  USB_EXTRACTED: ** Miscellaneous USB thread duties ** HOTSWAP  FIREWIRE  CHARGING  CLOSE  switch  while  Caller isn't expected to filter for changes in status.
     * current_status:
     *   USB_INSERTED, USB_EXTRACTED
      Dual-use function  Sync to event  An event may have been missed because it was sent before monitoring
     * was enabled due to the connector already having been inserted before
     * before or during boot.  USB_FIREWIRE_HANDLING  !USB_STATUS_BY_EVENT  Count down until it gets negative  Report to the thread if we have had 3 identical status
               readings in a row  USB_FIREWIRE_HANDLING  Only report when the status has changed  Count down until it gets negative  Report to the thread if we have had 3 identical status
               readings in a row  USB_STATUS_BY_EVENT  USB_FULL_INIT  Do required hardware inits first. For software USB the driver has
     * to make sure this won't trigger a transfer completion before the
     * queue and thread are created.  USB_FULL_INIT  Don't return until we get SYS_USB_DISCONNECTED  USB_FULL_INIT  Don't return until we get SYS_USB_DISCONNECTED or SYS_TIMEOUT  USB_FULL_INIT  USB_DRIVER_CLOSE  Storage isn't actually exclusive until slave mode has been entered  HAVE_USBSTACK  Tell all threads that we are back in business  HAVE_USB_POWER  USB_ENABLE_HID  Dummy functions for USB_NONE   USB_NONE **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Linus Nielsen Feltzing
 *
 * iPod driver based on code from the ipodlinux project - http://ipodlinux.org
 * Adapted for Rockbox in January 2006
 * Original file: podzilla/usb.c
 * Copyright (C) 2005 Adam Johnston
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Conditions under which we want the entire driver  TODO: condition should be reset to be only the original
   (defined(HAVE_USBSTACK) && defined(HAVE_BOOTLOADER_USB_MODE))  We assume that the USB cable is extracted  Make sure there's enough stack space for screendump  USB_FULL_INIT  Immediately spindown the disk.  The following code is based on ipodlinux  CONFIG_CPU  IPOD_ARCH  Reboot  USB_FIRWIRE_HANDLING  Screen dump  HAVE_REMOTE_LCD  Power (charging-only) button  USB_FIREWIRE_HANDLING --- Routines that differ depending upon the presence of a USB stack --- Enable / disable USB when the stack is enabled - otherwise a noop  Note: No MMC storage handling is needed with the stack atm.  HAVE_HOTSWAP  USB_ENABLE_CHARGING_ONLY  USB_ENABLE_HID  Powered only: attach now.  USB_POWERED:  Check any drivers enabled at this point for exclusive storage
         * access requirements.  Not exclusive: attach now.  USB_INSERTED:  USB_EXTRACTED:  usb_state == USB_INSERTED (only!)  Entered exclusive mode  no partition  !HAVE_USBSTACK  re-enable after 0.5 sec  reenable only if still inserted  STORAGE_MMC  HAVE_HOTSWAP  Let the ISDx00 settle  no partition  HAVE_USBSTACK  Only charging is desired  Exclusive storage access not required  Tell all threads that they have to back off the storage.
       We subtract one for our own thread. Expect an ACK for every
       listener for each broadcast they received. If it has been too
       long, the user might have entered a screen that didn't ACK
       when inserting the cable, such as a debugging screen. In that
       case, reset the count or else USB would be locked out until
       rebooting because it most likely won't ever come. Simply
       resetting to the most recent broadcast count is racy. --- General driver code ---** Main USB thread duties ** HAVE_USBSTACK  USB_INSERTED  SYS_USB_CONNECTED_ACK  Only disable the USB slave mode if we really have enabled
               it. Some expected acks may not have been received.  USB_EXTRACTED: ** Miscellaneous USB thread duties ** HOTSWAP  FIREWIRE  CHARGING  CLOSE  switch  while  Caller isn't expected to filter for changes in status.
     * current_status:
     *   USB_INSERTED, USB_EXTRACTED
      Dual-use function  Sync to event  An event may have been missed because it was sent before monitoring
     * was enabled due to the connector already having been inserted before
     * before or during boot.  USB_FIREWIRE_HANDLING  !USB_STATUS_BY_EVENT  Count down until it gets negative  Report to the thread if we have had 3 identical status
               readings in a row  USB_FIREWIRE_HANDLING  Only report when the status has changed  Count down until it gets negative  Report to the thread if we have had 3 identical status
               readings in a row  USB_STATUS_BY_EVENT  USB_FULL_INIT  Do required hardware inits first. For software USB the driver has
     * to make sure this won't trigger a transfer completion before the
     * queue and thread are created.  USB_FULL_INIT  Don't return until we get SYS_USB_DISCONNECTED  USB_FULL_INIT  Don't return until we get SYS_USB_DISCONNECTED or SYS_TIMEOUT  USB_FULL_INIT  USB_DRIVER_CLOSE  Storage isn't actually exclusive until slave mode has been entered  HAVE_USBSTACK  Tell all threads that we are back in business  HAVE_USB_POWER  USB_ENABLE_HID  Dummy functions for USB_NONE   USB_NONE 