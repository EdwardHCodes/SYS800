
** FAAD2 - Freeware Advanced Audio (AAC) Decoder including SBR decoding
** Copyright (C) 2003-2004 M. Bakker, Ahead Software AG, http://www.nero.com
**
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
**
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** Any non-GPL usage of this software or parts of this software is strictly
** forbidden.
**
** Commercial non-GPL licensing of this software is possible.
** For more info contact Ahead Software through Mpeg4AAClicense@nero.com.
**
** $Id$
*
  Spectral reconstruction:
   - grouping/sectioning
   - inverse quantization
   - applying scalefactors
 static function declarations  96000  88200  64000  48000  44100  32000  24000  22050  16000  12000  11025  8000   96000  88200  64000  48000  44100  32000  24000  22050  16000  12000  11025  8000   96000  88200  64000  48000  44100  32000  24000  22050  16000  12000  11025  8000   96000  88200  64000  48000  44100  32000  24000  22050  16000  12000  11025  8000   static variables  used by reconstruct_single_channel() and reconstruct_channel_pair()  4.5.2.3.4 
  - determine the number of windows in a window_sequence named num_windows
  - determine the number of window_groups named num_window_groups
  - determine the number of windows in each group named window_group_length[g]
  - determine the total number of scalefactor window bands named num_swb for
    the actual window type
  - determine swb_offset[swb], the offset of the first coefficient in
    scalefactor window band named swb of the window actually used
  - determine sect_sfb_offset[g][section],the offset of the first coefficient
    in section named section. This offset depends on window_sequence and
    scale_factor_grouping and is needed to decode the spectral_data().
 if (hDecoder->frameLength == 480)  if (hDecoder->frameLength == 960)  preparation of sect_sfb_offset for long blocks  also copy the last value!  if (hDecoder->frameLength == 480)  preparation of sect_sfb_offset for short blocks  iquant()  output = sign(input)*abs(input)^(4/3)  For FIXED_POINT the iq_table is prescaled by 3 bits (iq_table[]/8)  BIG_IQ_TABLE allows you to use the full 8192 value table, if this is not
 * defined a 1026 value table and interpolation will be used
 #define IQUANT_PRINTprintf("0x%.8X\n", sgn * tab[q]); linear interpolation  #ifndef BIG_IQ_TABLE  tab contains a value for all possible q [0,8192]  tab contains a value for all possible q [0,8192]  quant_to_spec: perform dequantisation and scaling
 * and in case of short block it also does the deinterleaving
 
  For ONLY_LONG_SEQUENCE windows (num_window_groups = 1,
  window_group_length[0] = 1) the spectral data is in ascending spectral
  order.
  For the EIGHT_SHORT_SEQUENCE window, the spectral order depends on the
  grouping in the following manner:
  - Groups are ordered sequentially
  - Within a group, a scalefactor band consists of the spectral data of all
    grouped SHORT_WINDOWs for the associated scalefactor window band. To
    clarify via example, the length of a group is in the range of one to eight
    SHORT_WINDOWs.
  - If there are eight groups each with length one (num_window_groups = 8,
    window_group_length[0..7] = 1), the result is a sequence of eight spectra,
    each in ascending spectral order.
  - If there is only one group with length eight (num_window_groups = 1,
    window_group_length[0] = 8), the result is that spectral data of all eight
    SHORT_WINDOWs is interleaved by scalefactor window bands.
  - Within a scalefactor window band, the coefficients are in ascending
    spectral order.
 2^0.25  2^0.50  2^0.75  Init error flag  this could be scalefactor for IS or PNS, those can be negative or bigger then 255  just ignore them  ics->scale_factors[g][sfb] must be between 0 and 255  - 100  frac must always be > 0  - 100  IMDCT pre-scaling 9710+25#define SCFS_PRINTprintf("0x%.8X\n", spec_data[gindex+(win*win_inc)+j+bin+0]);printf("0x%.8X\n", spec_data[gindex+(win*win_inc)+j+bin+1]);printf("0x%.8X\n", spec_data[gindex+(win*win_inc)+j+bin+2]);printf("0x%.8X\n", spec_data[gindex+(win*win_inc)+j+bin+3]); always allocate 2 channels, PS can always "suddenly" turn up  element_output_channels not set yet  element inconsistency  dequantisation and scaling  pns decoding  MAIN object type prediction  intra channel prediction  In addition, for scalefactor bands coded by perceptual
           noise substitution the predictors belonging to the
           corresponding spectral coefficients are reset.
         long term prediction  tns decoding  drc decoding  filter bank  save window shape for next frame  following case can happen when forceUpSampling == 1  could not allocate memory  check if any of the PS tools is used  copy L to R when no PS is used  dequantisation and scaling  pns decoding  mid/side decoding printf("%d\n", spec_coef1[i]);printf("%d\n", spec_coef2[i]); intensity stereo decoding printf("0x%.8X\n", spec_coef1[i]);printf("0x%.8X\n", spec_coef2[i]); MAIN object type prediction  intra channel prediction  In addition, for scalefactor bands coded by perceptual
           noise substitution the predictors belonging to the
           corresponding spectral coefficients are reset.
         long term prediction  tns decoding  drc decoding  filter bank  save window shape for next frame  following case can happen when forceUpSampling == 1  could not allocate memory 
** FAAD2 - Freeware Advanced Audio (AAC) Decoder including SBR decoding
** Copyright (C) 2003-2004 M. Bakker, Ahead Software AG, http://www.nero.com
**
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
**
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** Any non-GPL usage of this software or parts of this software is strictly
** forbidden.
**
** Commercial non-GPL licensing of this software is possible.
** For more info contact Ahead Software through Mpeg4AAClicense@nero.com.
**
** $Id$
*
  Spectral reconstruction:
   - grouping/sectioning
   - inverse quantization
   - applying scalefactors
 static function declarations  96000  88200  64000  48000  44100  32000  24000  22050  16000  12000  11025  8000   96000  88200  64000  48000  44100  32000  24000  22050  16000  12000  11025  8000   96000  88200  64000  48000  44100  32000  24000  22050  16000  12000  11025  8000   96000  88200  64000  48000  44100  32000  24000  22050  16000  12000  11025  8000   static variables  used by reconstruct_single_channel() and reconstruct_channel_pair()  4.5.2.3.4 
  - determine the number of windows in a window_sequence named num_windows
  - determine the number of window_groups named num_window_groups
  - determine the number of windows in each group named window_group_length[g]
  - determine the total number of scalefactor window bands named num_swb for
    the actual window type
  - determine swb_offset[swb], the offset of the first coefficient in
    scalefactor window band named swb of the window actually used
  - determine sect_sfb_offset[g][section],the offset of the first coefficient
    in section named section. This offset depends on window_sequence and
    scale_factor_grouping and is needed to decode the spectral_data().
 if (hDecoder->frameLength == 480)  if (hDecoder->frameLength == 960)  preparation of sect_sfb_offset for long blocks  also copy the last value!  if (hDecoder->frameLength == 480)  preparation of sect_sfb_offset for short blocks  iquant()  output = sign(input)*abs(input)^(4/3)  For FIXED_POINT the iq_table is prescaled by 3 bits (iq_table[]/8)  BIG_IQ_TABLE allows you to use the full 8192 value table, if this is not
 * defined a 1026 value table and interpolation will be used
 #define IQUANT_PRINTprintf("0x%.8X\n", sgn * tab[q]); linear interpolation  #ifndef BIG_IQ_TABLE  tab contains a value for all possible q [0,8192]  tab contains a value for all possible q [0,8192]  quant_to_spec: perform dequantisation and scaling
 * and in case of short block it also does the deinterleaving
 
  For ONLY_LONG_SEQUENCE windows (num_window_groups = 1,
  window_group_length[0] = 1) the spectral data is in ascending spectral
  order.
  For the EIGHT_SHORT_SEQUENCE window, the spectral order depends on the
  grouping in the following manner:
  - Groups are ordered sequentially
  - Within a group, a scalefactor band consists of the spectral data of all
    grouped SHORT_WINDOWs for the associated scalefactor window band. To
    clarify via example, the length of a group is in the range of one to eight
    SHORT_WINDOWs.
  - If there are eight groups each with length one (num_window_groups = 8,
    window_group_length[0..7] = 1), the result is a sequence of eight spectra,
    each in ascending spectral order.
  - If there is only one group with length eight (num_window_groups = 1,
    window_group_length[0] = 8), the result is that spectral data of all eight
    SHORT_WINDOWs is interleaved by scalefactor window bands.
  - Within a scalefactor window band, the coefficients are in ascending
    spectral order.
 2^0.25  2^0.50  2^0.75  Init error flag  this could be scalefactor for IS or PNS, those can be negative or bigger then 255  just ignore them  ics->scale_factors[g][sfb] must be between 0 and 255  - 100  frac must always be > 0  - 100  IMDCT pre-scaling 9710+25#define SCFS_PRINTprintf("0x%.8X\n", spec_data[gindex+(win*win_inc)+j+bin+0]);printf("0x%.8X\n", spec_data[gindex+(win*win_inc)+j+bin+1]);printf("0x%.8X\n", spec_data[gindex+(win*win_inc)+j+bin+2]);printf("0x%.8X\n", spec_data[gindex+(win*win_inc)+j+bin+3]); always allocate 2 channels, PS can always "suddenly" turn up  element_output_channels not set yet  element inconsistency  dequantisation and scaling  pns decoding  MAIN object type prediction  intra channel prediction  In addition, for scalefactor bands coded by perceptual
           noise substitution the predictors belonging to the
           corresponding spectral coefficients are reset.
         long term prediction  tns decoding  drc decoding  filter bank  save window shape for next frame  following case can happen when forceUpSampling == 1  could not allocate memory  check if any of the PS tools is used  copy L to R when no PS is used  dequantisation and scaling  pns decoding  mid/side decoding printf("%d\n", spec_coef1[i]);printf("%d\n", spec_coef2[i]); intensity stereo decoding printf("0x%.8X\n", spec_coef1[i]);printf("0x%.8X\n", spec_coef2[i]); MAIN object type prediction  intra channel prediction  In addition, for scalefactor bands coded by perceptual
           noise substitution the predictors belonging to the
           corresponding spectral coefficients are reset.
         long term prediction  tns decoding  drc decoding  filter bank  save window shape for next frame  following case can happen when forceUpSampling == 1  could not allocate memory 
** FAAD2 - Freeware Advanced Audio (AAC) Decoder including SBR decoding
** Copyright (C) 2003-2004 M. Bakker, Ahead Software AG, http://www.nero.com
**
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
**
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** Any non-GPL usage of this software or parts of this software is strictly
** forbidden.
**
** Commercial non-GPL licensing of this software is possible.
** For more info contact Ahead Software through Mpeg4AAClicense@nero.com.
**
** $Id$
*
  Spectral reconstruction:
   - grouping/sectioning
   - inverse quantization
   - applying scalefactors
 static function declarations  96000  88200  64000  48000  44100  32000  24000  22050  16000  12000  11025  8000   96000  88200  64000  48000  44100  32000  24000  22050  16000  12000  11025  8000   96000  88200  64000  48000  44100  32000  24000  22050  16000  12000  11025  8000   96000  88200  64000  48000  44100  32000  24000  22050  16000  12000  11025  8000   static variables  used by reconstruct_single_channel() and reconstruct_channel_pair()  4.5.2.3.4 
  - determine the number of windows in a window_sequence named num_windows
  - determine the number of window_groups named num_window_groups
  - determine the number of windows in each group named window_group_length[g]
  - determine the total number of scalefactor window bands named num_swb for
    the actual window type
  - determine swb_offset[swb], the offset of the first coefficient in
    scalefactor window band named swb of the window actually used
  - determine sect_sfb_offset[g][section],the offset of the first coefficient
    in section named section. This offset depends on window_sequence and
    scale_factor_grouping and is needed to decode the spectral_data().
 if (hDecoder->frameLength == 480)  if (hDecoder->frameLength == 960)  preparation of sect_sfb_offset for long blocks  also copy the last value!  if (hDecoder->frameLength == 480)  preparation of sect_sfb_offset for short blocks  iquant()  output = sign(input)*abs(input)^(4/3)  For FIXED_POINT the iq_table is prescaled by 3 bits (iq_table[]/8)  BIG_IQ_TABLE allows you to use the full 8192 value table, if this is not
 * defined a 1026 value table and interpolation will be used
 #define IQUANT_PRINTprintf("0x%.8X\n", sgn * tab[q]); linear interpolation  #ifndef BIG_IQ_TABLE  tab contains a value for all possible q [0,8192]  tab contains a value for all possible q [0,8192]  quant_to_spec: perform dequantisation and scaling
 * and in case of short block it also does the deinterleaving
 
  For ONLY_LONG_SEQUENCE windows (num_window_groups = 1,
  window_group_length[0] = 1) the spectral data is in ascending spectral
  order.
  For the EIGHT_SHORT_SEQUENCE window, the spectral order depends on the
  grouping in the following manner:
  - Groups are ordered sequentially
  - Within a group, a scalefactor band consists of the spectral data of all
    grouped SHORT_WINDOWs for the associated scalefactor window band. To
    clarify via example, the length of a group is in the range of one to eight
    SHORT_WINDOWs.
  - If there are eight groups each with length one (num_window_groups = 8,
    window_group_length[0..7] = 1), the result is a sequence of eight spectra,
    each in ascending spectral order.
  - If there is only one group with length eight (num_window_groups = 1,
    window_group_length[0] = 8), the result is that spectral data of all eight
    SHORT_WINDOWs is interleaved by scalefactor window bands.
  - Within a scalefactor window band, the coefficients are in ascending
    spectral order.
 2^0.25  2^0.50  2^0.75  Init error flag  this could be scalefactor for IS or PNS, those can be negative or bigger then 255  just ignore them  ics->scale_factors[g][sfb] must be between 0 and 255  - 100  frac must always be > 0  - 100  IMDCT pre-scaling 9710+25#define SCFS_PRINTprintf("0x%.8X\n", spec_data[gindex+(win*win_inc)+j+bin+0]);printf("0x%.8X\n", spec_data[gindex+(win*win_inc)+j+bin+1]);printf("0x%.8X\n", spec_data[gindex+(win*win_inc)+j+bin+2]);printf("0x%.8X\n", spec_data[gindex+(win*win_inc)+j+bin+3]); always allocate 2 channels, PS can always "suddenly" turn up  element_output_channels not set yet  element inconsistency  dequantisation and scaling  pns decoding  MAIN object type prediction  intra channel prediction  In addition, for scalefactor bands coded by perceptual
           noise substitution the predictors belonging to the
           corresponding spectral coefficients are reset.
         long term prediction  tns decoding  drc decoding  filter bank  save window shape for next frame  following case can happen when forceUpSampling == 1  could not allocate memory  check if any of the PS tools is used  copy L to R when no PS is used  dequantisation and scaling  pns decoding  mid/side decoding printf("%d\n", spec_coef1[i]);printf("%d\n", spec_coef2[i]); intensity stereo decoding printf("0x%.8X\n", spec_coef1[i]);printf("0x%.8X\n", spec_coef2[i]); MAIN object type prediction  intra channel prediction  In addition, for scalefactor bands coded by perceptual
           noise substitution the predictors belonging to the
           corresponding spectral coefficients are reset.
         long term prediction  tns decoding  drc decoding  filter bank  save window shape for next frame  following case can happen when forceUpSampling == 1  could not allocate memory 