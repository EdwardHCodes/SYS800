**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Alan Korr
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Rather high priority - place near front  Mini 1st gen only, mini 2nd gen uses iPod 4G code  end IPOD_MINI  except Mini 1st gen, handled above  end CONFIG_KEYPAD == IPOD_4G_PAD  end IRIVER_H10 || IRIVER_H10_5GB  end SANSA_E200  end SANSA_C200  end MROBE_100  end PHILIPS_SA9200  end PHILIPS_HDD1630 || PHILIPS_HDD6330  end SAMSUNG_YHxxx  end PBELL_VIBE500  BOOTLOADER || HAVE_BOOTLOADER_USB_MODE  Cache lines which are not marked as valid can cause memory
         * corruption when there are many writes to and code fetches from
         * cached memory. This workaround points all cache status words past
         * end of RAM and marks them as valid, but not dirty. Since that area
         * is never accessed, the cache lines don't affect anything, and
         * they're effectively discarded. Interrupts must be disabled here
         * because any change they make to cached memory could be discarded.
          Initialising the cache in the iPod bootloader may prevent Rockbox from starting
 * depending on the model  cache init mode  what's this do?  Cache if (addr & mask) >> 16 == (mask & match) >> 16:
     * yes: 0x00000000 - 0x03ffffff
     *  no: 0x04000000 - 0x1fffffff
     * yes: 0x20000000 - 0x23ffffff
     *  no: 0x24000000 - 0x3fffffff
      enable cache  Ensure all cache lines are valid for the next flush. Since this
     * can run from cached RAM, rewriting of cache status words may not
     * be safe and the cache is filled instead by reading.  Note:  Don't start at 0x0, as the compiler thinks it's a
       null pointer dereference and will helpfully blow up the code.  BOOTLOADER || HAVE_BOOTLOADER_USB_MODE  We need this for Sansas since we boost the cpu in their bootloader  NUM_CORES > 1  Note1: The PP5022 PLL must be run at >= 96MHz
       * Bits 20..21 select the post divider (1/2/4/8).
       * PP5026 is similar to PP5022 except it doesn't
       * have this limitation (and the post divider?) 
       * Note2: CLOCK_SOURCE is set via 0=32kHz, 1=16MHz,
       * 2=24MHz, 3=33MHz, 4=48MHz, 5=SLOW, 6=FAST, 7=PLL. 
       * SLOW = 24MHz / (DIV_SLOW + 1), DIV = Bits 16-19
       * FAST = PLL   / (DIV_FAST + 1), DIV = Bits 20-23  source #1, #2, #3, #4: 32kHz (#2 active)  disable PLL  disable PLL power  enable PLL power  enable PLL  source #1, #2, #3, #4: 24MHz (#2 active)  Mono LCD bridge serial clock divider  set ">65MHz" bit  80 MHz = 10/3 * 24MHz  unlock frequencies > 66MHz  repeat setup  wait for relock   80 MHz = (20/3 * 24MHz) / 2  wait for relock  source #1, #2, #3, #4: PLL (#2 active) ******* CPUFREQ_NORMAL = 24MHz without PLL ******* source #1, #2, #3, #4: 24MHz (#2 active)  Mono LCD bridge serial clock divider  clear ">65MHz" bit  disable PLL  disable PLL power ******* CPUFREQ_NORMAL = 30MHz with PLL ******* enable PLL power  enable PLL  source #1, #2, #3, #4: 24MHz (#2 active)  Mono LCD bridge serial clock divider  clear ">65MHz" bit  30 MHz = 5/4 * 24MHz  wait for relock  30 MHz = (5/1 * 24MHz) / 4  wait for relock  source #1, #2, #3, #4: PLL (#2 active) ******* CPUFREQ_NORMAL end ******* source #1, #2, #3, #4: 24MHz (#2 active)  Mono LCD bridge serial clock divider  clear ">65MHz" bit  disable PLL  disable PLL power  !BOOTLOADER || (SANSA_E200 || SANSA_C200 || PHILIPS_SA9200)  set minimum startup configuration  reset all allowed devices  set minimum startup configuration  reset all allowed devices  set minimum startup configuration  reset all allowed devices  set minimum startup configuration  reset all allowed devices  reset all allowed devices  set minimum startup configuration  reset all allowed devices  to be done  to be done  to be done  to be done  reset all allowed devices  Remap the flash ROM on CPU, keep hidden from COP:
         * 0x00000000-0x3fffffff = 0x20000000-0x23ffffff  crt0-pp.S wrote the ram size to the last byte of the first 32MB
           ram bank. See the comment there for how we determine it.  BOOTLOADER  Only the CPU gets here in the bootloader  Use the local vector map  HAVE_BOOTLOADER_USB_MODE  Else the frequency should get changed upon USB connect -
     * decide per-target  Some OF's disable this themselves, others do not and will hang.  HAVE_BOOTLOADER_USB_MODE  !BOOTLOADER  Reboot  Magic used by the c200 OF: 0x23066000
       Magic used by the c200 BL: 0x23066b7b
       In both cases, the OF executes these 2 commands from iram.  wait until reboot kicks in  FIXME: we just need the right buttons  Halt **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Alan Korr
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Rather high priority - place near front  Mini 1st gen only, mini 2nd gen uses iPod 4G code  end IPOD_MINI  except Mini 1st gen, handled above  end CONFIG_KEYPAD == IPOD_4G_PAD  end IRIVER_H10 || IRIVER_H10_5GB  end SANSA_E200  end SANSA_C200  end MROBE_100  end PHILIPS_SA9200  end PHILIPS_HDD1630 || PHILIPS_HDD6330  end SAMSUNG_YHxxx  end PBELL_VIBE500  BOOTLOADER || HAVE_BOOTLOADER_USB_MODE  Cache lines which are not marked as valid can cause memory
         * corruption when there are many writes to and code fetches from
         * cached memory. This workaround points all cache status words past
         * end of RAM and marks them as valid, but not dirty. Since that area
         * is never accessed, the cache lines don't affect anything, and
         * they're effectively discarded. Interrupts must be disabled here
         * because any change they make to cached memory could be discarded.
          Initialising the cache in the iPod bootloader may prevent Rockbox from starting
 * depending on the model  cache init mode  what's this do?  Cache if (addr & mask) >> 16 == (mask & match) >> 16:
     * yes: 0x00000000 - 0x03ffffff
     *  no: 0x04000000 - 0x1fffffff
     * yes: 0x20000000 - 0x23ffffff
     *  no: 0x24000000 - 0x3fffffff
      enable cache  Ensure all cache lines are valid for the next flush. Since this
     * can run from cached RAM, rewriting of cache status words may not
     * be safe and the cache is filled instead by reading.  Note:  Don't start at 0x0, as the compiler thinks it's a
       null pointer dereference and will helpfully blow up the code.  BOOTLOADER || HAVE_BOOTLOADER_USB_MODE  We need this for Sansas since we boost the cpu in their bootloader  NUM_CORES > 1  Note1: The PP5022 PLL must be run at >= 96MHz
       * Bits 20..21 select the post divider (1/2/4/8).
       * PP5026 is similar to PP5022 except it doesn't
       * have this limitation (and the post divider?) 
       * Note2: CLOCK_SOURCE is set via 0=32kHz, 1=16MHz,
       * 2=24MHz, 3=33MHz, 4=48MHz, 5=SLOW, 6=FAST, 7=PLL. 
       * SLOW = 24MHz / (DIV_SLOW + 1), DIV = Bits 16-19
       * FAST = PLL   / (DIV_FAST + 1), DIV = Bits 20-23  source #1, #2, #3, #4: 32kHz (#2 active)  disable PLL  disable PLL power  enable PLL power  enable PLL  source #1, #2, #3, #4: 24MHz (#2 active)  Mono LCD bridge serial clock divider  set ">65MHz" bit  80 MHz = 10/3 * 24MHz  unlock frequencies > 66MHz  repeat setup  wait for relock   80 MHz = (20/3 * 24MHz) / 2  wait for relock  source #1, #2, #3, #4: PLL (#2 active) ******* CPUFREQ_NORMAL = 24MHz without PLL ******* source #1, #2, #3, #4: 24MHz (#2 active)  Mono LCD bridge serial clock divider  clear ">65MHz" bit  disable PLL  disable PLL power ******* CPUFREQ_NORMAL = 30MHz with PLL ******* enable PLL power  enable PLL  source #1, #2, #3, #4: 24MHz (#2 active)  Mono LCD bridge serial clock divider  clear ">65MHz" bit  30 MHz = 5/4 * 24MHz  wait for relock  30 MHz = (5/1 * 24MHz) / 4  wait for relock  source #1, #2, #3, #4: PLL (#2 active) ******* CPUFREQ_NORMAL end ******* source #1, #2, #3, #4: 24MHz (#2 active)  Mono LCD bridge serial clock divider  clear ">65MHz" bit  disable PLL  disable PLL power  !BOOTLOADER || (SANSA_E200 || SANSA_C200 || PHILIPS_SA9200)  set minimum startup configuration  reset all allowed devices  set minimum startup configuration  reset all allowed devices  set minimum startup configuration  reset all allowed devices  set minimum startup configuration  reset all allowed devices  reset all allowed devices  set minimum startup configuration  reset all allowed devices  to be done  to be done  to be done  to be done  reset all allowed devices  Remap the flash ROM on CPU, keep hidden from COP:
         * 0x00000000-0x3fffffff = 0x20000000-0x23ffffff  crt0-pp.S wrote the ram size to the last byte of the first 32MB
           ram bank. See the comment there for how we determine it.  BOOTLOADER  Only the CPU gets here in the bootloader  Use the local vector map  HAVE_BOOTLOADER_USB_MODE  Else the frequency should get changed upon USB connect -
     * decide per-target  Some OF's disable this themselves, others do not and will hang.  HAVE_BOOTLOADER_USB_MODE  !BOOTLOADER  Reboot  Magic used by the c200 OF: 0x23066000
       Magic used by the c200 BL: 0x23066b7b
       In both cases, the OF executes these 2 commands from iram.  wait until reboot kicks in  FIXME: we just need the right buttons  Halt **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Alan Korr
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Rather high priority - place near front  Mini 1st gen only, mini 2nd gen uses iPod 4G code  end IPOD_MINI  except Mini 1st gen, handled above  end CONFIG_KEYPAD == IPOD_4G_PAD  end IRIVER_H10 || IRIVER_H10_5GB  end SANSA_E200  end SANSA_C200  end MROBE_100  end PHILIPS_SA9200  end PHILIPS_HDD1630 || PHILIPS_HDD6330  end SAMSUNG_YHxxx  end PBELL_VIBE500  BOOTLOADER || HAVE_BOOTLOADER_USB_MODE  Cache lines which are not marked as valid can cause memory
         * corruption when there are many writes to and code fetches from
         * cached memory. This workaround points all cache status words past
         * end of RAM and marks them as valid, but not dirty. Since that area
         * is never accessed, the cache lines don't affect anything, and
         * they're effectively discarded. Interrupts must be disabled here
         * because any change they make to cached memory could be discarded.
          Initialising the cache in the iPod bootloader may prevent Rockbox from starting
 * depending on the model  cache init mode  what's this do?  Cache if (addr & mask) >> 16 == (mask & match) >> 16:
     * yes: 0x00000000 - 0x03ffffff
     *  no: 0x04000000 - 0x1fffffff
     * yes: 0x20000000 - 0x23ffffff
     *  no: 0x24000000 - 0x3fffffff
      enable cache  Ensure all cache lines are valid for the next flush. Since this
     * can run from cached RAM, rewriting of cache status words may not
     * be safe and the cache is filled instead by reading.  Note:  Don't start at 0x0, as the compiler thinks it's a
       null pointer dereference and will helpfully blow up the code.  BOOTLOADER || HAVE_BOOTLOADER_USB_MODE  We need this for Sansas since we boost the cpu in their bootloader  NUM_CORES > 1  Note1: The PP5022 PLL must be run at >= 96MHz
       * Bits 20..21 select the post divider (1/2/4/8).
       * PP5026 is similar to PP5022 except it doesn't
       * have this limitation (and the post divider?) 
       * Note2: CLOCK_SOURCE is set via 0=32kHz, 1=16MHz,
       * 2=24MHz, 3=33MHz, 4=48MHz, 5=SLOW, 6=FAST, 7=PLL. 
       * SLOW = 24MHz / (DIV_SLOW + 1), DIV = Bits 16-19
       * FAST = PLL   / (DIV_FAST + 1), DIV = Bits 20-23  source #1, #2, #3, #4: 32kHz (#2 active)  disable PLL  disable PLL power  enable PLL power  enable PLL  source #1, #2, #3, #4: 24MHz (#2 active)  Mono LCD bridge serial clock divider  set ">65MHz" bit  80 MHz = 10/3 * 24MHz  unlock frequencies > 66MHz  repeat setup  wait for relock   80 MHz = (20/3 * 24MHz) / 2  wait for relock  source #1, #2, #3, #4: PLL (#2 active) ******* CPUFREQ_NORMAL = 24MHz without PLL ******* source #1, #2, #3, #4: 24MHz (#2 active)  Mono LCD bridge serial clock divider  clear ">65MHz" bit  disable PLL  disable PLL power ******* CPUFREQ_NORMAL = 30MHz with PLL ******* enable PLL power  enable PLL  source #1, #2, #3, #4: 24MHz (#2 active)  Mono LCD bridge serial clock divider  clear ">65MHz" bit  30 MHz = 5/4 * 24MHz  wait for relock  30 MHz = (5/1 * 24MHz) / 4  wait for relock  source #1, #2, #3, #4: PLL (#2 active) ******* CPUFREQ_NORMAL end ******* source #1, #2, #3, #4: 24MHz (#2 active)  Mono LCD bridge serial clock divider  clear ">65MHz" bit  disable PLL  disable PLL power  !BOOTLOADER || (SANSA_E200 || SANSA_C200 || PHILIPS_SA9200)  set minimum startup configuration  reset all allowed devices  set minimum startup configuration  reset all allowed devices  set minimum startup configuration  reset all allowed devices  set minimum startup configuration  reset all allowed devices  reset all allowed devices  set minimum startup configuration  reset all allowed devices  to be done  to be done  to be done  to be done  reset all allowed devices  Remap the flash ROM on CPU, keep hidden from COP:
         * 0x00000000-0x3fffffff = 0x20000000-0x23ffffff  crt0-pp.S wrote the ram size to the last byte of the first 32MB
           ram bank. See the comment there for how we determine it.  BOOTLOADER  Only the CPU gets here in the bootloader  Use the local vector map  HAVE_BOOTLOADER_USB_MODE  Else the frequency should get changed upon USB connect -
     * decide per-target  Some OF's disable this themselves, others do not and will hang.  HAVE_BOOTLOADER_USB_MODE  !BOOTLOADER  Reboot  Magic used by the c200 OF: 0x23066000
       Magic used by the c200 BL: 0x23066b7b
       In both cases, the OF executes these 2 commands from iram.  wait until reboot kicks in  FIXME: we just need the right buttons  Halt 