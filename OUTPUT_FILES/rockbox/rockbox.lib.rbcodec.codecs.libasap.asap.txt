
 * asap.c - ASAP engine
 *
 * Copyright (C) 2005-2010  Piotr Fusik
 *
 * This file is part of ASAP (Another Slight Atari Player),
 * see http://asap.sourceforge.net
 *
 * ASAP is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * ASAP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ASAP; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  interrupts in the extra POKEY not emulated at the moment  just because some SAP files rely on this  NOT data - ast _ consol; reverse to the POKEY sound  ASAP_ONLY_INFO  ASAP_ONLY_INFO  Loads native module (anything except SAP) and 6502 player routine.  some CMC and clones start with zeros  allow optional info for Raster Music Tracker  seen[i] == TRUE if the track position i has been processed  Calculate the length of the first track. Address of the second track minus
       address of the first track equals the length of the first track in bytes.
       Divide by two to get number of track positions.  error  assert(i == 0xff);  must set fastplay after song durations calculations, so they assume 312  find first instrument  no instrument  skip trailing jumps  no pattern to play  must set fastplay after song durations calculations, so they assume 312  skip trailing stop/jump commands  ASAP_ONLY_SAP  Set up ast  put a CIM at 0xd20a and a return address on stack  50 Atari frames for the initialization routine - some SAPs are self-extracting.  save 6502 state on 6502 stack  RTS will jump to 6502 code that restores the state  PLA  TAY  PLA  TAX  PLA  RTI  ACTIONSCRIPT  ASAP_ONLY_INFO  some modules start with zeros  tax  ldy song2pos,x  ldy #0  jmp init  pha  ldy #<music  ldx #>music  lda #0  jsr player  pla  tay  ldx song2pos,y  ldx #0  lda #2  tay  lda song2pos,y  lda #0  ldx #<music  ldy #>music  jmp player  pha  ldy #<music  ldx #>music  lda #$70  jsr player  pla  tax  lda #0  lda #$60  asl 0  jmp player  lda 0  inc 0  lsr @  bcc player+3  bcs player+6  ldy #1  sty 0  bne player  dec 0  bne player+6  ldy #3  sty 0  bne player+3  pha  ldy #<music  ldx #>music  lda #$70  jsr player  pla  tax  lda #0  lda #0  tax  jmp player  !defined(ASAP_ONLY_SAP) && !defined(ASAP_ONLY_INFO)  "DD/MM/YYYY", "MM/YYYY", "YYYY" -> "YYYY"  C 
 * asap.c - ASAP engine
 *
 * Copyright (C) 2005-2010  Piotr Fusik
 *
 * This file is part of ASAP (Another Slight Atari Player),
 * see http://asap.sourceforge.net
 *
 * ASAP is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * ASAP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ASAP; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  interrupts in the extra POKEY not emulated at the moment  just because some SAP files rely on this  NOT data - ast _ consol; reverse to the POKEY sound  ASAP_ONLY_INFO  ASAP_ONLY_INFO  Loads native module (anything except SAP) and 6502 player routine.  some CMC and clones start with zeros  allow optional info for Raster Music Tracker  seen[i] == TRUE if the track position i has been processed  Calculate the length of the first track. Address of the second track minus
       address of the first track equals the length of the first track in bytes.
       Divide by two to get number of track positions.  error  assert(i == 0xff);  must set fastplay after song durations calculations, so they assume 312  find first instrument  no instrument  skip trailing jumps  no pattern to play  must set fastplay after song durations calculations, so they assume 312  skip trailing stop/jump commands  ASAP_ONLY_SAP  Set up ast  put a CIM at 0xd20a and a return address on stack  50 Atari frames for the initialization routine - some SAPs are self-extracting.  save 6502 state on 6502 stack  RTS will jump to 6502 code that restores the state  PLA  TAY  PLA  TAX  PLA  RTI  ACTIONSCRIPT  ASAP_ONLY_INFO  some modules start with zeros  tax  ldy song2pos,x  ldy #0  jmp init  pha  ldy #<music  ldx #>music  lda #0  jsr player  pla  tay  ldx song2pos,y  ldx #0  lda #2  tay  lda song2pos,y  lda #0  ldx #<music  ldy #>music  jmp player  pha  ldy #<music  ldx #>music  lda #$70  jsr player  pla  tax  lda #0  lda #$60  asl 0  jmp player  lda 0  inc 0  lsr @  bcc player+3  bcs player+6  ldy #1  sty 0  bne player  dec 0  bne player+6  ldy #3  sty 0  bne player+3  pha  ldy #<music  ldx #>music  lda #$70  jsr player  pla  tax  lda #0  lda #0  tax  jmp player  !defined(ASAP_ONLY_SAP) && !defined(ASAP_ONLY_INFO)  "DD/MM/YYYY", "MM/YYYY", "YYYY" -> "YYYY"  C 
 * asap.c - ASAP engine
 *
 * Copyright (C) 2005-2010  Piotr Fusik
 *
 * This file is part of ASAP (Another Slight Atari Player),
 * see http://asap.sourceforge.net
 *
 * ASAP is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * ASAP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ASAP; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  interrupts in the extra POKEY not emulated at the moment  just because some SAP files rely on this  NOT data - ast _ consol; reverse to the POKEY sound  ASAP_ONLY_INFO  ASAP_ONLY_INFO  Loads native module (anything except SAP) and 6502 player routine.  some CMC and clones start with zeros  allow optional info for Raster Music Tracker  seen[i] == TRUE if the track position i has been processed  Calculate the length of the first track. Address of the second track minus
       address of the first track equals the length of the first track in bytes.
       Divide by two to get number of track positions.  error  assert(i == 0xff);  must set fastplay after song durations calculations, so they assume 312  find first instrument  no instrument  skip trailing jumps  no pattern to play  must set fastplay after song durations calculations, so they assume 312  skip trailing stop/jump commands  ASAP_ONLY_SAP  Set up ast  put a CIM at 0xd20a and a return address on stack  50 Atari frames for the initialization routine - some SAPs are self-extracting.  save 6502 state on 6502 stack  RTS will jump to 6502 code that restores the state  PLA  TAY  PLA  TAX  PLA  RTI  ACTIONSCRIPT  ASAP_ONLY_INFO  some modules start with zeros  tax  ldy song2pos,x  ldy #0  jmp init  pha  ldy #<music  ldx #>music  lda #0  jsr player  pla  tay  ldx song2pos,y  ldx #0  lda #2  tay  lda song2pos,y  lda #0  ldx #<music  ldy #>music  jmp player  pha  ldy #<music  ldx #>music  lda #$70  jsr player  pla  tax  lda #0  lda #$60  asl 0  jmp player  lda 0  inc 0  lsr @  bcc player+3  bcs player+6  ldy #1  sty 0  bne player  dec 0  bne player+6  ldy #3  sty 0  bne player+3  pha  ldy #<music  ldx #>music  lda #$70  jsr player  pla  tax  lda #0  lda #0  tax  jmp player  !defined(ASAP_ONLY_SAP) && !defined(ASAP_ONLY_INFO)  "DD/MM/YYYY", "MM/YYYY", "YYYY" -> "YYYY"  C 