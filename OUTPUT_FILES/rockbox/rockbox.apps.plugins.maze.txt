**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 Matthias Wientapper
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** This is the implementation of a maze generation algorithm.
 * The generated mazes are "perfect", i.e. there is one and only
 * one path from any point in the maze to any other point.
 *
 *
 * The implemented algorithm is called "Depth-First search", the
 * solving is done by a dead-end filler routine.
 *
  key assignments  cell property bits  border tests  we can and should change this to make square boxes initialize the properties  all walls are up  calculate the size variables  start drawing  draw the walls  draw the path  highlight the path  link the cells in the path together  mark start and end  draw current position  update the display  look for neighbours with all walls set up  then choose one  Removes the wall between the cell (x,y) and the cell (nx,ny)  where is our neighbour?  north or south southnorth east or west  east west pop from stack  remove the wall  save our position on the stack  move to the next cell  keep track of visited cells count  toggle the visibility of the path  no need to solve the maze if already solved  work on a copy of the maze  remove walls on start and end point  first, mark all the cells as reachable  start solving  solve by blocking off dead ends -- backward approach  scan for dead ends  found dead end, clear path bit and set all its walls  don't forget the neighbours  copy all the path bits to the maze  mark the maze as solved ******************************** this is the plugin entry point ******************************** Turn off backlight timeout  Seed the RNG  Draw the background  rockbox blue  Initialize and draw the maze  quit plugin  quit plugin  Turn on backlight timeout (revert to settings) **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 Matthias Wientapper
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** This is the implementation of a maze generation algorithm.
 * The generated mazes are "perfect", i.e. there is one and only
 * one path from any point in the maze to any other point.
 *
 *
 * The implemented algorithm is called "Depth-First search", the
 * solving is done by a dead-end filler routine.
 *
  key assignments  cell property bits  border tests  we can and should change this to make square boxes initialize the properties  all walls are up  calculate the size variables  start drawing  draw the walls  draw the path  highlight the path  link the cells in the path together  mark start and end  draw current position  update the display  look for neighbours with all walls set up  then choose one  Removes the wall between the cell (x,y) and the cell (nx,ny)  where is our neighbour?  north or south southnorth east or west  east west pop from stack  remove the wall  save our position on the stack  move to the next cell  keep track of visited cells count  toggle the visibility of the path  no need to solve the maze if already solved  work on a copy of the maze  remove walls on start and end point  first, mark all the cells as reachable  start solving  solve by blocking off dead ends -- backward approach  scan for dead ends  found dead end, clear path bit and set all its walls  don't forget the neighbours  copy all the path bits to the maze  mark the maze as solved ******************************** this is the plugin entry point ******************************** Turn off backlight timeout  Seed the RNG  Draw the background  rockbox blue  Initialize and draw the maze  quit plugin  quit plugin  Turn on backlight timeout (revert to settings) **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 Matthias Wientapper
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** This is the implementation of a maze generation algorithm.
 * The generated mazes are "perfect", i.e. there is one and only
 * one path from any point in the maze to any other point.
 *
 *
 * The implemented algorithm is called "Depth-First search", the
 * solving is done by a dead-end filler routine.
 *
  key assignments  cell property bits  border tests  we can and should change this to make square boxes initialize the properties  all walls are up  calculate the size variables  start drawing  draw the walls  draw the path  highlight the path  link the cells in the path together  mark start and end  draw current position  update the display  look for neighbours with all walls set up  then choose one  Removes the wall between the cell (x,y) and the cell (nx,ny)  where is our neighbour?  north or south southnorth east or west  east west pop from stack  remove the wall  save our position on the stack  move to the next cell  keep track of visited cells count  toggle the visibility of the path  no need to solve the maze if already solved  work on a copy of the maze  remove walls on start and end point  first, mark all the cells as reachable  start solving  solve by blocking off dead ends -- backward approach  scan for dead ends  found dead end, clear path bit and set all its walls  don't forget the neighbours  copy all the path bits to the maze  mark the maze as solved ******************************** this is the plugin entry point ******************************** Turn off backlight timeout  Seed the RNG  Draw the background  rockbox blue  Initialize and draw the maze  quit plugin  quit plugin  Turn on backlight timeout (revert to settings) 