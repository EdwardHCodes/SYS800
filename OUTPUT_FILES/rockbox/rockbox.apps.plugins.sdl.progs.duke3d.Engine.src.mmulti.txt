
 * "Build Engine & Tools" Copyright (c) 1993-1997 Ken Silverman
 * Ken Silverman's official web site: "http://www.advsys.net/ken"
 * See the included license file "BUILDLIC.TXT" for license info.
 * This file has been modified from Ken Silverman's original release
 STL#include <vector>#include "buildqueue.h"addfaz variable addition (you could probs think of something better)addfaz router fix STUN MUST EXTERN 1 ANNOYING VARIABLE FROM GAME  communication between Game and the driver  1-send, 2-get  dest for send, set by get (-1 = no packet)  gametype: 1-serial,2-modem,3-net 
//
// Packet queue data structs
//
typedef struct packet_wrapper
{
	unsigned long packetnumber;
	gcomtype packet;
} PACKETWRAPPER;

typedef PACKETWRAPPER packet_buffer;

unsigned long currentpacketnumber[MAXPLAYERS];

//
// Packet Buffer
//
packet_buffer pBuff[256];

typedef struct 
{
	unsigned char buffer[MAXPACKETSIZE];
}PACKET;
typedef std::vector<PACKET> PacketQueue; Queue of out going packets.PacketQueue outgoingPacketQueue;outgoingPacketQueue.reserve(128); Calculate CRC table  0x1021 = genpoly  clear out the packet ordering	memset(&currentpacketnumber, 0, sizeof(unsigned long) * MAXPLAYERS); Send 1 sub-packet  Send 2 sub-packets  First half-packet  Second half-packet  Point to last packet to save space on bakpacketbuf  Don't do this it keeps '/f4' from working Though /f4 feels weird on my mouse.... slugish is the word...
	long i;

	timeoutcount = datimeoutcount;
	resendagaincount = daresendagaincount;
	for(i=0;i<numplayers;i++) lastsendtime[i] = totalclock;
	 }  2ND half of good double-packet  CRC check  CNT check  single else double packet  GOOD! Take second half of double packet  PACKET WAS GOOD!  Single packet  Double packet  init_network_transport  legacy glibc header workaround...  kopen4load for cfg file.  getticks  eh...why not?  ms between pings at peer-to-peer startup.  only respond to these IPs.  !!! FIXME: See if this would ever block.  !!! FIXME: See if this would send a partial packet. printf("Sent %d byte packet to %s:%d\n", (int) pktsize, static_ipstring(ip), (int) port); Fill this in if the non-blocking socket becomes an issue.  FIXME: Will this ever receive a partial packet?  !!! FIXME: Linux specific?  fill in the addr structure on error... 
     * Reject packets from unallowed IPs. Prevents (ha) DoS attacks and
     *  other confusion...
     if stun is enabledonly accept packets from the current player (itmp) and no one elsereject packets from other playersprintf ("Packet received from %s:%d\n",static_ipstring(*ip), (int) port);if (!valid)
    {
        
        static int unallowed_ip_spam = 0;
        if (unallowed_ip_spam <= 100)
        {
            printf("Packet received from unallowed IP %s:%d\n",
                    static_ipstring(*ip), (int) port);
            if (unallowed_ip_spam == 100)
                printf("(Disabling further unallowed IP spam.)\n");
            unallowed_ip_spam++;
        }
        
        return(0);
    } "connection reset by peer" in winsock   This means that we sent a packet to an unopened port, and  it responded by telling us to piss off. Take them out of the  allowed list. We check gcom so that we don't worry about this  during detection when game might still be loading elsewhere. !!! FIXME: Actually boot player, too. else printf("Got %d byte packet from %s:%d\n", (int) rc, static_ipstring(*ip), (int) port);printf( "IP from client %d", *ip); nothing but whitespace. printf("Got token [%s].\n", retval); set socket to be (non-)blocking.  give socket clearance to broadcast.  !!! FIXME: Might be Linux (not Unix, not BSD, not WinSock) specific.  server init.  client init.  so these don't confuse game after load.  so these don't confuse game after load.  so these don't confuse game after load.  always HEADER_PEER_GREETING (245).  peer to peer init.  player number is based on id, low to high.  !!! FIXME: This is...probably not right. only checking one player at a time worksthis is where special formatting of allow lines comes in    addfaz router fix If this is stun-enabled then don't loop.this is so we don't get unexpected packet errors from players already heard fromaddfaz router/stun addition *Start*this is so we are not dealing with players already heard from.if we've heard from player already.addfaz router/stun addition *End*//addfaz NAT addition *START*////addfaz NAT addition//addfaz NAT addition *END*////addfaz NAT line addition select this slot.  bcast needs this.  make sure they've heard from us at all...  !!! FIXME: Could be fatal if packet is dropped... addfaz router/stun addition (goto next player)addfaz line addition ok, now everyone is talking to you. Sort them into player numbers...  so we sort, too...  blah.  yay for bubble sorting! 
     * Now we're sorted. But, the local player is referred to by both his
     *  player number and player index ZERO, so bump everyone up one to
     *  their actual index and fill in local player as item zero.
     
     * Ok, we should have specific IPs and ports for all players, and
     *  therefore shouldn't broadcast anymore. Disable permission to do so,
     *  just in case, so we aren't flooding the LAN with broadcasted packets.
      we _should_ check that 0 <= ip? <= 255, but it'll fail later anyhow.  portnum specified?  port specified?  interface  we must free this.  that's you.  Should be handled by a udpmode above...  gametype: 1-serial,2-modem,3-net  block while socket drains.  size of new packet.  if you manage to hit this, it'll report no packet avail.  no packet available.  dropped player?  skip player zero, 'cause that's a duplicate of local IP.  dropped player?  skip player zero, 'cause that's a duplicate of local IP.  local player.  dropped player?  FIX_00008: minor protocol error after frags (NET TRANSPORT ERROR: Unknown command 5) Leave it on, since the sendscore() function will trigger that case. This will avoid to fall in the default case on each frag and flood the DOS console with NET TRANSPORT ERROR: Unknown command error messages. sendscore() seems to be an obsolete function, and was probably used in an old netcode architecture that 3drealms forgot to remove. We leave sendscore() in the code anyway since it doesnt seem to break  anything. It's not needed to fix what's not broken... oh well.  end of mmulti.c ... 
 * "Build Engine & Tools" Copyright (c) 1993-1997 Ken Silverman
 * Ken Silverman's official web site: "http://www.advsys.net/ken"
 * See the included license file "BUILDLIC.TXT" for license info.
 * This file has been modified from Ken Silverman's original release
 STL#include <vector>#include "buildqueue.h"addfaz variable addition (you could probs think of something better)addfaz router fix STUN MUST EXTERN 1 ANNOYING VARIABLE FROM GAME  communication between Game and the driver  1-send, 2-get  dest for send, set by get (-1 = no packet)  gametype: 1-serial,2-modem,3-net 
//
// Packet queue data structs
//
typedef struct packet_wrapper
{
	unsigned long packetnumber;
	gcomtype packet;
} PACKETWRAPPER;

typedef PACKETWRAPPER packet_buffer;

unsigned long currentpacketnumber[MAXPLAYERS];

//
// Packet Buffer
//
packet_buffer pBuff[256];

typedef struct 
{
	unsigned char buffer[MAXPACKETSIZE];
}PACKET;
typedef std::vector<PACKET> PacketQueue; Queue of out going packets.PacketQueue outgoingPacketQueue;outgoingPacketQueue.reserve(128); Calculate CRC table  0x1021 = genpoly  clear out the packet ordering	memset(&currentpacketnumber, 0, sizeof(unsigned long) * MAXPLAYERS); Send 1 sub-packet  Send 2 sub-packets  First half-packet  Second half-packet  Point to last packet to save space on bakpacketbuf  Don't do this it keeps '/f4' from working Though /f4 feels weird on my mouse.... slugish is the word...
	long i;

	timeoutcount = datimeoutcount;
	resendagaincount = daresendagaincount;
	for(i=0;i<numplayers;i++) lastsendtime[i] = totalclock;
	 }  2ND half of good double-packet  CRC check  CNT check  single else double packet  GOOD! Take second half of double packet  PACKET WAS GOOD!  Single packet  Double packet  init_network_transport  legacy glibc header workaround...  kopen4load for cfg file.  getticks  eh...why not?  ms between pings at peer-to-peer startup.  only respond to these IPs.  !!! FIXME: See if this would ever block.  !!! FIXME: See if this would send a partial packet. printf("Sent %d byte packet to %s:%d\n", (int) pktsize, static_ipstring(ip), (int) port); Fill this in if the non-blocking socket becomes an issue.  FIXME: Will this ever receive a partial packet?  !!! FIXME: Linux specific?  fill in the addr structure on error... 
     * Reject packets from unallowed IPs. Prevents (ha) DoS attacks and
     *  other confusion...
     if stun is enabledonly accept packets from the current player (itmp) and no one elsereject packets from other playersprintf ("Packet received from %s:%d\n",static_ipstring(*ip), (int) port);if (!valid)
    {
        
        static int unallowed_ip_spam = 0;
        if (unallowed_ip_spam <= 100)
        {
            printf("Packet received from unallowed IP %s:%d\n",
                    static_ipstring(*ip), (int) port);
            if (unallowed_ip_spam == 100)
                printf("(Disabling further unallowed IP spam.)\n");
            unallowed_ip_spam++;
        }
        
        return(0);
    } "connection reset by peer" in winsock   This means that we sent a packet to an unopened port, and  it responded by telling us to piss off. Take them out of the  allowed list. We check gcom so that we don't worry about this  during detection when game might still be loading elsewhere. !!! FIXME: Actually boot player, too. else printf("Got %d byte packet from %s:%d\n", (int) rc, static_ipstring(*ip), (int) port);printf( "IP from client %d", *ip); nothing but whitespace. printf("Got token [%s].\n", retval); set socket to be (non-)blocking.  give socket clearance to broadcast.  !!! FIXME: Might be Linux (not Unix, not BSD, not WinSock) specific.  server init.  client init.  so these don't confuse game after load.  so these don't confuse game after load.  so these don't confuse game after load.  always HEADER_PEER_GREETING (245).  peer to peer init.  player number is based on id, low to high.  !!! FIXME: This is...probably not right. only checking one player at a time worksthis is where special formatting of allow lines comes in    addfaz router fix If this is stun-enabled then don't loop.this is so we don't get unexpected packet errors from players already heard fromaddfaz router/stun addition *Start*this is so we are not dealing with players already heard from.if we've heard from player already.addfaz router/stun addition *End*//addfaz NAT addition *START*////addfaz NAT addition//addfaz NAT addition *END*////addfaz NAT line addition select this slot.  bcast needs this.  make sure they've heard from us at all...  !!! FIXME: Could be fatal if packet is dropped... addfaz router/stun addition (goto next player)addfaz line addition ok, now everyone is talking to you. Sort them into player numbers...  so we sort, too...  blah.  yay for bubble sorting! 
     * Now we're sorted. But, the local player is referred to by both his
     *  player number and player index ZERO, so bump everyone up one to
     *  their actual index and fill in local player as item zero.
     
     * Ok, we should have specific IPs and ports for all players, and
     *  therefore shouldn't broadcast anymore. Disable permission to do so,
     *  just in case, so we aren't flooding the LAN with broadcasted packets.
      we _should_ check that 0 <= ip? <= 255, but it'll fail later anyhow.  portnum specified?  port specified?  interface  we must free this.  that's you.  Should be handled by a udpmode above...  gametype: 1-serial,2-modem,3-net  block while socket drains.  size of new packet.  if you manage to hit this, it'll report no packet avail.  no packet available.  dropped player?  skip player zero, 'cause that's a duplicate of local IP.  dropped player?  skip player zero, 'cause that's a duplicate of local IP.  local player.  dropped player?  FIX_00008: minor protocol error after frags (NET TRANSPORT ERROR: Unknown command 5) Leave it on, since the sendscore() function will trigger that case. This will avoid to fall in the default case on each frag and flood the DOS console with NET TRANSPORT ERROR: Unknown command error messages. sendscore() seems to be an obsolete function, and was probably used in an old netcode architecture that 3drealms forgot to remove. We leave sendscore() in the code anyway since it doesnt seem to break  anything. It's not needed to fix what's not broken... oh well.  end of mmulti.c ... 
 * "Build Engine & Tools" Copyright (c) 1993-1997 Ken Silverman
 * Ken Silverman's official web site: "http://www.advsys.net/ken"
 * See the included license file "BUILDLIC.TXT" for license info.
 * This file has been modified from Ken Silverman's original release
 STL#include <vector>#include "buildqueue.h"addfaz variable addition (you could probs think of something better)addfaz router fix STUN MUST EXTERN 1 ANNOYING VARIABLE FROM GAME  communication between Game and the driver  1-send, 2-get  dest for send, set by get (-1 = no packet)  gametype: 1-serial,2-modem,3-net 
//
// Packet queue data structs
//
typedef struct packet_wrapper
{
	unsigned long packetnumber;
	gcomtype packet;
} PACKETWRAPPER;

typedef PACKETWRAPPER packet_buffer;

unsigned long currentpacketnumber[MAXPLAYERS];

//
// Packet Buffer
//
packet_buffer pBuff[256];

typedef struct 
{
	unsigned char buffer[MAXPACKETSIZE];
}PACKET;
typedef std::vector<PACKET> PacketQueue; Queue of out going packets.PacketQueue outgoingPacketQueue;outgoingPacketQueue.reserve(128); Calculate CRC table  0x1021 = genpoly  clear out the packet ordering	memset(&currentpacketnumber, 0, sizeof(unsigned long) * MAXPLAYERS); Send 1 sub-packet  Send 2 sub-packets  First half-packet  Second half-packet  Point to last packet to save space on bakpacketbuf  Don't do this it keeps '/f4' from working Though /f4 feels weird on my mouse.... slugish is the word...
	long i;

	timeoutcount = datimeoutcount;
	resendagaincount = daresendagaincount;
	for(i=0;i<numplayers;i++) lastsendtime[i] = totalclock;
	 }  2ND half of good double-packet  CRC check  CNT check  single else double packet  GOOD! Take second half of double packet  PACKET WAS GOOD!  Single packet  Double packet  init_network_transport  legacy glibc header workaround...  kopen4load for cfg file.  getticks  eh...why not?  ms between pings at peer-to-peer startup.  only respond to these IPs.  !!! FIXME: See if this would ever block.  !!! FIXME: See if this would send a partial packet. printf("Sent %d byte packet to %s:%d\n", (int) pktsize, static_ipstring(ip), (int) port); Fill this in if the non-blocking socket becomes an issue.  FIXME: Will this ever receive a partial packet?  !!! FIXME: Linux specific?  fill in the addr structure on error... 
     * Reject packets from unallowed IPs. Prevents (ha) DoS attacks and
     *  other confusion...
     if stun is enabledonly accept packets from the current player (itmp) and no one elsereject packets from other playersprintf ("Packet received from %s:%d\n",static_ipstring(*ip), (int) port);if (!valid)
    {
        
        static int unallowed_ip_spam = 0;
        if (unallowed_ip_spam <= 100)
        {
            printf("Packet received from unallowed IP %s:%d\n",
                    static_ipstring(*ip), (int) port);
            if (unallowed_ip_spam == 100)
                printf("(Disabling further unallowed IP spam.)\n");
            unallowed_ip_spam++;
        }
        
        return(0);
    } "connection reset by peer" in winsock   This means that we sent a packet to an unopened port, and  it responded by telling us to piss off. Take them out of the  allowed list. We check gcom so that we don't worry about this  during detection when game might still be loading elsewhere. !!! FIXME: Actually boot player, too. else printf("Got %d byte packet from %s:%d\n", (int) rc, static_ipstring(*ip), (int) port);printf( "IP from client %d", *ip); nothing but whitespace. printf("Got token [%s].\n", retval); set socket to be (non-)blocking.  give socket clearance to broadcast.  !!! FIXME: Might be Linux (not Unix, not BSD, not WinSock) specific.  server init.  client init.  so these don't confuse game after load.  so these don't confuse game after load.  so these don't confuse game after load.  always HEADER_PEER_GREETING (245).  peer to peer init.  player number is based on id, low to high.  !!! FIXME: This is...probably not right. only checking one player at a time worksthis is where special formatting of allow lines comes in    addfaz router fix If this is stun-enabled then don't loop.this is so we don't get unexpected packet errors from players already heard fromaddfaz router/stun addition *Start*this is so we are not dealing with players already heard from.if we've heard from player already.addfaz router/stun addition *End*//addfaz NAT addition *START*////addfaz NAT addition//addfaz NAT addition *END*////addfaz NAT line addition select this slot.  bcast needs this.  make sure they've heard from us at all...  !!! FIXME: Could be fatal if packet is dropped... addfaz router/stun addition (goto next player)addfaz line addition ok, now everyone is talking to you. Sort them into player numbers...  so we sort, too...  blah.  yay for bubble sorting! 
     * Now we're sorted. But, the local player is referred to by both his
     *  player number and player index ZERO, so bump everyone up one to
     *  their actual index and fill in local player as item zero.
     
     * Ok, we should have specific IPs and ports for all players, and
     *  therefore shouldn't broadcast anymore. Disable permission to do so,
     *  just in case, so we aren't flooding the LAN with broadcasted packets.
      we _should_ check that 0 <= ip? <= 255, but it'll fail later anyhow.  portnum specified?  port specified?  interface  we must free this.  that's you.  Should be handled by a udpmode above...  gametype: 1-serial,2-modem,3-net  block while socket drains.  size of new packet.  if you manage to hit this, it'll report no packet avail.  no packet available.  dropped player?  skip player zero, 'cause that's a duplicate of local IP.  dropped player?  skip player zero, 'cause that's a duplicate of local IP.  local player.  dropped player?  FIX_00008: minor protocol error after frags (NET TRANSPORT ERROR: Unknown command 5) Leave it on, since the sendscore() function will trigger that case. This will avoid to fall in the default case on each frag and flood the DOS console with NET TRANSPORT ERROR: Unknown command error messages. sendscore() seems to be an obsolete function, and was probably used in an old netcode architecture that 3drealms forgot to remove. We leave sendscore() in the code anyway since it doesnt seem to break  anything. It's not needed to fix what's not broken... oh well.  end of mmulti.c ... 