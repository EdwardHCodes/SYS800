**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Jens Arnold
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** The M3 ADC is hooked exclusively to the secondary I²C bus, and requires
 * very slow transfers (I²C clock <= 16kHz). So we start one 4-byte read
 * transfer each tick, and handle it via an ISR. At 11MHz, one transfer
 * takes too long to be started every tick, but it seems we have to live 
 * with that.  Bus is free  Generate START and prepare for write  Send address  Clear interrupt flag  Arbitration lost - shouldn't never happen  Clear flag  STOP  Address phase  No ACK received  STOP  Switch to RX mode, enable TX ack generation  Dummy read  Don't ACK the last byte  STOP before reading the last value  Simplification - the last byte is a dummy.  I²C clock = SYSCLK / 3840  Enable interface  Clear flags  Enable interrupts  INT62 - Priority 4  Ensure valid readings when adc_init returns  The ADC (most probably the PIC12F675) obviously has a slow and buggy I²C
 * implementation. If a transfer is stopped prematurely, it often locks up
 * and doesn't react anymore until the unit is power cycled.  Wait for an ongoing transfer to finish **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Jens Arnold
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** The M3 ADC is hooked exclusively to the secondary I²C bus, and requires
 * very slow transfers (I²C clock <= 16kHz). So we start one 4-byte read
 * transfer each tick, and handle it via an ISR. At 11MHz, one transfer
 * takes too long to be started every tick, but it seems we have to live 
 * with that.  Bus is free  Generate START and prepare for write  Send address  Clear interrupt flag  Arbitration lost - shouldn't never happen  Clear flag  STOP  Address phase  No ACK received  STOP  Switch to RX mode, enable TX ack generation  Dummy read  Don't ACK the last byte  STOP before reading the last value  Simplification - the last byte is a dummy.  I²C clock = SYSCLK / 3840  Enable interface  Clear flags  Enable interrupts  INT62 - Priority 4  Ensure valid readings when adc_init returns  The ADC (most probably the PIC12F675) obviously has a slow and buggy I²C
 * implementation. If a transfer is stopped prematurely, it often locks up
 * and doesn't react anymore until the unit is power cycled.  Wait for an ongoing transfer to finish **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Jens Arnold
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** The M3 ADC is hooked exclusively to the secondary I²C bus, and requires
 * very slow transfers (I²C clock <= 16kHz). So we start one 4-byte read
 * transfer each tick, and handle it via an ISR. At 11MHz, one transfer
 * takes too long to be started every tick, but it seems we have to live 
 * with that.  Bus is free  Generate START and prepare for write  Send address  Clear interrupt flag  Arbitration lost - shouldn't never happen  Clear flag  STOP  Address phase  No ACK received  STOP  Switch to RX mode, enable TX ack generation  Dummy read  Don't ACK the last byte  STOP before reading the last value  Simplification - the last byte is a dummy.  I²C clock = SYSCLK / 3840  Enable interface  Clear flags  Enable interrupts  INT62 - Priority 4  Ensure valid readings when adc_init returns  The ADC (most probably the PIC12F675) obviously has a slow and buggy I²C
 * implementation. If a transfer is stopped prematurely, it often locks up
 * and doesn't react anymore until the unit is power cycled.  Wait for an ongoing transfer to finish 