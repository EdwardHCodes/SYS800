**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2003 Mat Holton
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
Snake2!

Board consists of a WIDTHxHEIGHT grid. If board element is 0 then nothing is
there otherwise it is part of the snake or a wall.

Head and Tail are stored

Modifier for porting on other screens x-coord of the upperleft item (game type)  x-coord of the upperright item (maze type)  x-coord of the lowerleft item (speed)  x-coord of the lowerright item (hi-score)  y-coord of the top row of items  y-coord of the bottom row of items Modifier for porting on other screens x-coord of the upperleft item (game type)  x-coord of the upperright item (maze type)  x-coord of the lowerleft item (speed)  x-coord of the lowerright item (hi-score)  y-coord of the top row of items  y-coord of the bottom row of items  variable button definitions Board itself - 2D int array
  Buffer for sorting movement (in case user presses two movements during a
  single frame
 used for string width, height for orientation purposes  Larger than WIDTH, to allow for whitespace after the
                     lines  Init the level_cache pointer and
       calculate how many levels that will fit  open file  Separator? 
** Completely clear the board of walls and/or snake

** Gets the currently chosen direction from the first place
** in the direction buffer. If there is something in the
** next part of the buffer then that is moved to the first place
if 1st place is emptyreturn this directionnow see if one needs moving:there's a move waiting to be done
              so move it into the space:
** Sets the direction
if 1st place is emptyuse 1st space:use 2nd space:Create a small snake to start off with
** Draws the apple. If it doesn't exist then
** a new one get's created.

    * x x *
    * x x *
    * x x *
    * x x *

    * * * *
    X X X X
    X X X X
    * * * *

    * * * *
    * * X X
    * X X X
    * X X *

   * * * *
   * * X X
   * X X X
   * X X *

   * * * *
   X X * *
   X X X *
   * X X *

   * * * *
   X X * *
   X X X *
   * X X *

   * X X *
   * X X X
   * * X X
   * * * *

   * X X *
   * X X X
   * * X X
   * * * *

   * X X *
   X X X *
   X X * *
   * * * *

   * X X *
   X X X *
   X X * *
   * * * *
 unused 
** Draws a wall/obsticals
TODO: Load levels from file!top and bottom lineleft and right linescorners:
** Redraw the entire board

** Draws the snake bit described by nCurrentBit at position x/y
** deciding whether it's a corner bit by examing the nPrevious bit

** Death 'sequence' and end game stuff.

** Check for collision. TODO: Currently this
** sets of the death sequence. What we want is it to only return a true/false
** depending on whether a collision occured.
and increase the number of apples to pick up
                        before level changesthis actually sets the dir variable.draw headclear tail
      now redraw the bit that was
      the tail, to something snake-like:
     main loop:it has, great set frames to a positive value again: Lets use the default font Start Game:**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2003 Mat Holton
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
Snake2!

Board consists of a WIDTHxHEIGHT grid. If board element is 0 then nothing is
there otherwise it is part of the snake or a wall.

Head and Tail are stored

Modifier for porting on other screens x-coord of the upperleft item (game type)  x-coord of the upperright item (maze type)  x-coord of the lowerleft item (speed)  x-coord of the lowerright item (hi-score)  y-coord of the top row of items  y-coord of the bottom row of items Modifier for porting on other screens x-coord of the upperleft item (game type)  x-coord of the upperright item (maze type)  x-coord of the lowerleft item (speed)  x-coord of the lowerright item (hi-score)  y-coord of the top row of items  y-coord of the bottom row of items  variable button definitions Board itself - 2D int array
  Buffer for sorting movement (in case user presses two movements during a
  single frame
 used for string width, height for orientation purposes  Larger than WIDTH, to allow for whitespace after the
                     lines  Init the level_cache pointer and
       calculate how many levels that will fit  open file  Separator? 
** Completely clear the board of walls and/or snake

** Gets the currently chosen direction from the first place
** in the direction buffer. If there is something in the
** next part of the buffer then that is moved to the first place
if 1st place is emptyreturn this directionnow see if one needs moving:there's a move waiting to be done
              so move it into the space:
** Sets the direction
if 1st place is emptyuse 1st space:use 2nd space:Create a small snake to start off with
** Draws the apple. If it doesn't exist then
** a new one get's created.

    * x x *
    * x x *
    * x x *
    * x x *

    * * * *
    X X X X
    X X X X
    * * * *

    * * * *
    * * X X
    * X X X
    * X X *

   * * * *
   * * X X
   * X X X
   * X X *

   * * * *
   X X * *
   X X X *
   * X X *

   * * * *
   X X * *
   X X X *
   * X X *

   * X X *
   * X X X
   * * X X
   * * * *

   * X X *
   * X X X
   * * X X
   * * * *

   * X X *
   X X X *
   X X * *
   * * * *

   * X X *
   X X X *
   X X * *
   * * * *
 unused 
** Draws a wall/obsticals
TODO: Load levels from file!top and bottom lineleft and right linescorners:
** Redraw the entire board

** Draws the snake bit described by nCurrentBit at position x/y
** deciding whether it's a corner bit by examing the nPrevious bit

** Death 'sequence' and end game stuff.

** Check for collision. TODO: Currently this
** sets of the death sequence. What we want is it to only return a true/false
** depending on whether a collision occured.
and increase the number of apples to pick up
                        before level changesthis actually sets the dir variable.draw headclear tail
      now redraw the bit that was
      the tail, to something snake-like:
     main loop:it has, great set frames to a positive value again: Lets use the default font Start Game:**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2003 Mat Holton
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
Snake2!

Board consists of a WIDTHxHEIGHT grid. If board element is 0 then nothing is
there otherwise it is part of the snake or a wall.

Head and Tail are stored

Modifier for porting on other screens x-coord of the upperleft item (game type)  x-coord of the upperright item (maze type)  x-coord of the lowerleft item (speed)  x-coord of the lowerright item (hi-score)  y-coord of the top row of items  y-coord of the bottom row of items Modifier for porting on other screens x-coord of the upperleft item (game type)  x-coord of the upperright item (maze type)  x-coord of the lowerleft item (speed)  x-coord of the lowerright item (hi-score)  y-coord of the top row of items  y-coord of the bottom row of items  variable button definitions Board itself - 2D int array
  Buffer for sorting movement (in case user presses two movements during a
  single frame
 used for string width, height for orientation purposes  Larger than WIDTH, to allow for whitespace after the
                     lines  Init the level_cache pointer and
       calculate how many levels that will fit  open file  Separator? 
** Completely clear the board of walls and/or snake

** Gets the currently chosen direction from the first place
** in the direction buffer. If there is something in the
** next part of the buffer then that is moved to the first place
if 1st place is emptyreturn this directionnow see if one needs moving:there's a move waiting to be done
              so move it into the space:
** Sets the direction
if 1st place is emptyuse 1st space:use 2nd space:Create a small snake to start off with
** Draws the apple. If it doesn't exist then
** a new one get's created.

    * x x *
    * x x *
    * x x *
    * x x *

    * * * *
    X X X X
    X X X X
    * * * *

    * * * *
    * * X X
    * X X X
    * X X *

   * * * *
   * * X X
   * X X X
   * X X *

   * * * *
   X X * *
   X X X *
   * X X *

   * * * *
   X X * *
   X X X *
   * X X *

   * X X *
   * X X X
   * * X X
   * * * *

   * X X *
   * X X X
   * * X X
   * * * *

   * X X *
   X X X *
   X X * *
   * * * *

   * X X *
   X X X *
   X X * *
   * * * *
 unused 
** Draws a wall/obsticals
TODO: Load levels from file!top and bottom lineleft and right linescorners:
** Redraw the entire board

** Draws the snake bit described by nCurrentBit at position x/y
** deciding whether it's a corner bit by examing the nPrevious bit

** Death 'sequence' and end game stuff.

** Check for collision. TODO: Currently this
** sets of the death sequence. What we want is it to only return a true/false
** depending on whether a collision occured.
and increase the number of apples to pick up
                        before level changesthis actually sets the dir variable.draw headclear tail
      now redraw the bit that was
      the tail, to something snake-like:
     main loop:it has, great set frames to a positive value again: Lets use the default font Start Game: