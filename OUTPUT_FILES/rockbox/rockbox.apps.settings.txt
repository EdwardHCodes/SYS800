**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Stuart Martin
 * RTC config saving code (C) 2002 by hessu@hes.iki.fi
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** NVRAM stuff, if the target doesnt have NVRAM it is saved in ROCKBOX_DIR /nvram.bin * NVRAM is set out as
[0] 'R'
[1] 'b'
[2] version
[3] stored variable count
[4-7] crc32 checksum
[8-NVRAM_BLOCK_SIZE] data
 min is 8 bytes,magic, ver, vars, crc32  read rtc block  check magic, version  check crc32  all good, so read in the settings  should only happen when new items are added to the end  magic, version  count and crc32  FIXME: okay, it _would_ be cleaner and faster to implement rtc_write so
       that it would write a number of bytes at a time since the RTC chip
       supports that, but this will have to do for now 8-) * Reading from a config file *
 * load settings from disk or RTC RAM
  atoi breaks choice settings because they
                                 * don't have int-like values, and would
                                 * fall back to the first value (i.e. 0)
                                 * due to atoi  if (!strcmp(name,settings[i].cfg_name))  for(...)  while(...) * Writing to a config file and saving settings *setting_id switch ()  for(...) 
 * persist all runtime user settings to disk or RTC RAM
  this will be done in the storage_callback if
       target doesnt have rtc ram  this will be done in the storage_callback if
       target doesnt have rtc ram  allow user to modify filename * Apply and Reset settings *
 * Applies the range infos stored in global_settings to
 * the peak meter.
  depending on the scale mode (dBfs or percent) the values
       of global_settings.peak_meter_dbfs have different meanings  convert to dBfs * 100           percent is stored directly -> no conversion  apply the range  AUDIOHW_HAVE_EQ_FREQUENCY  AUDIOHW_HAVE_EQ_WIDTH  HAVE_REMOTE_LCD  only call if it's really exchangable  refresh after flipping the screen  fonts need to be loaded before the WPS  use voice of same language  load the icon set  before crossfade  Configure software equalizer, hardware eq is handled in audio_init()  HAVE_BACKLIGHT  This should stay last  already called with THEME_STATUSBAR in settings_apply_skins() 
 * reset all settings to their default value
 * Changing setting values *
 * Takes filename, removes the directory and the extension,
 * and then copies the basename into setting, unless the basename exceeds maxlen
 * error if filename isn't in ROCKBOX_DIR **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Stuart Martin
 * RTC config saving code (C) 2002 by hessu@hes.iki.fi
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** NVRAM stuff, if the target doesnt have NVRAM it is saved in ROCKBOX_DIR /nvram.bin * NVRAM is set out as
[0] 'R'
[1] 'b'
[2] version
[3] stored variable count
[4-7] crc32 checksum
[8-NVRAM_BLOCK_SIZE] data
 min is 8 bytes,magic, ver, vars, crc32  read rtc block  check magic, version  check crc32  all good, so read in the settings  should only happen when new items are added to the end  magic, version  count and crc32  FIXME: okay, it _would_ be cleaner and faster to implement rtc_write so
       that it would write a number of bytes at a time since the RTC chip
       supports that, but this will have to do for now 8-) * Reading from a config file *
 * load settings from disk or RTC RAM
  atoi breaks choice settings because they
                                 * don't have int-like values, and would
                                 * fall back to the first value (i.e. 0)
                                 * due to atoi  if (!strcmp(name,settings[i].cfg_name))  for(...)  while(...) * Writing to a config file and saving settings *setting_id switch ()  for(...) 
 * persist all runtime user settings to disk or RTC RAM
  this will be done in the storage_callback if
       target doesnt have rtc ram  this will be done in the storage_callback if
       target doesnt have rtc ram  allow user to modify filename * Apply and Reset settings *
 * Applies the range infos stored in global_settings to
 * the peak meter.
  depending on the scale mode (dBfs or percent) the values
       of global_settings.peak_meter_dbfs have different meanings  convert to dBfs * 100           percent is stored directly -> no conversion  apply the range  AUDIOHW_HAVE_EQ_FREQUENCY  AUDIOHW_HAVE_EQ_WIDTH  HAVE_REMOTE_LCD  only call if it's really exchangable  refresh after flipping the screen  fonts need to be loaded before the WPS  use voice of same language  load the icon set  before crossfade  Configure software equalizer, hardware eq is handled in audio_init()  HAVE_BACKLIGHT  This should stay last  already called with THEME_STATUSBAR in settings_apply_skins() 
 * reset all settings to their default value
 * Changing setting values *
 * Takes filename, removes the directory and the extension,
 * and then copies the basename into setting, unless the basename exceeds maxlen
 * error if filename isn't in ROCKBOX_DIR **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Stuart Martin
 * RTC config saving code (C) 2002 by hessu@hes.iki.fi
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** NVRAM stuff, if the target doesnt have NVRAM it is saved in ROCKBOX_DIR /nvram.bin * NVRAM is set out as
[0] 'R'
[1] 'b'
[2] version
[3] stored variable count
[4-7] crc32 checksum
[8-NVRAM_BLOCK_SIZE] data
 min is 8 bytes,magic, ver, vars, crc32  read rtc block  check magic, version  check crc32  all good, so read in the settings  should only happen when new items are added to the end  magic, version  count and crc32  FIXME: okay, it _would_ be cleaner and faster to implement rtc_write so
       that it would write a number of bytes at a time since the RTC chip
       supports that, but this will have to do for now 8-) * Reading from a config file *
 * load settings from disk or RTC RAM
  atoi breaks choice settings because they
                                 * don't have int-like values, and would
                                 * fall back to the first value (i.e. 0)
                                 * due to atoi  if (!strcmp(name,settings[i].cfg_name))  for(...)  while(...) * Writing to a config file and saving settings *setting_id switch ()  for(...) 
 * persist all runtime user settings to disk or RTC RAM
  this will be done in the storage_callback if
       target doesnt have rtc ram  this will be done in the storage_callback if
       target doesnt have rtc ram  allow user to modify filename * Apply and Reset settings *
 * Applies the range infos stored in global_settings to
 * the peak meter.
  depending on the scale mode (dBfs or percent) the values
       of global_settings.peak_meter_dbfs have different meanings  convert to dBfs * 100           percent is stored directly -> no conversion  apply the range  AUDIOHW_HAVE_EQ_FREQUENCY  AUDIOHW_HAVE_EQ_WIDTH  HAVE_REMOTE_LCD  only call if it's really exchangable  refresh after flipping the screen  fonts need to be loaded before the WPS  use voice of same language  load the icon set  before crossfade  Configure software equalizer, hardware eq is handled in audio_init()  HAVE_BACKLIGHT  This should stay last  already called with THEME_STATUSBAR in settings_apply_skins() 
 * reset all settings to their default value
 * Changing setting values *
 * Takes filename, removes the directory and the extension,
 * and then copies the basename into setting, unless the basename exceeds maxlen
 * error if filename isn't in ROCKBOX_DIR 