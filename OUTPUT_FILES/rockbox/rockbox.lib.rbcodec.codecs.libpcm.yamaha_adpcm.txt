**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 Yoshihisa Uchida
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * YAMAHA ADPCM
 *
 * References
 * [1] YAMAHA, YAMAHA ADPCM ACM Driver Version 1.0.0.0, 2005
 * [2] BlendWorks, YM2608 ADPCM,
 *     http://web.archive.org/web/20050208190547/www.memb.jp/~dearna/ma/ym2608/adpcm.html
 * [3] Naoyuki Sawa, ADPCM no shikumi #1,
 *     http://www.piece-me.org/piece-lab/adpcm/adpcm1.html
 * [4] ffmpeg source code, libavcodec/adpcm.c
  ADPCM data block layout
 *
 * when the block header exists. (for example, encoding by YAMAHA ADPCM ACM Driver)
 *    blockAlign = (frequency / 60 + 4) * channels.
 *
 *    block
 *       <Mono> (channels = 1)
 *          int16_t   first value (Little endian)
 *          uint16_t  first predictor (Little endian)
 *          uint8_t   ADPCM data (1st data: 0-3 bit, 2nd data: 4-7 bit)
 *          ....
 *
 *       <Stereo> (channels = 2)
 *          int16_t   Left channel first value (Little endian)
 *          uint16_t  Left channel first predictor (Little endian)
 *          int16_t   Right channel first value (Little endian)
 *          uint16_t  Right channel first predictor (Little endian)
 *          uint8_t   ADPCM data (Left channel: 0-3 bit, Right channel: 4-7 bit)
 *          ....
 *
 * when the block header does not exist. (for example, encoding by ffmpeg)
 *    blockAlign = 8000
 *
 *    block
 *       <Mono> (channels = 1)
 *          uint8_t   ADPCM data (1st data: 0-3 bit, 2nd data: 4-7 bit)
 *          ....
 *
 *       <Stereo> (channels = 2)
 *          uint8_t   ADPCM data (Left channel: 0-3 bit, Right channel: 4-7 bit)
 *          ....
  check exists block header  chunksize = about 1/30 [sec] data  blockalign = 2 * channels samples  chunksize = about 1/32[sec] data  initialize seek table  add first data  read block header  read block data  initialize first step, pcm data **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 Yoshihisa Uchida
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * YAMAHA ADPCM
 *
 * References
 * [1] YAMAHA, YAMAHA ADPCM ACM Driver Version 1.0.0.0, 2005
 * [2] BlendWorks, YM2608 ADPCM,
 *     http://web.archive.org/web/20050208190547/www.memb.jp/~dearna/ma/ym2608/adpcm.html
 * [3] Naoyuki Sawa, ADPCM no shikumi #1,
 *     http://www.piece-me.org/piece-lab/adpcm/adpcm1.html
 * [4] ffmpeg source code, libavcodec/adpcm.c
  ADPCM data block layout
 *
 * when the block header exists. (for example, encoding by YAMAHA ADPCM ACM Driver)
 *    blockAlign = (frequency / 60 + 4) * channels.
 *
 *    block
 *       <Mono> (channels = 1)
 *          int16_t   first value (Little endian)
 *          uint16_t  first predictor (Little endian)
 *          uint8_t   ADPCM data (1st data: 0-3 bit, 2nd data: 4-7 bit)
 *          ....
 *
 *       <Stereo> (channels = 2)
 *          int16_t   Left channel first value (Little endian)
 *          uint16_t  Left channel first predictor (Little endian)
 *          int16_t   Right channel first value (Little endian)
 *          uint16_t  Right channel first predictor (Little endian)
 *          uint8_t   ADPCM data (Left channel: 0-3 bit, Right channel: 4-7 bit)
 *          ....
 *
 * when the block header does not exist. (for example, encoding by ffmpeg)
 *    blockAlign = 8000
 *
 *    block
 *       <Mono> (channels = 1)
 *          uint8_t   ADPCM data (1st data: 0-3 bit, 2nd data: 4-7 bit)
 *          ....
 *
 *       <Stereo> (channels = 2)
 *          uint8_t   ADPCM data (Left channel: 0-3 bit, Right channel: 4-7 bit)
 *          ....
  check exists block header  chunksize = about 1/30 [sec] data  blockalign = 2 * channels samples  chunksize = about 1/32[sec] data  initialize seek table  add first data  read block header  read block data  initialize first step, pcm data **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 Yoshihisa Uchida
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * YAMAHA ADPCM
 *
 * References
 * [1] YAMAHA, YAMAHA ADPCM ACM Driver Version 1.0.0.0, 2005
 * [2] BlendWorks, YM2608 ADPCM,
 *     http://web.archive.org/web/20050208190547/www.memb.jp/~dearna/ma/ym2608/adpcm.html
 * [3] Naoyuki Sawa, ADPCM no shikumi #1,
 *     http://www.piece-me.org/piece-lab/adpcm/adpcm1.html
 * [4] ffmpeg source code, libavcodec/adpcm.c
  ADPCM data block layout
 *
 * when the block header exists. (for example, encoding by YAMAHA ADPCM ACM Driver)
 *    blockAlign = (frequency / 60 + 4) * channels.
 *
 *    block
 *       <Mono> (channels = 1)
 *          int16_t   first value (Little endian)
 *          uint16_t  first predictor (Little endian)
 *          uint8_t   ADPCM data (1st data: 0-3 bit, 2nd data: 4-7 bit)
 *          ....
 *
 *       <Stereo> (channels = 2)
 *          int16_t   Left channel first value (Little endian)
 *          uint16_t  Left channel first predictor (Little endian)
 *          int16_t   Right channel first value (Little endian)
 *          uint16_t  Right channel first predictor (Little endian)
 *          uint8_t   ADPCM data (Left channel: 0-3 bit, Right channel: 4-7 bit)
 *          ....
 *
 * when the block header does not exist. (for example, encoding by ffmpeg)
 *    blockAlign = 8000
 *
 *    block
 *       <Mono> (channels = 1)
 *          uint8_t   ADPCM data (1st data: 0-3 bit, 2nd data: 4-7 bit)
 *          ....
 *
 *       <Stereo> (channels = 2)
 *          uint8_t   ADPCM data (Left channel: 0-3 bit, Right channel: 4-7 bit)
 *          ....
  check exists block header  chunksize = about 1/30 [sec] data  blockalign = 2 * channels samples  chunksize = about 1/32[sec] data  initialize seek table  add first data  read block header  read block data  initialize first step, pcm data 