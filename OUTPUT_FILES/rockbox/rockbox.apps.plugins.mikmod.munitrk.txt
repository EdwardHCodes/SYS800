	MikMod sound library
	(c) 1998, 1999, 2000, 2001 Miodrag Vallat and others - see file AUTHORS
	for complete list.

	This library is free software; you can redistribute it and/or modify
	it under the terms of the GNU Library General Public License as
	published by the Free Software Foundation; either version 2 of
	the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Library General Public License for more details.

	You should have received a copy of the GNU Library General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
	02111-1307, USA.
==============================================================================

  $Id$

  All routines dealing with the manipulation of UNITRK streams

============================================================================== Unibuffer chunk size  not used  UNI_NOTE  UNI_INSTRUMENT  UNI_PTEFFECT0  UNI_PTEFFECT1  UNI_PTEFFECT2  UNI_PTEFFECT3  UNI_PTEFFECT4  UNI_PTEFFECT5  UNI_PTEFFECT6  UNI_PTEFFECT7  UNI_PTEFFECT8  UNI_PTEFFECT9  UNI_PTEFFECTA  UNI_PTEFFECTB  UNI_PTEFFECTC  UNI_PTEFFECTD  UNI_PTEFFECTE  UNI_PTEFFECTF  UNI_S3MEFFECTA  UNI_S3MEFFECTD  UNI_S3MEFFECTE  UNI_S3MEFFECTF  UNI_S3MEFFECTI  UNI_S3MEFFECTQ  UNI_S3MEFFECTR  UNI_S3MEFFECTT  UNI_S3MEFFECTU  UNI_KEYOFF  UNI_KEYFADE  UNI_VOLEFFECTS  UNI_XMEFFECT4  UNI_XMEFFECT6  UNI_XMEFFECTA  UNI_XMEFFECTE1  UNI_XMEFFECTE2  UNI_XMEFFECTEA  UNI_XMEFFECTEB  UNI_XMEFFECTG  UNI_XMEFFECTH  UNI_XMEFFECTL  UNI_XMEFFECTP  UNI_XMEFFECTX1  UNI_XMEFFECTX2  UNI_ITEFFECTG  UNI_ITEFFECTH  UNI_ITEFFECTI  UNI_ITEFFECTM  UNI_ITEFFECTN  UNI_ITEFFECTP  UNI_ITEFFECTT  UNI_ITEFFECTU  UNI_ITEFFECTW  UNI_ITEFFECTY  UNI_ITEFFECTZ  UNI_ITEFFECTS0  UNI_ULTEFFECT9  UNI_MEDSPEED  UNI_MEDEFFECTF1  UNI_MEDEFFECTF2  UNI_MEDEFFECTF3  UNI_OKTARP  Sparse description of the internal module format
   ------------------------------------------------

  A UNITRK stream is an array of bytes representing a single track of a pattern.
It's made up of 'repeat/length' bytes, opcodes and operands (sort of a assembly
language):

rrrlllll
[REP/LEN][OPCODE][OPERAND][OPCODE][OPERAND] [REP/LEN][OPCODE][OPERAND]..
^                                         ^ ^
|-------ROWS 0 - 0+REP of a track---------| |-------ROWS xx - xx+REP of a track...

  The rep/len byte contains the number of bytes in the current row, _including_
the length byte itself (So the LENGTH byte of row 0 in the previous example
would have a value of 5). This makes it easy to search through a stream for a
particular row. A track is concluded by a 0-value length byte.

  The upper 3 bits of the rep/len byte contain the number of times -1 this row
is repeated for this track. (so a value of 7 means this row is repeated 8 times)

  Opcodes can range from 1 to 255 but currently only opcodes 1 to 62 are being
used. Each opcode can have a different number of operands. You can find the
number of operands to a particular opcode by using the opcode as an index into
the 'unioperands' table.

========== Reading routines  startadress of a row  endaddress of a row (exclusive)  current unimod(tm) programcounter  for UniSkipOpcode()  Finds the address of row number 'row' in the UniMod(tm) stream 't' returns
   NULL if the row can't be found.  get rep/len byte  zero ? -> end of track..  extract repeat value  reached wanted row? -> return pointer  haven't reached row yet.. update row  point t to the next row ========== Writing routines  pointer to the temporary unitrk buffer  buffer size  buffer cursor  current row index  previous row index  Resets index-pointers to create a new track.  reset index to rep/len byte  first opcode will be written to index 1  no previous row yet  clear rep/len byte  Expands the buffer  Expand the buffer by BUFPAGE bytes  Check if MikMod_realloc succeeded  Appends one byte of data to the current row of a track.  write byte to current position and update  Closes the current row of a unitrk stream (updates the rep/len byte) and sets
   pointers to start a new row.  repeat of previous row  length of previous row  length of current row  Now, check if the previous and the current row are identical.. when they
	   are, just increase the repeat field of the previous row  current and previous row aren't equal... update the pointers  Terminates the current unitrk stream and returns a pointer to a copy of the
   stream.  ex:set ts=4: 	MikMod sound library
	(c) 1998, 1999, 2000, 2001 Miodrag Vallat and others - see file AUTHORS
	for complete list.

	This library is free software; you can redistribute it and/or modify
	it under the terms of the GNU Library General Public License as
	published by the Free Software Foundation; either version 2 of
	the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Library General Public License for more details.

	You should have received a copy of the GNU Library General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
	02111-1307, USA.
==============================================================================

  $Id$

  All routines dealing with the manipulation of UNITRK streams

============================================================================== Unibuffer chunk size  not used  UNI_NOTE  UNI_INSTRUMENT  UNI_PTEFFECT0  UNI_PTEFFECT1  UNI_PTEFFECT2  UNI_PTEFFECT3  UNI_PTEFFECT4  UNI_PTEFFECT5  UNI_PTEFFECT6  UNI_PTEFFECT7  UNI_PTEFFECT8  UNI_PTEFFECT9  UNI_PTEFFECTA  UNI_PTEFFECTB  UNI_PTEFFECTC  UNI_PTEFFECTD  UNI_PTEFFECTE  UNI_PTEFFECTF  UNI_S3MEFFECTA  UNI_S3MEFFECTD  UNI_S3MEFFECTE  UNI_S3MEFFECTF  UNI_S3MEFFECTI  UNI_S3MEFFECTQ  UNI_S3MEFFECTR  UNI_S3MEFFECTT  UNI_S3MEFFECTU  UNI_KEYOFF  UNI_KEYFADE  UNI_VOLEFFECTS  UNI_XMEFFECT4  UNI_XMEFFECT6  UNI_XMEFFECTA  UNI_XMEFFECTE1  UNI_XMEFFECTE2  UNI_XMEFFECTEA  UNI_XMEFFECTEB  UNI_XMEFFECTG  UNI_XMEFFECTH  UNI_XMEFFECTL  UNI_XMEFFECTP  UNI_XMEFFECTX1  UNI_XMEFFECTX2  UNI_ITEFFECTG  UNI_ITEFFECTH  UNI_ITEFFECTI  UNI_ITEFFECTM  UNI_ITEFFECTN  UNI_ITEFFECTP  UNI_ITEFFECTT  UNI_ITEFFECTU  UNI_ITEFFECTW  UNI_ITEFFECTY  UNI_ITEFFECTZ  UNI_ITEFFECTS0  UNI_ULTEFFECT9  UNI_MEDSPEED  UNI_MEDEFFECTF1  UNI_MEDEFFECTF2  UNI_MEDEFFECTF3  UNI_OKTARP  Sparse description of the internal module format
   ------------------------------------------------

  A UNITRK stream is an array of bytes representing a single track of a pattern.
It's made up of 'repeat/length' bytes, opcodes and operands (sort of a assembly
language):

rrrlllll
[REP/LEN][OPCODE][OPERAND][OPCODE][OPERAND] [REP/LEN][OPCODE][OPERAND]..
^                                         ^ ^
|-------ROWS 0 - 0+REP of a track---------| |-------ROWS xx - xx+REP of a track...

  The rep/len byte contains the number of bytes in the current row, _including_
the length byte itself (So the LENGTH byte of row 0 in the previous example
would have a value of 5). This makes it easy to search through a stream for a
particular row. A track is concluded by a 0-value length byte.

  The upper 3 bits of the rep/len byte contain the number of times -1 this row
is repeated for this track. (so a value of 7 means this row is repeated 8 times)

  Opcodes can range from 1 to 255 but currently only opcodes 1 to 62 are being
used. Each opcode can have a different number of operands. You can find the
number of operands to a particular opcode by using the opcode as an index into
the 'unioperands' table.

========== Reading routines  startadress of a row  endaddress of a row (exclusive)  current unimod(tm) programcounter  for UniSkipOpcode()  Finds the address of row number 'row' in the UniMod(tm) stream 't' returns
   NULL if the row can't be found.  get rep/len byte  zero ? -> end of track..  extract repeat value  reached wanted row? -> return pointer  haven't reached row yet.. update row  point t to the next row ========== Writing routines  pointer to the temporary unitrk buffer  buffer size  buffer cursor  current row index  previous row index  Resets index-pointers to create a new track.  reset index to rep/len byte  first opcode will be written to index 1  no previous row yet  clear rep/len byte  Expands the buffer  Expand the buffer by BUFPAGE bytes  Check if MikMod_realloc succeeded  Appends one byte of data to the current row of a track.  write byte to current position and update  Closes the current row of a unitrk stream (updates the rep/len byte) and sets
   pointers to start a new row.  repeat of previous row  length of previous row  length of current row  Now, check if the previous and the current row are identical.. when they
	   are, just increase the repeat field of the previous row  current and previous row aren't equal... update the pointers  Terminates the current unitrk stream and returns a pointer to a copy of the
   stream.  ex:set ts=4: 	MikMod sound library
	(c) 1998, 1999, 2000, 2001 Miodrag Vallat and others - see file AUTHORS
	for complete list.

	This library is free software; you can redistribute it and/or modify
	it under the terms of the GNU Library General Public License as
	published by the Free Software Foundation; either version 2 of
	the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Library General Public License for more details.

	You should have received a copy of the GNU Library General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
	02111-1307, USA.
==============================================================================

  $Id$

  All routines dealing with the manipulation of UNITRK streams

============================================================================== Unibuffer chunk size  not used  UNI_NOTE  UNI_INSTRUMENT  UNI_PTEFFECT0  UNI_PTEFFECT1  UNI_PTEFFECT2  UNI_PTEFFECT3  UNI_PTEFFECT4  UNI_PTEFFECT5  UNI_PTEFFECT6  UNI_PTEFFECT7  UNI_PTEFFECT8  UNI_PTEFFECT9  UNI_PTEFFECTA  UNI_PTEFFECTB  UNI_PTEFFECTC  UNI_PTEFFECTD  UNI_PTEFFECTE  UNI_PTEFFECTF  UNI_S3MEFFECTA  UNI_S3MEFFECTD  UNI_S3MEFFECTE  UNI_S3MEFFECTF  UNI_S3MEFFECTI  UNI_S3MEFFECTQ  UNI_S3MEFFECTR  UNI_S3MEFFECTT  UNI_S3MEFFECTU  UNI_KEYOFF  UNI_KEYFADE  UNI_VOLEFFECTS  UNI_XMEFFECT4  UNI_XMEFFECT6  UNI_XMEFFECTA  UNI_XMEFFECTE1  UNI_XMEFFECTE2  UNI_XMEFFECTEA  UNI_XMEFFECTEB  UNI_XMEFFECTG  UNI_XMEFFECTH  UNI_XMEFFECTL  UNI_XMEFFECTP  UNI_XMEFFECTX1  UNI_XMEFFECTX2  UNI_ITEFFECTG  UNI_ITEFFECTH  UNI_ITEFFECTI  UNI_ITEFFECTM  UNI_ITEFFECTN  UNI_ITEFFECTP  UNI_ITEFFECTT  UNI_ITEFFECTU  UNI_ITEFFECTW  UNI_ITEFFECTY  UNI_ITEFFECTZ  UNI_ITEFFECTS0  UNI_ULTEFFECT9  UNI_MEDSPEED  UNI_MEDEFFECTF1  UNI_MEDEFFECTF2  UNI_MEDEFFECTF3  UNI_OKTARP  Sparse description of the internal module format
   ------------------------------------------------

  A UNITRK stream is an array of bytes representing a single track of a pattern.
It's made up of 'repeat/length' bytes, opcodes and operands (sort of a assembly
language):

rrrlllll
[REP/LEN][OPCODE][OPERAND][OPCODE][OPERAND] [REP/LEN][OPCODE][OPERAND]..
^                                         ^ ^
|-------ROWS 0 - 0+REP of a track---------| |-------ROWS xx - xx+REP of a track...

  The rep/len byte contains the number of bytes in the current row, _including_
the length byte itself (So the LENGTH byte of row 0 in the previous example
would have a value of 5). This makes it easy to search through a stream for a
particular row. A track is concluded by a 0-value length byte.

  The upper 3 bits of the rep/len byte contain the number of times -1 this row
is repeated for this track. (so a value of 7 means this row is repeated 8 times)

  Opcodes can range from 1 to 255 but currently only opcodes 1 to 62 are being
used. Each opcode can have a different number of operands. You can find the
number of operands to a particular opcode by using the opcode as an index into
the 'unioperands' table.

========== Reading routines  startadress of a row  endaddress of a row (exclusive)  current unimod(tm) programcounter  for UniSkipOpcode()  Finds the address of row number 'row' in the UniMod(tm) stream 't' returns
   NULL if the row can't be found.  get rep/len byte  zero ? -> end of track..  extract repeat value  reached wanted row? -> return pointer  haven't reached row yet.. update row  point t to the next row ========== Writing routines  pointer to the temporary unitrk buffer  buffer size  buffer cursor  current row index  previous row index  Resets index-pointers to create a new track.  reset index to rep/len byte  first opcode will be written to index 1  no previous row yet  clear rep/len byte  Expands the buffer  Expand the buffer by BUFPAGE bytes  Check if MikMod_realloc succeeded  Appends one byte of data to the current row of a track.  write byte to current position and update  Closes the current row of a unitrk stream (updates the rep/len byte) and sets
   pointers to start a new row.  repeat of previous row  length of previous row  length of current row  Now, check if the previous and the current row are identical.. when they
	   are, just increase the repeat field of the previous row  current and previous row aren't equal... update the pointers  Terminates the current unitrk stream and returns a pointer to a copy of the
   stream.  ex:set ts=4: 