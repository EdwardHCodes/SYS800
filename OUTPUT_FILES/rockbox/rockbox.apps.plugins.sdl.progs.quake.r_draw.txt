
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 r_draw.c FIXME: shouldn't need to include this !!! if these are changed, they must be changed in asm_draw.h too !!! number of faces clipped
================
R_EmitEdge
================
 transform and project FIXME: build x/yscale into transform? transform and project for mipmap finding for right edges, all we want is the effect on 1/z create the edge we cache unclipped horizontal edges as fully clipped horizontal edge trailing edge (go from p1 to p2) leading edge (go from p2 to p1) we need to do this to avoid stepping off the edges if a very nearly horizontal edge is less than epsilon above a scan, and numeric error causes it to incorrectly extend to the scan, and the extension of the line goes off the edge of the screen FIXME: is this actually needed? sort the edge in normally sort trailers after leadersThis is just like R_EmitEdge_fxp, except that the vertex parameters arealready fixed point, and don't need to be converted.float	u, u_step;vec3_t	local, transformed;float	scale, lzi0, u0, v0;lzi0 = r_lzi1;world_fxp=(int)(pv0->position[0]*(float)(2^16)); transform and projectVectorSubtract (world, modelorg, local);Vector Subtract (and convert)TransformVector (local, transformed);transformed_fxp[0] = (int)(local_fxp[0]*vright[0])+(int)(local_fxp[1]*vright[1])+(int)(local_fxp[2]*vright[2]);transformed_fxp[1] = (int)(local_fxp[0]*vup[0])+(int)(local_fxp[1]*vup[1])+(int)(local_fxp[2]*vup[2]);transformed_fxp[2] = (int)(local_fxp[0]*vpn[0])+(int)(local_fxp[1]*vpn[1])+(int)(local_fxp[2]*vpn[2]);13.19 / 24.8 = 21.1121.11->25.721.11->25.721.11->24.8lzi0 = (float)(1.0 / transformed[2]); FIXME: build x/yscale into transform?scale = xscale * lzi0;u0 = (xcenter + scale*transformed[0]);Dan: Is this needed?9.23 / 24.8 = 17.15 25.7 * 17.15 = 10.22scale = yscale * lzi0;v0 = (ycenter - scale*transformed[1]);Dan: Is this needed?9.23 / 24.8 = 17.15 25.7 * 17.15 = 10.22255*8388608;world(pv1->position[0]*(float)(2^16)); transform and projectVectorSubtract (world, modelorg, local);Vector Subtract (and convert)TransformVector (local, transformed);transformed_fxp[0] = ((int)(local_fxp[0]*vright[0]))+((int)(local_fxp[1]*vright[1]))+((int)(local_fxp[2]*vright[2]));transformed_fxp[1] = ((int)(local_fxp[0]*vup[0]))+((int)(local_fxp[1]*vup[1]))+((int)(local_fxp[2]*vup[2]));transformed_fxp[2] = ((int)(local_fxp[0]*vpn[0]))+((int)(local_fxp[1]*vpn[1]))+((int)(local_fxp[2]*vpn[2]));r_lzi1 = (float)(1.0 / transformed[2]);scale = xscale * r_lzi1;Dan: Is this needed?9.23 / 24.8 = 17.15 24.8 * 17.15 = 9.23 //21.11r_u1 = (xcenter + scale*transformed[0]);scale = yscale * r_lzi1;r_v1 = (ycenter - scale*transformed[1]);Dan: Is this needed?9.23 / 24.8 = 17.15 23.9 * 17.15 = 9.23 //21.11if (r_lzi1 > lzi0)	lzi0 = r_lzi1;if (lzi0 > r_nearzi)	// for mipmap finding	r_nearzi = lzi0;128 for mipmap findingif (!lzi0_fxp) r_nearzi=0;else for right edges, all we want is the effect on 1/zr_ceilv1 = (int) ceil(r_v1); create the edge we cache unclipped horizontal edges as fully clipped horizontal edgeDan: Is this needed?256.0 trailing edge (go from p1 to p2)u_step = ((r_u1 - u0) / (r_v1 - v0));u = u0 + ((float)v - v0) * u_step;10.22 / 15.12 = 22.10 leading edge (go from p2 to p1)u_step = ((u0 - r_u1) / (v0 - r_v1));u = r_u1 + ((float)v - r_v1) * u_step;edge->u_step = tmp*0x100000;edge->u = (int)(/*(u_fxp/65536)*0x100000*/u_fxp/4 + 0xFFFFF);/16; //tmp*0x100000;(u_fxp/65536)*0x100000 we need to do this to avoid stepping off the edges if a very nearly horizontal edge is less than epsilon above a scan, and numeric error causes it to incorrectly extend to the scan, and the extension of the line goes off the edge of the screen FIXME: is this actually needed? sort the edge in normally sort trailers after leadersfloat	u, u_step;vec3_t	local, transformed;float	scale, lzi0, u0, v0;lzi0 = r_lzi1;world_fxp=(int)(pv0->position[0]*(float)(2^16)); transform and projectVectorSubtract (world, modelorg, local);Vector Subtract (and convert)TransformVector (local, transformed);transformed_fxp[0] = (int)(local_fxp[0]*vright[0])+(int)(local_fxp[1]*vright[1])+(int)(local_fxp[2]*vright[2]);transformed_fxp[1] = (int)(local_fxp[0]*vup[0])+(int)(local_fxp[1]*vup[1])+(int)(local_fxp[2]*vup[2]);transformed_fxp[2] = (int)(local_fxp[0]*vpn[0])+(int)(local_fxp[1]*vpn[1])+(int)(local_fxp[2]*vpn[2]);transformed_fxp[0]*=256;transformed_fxp[1]*=256;lzi0 = (float)(1.0 / transformed[2]); FIXME: build x/yscale into transform?scale = xscale * lzi0;u0 = (xcenter + scale*transformed[0]);9.23 / 24.8 = 17.15 25.7 * 17.15 = 10.22scale = yscale * lzi0;v0 = (ycenter - scale*transformed[1]);9.23 / 24.8 = 17.15 25.7 * 17.15 = 10.22255*8388608;world(pv1->position[0]*(float)(2^16)); transform and projectVectorSubtract (world, modelorg, local);Vector Subtract (and convert)TransformVector (local, transformed);transformed_fxp[0] = ((int)(local_fxp[0]*vright[0]))+((int)(local_fxp[1]*vright[1]))+((int)(local_fxp[2]*vright[2]));transformed_fxp[1] = ((int)(local_fxp[0]*vup[0]))+((int)(local_fxp[1]*vup[1]))+((int)(local_fxp[2]*vup[2]));transformed_fxp[2] = ((int)(local_fxp[0]*vpn[0]))+((int)(local_fxp[1]*vpn[1]))+((int)(local_fxp[2]*vpn[2]));transformed_fxp[0]*=256;transformed_fxp[1]*=256;transformed_fxp[2]=-transformed_fxp[2];if (transformed[2] < NEAR_CLIP)	transformed[2] = (float)NEAR_CLIP;r_lzi1 = (float)(1.0 / transformed[2]);scale = xscale * r_lzi1;9.23 / 24.8 = 17.15 24.8 * 17.15 = 9.23 //21.11r_u1 = (xcenter + scale*transformed[0]);scale = yscale * r_lzi1;r_v1 = (ycenter - scale*transformed[1]);9.23 / 24.8 = 17.15 23.9 * 17.15 = 9.23 //21.11if (r_lzi1 > lzi0)	lzi0 = r_lzi1;if (lzi0 > r_nearzi)	// for mipmap finding	r_nearzi = lzi0; for mipmap findingif (!lzi0_fxp) r_nearzi=0;else for right edges, all we want is the effect on 1/zr_ceilv1 = (int) ceil(r_v1); create the edge we cache unclipped horizontal edges as fully clipped horizontal edgefloat tmp;int tmp; trailing edge (go from p1 to p2)u_step = ((r_u1 - u0) / (r_v1 - v0));u = u0 + ((float)v - v0) * u_step;10.22 / 15.12 = 22.10tmp=(((r_u1_fxp - u0_fxp)/8388608.0) / ((r_v1_fxp - v0_fxp)/8388608.0));u_step_fxp=(int)(tmp*8388608.0);u_fxp = u0_fxp + (((float)v - v0_fxp/8388608.0) * tmp)*8388608.0;int tmp; leading edge (go from p2 to p1)u_step = ((u0 - r_u1) / (v0 - r_v1));u = r_u1 + ((float)v - r_v1) * u_step;tmp=(((u0_fxp - r_u1_fxp)/8388608.0) / ((v0_fxp - r_v1_fxp)/8388608.0));u_step_fxp = (int)(tmp*8388608.0);u_fxp = r_u1_fxp + (((float)v - r_v1_fxp/8388608.0) * tmp)*8388608.0;edge->u_step = tmp*0x100000;edge->u = (int)(/*(u_fxp/65536)*0x100000*/u_fxp/4 + 0xFFFFF);/16; //tmp*0x100000;(u_fxp/65536)*0x100000 we need to do this to avoid stepping off the edges if a very nearly horizontal edge is less than epsilon above a scan, and numeric error causes it to incorrectly extend to the scan, and the extension of the line goes off the edge of the screen FIXME: is this actually needed? sort the edge in normally sort trailers after leaders12.2013.19 / 20.12 = 25.7d0 = DotProduct (pv0->position, clip->normal) - clip->dist;d1 = DotProduct (pv1->position, clip->normal) - clip->dist; point 0 is unclipped both points are unclipped only point 1 is clipped we don't cache clipped edges(25.7->18.14) / 25.7 = 25.713.19 / 25.7 = 20.12 point 0 is clipped both points are clipped we do cache fully clipped edges only point 0 is clipped we don't cache partially clipped edges12.20 / 20.12 = 24.812.20 / 24.8 = 20.12
{
	mvertex_t p0, p1;
	p0.position[0]=pv0->position[0]/524288.0f;
	p0.position[1]=pv0->position[1]/524288.0f;
	p0.position[2]=pv0->position[2]/524288.0f;
	p1.position[0]=pv1->position[0]/524288.0f;
	p1.position[1]=pv1->position[1]/524288.0f;
	p1.position[2]=pv1->position[2]/524288.0f;
	R_EmitEdge (&p0, &p1);
}
 add the edge
================
R_ClipEdge
================
 point 0 is unclipped both points are unclipped only point 1 is clipped we don't cache clipped edges point 0 is clipped both points are clipped we do cache fully clipped edges only point 0 is clipped we don't cache partially clipped edges add the edge !id386
================
R_EmitCachedEdge
================
 for mipmap finding
================
R_RenderFace
================
 skip out if no more surfs ditto if not enough edges left, or switch to auxedges if possible set up clip planes push the edges through if the edge is cached, we can just reuse the edge assume it's cacheable if the edge is cached, we can just reuse the edge it's cached if the cached edge is valid and is owned by this medge_t assume it's cacheable if there was a clip off the left edge, add that edge too FIXME: faster to do in screen space? FIXME: share clipped edges? if there was a clip off the right edge, get the right r_nearzi if no edges made it out, return without posting the surface FIXME: cache this? FIXME: cache this?JDC	VectorCopy (r_worldmodelorg, surface_p->modelorg);
================
R_RenderBmodelFace
================
 skip out if no more surfs ditto if not enough edges left, or switch to auxedges if possible this is a dummy to give the caching mechanism someplace to write to set up clip planes push the edges through FIXME: keep clipped bmodel edges in clockwise order so last vertex caching can be used? if there was a clip off the left edge, add that edge too FIXME: faster to do in screen space? FIXME: share clipped edges? if there was a clip off the right edge, get the right r_nearzi if no edges made it out, return without posting the surface FIXME: cache this? FIXME: cache this?JDC	VectorCopy (r_worldmodelorg, surface_p->modelorg);
================
R_RenderPoly
================
FIXME: do real numberFIXME: do real number, safely FIXME: clean this up and make it faster FIXME: guard against running out of vertices keep compiler happy set up clip planes reconstruct the polygon FIXME: these should be precalculated and loaded off disk clip the polygon, done if not visible transform and project, remembering the z values at the vertices and r_nearzi, and extract the s and t coordinates at the vertices transform and project for mipmap finding FIXME: build x/yscale into transform? build the polygon descriptor, including fa, r_nearzi, and u, v, s, t, and z for each vertex draw the polygon
================
R_ZDrawSubmodelPolys
================
 find which side of the node we are on draw the polygon FIXME: use bounding-box-based frustum clipping info?
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 r_draw.c FIXME: shouldn't need to include this !!! if these are changed, they must be changed in asm_draw.h too !!! number of faces clipped
================
R_EmitEdge
================
 transform and project FIXME: build x/yscale into transform? transform and project for mipmap finding for right edges, all we want is the effect on 1/z create the edge we cache unclipped horizontal edges as fully clipped horizontal edge trailing edge (go from p1 to p2) leading edge (go from p2 to p1) we need to do this to avoid stepping off the edges if a very nearly horizontal edge is less than epsilon above a scan, and numeric error causes it to incorrectly extend to the scan, and the extension of the line goes off the edge of the screen FIXME: is this actually needed? sort the edge in normally sort trailers after leadersThis is just like R_EmitEdge_fxp, except that the vertex parameters arealready fixed point, and don't need to be converted.float	u, u_step;vec3_t	local, transformed;float	scale, lzi0, u0, v0;lzi0 = r_lzi1;world_fxp=(int)(pv0->position[0]*(float)(2^16)); transform and projectVectorSubtract (world, modelorg, local);Vector Subtract (and convert)TransformVector (local, transformed);transformed_fxp[0] = (int)(local_fxp[0]*vright[0])+(int)(local_fxp[1]*vright[1])+(int)(local_fxp[2]*vright[2]);transformed_fxp[1] = (int)(local_fxp[0]*vup[0])+(int)(local_fxp[1]*vup[1])+(int)(local_fxp[2]*vup[2]);transformed_fxp[2] = (int)(local_fxp[0]*vpn[0])+(int)(local_fxp[1]*vpn[1])+(int)(local_fxp[2]*vpn[2]);13.19 / 24.8 = 21.1121.11->25.721.11->25.721.11->24.8lzi0 = (float)(1.0 / transformed[2]); FIXME: build x/yscale into transform?scale = xscale * lzi0;u0 = (xcenter + scale*transformed[0]);Dan: Is this needed?9.23 / 24.8 = 17.15 25.7 * 17.15 = 10.22scale = yscale * lzi0;v0 = (ycenter - scale*transformed[1]);Dan: Is this needed?9.23 / 24.8 = 17.15 25.7 * 17.15 = 10.22255*8388608;world(pv1->position[0]*(float)(2^16)); transform and projectVectorSubtract (world, modelorg, local);Vector Subtract (and convert)TransformVector (local, transformed);transformed_fxp[0] = ((int)(local_fxp[0]*vright[0]))+((int)(local_fxp[1]*vright[1]))+((int)(local_fxp[2]*vright[2]));transformed_fxp[1] = ((int)(local_fxp[0]*vup[0]))+((int)(local_fxp[1]*vup[1]))+((int)(local_fxp[2]*vup[2]));transformed_fxp[2] = ((int)(local_fxp[0]*vpn[0]))+((int)(local_fxp[1]*vpn[1]))+((int)(local_fxp[2]*vpn[2]));r_lzi1 = (float)(1.0 / transformed[2]);scale = xscale * r_lzi1;Dan: Is this needed?9.23 / 24.8 = 17.15 24.8 * 17.15 = 9.23 //21.11r_u1 = (xcenter + scale*transformed[0]);scale = yscale * r_lzi1;r_v1 = (ycenter - scale*transformed[1]);Dan: Is this needed?9.23 / 24.8 = 17.15 23.9 * 17.15 = 9.23 //21.11if (r_lzi1 > lzi0)	lzi0 = r_lzi1;if (lzi0 > r_nearzi)	// for mipmap finding	r_nearzi = lzi0;128 for mipmap findingif (!lzi0_fxp) r_nearzi=0;else for right edges, all we want is the effect on 1/zr_ceilv1 = (int) ceil(r_v1); create the edge we cache unclipped horizontal edges as fully clipped horizontal edgeDan: Is this needed?256.0 trailing edge (go from p1 to p2)u_step = ((r_u1 - u0) / (r_v1 - v0));u = u0 + ((float)v - v0) * u_step;10.22 / 15.12 = 22.10 leading edge (go from p2 to p1)u_step = ((u0 - r_u1) / (v0 - r_v1));u = r_u1 + ((float)v - r_v1) * u_step;edge->u_step = tmp*0x100000;edge->u = (int)(/*(u_fxp/65536)*0x100000*/u_fxp/4 + 0xFFFFF);/16; //tmp*0x100000;(u_fxp/65536)*0x100000 we need to do this to avoid stepping off the edges if a very nearly horizontal edge is less than epsilon above a scan, and numeric error causes it to incorrectly extend to the scan, and the extension of the line goes off the edge of the screen FIXME: is this actually needed? sort the edge in normally sort trailers after leadersfloat	u, u_step;vec3_t	local, transformed;float	scale, lzi0, u0, v0;lzi0 = r_lzi1;world_fxp=(int)(pv0->position[0]*(float)(2^16)); transform and projectVectorSubtract (world, modelorg, local);Vector Subtract (and convert)TransformVector (local, transformed);transformed_fxp[0] = (int)(local_fxp[0]*vright[0])+(int)(local_fxp[1]*vright[1])+(int)(local_fxp[2]*vright[2]);transformed_fxp[1] = (int)(local_fxp[0]*vup[0])+(int)(local_fxp[1]*vup[1])+(int)(local_fxp[2]*vup[2]);transformed_fxp[2] = (int)(local_fxp[0]*vpn[0])+(int)(local_fxp[1]*vpn[1])+(int)(local_fxp[2]*vpn[2]);transformed_fxp[0]*=256;transformed_fxp[1]*=256;lzi0 = (float)(1.0 / transformed[2]); FIXME: build x/yscale into transform?scale = xscale * lzi0;u0 = (xcenter + scale*transformed[0]);9.23 / 24.8 = 17.15 25.7 * 17.15 = 10.22scale = yscale * lzi0;v0 = (ycenter - scale*transformed[1]);9.23 / 24.8 = 17.15 25.7 * 17.15 = 10.22255*8388608;world(pv1->position[0]*(float)(2^16)); transform and projectVectorSubtract (world, modelorg, local);Vector Subtract (and convert)TransformVector (local, transformed);transformed_fxp[0] = ((int)(local_fxp[0]*vright[0]))+((int)(local_fxp[1]*vright[1]))+((int)(local_fxp[2]*vright[2]));transformed_fxp[1] = ((int)(local_fxp[0]*vup[0]))+((int)(local_fxp[1]*vup[1]))+((int)(local_fxp[2]*vup[2]));transformed_fxp[2] = ((int)(local_fxp[0]*vpn[0]))+((int)(local_fxp[1]*vpn[1]))+((int)(local_fxp[2]*vpn[2]));transformed_fxp[0]*=256;transformed_fxp[1]*=256;transformed_fxp[2]=-transformed_fxp[2];if (transformed[2] < NEAR_CLIP)	transformed[2] = (float)NEAR_CLIP;r_lzi1 = (float)(1.0 / transformed[2]);scale = xscale * r_lzi1;9.23 / 24.8 = 17.15 24.8 * 17.15 = 9.23 //21.11r_u1 = (xcenter + scale*transformed[0]);scale = yscale * r_lzi1;r_v1 = (ycenter - scale*transformed[1]);9.23 / 24.8 = 17.15 23.9 * 17.15 = 9.23 //21.11if (r_lzi1 > lzi0)	lzi0 = r_lzi1;if (lzi0 > r_nearzi)	// for mipmap finding	r_nearzi = lzi0; for mipmap findingif (!lzi0_fxp) r_nearzi=0;else for right edges, all we want is the effect on 1/zr_ceilv1 = (int) ceil(r_v1); create the edge we cache unclipped horizontal edges as fully clipped horizontal edgefloat tmp;int tmp; trailing edge (go from p1 to p2)u_step = ((r_u1 - u0) / (r_v1 - v0));u = u0 + ((float)v - v0) * u_step;10.22 / 15.12 = 22.10tmp=(((r_u1_fxp - u0_fxp)/8388608.0) / ((r_v1_fxp - v0_fxp)/8388608.0));u_step_fxp=(int)(tmp*8388608.0);u_fxp = u0_fxp + (((float)v - v0_fxp/8388608.0) * tmp)*8388608.0;int tmp; leading edge (go from p2 to p1)u_step = ((u0 - r_u1) / (v0 - r_v1));u = r_u1 + ((float)v - r_v1) * u_step;tmp=(((u0_fxp - r_u1_fxp)/8388608.0) / ((v0_fxp - r_v1_fxp)/8388608.0));u_step_fxp = (int)(tmp*8388608.0);u_fxp = r_u1_fxp + (((float)v - r_v1_fxp/8388608.0) * tmp)*8388608.0;edge->u_step = tmp*0x100000;edge->u = (int)(/*(u_fxp/65536)*0x100000*/u_fxp/4 + 0xFFFFF);/16; //tmp*0x100000;(u_fxp/65536)*0x100000 we need to do this to avoid stepping off the edges if a very nearly horizontal edge is less than epsilon above a scan, and numeric error causes it to incorrectly extend to the scan, and the extension of the line goes off the edge of the screen FIXME: is this actually needed? sort the edge in normally sort trailers after leaders12.2013.19 / 20.12 = 25.7d0 = DotProduct (pv0->position, clip->normal) - clip->dist;d1 = DotProduct (pv1->position, clip->normal) - clip->dist; point 0 is unclipped both points are unclipped only point 1 is clipped we don't cache clipped edges(25.7->18.14) / 25.7 = 25.713.19 / 25.7 = 20.12 point 0 is clipped both points are clipped we do cache fully clipped edges only point 0 is clipped we don't cache partially clipped edges12.20 / 20.12 = 24.812.20 / 24.8 = 20.12
{
	mvertex_t p0, p1;
	p0.position[0]=pv0->position[0]/524288.0f;
	p0.position[1]=pv0->position[1]/524288.0f;
	p0.position[2]=pv0->position[2]/524288.0f;
	p1.position[0]=pv1->position[0]/524288.0f;
	p1.position[1]=pv1->position[1]/524288.0f;
	p1.position[2]=pv1->position[2]/524288.0f;
	R_EmitEdge (&p0, &p1);
}
 add the edge
================
R_ClipEdge
================
 point 0 is unclipped both points are unclipped only point 1 is clipped we don't cache clipped edges point 0 is clipped both points are clipped we do cache fully clipped edges only point 0 is clipped we don't cache partially clipped edges add the edge !id386
================
R_EmitCachedEdge
================
 for mipmap finding
================
R_RenderFace
================
 skip out if no more surfs ditto if not enough edges left, or switch to auxedges if possible set up clip planes push the edges through if the edge is cached, we can just reuse the edge assume it's cacheable if the edge is cached, we can just reuse the edge it's cached if the cached edge is valid and is owned by this medge_t assume it's cacheable if there was a clip off the left edge, add that edge too FIXME: faster to do in screen space? FIXME: share clipped edges? if there was a clip off the right edge, get the right r_nearzi if no edges made it out, return without posting the surface FIXME: cache this? FIXME: cache this?JDC	VectorCopy (r_worldmodelorg, surface_p->modelorg);
================
R_RenderBmodelFace
================
 skip out if no more surfs ditto if not enough edges left, or switch to auxedges if possible this is a dummy to give the caching mechanism someplace to write to set up clip planes push the edges through FIXME: keep clipped bmodel edges in clockwise order so last vertex caching can be used? if there was a clip off the left edge, add that edge too FIXME: faster to do in screen space? FIXME: share clipped edges? if there was a clip off the right edge, get the right r_nearzi if no edges made it out, return without posting the surface FIXME: cache this? FIXME: cache this?JDC	VectorCopy (r_worldmodelorg, surface_p->modelorg);
================
R_RenderPoly
================
FIXME: do real numberFIXME: do real number, safely FIXME: clean this up and make it faster FIXME: guard against running out of vertices keep compiler happy set up clip planes reconstruct the polygon FIXME: these should be precalculated and loaded off disk clip the polygon, done if not visible transform and project, remembering the z values at the vertices and r_nearzi, and extract the s and t coordinates at the vertices transform and project for mipmap finding FIXME: build x/yscale into transform? build the polygon descriptor, including fa, r_nearzi, and u, v, s, t, and z for each vertex draw the polygon
================
R_ZDrawSubmodelPolys
================
 find which side of the node we are on draw the polygon FIXME: use bounding-box-based frustum clipping info?
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 r_draw.c FIXME: shouldn't need to include this !!! if these are changed, they must be changed in asm_draw.h too !!! number of faces clipped
================
R_EmitEdge
================
 transform and project FIXME: build x/yscale into transform? transform and project for mipmap finding for right edges, all we want is the effect on 1/z create the edge we cache unclipped horizontal edges as fully clipped horizontal edge trailing edge (go from p1 to p2) leading edge (go from p2 to p1) we need to do this to avoid stepping off the edges if a very nearly horizontal edge is less than epsilon above a scan, and numeric error causes it to incorrectly extend to the scan, and the extension of the line goes off the edge of the screen FIXME: is this actually needed? sort the edge in normally sort trailers after leadersThis is just like R_EmitEdge_fxp, except that the vertex parameters arealready fixed point, and don't need to be converted.float	u, u_step;vec3_t	local, transformed;float	scale, lzi0, u0, v0;lzi0 = r_lzi1;world_fxp=(int)(pv0->position[0]*(float)(2^16)); transform and projectVectorSubtract (world, modelorg, local);Vector Subtract (and convert)TransformVector (local, transformed);transformed_fxp[0] = (int)(local_fxp[0]*vright[0])+(int)(local_fxp[1]*vright[1])+(int)(local_fxp[2]*vright[2]);transformed_fxp[1] = (int)(local_fxp[0]*vup[0])+(int)(local_fxp[1]*vup[1])+(int)(local_fxp[2]*vup[2]);transformed_fxp[2] = (int)(local_fxp[0]*vpn[0])+(int)(local_fxp[1]*vpn[1])+(int)(local_fxp[2]*vpn[2]);13.19 / 24.8 = 21.1121.11->25.721.11->25.721.11->24.8lzi0 = (float)(1.0 / transformed[2]); FIXME: build x/yscale into transform?scale = xscale * lzi0;u0 = (xcenter + scale*transformed[0]);Dan: Is this needed?9.23 / 24.8 = 17.15 25.7 * 17.15 = 10.22scale = yscale * lzi0;v0 = (ycenter - scale*transformed[1]);Dan: Is this needed?9.23 / 24.8 = 17.15 25.7 * 17.15 = 10.22255*8388608;world(pv1->position[0]*(float)(2^16)); transform and projectVectorSubtract (world, modelorg, local);Vector Subtract (and convert)TransformVector (local, transformed);transformed_fxp[0] = ((int)(local_fxp[0]*vright[0]))+((int)(local_fxp[1]*vright[1]))+((int)(local_fxp[2]*vright[2]));transformed_fxp[1] = ((int)(local_fxp[0]*vup[0]))+((int)(local_fxp[1]*vup[1]))+((int)(local_fxp[2]*vup[2]));transformed_fxp[2] = ((int)(local_fxp[0]*vpn[0]))+((int)(local_fxp[1]*vpn[1]))+((int)(local_fxp[2]*vpn[2]));r_lzi1 = (float)(1.0 / transformed[2]);scale = xscale * r_lzi1;Dan: Is this needed?9.23 / 24.8 = 17.15 24.8 * 17.15 = 9.23 //21.11r_u1 = (xcenter + scale*transformed[0]);scale = yscale * r_lzi1;r_v1 = (ycenter - scale*transformed[1]);Dan: Is this needed?9.23 / 24.8 = 17.15 23.9 * 17.15 = 9.23 //21.11if (r_lzi1 > lzi0)	lzi0 = r_lzi1;if (lzi0 > r_nearzi)	// for mipmap finding	r_nearzi = lzi0;128 for mipmap findingif (!lzi0_fxp) r_nearzi=0;else for right edges, all we want is the effect on 1/zr_ceilv1 = (int) ceil(r_v1); create the edge we cache unclipped horizontal edges as fully clipped horizontal edgeDan: Is this needed?256.0 trailing edge (go from p1 to p2)u_step = ((r_u1 - u0) / (r_v1 - v0));u = u0 + ((float)v - v0) * u_step;10.22 / 15.12 = 22.10 leading edge (go from p2 to p1)u_step = ((u0 - r_u1) / (v0 - r_v1));u = r_u1 + ((float)v - r_v1) * u_step;edge->u_step = tmp*0x100000;edge->u = (int)(/*(u_fxp/65536)*0x100000*/u_fxp/4 + 0xFFFFF);/16; //tmp*0x100000;(u_fxp/65536)*0x100000 we need to do this to avoid stepping off the edges if a very nearly horizontal edge is less than epsilon above a scan, and numeric error causes it to incorrectly extend to the scan, and the extension of the line goes off the edge of the screen FIXME: is this actually needed? sort the edge in normally sort trailers after leadersfloat	u, u_step;vec3_t	local, transformed;float	scale, lzi0, u0, v0;lzi0 = r_lzi1;world_fxp=(int)(pv0->position[0]*(float)(2^16)); transform and projectVectorSubtract (world, modelorg, local);Vector Subtract (and convert)TransformVector (local, transformed);transformed_fxp[0] = (int)(local_fxp[0]*vright[0])+(int)(local_fxp[1]*vright[1])+(int)(local_fxp[2]*vright[2]);transformed_fxp[1] = (int)(local_fxp[0]*vup[0])+(int)(local_fxp[1]*vup[1])+(int)(local_fxp[2]*vup[2]);transformed_fxp[2] = (int)(local_fxp[0]*vpn[0])+(int)(local_fxp[1]*vpn[1])+(int)(local_fxp[2]*vpn[2]);transformed_fxp[0]*=256;transformed_fxp[1]*=256;lzi0 = (float)(1.0 / transformed[2]); FIXME: build x/yscale into transform?scale = xscale * lzi0;u0 = (xcenter + scale*transformed[0]);9.23 / 24.8 = 17.15 25.7 * 17.15 = 10.22scale = yscale * lzi0;v0 = (ycenter - scale*transformed[1]);9.23 / 24.8 = 17.15 25.7 * 17.15 = 10.22255*8388608;world(pv1->position[0]*(float)(2^16)); transform and projectVectorSubtract (world, modelorg, local);Vector Subtract (and convert)TransformVector (local, transformed);transformed_fxp[0] = ((int)(local_fxp[0]*vright[0]))+((int)(local_fxp[1]*vright[1]))+((int)(local_fxp[2]*vright[2]));transformed_fxp[1] = ((int)(local_fxp[0]*vup[0]))+((int)(local_fxp[1]*vup[1]))+((int)(local_fxp[2]*vup[2]));transformed_fxp[2] = ((int)(local_fxp[0]*vpn[0]))+((int)(local_fxp[1]*vpn[1]))+((int)(local_fxp[2]*vpn[2]));transformed_fxp[0]*=256;transformed_fxp[1]*=256;transformed_fxp[2]=-transformed_fxp[2];if (transformed[2] < NEAR_CLIP)	transformed[2] = (float)NEAR_CLIP;r_lzi1 = (float)(1.0 / transformed[2]);scale = xscale * r_lzi1;9.23 / 24.8 = 17.15 24.8 * 17.15 = 9.23 //21.11r_u1 = (xcenter + scale*transformed[0]);scale = yscale * r_lzi1;r_v1 = (ycenter - scale*transformed[1]);9.23 / 24.8 = 17.15 23.9 * 17.15 = 9.23 //21.11if (r_lzi1 > lzi0)	lzi0 = r_lzi1;if (lzi0 > r_nearzi)	// for mipmap finding	r_nearzi = lzi0; for mipmap findingif (!lzi0_fxp) r_nearzi=0;else for right edges, all we want is the effect on 1/zr_ceilv1 = (int) ceil(r_v1); create the edge we cache unclipped horizontal edges as fully clipped horizontal edgefloat tmp;int tmp; trailing edge (go from p1 to p2)u_step = ((r_u1 - u0) / (r_v1 - v0));u = u0 + ((float)v - v0) * u_step;10.22 / 15.12 = 22.10tmp=(((r_u1_fxp - u0_fxp)/8388608.0) / ((r_v1_fxp - v0_fxp)/8388608.0));u_step_fxp=(int)(tmp*8388608.0);u_fxp = u0_fxp + (((float)v - v0_fxp/8388608.0) * tmp)*8388608.0;int tmp; leading edge (go from p2 to p1)u_step = ((u0 - r_u1) / (v0 - r_v1));u = r_u1 + ((float)v - r_v1) * u_step;tmp=(((u0_fxp - r_u1_fxp)/8388608.0) / ((v0_fxp - r_v1_fxp)/8388608.0));u_step_fxp = (int)(tmp*8388608.0);u_fxp = r_u1_fxp + (((float)v - r_v1_fxp/8388608.0) * tmp)*8388608.0;edge->u_step = tmp*0x100000;edge->u = (int)(/*(u_fxp/65536)*0x100000*/u_fxp/4 + 0xFFFFF);/16; //tmp*0x100000;(u_fxp/65536)*0x100000 we need to do this to avoid stepping off the edges if a very nearly horizontal edge is less than epsilon above a scan, and numeric error causes it to incorrectly extend to the scan, and the extension of the line goes off the edge of the screen FIXME: is this actually needed? sort the edge in normally sort trailers after leaders12.2013.19 / 20.12 = 25.7d0 = DotProduct (pv0->position, clip->normal) - clip->dist;d1 = DotProduct (pv1->position, clip->normal) - clip->dist; point 0 is unclipped both points are unclipped only point 1 is clipped we don't cache clipped edges(25.7->18.14) / 25.7 = 25.713.19 / 25.7 = 20.12 point 0 is clipped both points are clipped we do cache fully clipped edges only point 0 is clipped we don't cache partially clipped edges12.20 / 20.12 = 24.812.20 / 24.8 = 20.12
{
	mvertex_t p0, p1;
	p0.position[0]=pv0->position[0]/524288.0f;
	p0.position[1]=pv0->position[1]/524288.0f;
	p0.position[2]=pv0->position[2]/524288.0f;
	p1.position[0]=pv1->position[0]/524288.0f;
	p1.position[1]=pv1->position[1]/524288.0f;
	p1.position[2]=pv1->position[2]/524288.0f;
	R_EmitEdge (&p0, &p1);
}
 add the edge
================
R_ClipEdge
================
 point 0 is unclipped both points are unclipped only point 1 is clipped we don't cache clipped edges point 0 is clipped both points are clipped we do cache fully clipped edges only point 0 is clipped we don't cache partially clipped edges add the edge !id386
================
R_EmitCachedEdge
================
 for mipmap finding
================
R_RenderFace
================
 skip out if no more surfs ditto if not enough edges left, or switch to auxedges if possible set up clip planes push the edges through if the edge is cached, we can just reuse the edge assume it's cacheable if the edge is cached, we can just reuse the edge it's cached if the cached edge is valid and is owned by this medge_t assume it's cacheable if there was a clip off the left edge, add that edge too FIXME: faster to do in screen space? FIXME: share clipped edges? if there was a clip off the right edge, get the right r_nearzi if no edges made it out, return without posting the surface FIXME: cache this? FIXME: cache this?JDC	VectorCopy (r_worldmodelorg, surface_p->modelorg);
================
R_RenderBmodelFace
================
 skip out if no more surfs ditto if not enough edges left, or switch to auxedges if possible this is a dummy to give the caching mechanism someplace to write to set up clip planes push the edges through FIXME: keep clipped bmodel edges in clockwise order so last vertex caching can be used? if there was a clip off the left edge, add that edge too FIXME: faster to do in screen space? FIXME: share clipped edges? if there was a clip off the right edge, get the right r_nearzi if no edges made it out, return without posting the surface FIXME: cache this? FIXME: cache this?JDC	VectorCopy (r_worldmodelorg, surface_p->modelorg);
================
R_RenderPoly
================
FIXME: do real numberFIXME: do real number, safely FIXME: clean this up and make it faster FIXME: guard against running out of vertices keep compiler happy set up clip planes reconstruct the polygon FIXME: these should be precalculated and loaded off disk clip the polygon, done if not visible transform and project, remembering the z values at the vertices and r_nearzi, and extract the s and t coordinates at the vertices transform and project for mipmap finding FIXME: build x/yscale into transform? build the polygon descriptor, including fa, r_nearzi, and u, v, s, t, and z for each vertex draw the polygon
================
R_ZDrawSubmodelPolys
================
 find which side of the node we are on draw the polygon FIXME: use bounding-box-based frustum clipping info?