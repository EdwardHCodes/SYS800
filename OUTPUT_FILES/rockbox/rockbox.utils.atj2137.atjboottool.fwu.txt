**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2017 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** always 512 in blocks? it's always 1  always 7  always 0x55aa55aa  always 'FwuTail'  always 0  size size size size  size unreachable WARNING if nr_bits = 0 then the right shift by 32 is undefined and so
         * the following code could break. The additional AND catches this case
         * and make sure the result is 0  v4 := 1/x  v5 := y/x  v2 := x + y/x   (lambda)  v4 := ec_a + lambda  v3 := lambda^2  x' := lambda + lambda^2 + ec_a  v4 := lambda + g_gf_one  v5 := (lambda + 1) * x' = lambda.x' + x'  v6 := x1^2  y' = (lambda + g_gf_one) * x + x^2 = x^2 + lambda.x + x  v5 = y1 + y2  v6 = x1 + x2  v7 = 1/(x1 + x2)  v3 = (y1 + y2) / (x1 + x2)    (lambda)  v5 = lambda + ec_a  v4 = lambda^2  v7 = lambda^2 + lambda + ec_a  x' = ec_a + x1 + x2 + lambda + lambda^2  v5 = x1 + x'  v6 = x' + y1  v7 = (x1 + x').lambda  y' = (x1 + x').lambda + x' + y1  res_other := point  for all bit from SZ-1 downto 0  res := 2 * res_other  res_other := res = 2 * res_other  if bit of n is set  res := res_other + point  same but optimized 
    int sz = g_decode_A_info.nr_bytes2 - 1;
    if(sz <= 32)
    {
        for(int i = 0; i < sz; i++)
            buf[i] ^= point->x[i];
        for(int i = sz; i < 32; i++)
            buf[i] ^= point->y[i - sz];
    }
    else
        for(int i = 0; i < 32; i++)
            buf[i] ^= point->x[i];
    
    ret = memcmp(midbuf + 25, zero, sizeof(zero));
    cprintf(GREEN, "  Sanity: ");
    check_field(ret, 0, "Pass\n", "Fail\n");
     stolen from https://github.com/nfd/atj2127decrypt, I have no idea from where
 * he got this sequence of code. This code is really weird, I copy verbatim
 * his authors comment below.  decrypt a 512-byte sector  the input buffer is reorganized based on two offsets (blockA and blockB),
     * skip 2048 bytes of data used for crypto init  use firmware size, not file size  stolen from https://github.com/nfd/atj2127decrypt, I have no idea from where
     * he got this sequence of code. This code is really weird, I copy verbatim
     * his authors comment below.
     *
     * This is really weird. This is passed to the decrypt-sector function and
     * determines how much of each 512-byte sector to decrypt, where for every
     * 32MB of size above the first 32MB, one 32 byte chunk of each sector
     * (starting from the end) will remain unencrypted, up to a maximum of 480
     * bytes of plaintext. Was this a speed-related thing? It just seems
     * completely bizarre.  NOTE: the original code uses the file length to determine how much
     * to encrypt and not the size reported in the header. Since
     * the file size can be different from the size reported in the header
     * (the infamous 512 bytes described above), this might be wrong.  the ATJ213x and ATJ2127 do not use the same encryption at this point, and I
     * don't see any obvious way to tell which encryption is used (since they
     * use the same version above).  check whether the firmware has a FwuTail (as far as I know, there is no flag anywhere that
     * indicates its presence or not)  if it has a tail, the firmware size includes it, so we need to decrease it to avoid
         * "decrypting" the tail and output garbage **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2017 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** always 512 in blocks? it's always 1  always 7  always 0x55aa55aa  always 'FwuTail'  always 0  size size size size  size unreachable WARNING if nr_bits = 0 then the right shift by 32 is undefined and so
         * the following code could break. The additional AND catches this case
         * and make sure the result is 0  v4 := 1/x  v5 := y/x  v2 := x + y/x   (lambda)  v4 := ec_a + lambda  v3 := lambda^2  x' := lambda + lambda^2 + ec_a  v4 := lambda + g_gf_one  v5 := (lambda + 1) * x' = lambda.x' + x'  v6 := x1^2  y' = (lambda + g_gf_one) * x + x^2 = x^2 + lambda.x + x  v5 = y1 + y2  v6 = x1 + x2  v7 = 1/(x1 + x2)  v3 = (y1 + y2) / (x1 + x2)    (lambda)  v5 = lambda + ec_a  v4 = lambda^2  v7 = lambda^2 + lambda + ec_a  x' = ec_a + x1 + x2 + lambda + lambda^2  v5 = x1 + x'  v6 = x' + y1  v7 = (x1 + x').lambda  y' = (x1 + x').lambda + x' + y1  res_other := point  for all bit from SZ-1 downto 0  res := 2 * res_other  res_other := res = 2 * res_other  if bit of n is set  res := res_other + point  same but optimized 
    int sz = g_decode_A_info.nr_bytes2 - 1;
    if(sz <= 32)
    {
        for(int i = 0; i < sz; i++)
            buf[i] ^= point->x[i];
        for(int i = sz; i < 32; i++)
            buf[i] ^= point->y[i - sz];
    }
    else
        for(int i = 0; i < 32; i++)
            buf[i] ^= point->x[i];
    
    ret = memcmp(midbuf + 25, zero, sizeof(zero));
    cprintf(GREEN, "  Sanity: ");
    check_field(ret, 0, "Pass\n", "Fail\n");
     stolen from https://github.com/nfd/atj2127decrypt, I have no idea from where
 * he got this sequence of code. This code is really weird, I copy verbatim
 * his authors comment below.  decrypt a 512-byte sector  the input buffer is reorganized based on two offsets (blockA and blockB),
     * skip 2048 bytes of data used for crypto init  use firmware size, not file size  stolen from https://github.com/nfd/atj2127decrypt, I have no idea from where
     * he got this sequence of code. This code is really weird, I copy verbatim
     * his authors comment below.
     *
     * This is really weird. This is passed to the decrypt-sector function and
     * determines how much of each 512-byte sector to decrypt, where for every
     * 32MB of size above the first 32MB, one 32 byte chunk of each sector
     * (starting from the end) will remain unencrypted, up to a maximum of 480
     * bytes of plaintext. Was this a speed-related thing? It just seems
     * completely bizarre.  NOTE: the original code uses the file length to determine how much
     * to encrypt and not the size reported in the header. Since
     * the file size can be different from the size reported in the header
     * (the infamous 512 bytes described above), this might be wrong.  the ATJ213x and ATJ2127 do not use the same encryption at this point, and I
     * don't see any obvious way to tell which encryption is used (since they
     * use the same version above).  check whether the firmware has a FwuTail (as far as I know, there is no flag anywhere that
     * indicates its presence or not)  if it has a tail, the firmware size includes it, so we need to decrease it to avoid
         * "decrypting" the tail and output garbage **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2017 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** always 512 in blocks? it's always 1  always 7  always 0x55aa55aa  always 'FwuTail'  always 0  size size size size  size unreachable WARNING if nr_bits = 0 then the right shift by 32 is undefined and so
         * the following code could break. The additional AND catches this case
         * and make sure the result is 0  v4 := 1/x  v5 := y/x  v2 := x + y/x   (lambda)  v4 := ec_a + lambda  v3 := lambda^2  x' := lambda + lambda^2 + ec_a  v4 := lambda + g_gf_one  v5 := (lambda + 1) * x' = lambda.x' + x'  v6 := x1^2  y' = (lambda + g_gf_one) * x + x^2 = x^2 + lambda.x + x  v5 = y1 + y2  v6 = x1 + x2  v7 = 1/(x1 + x2)  v3 = (y1 + y2) / (x1 + x2)    (lambda)  v5 = lambda + ec_a  v4 = lambda^2  v7 = lambda^2 + lambda + ec_a  x' = ec_a + x1 + x2 + lambda + lambda^2  v5 = x1 + x'  v6 = x' + y1  v7 = (x1 + x').lambda  y' = (x1 + x').lambda + x' + y1  res_other := point  for all bit from SZ-1 downto 0  res := 2 * res_other  res_other := res = 2 * res_other  if bit of n is set  res := res_other + point  same but optimized 
    int sz = g_decode_A_info.nr_bytes2 - 1;
    if(sz <= 32)
    {
        for(int i = 0; i < sz; i++)
            buf[i] ^= point->x[i];
        for(int i = sz; i < 32; i++)
            buf[i] ^= point->y[i - sz];
    }
    else
        for(int i = 0; i < 32; i++)
            buf[i] ^= point->x[i];
    
    ret = memcmp(midbuf + 25, zero, sizeof(zero));
    cprintf(GREEN, "  Sanity: ");
    check_field(ret, 0, "Pass\n", "Fail\n");
     stolen from https://github.com/nfd/atj2127decrypt, I have no idea from where
 * he got this sequence of code. This code is really weird, I copy verbatim
 * his authors comment below.  decrypt a 512-byte sector  the input buffer is reorganized based on two offsets (blockA and blockB),
     * skip 2048 bytes of data used for crypto init  use firmware size, not file size  stolen from https://github.com/nfd/atj2127decrypt, I have no idea from where
     * he got this sequence of code. This code is really weird, I copy verbatim
     * his authors comment below.
     *
     * This is really weird. This is passed to the decrypt-sector function and
     * determines how much of each 512-byte sector to decrypt, where for every
     * 32MB of size above the first 32MB, one 32 byte chunk of each sector
     * (starting from the end) will remain unencrypted, up to a maximum of 480
     * bytes of plaintext. Was this a speed-related thing? It just seems
     * completely bizarre.  NOTE: the original code uses the file length to determine how much
     * to encrypt and not the size reported in the header. Since
     * the file size can be different from the size reported in the header
     * (the infamous 512 bytes described above), this might be wrong.  the ATJ213x and ATJ2127 do not use the same encryption at this point, and I
     * don't see any obvious way to tell which encryption is used (since they
     * use the same version above).  check whether the firmware has a FwuTail (as far as I know, there is no flag anywhere that
     * indicates its presence or not)  if it has a tail, the firmware size includes it, so we need to decrease it to avoid
         * "decrypting" the tail and output garbage 