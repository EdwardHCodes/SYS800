**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007-2009 Joshua Simmons <mud at majidejima dot com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** for parsing  first node in the branch  seek to the first '('  DEBUGF("poped off %d\n", file_position);  we're here because there may have been a sibling after
                   another gametree that was handled, but there's no '(',
                   so there wasnt' a sibling, so just go on to any more
                   gametrees in the stack  there may be more siblings after we process this one  check for a sibling after we finish with this node  we're at the start of a gametree here, right at the '('  DEBUGF("||| %d, %c\n", absolute_position(), (char) temp);  fill the tree_head node before moving on  finished this gametree  we want to end one past the ')', so eat it up: 
                   DEBUGF ("adding %d\n", (int) rb->lseek (sgf_fd, 0,
                   SEEK_CUR));  skip the extras i guess  to be freed later  update the ->prev pointed on all branches of the next node  DEBUGF("trying to set prev for branch %d\n", current_node);  all of the variations have to be up front, so we
                       can quit here  update the tree head  DEBUGF("freeing %d %d %d\n", temp, start_node, saved);  DEBUGF("got past!\n");  check if we're still reading a prop name, in which case we fail
       (but first we want to eat up the rest of the prop name)  make it a string, the lazy way  max size of generically supported prop values is 6, which is 5 for
       a point range ab:cd and one for the \0

       (this buffer is only used for them, things such as white and black
       player names are stored in different buffers)  make it a little bigger for other random crap, like reading in time
      special extra handling for root properties, set a marker telling us
       the right place to spit the values out in output_sgf  meaningless  don't add more than one, so just set it if we found one already
          DEBUGF("unhandled prop %d\n", (int) type);  absolute_position(&unhandled_prop_list);  don't write out-of-prop whitespace  DEBUGF("move prop %d\n", (int) type);  empty is apparently acceptable as a pass  DEBUGF("add prop %d\n", (int) type);  example: "ab:cd", two positions separated by a colon  we don't care.  on output we'll write our own values for these  do nothing  upper-left and bottom right  this code is overly general and accepts ranges even if ul and br
       aren't the required corners it's easier doing that that failing if
       the input is bad **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007-2009 Joshua Simmons <mud at majidejima dot com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** for parsing  first node in the branch  seek to the first '('  DEBUGF("poped off %d\n", file_position);  we're here because there may have been a sibling after
                   another gametree that was handled, but there's no '(',
                   so there wasnt' a sibling, so just go on to any more
                   gametrees in the stack  there may be more siblings after we process this one  check for a sibling after we finish with this node  we're at the start of a gametree here, right at the '('  DEBUGF("||| %d, %c\n", absolute_position(), (char) temp);  fill the tree_head node before moving on  finished this gametree  we want to end one past the ')', so eat it up: 
                   DEBUGF ("adding %d\n", (int) rb->lseek (sgf_fd, 0,
                   SEEK_CUR));  skip the extras i guess  to be freed later  update the ->prev pointed on all branches of the next node  DEBUGF("trying to set prev for branch %d\n", current_node);  all of the variations have to be up front, so we
                       can quit here  update the tree head  DEBUGF("freeing %d %d %d\n", temp, start_node, saved);  DEBUGF("got past!\n");  check if we're still reading a prop name, in which case we fail
       (but first we want to eat up the rest of the prop name)  make it a string, the lazy way  max size of generically supported prop values is 6, which is 5 for
       a point range ab:cd and one for the \0

       (this buffer is only used for them, things such as white and black
       player names are stored in different buffers)  make it a little bigger for other random crap, like reading in time
      special extra handling for root properties, set a marker telling us
       the right place to spit the values out in output_sgf  meaningless  don't add more than one, so just set it if we found one already
          DEBUGF("unhandled prop %d\n", (int) type);  absolute_position(&unhandled_prop_list);  don't write out-of-prop whitespace  DEBUGF("move prop %d\n", (int) type);  empty is apparently acceptable as a pass  DEBUGF("add prop %d\n", (int) type);  example: "ab:cd", two positions separated by a colon  we don't care.  on output we'll write our own values for these  do nothing  upper-left and bottom right  this code is overly general and accepts ranges even if ul and br
       aren't the required corners it's easier doing that that failing if
       the input is bad **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007-2009 Joshua Simmons <mud at majidejima dot com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** for parsing  first node in the branch  seek to the first '('  DEBUGF("poped off %d\n", file_position);  we're here because there may have been a sibling after
                   another gametree that was handled, but there's no '(',
                   so there wasnt' a sibling, so just go on to any more
                   gametrees in the stack  there may be more siblings after we process this one  check for a sibling after we finish with this node  we're at the start of a gametree here, right at the '('  DEBUGF("||| %d, %c\n", absolute_position(), (char) temp);  fill the tree_head node before moving on  finished this gametree  we want to end one past the ')', so eat it up: 
                   DEBUGF ("adding %d\n", (int) rb->lseek (sgf_fd, 0,
                   SEEK_CUR));  skip the extras i guess  to be freed later  update the ->prev pointed on all branches of the next node  DEBUGF("trying to set prev for branch %d\n", current_node);  all of the variations have to be up front, so we
                       can quit here  update the tree head  DEBUGF("freeing %d %d %d\n", temp, start_node, saved);  DEBUGF("got past!\n");  check if we're still reading a prop name, in which case we fail
       (but first we want to eat up the rest of the prop name)  make it a string, the lazy way  max size of generically supported prop values is 6, which is 5 for
       a point range ab:cd and one for the \0

       (this buffer is only used for them, things such as white and black
       player names are stored in different buffers)  make it a little bigger for other random crap, like reading in time
      special extra handling for root properties, set a marker telling us
       the right place to spit the values out in output_sgf  meaningless  don't add more than one, so just set it if we found one already
          DEBUGF("unhandled prop %d\n", (int) type);  absolute_position(&unhandled_prop_list);  don't write out-of-prop whitespace  DEBUGF("move prop %d\n", (int) type);  empty is apparently acceptable as a pass  DEBUGF("add prop %d\n", (int) type);  example: "ab:cd", two positions separated by a colon  we don't care.  on output we'll write our own values for these  do nothing  upper-left and bottom right  this code is overly general and accepts ranges even if ul and br
       aren't the required corners it's easier doing that that failing if
       the input is bad 