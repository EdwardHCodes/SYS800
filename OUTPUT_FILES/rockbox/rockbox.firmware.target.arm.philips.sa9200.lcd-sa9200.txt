**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Mark Arigo
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Settings to remember when display is turned off  Forward declarations  The SA9200 controller closely matches the register defines for the
   Samsung S6D0151  Display status  wait for LCD  send LCD pixel  send LCD data  send LCD command  LCD init  This is done by the OF bootloader, no need to redo  Already on  Reset the options * Power ON Sequence * Start Oscillation  50ms or more  DSTB=0, SAP2-0=001, BT2-0=101, DC2-0=000, AP2-0=001, SLP=0, STB=0  VR1C=0, VRN14-10=10111, VRP14-10=11111  SVC3-0=0000, VRH5-4=01  VCMR=1, PON=0, VRH3-0=1101  VDV6-0=0000100, VCOMG=0, VCM6-0=xxxxxxx  DSTB=0, SAP2-0=010, BT2-0=010, DC2-0=000, AP2-0=010, SLP=0, STB=0  50ms or more  VCMR=1, PON=1, VRH3-0=1100  OF bootlaoder uses 200ms, no delay in OF firmware  Instructions for other mode settings (in register order).  FL1-0=10, FDL=0  BGR=1, MDT1-0=00, I/D1-0=11, AM=0  PT1-0=00, SPT=0, GON=0, DTE=0, CL=0, REV=1, D1-0=01  FP3-0=0011, BT3-0=1010  DIV1-0=00, RTN3-0=0000  RM=0, DM1-0=00, RIM1-0=00  PKP1=0x0, PKP0=0x0  PKP3=0x2, PKP2=0x4  PKP5=0x0, PKP4=0x1  PRP1=0x6, PRP0=0x0  PKN1=0x6, PKN0=0x7  PKN3=0x3, PKN2=0x5  PKN5=0x7, PKN4=0x7  PRN1=0x0, PRN0=0x6  VRN0=0x4, VRP=0x0  SCN=0x0  SE1=LCD_HEIGHT-1, SS1=0x0  SE2=0x0, SS2=0x0  HEA=LCD_WIDTH-1, HSA=0x0  VEA=LCD_HEIGHT-1, VSA=0x0  Unknown registers  Display must be off first * Power OFF sequence * DSTB=0, SAP2-0=000, BT2-0=001, DC2-0=000, AP2-0=000, SLP=0, STB=0  VCMR=1, PON=0, VRH3-0=1101  Set standby mode  PT1-0=00, SPT=0, GON=1, DTE=1, CL=0, REV=1, D1-0=10  DSTB=0, SAP2-0=000, BT2-0=101, DC2-0=000, AP2-0=000, SLP=0, STB=1 * Display OFF sequence * PT1-0=10, SPT=0, GON=1, DTE=1, CL=0, REV=1, D1-0=10  2 or more frames  PT1-0=10, SPT=0, GON=1, DTE=0, CL=0, REV=1, D1-0=00  1ms or more  PT1-0=10, SPT=0, GON=0, DTE=0, CL=0, REV=1, D1-0=00  2 or more frames  Be sure power is on first * Display ON Sequence * PT1-0=00, SPT=0, GON=1, DTE=0, CL=0, REV=0, D1-0=01  1ms or more  PT1-0=00, SPT=0, GON=1, DTE=0, CL=0, REV=0, D1-0=11  2 or more frames  PT1-0=10, SPT=0, GON=1, DTE=1, CL=0, REV=x, D1-0=11  Probably out of sync and we don't wanna pepper the code with
           lcd_update() calls for this. ** hardware configuration ** VDV6-0=0000100, VCOMG=0, VCM6-0=xxxxxxx  PT1-0=10, SPT=0, GON=1, DTE=1, CL=0, REV=x, D1-0=11  turn the display upside down (call lcd_update() afterwards)  DPL=0, EPL=1, SM=0, GS=x, SS=x, NL4-0=01100  Performance function to blit a YUV bitmap directly to the LCD  calculate the drawing region  convert YUV coordinates to screen coordinates  2px strip: cursor moves left, then down in gram  BGR=1, MDT1-0=00, I/D1-0=10, AM=0  cache options setting  max horiz << 8 | start horiz  position cursor (set AD0-AD15)  start drawing  move strip by "down" 2 px  back to normal right, then down cursor in gram  BGR=1, MDT1-0=00, I/D1-0=11, AM=0  Update the display.
   This must be called after all other LCD functions that change the display.  Update a fraction of the display.  Nothing left to do.  Nothing left to do.  odd width **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Mark Arigo
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Settings to remember when display is turned off  Forward declarations  The SA9200 controller closely matches the register defines for the
   Samsung S6D0151  Display status  wait for LCD  send LCD pixel  send LCD data  send LCD command  LCD init  This is done by the OF bootloader, no need to redo  Already on  Reset the options * Power ON Sequence * Start Oscillation  50ms or more  DSTB=0, SAP2-0=001, BT2-0=101, DC2-0=000, AP2-0=001, SLP=0, STB=0  VR1C=0, VRN14-10=10111, VRP14-10=11111  SVC3-0=0000, VRH5-4=01  VCMR=1, PON=0, VRH3-0=1101  VDV6-0=0000100, VCOMG=0, VCM6-0=xxxxxxx  DSTB=0, SAP2-0=010, BT2-0=010, DC2-0=000, AP2-0=010, SLP=0, STB=0  50ms or more  VCMR=1, PON=1, VRH3-0=1100  OF bootlaoder uses 200ms, no delay in OF firmware  Instructions for other mode settings (in register order).  FL1-0=10, FDL=0  BGR=1, MDT1-0=00, I/D1-0=11, AM=0  PT1-0=00, SPT=0, GON=0, DTE=0, CL=0, REV=1, D1-0=01  FP3-0=0011, BT3-0=1010  DIV1-0=00, RTN3-0=0000  RM=0, DM1-0=00, RIM1-0=00  PKP1=0x0, PKP0=0x0  PKP3=0x2, PKP2=0x4  PKP5=0x0, PKP4=0x1  PRP1=0x6, PRP0=0x0  PKN1=0x6, PKN0=0x7  PKN3=0x3, PKN2=0x5  PKN5=0x7, PKN4=0x7  PRN1=0x0, PRN0=0x6  VRN0=0x4, VRP=0x0  SCN=0x0  SE1=LCD_HEIGHT-1, SS1=0x0  SE2=0x0, SS2=0x0  HEA=LCD_WIDTH-1, HSA=0x0  VEA=LCD_HEIGHT-1, VSA=0x0  Unknown registers  Display must be off first * Power OFF sequence * DSTB=0, SAP2-0=000, BT2-0=001, DC2-0=000, AP2-0=000, SLP=0, STB=0  VCMR=1, PON=0, VRH3-0=1101  Set standby mode  PT1-0=00, SPT=0, GON=1, DTE=1, CL=0, REV=1, D1-0=10  DSTB=0, SAP2-0=000, BT2-0=101, DC2-0=000, AP2-0=000, SLP=0, STB=1 * Display OFF sequence * PT1-0=10, SPT=0, GON=1, DTE=1, CL=0, REV=1, D1-0=10  2 or more frames  PT1-0=10, SPT=0, GON=1, DTE=0, CL=0, REV=1, D1-0=00  1ms or more  PT1-0=10, SPT=0, GON=0, DTE=0, CL=0, REV=1, D1-0=00  2 or more frames  Be sure power is on first * Display ON Sequence * PT1-0=00, SPT=0, GON=1, DTE=0, CL=0, REV=0, D1-0=01  1ms or more  PT1-0=00, SPT=0, GON=1, DTE=0, CL=0, REV=0, D1-0=11  2 or more frames  PT1-0=10, SPT=0, GON=1, DTE=1, CL=0, REV=x, D1-0=11  Probably out of sync and we don't wanna pepper the code with
           lcd_update() calls for this. ** hardware configuration ** VDV6-0=0000100, VCOMG=0, VCM6-0=xxxxxxx  PT1-0=10, SPT=0, GON=1, DTE=1, CL=0, REV=x, D1-0=11  turn the display upside down (call lcd_update() afterwards)  DPL=0, EPL=1, SM=0, GS=x, SS=x, NL4-0=01100  Performance function to blit a YUV bitmap directly to the LCD  calculate the drawing region  convert YUV coordinates to screen coordinates  2px strip: cursor moves left, then down in gram  BGR=1, MDT1-0=00, I/D1-0=10, AM=0  cache options setting  max horiz << 8 | start horiz  position cursor (set AD0-AD15)  start drawing  move strip by "down" 2 px  back to normal right, then down cursor in gram  BGR=1, MDT1-0=00, I/D1-0=11, AM=0  Update the display.
   This must be called after all other LCD functions that change the display.  Update a fraction of the display.  Nothing left to do.  Nothing left to do.  odd width **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Mark Arigo
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Settings to remember when display is turned off  Forward declarations  The SA9200 controller closely matches the register defines for the
   Samsung S6D0151  Display status  wait for LCD  send LCD pixel  send LCD data  send LCD command  LCD init  This is done by the OF bootloader, no need to redo  Already on  Reset the options * Power ON Sequence * Start Oscillation  50ms or more  DSTB=0, SAP2-0=001, BT2-0=101, DC2-0=000, AP2-0=001, SLP=0, STB=0  VR1C=0, VRN14-10=10111, VRP14-10=11111  SVC3-0=0000, VRH5-4=01  VCMR=1, PON=0, VRH3-0=1101  VDV6-0=0000100, VCOMG=0, VCM6-0=xxxxxxx  DSTB=0, SAP2-0=010, BT2-0=010, DC2-0=000, AP2-0=010, SLP=0, STB=0  50ms or more  VCMR=1, PON=1, VRH3-0=1100  OF bootlaoder uses 200ms, no delay in OF firmware  Instructions for other mode settings (in register order).  FL1-0=10, FDL=0  BGR=1, MDT1-0=00, I/D1-0=11, AM=0  PT1-0=00, SPT=0, GON=0, DTE=0, CL=0, REV=1, D1-0=01  FP3-0=0011, BT3-0=1010  DIV1-0=00, RTN3-0=0000  RM=0, DM1-0=00, RIM1-0=00  PKP1=0x0, PKP0=0x0  PKP3=0x2, PKP2=0x4  PKP5=0x0, PKP4=0x1  PRP1=0x6, PRP0=0x0  PKN1=0x6, PKN0=0x7  PKN3=0x3, PKN2=0x5  PKN5=0x7, PKN4=0x7  PRN1=0x0, PRN0=0x6  VRN0=0x4, VRP=0x0  SCN=0x0  SE1=LCD_HEIGHT-1, SS1=0x0  SE2=0x0, SS2=0x0  HEA=LCD_WIDTH-1, HSA=0x0  VEA=LCD_HEIGHT-1, VSA=0x0  Unknown registers  Display must be off first * Power OFF sequence * DSTB=0, SAP2-0=000, BT2-0=001, DC2-0=000, AP2-0=000, SLP=0, STB=0  VCMR=1, PON=0, VRH3-0=1101  Set standby mode  PT1-0=00, SPT=0, GON=1, DTE=1, CL=0, REV=1, D1-0=10  DSTB=0, SAP2-0=000, BT2-0=101, DC2-0=000, AP2-0=000, SLP=0, STB=1 * Display OFF sequence * PT1-0=10, SPT=0, GON=1, DTE=1, CL=0, REV=1, D1-0=10  2 or more frames  PT1-0=10, SPT=0, GON=1, DTE=0, CL=0, REV=1, D1-0=00  1ms or more  PT1-0=10, SPT=0, GON=0, DTE=0, CL=0, REV=1, D1-0=00  2 or more frames  Be sure power is on first * Display ON Sequence * PT1-0=00, SPT=0, GON=1, DTE=0, CL=0, REV=0, D1-0=01  1ms or more  PT1-0=00, SPT=0, GON=1, DTE=0, CL=0, REV=0, D1-0=11  2 or more frames  PT1-0=10, SPT=0, GON=1, DTE=1, CL=0, REV=x, D1-0=11  Probably out of sync and we don't wanna pepper the code with
           lcd_update() calls for this. ** hardware configuration ** VDV6-0=0000100, VCOMG=0, VCM6-0=xxxxxxx  PT1-0=10, SPT=0, GON=1, DTE=1, CL=0, REV=x, D1-0=11  turn the display upside down (call lcd_update() afterwards)  DPL=0, EPL=1, SM=0, GS=x, SS=x, NL4-0=01100  Performance function to blit a YUV bitmap directly to the LCD  calculate the drawing region  convert YUV coordinates to screen coordinates  2px strip: cursor moves left, then down in gram  BGR=1, MDT1-0=00, I/D1-0=10, AM=0  cache options setting  max horiz << 8 | start horiz  position cursor (set AD0-AD15)  start drawing  move strip by "down" 2 px  back to normal right, then down cursor in gram  BGR=1, MDT1-0=00, I/D1-0=11, AM=0  Update the display.
   This must be called after all other LCD functions that change the display.  Update a fraction of the display.  Nothing left to do.  Nothing left to do.  odd width 