
 * This file is subject to the terms and conditions of the GNU General Public
 * License.  See the file "COPYING" in the main directory of this archive
 * for more details.
 *
 * Copyright (C) 2008 Axel Gembe <ago@bastart.eu.org>
 * Copyright (C) 2009-2010 Daniel Dickinson <openwrt@cshore.neomailbox.net>
  Kernel header  Kernel load address  Kernel entry point address  Compressed length of the LZMA data that follows  read block of 1024 bytes  Less than 1024 bytes remains, read compute_len bytes  Seek to the start of the file after tag  Write the cfe  Build the kernel address and length (doesn't need to be aligned, read only)  Build the kernel header  Increase the kernel size by the header size  Build the rootfs address and length  align the start if requested  align the end  Seek to the start of the kernel  Write the kernel header  Write the kernel  Write the RootFS  Align image to specified erase block size and append deadc0de  Flush the binfile buffer so that when we read from file, it contains
	   * everything in the buffer
	    Compute the crc32 of the entire image (deadC0de included)  Compute the crc32 of the kernel and padding between kernel and rootfs)  Compute the crc32 of the kernel and padding between kernel and rootfs)  Compute the crc32 of the flashImageStart to rootLength.
	   * The broadcom firmware assumes the rootfs starts the image,
	   * therefore uses the rootfs start to determine where to flash
	   * the image.  Since we have the kernel first we have to give
	   * it the kernel address, but the crc uses the length
	   * associated with this address, which is added to the kernel
	   * length to determine the length of image to flash and thus
	   * needs to be rootfs + deadcode
	    Build the kernel address and length (doesn't need to be aligned, read only)  Seek to the start of the kernel  Build the kernel header  Write the kernel header  Increase the kernel size by the header size  Write the kernel  Write the RootFS  Flush the binfile buffer so that when we read from file, it contains
	   * everything in the buffer
	    Compute the crc32 of the entire image (deadC0de included)  Compute the crc32 of the kernel and padding between kernel and rootfs)  Close the files  Build the tag  We don't include CFE 
 * This file is subject to the terms and conditions of the GNU General Public
 * License.  See the file "COPYING" in the main directory of this archive
 * for more details.
 *
 * Copyright (C) 2008 Axel Gembe <ago@bastart.eu.org>
 * Copyright (C) 2009-2010 Daniel Dickinson <openwrt@cshore.neomailbox.net>
  Kernel header  Kernel load address  Kernel entry point address  Compressed length of the LZMA data that follows  read block of 1024 bytes  Less than 1024 bytes remains, read compute_len bytes  Seek to the start of the file after tag  Write the cfe  Build the kernel address and length (doesn't need to be aligned, read only)  Build the kernel header  Increase the kernel size by the header size  Build the rootfs address and length  align the start if requested  align the end  Seek to the start of the kernel  Write the kernel header  Write the kernel  Write the RootFS  Align image to specified erase block size and append deadc0de  Flush the binfile buffer so that when we read from file, it contains
	   * everything in the buffer
	    Compute the crc32 of the entire image (deadC0de included)  Compute the crc32 of the kernel and padding between kernel and rootfs)  Compute the crc32 of the kernel and padding between kernel and rootfs)  Compute the crc32 of the flashImageStart to rootLength.
	   * The broadcom firmware assumes the rootfs starts the image,
	   * therefore uses the rootfs start to determine where to flash
	   * the image.  Since we have the kernel first we have to give
	   * it the kernel address, but the crc uses the length
	   * associated with this address, which is added to the kernel
	   * length to determine the length of image to flash and thus
	   * needs to be rootfs + deadcode
	    Build the kernel address and length (doesn't need to be aligned, read only)  Seek to the start of the kernel  Build the kernel header  Write the kernel header  Increase the kernel size by the header size  Write the kernel  Write the RootFS  Flush the binfile buffer so that when we read from file, it contains
	   * everything in the buffer
	    Compute the crc32 of the entire image (deadC0de included)  Compute the crc32 of the kernel and padding between kernel and rootfs)  Close the files  Build the tag  We don't include CFE 
 * This file is subject to the terms and conditions of the GNU General Public
 * License.  See the file "COPYING" in the main directory of this archive
 * for more details.
 *
 * Copyright (C) 2008 Axel Gembe <ago@bastart.eu.org>
 * Copyright (C) 2009-2010 Daniel Dickinson <openwrt@cshore.neomailbox.net>
  Kernel header  Kernel load address  Kernel entry point address  Compressed length of the LZMA data that follows  read block of 1024 bytes  Less than 1024 bytes remains, read compute_len bytes  Seek to the start of the file after tag  Write the cfe  Build the kernel address and length (doesn't need to be aligned, read only)  Build the kernel header  Increase the kernel size by the header size  Build the rootfs address and length  align the start if requested  align the end  Seek to the start of the kernel  Write the kernel header  Write the kernel  Write the RootFS  Align image to specified erase block size and append deadc0de  Flush the binfile buffer so that when we read from file, it contains
	   * everything in the buffer
	    Compute the crc32 of the entire image (deadC0de included)  Compute the crc32 of the kernel and padding between kernel and rootfs)  Compute the crc32 of the kernel and padding between kernel and rootfs)  Compute the crc32 of the flashImageStart to rootLength.
	   * The broadcom firmware assumes the rootfs starts the image,
	   * therefore uses the rootfs start to determine where to flash
	   * the image.  Since we have the kernel first we have to give
	   * it the kernel address, but the crc uses the length
	   * associated with this address, which is added to the kernel
	   * length to determine the length of image to flash and thus
	   * needs to be rootfs + deadcode
	    Build the kernel address and length (doesn't need to be aligned, read only)  Seek to the start of the kernel  Build the kernel header  Write the kernel header  Increase the kernel size by the header size  Write the kernel  Write the RootFS  Flush the binfile buffer so that when we read from file, it contains
	   * everything in the buffer
	    Compute the crc32 of the entire image (deadC0de included)  Compute the crc32 of the kernel and padding between kernel and rootfs)  Close the files  Build the tag  We don't include CFE 