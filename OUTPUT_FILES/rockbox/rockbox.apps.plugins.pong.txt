**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2004 Daniel Stenberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Recorder: 10   iRiver: 21  Recorder: 2    iRiver: 2   Recorder: 2    iRiver: 4   We want a square ball  Recorder: 168  iRiver: 240  Recorder: 128  iRiver: 256  This is the width of the dead spot where the
 * cpu player doesnt care about the ball -- 3/8 of the screen  move pad this many steps up/down each move  variable button definitions  X position of pad  wanted current Y position of pad  existing current Y position of pad  Status of AI player  current X*RES position of the ball  current Y*RES position of the ball      clear existing pad  draw wanted pad  existing is now the wanted  we have already checked for pad-collision, just check if this hits
       the wall  right-side  returns true if the ball has hit a pad, and then the info variable
   will have extra angle info  Y seems likely right  store the delta between ball-middle MINUS pad-middle, so
           it returns:
           0 when the ball hits exactly the middle of the pad
           positive numbers when the ball is below the middle of the pad
           negative numbers when the ball is above the middle of the pad

           max number is +- PAD_HEIGHT/2
         right-side  phump  nah  Give ball a little push to keep it from getting stuck between wall and pad  right side  info is the hit-angle into the pad  downwards  below the middle of the pad  above the middle  upwards  below the middle of the pad  above the middle  then move the X-speed of the ball and give it a random Y position  avoid hitting the pad with the new ball  restore Y-speed to default  set the existing pad positions to something weird to force pad
       updates  movement  detect if ball hits a wall  hit floor, bounce  hit ceiling, bounce  detect if ball hit pads  clear old position  draw the new ball position  cpu right  cpu left  player goes down  player goes up  if player presses control keys stop cpu player  reset the score  get rid of the text  player goes down  player goes up  number of ticks this function will loop reading keys  if left player presses control keys stop cpu player  reset the score  get rid of the text  if right player presses control keys stop cpu player  reset the score  get rid of the text  Pause game  exit game NOW  Pause game  ignore BUTTON_REPEAT  exit game because of USB  return 0 to exit game  make sure text isn't too long for screen  this is the plugin entry point  init the struct with some silly values to start with  start every game in demo mode  lets start at 0 - 0 ;-)  if you don't use the parameter, you can do like
       this to avoid the compiler warning about it  Turn off backlight timeout  Clear screen  go go go  draw left pad  draw right pad  move and draw ball  deal with keys  Game Paused  short circuit  Turn on backlight timeout (revert to settings) **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2004 Daniel Stenberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Recorder: 10   iRiver: 21  Recorder: 2    iRiver: 2   Recorder: 2    iRiver: 4   We want a square ball  Recorder: 168  iRiver: 240  Recorder: 128  iRiver: 256  This is the width of the dead spot where the
 * cpu player doesnt care about the ball -- 3/8 of the screen  move pad this many steps up/down each move  variable button definitions  X position of pad  wanted current Y position of pad  existing current Y position of pad  Status of AI player  current X*RES position of the ball  current Y*RES position of the ball      clear existing pad  draw wanted pad  existing is now the wanted  we have already checked for pad-collision, just check if this hits
       the wall  right-side  returns true if the ball has hit a pad, and then the info variable
   will have extra angle info  Y seems likely right  store the delta between ball-middle MINUS pad-middle, so
           it returns:
           0 when the ball hits exactly the middle of the pad
           positive numbers when the ball is below the middle of the pad
           negative numbers when the ball is above the middle of the pad

           max number is +- PAD_HEIGHT/2
         right-side  phump  nah  Give ball a little push to keep it from getting stuck between wall and pad  right side  info is the hit-angle into the pad  downwards  below the middle of the pad  above the middle  upwards  below the middle of the pad  above the middle  then move the X-speed of the ball and give it a random Y position  avoid hitting the pad with the new ball  restore Y-speed to default  set the existing pad positions to something weird to force pad
       updates  movement  detect if ball hits a wall  hit floor, bounce  hit ceiling, bounce  detect if ball hit pads  clear old position  draw the new ball position  cpu right  cpu left  player goes down  player goes up  if player presses control keys stop cpu player  reset the score  get rid of the text  player goes down  player goes up  number of ticks this function will loop reading keys  if left player presses control keys stop cpu player  reset the score  get rid of the text  if right player presses control keys stop cpu player  reset the score  get rid of the text  Pause game  exit game NOW  Pause game  ignore BUTTON_REPEAT  exit game because of USB  return 0 to exit game  make sure text isn't too long for screen  this is the plugin entry point  init the struct with some silly values to start with  start every game in demo mode  lets start at 0 - 0 ;-)  if you don't use the parameter, you can do like
       this to avoid the compiler warning about it  Turn off backlight timeout  Clear screen  go go go  draw left pad  draw right pad  move and draw ball  deal with keys  Game Paused  short circuit  Turn on backlight timeout (revert to settings) **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2004 Daniel Stenberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Recorder: 10   iRiver: 21  Recorder: 2    iRiver: 2   Recorder: 2    iRiver: 4   We want a square ball  Recorder: 168  iRiver: 240  Recorder: 128  iRiver: 256  This is the width of the dead spot where the
 * cpu player doesnt care about the ball -- 3/8 of the screen  move pad this many steps up/down each move  variable button definitions  X position of pad  wanted current Y position of pad  existing current Y position of pad  Status of AI player  current X*RES position of the ball  current Y*RES position of the ball      clear existing pad  draw wanted pad  existing is now the wanted  we have already checked for pad-collision, just check if this hits
       the wall  right-side  returns true if the ball has hit a pad, and then the info variable
   will have extra angle info  Y seems likely right  store the delta between ball-middle MINUS pad-middle, so
           it returns:
           0 when the ball hits exactly the middle of the pad
           positive numbers when the ball is below the middle of the pad
           negative numbers when the ball is above the middle of the pad

           max number is +- PAD_HEIGHT/2
         right-side  phump  nah  Give ball a little push to keep it from getting stuck between wall and pad  right side  info is the hit-angle into the pad  downwards  below the middle of the pad  above the middle  upwards  below the middle of the pad  above the middle  then move the X-speed of the ball and give it a random Y position  avoid hitting the pad with the new ball  restore Y-speed to default  set the existing pad positions to something weird to force pad
       updates  movement  detect if ball hits a wall  hit floor, bounce  hit ceiling, bounce  detect if ball hit pads  clear old position  draw the new ball position  cpu right  cpu left  player goes down  player goes up  if player presses control keys stop cpu player  reset the score  get rid of the text  player goes down  player goes up  number of ticks this function will loop reading keys  if left player presses control keys stop cpu player  reset the score  get rid of the text  if right player presses control keys stop cpu player  reset the score  get rid of the text  Pause game  exit game NOW  Pause game  ignore BUTTON_REPEAT  exit game because of USB  return 0 to exit game  make sure text isn't too long for screen  this is the plugin entry point  init the struct with some silly values to start with  start every game in demo mode  lets start at 0 - 0 ;-)  if you don't use the parameter, you can do like
       this to avoid the compiler warning about it  Turn off backlight timeout  Clear screen  go go go  draw left pad  draw right pad  move and draw ball  deal with keys  Game Paused  short circuit  Turn on backlight timeout (revert to settings) 