**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 Björn Stenberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** settings_menu.c   redefine MAKE_MENU so the MENU_EXITAFTERTHISMENU flag can be added easily  Used for directory move, copy and delete  Buffer for full path  Append position in 'path' for stack push  Is a move (cut) operation (default)  Is a copy operation  Overwrite destination  Actually copy/move across volumes  result codec of various onplay operations  Anything < 0 is failure  All operations completed successfully  Operation didn't need to do anything  Operation was cancelled by user  Clipped file's path  Clipped file's attributes  Operation type flags  Empty the clipboard  Store the selection in the clipboard  if it fits it clips  -----------------------------------------------------------------------  Displays the bookmark menu options for the user to decide.  This is an   interface function.                                                      -----------------------------------------------------------------------  hide create bookmark option if bookmarking isn't currently possible (no track playing, queued tracks...)  hide loading bookmarks menu if no bookmarks exist  hide the bookmark menu if bookmarks can't be loaded or created  playing_time screen context  index of currently playing track in playlist  how many tracks in playlist  seconds before and after current position, and total.  Datatype
       allows for values up to 68years.  If I had kept it in ms
       though, it would have overflowed at 24days, which takes
       something like 8.5GB at 32kbps, and so we could conceivably
       have playlists lasting longer than that.  kilobytes played before and after current pos, and total.
       Kilobytes because bytes would overflow. Data type range is up
       to 2TB.  list callback for playing_time screen  elapsed and total time  percentage of duration elapsed  sacrifice some precision to avoid overflow  playlist remaining time  track elapsed and duration  percentage of duration elapsed  sacrifice some precision to avoid overflow  track remaining time  track index  storage size  Average track file size  Average bitrate  Convert power of 2 kilobytes to power of 10 kilobits  playing time screen: shows total and elapsed playlist duration and
   other stats  Go through each file in the playlist and get its stats. For
       huge playlists this can take a while... The reference position
       is the position at the moment this function was invoked,
       although playback continues forward.  Show a splash while we are loading.  Voice equivalent     gui_syncstatusbar_draw(&statusbars, true);         gui_syncstatusbar_draw(&statusbars, false);  CONTEXT_WPS playlist options  from playlist_menu.c  CONTEXT_[TREE|ID3DB] playlist options  always set seed before inserting shuffled  Ask if user wants to recurse directory  nothing is currently playing so begin playing what we just
           inserted  playlist was started from viewer  insert items  queue items  replace playlist  others  view  insert  queue  replace  playlist catalog options  Splashes the path and checks the keys  at least prevent escapes out of the base directory from keyboard-
       entered filenames; the file code should reject other invalidities  helper function to remove a non-empty directory  open error  walk through the directory content  distinguish failure from eod  skip these  append name to current directory  no space left in buffer  remove a subdirectory  remove a file  Remove basename we added above  remove the now empty directory  share code for file and directory deletion, saves space  true if directory  Could have failed after some but not all needed changes; reload  Too long  No change at all  don't overwrite  Fall-through  splash_cancelled(); kbd_input() splashes it  Too long  splash_cancelled(); kbd_input() splashes it  Paste a file  Rename and possibly overwrite the file  Failed because cross volume rename doesn't work; force
                   a move instead  HAVE_MULTIVOLUME  See if we can get the plugin buffer for the file copy buffer  Not large enough, try for a disk sector worth of stack
           instead  Round buffer size to multiple of sector
                              size  No excessive button polling  else eof on buffer boundary; nothing to write  Some I/O error  EOF with trailing bytes  If overwriting, set the correct length if original was
                   longer  Copy failed. Cleanup.  Remove the source file  Paste a directory  Just try to move the directory  Directory is not empty thus rename() will not do a quick
                       overwrite  Failed because cross volume rename doesn't work; force
                       a move instead  HAVE_MULTIVOLUME  Make a directory to copy things to  Exists and overwrite was approved  Walk through the directory content; this loop will exit as soon as
       there's a problem  Distinguish failure from eod  Skip these  Append names to current directories  No space left in buffer  Copy/move a subdirectory  recursion  Copy/move a file  Remove basenames we added above  Remove the now empty directory  Paste the clipboard to the current directory  Figure out the name of the selection  Final target is current directory plus name of selection   If user chooses not to overwrite, cancel  Now figure out what we're doing  Copy or move a subdirectory  Copy or move a file  Some other relation / failure  CONTEXT_WPS items  CONTEXT_[TREE|ID3DB] items  other items  no rename+delete for volumes  visible if there is something to paste  always visible  requires an actual file  only for directories  only for files  used when onplay() is called in the CONTEXT_WPS context  used when onplay() is not called in the CONTEXT_WPS context  direct function calls, no need for menu callbacks  no delete for volumes  only open files  hotkey_action  Language ID  Function to run if this entry is selected  What to return after the function is run   Any desired hotkey functions go here, in the enum in onplay.h,
   and in the settings menu in settings_list.c.  The order here
   is not important.  Return the language ID for this action  Execute the hotkey function, if listed  search assignment struct for a match for the hotkey setting  run the associated function (with optional param), if any  return with the associated code  ONPLAY_OK here means to use the function return code  no valid hotkey set, ignore hotkey  HOTKEY **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 Björn Stenberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** settings_menu.c   redefine MAKE_MENU so the MENU_EXITAFTERTHISMENU flag can be added easily  Used for directory move, copy and delete  Buffer for full path  Append position in 'path' for stack push  Is a move (cut) operation (default)  Is a copy operation  Overwrite destination  Actually copy/move across volumes  result codec of various onplay operations  Anything < 0 is failure  All operations completed successfully  Operation didn't need to do anything  Operation was cancelled by user  Clipped file's path  Clipped file's attributes  Operation type flags  Empty the clipboard  Store the selection in the clipboard  if it fits it clips  -----------------------------------------------------------------------  Displays the bookmark menu options for the user to decide.  This is an   interface function.                                                      -----------------------------------------------------------------------  hide create bookmark option if bookmarking isn't currently possible (no track playing, queued tracks...)  hide loading bookmarks menu if no bookmarks exist  hide the bookmark menu if bookmarks can't be loaded or created  playing_time screen context  index of currently playing track in playlist  how many tracks in playlist  seconds before and after current position, and total.  Datatype
       allows for values up to 68years.  If I had kept it in ms
       though, it would have overflowed at 24days, which takes
       something like 8.5GB at 32kbps, and so we could conceivably
       have playlists lasting longer than that.  kilobytes played before and after current pos, and total.
       Kilobytes because bytes would overflow. Data type range is up
       to 2TB.  list callback for playing_time screen  elapsed and total time  percentage of duration elapsed  sacrifice some precision to avoid overflow  playlist remaining time  track elapsed and duration  percentage of duration elapsed  sacrifice some precision to avoid overflow  track remaining time  track index  storage size  Average track file size  Average bitrate  Convert power of 2 kilobytes to power of 10 kilobits  playing time screen: shows total and elapsed playlist duration and
   other stats  Go through each file in the playlist and get its stats. For
       huge playlists this can take a while... The reference position
       is the position at the moment this function was invoked,
       although playback continues forward.  Show a splash while we are loading.  Voice equivalent     gui_syncstatusbar_draw(&statusbars, true);         gui_syncstatusbar_draw(&statusbars, false);  CONTEXT_WPS playlist options  from playlist_menu.c  CONTEXT_[TREE|ID3DB] playlist options  always set seed before inserting shuffled  Ask if user wants to recurse directory  nothing is currently playing so begin playing what we just
           inserted  playlist was started from viewer  insert items  queue items  replace playlist  others  view  insert  queue  replace  playlist catalog options  Splashes the path and checks the keys  at least prevent escapes out of the base directory from keyboard-
       entered filenames; the file code should reject other invalidities  helper function to remove a non-empty directory  open error  walk through the directory content  distinguish failure from eod  skip these  append name to current directory  no space left in buffer  remove a subdirectory  remove a file  Remove basename we added above  remove the now empty directory  share code for file and directory deletion, saves space  true if directory  Could have failed after some but not all needed changes; reload  Too long  No change at all  don't overwrite  Fall-through  splash_cancelled(); kbd_input() splashes it  Too long  splash_cancelled(); kbd_input() splashes it  Paste a file  Rename and possibly overwrite the file  Failed because cross volume rename doesn't work; force
                   a move instead  HAVE_MULTIVOLUME  See if we can get the plugin buffer for the file copy buffer  Not large enough, try for a disk sector worth of stack
           instead  Round buffer size to multiple of sector
                              size  No excessive button polling  else eof on buffer boundary; nothing to write  Some I/O error  EOF with trailing bytes  If overwriting, set the correct length if original was
                   longer  Copy failed. Cleanup.  Remove the source file  Paste a directory  Just try to move the directory  Directory is not empty thus rename() will not do a quick
                       overwrite  Failed because cross volume rename doesn't work; force
                       a move instead  HAVE_MULTIVOLUME  Make a directory to copy things to  Exists and overwrite was approved  Walk through the directory content; this loop will exit as soon as
       there's a problem  Distinguish failure from eod  Skip these  Append names to current directories  No space left in buffer  Copy/move a subdirectory  recursion  Copy/move a file  Remove basenames we added above  Remove the now empty directory  Paste the clipboard to the current directory  Figure out the name of the selection  Final target is current directory plus name of selection   If user chooses not to overwrite, cancel  Now figure out what we're doing  Copy or move a subdirectory  Copy or move a file  Some other relation / failure  CONTEXT_WPS items  CONTEXT_[TREE|ID3DB] items  other items  no rename+delete for volumes  visible if there is something to paste  always visible  requires an actual file  only for directories  only for files  used when onplay() is called in the CONTEXT_WPS context  used when onplay() is not called in the CONTEXT_WPS context  direct function calls, no need for menu callbacks  no delete for volumes  only open files  hotkey_action  Language ID  Function to run if this entry is selected  What to return after the function is run   Any desired hotkey functions go here, in the enum in onplay.h,
   and in the settings menu in settings_list.c.  The order here
   is not important.  Return the language ID for this action  Execute the hotkey function, if listed  search assignment struct for a match for the hotkey setting  run the associated function (with optional param), if any  return with the associated code  ONPLAY_OK here means to use the function return code  no valid hotkey set, ignore hotkey  HOTKEY **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 Björn Stenberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** settings_menu.c   redefine MAKE_MENU so the MENU_EXITAFTERTHISMENU flag can be added easily  Used for directory move, copy and delete  Buffer for full path  Append position in 'path' for stack push  Is a move (cut) operation (default)  Is a copy operation  Overwrite destination  Actually copy/move across volumes  result codec of various onplay operations  Anything < 0 is failure  All operations completed successfully  Operation didn't need to do anything  Operation was cancelled by user  Clipped file's path  Clipped file's attributes  Operation type flags  Empty the clipboard  Store the selection in the clipboard  if it fits it clips  -----------------------------------------------------------------------  Displays the bookmark menu options for the user to decide.  This is an   interface function.                                                      -----------------------------------------------------------------------  hide create bookmark option if bookmarking isn't currently possible (no track playing, queued tracks...)  hide loading bookmarks menu if no bookmarks exist  hide the bookmark menu if bookmarks can't be loaded or created  playing_time screen context  index of currently playing track in playlist  how many tracks in playlist  seconds before and after current position, and total.  Datatype
       allows for values up to 68years.  If I had kept it in ms
       though, it would have overflowed at 24days, which takes
       something like 8.5GB at 32kbps, and so we could conceivably
       have playlists lasting longer than that.  kilobytes played before and after current pos, and total.
       Kilobytes because bytes would overflow. Data type range is up
       to 2TB.  list callback for playing_time screen  elapsed and total time  percentage of duration elapsed  sacrifice some precision to avoid overflow  playlist remaining time  track elapsed and duration  percentage of duration elapsed  sacrifice some precision to avoid overflow  track remaining time  track index  storage size  Average track file size  Average bitrate  Convert power of 2 kilobytes to power of 10 kilobits  playing time screen: shows total and elapsed playlist duration and
   other stats  Go through each file in the playlist and get its stats. For
       huge playlists this can take a while... The reference position
       is the position at the moment this function was invoked,
       although playback continues forward.  Show a splash while we are loading.  Voice equivalent     gui_syncstatusbar_draw(&statusbars, true);         gui_syncstatusbar_draw(&statusbars, false);  CONTEXT_WPS playlist options  from playlist_menu.c  CONTEXT_[TREE|ID3DB] playlist options  always set seed before inserting shuffled  Ask if user wants to recurse directory  nothing is currently playing so begin playing what we just
           inserted  playlist was started from viewer  insert items  queue items  replace playlist  others  view  insert  queue  replace  playlist catalog options  Splashes the path and checks the keys  at least prevent escapes out of the base directory from keyboard-
       entered filenames; the file code should reject other invalidities  helper function to remove a non-empty directory  open error  walk through the directory content  distinguish failure from eod  skip these  append name to current directory  no space left in buffer  remove a subdirectory  remove a file  Remove basename we added above  remove the now empty directory  share code for file and directory deletion, saves space  true if directory  Could have failed after some but not all needed changes; reload  Too long  No change at all  don't overwrite  Fall-through  splash_cancelled(); kbd_input() splashes it  Too long  splash_cancelled(); kbd_input() splashes it  Paste a file  Rename and possibly overwrite the file  Failed because cross volume rename doesn't work; force
                   a move instead  HAVE_MULTIVOLUME  See if we can get the plugin buffer for the file copy buffer  Not large enough, try for a disk sector worth of stack
           instead  Round buffer size to multiple of sector
                              size  No excessive button polling  else eof on buffer boundary; nothing to write  Some I/O error  EOF with trailing bytes  If overwriting, set the correct length if original was
                   longer  Copy failed. Cleanup.  Remove the source file  Paste a directory  Just try to move the directory  Directory is not empty thus rename() will not do a quick
                       overwrite  Failed because cross volume rename doesn't work; force
                       a move instead  HAVE_MULTIVOLUME  Make a directory to copy things to  Exists and overwrite was approved  Walk through the directory content; this loop will exit as soon as
       there's a problem  Distinguish failure from eod  Skip these  Append names to current directories  No space left in buffer  Copy/move a subdirectory  recursion  Copy/move a file  Remove basenames we added above  Remove the now empty directory  Paste the clipboard to the current directory  Figure out the name of the selection  Final target is current directory plus name of selection   If user chooses not to overwrite, cancel  Now figure out what we're doing  Copy or move a subdirectory  Copy or move a file  Some other relation / failure  CONTEXT_WPS items  CONTEXT_[TREE|ID3DB] items  other items  no rename+delete for volumes  visible if there is something to paste  always visible  requires an actual file  only for directories  only for files  used when onplay() is called in the CONTEXT_WPS context  used when onplay() is not called in the CONTEXT_WPS context  direct function calls, no need for menu callbacks  no delete for volumes  only open files  hotkey_action  Language ID  Function to run if this entry is selected  What to return after the function is run   Any desired hotkey functions go here, in the enum in onplay.h,
   and in the settings menu in settings_list.c.  The order here
   is not important.  Return the language ID for this action  Execute the hotkey function, if listed  search assignment struct for a match for the hotkey setting  run the associated function (with optional param), if any  return with the associated code  ONPLAY_OK here means to use the function return code  no valid hotkey set, ignore hotkey  HOTKEY 