**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 * Tuner driver for the Sanyo LV24020LP
 *
 * Copyright (C) 2007 Ivan Zupan
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** tuner abstraction interface  physical interface driver  define RSSI range  define to enable tuner logging  syncing required because close() is never called #define LOGF_ENABLE SANYO_TUNER_LOG * tuner register defines * block 1 registers  R  W  W  W  W  W  W  W  W  R  Counter register low value  R  Counter register high value  R  R  Note: Reading this register will clear field strength and mono/stereo interrupt.  R  W  block 2 registers - offset added in order to id and avoid manual
   switching  W  W  W  W  ??  W  For LV24000=0, LV24001/24002=Ext source enab.  W  W  W  BASS_P, BASS_N are mutually-exclusive  TREB_P, TREB_N are mutually-exclusive  W  LV24002 only  shadow for writeable registers  30;  200;  linear coefficients used for tuning  DAC control register set values  send a byte to the tuner - expects write mode to be current  end a write cycle on the tuner  switch back to read mode  prepare a write cycle on the tuner  Get register's block, translate address  Prepare 3-wire bus pins for write cycle  current block == register block?  switch block  data first  then address  write a byte to a tuner register  shadow logical values but do logical=>physical remappings on some
       registers' data.  L: 000..255
         * P: 255..000  L: 000..063, 064..191
         * P: 255..192, 127..000  L: data
         * P: data | always "1" bits  Check if interface is turned on  data first  then address  helpers to set/clear register bits  read a byte from a tuner register  Check if interface is turned on  address  data  enables auto frequency centering  Overflow below 66000kHz --
       My tuner tunes down to a min of ~72600kHz but datasheet mentions
       66000kHz as the minimum. ?? Perhaps 76000kHz was intended?  this performs measurements of IF, FM and Stereo frequencies
 * Input can be: MSS_FM, MSS_IF, MSS_SD  enable measuring  reset counter  start counter, delay for specified time and stop it  obtain actual duration, including interrupts that occurred and
     * the time to write the counter stop  This function takes a loooong time and other stuff needs
       running by now  read tick count  restore measure mode  convert value  set the FM oscillator frequency  For the LV2400x, the tuned frequency is the sum of the displayed
     * frequency and the preset IF frequency, in formula:
     *      Tuned FM frequency = displayed frequency + preset IF frequency
     *
     * For example: when the IF frequency of LV2400x is preset at 110 kHz,
     * it must be tuned at 88.51 MHz to receive the radio station at 88.4 MHz.
     * -- AN2400S04@ \96 V0.4
      MHz -> kHz  Just in case - don't go into infinite loop  FM_OSC already at SW_OSC low and f1 is already the measured
       frequency  May still be close enough  Registers are not always stable, timeout if best fit not found soon
       enough  approached with step=1: best fit value found  This register is bounces around by a few hundred Hz and doesn't seem
       to be precisely tuneable. Just do 110000 +/- 500 since it's not very
       critical it seems.  2. Calibrate the IF frequency at 110 kHz:  3. Calibrate the stereo decoder clock at 38.3 kHz:  calculate FM tuning coefficients  set various audio level settings  tuner-specific debug info * Public interfaces * This function expects the driver to be locked externally  Block 1 writeable  registers  IRQ_LVL -> Low to High  { IRQ_OUT,     0x00 }, No action on this register (skip)  Block 2 writeable registers  65% of IF_OSC  deemphasis 50us  if tuner is present, CHIP ID is 0x09  After power-up, the LV2400x needs to be initialized as
               follows:  1. Write default values to the registers:  Force a switch on the first  Complete the startup calibration if the tuner is woken  Power off  TODO: really implement this  TODO: really implement this  BOOTLOADER **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 * Tuner driver for the Sanyo LV24020LP
 *
 * Copyright (C) 2007 Ivan Zupan
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** tuner abstraction interface  physical interface driver  define RSSI range  define to enable tuner logging  syncing required because close() is never called #define LOGF_ENABLE SANYO_TUNER_LOG * tuner register defines * block 1 registers  R  W  W  W  W  W  W  W  W  R  Counter register low value  R  Counter register high value  R  R  Note: Reading this register will clear field strength and mono/stereo interrupt.  R  W  block 2 registers - offset added in order to id and avoid manual
   switching  W  W  W  W  ??  W  For LV24000=0, LV24001/24002=Ext source enab.  W  W  W  BASS_P, BASS_N are mutually-exclusive  TREB_P, TREB_N are mutually-exclusive  W  LV24002 only  shadow for writeable registers  30;  200;  linear coefficients used for tuning  DAC control register set values  send a byte to the tuner - expects write mode to be current  end a write cycle on the tuner  switch back to read mode  prepare a write cycle on the tuner  Get register's block, translate address  Prepare 3-wire bus pins for write cycle  current block == register block?  switch block  data first  then address  write a byte to a tuner register  shadow logical values but do logical=>physical remappings on some
       registers' data.  L: 000..255
         * P: 255..000  L: 000..063, 064..191
         * P: 255..192, 127..000  L: data
         * P: data | always "1" bits  Check if interface is turned on  data first  then address  helpers to set/clear register bits  read a byte from a tuner register  Check if interface is turned on  address  data  enables auto frequency centering  Overflow below 66000kHz --
       My tuner tunes down to a min of ~72600kHz but datasheet mentions
       66000kHz as the minimum. ?? Perhaps 76000kHz was intended?  this performs measurements of IF, FM and Stereo frequencies
 * Input can be: MSS_FM, MSS_IF, MSS_SD  enable measuring  reset counter  start counter, delay for specified time and stop it  obtain actual duration, including interrupts that occurred and
     * the time to write the counter stop  This function takes a loooong time and other stuff needs
       running by now  read tick count  restore measure mode  convert value  set the FM oscillator frequency  For the LV2400x, the tuned frequency is the sum of the displayed
     * frequency and the preset IF frequency, in formula:
     *      Tuned FM frequency = displayed frequency + preset IF frequency
     *
     * For example: when the IF frequency of LV2400x is preset at 110 kHz,
     * it must be tuned at 88.51 MHz to receive the radio station at 88.4 MHz.
     * -- AN2400S04@ \96 V0.4
      MHz -> kHz  Just in case - don't go into infinite loop  FM_OSC already at SW_OSC low and f1 is already the measured
       frequency  May still be close enough  Registers are not always stable, timeout if best fit not found soon
       enough  approached with step=1: best fit value found  This register is bounces around by a few hundred Hz and doesn't seem
       to be precisely tuneable. Just do 110000 +/- 500 since it's not very
       critical it seems.  2. Calibrate the IF frequency at 110 kHz:  3. Calibrate the stereo decoder clock at 38.3 kHz:  calculate FM tuning coefficients  set various audio level settings  tuner-specific debug info * Public interfaces * This function expects the driver to be locked externally  Block 1 writeable  registers  IRQ_LVL -> Low to High  { IRQ_OUT,     0x00 }, No action on this register (skip)  Block 2 writeable registers  65% of IF_OSC  deemphasis 50us  if tuner is present, CHIP ID is 0x09  After power-up, the LV2400x needs to be initialized as
               follows:  1. Write default values to the registers:  Force a switch on the first  Complete the startup calibration if the tuner is woken  Power off  TODO: really implement this  TODO: really implement this  BOOTLOADER **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 * Tuner driver for the Sanyo LV24020LP
 *
 * Copyright (C) 2007 Ivan Zupan
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** tuner abstraction interface  physical interface driver  define RSSI range  define to enable tuner logging  syncing required because close() is never called #define LOGF_ENABLE SANYO_TUNER_LOG * tuner register defines * block 1 registers  R  W  W  W  W  W  W  W  W  R  Counter register low value  R  Counter register high value  R  R  Note: Reading this register will clear field strength and mono/stereo interrupt.  R  W  block 2 registers - offset added in order to id and avoid manual
   switching  W  W  W  W  ??  W  For LV24000=0, LV24001/24002=Ext source enab.  W  W  W  BASS_P, BASS_N are mutually-exclusive  TREB_P, TREB_N are mutually-exclusive  W  LV24002 only  shadow for writeable registers  30;  200;  linear coefficients used for tuning  DAC control register set values  send a byte to the tuner - expects write mode to be current  end a write cycle on the tuner  switch back to read mode  prepare a write cycle on the tuner  Get register's block, translate address  Prepare 3-wire bus pins for write cycle  current block == register block?  switch block  data first  then address  write a byte to a tuner register  shadow logical values but do logical=>physical remappings on some
       registers' data.  L: 000..255
         * P: 255..000  L: 000..063, 064..191
         * P: 255..192, 127..000  L: data
         * P: data | always "1" bits  Check if interface is turned on  data first  then address  helpers to set/clear register bits  read a byte from a tuner register  Check if interface is turned on  address  data  enables auto frequency centering  Overflow below 66000kHz --
       My tuner tunes down to a min of ~72600kHz but datasheet mentions
       66000kHz as the minimum. ?? Perhaps 76000kHz was intended?  this performs measurements of IF, FM and Stereo frequencies
 * Input can be: MSS_FM, MSS_IF, MSS_SD  enable measuring  reset counter  start counter, delay for specified time and stop it  obtain actual duration, including interrupts that occurred and
     * the time to write the counter stop  This function takes a loooong time and other stuff needs
       running by now  read tick count  restore measure mode  convert value  set the FM oscillator frequency  For the LV2400x, the tuned frequency is the sum of the displayed
     * frequency and the preset IF frequency, in formula:
     *      Tuned FM frequency = displayed frequency + preset IF frequency
     *
     * For example: when the IF frequency of LV2400x is preset at 110 kHz,
     * it must be tuned at 88.51 MHz to receive the radio station at 88.4 MHz.
     * -- AN2400S04@ \96 V0.4
      MHz -> kHz  Just in case - don't go into infinite loop  FM_OSC already at SW_OSC low and f1 is already the measured
       frequency  May still be close enough  Registers are not always stable, timeout if best fit not found soon
       enough  approached with step=1: best fit value found  This register is bounces around by a few hundred Hz and doesn't seem
       to be precisely tuneable. Just do 110000 +/- 500 since it's not very
       critical it seems.  2. Calibrate the IF frequency at 110 kHz:  3. Calibrate the stereo decoder clock at 38.3 kHz:  calculate FM tuning coefficients  set various audio level settings  tuner-specific debug info * Public interfaces * This function expects the driver to be locked externally  Block 1 writeable  registers  IRQ_LVL -> Low to High  { IRQ_OUT,     0x00 }, No action on this register (skip)  Block 2 writeable registers  65% of IF_OSC  deemphasis 50us  if tuner is present, CHIP ID is 0x09  After power-up, the LV2400x needs to be initialized as
               follows:  1. Write default values to the registers:  Force a switch on the first  Complete the startup calibration if the tuner is woken  Power off  TODO: really implement this  TODO: really implement this  BOOTLOADER 