 screen.c - Generic screen manipulation
 *	Copyright (c) 1995-1997 Stefan Jokisch
 *
 * This file is part of Frotz.
 *
 * Frotz is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Frotz is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 
 * winarg0
 *
 * Return the window number in zargs[0]. In V6 only, -3 refers to the
 * current window.
 *
  winarg0 
 * winarg2
 *
 * Return the (optional) window number in zargs[2]. -3 refers to the
 * current window. This optional window number was only used by some
 * V6 opcodes: set_cursor, set_margins, set_colour.
 *
  winarg2 
 * update_cursor
 *
 * Move the hardware cursor to make it match the window properties.
 *
  update_cursor 
 * reset_cursor
 *
 * Reset the cursor of a given window to its initial position.
 *
  reset_cursor 
 * set_more_prompts
 *
 * Turn more prompts on/off.
 *
  set_more_prompts 
 * units_left
 *
 * Return the #screen units from the cursor to the end of the line.
 *
  units_left 
 * get_max_width
 *
 * Return maximum width of a line in the given window. This is used in
 * connection with the extended output stream #3 call in V6.
 *
  get_max_width 
 * countdown
 *
 * Decrement the newline counter. Call the newline interrupt when the
 * counter hits zero. This is a helper function for screen_new_line.
 *
  countdown 
 * screen_new_line
 *
 * Print a newline to the screen.
 *
  Handle newline interrupts at the start (for most cases)  Check whether the last input line gets destroyed  If the cursor has not reached the bottom line, then move it to
       the next line; otherwise scroll the window or reset the cursor
       to the top left.  See if we need to print a more prompt (unless the game has set
       the line counter to -999 in order to suppress more prompts).  Handle newline interrupts at the end for Zork Zero under DOS  screen_new_line 
 * screen_char
 *
 * Display a single character on the screen.
 *
  screen_char 
 * screen_word
 *
 * Display a string of characters on the screen. If the word doesn't fit
 * then use wrapping or clipping depending on the current setting of the
 * enable_wrapping flag.
 *
  screen_word 
 * screen_write_input
 *
 * Display an input line on the screen. This is required during playback.
 *
  screen_write_input 
 * screen_erase_input
 *
 * Remove an input line that has already been printed from the screen
 * as if it was deleted by the player. This could be necessary during
 * playback.
 *
  screen_erase_input 
 * console_read_input
 *
 * Read an input line from the keyboard and return the terminating key.
 *
  Make sure there is some space for input  Make sure the input line is visible  Get input line from IO interface  Add a newline if the input was terminated normally  console_read_input 
 * console_read_key
 *
 * Read a single keystroke and return it.
 *
  console_read_key 
 * update_attributes
 *
 * Set the three enable_*** variables to make them match the attributes
 * of the current window.
 *
  Some story files forget to select wrapping for printing hints  update_attributes 
 * refresh_text_style
 *
 * Set the right text style. This can be necessary when the fixed font
 * flag is changed, or when a new window is selected, or when the game
 * uses the set_text_style opcode.
 *
  refresh_text_style 
 * set_window
 *
 * Set the current window. In V6 every window has its own set of window
 * properties such as colours, text style, cursor position and size.
 *
  set_window 
 * erase_window
 *
 * Erase a window to background colour.
 *
  erase_window 
 * split_window
 *
 * Divide the screen into upper (1) and lower (0) windows. In V3 the upper
 * window appears below the status line.
 *
  Calculate height of status line and upper window  Cursor of upper window mustn't be swallowed by the lower window  Cursor of lower window mustn't be swallowed by the upper window  Erase the upper window in V3 only  split_window 
 * erase_screen
 *
 * Erase the entire screen to background colour.
 *
  erase_screen  #ifdef AMIGA 
 * resize_screen
 *
 * Try to adapt the window properties to a new screen size.
 *
  resize_screen  #endif 
 * restart_screen
 *
 * Prepare the screen for a new game.
 *
  Use default settings  Initialise window properties  Prepare lower/upper windows and status line  Clear the screen, unsplit it and select window 0  restart_screen 
 * validate_click
 *
 * Return false if the last mouse click occured outside the current
 * mouse window; otherwise write the mouse arrow coordinates to the
 * memory of the header extension table and return true.
 *
  validate_click 
 * screen_mssg_on
 *
 * Start printing a so-called debugging message. The contents of the
 * message are passed to the message stream, a Frotz specific output
 * stream with maximum priority.
 *
  messages in window 0 only  discard messages in other windows  screen_mssg_on 
 * screen_mssg_off
 *
 * Stop printing a "debugging" message.
 *
  messages in window 0 only  message has been discarded  screen_mssg_off 
 * z_buffer_mode, turn text buffering on/off.
 *
 *	zargs[0] = new text buffering flag (0 or 1)
 *
  Infocom's V6 games rarely use the buffer_mode opcode. If they do
       then only to print text immediately, without any delay. This was
       used to give the player some sign of life while the game was
       spending much time on parsing a complicated input line. (To turn
       off word wrapping, V6 games use the window_style opcode instead.)
       Today we can afford to ignore buffer_mode in V6.  z_buffer_mode 
 * z_draw_picture, draw a picture.
 *
 *	zargs[0] = number of picture to draw
 *	zargs[1] = y-coordinate of top left corner
 *	zargs[2] = x-coordinate of top left corner
 *
  use cursor line if y-coordinate is 0  use cursor column if x-coordinate is 0  The following is necessary to make Amiga and Macintosh story
       files work with MCGA graphics files.  Some screen-filling
       pictures of the original Amiga release like the borders of
       Zork Zero were split into several MCGA pictures (left, right
       and top borders).  We pretend this has not happened.  z_draw_picture 
 * z_erase_line, erase the line starting at the cursor position.
 *
 *	zargs[0] = 1 + #units to erase (1 clears to the end of the line)
 *
  Clipping at the right margin of the current window  Erase from cursor position  z_erase_line 
 * z_erase_picture, erase a picture with background colour.
 *
 *	zargs[0] = number of picture to erase
 *	zargs[1] = y-coordinate of top left corner (optional)
 *	zargs[2] = x-coordinate of top left corner (optional)
 *
  use cursor line if y-coordinate is 0  use cursor column if x-coordinate is 0  z_erase_picture 
 * z_erase_window, erase a window or the screen to background colour.
 *
 *	zargs[0] = window (-3 current, -2 screen, -1 screen & unsplit)
 *
  z_erase_window 
 * z_get_cursor, write the cursor coordinates into a table.
 *
 *	zargs[0] = address to write information to
 *
  convert to grid positions  z_get_cursor 
 * z_get_wind_prop, store the value of a window property.
 *
 *	zargs[0] = window (-3 is the current one)
 *	zargs[1] = number of window property to be stored
 *
  z_get_wind_prop 
 * z_mouse_window, select a window as mouse window.
 *
 *	zargs[0] = window number (-3 is the current) or -1 for the screen
 *
  z_mouse_window 
 * z_move_window, place a window on the screen.
 *
 *	zargs[0] = window (-3 is the current one)
 *	zargs[1] = y-coordinate
 *	zargs[2] = x-coordinate
 *
  z_move_window 
 * z_picture_data, get information on a picture or the graphics file.
 *
 *	zargs[0] = number of picture or 0 for the graphics file
 *	zargs[1] = address to write information to
 *
  z_picture_data 
 * z_picture_table, prepare a group of pictures for faster display.
 *
 *	zargs[0] = address of table holding the picture numbers
 *
  This opcode is used by Shogun and Zork Zero when the player
       encounters built-in games such as Peggleboz. Nowadays it is
       not very helpful to hold the picture data in memory because
       even a small disk cache avoids re-loading of data.  z_picture_table 
 * z_print_table, print ASCII text in a rectangular area.
 *
 *	zargs[0] = address of text to be printed
 *	zargs[1] = width of rectangular area
 *	zargs[2] = height of rectangular area (optional)
 *	zargs[3] = number of char's to skip between lines (optional)
 *
  Supply default arguments  Write text in width x height rectangle  z_print_table 
 * z_put_wind_prop, set the value of a window property.
 *
 *	zargs[0] = window (-3 is the current one)
 *	zargs[1] = number of window property to set
 *	zargs[2] = value to set window property to
 *
  z_put_wind_prop 
 * z_scroll_window, scroll a window up or down.
 *
 *	zargs[0] = window (-3 is the current one)
 *	zargs[1] = #screen units to scroll up (positive) or down (negative)
 *
  Use the correct set of colours when scrolling the window  z_scroll_window 
 * z_set_colour, set the foreground and background colours.
 *
 *	zargs[0] = foreground colour
 *	zargs[1] = background colour
 *	zargs[2] = window (-3 is the current one, optional)
 *
  colour -1 is the colour at the cursor  colour 0 means keep current colour  colour 1 is the system default colour  Changing colours of window 0 affects the entire screen  z_set_colour 
 * z_set_font, set the font for text output and store the previous font.
 *
 * 	zargs[0] = number of font or 0 to keep current font
 *
  z_set_font 
 * z_set_cursor, set the cursor position or turn the cursor on/off.
 *
 *	zargs[0] = y-coordinate or -2/-1 for cursor on/off
 *	zargs[1] = x-coordinate
 *	zargs[2] = window (-3 is the current one, optional)
 *
  Supply default arguments  Handle cursor on/off  Convert grid positions to screen units if this is not V6  Protect the margins  use cursor line if y-coordinate is 0  use cursor column if x-coordinate is 0  Move the cursor  z_set_cursor 
 * z_set_margins, set the left and right margins of a window.
 *
 *	zargs[0] = left margin in pixels
 *	zargs[1] = right margin in pixels
 *	zargs[2] = window (-3 is the current one, optional)
 *
  Protect the margins  z_set_margins 
 * z_set_text_style, set the style for text output.
 *
 * 	zargs[0] = style flags to set or 0 to reset text style
 *
  z_set_text_style 
 * z_set_window, select the current window.
 *
 *	zargs[0] = window to be selected (-3 is the current one)
 *
  z_set_window 
 * pad_status_line
 *
 * Pad the status line with spaces up to the given position.
 *
  while (spaces--)  Justin Wesley's fix for narrow displays (Agenda PDA)  pad_status_line 
 * z_show_status, display the status line for V1 to V3 games.
 *
 *	no zargs used
 *
  One V5 game (Wishbringer Solid Gold) contains this opcode by
       accident, so just return if the version number does not fit  Read all relevant global variables from the memory of the
       Z-machine into local variables  Frotz uses window 7 for the status line. Don't forget to select
       reverse and fixed width text style  If the screen width is below 55 characters then we have to use
       the brief status line format  Print the object description for the global variable 0  A header flag tells us whether we have to display the current
       time or the score/moves information  print hours and minutes  print score and moves  Pad the end of the status line with spaces  Return to the lower window  z_show_status 
 * z_split_window, split the screen into an upper (1) and lower (0) window.
 *
 *	zargs[0] = height of upper window in screen units (V6) or #lines
 *
  z_split_window 
 * z_window_size, change the width and height of a window.
 *
 *	zargs[0] = window (-3 is the current one)
 *	zargs[1] = new height in screen units
 *	zargs[2] = new width in screen units
 *
  Keep the cursor within the window  z_window_size 
 * z_window_style, set / clear / toggle window attributes.
 *
 *	zargs[0] = window (-3 is the current one)
 *	zargs[1] = window attribute flags
 *	zargs[2] = operation to perform (optional, defaults to 0)
 *
  Supply default arguments  Set window style  z_window_style  screen.c - Generic screen manipulation
 *	Copyright (c) 1995-1997 Stefan Jokisch
 *
 * This file is part of Frotz.
 *
 * Frotz is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Frotz is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 
 * winarg0
 *
 * Return the window number in zargs[0]. In V6 only, -3 refers to the
 * current window.
 *
  winarg0 
 * winarg2
 *
 * Return the (optional) window number in zargs[2]. -3 refers to the
 * current window. This optional window number was only used by some
 * V6 opcodes: set_cursor, set_margins, set_colour.
 *
  winarg2 
 * update_cursor
 *
 * Move the hardware cursor to make it match the window properties.
 *
  update_cursor 
 * reset_cursor
 *
 * Reset the cursor of a given window to its initial position.
 *
  reset_cursor 
 * set_more_prompts
 *
 * Turn more prompts on/off.
 *
  set_more_prompts 
 * units_left
 *
 * Return the #screen units from the cursor to the end of the line.
 *
  units_left 
 * get_max_width
 *
 * Return maximum width of a line in the given window. This is used in
 * connection with the extended output stream #3 call in V6.
 *
  get_max_width 
 * countdown
 *
 * Decrement the newline counter. Call the newline interrupt when the
 * counter hits zero. This is a helper function for screen_new_line.
 *
  countdown 
 * screen_new_line
 *
 * Print a newline to the screen.
 *
  Handle newline interrupts at the start (for most cases)  Check whether the last input line gets destroyed  If the cursor has not reached the bottom line, then move it to
       the next line; otherwise scroll the window or reset the cursor
       to the top left.  See if we need to print a more prompt (unless the game has set
       the line counter to -999 in order to suppress more prompts).  Handle newline interrupts at the end for Zork Zero under DOS  screen_new_line 
 * screen_char
 *
 * Display a single character on the screen.
 *
  screen_char 
 * screen_word
 *
 * Display a string of characters on the screen. If the word doesn't fit
 * then use wrapping or clipping depending on the current setting of the
 * enable_wrapping flag.
 *
  screen_word 
 * screen_write_input
 *
 * Display an input line on the screen. This is required during playback.
 *
  screen_write_input 
 * screen_erase_input
 *
 * Remove an input line that has already been printed from the screen
 * as if it was deleted by the player. This could be necessary during
 * playback.
 *
  screen_erase_input 
 * console_read_input
 *
 * Read an input line from the keyboard and return the terminating key.
 *
  Make sure there is some space for input  Make sure the input line is visible  Get input line from IO interface  Add a newline if the input was terminated normally  console_read_input 
 * console_read_key
 *
 * Read a single keystroke and return it.
 *
  console_read_key 
 * update_attributes
 *
 * Set the three enable_*** variables to make them match the attributes
 * of the current window.
 *
  Some story files forget to select wrapping for printing hints  update_attributes 
 * refresh_text_style
 *
 * Set the right text style. This can be necessary when the fixed font
 * flag is changed, or when a new window is selected, or when the game
 * uses the set_text_style opcode.
 *
  refresh_text_style 
 * set_window
 *
 * Set the current window. In V6 every window has its own set of window
 * properties such as colours, text style, cursor position and size.
 *
  set_window 
 * erase_window
 *
 * Erase a window to background colour.
 *
  erase_window 
 * split_window
 *
 * Divide the screen into upper (1) and lower (0) windows. In V3 the upper
 * window appears below the status line.
 *
  Calculate height of status line and upper window  Cursor of upper window mustn't be swallowed by the lower window  Cursor of lower window mustn't be swallowed by the upper window  Erase the upper window in V3 only  split_window 
 * erase_screen
 *
 * Erase the entire screen to background colour.
 *
  erase_screen  #ifdef AMIGA 
 * resize_screen
 *
 * Try to adapt the window properties to a new screen size.
 *
  resize_screen  #endif 
 * restart_screen
 *
 * Prepare the screen for a new game.
 *
  Use default settings  Initialise window properties  Prepare lower/upper windows and status line  Clear the screen, unsplit it and select window 0  restart_screen 
 * validate_click
 *
 * Return false if the last mouse click occured outside the current
 * mouse window; otherwise write the mouse arrow coordinates to the
 * memory of the header extension table and return true.
 *
  validate_click 
 * screen_mssg_on
 *
 * Start printing a so-called debugging message. The contents of the
 * message are passed to the message stream, a Frotz specific output
 * stream with maximum priority.
 *
  messages in window 0 only  discard messages in other windows  screen_mssg_on 
 * screen_mssg_off
 *
 * Stop printing a "debugging" message.
 *
  messages in window 0 only  message has been discarded  screen_mssg_off 
 * z_buffer_mode, turn text buffering on/off.
 *
 *	zargs[0] = new text buffering flag (0 or 1)
 *
  Infocom's V6 games rarely use the buffer_mode opcode. If they do
       then only to print text immediately, without any delay. This was
       used to give the player some sign of life while the game was
       spending much time on parsing a complicated input line. (To turn
       off word wrapping, V6 games use the window_style opcode instead.)
       Today we can afford to ignore buffer_mode in V6.  z_buffer_mode 
 * z_draw_picture, draw a picture.
 *
 *	zargs[0] = number of picture to draw
 *	zargs[1] = y-coordinate of top left corner
 *	zargs[2] = x-coordinate of top left corner
 *
  use cursor line if y-coordinate is 0  use cursor column if x-coordinate is 0  The following is necessary to make Amiga and Macintosh story
       files work with MCGA graphics files.  Some screen-filling
       pictures of the original Amiga release like the borders of
       Zork Zero were split into several MCGA pictures (left, right
       and top borders).  We pretend this has not happened.  z_draw_picture 
 * z_erase_line, erase the line starting at the cursor position.
 *
 *	zargs[0] = 1 + #units to erase (1 clears to the end of the line)
 *
  Clipping at the right margin of the current window  Erase from cursor position  z_erase_line 
 * z_erase_picture, erase a picture with background colour.
 *
 *	zargs[0] = number of picture to erase
 *	zargs[1] = y-coordinate of top left corner (optional)
 *	zargs[2] = x-coordinate of top left corner (optional)
 *
  use cursor line if y-coordinate is 0  use cursor column if x-coordinate is 0  z_erase_picture 
 * z_erase_window, erase a window or the screen to background colour.
 *
 *	zargs[0] = window (-3 current, -2 screen, -1 screen & unsplit)
 *
  z_erase_window 
 * z_get_cursor, write the cursor coordinates into a table.
 *
 *	zargs[0] = address to write information to
 *
  convert to grid positions  z_get_cursor 
 * z_get_wind_prop, store the value of a window property.
 *
 *	zargs[0] = window (-3 is the current one)
 *	zargs[1] = number of window property to be stored
 *
  z_get_wind_prop 
 * z_mouse_window, select a window as mouse window.
 *
 *	zargs[0] = window number (-3 is the current) or -1 for the screen
 *
  z_mouse_window 
 * z_move_window, place a window on the screen.
 *
 *	zargs[0] = window (-3 is the current one)
 *	zargs[1] = y-coordinate
 *	zargs[2] = x-coordinate
 *
  z_move_window 
 * z_picture_data, get information on a picture or the graphics file.
 *
 *	zargs[0] = number of picture or 0 for the graphics file
 *	zargs[1] = address to write information to
 *
  z_picture_data 
 * z_picture_table, prepare a group of pictures for faster display.
 *
 *	zargs[0] = address of table holding the picture numbers
 *
  This opcode is used by Shogun and Zork Zero when the player
       encounters built-in games such as Peggleboz. Nowadays it is
       not very helpful to hold the picture data in memory because
       even a small disk cache avoids re-loading of data.  z_picture_table 
 * z_print_table, print ASCII text in a rectangular area.
 *
 *	zargs[0] = address of text to be printed
 *	zargs[1] = width of rectangular area
 *	zargs[2] = height of rectangular area (optional)
 *	zargs[3] = number of char's to skip between lines (optional)
 *
  Supply default arguments  Write text in width x height rectangle  z_print_table 
 * z_put_wind_prop, set the value of a window property.
 *
 *	zargs[0] = window (-3 is the current one)
 *	zargs[1] = number of window property to set
 *	zargs[2] = value to set window property to
 *
  z_put_wind_prop 
 * z_scroll_window, scroll a window up or down.
 *
 *	zargs[0] = window (-3 is the current one)
 *	zargs[1] = #screen units to scroll up (positive) or down (negative)
 *
  Use the correct set of colours when scrolling the window  z_scroll_window 
 * z_set_colour, set the foreground and background colours.
 *
 *	zargs[0] = foreground colour
 *	zargs[1] = background colour
 *	zargs[2] = window (-3 is the current one, optional)
 *
  colour -1 is the colour at the cursor  colour 0 means keep current colour  colour 1 is the system default colour  Changing colours of window 0 affects the entire screen  z_set_colour 
 * z_set_font, set the font for text output and store the previous font.
 *
 * 	zargs[0] = number of font or 0 to keep current font
 *
  z_set_font 
 * z_set_cursor, set the cursor position or turn the cursor on/off.
 *
 *	zargs[0] = y-coordinate or -2/-1 for cursor on/off
 *	zargs[1] = x-coordinate
 *	zargs[2] = window (-3 is the current one, optional)
 *
  Supply default arguments  Handle cursor on/off  Convert grid positions to screen units if this is not V6  Protect the margins  use cursor line if y-coordinate is 0  use cursor column if x-coordinate is 0  Move the cursor  z_set_cursor 
 * z_set_margins, set the left and right margins of a window.
 *
 *	zargs[0] = left margin in pixels
 *	zargs[1] = right margin in pixels
 *	zargs[2] = window (-3 is the current one, optional)
 *
  Protect the margins  z_set_margins 
 * z_set_text_style, set the style for text output.
 *
 * 	zargs[0] = style flags to set or 0 to reset text style
 *
  z_set_text_style 
 * z_set_window, select the current window.
 *
 *	zargs[0] = window to be selected (-3 is the current one)
 *
  z_set_window 
 * pad_status_line
 *
 * Pad the status line with spaces up to the given position.
 *
  while (spaces--)  Justin Wesley's fix for narrow displays (Agenda PDA)  pad_status_line 
 * z_show_status, display the status line for V1 to V3 games.
 *
 *	no zargs used
 *
  One V5 game (Wishbringer Solid Gold) contains this opcode by
       accident, so just return if the version number does not fit  Read all relevant global variables from the memory of the
       Z-machine into local variables  Frotz uses window 7 for the status line. Don't forget to select
       reverse and fixed width text style  If the screen width is below 55 characters then we have to use
       the brief status line format  Print the object description for the global variable 0  A header flag tells us whether we have to display the current
       time or the score/moves information  print hours and minutes  print score and moves  Pad the end of the status line with spaces  Return to the lower window  z_show_status 
 * z_split_window, split the screen into an upper (1) and lower (0) window.
 *
 *	zargs[0] = height of upper window in screen units (V6) or #lines
 *
  z_split_window 
 * z_window_size, change the width and height of a window.
 *
 *	zargs[0] = window (-3 is the current one)
 *	zargs[1] = new height in screen units
 *	zargs[2] = new width in screen units
 *
  Keep the cursor within the window  z_window_size 
 * z_window_style, set / clear / toggle window attributes.
 *
 *	zargs[0] = window (-3 is the current one)
 *	zargs[1] = window attribute flags
 *	zargs[2] = operation to perform (optional, defaults to 0)
 *
  Supply default arguments  Set window style  z_window_style  screen.c - Generic screen manipulation
 *	Copyright (c) 1995-1997 Stefan Jokisch
 *
 * This file is part of Frotz.
 *
 * Frotz is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Frotz is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 
 * winarg0
 *
 * Return the window number in zargs[0]. In V6 only, -3 refers to the
 * current window.
 *
  winarg0 
 * winarg2
 *
 * Return the (optional) window number in zargs[2]. -3 refers to the
 * current window. This optional window number was only used by some
 * V6 opcodes: set_cursor, set_margins, set_colour.
 *
  winarg2 
 * update_cursor
 *
 * Move the hardware cursor to make it match the window properties.
 *
  update_cursor 
 * reset_cursor
 *
 * Reset the cursor of a given window to its initial position.
 *
  reset_cursor 
 * set_more_prompts
 *
 * Turn more prompts on/off.
 *
  set_more_prompts 
 * units_left
 *
 * Return the #screen units from the cursor to the end of the line.
 *
  units_left 
 * get_max_width
 *
 * Return maximum width of a line in the given window. This is used in
 * connection with the extended output stream #3 call in V6.
 *
  get_max_width 
 * countdown
 *
 * Decrement the newline counter. Call the newline interrupt when the
 * counter hits zero. This is a helper function for screen_new_line.
 *
  countdown 
 * screen_new_line
 *
 * Print a newline to the screen.
 *
  Handle newline interrupts at the start (for most cases)  Check whether the last input line gets destroyed  If the cursor has not reached the bottom line, then move it to
       the next line; otherwise scroll the window or reset the cursor
       to the top left.  See if we need to print a more prompt (unless the game has set
       the line counter to -999 in order to suppress more prompts).  Handle newline interrupts at the end for Zork Zero under DOS  screen_new_line 
 * screen_char
 *
 * Display a single character on the screen.
 *
  screen_char 
 * screen_word
 *
 * Display a string of characters on the screen. If the word doesn't fit
 * then use wrapping or clipping depending on the current setting of the
 * enable_wrapping flag.
 *
  screen_word 
 * screen_write_input
 *
 * Display an input line on the screen. This is required during playback.
 *
  screen_write_input 
 * screen_erase_input
 *
 * Remove an input line that has already been printed from the screen
 * as if it was deleted by the player. This could be necessary during
 * playback.
 *
  screen_erase_input 
 * console_read_input
 *
 * Read an input line from the keyboard and return the terminating key.
 *
  Make sure there is some space for input  Make sure the input line is visible  Get input line from IO interface  Add a newline if the input was terminated normally  console_read_input 
 * console_read_key
 *
 * Read a single keystroke and return it.
 *
  console_read_key 
 * update_attributes
 *
 * Set the three enable_*** variables to make them match the attributes
 * of the current window.
 *
  Some story files forget to select wrapping for printing hints  update_attributes 
 * refresh_text_style
 *
 * Set the right text style. This can be necessary when the fixed font
 * flag is changed, or when a new window is selected, or when the game
 * uses the set_text_style opcode.
 *
  refresh_text_style 
 * set_window
 *
 * Set the current window. In V6 every window has its own set of window
 * properties such as colours, text style, cursor position and size.
 *
  set_window 
 * erase_window
 *
 * Erase a window to background colour.
 *
  erase_window 
 * split_window
 *
 * Divide the screen into upper (1) and lower (0) windows. In V3 the upper
 * window appears below the status line.
 *
  Calculate height of status line and upper window  Cursor of upper window mustn't be swallowed by the lower window  Cursor of lower window mustn't be swallowed by the upper window  Erase the upper window in V3 only  split_window 
 * erase_screen
 *
 * Erase the entire screen to background colour.
 *
  erase_screen  #ifdef AMIGA 
 * resize_screen
 *
 * Try to adapt the window properties to a new screen size.
 *
  resize_screen  #endif 
 * restart_screen
 *
 * Prepare the screen for a new game.
 *
  Use default settings  Initialise window properties  Prepare lower/upper windows and status line  Clear the screen, unsplit it and select window 0  restart_screen 
 * validate_click
 *
 * Return false if the last mouse click occured outside the current
 * mouse window; otherwise write the mouse arrow coordinates to the
 * memory of the header extension table and return true.
 *
  validate_click 
 * screen_mssg_on
 *
 * Start printing a so-called debugging message. The contents of the
 * message are passed to the message stream, a Frotz specific output
 * stream with maximum priority.
 *
  messages in window 0 only  discard messages in other windows  screen_mssg_on 
 * screen_mssg_off
 *
 * Stop printing a "debugging" message.
 *
  messages in window 0 only  message has been discarded  screen_mssg_off 
 * z_buffer_mode, turn text buffering on/off.
 *
 *	zargs[0] = new text buffering flag (0 or 1)
 *
  Infocom's V6 games rarely use the buffer_mode opcode. If they do
       then only to print text immediately, without any delay. This was
       used to give the player some sign of life while the game was
       spending much time on parsing a complicated input line. (To turn
       off word wrapping, V6 games use the window_style opcode instead.)
       Today we can afford to ignore buffer_mode in V6.  z_buffer_mode 
 * z_draw_picture, draw a picture.
 *
 *	zargs[0] = number of picture to draw
 *	zargs[1] = y-coordinate of top left corner
 *	zargs[2] = x-coordinate of top left corner
 *
  use cursor line if y-coordinate is 0  use cursor column if x-coordinate is 0  The following is necessary to make Amiga and Macintosh story
       files work with MCGA graphics files.  Some screen-filling
       pictures of the original Amiga release like the borders of
       Zork Zero were split into several MCGA pictures (left, right
       and top borders).  We pretend this has not happened.  z_draw_picture 
 * z_erase_line, erase the line starting at the cursor position.
 *
 *	zargs[0] = 1 + #units to erase (1 clears to the end of the line)
 *
  Clipping at the right margin of the current window  Erase from cursor position  z_erase_line 
 * z_erase_picture, erase a picture with background colour.
 *
 *	zargs[0] = number of picture to erase
 *	zargs[1] = y-coordinate of top left corner (optional)
 *	zargs[2] = x-coordinate of top left corner (optional)
 *
  use cursor line if y-coordinate is 0  use cursor column if x-coordinate is 0  z_erase_picture 
 * z_erase_window, erase a window or the screen to background colour.
 *
 *	zargs[0] = window (-3 current, -2 screen, -1 screen & unsplit)
 *
  z_erase_window 
 * z_get_cursor, write the cursor coordinates into a table.
 *
 *	zargs[0] = address to write information to
 *
  convert to grid positions  z_get_cursor 
 * z_get_wind_prop, store the value of a window property.
 *
 *	zargs[0] = window (-3 is the current one)
 *	zargs[1] = number of window property to be stored
 *
  z_get_wind_prop 
 * z_mouse_window, select a window as mouse window.
 *
 *	zargs[0] = window number (-3 is the current) or -1 for the screen
 *
  z_mouse_window 
 * z_move_window, place a window on the screen.
 *
 *	zargs[0] = window (-3 is the current one)
 *	zargs[1] = y-coordinate
 *	zargs[2] = x-coordinate
 *
  z_move_window 
 * z_picture_data, get information on a picture or the graphics file.
 *
 *	zargs[0] = number of picture or 0 for the graphics file
 *	zargs[1] = address to write information to
 *
  z_picture_data 
 * z_picture_table, prepare a group of pictures for faster display.
 *
 *	zargs[0] = address of table holding the picture numbers
 *
  This opcode is used by Shogun and Zork Zero when the player
       encounters built-in games such as Peggleboz. Nowadays it is
       not very helpful to hold the picture data in memory because
       even a small disk cache avoids re-loading of data.  z_picture_table 
 * z_print_table, print ASCII text in a rectangular area.
 *
 *	zargs[0] = address of text to be printed
 *	zargs[1] = width of rectangular area
 *	zargs[2] = height of rectangular area (optional)
 *	zargs[3] = number of char's to skip between lines (optional)
 *
  Supply default arguments  Write text in width x height rectangle  z_print_table 
 * z_put_wind_prop, set the value of a window property.
 *
 *	zargs[0] = window (-3 is the current one)
 *	zargs[1] = number of window property to set
 *	zargs[2] = value to set window property to
 *
  z_put_wind_prop 
 * z_scroll_window, scroll a window up or down.
 *
 *	zargs[0] = window (-3 is the current one)
 *	zargs[1] = #screen units to scroll up (positive) or down (negative)
 *
  Use the correct set of colours when scrolling the window  z_scroll_window 
 * z_set_colour, set the foreground and background colours.
 *
 *	zargs[0] = foreground colour
 *	zargs[1] = background colour
 *	zargs[2] = window (-3 is the current one, optional)
 *
  colour -1 is the colour at the cursor  colour 0 means keep current colour  colour 1 is the system default colour  Changing colours of window 0 affects the entire screen  z_set_colour 
 * z_set_font, set the font for text output and store the previous font.
 *
 * 	zargs[0] = number of font or 0 to keep current font
 *
  z_set_font 
 * z_set_cursor, set the cursor position or turn the cursor on/off.
 *
 *	zargs[0] = y-coordinate or -2/-1 for cursor on/off
 *	zargs[1] = x-coordinate
 *	zargs[2] = window (-3 is the current one, optional)
 *
  Supply default arguments  Handle cursor on/off  Convert grid positions to screen units if this is not V6  Protect the margins  use cursor line if y-coordinate is 0  use cursor column if x-coordinate is 0  Move the cursor  z_set_cursor 
 * z_set_margins, set the left and right margins of a window.
 *
 *	zargs[0] = left margin in pixels
 *	zargs[1] = right margin in pixels
 *	zargs[2] = window (-3 is the current one, optional)
 *
  Protect the margins  z_set_margins 
 * z_set_text_style, set the style for text output.
 *
 * 	zargs[0] = style flags to set or 0 to reset text style
 *
  z_set_text_style 
 * z_set_window, select the current window.
 *
 *	zargs[0] = window to be selected (-3 is the current one)
 *
  z_set_window 
 * pad_status_line
 *
 * Pad the status line with spaces up to the given position.
 *
  while (spaces--)  Justin Wesley's fix for narrow displays (Agenda PDA)  pad_status_line 
 * z_show_status, display the status line for V1 to V3 games.
 *
 *	no zargs used
 *
  One V5 game (Wishbringer Solid Gold) contains this opcode by
       accident, so just return if the version number does not fit  Read all relevant global variables from the memory of the
       Z-machine into local variables  Frotz uses window 7 for the status line. Don't forget to select
       reverse and fixed width text style  If the screen width is below 55 characters then we have to use
       the brief status line format  Print the object description for the global variable 0  A header flag tells us whether we have to display the current
       time or the score/moves information  print hours and minutes  print score and moves  Pad the end of the status line with spaces  Return to the lower window  z_show_status 
 * z_split_window, split the screen into an upper (1) and lower (0) window.
 *
 *	zargs[0] = height of upper window in screen units (V6) or #lines
 *
  z_split_window 
 * z_window_size, change the width and height of a window.
 *
 *	zargs[0] = window (-3 is the current one)
 *	zargs[1] = new height in screen units
 *	zargs[2] = new width in screen units
 *
  Keep the cursor within the window  z_window_size 
 * z_window_style, set / clear / toggle window attributes.
 *
 *	zargs[0] = window (-3 is the current one)
 *	zargs[1] = window attribute flags
 *	zargs[2] = operation to perform (optional, defaults to 0)
 *
  Supply default arguments  Set window style  z_window_style 