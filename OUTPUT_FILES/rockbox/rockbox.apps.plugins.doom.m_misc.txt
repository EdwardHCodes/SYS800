 Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *  Main loop menu stuff.
 *  Default Config File.
 *  PCX Screenshots.
 *
 *----------------------------------------------------------------------------- M_DrawText Returns the final X coordinate HU_Init must have been called to init the font proff/nicolas 09/20/98 -- changed for hi-res CPhipps - patch drawing updated, reformatted M_WriteFile      unlink(name); // CPhipps - no corrupt data files around, they only confuse people. M_ReadFile  struct stat fileinfo; DEFAULTS if true, load all graphics at start  killough killough 4/13/98: adjustable timer killough 2/21/98 0 = kill music, 1 = pause, 2 = continue cournia cph - Some MBF stuff parked here for now
 * killough 10/98
  compatibility level" - CPhipps      {"realtic_clock_rate",{&realtic_clock_rate, NULL},{100, NULL},0,UL,       def_int,ss_none, 0, 0}, // percentage of normal speed (35 fps) realtic clock runs at killough 2/8/98 number of dead bodies in view supported (-1 = no limit) killough 10/98 - enable flashing HOM indicator killough 3/31/98 1=take special steps ensuring demo sync, 2=only during recordings      {"endoom_mode", {&endoom_mode, NULL},{5, NULL},0,7, // CPhipps - endoom flags       def_hex, ss_none, 0, 0}, // 0, +1 for colours, +2 for non-ascii chars, +4 for skip-last-line precache level data? cph - MBF-like wad/deh/bex autoload code
       * POSIX targets need to get lumps from prboom.wad       {"wadfile_1",{NULL,&wad_files[0]},{0,                                         ""                                         "prboom.wad"                                        },UL,UL,def_str,ss_none, 0, 0},      {"wadfile_2",{NULL,&wad_files[1]},{0,""},UL,UL,def_str,ss_none, 0, 0},      {"dehfile_1",{NULL,&deh_files[0]},{0,""},UL,UL,def_str,ss_none, 0, 0},      {"dehfile_2",{NULL,&deh_files[1]},{0,""},UL,UL,def_str,ss_none, 0, 0}, jff 3/24/98 allow default skill setting selects default skill 1=TYTD 2=NTR 3=HMP 4=UV 5=NM killough 10/98 - toggle between SG/SSG and Fist/Chainsaw  phares 2/25/98 killough 3/1/98 MBF AI enhancement options  End of MBF AI extras  no color changes on status bar 2/23/98 chg default makes percent signs on status bar always gray killough 2/28/98 disables doubled card and skull key display on status bar      {"traditional_menu",{&traditional_menu, NULL},{1, NULL},0,1,       def_bool,ss_none, 0, 0}, // force use of Doom's main menu ordering // killough 4/17/98 enables message display killough 3/6/98: preserve autorun across games      {"sound_card",{&snd_card, NULL},{-1, NULL},-1,7,       // jff 1/18/98 allow Allegro drivers       def_int,ss_none, 0, 0}, // select sounds driver (DOS), -1 is autodetect, 0 is none; in Linux, non-zero enables sound      {"music_card",{&mus_card, NULL},{-1, NULL},-1,9,       //  to be set,  -1 = autodetect       def_int,ss_none, 0, 0}, // select music driver (DOS), -1 is autodetect, 0 is none"; in Linux, non-zero enables music killough 2/21/98 enables variable pitch in sound effects (from id's original code)      {"samplerate",{&snd_samplerate, NULL},{22050, NULL},11025,48000, def_int,ss_none, 0, 0}, CPhipps - music pausing 0 = kill music when paused, 1 = pause music, 2 = let music continue sound output device (UNIX) number of audio events simultaneously // killough CPhipps - default screensize for targets that support high-res     {"screen_width",{&desired_screenwidth, NULL},{320, NULL}, 320, 1600,
       def_int,ss_none, 0, 0},
      {"screen_height",{&desired_screenheight, NULL},{200, NULL},200,1200,
       def_int,ss_none, 0, 0}, kwk - rotate the screen 90 degrees  cph - allow crappy fake contrast to be disabled       {"use_fullscreen",{&use_fullscreen, NULL},{1, NULL},0,1, /* proff 21/05/2000 */       def_bool,ss_none, 0, 0},      {"use_doublebuffer",{&use_doublebuffer, NULL},{1, NULL},0,1,             // proff 2001-7-4       def_bool,ss_none, 0, 0}, // enable doublebuffer to avoid display tearing (fullscreen) phares enables translucency killough 2/21/98 set percentage of foreground/background translucency mixjff 3/6/98 fix erroneous upper limit in range gamma correction level // killough 1/18/98 CPhipps - misc X options X options, see l_video_x.c enables use of mouse with DOOMjff 4/3/98 allow unlimited sensitivity      {"mouse_sensitivity_horiz",{&mouseSensitivity_horiz, NULL},{10, NULL},0,UL,       def_int,ss_none, 0, 0}, /* adjust horizontal (x) mouse sensitivity killough/mead */jff 4/3/98 allow unlimited sensitivity      {"mouse_sensitivity_vert",{&mouseSensitivity_vert, NULL},{10, NULL},0,UL,       def_int,ss_none, 0, 0}, /* adjust vertical (y) mouse sensitivity killough/mead */jff 3/8/98 allow -1 in mouse bindings to disable mouse function mouse button number to use for fire mouse button number to use for strafing mouse button number to use for forward motionjff 3/8/98 end of lower range change for -1 allowed in mouse binding For key bindings, the values stored in the key_* variables       // phares are the internal Doom Codes. The values stored in the default.cfg file are the keyboard codes. CPhipps - now they're the doom codes, so default.cfg can be portable key to turn right key to turn left key to move forward key to move backward phares 3/7/98 key to move right in a menu  //     |     V key to move left in a menu key to move up in a menu key to move down in a menu delete key in a menu key to leave a menu      ,   // phares 3/7/98 key to select from menu key to strafe left key to strafe right duh key to open a door, use a switch key to use with arrows to strafe key to run key to save current game key to restore from saved games key to bring up sound controls key to adjust HUD key to to quicksave key to end the game key to toggle message enable key to load from quicksave key to quit game key to adjust gamma correction key to view from another coop player's view key to pause the game key to toggle always run mode key to enter a chat message backspace key key to select from menu or see last message key to toggle automap display phares 3/7/98 key to shift automap right   //     |     V key to shift automap left key to shift automap up key to shift automap down key to enlarge automap key to reduce automap key to get max zoom for automap key to toggle follow mode key to drop a marker on automap key to clear all markers on automap key to toggle grid display over automap key to toggle rotating the automap to match the player's orientation key to toggle overlaying the automap on the rendered display key to spin 180 instantly key to enlarge display key to reduce display key to chat with player 1 killough 11/98: fix 'i'/'b' reversal key to chat with player 2 key to chat with player 3 key to chat with player 4 key to toggle between two most preferred weapons with ammo key to toggle between two most preferred weapons with ammo key to switch to weapon 1 (fist/chainsaw) key to switch to weapon 2 (pistol) key to switch to weapon 3 (supershotgun/shotgun) key to switch to weapon 4 (chaingun) key to switch to weapon 5 (rocket launcher) key to switch to weapon 6 (plasma rifle) key to switch to weapon 7 (bfg9000)         //    ^ key to switch to weapon 8 (chainsaw)        //    | key to switch to weapon 9 (supershotgun)    // phares killough 2/22/98: screenshot key key to take a screenshot     {"Joystick settings",{NULL, NULL},{0, NULL},UL,UL,def_none,ss_none, 0, 0},
      {"use_joystick",{&usejoystick, NULL},{0, NULL},0,2,
       def_int,ss_none, 0, 0}, // number of joystick to use (0 for none)
      {"joy_left",{&joyleft, NULL},{0, NULL},  UL,UL,def_int,ss_none, 0, 0},
      {"joy_right",{&joyright, NULL},{0, NULL},UL,UL,def_int,ss_none, 0, 0},
      {"joy_up",  {&joyup, NULL},  {0, NULL},  UL,UL,def_int,ss_none, 0, 0},
      {"joy_down",{&joydown, NULL},{0, NULL},  UL,UL,def_int,ss_none, 0, 0},
      {"joyb_fire",{&joybfire, NULL},{0, NULL},0,UL,
       def_int,ss_keys, 0, 0}, // joystick button number to use for fire
      {"joyb_strafe",{&joybstrafe, NULL},{1, NULL},0,UL,
       def_int,ss_keys, 0, 0}, // joystick button number to use for strafing
      {"joyb_speed",{&joybspeed, NULL},{2, NULL},0,UL,
       def_int,ss_keys, 0, 0}, // joystick button number to use for running
      {"joyb_use",{&joybuse, NULL},{3, NULL},0,UL,
       def_int,ss_keys, 0, 0}, // joystick button number to use for use/open
 chat string associated with 0 key chat string associated with 1 key chat string associated with 2 key chat string associated with 3 key chat string associated with 4 key chat string associated with 5 key chat string associated with 6 key chat string associated with 7 key chat string associated with 8 key chat string associated with 9 keyjff 1/7/98 defaults for automap colorsjff 4/3/98 remove -1 in lower range, 0 now disables new map features black //jff 4/6/98 new black color used as background for automap dk gray color used for automap grid lines red-brown color used for one side walls on automap lt brown color used for lines floor height changes across orange color used for lines ceiling height changes across white color used for lines denoting closed doors, objects red color used for red key sprites blue color used for blue key sprites yellow color used for yellow key sprites red color used for closed red doors blue color used for closed blue doors yellow color used for closed yellow doors dk green color used for teleporter lines purple color used for lines around secret sectors none color used for exit lines dk gray color used for lines not seen without computer map lt gray color used for lines with no height changes green color used as things yellow color used for counted items white color used for dot crosshair denoting center of map white color used for the single player arrow      {"mapcolor_me",   {&mapcolor_me, NULL}, {112, NULL},0,255, // green
       def_colour,ss_auto, 0, 0}, // your (player) colourjff 3/9/98 add option to not show secrets til after found show secret after gotten prevents showing secret sectors till after enteredjff 1/7/98 end additions for automap CPhipps - remember automap mode automap modejff 2/16/98 defaults for color ranges in hud and status gold range color range used for automap level title green range color range used for automap coordinates red range color range used for messages during play gold range color range used for chat messages and entry gold range  //jff 2/26/98 color range used for message review 1 line scrolling window number of messages in review display (1=disable) solid window bg ena //jff 2/26/98 enables background window behind message review hud broken up into 3 displays //jff 3/4/98 splits HUD into three 2 line displays below is red amount of health for red to yellow transition below is yellow amount of health for yellow to green transition below is green, above blue amount of health for green to blue transition below is red amount of armor for red to yellow transition below is yellow amount of armor for yellow to green transition below is green, above blue amount of armor for green to blue transition below 25% is red percent of ammo for red to yellow transition below 50% is yellow, above green percent of ammo for yellow to green transitionjff 2/16/98 HUD and status feature controls 0=off, 1=small, 2=full 0 for HUD off, 1 for HUD small, 2 for full HUDjff 2/23/98 whether hud is displayed enables display of HUD no secrets/items/kills HUD line disables display of kills/items/secrets on HUD killough 2/8/98: weapon preferences set by user: first choice for weapon (best) second choice for weapon third choice for weapon fourth choice for weapon fifth choice for weapon sixth choice for weapon seventh choice for weapon eighth choice for weapon ninth choice for weapon (worst)      // cournia - support for arbitrary music file (defaults are mp3)
      {"Music", {NULL, NULL},{0, NULL},UL,UL,def_none,ss_none, 0, 0},
      {"mus_e1m1", {0,&S_music_files[mus_e1m1]}, {0,"e1m1.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e1m2", {0,&S_music_files[mus_e1m2]}, {0,"e1m2.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e1m3", {0,&S_music_files[mus_e1m3]}, {0,"e1m3.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e1m4", {0,&S_music_files[mus_e1m4]}, {0,"e1m4.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e1m5", {0,&S_music_files[mus_e1m5]}, {0,"e1m5.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e1m6", {0,&S_music_files[mus_e1m6]}, {0,"e1m6.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e1m7", {0,&S_music_files[mus_e1m7]}, {0,"e1m7.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e1m8", {0,&S_music_files[mus_e1m8]}, {0,"e1m8.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e1m9", {0,&S_music_files[mus_e1m9]}, {0,"e1m9.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m1", {0,&S_music_files[mus_e2m1]}, {0,"e2m1.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m2", {0,&S_music_files[mus_e2m2]}, {0,"e2m2.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m3", {0,&S_music_files[mus_e2m3]}, {0,"e2m3.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m4", {0,&S_music_files[mus_e2m4]}, {0,"e2m4.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m5", {0,&S_music_files[mus_e2m5]}, {0,"e1m7.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m6", {0,&S_music_files[mus_e2m6]}, {0,"e2m6.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m7", {0,&S_music_files[mus_e2m7]}, {0,"e2m7.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m8", {0,&S_music_files[mus_e2m8]}, {0,"e2m8.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m9", {0,&S_music_files[mus_e2m9]}, {0,"e3m1.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m1", {0,&S_music_files[mus_e3m1]}, {0,"e3m1.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m2", {0,&S_music_files[mus_e3m2]}, {0,"e3m2.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m3", {0,&S_music_files[mus_e3m3]}, {0,"e3m3.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m4", {0,&S_music_files[mus_e3m4]}, {0,"e1m8.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m5", {0,&S_music_files[mus_e3m5]}, {0,"e1m7.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m6", {0,&S_music_files[mus_e3m6]}, {0,"e1m6.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m7", {0,&S_music_files[mus_e3m7]}, {0,"e2m7.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m8", {0,&S_music_files[mus_e3m8]}, {0,"e3m8.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m9", {0,&S_music_files[mus_e3m9]}, {0,"e1m9.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_inter", {0,&S_music_files[mus_inter]}, {0,"e2m3.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_intro", {0,&S_music_files[mus_intro]}, {0,"intro.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_bunny", {0,&S_music_files[mus_bunny]}, {0,"bunny.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_victor", {0,&S_music_files[mus_victor]}, {0,"victor.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_introa", {0,&S_music_files[mus_introa]}, {0,"intro.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_runnin", {0,&S_music_files[mus_runnin]}, {0,"runnin.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_stalks", {0,&S_music_files[mus_stalks]}, {0,"stalks.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_countd", {0,&S_music_files[mus_countd]}, {0,"countd.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_betwee", {0,&S_music_files[mus_betwee]}, {0,"betwee.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_doom", {0,&S_music_files[mus_doom]}, {0,"doom.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_the_da", {0,&S_music_files[mus_the_da]}, {0,"the_da.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_shawn", {0,&S_music_files[mus_shawn]}, {0,"shawn.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_ddtblu", {0,&S_music_files[mus_ddtblu]}, {0,"ddtblu.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_in_cit", {0,&S_music_files[mus_in_cit]}, {0,"in_cit.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_dead", {0,&S_music_files[mus_dead]}, {0,"dead.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_stlks2", {0,&S_music_files[mus_stlks2]}, {0,"stalks.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_theda2", {0,&S_music_files[mus_theda2]}, {0,"the_da.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_doom2", {0,&S_music_files[mus_doom2]}, {0,"doom.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_ddtbl2", {0,&S_music_files[mus_ddtbl2]}, {0,"ddtblu.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_runni2", {0,&S_music_files[mus_runni2]}, {0,"runnin.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_dead2", {0,&S_music_files[mus_dead2]}, {0,"dead.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_stlks3", {0,&S_music_files[mus_stlks3]}, {0,"stalks.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_romero", {0,&S_music_files[mus_romero]}, {0,"romero.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_shawn2", {0,&S_music_files[mus_shawn2]}, {0,"shawn.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_messag", {0,&S_music_files[mus_messag]}, {0,"messag.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_count2", {0,&S_music_files[mus_count2]}, {0,"countd.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_ddtbl3", {0,&S_music_files[mus_ddtbl3]}, {0,"ddtblu.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_ampie", {0,&S_music_files[mus_ampie]}, {0,"ampie.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_theda3", {0,&S_music_files[mus_theda3]}, {0,"the_da.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_adrian", {0,&S_music_files[mus_adrian]}, {0,"adrian.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_messg2", {0,&S_music_files[mus_messg2]}, {0,"messag.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_romer2", {0,&S_music_files[mus_romer2]}, {0,"romero.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_tense", {0,&S_music_files[mus_tense]}, {0,"tense.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_shawn3", {0,&S_music_files[mus_shawn3]}, {0,"shawn.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_openin", {0,&S_music_files[mus_openin]}, {0,"openin.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_evil", {0,&S_music_files[mus_evil]}, {0,"evil.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_ultima", {0,&S_music_files[mus_ultima]}, {0,"ultima.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_read_m", {0,&S_music_files[mus_read_m]}, {0,"read_m.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_dm2ttl", {0,&S_music_files[mus_dm2ttl]}, {0,"dm2ttl.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_dm2int", {0,&S_music_files[mus_dm2int]}, {0,"dm2int.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
static const char* defaultfile; // CPhipps - static, const M_SaveDefaults can't write the file, but don't complain
 * M_LookupDefault
 *
 * cph - mimic MBF function for now. Yes it's crap.
  M_LoadDefaults phares 4/13/98 set everything to base values don't have anything to read SCREEN SHOTS CPhipps - nasty but better than nothing jff 3/30/98 types and data structures for BMP output of screenshots killough 5/2/98: Changed type names to avoid conflicts with endianess functions jff 3/30/98 binary file write with error detection CPhipps - static, const on parameter  if (write(data,size,number,st)<number)
       screenshot_write_error = true; // CPhipps - made non-fatal WriteBMPfile jff 3/30/98 Add capability to write a .BMP file (256 color uncompressed) CPhipps - static, const on parameters  int i,wid;
     BITMAPFILEHEADER bmfh;
     BITMAPINFOHEADER bmih;
     int fhsiz,ihsiz;
     FILE *st;
     char zero=0;
     ubyte_t c;

     fhsiz = sizeof(BITMAPFILEHEADER);
     ihsiz = sizeof(BITMAPINFOHEADER);
     wid = 4*((width+3)/4);
     //jff 4/22/98 add endian macros
     bmfh.bfType = SHORT(19778);
     bmfh.bfSize = LONG(fhsiz+ihsiz+256L*4+width*height);
     bmfh.bfReserved1 = SHORT(0);
     bmfh.bfReserved2 = SHORT(0);
     bmfh.bfOffBits = LONG(fhsiz+ihsiz+256L*4);

     bmih.biSize = LONG(ihsiz);
     bmih.biWidth = LONG(width);
     bmih.biHeight = LONG(height);
     bmih.biPlanes = SHORT(1);
     bmih.biBitCount = SHORT(8);
     bmih.biCompression = LONG(BI_RGB);
     bmih.biSizeImage = LONG(wid*height);
     bmih.biXPelsPerMeter = LONG(0);
     bmih.biYPelsPerMeter = LONG(0);
     bmih.biClrUsed = LONG(256);
     bmih.biClrImportant = LONG(256);

     st = fopen(filename,"wb");
     if (st!=NULL) {
       // write the header
       SafeWrite(&bmfh.bfType,sizeof(bmfh.bfType),1,st);
       SafeWrite(&bmfh.bfSize,sizeof(bmfh.bfSize),1,st);
       SafeWrite(&bmfh.bfReserved1,sizeof(bmfh.bfReserved1),1,st);
       SafeWrite(&bmfh.bfReserved2,sizeof(bmfh.bfReserved2),1,st);
       SafeWrite(&bmfh.bfOffBits,sizeof(bmfh.bfOffBits),1,st);

       SafeWrite(&bmih.biSize,sizeof(bmih.biSize),1,st);
       SafeWrite(&bmih.biWidth,sizeof(bmih.biWidth),1,st);
       SafeWrite(&bmih.biHeight,sizeof(bmih.biHeight),1,st);
       SafeWrite(&bmih.biPlanes,sizeof(bmih.biPlanes),1,st);
       SafeWrite(&bmih.biBitCount,sizeof(bmih.biBitCount),1,st);
       SafeWrite(&bmih.biCompression,sizeof(bmih.biCompression),1,st);
       SafeWrite(&bmih.biSizeImage,sizeof(bmih.biSizeImage),1,st);
       SafeWrite(&bmih.biXPelsPerMeter,sizeof(bmih.biXPelsPerMeter),1,st);
       SafeWrite(&bmih.biYPelsPerMeter,sizeof(bmih.biYPelsPerMeter),1,st);
       SafeWrite(&bmih.biClrUsed,sizeof(bmih.biClrUsed),1,st);
       SafeWrite(&bmih.biClrImportant,sizeof(bmih.biClrImportant),1,st);

       // write the palette, in blue-green-red order, gamma corrected
       for (i=0;i<768;i+=3) {
         c=gammatable[usegamma][palette[i+2]];
         SafeWrite(&c,sizeof(char),1,st);
         c=gammatable[usegamma][palette[i+1]];
         SafeWrite(&c,sizeof(char),1,st);
         c=gammatable[usegamma][palette[i+0]];
         SafeWrite(&c,sizeof(char),1,st);
         SafeWrite(&zero,sizeof(char),1,st);
       }

       for (i = 0 ; i < height ; i++)
         SafeWrite(data+(height-1-i)*width,sizeof(byte),wid,st);

       fclose(st);
     } M_ScreenShot Modified by Lee Killough so that any number of shots can be taken, the code is faster, and no annoying "screenshot" message appears. CPhipps - modified to use its own buffer for the image         - checks for the case where no file can be created (doesn't occur on POSIX systems, would on DOS)         - track errors better         - split into 2 functions M_DoScreenShot Takes a screenshot into the names file munge planar buffer to linear CPhipps - use a malloc()ed buffer instead of screens[2] save the bmp file munge planar buffer to linear CPhipps - use a malloc()ed buffer instead of screens[2] killough 4/18/98: make palette stay around (PU_CACHE could cause crash) save the bmp file cph - free the palette 1/18/98 killough: replace "SCREEN SHOT" acknowledgement with sfx CPhipps - prevent infinite loop killough 4/18/98 cph Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *  Main loop menu stuff.
 *  Default Config File.
 *  PCX Screenshots.
 *
 *----------------------------------------------------------------------------- M_DrawText Returns the final X coordinate HU_Init must have been called to init the font proff/nicolas 09/20/98 -- changed for hi-res CPhipps - patch drawing updated, reformatted M_WriteFile      unlink(name); // CPhipps - no corrupt data files around, they only confuse people. M_ReadFile  struct stat fileinfo; DEFAULTS if true, load all graphics at start  killough killough 4/13/98: adjustable timer killough 2/21/98 0 = kill music, 1 = pause, 2 = continue cournia cph - Some MBF stuff parked here for now
 * killough 10/98
  compatibility level" - CPhipps      {"realtic_clock_rate",{&realtic_clock_rate, NULL},{100, NULL},0,UL,       def_int,ss_none, 0, 0}, // percentage of normal speed (35 fps) realtic clock runs at killough 2/8/98 number of dead bodies in view supported (-1 = no limit) killough 10/98 - enable flashing HOM indicator killough 3/31/98 1=take special steps ensuring demo sync, 2=only during recordings      {"endoom_mode", {&endoom_mode, NULL},{5, NULL},0,7, // CPhipps - endoom flags       def_hex, ss_none, 0, 0}, // 0, +1 for colours, +2 for non-ascii chars, +4 for skip-last-line precache level data? cph - MBF-like wad/deh/bex autoload code
       * POSIX targets need to get lumps from prboom.wad       {"wadfile_1",{NULL,&wad_files[0]},{0,                                         ""                                         "prboom.wad"                                        },UL,UL,def_str,ss_none, 0, 0},      {"wadfile_2",{NULL,&wad_files[1]},{0,""},UL,UL,def_str,ss_none, 0, 0},      {"dehfile_1",{NULL,&deh_files[0]},{0,""},UL,UL,def_str,ss_none, 0, 0},      {"dehfile_2",{NULL,&deh_files[1]},{0,""},UL,UL,def_str,ss_none, 0, 0}, jff 3/24/98 allow default skill setting selects default skill 1=TYTD 2=NTR 3=HMP 4=UV 5=NM killough 10/98 - toggle between SG/SSG and Fist/Chainsaw  phares 2/25/98 killough 3/1/98 MBF AI enhancement options  End of MBF AI extras  no color changes on status bar 2/23/98 chg default makes percent signs on status bar always gray killough 2/28/98 disables doubled card and skull key display on status bar      {"traditional_menu",{&traditional_menu, NULL},{1, NULL},0,1,       def_bool,ss_none, 0, 0}, // force use of Doom's main menu ordering // killough 4/17/98 enables message display killough 3/6/98: preserve autorun across games      {"sound_card",{&snd_card, NULL},{-1, NULL},-1,7,       // jff 1/18/98 allow Allegro drivers       def_int,ss_none, 0, 0}, // select sounds driver (DOS), -1 is autodetect, 0 is none; in Linux, non-zero enables sound      {"music_card",{&mus_card, NULL},{-1, NULL},-1,9,       //  to be set,  -1 = autodetect       def_int,ss_none, 0, 0}, // select music driver (DOS), -1 is autodetect, 0 is none"; in Linux, non-zero enables music killough 2/21/98 enables variable pitch in sound effects (from id's original code)      {"samplerate",{&snd_samplerate, NULL},{22050, NULL},11025,48000, def_int,ss_none, 0, 0}, CPhipps - music pausing 0 = kill music when paused, 1 = pause music, 2 = let music continue sound output device (UNIX) number of audio events simultaneously // killough CPhipps - default screensize for targets that support high-res     {"screen_width",{&desired_screenwidth, NULL},{320, NULL}, 320, 1600,
       def_int,ss_none, 0, 0},
      {"screen_height",{&desired_screenheight, NULL},{200, NULL},200,1200,
       def_int,ss_none, 0, 0}, kwk - rotate the screen 90 degrees  cph - allow crappy fake contrast to be disabled       {"use_fullscreen",{&use_fullscreen, NULL},{1, NULL},0,1, /* proff 21/05/2000 */       def_bool,ss_none, 0, 0},      {"use_doublebuffer",{&use_doublebuffer, NULL},{1, NULL},0,1,             // proff 2001-7-4       def_bool,ss_none, 0, 0}, // enable doublebuffer to avoid display tearing (fullscreen) phares enables translucency killough 2/21/98 set percentage of foreground/background translucency mixjff 3/6/98 fix erroneous upper limit in range gamma correction level // killough 1/18/98 CPhipps - misc X options X options, see l_video_x.c enables use of mouse with DOOMjff 4/3/98 allow unlimited sensitivity      {"mouse_sensitivity_horiz",{&mouseSensitivity_horiz, NULL},{10, NULL},0,UL,       def_int,ss_none, 0, 0}, /* adjust horizontal (x) mouse sensitivity killough/mead */jff 4/3/98 allow unlimited sensitivity      {"mouse_sensitivity_vert",{&mouseSensitivity_vert, NULL},{10, NULL},0,UL,       def_int,ss_none, 0, 0}, /* adjust vertical (y) mouse sensitivity killough/mead */jff 3/8/98 allow -1 in mouse bindings to disable mouse function mouse button number to use for fire mouse button number to use for strafing mouse button number to use for forward motionjff 3/8/98 end of lower range change for -1 allowed in mouse binding For key bindings, the values stored in the key_* variables       // phares are the internal Doom Codes. The values stored in the default.cfg file are the keyboard codes. CPhipps - now they're the doom codes, so default.cfg can be portable key to turn right key to turn left key to move forward key to move backward phares 3/7/98 key to move right in a menu  //     |     V key to move left in a menu key to move up in a menu key to move down in a menu delete key in a menu key to leave a menu      ,   // phares 3/7/98 key to select from menu key to strafe left key to strafe right duh key to open a door, use a switch key to use with arrows to strafe key to run key to save current game key to restore from saved games key to bring up sound controls key to adjust HUD key to to quicksave key to end the game key to toggle message enable key to load from quicksave key to quit game key to adjust gamma correction key to view from another coop player's view key to pause the game key to toggle always run mode key to enter a chat message backspace key key to select from menu or see last message key to toggle automap display phares 3/7/98 key to shift automap right   //     |     V key to shift automap left key to shift automap up key to shift automap down key to enlarge automap key to reduce automap key to get max zoom for automap key to toggle follow mode key to drop a marker on automap key to clear all markers on automap key to toggle grid display over automap key to toggle rotating the automap to match the player's orientation key to toggle overlaying the automap on the rendered display key to spin 180 instantly key to enlarge display key to reduce display key to chat with player 1 killough 11/98: fix 'i'/'b' reversal key to chat with player 2 key to chat with player 3 key to chat with player 4 key to toggle between two most preferred weapons with ammo key to toggle between two most preferred weapons with ammo key to switch to weapon 1 (fist/chainsaw) key to switch to weapon 2 (pistol) key to switch to weapon 3 (supershotgun/shotgun) key to switch to weapon 4 (chaingun) key to switch to weapon 5 (rocket launcher) key to switch to weapon 6 (plasma rifle) key to switch to weapon 7 (bfg9000)         //    ^ key to switch to weapon 8 (chainsaw)        //    | key to switch to weapon 9 (supershotgun)    // phares killough 2/22/98: screenshot key key to take a screenshot     {"Joystick settings",{NULL, NULL},{0, NULL},UL,UL,def_none,ss_none, 0, 0},
      {"use_joystick",{&usejoystick, NULL},{0, NULL},0,2,
       def_int,ss_none, 0, 0}, // number of joystick to use (0 for none)
      {"joy_left",{&joyleft, NULL},{0, NULL},  UL,UL,def_int,ss_none, 0, 0},
      {"joy_right",{&joyright, NULL},{0, NULL},UL,UL,def_int,ss_none, 0, 0},
      {"joy_up",  {&joyup, NULL},  {0, NULL},  UL,UL,def_int,ss_none, 0, 0},
      {"joy_down",{&joydown, NULL},{0, NULL},  UL,UL,def_int,ss_none, 0, 0},
      {"joyb_fire",{&joybfire, NULL},{0, NULL},0,UL,
       def_int,ss_keys, 0, 0}, // joystick button number to use for fire
      {"joyb_strafe",{&joybstrafe, NULL},{1, NULL},0,UL,
       def_int,ss_keys, 0, 0}, // joystick button number to use for strafing
      {"joyb_speed",{&joybspeed, NULL},{2, NULL},0,UL,
       def_int,ss_keys, 0, 0}, // joystick button number to use for running
      {"joyb_use",{&joybuse, NULL},{3, NULL},0,UL,
       def_int,ss_keys, 0, 0}, // joystick button number to use for use/open
 chat string associated with 0 key chat string associated with 1 key chat string associated with 2 key chat string associated with 3 key chat string associated with 4 key chat string associated with 5 key chat string associated with 6 key chat string associated with 7 key chat string associated with 8 key chat string associated with 9 keyjff 1/7/98 defaults for automap colorsjff 4/3/98 remove -1 in lower range, 0 now disables new map features black //jff 4/6/98 new black color used as background for automap dk gray color used for automap grid lines red-brown color used for one side walls on automap lt brown color used for lines floor height changes across orange color used for lines ceiling height changes across white color used for lines denoting closed doors, objects red color used for red key sprites blue color used for blue key sprites yellow color used for yellow key sprites red color used for closed red doors blue color used for closed blue doors yellow color used for closed yellow doors dk green color used for teleporter lines purple color used for lines around secret sectors none color used for exit lines dk gray color used for lines not seen without computer map lt gray color used for lines with no height changes green color used as things yellow color used for counted items white color used for dot crosshair denoting center of map white color used for the single player arrow      {"mapcolor_me",   {&mapcolor_me, NULL}, {112, NULL},0,255, // green
       def_colour,ss_auto, 0, 0}, // your (player) colourjff 3/9/98 add option to not show secrets til after found show secret after gotten prevents showing secret sectors till after enteredjff 1/7/98 end additions for automap CPhipps - remember automap mode automap modejff 2/16/98 defaults for color ranges in hud and status gold range color range used for automap level title green range color range used for automap coordinates red range color range used for messages during play gold range color range used for chat messages and entry gold range  //jff 2/26/98 color range used for message review 1 line scrolling window number of messages in review display (1=disable) solid window bg ena //jff 2/26/98 enables background window behind message review hud broken up into 3 displays //jff 3/4/98 splits HUD into three 2 line displays below is red amount of health for red to yellow transition below is yellow amount of health for yellow to green transition below is green, above blue amount of health for green to blue transition below is red amount of armor for red to yellow transition below is yellow amount of armor for yellow to green transition below is green, above blue amount of armor for green to blue transition below 25% is red percent of ammo for red to yellow transition below 50% is yellow, above green percent of ammo for yellow to green transitionjff 2/16/98 HUD and status feature controls 0=off, 1=small, 2=full 0 for HUD off, 1 for HUD small, 2 for full HUDjff 2/23/98 whether hud is displayed enables display of HUD no secrets/items/kills HUD line disables display of kills/items/secrets on HUD killough 2/8/98: weapon preferences set by user: first choice for weapon (best) second choice for weapon third choice for weapon fourth choice for weapon fifth choice for weapon sixth choice for weapon seventh choice for weapon eighth choice for weapon ninth choice for weapon (worst)      // cournia - support for arbitrary music file (defaults are mp3)
      {"Music", {NULL, NULL},{0, NULL},UL,UL,def_none,ss_none, 0, 0},
      {"mus_e1m1", {0,&S_music_files[mus_e1m1]}, {0,"e1m1.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e1m2", {0,&S_music_files[mus_e1m2]}, {0,"e1m2.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e1m3", {0,&S_music_files[mus_e1m3]}, {0,"e1m3.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e1m4", {0,&S_music_files[mus_e1m4]}, {0,"e1m4.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e1m5", {0,&S_music_files[mus_e1m5]}, {0,"e1m5.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e1m6", {0,&S_music_files[mus_e1m6]}, {0,"e1m6.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e1m7", {0,&S_music_files[mus_e1m7]}, {0,"e1m7.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e1m8", {0,&S_music_files[mus_e1m8]}, {0,"e1m8.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e1m9", {0,&S_music_files[mus_e1m9]}, {0,"e1m9.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m1", {0,&S_music_files[mus_e2m1]}, {0,"e2m1.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m2", {0,&S_music_files[mus_e2m2]}, {0,"e2m2.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m3", {0,&S_music_files[mus_e2m3]}, {0,"e2m3.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m4", {0,&S_music_files[mus_e2m4]}, {0,"e2m4.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m5", {0,&S_music_files[mus_e2m5]}, {0,"e1m7.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m6", {0,&S_music_files[mus_e2m6]}, {0,"e2m6.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m7", {0,&S_music_files[mus_e2m7]}, {0,"e2m7.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m8", {0,&S_music_files[mus_e2m8]}, {0,"e2m8.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m9", {0,&S_music_files[mus_e2m9]}, {0,"e3m1.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m1", {0,&S_music_files[mus_e3m1]}, {0,"e3m1.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m2", {0,&S_music_files[mus_e3m2]}, {0,"e3m2.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m3", {0,&S_music_files[mus_e3m3]}, {0,"e3m3.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m4", {0,&S_music_files[mus_e3m4]}, {0,"e1m8.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m5", {0,&S_music_files[mus_e3m5]}, {0,"e1m7.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m6", {0,&S_music_files[mus_e3m6]}, {0,"e1m6.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m7", {0,&S_music_files[mus_e3m7]}, {0,"e2m7.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m8", {0,&S_music_files[mus_e3m8]}, {0,"e3m8.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m9", {0,&S_music_files[mus_e3m9]}, {0,"e1m9.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_inter", {0,&S_music_files[mus_inter]}, {0,"e2m3.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_intro", {0,&S_music_files[mus_intro]}, {0,"intro.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_bunny", {0,&S_music_files[mus_bunny]}, {0,"bunny.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_victor", {0,&S_music_files[mus_victor]}, {0,"victor.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_introa", {0,&S_music_files[mus_introa]}, {0,"intro.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_runnin", {0,&S_music_files[mus_runnin]}, {0,"runnin.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_stalks", {0,&S_music_files[mus_stalks]}, {0,"stalks.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_countd", {0,&S_music_files[mus_countd]}, {0,"countd.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_betwee", {0,&S_music_files[mus_betwee]}, {0,"betwee.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_doom", {0,&S_music_files[mus_doom]}, {0,"doom.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_the_da", {0,&S_music_files[mus_the_da]}, {0,"the_da.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_shawn", {0,&S_music_files[mus_shawn]}, {0,"shawn.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_ddtblu", {0,&S_music_files[mus_ddtblu]}, {0,"ddtblu.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_in_cit", {0,&S_music_files[mus_in_cit]}, {0,"in_cit.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_dead", {0,&S_music_files[mus_dead]}, {0,"dead.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_stlks2", {0,&S_music_files[mus_stlks2]}, {0,"stalks.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_theda2", {0,&S_music_files[mus_theda2]}, {0,"the_da.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_doom2", {0,&S_music_files[mus_doom2]}, {0,"doom.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_ddtbl2", {0,&S_music_files[mus_ddtbl2]}, {0,"ddtblu.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_runni2", {0,&S_music_files[mus_runni2]}, {0,"runnin.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_dead2", {0,&S_music_files[mus_dead2]}, {0,"dead.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_stlks3", {0,&S_music_files[mus_stlks3]}, {0,"stalks.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_romero", {0,&S_music_files[mus_romero]}, {0,"romero.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_shawn2", {0,&S_music_files[mus_shawn2]}, {0,"shawn.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_messag", {0,&S_music_files[mus_messag]}, {0,"messag.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_count2", {0,&S_music_files[mus_count2]}, {0,"countd.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_ddtbl3", {0,&S_music_files[mus_ddtbl3]}, {0,"ddtblu.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_ampie", {0,&S_music_files[mus_ampie]}, {0,"ampie.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_theda3", {0,&S_music_files[mus_theda3]}, {0,"the_da.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_adrian", {0,&S_music_files[mus_adrian]}, {0,"adrian.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_messg2", {0,&S_music_files[mus_messg2]}, {0,"messag.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_romer2", {0,&S_music_files[mus_romer2]}, {0,"romero.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_tense", {0,&S_music_files[mus_tense]}, {0,"tense.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_shawn3", {0,&S_music_files[mus_shawn3]}, {0,"shawn.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_openin", {0,&S_music_files[mus_openin]}, {0,"openin.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_evil", {0,&S_music_files[mus_evil]}, {0,"evil.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_ultima", {0,&S_music_files[mus_ultima]}, {0,"ultima.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_read_m", {0,&S_music_files[mus_read_m]}, {0,"read_m.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_dm2ttl", {0,&S_music_files[mus_dm2ttl]}, {0,"dm2ttl.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_dm2int", {0,&S_music_files[mus_dm2int]}, {0,"dm2int.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
static const char* defaultfile; // CPhipps - static, const M_SaveDefaults can't write the file, but don't complain
 * M_LookupDefault
 *
 * cph - mimic MBF function for now. Yes it's crap.
  M_LoadDefaults phares 4/13/98 set everything to base values don't have anything to read SCREEN SHOTS CPhipps - nasty but better than nothing jff 3/30/98 types and data structures for BMP output of screenshots killough 5/2/98: Changed type names to avoid conflicts with endianess functions jff 3/30/98 binary file write with error detection CPhipps - static, const on parameter  if (write(data,size,number,st)<number)
       screenshot_write_error = true; // CPhipps - made non-fatal WriteBMPfile jff 3/30/98 Add capability to write a .BMP file (256 color uncompressed) CPhipps - static, const on parameters  int i,wid;
     BITMAPFILEHEADER bmfh;
     BITMAPINFOHEADER bmih;
     int fhsiz,ihsiz;
     FILE *st;
     char zero=0;
     ubyte_t c;

     fhsiz = sizeof(BITMAPFILEHEADER);
     ihsiz = sizeof(BITMAPINFOHEADER);
     wid = 4*((width+3)/4);
     //jff 4/22/98 add endian macros
     bmfh.bfType = SHORT(19778);
     bmfh.bfSize = LONG(fhsiz+ihsiz+256L*4+width*height);
     bmfh.bfReserved1 = SHORT(0);
     bmfh.bfReserved2 = SHORT(0);
     bmfh.bfOffBits = LONG(fhsiz+ihsiz+256L*4);

     bmih.biSize = LONG(ihsiz);
     bmih.biWidth = LONG(width);
     bmih.biHeight = LONG(height);
     bmih.biPlanes = SHORT(1);
     bmih.biBitCount = SHORT(8);
     bmih.biCompression = LONG(BI_RGB);
     bmih.biSizeImage = LONG(wid*height);
     bmih.biXPelsPerMeter = LONG(0);
     bmih.biYPelsPerMeter = LONG(0);
     bmih.biClrUsed = LONG(256);
     bmih.biClrImportant = LONG(256);

     st = fopen(filename,"wb");
     if (st!=NULL) {
       // write the header
       SafeWrite(&bmfh.bfType,sizeof(bmfh.bfType),1,st);
       SafeWrite(&bmfh.bfSize,sizeof(bmfh.bfSize),1,st);
       SafeWrite(&bmfh.bfReserved1,sizeof(bmfh.bfReserved1),1,st);
       SafeWrite(&bmfh.bfReserved2,sizeof(bmfh.bfReserved2),1,st);
       SafeWrite(&bmfh.bfOffBits,sizeof(bmfh.bfOffBits),1,st);

       SafeWrite(&bmih.biSize,sizeof(bmih.biSize),1,st);
       SafeWrite(&bmih.biWidth,sizeof(bmih.biWidth),1,st);
       SafeWrite(&bmih.biHeight,sizeof(bmih.biHeight),1,st);
       SafeWrite(&bmih.biPlanes,sizeof(bmih.biPlanes),1,st);
       SafeWrite(&bmih.biBitCount,sizeof(bmih.biBitCount),1,st);
       SafeWrite(&bmih.biCompression,sizeof(bmih.biCompression),1,st);
       SafeWrite(&bmih.biSizeImage,sizeof(bmih.biSizeImage),1,st);
       SafeWrite(&bmih.biXPelsPerMeter,sizeof(bmih.biXPelsPerMeter),1,st);
       SafeWrite(&bmih.biYPelsPerMeter,sizeof(bmih.biYPelsPerMeter),1,st);
       SafeWrite(&bmih.biClrUsed,sizeof(bmih.biClrUsed),1,st);
       SafeWrite(&bmih.biClrImportant,sizeof(bmih.biClrImportant),1,st);

       // write the palette, in blue-green-red order, gamma corrected
       for (i=0;i<768;i+=3) {
         c=gammatable[usegamma][palette[i+2]];
         SafeWrite(&c,sizeof(char),1,st);
         c=gammatable[usegamma][palette[i+1]];
         SafeWrite(&c,sizeof(char),1,st);
         c=gammatable[usegamma][palette[i+0]];
         SafeWrite(&c,sizeof(char),1,st);
         SafeWrite(&zero,sizeof(char),1,st);
       }

       for (i = 0 ; i < height ; i++)
         SafeWrite(data+(height-1-i)*width,sizeof(byte),wid,st);

       fclose(st);
     } M_ScreenShot Modified by Lee Killough so that any number of shots can be taken, the code is faster, and no annoying "screenshot" message appears. CPhipps - modified to use its own buffer for the image         - checks for the case where no file can be created (doesn't occur on POSIX systems, would on DOS)         - track errors better         - split into 2 functions M_DoScreenShot Takes a screenshot into the names file munge planar buffer to linear CPhipps - use a malloc()ed buffer instead of screens[2] save the bmp file munge planar buffer to linear CPhipps - use a malloc()ed buffer instead of screens[2] killough 4/18/98: make palette stay around (PU_CACHE could cause crash) save the bmp file cph - free the palette 1/18/98 killough: replace "SCREEN SHOT" acknowledgement with sfx CPhipps - prevent infinite loop killough 4/18/98 cph Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *  Main loop menu stuff.
 *  Default Config File.
 *  PCX Screenshots.
 *
 *----------------------------------------------------------------------------- M_DrawText Returns the final X coordinate HU_Init must have been called to init the font proff/nicolas 09/20/98 -- changed for hi-res CPhipps - patch drawing updated, reformatted M_WriteFile      unlink(name); // CPhipps - no corrupt data files around, they only confuse people. M_ReadFile  struct stat fileinfo; DEFAULTS if true, load all graphics at start  killough killough 4/13/98: adjustable timer killough 2/21/98 0 = kill music, 1 = pause, 2 = continue cournia cph - Some MBF stuff parked here for now
 * killough 10/98
  compatibility level" - CPhipps      {"realtic_clock_rate",{&realtic_clock_rate, NULL},{100, NULL},0,UL,       def_int,ss_none, 0, 0}, // percentage of normal speed (35 fps) realtic clock runs at killough 2/8/98 number of dead bodies in view supported (-1 = no limit) killough 10/98 - enable flashing HOM indicator killough 3/31/98 1=take special steps ensuring demo sync, 2=only during recordings      {"endoom_mode", {&endoom_mode, NULL},{5, NULL},0,7, // CPhipps - endoom flags       def_hex, ss_none, 0, 0}, // 0, +1 for colours, +2 for non-ascii chars, +4 for skip-last-line precache level data? cph - MBF-like wad/deh/bex autoload code
       * POSIX targets need to get lumps from prboom.wad       {"wadfile_1",{NULL,&wad_files[0]},{0,                                         ""                                         "prboom.wad"                                        },UL,UL,def_str,ss_none, 0, 0},      {"wadfile_2",{NULL,&wad_files[1]},{0,""},UL,UL,def_str,ss_none, 0, 0},      {"dehfile_1",{NULL,&deh_files[0]},{0,""},UL,UL,def_str,ss_none, 0, 0},      {"dehfile_2",{NULL,&deh_files[1]},{0,""},UL,UL,def_str,ss_none, 0, 0}, jff 3/24/98 allow default skill setting selects default skill 1=TYTD 2=NTR 3=HMP 4=UV 5=NM killough 10/98 - toggle between SG/SSG and Fist/Chainsaw  phares 2/25/98 killough 3/1/98 MBF AI enhancement options  End of MBF AI extras  no color changes on status bar 2/23/98 chg default makes percent signs on status bar always gray killough 2/28/98 disables doubled card and skull key display on status bar      {"traditional_menu",{&traditional_menu, NULL},{1, NULL},0,1,       def_bool,ss_none, 0, 0}, // force use of Doom's main menu ordering // killough 4/17/98 enables message display killough 3/6/98: preserve autorun across games      {"sound_card",{&snd_card, NULL},{-1, NULL},-1,7,       // jff 1/18/98 allow Allegro drivers       def_int,ss_none, 0, 0}, // select sounds driver (DOS), -1 is autodetect, 0 is none; in Linux, non-zero enables sound      {"music_card",{&mus_card, NULL},{-1, NULL},-1,9,       //  to be set,  -1 = autodetect       def_int,ss_none, 0, 0}, // select music driver (DOS), -1 is autodetect, 0 is none"; in Linux, non-zero enables music killough 2/21/98 enables variable pitch in sound effects (from id's original code)      {"samplerate",{&snd_samplerate, NULL},{22050, NULL},11025,48000, def_int,ss_none, 0, 0}, CPhipps - music pausing 0 = kill music when paused, 1 = pause music, 2 = let music continue sound output device (UNIX) number of audio events simultaneously // killough CPhipps - default screensize for targets that support high-res     {"screen_width",{&desired_screenwidth, NULL},{320, NULL}, 320, 1600,
       def_int,ss_none, 0, 0},
      {"screen_height",{&desired_screenheight, NULL},{200, NULL},200,1200,
       def_int,ss_none, 0, 0}, kwk - rotate the screen 90 degrees  cph - allow crappy fake contrast to be disabled       {"use_fullscreen",{&use_fullscreen, NULL},{1, NULL},0,1, /* proff 21/05/2000 */       def_bool,ss_none, 0, 0},      {"use_doublebuffer",{&use_doublebuffer, NULL},{1, NULL},0,1,             // proff 2001-7-4       def_bool,ss_none, 0, 0}, // enable doublebuffer to avoid display tearing (fullscreen) phares enables translucency killough 2/21/98 set percentage of foreground/background translucency mixjff 3/6/98 fix erroneous upper limit in range gamma correction level // killough 1/18/98 CPhipps - misc X options X options, see l_video_x.c enables use of mouse with DOOMjff 4/3/98 allow unlimited sensitivity      {"mouse_sensitivity_horiz",{&mouseSensitivity_horiz, NULL},{10, NULL},0,UL,       def_int,ss_none, 0, 0}, /* adjust horizontal (x) mouse sensitivity killough/mead */jff 4/3/98 allow unlimited sensitivity      {"mouse_sensitivity_vert",{&mouseSensitivity_vert, NULL},{10, NULL},0,UL,       def_int,ss_none, 0, 0}, /* adjust vertical (y) mouse sensitivity killough/mead */jff 3/8/98 allow -1 in mouse bindings to disable mouse function mouse button number to use for fire mouse button number to use for strafing mouse button number to use for forward motionjff 3/8/98 end of lower range change for -1 allowed in mouse binding For key bindings, the values stored in the key_* variables       // phares are the internal Doom Codes. The values stored in the default.cfg file are the keyboard codes. CPhipps - now they're the doom codes, so default.cfg can be portable key to turn right key to turn left key to move forward key to move backward phares 3/7/98 key to move right in a menu  //     |     V key to move left in a menu key to move up in a menu key to move down in a menu delete key in a menu key to leave a menu      ,   // phares 3/7/98 key to select from menu key to strafe left key to strafe right duh key to open a door, use a switch key to use with arrows to strafe key to run key to save current game key to restore from saved games key to bring up sound controls key to adjust HUD key to to quicksave key to end the game key to toggle message enable key to load from quicksave key to quit game key to adjust gamma correction key to view from another coop player's view key to pause the game key to toggle always run mode key to enter a chat message backspace key key to select from menu or see last message key to toggle automap display phares 3/7/98 key to shift automap right   //     |     V key to shift automap left key to shift automap up key to shift automap down key to enlarge automap key to reduce automap key to get max zoom for automap key to toggle follow mode key to drop a marker on automap key to clear all markers on automap key to toggle grid display over automap key to toggle rotating the automap to match the player's orientation key to toggle overlaying the automap on the rendered display key to spin 180 instantly key to enlarge display key to reduce display key to chat with player 1 killough 11/98: fix 'i'/'b' reversal key to chat with player 2 key to chat with player 3 key to chat with player 4 key to toggle between two most preferred weapons with ammo key to toggle between two most preferred weapons with ammo key to switch to weapon 1 (fist/chainsaw) key to switch to weapon 2 (pistol) key to switch to weapon 3 (supershotgun/shotgun) key to switch to weapon 4 (chaingun) key to switch to weapon 5 (rocket launcher) key to switch to weapon 6 (plasma rifle) key to switch to weapon 7 (bfg9000)         //    ^ key to switch to weapon 8 (chainsaw)        //    | key to switch to weapon 9 (supershotgun)    // phares killough 2/22/98: screenshot key key to take a screenshot     {"Joystick settings",{NULL, NULL},{0, NULL},UL,UL,def_none,ss_none, 0, 0},
      {"use_joystick",{&usejoystick, NULL},{0, NULL},0,2,
       def_int,ss_none, 0, 0}, // number of joystick to use (0 for none)
      {"joy_left",{&joyleft, NULL},{0, NULL},  UL,UL,def_int,ss_none, 0, 0},
      {"joy_right",{&joyright, NULL},{0, NULL},UL,UL,def_int,ss_none, 0, 0},
      {"joy_up",  {&joyup, NULL},  {0, NULL},  UL,UL,def_int,ss_none, 0, 0},
      {"joy_down",{&joydown, NULL},{0, NULL},  UL,UL,def_int,ss_none, 0, 0},
      {"joyb_fire",{&joybfire, NULL},{0, NULL},0,UL,
       def_int,ss_keys, 0, 0}, // joystick button number to use for fire
      {"joyb_strafe",{&joybstrafe, NULL},{1, NULL},0,UL,
       def_int,ss_keys, 0, 0}, // joystick button number to use for strafing
      {"joyb_speed",{&joybspeed, NULL},{2, NULL},0,UL,
       def_int,ss_keys, 0, 0}, // joystick button number to use for running
      {"joyb_use",{&joybuse, NULL},{3, NULL},0,UL,
       def_int,ss_keys, 0, 0}, // joystick button number to use for use/open
 chat string associated with 0 key chat string associated with 1 key chat string associated with 2 key chat string associated with 3 key chat string associated with 4 key chat string associated with 5 key chat string associated with 6 key chat string associated with 7 key chat string associated with 8 key chat string associated with 9 keyjff 1/7/98 defaults for automap colorsjff 4/3/98 remove -1 in lower range, 0 now disables new map features black //jff 4/6/98 new black color used as background for automap dk gray color used for automap grid lines red-brown color used for one side walls on automap lt brown color used for lines floor height changes across orange color used for lines ceiling height changes across white color used for lines denoting closed doors, objects red color used for red key sprites blue color used for blue key sprites yellow color used for yellow key sprites red color used for closed red doors blue color used for closed blue doors yellow color used for closed yellow doors dk green color used for teleporter lines purple color used for lines around secret sectors none color used for exit lines dk gray color used for lines not seen without computer map lt gray color used for lines with no height changes green color used as things yellow color used for counted items white color used for dot crosshair denoting center of map white color used for the single player arrow      {"mapcolor_me",   {&mapcolor_me, NULL}, {112, NULL},0,255, // green
       def_colour,ss_auto, 0, 0}, // your (player) colourjff 3/9/98 add option to not show secrets til after found show secret after gotten prevents showing secret sectors till after enteredjff 1/7/98 end additions for automap CPhipps - remember automap mode automap modejff 2/16/98 defaults for color ranges in hud and status gold range color range used for automap level title green range color range used for automap coordinates red range color range used for messages during play gold range color range used for chat messages and entry gold range  //jff 2/26/98 color range used for message review 1 line scrolling window number of messages in review display (1=disable) solid window bg ena //jff 2/26/98 enables background window behind message review hud broken up into 3 displays //jff 3/4/98 splits HUD into three 2 line displays below is red amount of health for red to yellow transition below is yellow amount of health for yellow to green transition below is green, above blue amount of health for green to blue transition below is red amount of armor for red to yellow transition below is yellow amount of armor for yellow to green transition below is green, above blue amount of armor for green to blue transition below 25% is red percent of ammo for red to yellow transition below 50% is yellow, above green percent of ammo for yellow to green transitionjff 2/16/98 HUD and status feature controls 0=off, 1=small, 2=full 0 for HUD off, 1 for HUD small, 2 for full HUDjff 2/23/98 whether hud is displayed enables display of HUD no secrets/items/kills HUD line disables display of kills/items/secrets on HUD killough 2/8/98: weapon preferences set by user: first choice for weapon (best) second choice for weapon third choice for weapon fourth choice for weapon fifth choice for weapon sixth choice for weapon seventh choice for weapon eighth choice for weapon ninth choice for weapon (worst)      // cournia - support for arbitrary music file (defaults are mp3)
      {"Music", {NULL, NULL},{0, NULL},UL,UL,def_none,ss_none, 0, 0},
      {"mus_e1m1", {0,&S_music_files[mus_e1m1]}, {0,"e1m1.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e1m2", {0,&S_music_files[mus_e1m2]}, {0,"e1m2.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e1m3", {0,&S_music_files[mus_e1m3]}, {0,"e1m3.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e1m4", {0,&S_music_files[mus_e1m4]}, {0,"e1m4.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e1m5", {0,&S_music_files[mus_e1m5]}, {0,"e1m5.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e1m6", {0,&S_music_files[mus_e1m6]}, {0,"e1m6.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e1m7", {0,&S_music_files[mus_e1m7]}, {0,"e1m7.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e1m8", {0,&S_music_files[mus_e1m8]}, {0,"e1m8.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e1m9", {0,&S_music_files[mus_e1m9]}, {0,"e1m9.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m1", {0,&S_music_files[mus_e2m1]}, {0,"e2m1.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m2", {0,&S_music_files[mus_e2m2]}, {0,"e2m2.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m3", {0,&S_music_files[mus_e2m3]}, {0,"e2m3.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m4", {0,&S_music_files[mus_e2m4]}, {0,"e2m4.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m5", {0,&S_music_files[mus_e2m5]}, {0,"e1m7.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m6", {0,&S_music_files[mus_e2m6]}, {0,"e2m6.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m7", {0,&S_music_files[mus_e2m7]}, {0,"e2m7.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m8", {0,&S_music_files[mus_e2m8]}, {0,"e2m8.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e2m9", {0,&S_music_files[mus_e2m9]}, {0,"e3m1.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m1", {0,&S_music_files[mus_e3m1]}, {0,"e3m1.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m2", {0,&S_music_files[mus_e3m2]}, {0,"e3m2.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m3", {0,&S_music_files[mus_e3m3]}, {0,"e3m3.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m4", {0,&S_music_files[mus_e3m4]}, {0,"e1m8.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m5", {0,&S_music_files[mus_e3m5]}, {0,"e1m7.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m6", {0,&S_music_files[mus_e3m6]}, {0,"e1m6.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m7", {0,&S_music_files[mus_e3m7]}, {0,"e2m7.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m8", {0,&S_music_files[mus_e3m8]}, {0,"e3m8.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_e3m9", {0,&S_music_files[mus_e3m9]}, {0,"e1m9.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_inter", {0,&S_music_files[mus_inter]}, {0,"e2m3.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_intro", {0,&S_music_files[mus_intro]}, {0,"intro.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_bunny", {0,&S_music_files[mus_bunny]}, {0,"bunny.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_victor", {0,&S_music_files[mus_victor]}, {0,"victor.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_introa", {0,&S_music_files[mus_introa]}, {0,"intro.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_runnin", {0,&S_music_files[mus_runnin]}, {0,"runnin.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_stalks", {0,&S_music_files[mus_stalks]}, {0,"stalks.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_countd", {0,&S_music_files[mus_countd]}, {0,"countd.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_betwee", {0,&S_music_files[mus_betwee]}, {0,"betwee.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_doom", {0,&S_music_files[mus_doom]}, {0,"doom.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_the_da", {0,&S_music_files[mus_the_da]}, {0,"the_da.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_shawn", {0,&S_music_files[mus_shawn]}, {0,"shawn.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_ddtblu", {0,&S_music_files[mus_ddtblu]}, {0,"ddtblu.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_in_cit", {0,&S_music_files[mus_in_cit]}, {0,"in_cit.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_dead", {0,&S_music_files[mus_dead]}, {0,"dead.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_stlks2", {0,&S_music_files[mus_stlks2]}, {0,"stalks.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_theda2", {0,&S_music_files[mus_theda2]}, {0,"the_da.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_doom2", {0,&S_music_files[mus_doom2]}, {0,"doom.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_ddtbl2", {0,&S_music_files[mus_ddtbl2]}, {0,"ddtblu.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_runni2", {0,&S_music_files[mus_runni2]}, {0,"runnin.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_dead2", {0,&S_music_files[mus_dead2]}, {0,"dead.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_stlks3", {0,&S_music_files[mus_stlks3]}, {0,"stalks.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_romero", {0,&S_music_files[mus_romero]}, {0,"romero.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_shawn2", {0,&S_music_files[mus_shawn2]}, {0,"shawn.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_messag", {0,&S_music_files[mus_messag]}, {0,"messag.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_count2", {0,&S_music_files[mus_count2]}, {0,"countd.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_ddtbl3", {0,&S_music_files[mus_ddtbl3]}, {0,"ddtblu.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_ampie", {0,&S_music_files[mus_ampie]}, {0,"ampie.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_theda3", {0,&S_music_files[mus_theda3]}, {0,"the_da.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_adrian", {0,&S_music_files[mus_adrian]}, {0,"adrian.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_messg2", {0,&S_music_files[mus_messg2]}, {0,"messag.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_romer2", {0,&S_music_files[mus_romer2]}, {0,"romero.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_tense", {0,&S_music_files[mus_tense]}, {0,"tense.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_shawn3", {0,&S_music_files[mus_shawn3]}, {0,"shawn.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_openin", {0,&S_music_files[mus_openin]}, {0,"openin.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_evil", {0,&S_music_files[mus_evil]}, {0,"evil.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_ultima", {0,&S_music_files[mus_ultima]}, {0,"ultima.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_read_m", {0,&S_music_files[mus_read_m]}, {0,"read_m.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_dm2ttl", {0,&S_music_files[mus_dm2ttl]}, {0,"dm2ttl.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
      {"mus_dm2int", {0,&S_music_files[mus_dm2int]}, {0,"dm2int.mp3"},UL,UL,
       def_str,ss_none, 0, 0},
static const char* defaultfile; // CPhipps - static, const M_SaveDefaults can't write the file, but don't complain
 * M_LookupDefault
 *
 * cph - mimic MBF function for now. Yes it's crap.
  M_LoadDefaults phares 4/13/98 set everything to base values don't have anything to read SCREEN SHOTS CPhipps - nasty but better than nothing jff 3/30/98 types and data structures for BMP output of screenshots killough 5/2/98: Changed type names to avoid conflicts with endianess functions jff 3/30/98 binary file write with error detection CPhipps - static, const on parameter  if (write(data,size,number,st)<number)
       screenshot_write_error = true; // CPhipps - made non-fatal WriteBMPfile jff 3/30/98 Add capability to write a .BMP file (256 color uncompressed) CPhipps - static, const on parameters  int i,wid;
     BITMAPFILEHEADER bmfh;
     BITMAPINFOHEADER bmih;
     int fhsiz,ihsiz;
     FILE *st;
     char zero=0;
     ubyte_t c;

     fhsiz = sizeof(BITMAPFILEHEADER);
     ihsiz = sizeof(BITMAPINFOHEADER);
     wid = 4*((width+3)/4);
     //jff 4/22/98 add endian macros
     bmfh.bfType = SHORT(19778);
     bmfh.bfSize = LONG(fhsiz+ihsiz+256L*4+width*height);
     bmfh.bfReserved1 = SHORT(0);
     bmfh.bfReserved2 = SHORT(0);
     bmfh.bfOffBits = LONG(fhsiz+ihsiz+256L*4);

     bmih.biSize = LONG(ihsiz);
     bmih.biWidth = LONG(width);
     bmih.biHeight = LONG(height);
     bmih.biPlanes = SHORT(1);
     bmih.biBitCount = SHORT(8);
     bmih.biCompression = LONG(BI_RGB);
     bmih.biSizeImage = LONG(wid*height);
     bmih.biXPelsPerMeter = LONG(0);
     bmih.biYPelsPerMeter = LONG(0);
     bmih.biClrUsed = LONG(256);
     bmih.biClrImportant = LONG(256);

     st = fopen(filename,"wb");
     if (st!=NULL) {
       // write the header
       SafeWrite(&bmfh.bfType,sizeof(bmfh.bfType),1,st);
       SafeWrite(&bmfh.bfSize,sizeof(bmfh.bfSize),1,st);
       SafeWrite(&bmfh.bfReserved1,sizeof(bmfh.bfReserved1),1,st);
       SafeWrite(&bmfh.bfReserved2,sizeof(bmfh.bfReserved2),1,st);
       SafeWrite(&bmfh.bfOffBits,sizeof(bmfh.bfOffBits),1,st);

       SafeWrite(&bmih.biSize,sizeof(bmih.biSize),1,st);
       SafeWrite(&bmih.biWidth,sizeof(bmih.biWidth),1,st);
       SafeWrite(&bmih.biHeight,sizeof(bmih.biHeight),1,st);
       SafeWrite(&bmih.biPlanes,sizeof(bmih.biPlanes),1,st);
       SafeWrite(&bmih.biBitCount,sizeof(bmih.biBitCount),1,st);
       SafeWrite(&bmih.biCompression,sizeof(bmih.biCompression),1,st);
       SafeWrite(&bmih.biSizeImage,sizeof(bmih.biSizeImage),1,st);
       SafeWrite(&bmih.biXPelsPerMeter,sizeof(bmih.biXPelsPerMeter),1,st);
       SafeWrite(&bmih.biYPelsPerMeter,sizeof(bmih.biYPelsPerMeter),1,st);
       SafeWrite(&bmih.biClrUsed,sizeof(bmih.biClrUsed),1,st);
       SafeWrite(&bmih.biClrImportant,sizeof(bmih.biClrImportant),1,st);

       // write the palette, in blue-green-red order, gamma corrected
       for (i=0;i<768;i+=3) {
         c=gammatable[usegamma][palette[i+2]];
         SafeWrite(&c,sizeof(char),1,st);
         c=gammatable[usegamma][palette[i+1]];
         SafeWrite(&c,sizeof(char),1,st);
         c=gammatable[usegamma][palette[i+0]];
         SafeWrite(&c,sizeof(char),1,st);
         SafeWrite(&zero,sizeof(char),1,st);
       }

       for (i = 0 ; i < height ; i++)
         SafeWrite(data+(height-1-i)*width,sizeof(byte),wid,st);

       fclose(st);
     } M_ScreenShot Modified by Lee Killough so that any number of shots can be taken, the code is faster, and no annoying "screenshot" message appears. CPhipps - modified to use its own buffer for the image         - checks for the case where no file can be created (doesn't occur on POSIX systems, would on DOS)         - track errors better         - split into 2 functions M_DoScreenShot Takes a screenshot into the names file munge planar buffer to linear CPhipps - use a malloc()ed buffer instead of screens[2] save the bmp file munge planar buffer to linear CPhipps - use a malloc()ed buffer instead of screens[2] killough 4/18/98: make palette stay around (PU_CACHE could cause crash) save the bmp file cph - free the palette 1/18/98 killough: replace "SCREEN SHOT" acknowledgement with sfx CPhipps - prevent infinite loop killough 4/18/98 cph