Rev 0.1 Original 8 Jan 2001  MJH  Added code to write data to Binary file                  note: outputfile is name.bin, where name is first part                  of input file.  ie tmp.rec -> tmp.bin   srec2bin <input SREC file> <Output Binary File> <If Present, Big Endian>   TAG           bit32u TAG_BIG     = 0xDEADBE42;        bit32u TAG_LITTLE  = 0xFEEDFA42;  File Structure  TAG    :   32 Bits  [DATA RECORDS]  Data Records Structure  LENGTH  :  32 Bits    <- Length of DATA, excludes ADDRESS and CHECKSUM  ADDRESS :  32 Bits  DATA    :  8 Bits * LENGTH  CHECKSUM:  32 Bits    <-  0 - (Sum of Length --> End of Data)  Note : If Length == 0, Address will be Program Start   char buf[16*1024];    printf("%X", Hex); On UNIX machine all 32bit writes need ENDIAN switched    Data = EndianSwitch(Data);    fwrite( &Data, sizeof(bit32u), 1, fOut); Only update RecLength on Byte Writes All 32 bit writes will be for Length etc  Currently ONLY used for outputting Program Start  if no record started, do not end it Save Current position move back Start Of Data move back Start Of Address move back Start Of Length move to end of Record Two's complement  If Address is one after Current Address, output Byte  If not, close out last record, update Length, write checksum  Then Start New Record, updating Current Address=============================================================================       SUPPORT FUNCTIONS=============================================================================  printf("\nCk:%02x",cksum);=============================================================================       PROCESS SREC LINE=============================================================================  if(debug)        printf("count %d, strlen(pSrecLine) = %d, pSrecLine =[%s]\n", count, strlen(pSrecLine), pSrecLine); PROGRAM START=============================================================================       MAIN LOGIC, READS IN LINE AND OUTPUTS BINARY============================================================================= Setup Tag   printf("PC: 0x%08X, Length 0x%08X, Tag 0x%08X\n", ProgramStart, RecLength, TAG_LITTLE);Rev 0.1 Original 8 Jan 2001  MJH  Added code to write data to Binary file                  note: outputfile is name.bin, where name is first part                  of input file.  ie tmp.rec -> tmp.bin   srec2bin <input SREC file> <Output Binary File> <If Present, Big Endian>   TAG           bit32u TAG_BIG     = 0xDEADBE42;        bit32u TAG_LITTLE  = 0xFEEDFA42;  File Structure  TAG    :   32 Bits  [DATA RECORDS]  Data Records Structure  LENGTH  :  32 Bits    <- Length of DATA, excludes ADDRESS and CHECKSUM  ADDRESS :  32 Bits  DATA    :  8 Bits * LENGTH  CHECKSUM:  32 Bits    <-  0 - (Sum of Length --> End of Data)  Note : If Length == 0, Address will be Program Start   char buf[16*1024];    printf("%X", Hex); On UNIX machine all 32bit writes need ENDIAN switched    Data = EndianSwitch(Data);    fwrite( &Data, sizeof(bit32u), 1, fOut); Only update RecLength on Byte Writes All 32 bit writes will be for Length etc  Currently ONLY used for outputting Program Start  if no record started, do not end it Save Current position move back Start Of Data move back Start Of Address move back Start Of Length move to end of Record Two's complement  If Address is one after Current Address, output Byte  If not, close out last record, update Length, write checksum  Then Start New Record, updating Current Address=============================================================================       SUPPORT FUNCTIONS=============================================================================  printf("\nCk:%02x",cksum);=============================================================================       PROCESS SREC LINE=============================================================================  if(debug)        printf("count %d, strlen(pSrecLine) = %d, pSrecLine =[%s]\n", count, strlen(pSrecLine), pSrecLine); PROGRAM START=============================================================================       MAIN LOGIC, READS IN LINE AND OUTPUTS BINARY============================================================================= Setup Tag   printf("PC: 0x%08X, Length 0x%08X, Tag 0x%08X\n", ProgramStart, RecLength, TAG_LITTLE);