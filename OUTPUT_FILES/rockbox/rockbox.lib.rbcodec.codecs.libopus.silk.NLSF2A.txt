**********************************************************************
Copyright (c) 2006-2011, Skype Limited. All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
- Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
- Neither the name of Internet Society, IETF or IETF Trust, nor the
names of specific contributors, may be used to endorse or promote
products derived from this software without specific prior written
permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
********************************************************************** conversion between prediction filter coefficients and LSFs    order should be even                                          a piecewise linear approximation maps LSF <-> cos(LSF)        therefore the result is not accurate LSFs, but the two        functions are accurate inverses of each other                 helper function for NLSF2A(..)  O    intermediate polynomial, QA [dd+1]         I    vector of interleaved 2*cos(LSFs), QA [d]  I    polynomial order (= 1/2 * filter order)    QA compute whitening filter coefficients from normalized line spectral frequencies  O    monic whitening filter coefficients in Q12,  [ d ]           I    normalized line spectral frequencies in Q15, [ d ]           I    filter order (should be even)                                This ordering was found to maximize quality. It improves numerical accuracy of
       silk_NLSF2A_find_poly() compared to "standard" ordering.  convert LSFs to 2*cos(LSF), using piecewise linear curve from table  f_int on a scale 0-127 (rounded down)  f_frac, range: 0..255  Read start and end value from table  Q12  Q12, with a range of 0..200  Linear interpolation  QA  generate even and odd polynomials using convolution  convert even and odd polynomials to opus_int32 Q12 filter coefs  the Ptmp and Qtmp values at this stage need to fit in int32  QA+1  QA+1  Limit the maximum absolute value of the prediction coefficients, so that they'll fit in int16  Find maximum absolute value and its index  QA+1 -> Q12  Reduce magnitude of prediction coefficients  ( silk_int32_MAX >> 14 ) + silk_int16_MAX = 163838  Reached the last iteration, clip the coefficients  QA+1 -> Q12  QA+1 -> Q12  Prediction coefficients are (too close to) unstable; apply bandwidth expansion    on the unscaled coefficients, convert to Q12 and measure again                    QA+1 -> Q12 **********************************************************************
Copyright (c) 2006-2011, Skype Limited. All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
- Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
- Neither the name of Internet Society, IETF or IETF Trust, nor the
names of specific contributors, may be used to endorse or promote
products derived from this software without specific prior written
permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
********************************************************************** conversion between prediction filter coefficients and LSFs    order should be even                                          a piecewise linear approximation maps LSF <-> cos(LSF)        therefore the result is not accurate LSFs, but the two        functions are accurate inverses of each other                 helper function for NLSF2A(..)  O    intermediate polynomial, QA [dd+1]         I    vector of interleaved 2*cos(LSFs), QA [d]  I    polynomial order (= 1/2 * filter order)    QA compute whitening filter coefficients from normalized line spectral frequencies  O    monic whitening filter coefficients in Q12,  [ d ]           I    normalized line spectral frequencies in Q15, [ d ]           I    filter order (should be even)                                This ordering was found to maximize quality. It improves numerical accuracy of
       silk_NLSF2A_find_poly() compared to "standard" ordering.  convert LSFs to 2*cos(LSF), using piecewise linear curve from table  f_int on a scale 0-127 (rounded down)  f_frac, range: 0..255  Read start and end value from table  Q12  Q12, with a range of 0..200  Linear interpolation  QA  generate even and odd polynomials using convolution  convert even and odd polynomials to opus_int32 Q12 filter coefs  the Ptmp and Qtmp values at this stage need to fit in int32  QA+1  QA+1  Limit the maximum absolute value of the prediction coefficients, so that they'll fit in int16  Find maximum absolute value and its index  QA+1 -> Q12  Reduce magnitude of prediction coefficients  ( silk_int32_MAX >> 14 ) + silk_int16_MAX = 163838  Reached the last iteration, clip the coefficients  QA+1 -> Q12  QA+1 -> Q12  Prediction coefficients are (too close to) unstable; apply bandwidth expansion    on the unscaled coefficients, convert to Q12 and measure again                    QA+1 -> Q12 **********************************************************************
Copyright (c) 2006-2011, Skype Limited. All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
- Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
- Neither the name of Internet Society, IETF or IETF Trust, nor the
names of specific contributors, may be used to endorse or promote
products derived from this software without specific prior written
permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
********************************************************************** conversion between prediction filter coefficients and LSFs    order should be even                                          a piecewise linear approximation maps LSF <-> cos(LSF)        therefore the result is not accurate LSFs, but the two        functions are accurate inverses of each other                 helper function for NLSF2A(..)  O    intermediate polynomial, QA [dd+1]         I    vector of interleaved 2*cos(LSFs), QA [d]  I    polynomial order (= 1/2 * filter order)    QA compute whitening filter coefficients from normalized line spectral frequencies  O    monic whitening filter coefficients in Q12,  [ d ]           I    normalized line spectral frequencies in Q15, [ d ]           I    filter order (should be even)                                This ordering was found to maximize quality. It improves numerical accuracy of
       silk_NLSF2A_find_poly() compared to "standard" ordering.  convert LSFs to 2*cos(LSF), using piecewise linear curve from table  f_int on a scale 0-127 (rounded down)  f_frac, range: 0..255  Read start and end value from table  Q12  Q12, with a range of 0..200  Linear interpolation  QA  generate even and odd polynomials using convolution  convert even and odd polynomials to opus_int32 Q12 filter coefs  the Ptmp and Qtmp values at this stage need to fit in int32  QA+1  QA+1  Limit the maximum absolute value of the prediction coefficients, so that they'll fit in int16  Find maximum absolute value and its index  QA+1 -> Q12  Reduce magnitude of prediction coefficients  ( silk_int32_MAX >> 14 ) + silk_int16_MAX = 163838  Reached the last iteration, clip the coefficients  QA+1 -> Q12  QA+1 -> Q12  Prediction coefficients are (too close to) unstable; apply bandwidth expansion    on the unscaled coefficients, convert to Q12 and measure again                    QA+1 -> Q12 