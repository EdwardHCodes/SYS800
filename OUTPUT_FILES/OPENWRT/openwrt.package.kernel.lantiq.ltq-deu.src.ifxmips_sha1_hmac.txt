*****************************************************************************
**
** FILE NAME    : ifxmips_sha1_hmac.c
** PROJECT      : IFX UEIP
** MODULES      : DEU Module for UEIP
** DATE         : September 8, 2009
** AUTHOR       : Mohammad Firdaus
** DESCRIPTION  : Data Encryption Unit Driver
** COPYRIGHT    :       Copyright (c) 2009
**                      Infineon Technologies AG
**                      Am Campeon 1-12, 85579 Neubiberg, Germany
**
**    This program is free software; you can redistribute it and/or modify
**    it under the terms of the GNU General Public License as published by
**    the Free Software Foundation; either version 2 of the License, or
**    (at your option) any later version.
**
** HISTORY
** $Date        $Author             $Comment
** 08,Sept 2009 Mohammad Firdaus    Initial UEIP release
** 21,March 2011 Mohammad Firdaus   Changes for Kernel 2.6.32 and IPSec integration
******************************************************************************!
  \defgroup IFX_DEU IFX_DEU_DRIVERS
  \ingroup API
  \brief ifx deu driver module
!
  \file	ifxmips_sha1_hmac.c
  \ingroup IFX_DEU
  \brief SHA1-HMAC deu driver file
! 
  \defgroup IFX_SHA1_HMAC_FUNCTIONS IFX_SHA1_HMAC_FUNCTIONS
  \ingroup IFX_DEU
  \brief ifx sha1 hmac functions
 Project header  size in dword, needed for dbn workaround ! \fn static void sha1_hmac_transform(struct crypto_tfm *tfm, u32 const *in)
 *  \ingroup IFX_SHA1_HMAC_FUNCTIONS
 *  \brief save input block to context   
 *  \param tfm linux crypto algo transform  
 *  \param in 64-byte block of input  
dbn workaround! \fn int sha1_hmac_setkey(struct crypto_tfm *tfm, const u8 *key, unsigned int keylen)
 *  \ingroup IFX_SHA1_HMAC_FUNCTIONS
 *  \brief sets sha1 hmac key   
 *  \param tfm linux crypto algo transform  
 *  \param key input key  
 *  \param keylen key length greater than 64 bytes IS NOT SUPPORTED  
printk("Setting keys of len: %d\n", keylen);reset keys back to 0! \fn int sha1_hmac_setkey_hw(struct crypto_tfm *tfm, const u8 *key, unsigned int keylen)
 *  \ingroup IFX_SHA1_HMAC_FUNCTIONS
 *  \brief sets sha1 hmac key  into hw registers 
 *  \param tfm linux crypto algo transform  
 *  \param key input key  
 *  \param keylen key length greater than 64 bytes IS NOT SUPPORTED  
! \fn void sha1_hmac_init(struct crypto_tfm *tfm)
 *  \ingroup IFX_SHA1_HMAC_FUNCTIONS
 *  \brief initialize sha1 hmac context   
 *  \param tfm linux crypto algo transform  
printk("debug ln: %d, fn: %s\n", __LINE__, __func__);dbn workaround! \fn static void sha1_hmac_update(struct crypto_tfm *tfm, const u8 *data, unsigned int len)
 *  \ingroup IFX_SHA1_HMAC_FUNCTIONS
 *  \brief on-the-fly sha1 hmac computation   
 *  \param tfm linux crypto algo transform  
 *  \param data input data  
 *  \param len size of input data 
 printk("sctx->count = %d\n", sctx->count);! \fn static void sha1_hmac_final(struct crypto_tfm *tfm, u8 *out)
 *  \ingroup IFX_SHA1_HMAC_FUNCTIONS
 *  \brief ompute final sha1 hmac value   
 *  \param tfm linux crypto algo transform  
 *  \param out final sha1 hmac output value  
struct sha1_hmac_ctx *sctx = shash_desc_ctx(desc); need to add 512 bit of the IPAD operation Pad out to 56 mod 64  Append length for vr9 change, ENDI = 1wait for processing this will not take longwait for processing this will not take longwait for digest ready this will not take longprintk("debug ln: %d, fn: %s\n", __LINE__, __func__);
 * \brief SHA1-HMAC function mappings
! \fn int ifxdeu_init_sha1_hmac (void)
 *  \ingroup IFX_SHA1_HMAC_FUNCTIONS
 *  \brief initialize sha1 hmac driver    
! \fn void ifxdeu_fini_sha1_hmac (void)
 *  \ingroup IFX_SHA1_HMAC_FUNCTIONS
 *  \brief unregister sha1 hmac driver    
*****************************************************************************
**
** FILE NAME    : ifxmips_sha1_hmac.c
** PROJECT      : IFX UEIP
** MODULES      : DEU Module for UEIP
** DATE         : September 8, 2009
** AUTHOR       : Mohammad Firdaus
** DESCRIPTION  : Data Encryption Unit Driver
** COPYRIGHT    :       Copyright (c) 2009
**                      Infineon Technologies AG
**                      Am Campeon 1-12, 85579 Neubiberg, Germany
**
**    This program is free software; you can redistribute it and/or modify
**    it under the terms of the GNU General Public License as published by
**    the Free Software Foundation; either version 2 of the License, or
**    (at your option) any later version.
**
** HISTORY
** $Date        $Author             $Comment
** 08,Sept 2009 Mohammad Firdaus    Initial UEIP release
** 21,March 2011 Mohammad Firdaus   Changes for Kernel 2.6.32 and IPSec integration
******************************************************************************!
  \defgroup IFX_DEU IFX_DEU_DRIVERS
  \ingroup API
  \brief ifx deu driver module
!
  \file	ifxmips_sha1_hmac.c
  \ingroup IFX_DEU
  \brief SHA1-HMAC deu driver file
! 
  \defgroup IFX_SHA1_HMAC_FUNCTIONS IFX_SHA1_HMAC_FUNCTIONS
  \ingroup IFX_DEU
  \brief ifx sha1 hmac functions
 Project header  size in dword, needed for dbn workaround ! \fn static void sha1_hmac_transform(struct crypto_tfm *tfm, u32 const *in)
 *  \ingroup IFX_SHA1_HMAC_FUNCTIONS
 *  \brief save input block to context   
 *  \param tfm linux crypto algo transform  
 *  \param in 64-byte block of input  
dbn workaround! \fn int sha1_hmac_setkey(struct crypto_tfm *tfm, const u8 *key, unsigned int keylen)
 *  \ingroup IFX_SHA1_HMAC_FUNCTIONS
 *  \brief sets sha1 hmac key   
 *  \param tfm linux crypto algo transform  
 *  \param key input key  
 *  \param keylen key length greater than 64 bytes IS NOT SUPPORTED  
printk("Setting keys of len: %d\n", keylen);reset keys back to 0! \fn int sha1_hmac_setkey_hw(struct crypto_tfm *tfm, const u8 *key, unsigned int keylen)
 *  \ingroup IFX_SHA1_HMAC_FUNCTIONS
 *  \brief sets sha1 hmac key  into hw registers 
 *  \param tfm linux crypto algo transform  
 *  \param key input key  
 *  \param keylen key length greater than 64 bytes IS NOT SUPPORTED  
! \fn void sha1_hmac_init(struct crypto_tfm *tfm)
 *  \ingroup IFX_SHA1_HMAC_FUNCTIONS
 *  \brief initialize sha1 hmac context   
 *  \param tfm linux crypto algo transform  
printk("debug ln: %d, fn: %s\n", __LINE__, __func__);dbn workaround! \fn static void sha1_hmac_update(struct crypto_tfm *tfm, const u8 *data, unsigned int len)
 *  \ingroup IFX_SHA1_HMAC_FUNCTIONS
 *  \brief on-the-fly sha1 hmac computation   
 *  \param tfm linux crypto algo transform  
 *  \param data input data  
 *  \param len size of input data 
 printk("sctx->count = %d\n", sctx->count);! \fn static void sha1_hmac_final(struct crypto_tfm *tfm, u8 *out)
 *  \ingroup IFX_SHA1_HMAC_FUNCTIONS
 *  \brief ompute final sha1 hmac value   
 *  \param tfm linux crypto algo transform  
 *  \param out final sha1 hmac output value  
struct sha1_hmac_ctx *sctx = shash_desc_ctx(desc); need to add 512 bit of the IPAD operation Pad out to 56 mod 64  Append length for vr9 change, ENDI = 1wait for processing this will not take longwait for processing this will not take longwait for digest ready this will not take longprintk("debug ln: %d, fn: %s\n", __LINE__, __func__);
 * \brief SHA1-HMAC function mappings
! \fn int ifxdeu_init_sha1_hmac (void)
 *  \ingroup IFX_SHA1_HMAC_FUNCTIONS
 *  \brief initialize sha1 hmac driver    
! \fn void ifxdeu_fini_sha1_hmac (void)
 *  \ingroup IFX_SHA1_HMAC_FUNCTIONS
 *  \brief unregister sha1 hmac driver    
*****************************************************************************
**
** FILE NAME    : ifxmips_sha1_hmac.c
** PROJECT      : IFX UEIP
** MODULES      : DEU Module for UEIP
** DATE         : September 8, 2009
** AUTHOR       : Mohammad Firdaus
** DESCRIPTION  : Data Encryption Unit Driver
** COPYRIGHT    :       Copyright (c) 2009
**                      Infineon Technologies AG
**                      Am Campeon 1-12, 85579 Neubiberg, Germany
**
**    This program is free software; you can redistribute it and/or modify
**    it under the terms of the GNU General Public License as published by
**    the Free Software Foundation; either version 2 of the License, or
**    (at your option) any later version.
**
** HISTORY
** $Date        $Author             $Comment
** 08,Sept 2009 Mohammad Firdaus    Initial UEIP release
** 21,March 2011 Mohammad Firdaus   Changes for Kernel 2.6.32 and IPSec integration
******************************************************************************!
  \defgroup IFX_DEU IFX_DEU_DRIVERS
  \ingroup API
  \brief ifx deu driver module
!
  \file	ifxmips_sha1_hmac.c
  \ingroup IFX_DEU
  \brief SHA1-HMAC deu driver file
! 
  \defgroup IFX_SHA1_HMAC_FUNCTIONS IFX_SHA1_HMAC_FUNCTIONS
  \ingroup IFX_DEU
  \brief ifx sha1 hmac functions
 Project header  size in dword, needed for dbn workaround ! \fn static void sha1_hmac_transform(struct crypto_tfm *tfm, u32 const *in)
 *  \ingroup IFX_SHA1_HMAC_FUNCTIONS
 *  \brief save input block to context   
 *  \param tfm linux crypto algo transform  
 *  \param in 64-byte block of input  
dbn workaround! \fn int sha1_hmac_setkey(struct crypto_tfm *tfm, const u8 *key, unsigned int keylen)
 *  \ingroup IFX_SHA1_HMAC_FUNCTIONS
 *  \brief sets sha1 hmac key   
 *  \param tfm linux crypto algo transform  
 *  \param key input key  
 *  \param keylen key length greater than 64 bytes IS NOT SUPPORTED  
printk("Setting keys of len: %d\n", keylen);reset keys back to 0! \fn int sha1_hmac_setkey_hw(struct crypto_tfm *tfm, const u8 *key, unsigned int keylen)
 *  \ingroup IFX_SHA1_HMAC_FUNCTIONS
 *  \brief sets sha1 hmac key  into hw registers 
 *  \param tfm linux crypto algo transform  
 *  \param key input key  
 *  \param keylen key length greater than 64 bytes IS NOT SUPPORTED  
! \fn void sha1_hmac_init(struct crypto_tfm *tfm)
 *  \ingroup IFX_SHA1_HMAC_FUNCTIONS
 *  \brief initialize sha1 hmac context   
 *  \param tfm linux crypto algo transform  
printk("debug ln: %d, fn: %s\n", __LINE__, __func__);dbn workaround! \fn static void sha1_hmac_update(struct crypto_tfm *tfm, const u8 *data, unsigned int len)
 *  \ingroup IFX_SHA1_HMAC_FUNCTIONS
 *  \brief on-the-fly sha1 hmac computation   
 *  \param tfm linux crypto algo transform  
 *  \param data input data  
 *  \param len size of input data 
 printk("sctx->count = %d\n", sctx->count);! \fn static void sha1_hmac_final(struct crypto_tfm *tfm, u8 *out)
 *  \ingroup IFX_SHA1_HMAC_FUNCTIONS
 *  \brief ompute final sha1 hmac value   
 *  \param tfm linux crypto algo transform  
 *  \param out final sha1 hmac output value  
struct sha1_hmac_ctx *sctx = shash_desc_ctx(desc); need to add 512 bit of the IPAD operation Pad out to 56 mod 64  Append length for vr9 change, ENDI = 1wait for processing this will not take longwait for processing this will not take longwait for digest ready this will not take longprintk("debug ln: %d, fn: %s\n", __LINE__, __func__);
 * \brief SHA1-HMAC function mappings
! \fn int ifxdeu_init_sha1_hmac (void)
 *  \ingroup IFX_SHA1_HMAC_FUNCTIONS
 *  \brief initialize sha1 hmac driver    
! \fn void ifxdeu_fini_sha1_hmac (void)
 *  \ingroup IFX_SHA1_HMAC_FUNCTIONS
 *  \brief unregister sha1 hmac driver    
