**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Alan Korr
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** device 0 (master) or 1 (slave)  set for 48 bit addressing  number of supported multisectors  logical sector  buffer for reading and writing large physical sectors  timeout  timeout  Conditionally block LED access for the ATA driver, so the LED can be
 * (mis)used for other purposes  not 16-bit aligned, copy byte by byte  I assume big endian   and don't use the SWAB16 macro  tail loop is faster  16-bit aligned, can do faster copy  tail loop is faster  !ATA_OPTIMIZED_READING  not 16-bit aligned, copy byte by byte  tail loop is faster  16-bit aligned, can do faster copy  tail loop is faster  !ATA_OPTIMIZED_WRITING  If DMA is supported and parameters are ok for DMA, use it  31:24  7:0  39:32  15:8  47:40  23:16  0 means 256 sectors  wait at least 400ns between writing command and reading status  HAVE_ATA_DMA  We have timed out waiting for RDY and/or DRQ, possibly
                       because the hard drive is shaking and has problems
                       reading the data. We have two options:
                       1) Wait some more
                       2) Perform a soft reset and try again.

                       We choose alternative 2.
                     read the status register exactly once per loop 
                  "Device errors encountered during READ MULTIPLE commands
                  are posted at the beginning of the block or partial block
                  transfer, but the DRQ bit is still set to one and the data
                  transfer shall take place, including transfer of corrupted
                  data, if any."
                    -- ATA specification
                 no point retrying IDNF, sector no. was invalid  Advance one chunk of sectors  no point retrying IDNF, sector no. was invalid  bailed out before updating  unused for now  unused for now  ndef MAX_PHYS_SECTOR_SIZE  round down to physical sector boundary  check whether the sector is already cached  not found: read the sector  unused for now  first partial sector  unused for now  first partial sector  MAX_PHYS_SECTOR_SIZE  does the disk support Security Mode feature set?  Don't enter sleep if the device doesn't support
       power management.  Hardware reset protocol as specified in chapter 9.1, ATA spec draft v5  state HRR2  select the right device  Massage the return code so it is 0 on success and -1 on failure  not putting this into STORAGE_INIT_ATTR, as ATA spec recommends to re-read identify_info after soft reset. So we'll do that. the IDENTIFY words are already swapped, so we need to treat
           this info differently that normal sector data  If this code is allowed to run on a Nano, the next reads from the flash will
 * time out, so we disable it. It shouldn't be necessary anyway, since the
 * ATA -> Flash interface automatically sleeps almost immediately after the
 * last command.
  >= 5us  DMA requires INTRQ be enabled  >2ms  This little sucker can take up to 30 seconds  allow voltage to build up  Accessing the PP IDE controller too early after powering up the disk
     * makes the core hang for a short time, causing an audio dropout. This
     * also depends on the disk; iPod Mini G2 needs at least HZ/5 to get rid
     * of the dropout. Since this time isn't additive (the wait_for_bsy() in
     * ata_hard_reset() will shortened by the same amount), it's a good idea
     * to do this on all HDD based targets.  HAVE_ATA_POWER_OFF  master?  slave?  force PIO mode  adv. power management: lowest w/o standby  acoustic management: lowest noise  enable read look-ahead  DMA mode  Find out the highest supported PIO mode  Is word 64 valid?  Update the table: set highest supported pio mode that we also support  Ultra DMA mode info present, find a mode  No UDMA mode found, try to find a multi-word DMA mode  HAVE_ATA_DMA  some CF cards don't like advanced powermanagement
                   even if they mark it as supported - go figure...  This should reset both master and slave, we don't yet know what's in  symptom fix: else check_registers() below may fail  must be called before ata_device_init()  somebody has switched it off  allow voltage to build up  DMA requires INTRQ be enabled  first try, hard reset at cold start only  failed? -> second try, always with hard reset  Invalid multisector info, try with 16  48 bit address support  and disk size >= 128 GiB  (needs BigLBA addressing)  use BigLBA  HAVE_LBA48  Find out the physical sector size  Check if drive really needs emulation  - if we can access
             * sector 1 then assume the drive will handle it better than
             * us, and ignore the large physical sectors.
              MAX_PHYS_SECTOR_SIZE  unused for now  Returns last DMA mode as set by set_features()  Needed to allow updating while waiting for DMA to complete  We don't care which logical drive number(s) we have been assigned  GCC does a lousy job culling unreachable cases in the default handler
       if statements are in a switch statement, so we'll do it this way. Only
       the first case is frequently hit anyway.  won't see ATA_BOOT in here  There is no need to force ATA power on  ndef USB_NONE **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Alan Korr
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** device 0 (master) or 1 (slave)  set for 48 bit addressing  number of supported multisectors  logical sector  buffer for reading and writing large physical sectors  timeout  timeout  Conditionally block LED access for the ATA driver, so the LED can be
 * (mis)used for other purposes  not 16-bit aligned, copy byte by byte  I assume big endian   and don't use the SWAB16 macro  tail loop is faster  16-bit aligned, can do faster copy  tail loop is faster  !ATA_OPTIMIZED_READING  not 16-bit aligned, copy byte by byte  tail loop is faster  16-bit aligned, can do faster copy  tail loop is faster  !ATA_OPTIMIZED_WRITING  If DMA is supported and parameters are ok for DMA, use it  31:24  7:0  39:32  15:8  47:40  23:16  0 means 256 sectors  wait at least 400ns between writing command and reading status  HAVE_ATA_DMA  We have timed out waiting for RDY and/or DRQ, possibly
                       because the hard drive is shaking and has problems
                       reading the data. We have two options:
                       1) Wait some more
                       2) Perform a soft reset and try again.

                       We choose alternative 2.
                     read the status register exactly once per loop 
                  "Device errors encountered during READ MULTIPLE commands
                  are posted at the beginning of the block or partial block
                  transfer, but the DRQ bit is still set to one and the data
                  transfer shall take place, including transfer of corrupted
                  data, if any."
                    -- ATA specification
                 no point retrying IDNF, sector no. was invalid  Advance one chunk of sectors  no point retrying IDNF, sector no. was invalid  bailed out before updating  unused for now  unused for now  ndef MAX_PHYS_SECTOR_SIZE  round down to physical sector boundary  check whether the sector is already cached  not found: read the sector  unused for now  first partial sector  unused for now  first partial sector  MAX_PHYS_SECTOR_SIZE  does the disk support Security Mode feature set?  Don't enter sleep if the device doesn't support
       power management.  Hardware reset protocol as specified in chapter 9.1, ATA spec draft v5  state HRR2  select the right device  Massage the return code so it is 0 on success and -1 on failure  not putting this into STORAGE_INIT_ATTR, as ATA spec recommends to re-read identify_info after soft reset. So we'll do that. the IDENTIFY words are already swapped, so we need to treat
           this info differently that normal sector data  If this code is allowed to run on a Nano, the next reads from the flash will
 * time out, so we disable it. It shouldn't be necessary anyway, since the
 * ATA -> Flash interface automatically sleeps almost immediately after the
 * last command.
  >= 5us  DMA requires INTRQ be enabled  >2ms  This little sucker can take up to 30 seconds  allow voltage to build up  Accessing the PP IDE controller too early after powering up the disk
     * makes the core hang for a short time, causing an audio dropout. This
     * also depends on the disk; iPod Mini G2 needs at least HZ/5 to get rid
     * of the dropout. Since this time isn't additive (the wait_for_bsy() in
     * ata_hard_reset() will shortened by the same amount), it's a good idea
     * to do this on all HDD based targets.  HAVE_ATA_POWER_OFF  master?  slave?  force PIO mode  adv. power management: lowest w/o standby  acoustic management: lowest noise  enable read look-ahead  DMA mode  Find out the highest supported PIO mode  Is word 64 valid?  Update the table: set highest supported pio mode that we also support  Ultra DMA mode info present, find a mode  No UDMA mode found, try to find a multi-word DMA mode  HAVE_ATA_DMA  some CF cards don't like advanced powermanagement
                   even if they mark it as supported - go figure...  This should reset both master and slave, we don't yet know what's in  symptom fix: else check_registers() below may fail  must be called before ata_device_init()  somebody has switched it off  allow voltage to build up  DMA requires INTRQ be enabled  first try, hard reset at cold start only  failed? -> second try, always with hard reset  Invalid multisector info, try with 16  48 bit address support  and disk size >= 128 GiB  (needs BigLBA addressing)  use BigLBA  HAVE_LBA48  Find out the physical sector size  Check if drive really needs emulation  - if we can access
             * sector 1 then assume the drive will handle it better than
             * us, and ignore the large physical sectors.
              MAX_PHYS_SECTOR_SIZE  unused for now  Returns last DMA mode as set by set_features()  Needed to allow updating while waiting for DMA to complete  We don't care which logical drive number(s) we have been assigned  GCC does a lousy job culling unreachable cases in the default handler
       if statements are in a switch statement, so we'll do it this way. Only
       the first case is frequently hit anyway.  won't see ATA_BOOT in here  There is no need to force ATA power on  ndef USB_NONE **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Alan Korr
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** device 0 (master) or 1 (slave)  set for 48 bit addressing  number of supported multisectors  logical sector  buffer for reading and writing large physical sectors  timeout  timeout  Conditionally block LED access for the ATA driver, so the LED can be
 * (mis)used for other purposes  not 16-bit aligned, copy byte by byte  I assume big endian   and don't use the SWAB16 macro  tail loop is faster  16-bit aligned, can do faster copy  tail loop is faster  !ATA_OPTIMIZED_READING  not 16-bit aligned, copy byte by byte  tail loop is faster  16-bit aligned, can do faster copy  tail loop is faster  !ATA_OPTIMIZED_WRITING  If DMA is supported and parameters are ok for DMA, use it  31:24  7:0  39:32  15:8  47:40  23:16  0 means 256 sectors  wait at least 400ns between writing command and reading status  HAVE_ATA_DMA  We have timed out waiting for RDY and/or DRQ, possibly
                       because the hard drive is shaking and has problems
                       reading the data. We have two options:
                       1) Wait some more
                       2) Perform a soft reset and try again.

                       We choose alternative 2.
                     read the status register exactly once per loop 
                  "Device errors encountered during READ MULTIPLE commands
                  are posted at the beginning of the block or partial block
                  transfer, but the DRQ bit is still set to one and the data
                  transfer shall take place, including transfer of corrupted
                  data, if any."
                    -- ATA specification
                 no point retrying IDNF, sector no. was invalid  Advance one chunk of sectors  no point retrying IDNF, sector no. was invalid  bailed out before updating  unused for now  unused for now  ndef MAX_PHYS_SECTOR_SIZE  round down to physical sector boundary  check whether the sector is already cached  not found: read the sector  unused for now  first partial sector  unused for now  first partial sector  MAX_PHYS_SECTOR_SIZE  does the disk support Security Mode feature set?  Don't enter sleep if the device doesn't support
       power management.  Hardware reset protocol as specified in chapter 9.1, ATA spec draft v5  state HRR2  select the right device  Massage the return code so it is 0 on success and -1 on failure  not putting this into STORAGE_INIT_ATTR, as ATA spec recommends to re-read identify_info after soft reset. So we'll do that. the IDENTIFY words are already swapped, so we need to treat
           this info differently that normal sector data  If this code is allowed to run on a Nano, the next reads from the flash will
 * time out, so we disable it. It shouldn't be necessary anyway, since the
 * ATA -> Flash interface automatically sleeps almost immediately after the
 * last command.
  >= 5us  DMA requires INTRQ be enabled  >2ms  This little sucker can take up to 30 seconds  allow voltage to build up  Accessing the PP IDE controller too early after powering up the disk
     * makes the core hang for a short time, causing an audio dropout. This
     * also depends on the disk; iPod Mini G2 needs at least HZ/5 to get rid
     * of the dropout. Since this time isn't additive (the wait_for_bsy() in
     * ata_hard_reset() will shortened by the same amount), it's a good idea
     * to do this on all HDD based targets.  HAVE_ATA_POWER_OFF  master?  slave?  force PIO mode  adv. power management: lowest w/o standby  acoustic management: lowest noise  enable read look-ahead  DMA mode  Find out the highest supported PIO mode  Is word 64 valid?  Update the table: set highest supported pio mode that we also support  Ultra DMA mode info present, find a mode  No UDMA mode found, try to find a multi-word DMA mode  HAVE_ATA_DMA  some CF cards don't like advanced powermanagement
                   even if they mark it as supported - go figure...  This should reset both master and slave, we don't yet know what's in  symptom fix: else check_registers() below may fail  must be called before ata_device_init()  somebody has switched it off  allow voltage to build up  DMA requires INTRQ be enabled  first try, hard reset at cold start only  failed? -> second try, always with hard reset  Invalid multisector info, try with 16  48 bit address support  and disk size >= 128 GiB  (needs BigLBA addressing)  use BigLBA  HAVE_LBA48  Find out the physical sector size  Check if drive really needs emulation  - if we can access
             * sector 1 then assume the drive will handle it better than
             * us, and ignore the large physical sectors.
              MAX_PHYS_SECTOR_SIZE  unused for now  Returns last DMA mode as set by set_features()  Needed to allow updating while waiting for DMA to complete  We don't care which logical drive number(s) we have been assigned  GCC does a lousy job culling unreachable cases in the default handler
       if statements are in a switch statement, so we'll do it this way. Only
       the first case is frequently hit anyway.  won't see ATA_BOOT in here  There is no need to force ATA power on  ndef USB_NONE 