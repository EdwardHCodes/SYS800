******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************    private final JMultiSlider slider, slider2; private JLabel limitsLabel = new JLabel("Limits:"); private JLabel configureLabel = new JLabel("Configure:"); private boolean showConfiguration = false; TODO how do I cope with this... how can i iterate and add listener atomically?When we have stuff bound in both directions, we will need a little lock to prevent a race conditionCan only change the lowest value if it's less than lowerCan only change the lower value if it's more than lowestCan only change the lower value if it's less than higherCan only change the higher value if it's less than highestCan only change the higher value if it's more than lowerCan only change the highest value if it's more than higher
    	 * With these binds enabled, nasty crash seems to occur when moving the slider
    	 
    	slider.lowestValueProperty().bind(lowestSpinner.valueProperty());
    	slider.lowerValueProperty().bind(lowerSpinner.valueProperty());
    	slider.higherValueProperty().bind(higherSpinner.valueProperty());
    	slider.highestValueProperty().bind(highestSpinner.valueProperty());
    	
    	 * Obviously, we also want to bind the other way round so the spinners change when the slider does.
    	 * CHECK FOR RACE!!!
    	 
     * SK - not sure why this is static - stops us referencing other instance specific controls...
      Before we bind the properties, set the values so that validation logic is not going crazy 'cause of values interdependencies and the order or bind commands.        slider.setDrawThumbs(showConfiguration); slider.setVisible(showConfiguration);        slider2.setVisible(showConfiguration);        validate(); @Override public void stateChanged(ChangeEvent e) { float range = vital.getMaximum() - vital.getMinimum(); int incr = (int) (range / 5f); if(incr != slider.getMajorTickSpacing()) { slider.setLabelTable(slider.createStandardLabels(incr)); slider.setMajorTickSpacing(incr); } } name.setText(vital.getLabel());                Runnable r = new Runnable() {                    public void run() {                        while (vitalValues.getChildren().size() < N) {                            for (int i = 0; i < (N - vitalValues.getChildren().size()); i++) {                                ValueView val = new ValueView();                                //                                val.setBorder(new LineBorder(Color.black));//                                vitalValues.getChildren().add(val);                            }//                            validate();                        }                        while (N < vitalValues.getChildren().size()) {                            for (int i = 0; i < (vitalValues.getChildren().size() - N); i++) {//                                vitalValues.remove(0);                            }                        }                    }                };        } catch (InvocationTargetException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace(); ((JLabel)vitalValues.getComponent(0)).setForeground(Color.yellow); ((JLabel)vitalValues.getComponent(0)).setBackground(Color.yellow); TODO include this            ((ValueView) vitalValues.getChildren().get(0)).update(null, null, "<NO SOURCES>", null, null, 0L, 0L);                Value val = vital.getValues().get(i);                ValueView lbl = (ValueView) vitalValues.getComponent(i);                ice.DeviceIdentity di = vital.getParent().getDeviceIdentity(val.getUniqueDeviceIdentifier());                DeviceIcon dicon = vital.getParent().getDeviceIcon(val.getUniqueDeviceIdentifier()); dicon = null == dicon ? null : new ScaledDeviceIcon(dicon, 0.5);                if (null != di) {                    String s = di.manufacturer.equals(di.model) ? di.manufacturer : (di.manufacturer + " " + di.model);                    lbl.update(val, dicon, s, val.getNumeric(), val.getSampleInfo(), val.getValueMsBelowLow(), val.getValueMsAboveHigh());                } else {                    lbl.update(val, dicon, "", val.getNumeric(), val.getSampleInfo(), val.getValueMsBelowLow(), val.getValueMsAboveHigh());                }This view is the minituare device view on the right hand side.******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************    private final JMultiSlider slider, slider2; private JLabel limitsLabel = new JLabel("Limits:"); private JLabel configureLabel = new JLabel("Configure:"); private boolean showConfiguration = false; TODO how do I cope with this... how can i iterate and add listener atomically?When we have stuff bound in both directions, we will need a little lock to prevent a race conditionCan only change the lowest value if it's less than lowerCan only change the lower value if it's more than lowestCan only change the lower value if it's less than higherCan only change the higher value if it's less than highestCan only change the higher value if it's more than lowerCan only change the highest value if it's more than higher
    	 * With these binds enabled, nasty crash seems to occur when moving the slider
    	 
    	slider.lowestValueProperty().bind(lowestSpinner.valueProperty());
    	slider.lowerValueProperty().bind(lowerSpinner.valueProperty());
    	slider.higherValueProperty().bind(higherSpinner.valueProperty());
    	slider.highestValueProperty().bind(highestSpinner.valueProperty());
    	
    	 * Obviously, we also want to bind the other way round so the spinners change when the slider does.
    	 * CHECK FOR RACE!!!
    	 
     * SK - not sure why this is static - stops us referencing other instance specific controls...
      Before we bind the properties, set the values so that validation logic is not going crazy 'cause of values interdependencies and the order or bind commands.        slider.setDrawThumbs(showConfiguration); slider.setVisible(showConfiguration);        slider2.setVisible(showConfiguration);        validate(); @Override public void stateChanged(ChangeEvent e) { float range = vital.getMaximum() - vital.getMinimum(); int incr = (int) (range / 5f); if(incr != slider.getMajorTickSpacing()) { slider.setLabelTable(slider.createStandardLabels(incr)); slider.setMajorTickSpacing(incr); } } name.setText(vital.getLabel());                Runnable r = new Runnable() {                    public void run() {                        while (vitalValues.getChildren().size() < N) {                            for (int i = 0; i < (N - vitalValues.getChildren().size()); i++) {                                ValueView val = new ValueView();                                //                                val.setBorder(new LineBorder(Color.black));//                                vitalValues.getChildren().add(val);                            }//                            validate();                        }                        while (N < vitalValues.getChildren().size()) {                            for (int i = 0; i < (vitalValues.getChildren().size() - N); i++) {//                                vitalValues.remove(0);                            }                        }                    }                };        } catch (InvocationTargetException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace(); ((JLabel)vitalValues.getComponent(0)).setForeground(Color.yellow); ((JLabel)vitalValues.getComponent(0)).setBackground(Color.yellow); TODO include this            ((ValueView) vitalValues.getChildren().get(0)).update(null, null, "<NO SOURCES>", null, null, 0L, 0L);                Value val = vital.getValues().get(i);                ValueView lbl = (ValueView) vitalValues.getComponent(i);                ice.DeviceIdentity di = vital.getParent().getDeviceIdentity(val.getUniqueDeviceIdentifier());                DeviceIcon dicon = vital.getParent().getDeviceIcon(val.getUniqueDeviceIdentifier()); dicon = null == dicon ? null : new ScaledDeviceIcon(dicon, 0.5);                if (null != di) {                    String s = di.manufacturer.equals(di.model) ? di.manufacturer : (di.manufacturer + " " + di.model);                    lbl.update(val, dicon, s, val.getNumeric(), val.getSampleInfo(), val.getValueMsBelowLow(), val.getValueMsAboveHigh());                } else {                    lbl.update(val, dicon, "", val.getNumeric(), val.getSampleInfo(), val.getValueMsBelowLow(), val.getValueMsAboveHigh());                }This view is the minituare device view on the right hand side.******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************    private final JMultiSlider slider, slider2; private JLabel limitsLabel = new JLabel("Limits:"); private JLabel configureLabel = new JLabel("Configure:"); private boolean showConfiguration = false; TODO how do I cope with this... how can i iterate and add listener atomically?When we have stuff bound in both directions, we will need a little lock to prevent a race conditionCan only change the lowest value if it's less than lowerCan only change the lower value if it's more than lowestCan only change the lower value if it's less than higherCan only change the higher value if it's less than highestCan only change the higher value if it's more than lowerCan only change the highest value if it's more than higher
    	 * With these binds enabled, nasty crash seems to occur when moving the slider
    	 
    	slider.lowestValueProperty().bind(lowestSpinner.valueProperty());
    	slider.lowerValueProperty().bind(lowerSpinner.valueProperty());
    	slider.higherValueProperty().bind(higherSpinner.valueProperty());
    	slider.highestValueProperty().bind(highestSpinner.valueProperty());
    	
    	 * Obviously, we also want to bind the other way round so the spinners change when the slider does.
    	 * CHECK FOR RACE!!!
    	 
     * SK - not sure why this is static - stops us referencing other instance specific controls...
      Before we bind the properties, set the values so that validation logic is not going crazy 'cause of values interdependencies and the order or bind commands.        slider.setDrawThumbs(showConfiguration); slider.setVisible(showConfiguration);        slider2.setVisible(showConfiguration);        validate(); @Override public void stateChanged(ChangeEvent e) { float range = vital.getMaximum() - vital.getMinimum(); int incr = (int) (range / 5f); if(incr != slider.getMajorTickSpacing()) { slider.setLabelTable(slider.createStandardLabels(incr)); slider.setMajorTickSpacing(incr); } } name.setText(vital.getLabel());                Runnable r = new Runnable() {                    public void run() {                        while (vitalValues.getChildren().size() < N) {                            for (int i = 0; i < (N - vitalValues.getChildren().size()); i++) {                                ValueView val = new ValueView();                                //                                val.setBorder(new LineBorder(Color.black));//                                vitalValues.getChildren().add(val);                            }//                            validate();                        }                        while (N < vitalValues.getChildren().size()) {                            for (int i = 0; i < (vitalValues.getChildren().size() - N); i++) {//                                vitalValues.remove(0);                            }                        }                    }                };        } catch (InvocationTargetException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace(); ((JLabel)vitalValues.getComponent(0)).setForeground(Color.yellow); ((JLabel)vitalValues.getComponent(0)).setBackground(Color.yellow); TODO include this            ((ValueView) vitalValues.getChildren().get(0)).update(null, null, "<NO SOURCES>", null, null, 0L, 0L);                Value val = vital.getValues().get(i);                ValueView lbl = (ValueView) vitalValues.getComponent(i);                ice.DeviceIdentity di = vital.getParent().getDeviceIdentity(val.getUniqueDeviceIdentifier());                DeviceIcon dicon = vital.getParent().getDeviceIcon(val.getUniqueDeviceIdentifier()); dicon = null == dicon ? null : new ScaledDeviceIcon(dicon, 0.5);                if (null != di) {                    String s = di.manufacturer.equals(di.model) ? di.manufacturer : (di.manufacturer + " " + di.model);                    lbl.update(val, dicon, s, val.getNumeric(), val.getSampleInfo(), val.getValueMsBelowLow(), val.getValueMsAboveHigh());                } else {                    lbl.update(val, dicon, "", val.getNumeric(), val.getSampleInfo(), val.getValueMsBelowLow(), val.getValueMsAboveHigh());                }This view is the minituare device view on the right hand side.******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************    private final JMultiSlider slider, slider2; private JLabel limitsLabel = new JLabel("Limits:"); private JLabel configureLabel = new JLabel("Configure:"); private boolean showConfiguration = false; TODO how do I cope with this... how can i iterate and add listener atomically?When we have stuff bound in both directions, we will need a little lock to prevent a race conditionCan only change the lowest value if it's less than lowerCan only change the lower value if it's more than lowestCan only change the lower value if it's less than higherCan only change the higher value if it's less than highestCan only change the higher value if it's more than lowerCan only change the highest value if it's more than higher
    	 * With these binds enabled, nasty crash seems to occur when moving the slider
    	 
    	slider.lowestValueProperty().bind(lowestSpinner.valueProperty());
    	slider.lowerValueProperty().bind(lowerSpinner.valueProperty());
    	slider.higherValueProperty().bind(higherSpinner.valueProperty());
    	slider.highestValueProperty().bind(highestSpinner.valueProperty());
    	
    	 * Obviously, we also want to bind the other way round so the spinners change when the slider does.
    	 * CHECK FOR RACE!!!
    	 
     * SK - not sure why this is static - stops us referencing other instance specific controls...
      Before we bind the properties, set the values so that validation logic is not going crazy 'cause of values interdependencies and the order or bind commands.        slider.setDrawThumbs(showConfiguration); slider.setVisible(showConfiguration);        slider2.setVisible(showConfiguration);        validate(); @Override public void stateChanged(ChangeEvent e) { float range = vital.getMaximum() - vital.getMinimum(); int incr = (int) (range / 5f); if(incr != slider.getMajorTickSpacing()) { slider.setLabelTable(slider.createStandardLabels(incr)); slider.setMajorTickSpacing(incr); } } name.setText(vital.getLabel());                Runnable r = new Runnable() {                    public void run() {                        while (vitalValues.getChildren().size() < N) {                            for (int i = 0; i < (N - vitalValues.getChildren().size()); i++) {                                ValueView val = new ValueView();                                //                                val.setBorder(new LineBorder(Color.black));//                                vitalValues.getChildren().add(val);                            }//                            validate();                        }                        while (N < vitalValues.getChildren().size()) {                            for (int i = 0; i < (vitalValues.getChildren().size() - N); i++) {//                                vitalValues.remove(0);                            }                        }                    }                };        } catch (InvocationTargetException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace(); ((JLabel)vitalValues.getComponent(0)).setForeground(Color.yellow); ((JLabel)vitalValues.getComponent(0)).setBackground(Color.yellow); TODO include this            ((ValueView) vitalValues.getChildren().get(0)).update(null, null, "<NO SOURCES>", null, null, 0L, 0L);                Value val = vital.getValues().get(i);                ValueView lbl = (ValueView) vitalValues.getComponent(i);                ice.DeviceIdentity di = vital.getParent().getDeviceIdentity(val.getUniqueDeviceIdentifier());                DeviceIcon dicon = vital.getParent().getDeviceIcon(val.getUniqueDeviceIdentifier()); dicon = null == dicon ? null : new ScaledDeviceIcon(dicon, 0.5);                if (null != di) {                    String s = di.manufacturer.equals(di.model) ? di.manufacturer : (di.manufacturer + " " + di.model);                    lbl.update(val, dicon, s, val.getNumeric(), val.getSampleInfo(), val.getValueMsBelowLow(), val.getValueMsAboveHigh());                } else {                    lbl.update(val, dicon, "", val.getNumeric(), val.getSampleInfo(), val.getValueMsBelowLow(), val.getValueMsAboveHigh());                }This view is the minituare device view on the right hand side.