******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * NOT FOR HUMAN USE
 * 
 * Experimental implementation of Draeger Medibus protocol for blocking I/O.
 * This API gives the caller a simple way to emit protocol commands and receive
 * protocol responses. Out of scope is the particular semantics of the protocol.
 * 
 * It is the responsibility of the caller to create a connection to a Draeger
 * device using a serial port connection or otherwise. Once that connection is
 * established the relevant InputStream and OutputStream should be passed to the
 * constructor.
 * 
 * See the Interoperability Lab demo-devices for an example of how this class
 * can be bound to a physical connection (RS-232) and an example of driving the
 * protocol through its semantics.
 * 
 * sendXXX(...) methods are provided for users of this API to emit commands and
 * receiveXXX(...) methods should be overridden to act on the receipt of
 * response messages.
 * 
 * Consumers of this API should designate a thread to repeatedly run the
 * receive() method as long as the receive() call returns true. When receive()
 * returns false processing has stopped and the connection is no longer viable.
 * 
 * 
 * @author Jeff Plourde
 * 
 *
     * When a consumer of this API has established a connection to a Draeger
     * device they may use this constructor to create a Medibus instance for
     * composing messages to send to the device as well as for parsing received
     * messages.
     * 
     * @param in
     *            Source of data from Draeger device
     * @param out
     *            Destination of data bound for Draeger device
     * @throws IOException 
      partition the slow and fast data fast data have the high order bit set and slow data do not This is an optimization.  Data will be handled in the passes call and there is  not need to enqueue data onto a pipe attribute no value to spaces*
     * Send a command with no arguments
     * 
     * @param commandCode
     *            the commandCode to send
     * @return true if the command was sent
     * @throws IOException
     *
     * Send a Medibus command with the specified argument and the specified
     * timeout.
     * 
     * The semantics of the timeout need work. Currently it represents the
     * maximum amount of time to await an acknowledgment of the prior command.
     * 
     * @param commandCode
     *            instance of types.Command or a Byte indicating a command code
     * @param argument
     *            Arguments for the command cannot exceed 251 bytes
     * @param timeout
     *            in milliseconds, the maximum time to wait for a response or 0L
     *            to wait forever
     * @return true if the command was sent
     * @throws IOException
     *
     * Sends a response to an inbound command
     * 
     * This is called automatically for any command that does not require a
     * special response payload
     * 
     * @param command
     * @param response
     * @throws IOException
     *
     * Sends the ConfigureResponse command with the specified dataTypes as
     * arguments.
     * 
     * @param dataTypes
     * @throws IOException
      TODO this is important TODO this is important This regex is deliberately constructed Sometimes the evitaXL doesn't emit seconds Sometimes the V500 emits no space In October 2014 our EvitaXL started emitting OCT as the month; so I added the english-language equivalents here just in case This shouldn't happen because the regex wouldn't have matched Note the V500 as of 12-Mar-2014 emits "14" as the year leading command and trailing 2byte checksum Take off the checksum bytes and command code from the count 4 = 2byte code, 1 byte length, 1 byte trailing ETX try { sendDeviceIdentification("0161", "ICE", "04.03"); } catch (IOException e) { e.printStackTrace(); } fire this to indicate receipt of the message but no payload EOF The contents of this frame were invalid, but we will continue onto the next frame depending on intended use this might not be a desired behaviour; or perhaps more likely better reporting of this type of error is required. Check digits******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * NOT FOR HUMAN USE
 * 
 * Experimental implementation of Draeger Medibus protocol for blocking I/O.
 * This API gives the caller a simple way to emit protocol commands and receive
 * protocol responses. Out of scope is the particular semantics of the protocol.
 * 
 * It is the responsibility of the caller to create a connection to a Draeger
 * device using a serial port connection or otherwise. Once that connection is
 * established the relevant InputStream and OutputStream should be passed to the
 * constructor.
 * 
 * See the Interoperability Lab demo-devices for an example of how this class
 * can be bound to a physical connection (RS-232) and an example of driving the
 * protocol through its semantics.
 * 
 * sendXXX(...) methods are provided for users of this API to emit commands and
 * receiveXXX(...) methods should be overridden to act on the receipt of
 * response messages.
 * 
 * Consumers of this API should designate a thread to repeatedly run the
 * receive() method as long as the receive() call returns true. When receive()
 * returns false processing has stopped and the connection is no longer viable.
 * 
 * 
 * @author Jeff Plourde
 * 
 *
     * When a consumer of this API has established a connection to a Draeger
     * device they may use this constructor to create a Medibus instance for
     * composing messages to send to the device as well as for parsing received
     * messages.
     * 
     * @param in
     *            Source of data from Draeger device
     * @param out
     *            Destination of data bound for Draeger device
     * @throws IOException 
      partition the slow and fast data fast data have the high order bit set and slow data do not This is an optimization.  Data will be handled in the passes call and there is  not need to enqueue data onto a pipe attribute no value to spaces*
     * Send a command with no arguments
     * 
     * @param commandCode
     *            the commandCode to send
     * @return true if the command was sent
     * @throws IOException
     *
     * Send a Medibus command with the specified argument and the specified
     * timeout.
     * 
     * The semantics of the timeout need work. Currently it represents the
     * maximum amount of time to await an acknowledgment of the prior command.
     * 
     * @param commandCode
     *            instance of types.Command or a Byte indicating a command code
     * @param argument
     *            Arguments for the command cannot exceed 251 bytes
     * @param timeout
     *            in milliseconds, the maximum time to wait for a response or 0L
     *            to wait forever
     * @return true if the command was sent
     * @throws IOException
     *
     * Sends a response to an inbound command
     * 
     * This is called automatically for any command that does not require a
     * special response payload
     * 
     * @param command
     * @param response
     * @throws IOException
     *
     * Sends the ConfigureResponse command with the specified dataTypes as
     * arguments.
     * 
     * @param dataTypes
     * @throws IOException
      TODO this is important TODO this is important This regex is deliberately constructed Sometimes the evitaXL doesn't emit seconds Sometimes the V500 emits no space In October 2014 our EvitaXL started emitting OCT as the month; so I added the english-language equivalents here just in case This shouldn't happen because the regex wouldn't have matched Note the V500 as of 12-Mar-2014 emits "14" as the year leading command and trailing 2byte checksum Take off the checksum bytes and command code from the count 4 = 2byte code, 1 byte length, 1 byte trailing ETX try { sendDeviceIdentification("0161", "ICE", "04.03"); } catch (IOException e) { e.printStackTrace(); } fire this to indicate receipt of the message but no payload EOF The contents of this frame were invalid, but we will continue onto the next frame depending on intended use this might not be a desired behaviour; or perhaps more likely better reporting of this type of error is required. Check digits******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * NOT FOR HUMAN USE
 * 
 * Experimental implementation of Draeger Medibus protocol for blocking I/O.
 * This API gives the caller a simple way to emit protocol commands and receive
 * protocol responses. Out of scope is the particular semantics of the protocol.
 * 
 * It is the responsibility of the caller to create a connection to a Draeger
 * device using a serial port connection or otherwise. Once that connection is
 * established the relevant InputStream and OutputStream should be passed to the
 * constructor.
 * 
 * See the Interoperability Lab demo-devices for an example of how this class
 * can be bound to a physical connection (RS-232) and an example of driving the
 * protocol through its semantics.
 * 
 * sendXXX(...) methods are provided for users of this API to emit commands and
 * receiveXXX(...) methods should be overridden to act on the receipt of
 * response messages.
 * 
 * Consumers of this API should designate a thread to repeatedly run the
 * receive() method as long as the receive() call returns true. When receive()
 * returns false processing has stopped and the connection is no longer viable.
 * 
 * 
 * @author Jeff Plourde
 * 
 *
     * When a consumer of this API has established a connection to a Draeger
     * device they may use this constructor to create a Medibus instance for
     * composing messages to send to the device as well as for parsing received
     * messages.
     * 
     * @param in
     *            Source of data from Draeger device
     * @param out
     *            Destination of data bound for Draeger device
     * @throws IOException 
      partition the slow and fast data fast data have the high order bit set and slow data do not This is an optimization.  Data will be handled in the passes call and there is  not need to enqueue data onto a pipe attribute no value to spaces*
     * Send a command with no arguments
     * 
     * @param commandCode
     *            the commandCode to send
     * @return true if the command was sent
     * @throws IOException
     *
     * Send a Medibus command with the specified argument and the specified
     * timeout.
     * 
     * The semantics of the timeout need work. Currently it represents the
     * maximum amount of time to await an acknowledgment of the prior command.
     * 
     * @param commandCode
     *            instance of types.Command or a Byte indicating a command code
     * @param argument
     *            Arguments for the command cannot exceed 251 bytes
     * @param timeout
     *            in milliseconds, the maximum time to wait for a response or 0L
     *            to wait forever
     * @return true if the command was sent
     * @throws IOException
     *
     * Sends a response to an inbound command
     * 
     * This is called automatically for any command that does not require a
     * special response payload
     * 
     * @param command
     * @param response
     * @throws IOException
     *
     * Sends the ConfigureResponse command with the specified dataTypes as
     * arguments.
     * 
     * @param dataTypes
     * @throws IOException
      TODO this is important TODO this is important This regex is deliberately constructed Sometimes the evitaXL doesn't emit seconds Sometimes the V500 emits no space In October 2014 our EvitaXL started emitting OCT as the month; so I added the english-language equivalents here just in case This shouldn't happen because the regex wouldn't have matched Note the V500 as of 12-Mar-2014 emits "14" as the year leading command and trailing 2byte checksum Take off the checksum bytes and command code from the count 4 = 2byte code, 1 byte length, 1 byte trailing ETX try { sendDeviceIdentification("0161", "ICE", "04.03"); } catch (IOException e) { e.printStackTrace(); } fire this to indicate receipt of the message but no payload EOF The contents of this frame were invalid, but we will continue onto the next frame depending on intended use this might not be a desired behaviour; or perhaps more likely better reporting of this type of error is required. Check digits******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * NOT FOR HUMAN USE
 * 
 * Experimental implementation of Draeger Medibus protocol for blocking I/O.
 * This API gives the caller a simple way to emit protocol commands and receive
 * protocol responses. Out of scope is the particular semantics of the protocol.
 * 
 * It is the responsibility of the caller to create a connection to a Draeger
 * device using a serial port connection or otherwise. Once that connection is
 * established the relevant InputStream and OutputStream should be passed to the
 * constructor.
 * 
 * See the Interoperability Lab demo-devices for an example of how this class
 * can be bound to a physical connection (RS-232) and an example of driving the
 * protocol through its semantics.
 * 
 * sendXXX(...) methods are provided for users of this API to emit commands and
 * receiveXXX(...) methods should be overridden to act on the receipt of
 * response messages.
 * 
 * Consumers of this API should designate a thread to repeatedly run the
 * receive() method as long as the receive() call returns true. When receive()
 * returns false processing has stopped and the connection is no longer viable.
 * 
 * 
 * @author Jeff Plourde
 * 
 *
     * When a consumer of this API has established a connection to a Draeger
     * device they may use this constructor to create a Medibus instance for
     * composing messages to send to the device as well as for parsing received
     * messages.
     * 
     * @param in
     *            Source of data from Draeger device
     * @param out
     *            Destination of data bound for Draeger device
     * @throws IOException 
      partition the slow and fast data fast data have the high order bit set and slow data do not This is an optimization.  Data will be handled in the passes call and there is  not need to enqueue data onto a pipe attribute no value to spaces*
     * Send a command with no arguments
     * 
     * @param commandCode
     *            the commandCode to send
     * @return true if the command was sent
     * @throws IOException
     *
     * Send a Medibus command with the specified argument and the specified
     * timeout.
     * 
     * The semantics of the timeout need work. Currently it represents the
     * maximum amount of time to await an acknowledgment of the prior command.
     * 
     * @param commandCode
     *            instance of types.Command or a Byte indicating a command code
     * @param argument
     *            Arguments for the command cannot exceed 251 bytes
     * @param timeout
     *            in milliseconds, the maximum time to wait for a response or 0L
     *            to wait forever
     * @return true if the command was sent
     * @throws IOException
     *
     * Sends a response to an inbound command
     * 
     * This is called automatically for any command that does not require a
     * special response payload
     * 
     * @param command
     * @param response
     * @throws IOException
     *
     * Sends the ConfigureResponse command with the specified dataTypes as
     * arguments.
     * 
     * @param dataTypes
     * @throws IOException
      TODO this is important TODO this is important This regex is deliberately constructed Sometimes the evitaXL doesn't emit seconds Sometimes the V500 emits no space In October 2014 our EvitaXL started emitting OCT as the month; so I added the english-language equivalents here just in case This shouldn't happen because the regex wouldn't have matched Note the V500 as of 12-Mar-2014 emits "14" as the year leading command and trailing 2byte checksum Take off the checksum bytes and command code from the count 4 = 2byte code, 1 byte length, 1 byte trailing ETX try { sendDeviceIdentification("0161", "ICE", "04.03"); } catch (IOException e) { e.printStackTrace(); } fire this to indicate receipt of the message but no payload EOF The contents of this frame were invalid, but we will continue onto the next frame depending on intended use this might not be a desired behaviour; or perhaps more likely better reporting of this type of error is required. Check digits