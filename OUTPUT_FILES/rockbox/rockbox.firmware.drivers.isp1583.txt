**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Tomasz Malesinski
 * Copyright (C) 2008 by Maurus Cuelenaere
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Select the endpoint  The delay time from the Write Endpoint Index register to the Read Data Port register must be at least 190 ns.
     * The delay time from the Write Endpoint Index register to the Write Data Port register must be at least 100 ns.
      Select the endpoint  The delay time from the Write Endpoint Index register to the Read Data Port register must be at least 190 ns.
     * The delay time from the Write Endpoint Index register to the Write Data Port register must be at least 100 ns.
      clear buffer ...  ... twice because of double buffering  Enable interrupt  Enable endpoint 
static void usb_disable_endpoint(int idx, bool set_struct)
{
    usb_select_endpoint(idx);
    ISP1583_DFLOW_EPTYPE &= ~DFLOW_EPTYPE_ENABLE;
    bc_int_value(&ISP1583_INIT_INTEN_A, &ISP1583_INIT_INTEN_B, ISP1583_INIT_INTEN_READ, 1 << (10 + idx));

    if(set_struct)
        endpoints[epidx_n(idx)].enabled[epidx_dir(idx)] = 0;
}
 Check if type=bulk and double buffering is set  Return true if both buffers are filled  Return true if one of the buffers are filled 
    if (endpoints[n].out_ptr == endpoints[n].out_len
        && len < max_pkt_size)
 Acknowledge packet  currently unused  Disable interrupt at CPU level  Unlock the device's registers  Soft reset the device  Enable CLKAON & GLINTENA  Disable all OTG functions logf("INV0: 0x% IRQEDGE: 0x%x IRQPORT: 0x%x", IO_GIO_INV0, IO_GIO_IRQEDGE, IO_GIO_IRQPORT);Set interrupt generation to target-specific mode +
     * Set the control pipe to ACK only interrupt +
     * Set the IN pipe to ACK only interrupt +
     * Set OUT pipe to ACK and NYET interrupt
      Clear all interrupts  Enable USB interrupts  Enable interrupt at CPU level  Clear device address and disable it  Turn SoftConnect on tick_add_task(usb_helper); Disable device  Disable interrupts  and the CPU's one...  Send usb controller to suspend mode tick_remove_task(usb_helper); 0=>status succeeded, haven't worked out status failed yet...  First implement DMA...  Enable CLKAON & GLINTENA  Enable USB interrupts  Disable all OTG functions  Clear device address and enable it  Reset endpoints to default  Method for handling interrupts, must be called from usb-<target>.c  Unlock the device's registers logf(" handling int [0x%lx & 0x%lx = 0x%x]", ISP1583_GEN_INT_READ, ISP1583_INIT_INTEN_READ, (int)ints); Bus reset  Mask bus reset interrupt  EP0SETUP interrupt  change from full-speed to high-speed mode -> endpoints need to get reconfigured!!  Endpoints interrupt  Resume status: status change from suspend to resume (active)  Suspend status: status change from active to suspend  change in the DMA Interrupt Reason register  transition from LOW to HIGH on VBUS  Mask all (enabled) interrupts  Power cycle... REG_PORTSC1 |= PORTSCX_PTC_PACKET;REG_PORTSC1 |= PORTSCX_PTC_FORCE_EN;**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Tomasz Malesinski
 * Copyright (C) 2008 by Maurus Cuelenaere
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Select the endpoint  The delay time from the Write Endpoint Index register to the Read Data Port register must be at least 190 ns.
     * The delay time from the Write Endpoint Index register to the Write Data Port register must be at least 100 ns.
      Select the endpoint  The delay time from the Write Endpoint Index register to the Read Data Port register must be at least 190 ns.
     * The delay time from the Write Endpoint Index register to the Write Data Port register must be at least 100 ns.
      clear buffer ...  ... twice because of double buffering  Enable interrupt  Enable endpoint 
static void usb_disable_endpoint(int idx, bool set_struct)
{
    usb_select_endpoint(idx);
    ISP1583_DFLOW_EPTYPE &= ~DFLOW_EPTYPE_ENABLE;
    bc_int_value(&ISP1583_INIT_INTEN_A, &ISP1583_INIT_INTEN_B, ISP1583_INIT_INTEN_READ, 1 << (10 + idx));

    if(set_struct)
        endpoints[epidx_n(idx)].enabled[epidx_dir(idx)] = 0;
}
 Check if type=bulk and double buffering is set  Return true if both buffers are filled  Return true if one of the buffers are filled 
    if (endpoints[n].out_ptr == endpoints[n].out_len
        && len < max_pkt_size)
 Acknowledge packet  currently unused  Disable interrupt at CPU level  Unlock the device's registers  Soft reset the device  Enable CLKAON & GLINTENA  Disable all OTG functions logf("INV0: 0x% IRQEDGE: 0x%x IRQPORT: 0x%x", IO_GIO_INV0, IO_GIO_IRQEDGE, IO_GIO_IRQPORT);Set interrupt generation to target-specific mode +
     * Set the control pipe to ACK only interrupt +
     * Set the IN pipe to ACK only interrupt +
     * Set OUT pipe to ACK and NYET interrupt
      Clear all interrupts  Enable USB interrupts  Enable interrupt at CPU level  Clear device address and disable it  Turn SoftConnect on tick_add_task(usb_helper); Disable device  Disable interrupts  and the CPU's one...  Send usb controller to suspend mode tick_remove_task(usb_helper); 0=>status succeeded, haven't worked out status failed yet...  First implement DMA...  Enable CLKAON & GLINTENA  Enable USB interrupts  Disable all OTG functions  Clear device address and enable it  Reset endpoints to default  Method for handling interrupts, must be called from usb-<target>.c  Unlock the device's registers logf(" handling int [0x%lx & 0x%lx = 0x%x]", ISP1583_GEN_INT_READ, ISP1583_INIT_INTEN_READ, (int)ints); Bus reset  Mask bus reset interrupt  EP0SETUP interrupt  change from full-speed to high-speed mode -> endpoints need to get reconfigured!!  Endpoints interrupt  Resume status: status change from suspend to resume (active)  Suspend status: status change from active to suspend  change in the DMA Interrupt Reason register  transition from LOW to HIGH on VBUS  Mask all (enabled) interrupts  Power cycle... REG_PORTSC1 |= PORTSCX_PTC_PACKET;REG_PORTSC1 |= PORTSCX_PTC_FORCE_EN;**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Tomasz Malesinski
 * Copyright (C) 2008 by Maurus Cuelenaere
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Select the endpoint  The delay time from the Write Endpoint Index register to the Read Data Port register must be at least 190 ns.
     * The delay time from the Write Endpoint Index register to the Write Data Port register must be at least 100 ns.
      Select the endpoint  The delay time from the Write Endpoint Index register to the Read Data Port register must be at least 190 ns.
     * The delay time from the Write Endpoint Index register to the Write Data Port register must be at least 100 ns.
      clear buffer ...  ... twice because of double buffering  Enable interrupt  Enable endpoint 
static void usb_disable_endpoint(int idx, bool set_struct)
{
    usb_select_endpoint(idx);
    ISP1583_DFLOW_EPTYPE &= ~DFLOW_EPTYPE_ENABLE;
    bc_int_value(&ISP1583_INIT_INTEN_A, &ISP1583_INIT_INTEN_B, ISP1583_INIT_INTEN_READ, 1 << (10 + idx));

    if(set_struct)
        endpoints[epidx_n(idx)].enabled[epidx_dir(idx)] = 0;
}
 Check if type=bulk and double buffering is set  Return true if both buffers are filled  Return true if one of the buffers are filled 
    if (endpoints[n].out_ptr == endpoints[n].out_len
        && len < max_pkt_size)
 Acknowledge packet  currently unused  Disable interrupt at CPU level  Unlock the device's registers  Soft reset the device  Enable CLKAON & GLINTENA  Disable all OTG functions logf("INV0: 0x% IRQEDGE: 0x%x IRQPORT: 0x%x", IO_GIO_INV0, IO_GIO_IRQEDGE, IO_GIO_IRQPORT);Set interrupt generation to target-specific mode +
     * Set the control pipe to ACK only interrupt +
     * Set the IN pipe to ACK only interrupt +
     * Set OUT pipe to ACK and NYET interrupt
      Clear all interrupts  Enable USB interrupts  Enable interrupt at CPU level  Clear device address and disable it  Turn SoftConnect on tick_add_task(usb_helper); Disable device  Disable interrupts  and the CPU's one...  Send usb controller to suspend mode tick_remove_task(usb_helper); 0=>status succeeded, haven't worked out status failed yet...  First implement DMA...  Enable CLKAON & GLINTENA  Enable USB interrupts  Disable all OTG functions  Clear device address and enable it  Reset endpoints to default  Method for handling interrupts, must be called from usb-<target>.c  Unlock the device's registers logf(" handling int [0x%lx & 0x%lx = 0x%x]", ISP1583_GEN_INT_READ, ISP1583_INIT_INTEN_READ, (int)ints); Bus reset  Mask bus reset interrupt  EP0SETUP interrupt  change from full-speed to high-speed mode -> endpoints need to get reconfigured!!  Endpoints interrupt  Resume status: status change from suspend to resume (active)  Suspend status: status change from active to suspend  change in the DMA Interrupt Reason register  transition from LOW to HIGH on VBUS  Mask all (enabled) interrupts  Power cycle... REG_PORTSC1 |= PORTSCX_PTC_PACKET;REG_PORTSC1 |= PORTSCX_PTC_FORCE_EN;