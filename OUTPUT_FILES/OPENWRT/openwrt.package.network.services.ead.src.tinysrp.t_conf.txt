
 * Copyright (c) 1997-1999  The Stanford SRP Authentication Project
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL STANFORD BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following conditions apply:
 *
 * 1. Any software that incorporates the SRP authentication technology
 *    must display the following acknowlegment:
 *    "This product uses the 'Secure Remote Password' cryptographic
 *     authentication system developed by Tom Wu (tjw@CS.Stanford.EDU)."
 *
 * 2. Any software that incorporates all or part of the SRP distribution
 *    itself must also display the following acknowledgment:
 *    "This product includes software developed by Tom Wu and Eugene
 *     Jhong for the SRP Distribution (http://srp.stanford.edu/srp/)."
 *
 * 3. Redistributions in source or binary form must retain an intact copy
 *    of this copyright notice and list of conditions.
 
 * This is the safe prime generation logic.
 * To generate a safe prime p (where p = 2q+1 and q is prime), we start
 * with a random odd q that is one bit shorter than the desired length
 * of p.  We use a simple 30-element sieve to filter the values of q
 * and consider only those that are 11, 23, or 29 (mod 30).  (If q were
 * anything else, either q or p would be divisible by 2, 3, or 5).
 * For the values of q that are left, we apply the following tests in
 * this order:
 *
 *   trial divide q
 *   let p = 2q + 1
 *   trial divide p
 *   apply Fermat test to q (2^q == 2 (mod q))
 *   apply Fermat test to p (2^p == 2 (mod p))
 *   apply real probablistic primality test to q
 *   apply real probablistic primality test to p
 *
 * A number that passes all these tests is considered a safe prime for
 * our purposes.  The tests are ordered this way for efficiency; the
 * slower tests are run rarely if ever at all.
  All odd primes < 256  x + sieve30[x%30] == 11, 23, or 29 (mod 30)  Find a Sophie-Germain prime between "lo" and "hi".  NOTE: this is not
   a "safe prime", but the smaller prime.  Take 2q+1 to get the safe prime.  assumed initialized  make q odd  mod30 = q % 30  m = 2  p = 2 * q  p += 1  r = 2^q % q  if(r == 2)  r = 2^p % p  if(r == 2)  q += i  should wrap around on failure  u = 1  t = 2^(nsize-2)  u = 2^(nsize-1)  Look for a generator mod n  t = g^q % n  if(t == 1)  ++g  t = 1  u = t*2^(psize-3) = 2^(psize-3)  t = 3*u = 1.5*2^(psize-2)  u += t [u = 2^(psize-1)]  t = 1  u = t*2^(qsize-3) = 2^(qsize-3)  t = 3*u = 1.5*2^(qsize-2)  u += t [u = 2^(qsize-1)]  p = 2 * j  p += 1  q = 2 * k  q += 1  n = p * q  u = j * k  g = 2  Look for a generator mod n  t = g^u % n  ++g  taken from ctx  first look for small factors  A := abs(a)  compute A1 := A - 1  write  A1  as  A1_odd * 2^k  Montgomery setup for computations mod A  now 1 <= check < A  w := w^a1_odd mod a  probably prime  w == -1 (mod a),  'a' is probably prime  w := w^2 mod a  'a' is composite, otherwise a previous 'w' would
				   * have been == -1 (mod 'a')  w == -1 (mod a), 'a' is probably prime  If we get here, 'w' is the (a-1)/2-th power of the original 'w',
	 * and it is neither -1 nor +1 -- so 'a' cannot be prime  If this is not done, things will break in the montgomery
	 * part  1  2  This is used to avoid multiplication etc
			 * when there is only the value '1' in the
			 * buffer.  The 'value' of the window  The top bit of the window  The bottom bit of the window  We now have wstart on a 'set' bit, we now need to work out
		 * how bit a window to do.  To do this we need to scan
		 * forward until the last set bit before the end of the
		 * window  wend is the size of the current window  add the 'bytes above'  wvalue will be an odd number < 2^window  move the 'window' down further  make a random number and set the top and bottom bits  this ignores the pseudorand flag  set bottom bits to whatever odd is  BN_pseudo_rand is the same as BN_rand, now.  use the faster word-based algorithm  reduce from aRR to aR  mont->ri is the size of mont->N in bits (rounded up
	   to the word size)  allow for overflow (no?) XXX  clear the top words of T  memset? XXX  mont->ri will be a multiple of the word size  !MONT_WORD  MONT_WORD  grab RR as a temp  Set N  R  tmod = N mod word size  Ri = R^-1 mod N R*Ri  if N mod word size == 1  Ri-- (mod word size)  Ni = (R*Ri-1)/N,
						 * keep only least significant word:  !MONT_WORD  bignum version  R = 2^ri  Ri = R^-1 mod N R*Ri  Ni = (R*Ri-1) / N  setup RR for conversions  solves ax == 1 (mod n)  T has a struct, M does not 
 * Copyright (c) 1997-1999  The Stanford SRP Authentication Project
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL STANFORD BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following conditions apply:
 *
 * 1. Any software that incorporates the SRP authentication technology
 *    must display the following acknowlegment:
 *    "This product uses the 'Secure Remote Password' cryptographic
 *     authentication system developed by Tom Wu (tjw@CS.Stanford.EDU)."
 *
 * 2. Any software that incorporates all or part of the SRP distribution
 *    itself must also display the following acknowledgment:
 *    "This product includes software developed by Tom Wu and Eugene
 *     Jhong for the SRP Distribution (http://srp.stanford.edu/srp/)."
 *
 * 3. Redistributions in source or binary form must retain an intact copy
 *    of this copyright notice and list of conditions.
 
 * This is the safe prime generation logic.
 * To generate a safe prime p (where p = 2q+1 and q is prime), we start
 * with a random odd q that is one bit shorter than the desired length
 * of p.  We use a simple 30-element sieve to filter the values of q
 * and consider only those that are 11, 23, or 29 (mod 30).  (If q were
 * anything else, either q or p would be divisible by 2, 3, or 5).
 * For the values of q that are left, we apply the following tests in
 * this order:
 *
 *   trial divide q
 *   let p = 2q + 1
 *   trial divide p
 *   apply Fermat test to q (2^q == 2 (mod q))
 *   apply Fermat test to p (2^p == 2 (mod p))
 *   apply real probablistic primality test to q
 *   apply real probablistic primality test to p
 *
 * A number that passes all these tests is considered a safe prime for
 * our purposes.  The tests are ordered this way for efficiency; the
 * slower tests are run rarely if ever at all.
  All odd primes < 256  x + sieve30[x%30] == 11, 23, or 29 (mod 30)  Find a Sophie-Germain prime between "lo" and "hi".  NOTE: this is not
   a "safe prime", but the smaller prime.  Take 2q+1 to get the safe prime.  assumed initialized  make q odd  mod30 = q % 30  m = 2  p = 2 * q  p += 1  r = 2^q % q  if(r == 2)  r = 2^p % p  if(r == 2)  q += i  should wrap around on failure  u = 1  t = 2^(nsize-2)  u = 2^(nsize-1)  Look for a generator mod n  t = g^q % n  if(t == 1)  ++g  t = 1  u = t*2^(psize-3) = 2^(psize-3)  t = 3*u = 1.5*2^(psize-2)  u += t [u = 2^(psize-1)]  t = 1  u = t*2^(qsize-3) = 2^(qsize-3)  t = 3*u = 1.5*2^(qsize-2)  u += t [u = 2^(qsize-1)]  p = 2 * j  p += 1  q = 2 * k  q += 1  n = p * q  u = j * k  g = 2  Look for a generator mod n  t = g^u % n  ++g  taken from ctx  first look for small factors  A := abs(a)  compute A1 := A - 1  write  A1  as  A1_odd * 2^k  Montgomery setup for computations mod A  now 1 <= check < A  w := w^a1_odd mod a  probably prime  w == -1 (mod a),  'a' is probably prime  w := w^2 mod a  'a' is composite, otherwise a previous 'w' would
				   * have been == -1 (mod 'a')  w == -1 (mod a), 'a' is probably prime  If we get here, 'w' is the (a-1)/2-th power of the original 'w',
	 * and it is neither -1 nor +1 -- so 'a' cannot be prime  If this is not done, things will break in the montgomery
	 * part  1  2  This is used to avoid multiplication etc
			 * when there is only the value '1' in the
			 * buffer.  The 'value' of the window  The top bit of the window  The bottom bit of the window  We now have wstart on a 'set' bit, we now need to work out
		 * how bit a window to do.  To do this we need to scan
		 * forward until the last set bit before the end of the
		 * window  wend is the size of the current window  add the 'bytes above'  wvalue will be an odd number < 2^window  move the 'window' down further  make a random number and set the top and bottom bits  this ignores the pseudorand flag  set bottom bits to whatever odd is  BN_pseudo_rand is the same as BN_rand, now.  use the faster word-based algorithm  reduce from aRR to aR  mont->ri is the size of mont->N in bits (rounded up
	   to the word size)  allow for overflow (no?) XXX  clear the top words of T  memset? XXX  mont->ri will be a multiple of the word size  !MONT_WORD  MONT_WORD  grab RR as a temp  Set N  R  tmod = N mod word size  Ri = R^-1 mod N R*Ri  if N mod word size == 1  Ri-- (mod word size)  Ni = (R*Ri-1)/N,
						 * keep only least significant word:  !MONT_WORD  bignum version  R = 2^ri  Ri = R^-1 mod N R*Ri  Ni = (R*Ri-1) / N  setup RR for conversions  solves ax == 1 (mod n)  T has a struct, M does not 
 * Copyright (c) 1997-1999  The Stanford SRP Authentication Project
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL STANFORD BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following conditions apply:
 *
 * 1. Any software that incorporates the SRP authentication technology
 *    must display the following acknowlegment:
 *    "This product uses the 'Secure Remote Password' cryptographic
 *     authentication system developed by Tom Wu (tjw@CS.Stanford.EDU)."
 *
 * 2. Any software that incorporates all or part of the SRP distribution
 *    itself must also display the following acknowledgment:
 *    "This product includes software developed by Tom Wu and Eugene
 *     Jhong for the SRP Distribution (http://srp.stanford.edu/srp/)."
 *
 * 3. Redistributions in source or binary form must retain an intact copy
 *    of this copyright notice and list of conditions.
 
 * This is the safe prime generation logic.
 * To generate a safe prime p (where p = 2q+1 and q is prime), we start
 * with a random odd q that is one bit shorter than the desired length
 * of p.  We use a simple 30-element sieve to filter the values of q
 * and consider only those that are 11, 23, or 29 (mod 30).  (If q were
 * anything else, either q or p would be divisible by 2, 3, or 5).
 * For the values of q that are left, we apply the following tests in
 * this order:
 *
 *   trial divide q
 *   let p = 2q + 1
 *   trial divide p
 *   apply Fermat test to q (2^q == 2 (mod q))
 *   apply Fermat test to p (2^p == 2 (mod p))
 *   apply real probablistic primality test to q
 *   apply real probablistic primality test to p
 *
 * A number that passes all these tests is considered a safe prime for
 * our purposes.  The tests are ordered this way for efficiency; the
 * slower tests are run rarely if ever at all.
  All odd primes < 256  x + sieve30[x%30] == 11, 23, or 29 (mod 30)  Find a Sophie-Germain prime between "lo" and "hi".  NOTE: this is not
   a "safe prime", but the smaller prime.  Take 2q+1 to get the safe prime.  assumed initialized  make q odd  mod30 = q % 30  m = 2  p = 2 * q  p += 1  r = 2^q % q  if(r == 2)  r = 2^p % p  if(r == 2)  q += i  should wrap around on failure  u = 1  t = 2^(nsize-2)  u = 2^(nsize-1)  Look for a generator mod n  t = g^q % n  if(t == 1)  ++g  t = 1  u = t*2^(psize-3) = 2^(psize-3)  t = 3*u = 1.5*2^(psize-2)  u += t [u = 2^(psize-1)]  t = 1  u = t*2^(qsize-3) = 2^(qsize-3)  t = 3*u = 1.5*2^(qsize-2)  u += t [u = 2^(qsize-1)]  p = 2 * j  p += 1  q = 2 * k  q += 1  n = p * q  u = j * k  g = 2  Look for a generator mod n  t = g^u % n  ++g  taken from ctx  first look for small factors  A := abs(a)  compute A1 := A - 1  write  A1  as  A1_odd * 2^k  Montgomery setup for computations mod A  now 1 <= check < A  w := w^a1_odd mod a  probably prime  w == -1 (mod a),  'a' is probably prime  w := w^2 mod a  'a' is composite, otherwise a previous 'w' would
				   * have been == -1 (mod 'a')  w == -1 (mod a), 'a' is probably prime  If we get here, 'w' is the (a-1)/2-th power of the original 'w',
	 * and it is neither -1 nor +1 -- so 'a' cannot be prime  If this is not done, things will break in the montgomery
	 * part  1  2  This is used to avoid multiplication etc
			 * when there is only the value '1' in the
			 * buffer.  The 'value' of the window  The top bit of the window  The bottom bit of the window  We now have wstart on a 'set' bit, we now need to work out
		 * how bit a window to do.  To do this we need to scan
		 * forward until the last set bit before the end of the
		 * window  wend is the size of the current window  add the 'bytes above'  wvalue will be an odd number < 2^window  move the 'window' down further  make a random number and set the top and bottom bits  this ignores the pseudorand flag  set bottom bits to whatever odd is  BN_pseudo_rand is the same as BN_rand, now.  use the faster word-based algorithm  reduce from aRR to aR  mont->ri is the size of mont->N in bits (rounded up
	   to the word size)  allow for overflow (no?) XXX  clear the top words of T  memset? XXX  mont->ri will be a multiple of the word size  !MONT_WORD  MONT_WORD  grab RR as a temp  Set N  R  tmod = N mod word size  Ri = R^-1 mod N R*Ri  if N mod word size == 1  Ri-- (mod word size)  Ni = (R*Ri-1)/N,
						 * keep only least significant word:  !MONT_WORD  bignum version  R = 2^ri  Ri = R^-1 mod N R*Ri  Ni = (R*Ri-1) / N  setup RR for conversions  solves ax == 1 (mod n)  T has a struct, M does not 
 * Copyright (c) 1997-1999  The Stanford SRP Authentication Project
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL STANFORD BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following conditions apply:
 *
 * 1. Any software that incorporates the SRP authentication technology
 *    must display the following acknowlegment:
 *    "This product uses the 'Secure Remote Password' cryptographic
 *     authentication system developed by Tom Wu (tjw@CS.Stanford.EDU)."
 *
 * 2. Any software that incorporates all or part of the SRP distribution
 *    itself must also display the following acknowledgment:
 *    "This product includes software developed by Tom Wu and Eugene
 *     Jhong for the SRP Distribution (http://srp.stanford.edu/srp/)."
 *
 * 3. Redistributions in source or binary form must retain an intact copy
 *    of this copyright notice and list of conditions.
 
 * This is the safe prime generation logic.
 * To generate a safe prime p (where p = 2q+1 and q is prime), we start
 * with a random odd q that is one bit shorter than the desired length
 * of p.  We use a simple 30-element sieve to filter the values of q
 * and consider only those that are 11, 23, or 29 (mod 30).  (If q were
 * anything else, either q or p would be divisible by 2, 3, or 5).
 * For the values of q that are left, we apply the following tests in
 * this order:
 *
 *   trial divide q
 *   let p = 2q + 1
 *   trial divide p
 *   apply Fermat test to q (2^q == 2 (mod q))
 *   apply Fermat test to p (2^p == 2 (mod p))
 *   apply real probablistic primality test to q
 *   apply real probablistic primality test to p
 *
 * A number that passes all these tests is considered a safe prime for
 * our purposes.  The tests are ordered this way for efficiency; the
 * slower tests are run rarely if ever at all.
  All odd primes < 256  x + sieve30[x%30] == 11, 23, or 29 (mod 30)  Find a Sophie-Germain prime between "lo" and "hi".  NOTE: this is not
   a "safe prime", but the smaller prime.  Take 2q+1 to get the safe prime.  assumed initialized  make q odd  mod30 = q % 30  m = 2  p = 2 * q  p += 1  r = 2^q % q  if(r == 2)  r = 2^p % p  if(r == 2)  q += i  should wrap around on failure  u = 1  t = 2^(nsize-2)  u = 2^(nsize-1)  Look for a generator mod n  t = g^q % n  if(t == 1)  ++g  t = 1  u = t*2^(psize-3) = 2^(psize-3)  t = 3*u = 1.5*2^(psize-2)  u += t [u = 2^(psize-1)]  t = 1  u = t*2^(qsize-3) = 2^(qsize-3)  t = 3*u = 1.5*2^(qsize-2)  u += t [u = 2^(qsize-1)]  p = 2 * j  p += 1  q = 2 * k  q += 1  n = p * q  u = j * k  g = 2  Look for a generator mod n  t = g^u % n  ++g  taken from ctx  first look for small factors  A := abs(a)  compute A1 := A - 1  write  A1  as  A1_odd * 2^k  Montgomery setup for computations mod A  now 1 <= check < A  w := w^a1_odd mod a  probably prime  w == -1 (mod a),  'a' is probably prime  w := w^2 mod a  'a' is composite, otherwise a previous 'w' would
				   * have been == -1 (mod 'a')  w == -1 (mod a), 'a' is probably prime  If we get here, 'w' is the (a-1)/2-th power of the original 'w',
	 * and it is neither -1 nor +1 -- so 'a' cannot be prime  If this is not done, things will break in the montgomery
	 * part  1  2  This is used to avoid multiplication etc
			 * when there is only the value '1' in the
			 * buffer.  The 'value' of the window  The top bit of the window  The bottom bit of the window  We now have wstart on a 'set' bit, we now need to work out
		 * how bit a window to do.  To do this we need to scan
		 * forward until the last set bit before the end of the
		 * window  wend is the size of the current window  add the 'bytes above'  wvalue will be an odd number < 2^window  move the 'window' down further  make a random number and set the top and bottom bits  this ignores the pseudorand flag  set bottom bits to whatever odd is  BN_pseudo_rand is the same as BN_rand, now.  use the faster word-based algorithm  reduce from aRR to aR  mont->ri is the size of mont->N in bits (rounded up
	   to the word size)  allow for overflow (no?) XXX  clear the top words of T  memset? XXX  mont->ri will be a multiple of the word size  !MONT_WORD  MONT_WORD  grab RR as a temp  Set N  R  tmod = N mod word size  Ri = R^-1 mod N R*Ri  if N mod word size == 1  Ri-- (mod word size)  Ni = (R*Ri-1)/N,
						 * keep only least significant word:  !MONT_WORD  bignum version  R = 2^ri  Ri = R^-1 mod N R*Ri  Ni = (R*Ri-1) / N  setup RR for conversions  solves ax == 1 (mod n)  T has a struct, M does not 
 * Copyright (c) 1997-1999  The Stanford SRP Authentication Project
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL STANFORD BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following conditions apply:
 *
 * 1. Any software that incorporates the SRP authentication technology
 *    must display the following acknowlegment:
 *    "This product uses the 'Secure Remote Password' cryptographic
 *     authentication system developed by Tom Wu (tjw@CS.Stanford.EDU)."
 *
 * 2. Any software that incorporates all or part of the SRP distribution
 *    itself must also display the following acknowledgment:
 *    "This product includes software developed by Tom Wu and Eugene
 *     Jhong for the SRP Distribution (http://srp.stanford.edu/srp/)."
 *
 * 3. Redistributions in source or binary form must retain an intact copy
 *    of this copyright notice and list of conditions.
 
 * This is the safe prime generation logic.
 * To generate a safe prime p (where p = 2q+1 and q is prime), we start
 * with a random odd q that is one bit shorter than the desired length
 * of p.  We use a simple 30-element sieve to filter the values of q
 * and consider only those that are 11, 23, or 29 (mod 30).  (If q were
 * anything else, either q or p would be divisible by 2, 3, or 5).
 * For the values of q that are left, we apply the following tests in
 * this order:
 *
 *   trial divide q
 *   let p = 2q + 1
 *   trial divide p
 *   apply Fermat test to q (2^q == 2 (mod q))
 *   apply Fermat test to p (2^p == 2 (mod p))
 *   apply real probablistic primality test to q
 *   apply real probablistic primality test to p
 *
 * A number that passes all these tests is considered a safe prime for
 * our purposes.  The tests are ordered this way for efficiency; the
 * slower tests are run rarely if ever at all.
  All odd primes < 256  x + sieve30[x%30] == 11, 23, or 29 (mod 30)  Find a Sophie-Germain prime between "lo" and "hi".  NOTE: this is not
   a "safe prime", but the smaller prime.  Take 2q+1 to get the safe prime.  assumed initialized  make q odd  mod30 = q % 30  m = 2  p = 2 * q  p += 1  r = 2^q % q  if(r == 2)  r = 2^p % p  if(r == 2)  q += i  should wrap around on failure  u = 1  t = 2^(nsize-2)  u = 2^(nsize-1)  Look for a generator mod n  t = g^q % n  if(t == 1)  ++g  t = 1  u = t*2^(psize-3) = 2^(psize-3)  t = 3*u = 1.5*2^(psize-2)  u += t [u = 2^(psize-1)]  t = 1  u = t*2^(qsize-3) = 2^(qsize-3)  t = 3*u = 1.5*2^(qsize-2)  u += t [u = 2^(qsize-1)]  p = 2 * j  p += 1  q = 2 * k  q += 1  n = p * q  u = j * k  g = 2  Look for a generator mod n  t = g^u % n  ++g  taken from ctx  first look for small factors  A := abs(a)  compute A1 := A - 1  write  A1  as  A1_odd * 2^k  Montgomery setup for computations mod A  now 1 <= check < A  w := w^a1_odd mod a  probably prime  w == -1 (mod a),  'a' is probably prime  w := w^2 mod a  'a' is composite, otherwise a previous 'w' would
				   * have been == -1 (mod 'a')  w == -1 (mod a), 'a' is probably prime  If we get here, 'w' is the (a-1)/2-th power of the original 'w',
	 * and it is neither -1 nor +1 -- so 'a' cannot be prime  If this is not done, things will break in the montgomery
	 * part  1  2  This is used to avoid multiplication etc
			 * when there is only the value '1' in the
			 * buffer.  The 'value' of the window  The top bit of the window  The bottom bit of the window  We now have wstart on a 'set' bit, we now need to work out
		 * how bit a window to do.  To do this we need to scan
		 * forward until the last set bit before the end of the
		 * window  wend is the size of the current window  add the 'bytes above'  wvalue will be an odd number < 2^window  move the 'window' down further  make a random number and set the top and bottom bits  this ignores the pseudorand flag  set bottom bits to whatever odd is  BN_pseudo_rand is the same as BN_rand, now.  use the faster word-based algorithm  reduce from aRR to aR  mont->ri is the size of mont->N in bits (rounded up
	   to the word size)  allow for overflow (no?) XXX  clear the top words of T  memset? XXX  mont->ri will be a multiple of the word size  !MONT_WORD  MONT_WORD  grab RR as a temp  Set N  R  tmod = N mod word size  Ri = R^-1 mod N R*Ri  if N mod word size == 1  Ri-- (mod word size)  Ni = (R*Ri-1)/N,
						 * keep only least significant word:  !MONT_WORD  bignum version  R = 2^ri  Ri = R^-1 mod N R*Ri  Ni = (R*Ri-1) / N  setup RR for conversions  solves ax == 1 (mod n)  T has a struct, M does not 
 * Copyright (c) 1997-1999  The Stanford SRP Authentication Project
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL STANFORD BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following conditions apply:
 *
 * 1. Any software that incorporates the SRP authentication technology
 *    must display the following acknowlegment:
 *    "This product uses the 'Secure Remote Password' cryptographic
 *     authentication system developed by Tom Wu (tjw@CS.Stanford.EDU)."
 *
 * 2. Any software that incorporates all or part of the SRP distribution
 *    itself must also display the following acknowledgment:
 *    "This product includes software developed by Tom Wu and Eugene
 *     Jhong for the SRP Distribution (http://srp.stanford.edu/srp/)."
 *
 * 3. Redistributions in source or binary form must retain an intact copy
 *    of this copyright notice and list of conditions.
 
 * This is the safe prime generation logic.
 * To generate a safe prime p (where p = 2q+1 and q is prime), we start
 * with a random odd q that is one bit shorter than the desired length
 * of p.  We use a simple 30-element sieve to filter the values of q
 * and consider only those that are 11, 23, or 29 (mod 30).  (If q were
 * anything else, either q or p would be divisible by 2, 3, or 5).
 * For the values of q that are left, we apply the following tests in
 * this order:
 *
 *   trial divide q
 *   let p = 2q + 1
 *   trial divide p
 *   apply Fermat test to q (2^q == 2 (mod q))
 *   apply Fermat test to p (2^p == 2 (mod p))
 *   apply real probablistic primality test to q
 *   apply real probablistic primality test to p
 *
 * A number that passes all these tests is considered a safe prime for
 * our purposes.  The tests are ordered this way for efficiency; the
 * slower tests are run rarely if ever at all.
  All odd primes < 256  x + sieve30[x%30] == 11, 23, or 29 (mod 30)  Find a Sophie-Germain prime between "lo" and "hi".  NOTE: this is not
   a "safe prime", but the smaller prime.  Take 2q+1 to get the safe prime.  assumed initialized  make q odd  mod30 = q % 30  m = 2  p = 2 * q  p += 1  r = 2^q % q  if(r == 2)  r = 2^p % p  if(r == 2)  q += i  should wrap around on failure  u = 1  t = 2^(nsize-2)  u = 2^(nsize-1)  Look for a generator mod n  t = g^q % n  if(t == 1)  ++g  t = 1  u = t*2^(psize-3) = 2^(psize-3)  t = 3*u = 1.5*2^(psize-2)  u += t [u = 2^(psize-1)]  t = 1  u = t*2^(qsize-3) = 2^(qsize-3)  t = 3*u = 1.5*2^(qsize-2)  u += t [u = 2^(qsize-1)]  p = 2 * j  p += 1  q = 2 * k  q += 1  n = p * q  u = j * k  g = 2  Look for a generator mod n  t = g^u % n  ++g  taken from ctx  first look for small factors  A := abs(a)  compute A1 := A - 1  write  A1  as  A1_odd * 2^k  Montgomery setup for computations mod A  now 1 <= check < A  w := w^a1_odd mod a  probably prime  w == -1 (mod a),  'a' is probably prime  w := w^2 mod a  'a' is composite, otherwise a previous 'w' would
				   * have been == -1 (mod 'a')  w == -1 (mod a), 'a' is probably prime  If we get here, 'w' is the (a-1)/2-th power of the original 'w',
	 * and it is neither -1 nor +1 -- so 'a' cannot be prime  If this is not done, things will break in the montgomery
	 * part  1  2  This is used to avoid multiplication etc
			 * when there is only the value '1' in the
			 * buffer.  The 'value' of the window  The top bit of the window  The bottom bit of the window  We now have wstart on a 'set' bit, we now need to work out
		 * how bit a window to do.  To do this we need to scan
		 * forward until the last set bit before the end of the
		 * window  wend is the size of the current window  add the 'bytes above'  wvalue will be an odd number < 2^window  move the 'window' down further  make a random number and set the top and bottom bits  this ignores the pseudorand flag  set bottom bits to whatever odd is  BN_pseudo_rand is the same as BN_rand, now.  use the faster word-based algorithm  reduce from aRR to aR  mont->ri is the size of mont->N in bits (rounded up
	   to the word size)  allow for overflow (no?) XXX  clear the top words of T  memset? XXX  mont->ri will be a multiple of the word size  !MONT_WORD  MONT_WORD  grab RR as a temp  Set N  R  tmod = N mod word size  Ri = R^-1 mod N R*Ri  if N mod word size == 1  Ri-- (mod word size)  Ni = (R*Ri-1)/N,
						 * keep only least significant word:  !MONT_WORD  bignum version  R = 2^ri  Ri = R^-1 mod N R*Ri  Ni = (R*Ri-1) / N  setup RR for conversions  solves ax == 1 (mod n)  T has a struct, M does not 
 * Copyright (c) 1997-1999  The Stanford SRP Authentication Project
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL STANFORD BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following conditions apply:
 *
 * 1. Any software that incorporates the SRP authentication technology
 *    must display the following acknowlegment:
 *    "This product uses the 'Secure Remote Password' cryptographic
 *     authentication system developed by Tom Wu (tjw@CS.Stanford.EDU)."
 *
 * 2. Any software that incorporates all or part of the SRP distribution
 *    itself must also display the following acknowledgment:
 *    "This product includes software developed by Tom Wu and Eugene
 *     Jhong for the SRP Distribution (http://srp.stanford.edu/srp/)."
 *
 * 3. Redistributions in source or binary form must retain an intact copy
 *    of this copyright notice and list of conditions.
 
 * This is the safe prime generation logic.
 * To generate a safe prime p (where p = 2q+1 and q is prime), we start
 * with a random odd q that is one bit shorter than the desired length
 * of p.  We use a simple 30-element sieve to filter the values of q
 * and consider only those that are 11, 23, or 29 (mod 30).  (If q were
 * anything else, either q or p would be divisible by 2, 3, or 5).
 * For the values of q that are left, we apply the following tests in
 * this order:
 *
 *   trial divide q
 *   let p = 2q + 1
 *   trial divide p
 *   apply Fermat test to q (2^q == 2 (mod q))
 *   apply Fermat test to p (2^p == 2 (mod p))
 *   apply real probablistic primality test to q
 *   apply real probablistic primality test to p
 *
 * A number that passes all these tests is considered a safe prime for
 * our purposes.  The tests are ordered this way for efficiency; the
 * slower tests are run rarely if ever at all.
  All odd primes < 256  x + sieve30[x%30] == 11, 23, or 29 (mod 30)  Find a Sophie-Germain prime between "lo" and "hi".  NOTE: this is not
   a "safe prime", but the smaller prime.  Take 2q+1 to get the safe prime.  assumed initialized  make q odd  mod30 = q % 30  m = 2  p = 2 * q  p += 1  r = 2^q % q  if(r == 2)  r = 2^p % p  if(r == 2)  q += i  should wrap around on failure  u = 1  t = 2^(nsize-2)  u = 2^(nsize-1)  Look for a generator mod n  t = g^q % n  if(t == 1)  ++g  t = 1  u = t*2^(psize-3) = 2^(psize-3)  t = 3*u = 1.5*2^(psize-2)  u += t [u = 2^(psize-1)]  t = 1  u = t*2^(qsize-3) = 2^(qsize-3)  t = 3*u = 1.5*2^(qsize-2)  u += t [u = 2^(qsize-1)]  p = 2 * j  p += 1  q = 2 * k  q += 1  n = p * q  u = j * k  g = 2  Look for a generator mod n  t = g^u % n  ++g  taken from ctx  first look for small factors  A := abs(a)  compute A1 := A - 1  write  A1  as  A1_odd * 2^k  Montgomery setup for computations mod A  now 1 <= check < A  w := w^a1_odd mod a  probably prime  w == -1 (mod a),  'a' is probably prime  w := w^2 mod a  'a' is composite, otherwise a previous 'w' would
				   * have been == -1 (mod 'a')  w == -1 (mod a), 'a' is probably prime  If we get here, 'w' is the (a-1)/2-th power of the original 'w',
	 * and it is neither -1 nor +1 -- so 'a' cannot be prime  If this is not done, things will break in the montgomery
	 * part  1  2  This is used to avoid multiplication etc
			 * when there is only the value '1' in the
			 * buffer.  The 'value' of the window  The top bit of the window  The bottom bit of the window  We now have wstart on a 'set' bit, we now need to work out
		 * how bit a window to do.  To do this we need to scan
		 * forward until the last set bit before the end of the
		 * window  wend is the size of the current window  add the 'bytes above'  wvalue will be an odd number < 2^window  move the 'window' down further  make a random number and set the top and bottom bits  this ignores the pseudorand flag  set bottom bits to whatever odd is  BN_pseudo_rand is the same as BN_rand, now.  use the faster word-based algorithm  reduce from aRR to aR  mont->ri is the size of mont->N in bits (rounded up
	   to the word size)  allow for overflow (no?) XXX  clear the top words of T  memset? XXX  mont->ri will be a multiple of the word size  !MONT_WORD  MONT_WORD  grab RR as a temp  Set N  R  tmod = N mod word size  Ri = R^-1 mod N R*Ri  if N mod word size == 1  Ri-- (mod word size)  Ni = (R*Ri-1)/N,
						 * keep only least significant word:  !MONT_WORD  bignum version  R = 2^ri  Ri = R^-1 mod N R*Ri  Ni = (R*Ri-1) / N  setup RR for conversions  solves ax == 1 (mod n)  T has a struct, M does not 
 * Copyright (c) 1997-1999  The Stanford SRP Authentication Project
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL STANFORD BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following conditions apply:
 *
 * 1. Any software that incorporates the SRP authentication technology
 *    must display the following acknowlegment:
 *    "This product uses the 'Secure Remote Password' cryptographic
 *     authentication system developed by Tom Wu (tjw@CS.Stanford.EDU)."
 *
 * 2. Any software that incorporates all or part of the SRP distribution
 *    itself must also display the following acknowledgment:
 *    "This product includes software developed by Tom Wu and Eugene
 *     Jhong for the SRP Distribution (http://srp.stanford.edu/srp/)."
 *
 * 3. Redistributions in source or binary form must retain an intact copy
 *    of this copyright notice and list of conditions.
 
 * This is the safe prime generation logic.
 * To generate a safe prime p (where p = 2q+1 and q is prime), we start
 * with a random odd q that is one bit shorter than the desired length
 * of p.  We use a simple 30-element sieve to filter the values of q
 * and consider only those that are 11, 23, or 29 (mod 30).  (If q were
 * anything else, either q or p would be divisible by 2, 3, or 5).
 * For the values of q that are left, we apply the following tests in
 * this order:
 *
 *   trial divide q
 *   let p = 2q + 1
 *   trial divide p
 *   apply Fermat test to q (2^q == 2 (mod q))
 *   apply Fermat test to p (2^p == 2 (mod p))
 *   apply real probablistic primality test to q
 *   apply real probablistic primality test to p
 *
 * A number that passes all these tests is considered a safe prime for
 * our purposes.  The tests are ordered this way for efficiency; the
 * slower tests are run rarely if ever at all.
  All odd primes < 256  x + sieve30[x%30] == 11, 23, or 29 (mod 30)  Find a Sophie-Germain prime between "lo" and "hi".  NOTE: this is not
   a "safe prime", but the smaller prime.  Take 2q+1 to get the safe prime.  assumed initialized  make q odd  mod30 = q % 30  m = 2  p = 2 * q  p += 1  r = 2^q % q  if(r == 2)  r = 2^p % p  if(r == 2)  q += i  should wrap around on failure  u = 1  t = 2^(nsize-2)  u = 2^(nsize-1)  Look for a generator mod n  t = g^q % n  if(t == 1)  ++g  t = 1  u = t*2^(psize-3) = 2^(psize-3)  t = 3*u = 1.5*2^(psize-2)  u += t [u = 2^(psize-1)]  t = 1  u = t*2^(qsize-3) = 2^(qsize-3)  t = 3*u = 1.5*2^(qsize-2)  u += t [u = 2^(qsize-1)]  p = 2 * j  p += 1  q = 2 * k  q += 1  n = p * q  u = j * k  g = 2  Look for a generator mod n  t = g^u % n  ++g  taken from ctx  first look for small factors  A := abs(a)  compute A1 := A - 1  write  A1  as  A1_odd * 2^k  Montgomery setup for computations mod A  now 1 <= check < A  w := w^a1_odd mod a  probably prime  w == -1 (mod a),  'a' is probably prime  w := w^2 mod a  'a' is composite, otherwise a previous 'w' would
				   * have been == -1 (mod 'a')  w == -1 (mod a), 'a' is probably prime  If we get here, 'w' is the (a-1)/2-th power of the original 'w',
	 * and it is neither -1 nor +1 -- so 'a' cannot be prime  If this is not done, things will break in the montgomery
	 * part  1  2  This is used to avoid multiplication etc
			 * when there is only the value '1' in the
			 * buffer.  The 'value' of the window  The top bit of the window  The bottom bit of the window  We now have wstart on a 'set' bit, we now need to work out
		 * how bit a window to do.  To do this we need to scan
		 * forward until the last set bit before the end of the
		 * window  wend is the size of the current window  add the 'bytes above'  wvalue will be an odd number < 2^window  move the 'window' down further  make a random number and set the top and bottom bits  this ignores the pseudorand flag  set bottom bits to whatever odd is  BN_pseudo_rand is the same as BN_rand, now.  use the faster word-based algorithm  reduce from aRR to aR  mont->ri is the size of mont->N in bits (rounded up
	   to the word size)  allow for overflow (no?) XXX  clear the top words of T  memset? XXX  mont->ri will be a multiple of the word size  !MONT_WORD  MONT_WORD  grab RR as a temp  Set N  R  tmod = N mod word size  Ri = R^-1 mod N R*Ri  if N mod word size == 1  Ri-- (mod word size)  Ni = (R*Ri-1)/N,
						 * keep only least significant word:  !MONT_WORD  bignum version  R = 2^ri  Ri = R^-1 mod N R*Ri  Ni = (R*Ri-1) / N  setup RR for conversions  solves ax == 1 (mod n)  T has a struct, M does not 