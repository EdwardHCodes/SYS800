**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Maurus Cuelenaere
 *
 * 32-bit MIPS threading support
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************---------------------------------------------------------------------------
 * Start the thread running and terminate it if it returns
 *---------------------------------------------------------------------------
  Provide C access to ASM label  t1 = context  Fetch thread function pointer ($8 = t0, $9 = t1)  Set initial sp(=$29)  Start the thread  Clear start address  Place context pointer in s0 slot, function pointer in s1 slot, and
 * start_thread pointer in context_start ---------------------------------------------------------------------------
 * Store non-volatile context.
 *---------------------------------------------------------------------------
  Store addr in clobbered t0 othrewise
                                    * compiler could select %0 to be s0-s7
                                    * during inlining which would break
                                    * things horribly.
                                     s0  s1  s2  s3  s4  s5  s6  s7  fp  sp  ra ---------------------------------------------------------------------------
 * Load non-volatile context.
 *---------------------------------------------------------------------------
  Get start address ($8 = t0)  NULL -> already running  t1 = context  Store addr in clobbered t0 otherwise
                                    * compiler could select %0 to be s0-s7
                                    * during inlining which would break
                                    * things horribly.
                                     s0  s1  s2  s3  s4  s5  s6  s7  fp  sp  ra **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Maurus Cuelenaere
 *
 * 32-bit MIPS threading support
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************---------------------------------------------------------------------------
 * Start the thread running and terminate it if it returns
 *---------------------------------------------------------------------------
  Provide C access to ASM label  t1 = context  Fetch thread function pointer ($8 = t0, $9 = t1)  Set initial sp(=$29)  Start the thread  Clear start address  Place context pointer in s0 slot, function pointer in s1 slot, and
 * start_thread pointer in context_start ---------------------------------------------------------------------------
 * Store non-volatile context.
 *---------------------------------------------------------------------------
  Store addr in clobbered t0 othrewise
                                    * compiler could select %0 to be s0-s7
                                    * during inlining which would break
                                    * things horribly.
                                     s0  s1  s2  s3  s4  s5  s6  s7  fp  sp  ra ---------------------------------------------------------------------------
 * Load non-volatile context.
 *---------------------------------------------------------------------------
  Get start address ($8 = t0)  NULL -> already running  t1 = context  Store addr in clobbered t0 otherwise
                                    * compiler could select %0 to be s0-s7
                                    * during inlining which would break
                                    * things horribly.
                                     s0  s1  s2  s3  s4  s5  s6  s7  fp  sp  ra **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Maurus Cuelenaere
 *
 * 32-bit MIPS threading support
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************---------------------------------------------------------------------------
 * Start the thread running and terminate it if it returns
 *---------------------------------------------------------------------------
  Provide C access to ASM label  t1 = context  Fetch thread function pointer ($8 = t0, $9 = t1)  Set initial sp(=$29)  Start the thread  Clear start address  Place context pointer in s0 slot, function pointer in s1 slot, and
 * start_thread pointer in context_start ---------------------------------------------------------------------------
 * Store non-volatile context.
 *---------------------------------------------------------------------------
  Store addr in clobbered t0 othrewise
                                    * compiler could select %0 to be s0-s7
                                    * during inlining which would break
                                    * things horribly.
                                     s0  s1  s2  s3  s4  s5  s6  s7  fp  sp  ra ---------------------------------------------------------------------------
 * Load non-volatile context.
 *---------------------------------------------------------------------------
  Get start address ($8 = t0)  NULL -> already running  t1 = context  Store addr in clobbered t0 otherwise
                                    * compiler could select %0 to be s0-s7
                                    * during inlining which would break
                                    * things horribly.
                                     s0  s1  s2  s3  s4  s5  s6  s7  fp  sp  ra 