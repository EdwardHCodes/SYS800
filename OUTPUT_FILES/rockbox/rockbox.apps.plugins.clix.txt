**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008-2009 Rene Peinthor
 * Contribution from Johannes Schwarz (new menu system, use of highscore lib)
 *
 * All files in this archive are subject to the GNU General Public License.
 * See the file COPYING in the source tree root for full license agreement.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** current level  current game score  current positions of the cursor  play board state of selected fields,maybe we can store this in the play board too  true if selected CELLS are currently white  game state enum  cell color enum   recursive function to check if a neighbour cell is of the same color
    if so call the function with the neighbours position
 updates "blinking" cells by finding out which one is a valid neighbours  recursion starts here  inits the board with new random colors according to the level  create a random colored board, according to the current level  this inits the game state structure  Function for drawing a cell  draw cursor  main function of drawing the whole board and score...  Clear screen  returns the color of the given position, if out of bounds return CC_BLACK  clear the selected blocks  count score  let blocks falling down  move columns to left side   check if a move is still possible, otherwise the game is over.
            tart from the left bottom, because there are the last fields
            at the end of the game.
         if the loops ended without a possible move, the game is over  set cursor to the right position  prevent repeating clicks  number of ticks this function will loop reading keys  this is the plugin entry point **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008-2009 Rene Peinthor
 * Contribution from Johannes Schwarz (new menu system, use of highscore lib)
 *
 * All files in this archive are subject to the GNU General Public License.
 * See the file COPYING in the source tree root for full license agreement.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** current level  current game score  current positions of the cursor  play board state of selected fields,maybe we can store this in the play board too  true if selected CELLS are currently white  game state enum  cell color enum   recursive function to check if a neighbour cell is of the same color
    if so call the function with the neighbours position
 updates "blinking" cells by finding out which one is a valid neighbours  recursion starts here  inits the board with new random colors according to the level  create a random colored board, according to the current level  this inits the game state structure  Function for drawing a cell  draw cursor  main function of drawing the whole board and score...  Clear screen  returns the color of the given position, if out of bounds return CC_BLACK  clear the selected blocks  count score  let blocks falling down  move columns to left side   check if a move is still possible, otherwise the game is over.
            tart from the left bottom, because there are the last fields
            at the end of the game.
         if the loops ended without a possible move, the game is over  set cursor to the right position  prevent repeating clicks  number of ticks this function will loop reading keys  this is the plugin entry point **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008-2009 Rene Peinthor
 * Contribution from Johannes Schwarz (new menu system, use of highscore lib)
 *
 * All files in this archive are subject to the GNU General Public License.
 * See the file COPYING in the source tree root for full license agreement.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** current level  current game score  current positions of the cursor  play board state of selected fields,maybe we can store this in the play board too  true if selected CELLS are currently white  game state enum  cell color enum   recursive function to check if a neighbour cell is of the same color
    if so call the function with the neighbours position
 updates "blinking" cells by finding out which one is a valid neighbours  recursion starts here  inits the board with new random colors according to the level  create a random colored board, according to the current level  this inits the game state structure  Function for drawing a cell  draw cursor  main function of drawing the whole board and score...  Clear screen  returns the color of the given position, if out of bounds return CC_BLACK  clear the selected blocks  count score  let blocks falling down  move columns to left side   check if a move is still possible, otherwise the game is over.
            tart from the left bottom, because there are the last fields
            at the end of the game.
         if the loops ended without a possible move, the game is over  set cursor to the right position  prevent repeating clicks  number of ticks this function will loop reading keys  this is the plugin entry point 