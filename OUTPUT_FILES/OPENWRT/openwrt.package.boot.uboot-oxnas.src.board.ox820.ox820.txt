 Reset UART1  Setup pin mux'ing for UART1  DEBUG  DEBUG  Set the stack pointer.  Clear the BSS.  Set global data pointer.  break into full u-boot on 'c'  print a hint, so that we will not use the wrong SPL by mistake  quick and dirty memory allocation  CONFIG_SPL_BUILD  framework will reset the chip anyway  framework will provide a default one  dev_ready is optional  Block reset Static core  Enable clock to Static core  enable flash support on static bus.
	 * Enable static bus onto GPIOs, only CS0  Setup the static bus CS0 to access FLASH  assume uart is already initialized by SPL  copied from board/evb64260/sdram_init.c 
 * Check memory range for valid RAM. A simple memory test determines
 * the actually available RAM size between addresses `base' and
 * `base + maxsize'. Some (not all) hardware errors are detected:
 * - short between address lines
 * - short between data lines
  start test at half size  pointer arith!  save contents of addr  save contents of base  write cnt to addr  put null at base  check at base address  restore *addr  restore *b  read *addr  fix boundary condition.. STARTVAL means zero  set the pin multiplexers to enable talking to Ethernent Phys  Ensure the MAC block is properly reset Enable the clock to the MAC block Use simple mux for 25/125 Mhz clock switching  Enable GMII_GTXCLK to follow GMII_REFCLK - required for gigabit PHY  set auto tx speed  Reset UART1  Setup pin mux'ing for UART1  DEBUG  DEBUG  Set the stack pointer.  Clear the BSS.  Set global data pointer.  break into full u-boot on 'c'  print a hint, so that we will not use the wrong SPL by mistake  quick and dirty memory allocation  CONFIG_SPL_BUILD  framework will reset the chip anyway  framework will provide a default one  dev_ready is optional  Block reset Static core  Enable clock to Static core  enable flash support on static bus.
	 * Enable static bus onto GPIOs, only CS0  Setup the static bus CS0 to access FLASH  assume uart is already initialized by SPL  copied from board/evb64260/sdram_init.c 
 * Check memory range for valid RAM. A simple memory test determines
 * the actually available RAM size between addresses `base' and
 * `base + maxsize'. Some (not all) hardware errors are detected:
 * - short between address lines
 * - short between data lines
  start test at half size  pointer arith!  save contents of addr  save contents of base  write cnt to addr  put null at base  check at base address  restore *addr  restore *b  read *addr  fix boundary condition.. STARTVAL means zero  set the pin multiplexers to enable talking to Ethernent Phys  Ensure the MAC block is properly reset Enable the clock to the MAC block Use simple mux for 25/125 Mhz clock switching  Enable GMII_GTXCLK to follow GMII_REFCLK - required for gigabit PHY  set auto tx speed  Reset UART1  Setup pin mux'ing for UART1  DEBUG  DEBUG  Set the stack pointer.  Clear the BSS.  Set global data pointer.  break into full u-boot on 'c'  print a hint, so that we will not use the wrong SPL by mistake  quick and dirty memory allocation  CONFIG_SPL_BUILD  framework will reset the chip anyway  framework will provide a default one  dev_ready is optional  Block reset Static core  Enable clock to Static core  enable flash support on static bus.
	 * Enable static bus onto GPIOs, only CS0  Setup the static bus CS0 to access FLASH  assume uart is already initialized by SPL  copied from board/evb64260/sdram_init.c 
 * Check memory range for valid RAM. A simple memory test determines
 * the actually available RAM size between addresses `base' and
 * `base + maxsize'. Some (not all) hardware errors are detected:
 * - short between address lines
 * - short between data lines
  start test at half size  pointer arith!  save contents of addr  save contents of base  write cnt to addr  put null at base  check at base address  restore *addr  restore *b  read *addr  fix boundary condition.. STARTVAL means zero  set the pin multiplexers to enable talking to Ethernent Phys  Ensure the MAC block is properly reset Enable the clock to the MAC block Use simple mux for 25/125 Mhz clock switching  Enable GMII_GTXCLK to follow GMII_REFCLK - required for gigabit PHY  set auto tx speed 