**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2003 Tat Tang
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *********************************************************************************************************************************************************
 * font_cache_lru_init
 ***************************************************************************** assume invalid char ******************************************************************************
 * font_cache_create
 ***************************************************************************** make sure font cache entries are a multiple of 16 bits  set up index  set up lru list  initialise cache  small cheat here ************************************************************************
 * Binary search that attempts a primary lucky guess that succeeds
 * when there are consecutive codes in the cache between previous 
 * search and new search. Returns a negative of insertion point if 
 * not found.
 *********************************************************************** go for a lucky guess  check bounds  not found ******************************************************************************
 * font_cache_get
 ***************************************************************************** check bounds  not found  find index to replace  shift memory up  add to index  shift memory down  add to index  load new entry into cache  fill bitmap **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2003 Tat Tang
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *********************************************************************************************************************************************************
 * font_cache_lru_init
 ***************************************************************************** assume invalid char ******************************************************************************
 * font_cache_create
 ***************************************************************************** make sure font cache entries are a multiple of 16 bits  set up index  set up lru list  initialise cache  small cheat here ************************************************************************
 * Binary search that attempts a primary lucky guess that succeeds
 * when there are consecutive codes in the cache between previous 
 * search and new search. Returns a negative of insertion point if 
 * not found.
 *********************************************************************** go for a lucky guess  check bounds  not found ******************************************************************************
 * font_cache_get
 ***************************************************************************** check bounds  not found  find index to replace  shift memory up  add to index  shift memory down  add to index  load new entry into cache  fill bitmap **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2003 Tat Tang
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *********************************************************************************************************************************************************
 * font_cache_lru_init
 ***************************************************************************** assume invalid char ******************************************************************************
 * font_cache_create
 ***************************************************************************** make sure font cache entries are a multiple of 16 bits  set up index  set up lru list  initialise cache  small cheat here ************************************************************************
 * Binary search that attempts a primary lucky guess that succeeds
 * when there are consecutive codes in the cache between previous 
 * search and new search. Returns a negative of insertion point if 
 * not found.
 *********************************************************************** go for a lucky guess  check bounds  not found ******************************************************************************
 * font_cache_get
 ***************************************************************************** check bounds  not found  find index to replace  shift memory up  add to index  shift memory down  add to index  load new entry into cache  fill bitmap 