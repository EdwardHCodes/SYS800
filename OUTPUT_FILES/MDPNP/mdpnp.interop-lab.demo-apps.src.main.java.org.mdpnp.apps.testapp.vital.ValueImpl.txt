******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * @author Jeff Plourde
 *
     private final LongProperty valueMsBelowLow = new SimpleLongProperty(this, "valueMsBelowLow", 0L);    private final LongProperty valueMsAboveHigh = new SimpleLongProperty(this, "valueMsAboveHigh", 0L);    private final BooleanProperty atOrAboveValueMsLow = new SimpleBooleanProperty(this, "atOrAboveValueMsLow", false);    private final BooleanProperty atOrAboveValueMsHigh = new SimpleBooleanProperty(this, "atOrAboveValueMsHigh", false);        atOrAboveValueMsHigh.bind(ignore.not().and(parent.valueMsWarningHighProperty().isNotNull()).and(valueMsAboveHigh.greaterThan(new ConcreteLongProperty(parent.valueMsWarningHighProperty(), Long.MAX_VALUE))));        atOrAboveValueMsLow.bind(ignore.not().and(parent.valueMsWarningLowProperty().isNotNull()).and(valueMsBelowLow.greaterThan(new ConcreteLongProperty(parent.valueMsWarningLowProperty(), Long.MIN_VALUE))));    @Override    public long getValueMsBelowLow() {        return valueMsBelowLow.get();    }    public long getValueMsAboveHigh() {        return valueMsAboveHigh.get();    }    @Override    public void updateFrom(final long timestamp, float value) {        if(!Platform.isFxApplicationThread()) {            throw new IllegalThreadStateException("ValueImpl must be updated on the FX Application thread");        }                // characterize the previous sample        boolean wasBelow = isAtOrBelowLow();        boolean wasAbove = isAtOrAboveHigh();        float wasValue = this.value.get();        long wasTime = this.timestamp.get();        this.value.set(value);        this.timestamp.set(timestamp);        // characterize the new sample        boolean isAbove = isAtOrAboveHigh();        boolean isBelow = isAtOrBelowLow();        // Integrate        if (isAbove) {            if (wasAbove) {                // persisting above the bound ...                valueMsAboveHigh.add((long) ((this.timestamp.get() - wasTime) * (wasValue - parent.getWarningHigh())));            } else {                // above the bound but it wasn't previously ... so restart at                // zero                valueMsAboveHigh.set(0L);            }        } else {            valueMsAboveHigh.set(0L);        }        if (isBelow) {            if (wasBelow) {                // persisting below the bound ...                valueMsBelowLow.add((long) ((this.timestamp.get() - wasTime) * (parent.getWarningLow() - wasValue)));            } else {                valueMsBelowLow.set(0L);            }        } else {            valueMsBelowLow.set(0L);        }    }    @Override    public boolean isAtOrAboveValueMsHigh() {        return atOrAboveValueMsHigh.get();    }    @Override    public boolean isAtOrAboveValueMsLow() {        return atOrAboveValueMsLow.get();    }    @Override    public ReadOnlyBooleanProperty atOrAboveValueMsHighProperty() {        return atOrAboveValueMsHigh;    }    @Override    public ReadOnlyBooleanProperty atOrAboveValueMsLowProperty() {        return atOrAboveValueMsLow;    } TODO fixme    @Override    public ReadOnlyLongProperty valueMsBelowLowProperty() {        return valueMsBelowLow;    }    @Override    public ReadOnlyLongProperty valueMsAboveHighProperty() {        return valueMsAboveHigh;    }