**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Barry Wardell
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Taken from button-h10.c by Barry Wardell and reverse engineering by MrH.  deg/s  deg/s  deg/s  deg/s  wheelclicks per full rotation  Wheel  Buttons  BOOTLOADER  Enable all buttons  Scrollwheel light - enable control through GPIOG pin 7 and set timeout  Mask these before performing init ... because init has possibly
       occurred before  Read initial buttons  Read initial wheel value (bit 6-7 of GPIOH)  Enable button interrupts  BOOTLOADER  clickwheel  Read wheel 
     * Bits 6 and 7 of GPIOH change as follows:
     * Clockwise rotation   01 -> 00 -> 10 -> 11
     * Counter-clockwise    11 -> 10 -> 00 -> 01
     *
     * This is equivalent to wheel_value of:
     * Clockwise rotation   0x40 -> 0x00 -> 0x80 -> 0xc0
     * Counter-clockwise    0xc0 -> 0x80 -> 0x00 -> 0x40
      0x00  0x40  0x80  0xc0  Wheel value         Clockwise rotation  Counter-clockwise   Velocity smoothed or unsmoothed  Raw velocity  Spurious wheel "reversals" are not uncommon. Resetting also helps
     * cover them up. As such, prev_keypost is also not reset or else false
     * non-repeats are generated when it happens.  Direction reversals reset state  Poke backlight to turn it on or maintain it no more often
         * than every 1/4 second  Calculate deg/s based upon interval and number of clicks in that
     * interval - FIR moving average  timer wrapped (no activity for awhile), skip acceleration  Check overflow below  limit to 24 bits  Very slow - no smoothing  Ensure backlight never gets stuck for an extended period if tick
         * wrapped such that next poke is very far ahead  Some velocity filtering to smooth things out  Fast OFF happens immediately when velocity drops below
           threshold  moving out of fast mode  delta is always 1 in slow mode  Fast ON gets filtered to avoid inadvertent jumps to fast mode  moving into fast mode  delta is always 1 in slow mode  Post wheel keycode with wheel data  Quick enough and same key is being posted more than once in a
             * row - generate repeats - use unsmoothed v  Message posted - reset delta  Skipped post - increment delta and limit to 7 bits  BOOTLOADER  device buttons  Read normal buttons  The centre button  The "play" button 
 * Get button pressed from hardware
  Read buttons directly in the bootloader  light handling  BOOTLOADER  The int_btn variable is set in the button interrupt handler **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Barry Wardell
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Taken from button-h10.c by Barry Wardell and reverse engineering by MrH.  deg/s  deg/s  deg/s  deg/s  wheelclicks per full rotation  Wheel  Buttons  BOOTLOADER  Enable all buttons  Scrollwheel light - enable control through GPIOG pin 7 and set timeout  Mask these before performing init ... because init has possibly
       occurred before  Read initial buttons  Read initial wheel value (bit 6-7 of GPIOH)  Enable button interrupts  BOOTLOADER  clickwheel  Read wheel 
     * Bits 6 and 7 of GPIOH change as follows:
     * Clockwise rotation   01 -> 00 -> 10 -> 11
     * Counter-clockwise    11 -> 10 -> 00 -> 01
     *
     * This is equivalent to wheel_value of:
     * Clockwise rotation   0x40 -> 0x00 -> 0x80 -> 0xc0
     * Counter-clockwise    0xc0 -> 0x80 -> 0x00 -> 0x40
      0x00  0x40  0x80  0xc0  Wheel value         Clockwise rotation  Counter-clockwise   Velocity smoothed or unsmoothed  Raw velocity  Spurious wheel "reversals" are not uncommon. Resetting also helps
     * cover them up. As such, prev_keypost is also not reset or else false
     * non-repeats are generated when it happens.  Direction reversals reset state  Poke backlight to turn it on or maintain it no more often
         * than every 1/4 second  Calculate deg/s based upon interval and number of clicks in that
     * interval - FIR moving average  timer wrapped (no activity for awhile), skip acceleration  Check overflow below  limit to 24 bits  Very slow - no smoothing  Ensure backlight never gets stuck for an extended period if tick
         * wrapped such that next poke is very far ahead  Some velocity filtering to smooth things out  Fast OFF happens immediately when velocity drops below
           threshold  moving out of fast mode  delta is always 1 in slow mode  Fast ON gets filtered to avoid inadvertent jumps to fast mode  moving into fast mode  delta is always 1 in slow mode  Post wheel keycode with wheel data  Quick enough and same key is being posted more than once in a
             * row - generate repeats - use unsmoothed v  Message posted - reset delta  Skipped post - increment delta and limit to 7 bits  BOOTLOADER  device buttons  Read normal buttons  The centre button  The "play" button 
 * Get button pressed from hardware
  Read buttons directly in the bootloader  light handling  BOOTLOADER  The int_btn variable is set in the button interrupt handler **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Barry Wardell
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Taken from button-h10.c by Barry Wardell and reverse engineering by MrH.  deg/s  deg/s  deg/s  deg/s  wheelclicks per full rotation  Wheel  Buttons  BOOTLOADER  Enable all buttons  Scrollwheel light - enable control through GPIOG pin 7 and set timeout  Mask these before performing init ... because init has possibly
       occurred before  Read initial buttons  Read initial wheel value (bit 6-7 of GPIOH)  Enable button interrupts  BOOTLOADER  clickwheel  Read wheel 
     * Bits 6 and 7 of GPIOH change as follows:
     * Clockwise rotation   01 -> 00 -> 10 -> 11
     * Counter-clockwise    11 -> 10 -> 00 -> 01
     *
     * This is equivalent to wheel_value of:
     * Clockwise rotation   0x40 -> 0x00 -> 0x80 -> 0xc0
     * Counter-clockwise    0xc0 -> 0x80 -> 0x00 -> 0x40
      0x00  0x40  0x80  0xc0  Wheel value         Clockwise rotation  Counter-clockwise   Velocity smoothed or unsmoothed  Raw velocity  Spurious wheel "reversals" are not uncommon. Resetting also helps
     * cover them up. As such, prev_keypost is also not reset or else false
     * non-repeats are generated when it happens.  Direction reversals reset state  Poke backlight to turn it on or maintain it no more often
         * than every 1/4 second  Calculate deg/s based upon interval and number of clicks in that
     * interval - FIR moving average  timer wrapped (no activity for awhile), skip acceleration  Check overflow below  limit to 24 bits  Very slow - no smoothing  Ensure backlight never gets stuck for an extended period if tick
         * wrapped such that next poke is very far ahead  Some velocity filtering to smooth things out  Fast OFF happens immediately when velocity drops below
           threshold  moving out of fast mode  delta is always 1 in slow mode  Fast ON gets filtered to avoid inadvertent jumps to fast mode  moving into fast mode  delta is always 1 in slow mode  Post wheel keycode with wheel data  Quick enough and same key is being posted more than once in a
             * row - generate repeats - use unsmoothed v  Message posted - reset delta  Skipped post - increment delta and limit to 7 bits  BOOTLOADER  device buttons  Read normal buttons  The centre button  The "play" button 
 * Get button pressed from hardware
  Read buttons directly in the bootloader  light handling  BOOTLOADER  The int_btn variable is set in the button interrupt handler 