**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 by Thomas Jarosch
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Maemo5: N900 specific libplayback support #define LOGF_ENABLE Declarations for libplayblack  Gstreamer related vars 
 * mutex lock/unlock wrappers neatness' sake
  Start playing now  N900: Request change to playing state  Make sure we don't trigger a gst_element_set_state() call
       from inside gstreamer's stream thread as it will deadlock  Block push-buffer until there is enough room  configure the appsrc, we will push data into the appsrc from the
    * mainloop.  Init libplayback: Grant access rights to
   play audio while the phone is in silent mode *
 * Gets called by the policy framework if an important
 * event arrives: Incoming calls etc.
 *
 * Callback for our own state change request.
  We are allowed to play audio  Connect elements  Connect to gstreamer bus of the pipeline  Try to stop playing  Make sure we are really stopped. This should return almost instantly,
       so we wait up to ten seconds and just continue otherwise  Shutdown libplayback and gstreamer  gstreamer volume range is from 0.00 to 1.00
     * input is -990..0  HAVE_RECORDING **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 by Thomas Jarosch
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Maemo5: N900 specific libplayback support #define LOGF_ENABLE Declarations for libplayblack  Gstreamer related vars 
 * mutex lock/unlock wrappers neatness' sake
  Start playing now  N900: Request change to playing state  Make sure we don't trigger a gst_element_set_state() call
       from inside gstreamer's stream thread as it will deadlock  Block push-buffer until there is enough room  configure the appsrc, we will push data into the appsrc from the
    * mainloop.  Init libplayback: Grant access rights to
   play audio while the phone is in silent mode *
 * Gets called by the policy framework if an important
 * event arrives: Incoming calls etc.
 *
 * Callback for our own state change request.
  We are allowed to play audio  Connect elements  Connect to gstreamer bus of the pipeline  Try to stop playing  Make sure we are really stopped. This should return almost instantly,
       so we wait up to ten seconds and just continue otherwise  Shutdown libplayback and gstreamer  gstreamer volume range is from 0.00 to 1.00
     * input is -990..0  HAVE_RECORDING **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 by Thomas Jarosch
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Maemo5: N900 specific libplayback support #define LOGF_ENABLE Declarations for libplayblack  Gstreamer related vars 
 * mutex lock/unlock wrappers neatness' sake
  Start playing now  N900: Request change to playing state  Make sure we don't trigger a gst_element_set_state() call
       from inside gstreamer's stream thread as it will deadlock  Block push-buffer until there is enough room  configure the appsrc, we will push data into the appsrc from the
    * mainloop.  Init libplayback: Grant access rights to
   play audio while the phone is in silent mode *
 * Gets called by the policy framework if an important
 * event arrives: Incoming calls etc.
 *
 * Callback for our own state change request.
  We are allowed to play audio  Connect elements  Connect to gstreamer bus of the pipeline  Try to stop playing  Make sure we are really stopped. This should return almost instantly,
       so we wait up to ten seconds and just continue otherwise  Shutdown libplayback and gstreamer  gstreamer volume range is from 0.00 to 1.00
     * input is -990..0  HAVE_RECORDING 