 quetzal.c  - Saving and restoring of Quetzal files.
 *	Written by Martin Frost <mdf@doc.ic.ac.uk>
 *
 * Changes for Rockbox copyright 2009 Torne Wuff
 *
 * This file is part of Frotz.
 *
 * Frotz is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Frotz is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 
 * This is used only by save_quetzal. It probably should be allocated
 * dynamically rather than statically.
 
 * ID types.
 
 * Various parsing states within restoration.
 
 * Macros used to write the files.
  Read one word from file; return TRUE if OK.  Read one long from file; return TRUE if OK. 
 * Restore a saved game using Quetzal format. Return 2 if OK, 0 if an error
 * occurred before any damage was done, -1 on a fatal error.
  Set to -1 when errors must be fatal.  Check it's really an `IFZS' file.  Sanity checks.  Read each chunk and process it.  Read chunk header.  Couldn't contain a chunk.  Reduce remaining by size of header.  Handle chunk body.  Chunk goes past EOF?!  `IFhd' header chunk; must be first in file.  Setting PC means errors must be fatal.  Skip rest of chunk.  `Stks' stacks chunk; restoring this is quite complex. ;)  Setting SP means errors must be fatal. 
		 * All versions other than V6 may use evaluation stack outside
		 * any function context. As a result a faked function context
		 * will be present in the file here. We skip this context, but
		 * load the associated stack onto the stack proper...
		  We now proceed to load the main block of stack frames.  No space for frame.  Read PC, procedure flag and formal param count.  Number of formals.  Read result variable.  Check the procedure flag...  It's a procedure.  Shift to get PC value.  Functions have type 0, so no need to or anything.  Shift to get PC value.  Point at result byte.  Sanity check on result variable...  High part of PC  Low part of PC  FP  Read and process argument mask.  Should now be a power of 2  Not a power of 2  FP for next frame.  Read amount of eval stack used.  Amount of stack + number of locals.  End of `Stks' processing...  Any more special chunk types must go in HERE or ABOVE.  `CMem' compressed memory chunk; uncompress it.  Don't complain if two.  Bytes written to data area.  Start run.  Check for bogus run.  Skip rest.  Keep going; may be a `UMem' too.  Copy story file to memory during the run.  Not a run.  Make sure we don't load too much.  Skip rest.  Keep going; there may be a `UMem' too.  If chunk is short, assume a run.  Only if succeeded.  Fall right thru (to default) if already GOT_MEMORY  `UMem' uncompressed memory chunk; load it.  Don't complain if two.  Must be exactly the right size.  Only on success.  Fall into default action (skip chunk) on errors.  Fall thru (to default) if already GOT_MEMORY  Unrecognised chunk type; skip it.  Skip chunk.  Skip pad byte. 
     * We've reached the end of the file. For the restoration to have been a
     * success, we must have had one of each of the required chunks.
     
 * Save a game using Quetzal format. Return 1 if OK, 0 if failed.
  Write `IFZS' header.  Write `IFhd' chunk.  Includes pad.  Write `CMem' chunk.  j holds current run length.  It's a run of equal bytes.  Write out any run there may be.  Any runs are now written. Write this (nonzero) byte. 
     * Reached end of dynamic memory. We ignore any unwritten run there may be
     * at this point.
      Chunk length must be even.  Write `Stks' chunk. You are not expected to understand this. ;) 
     * We construct a list of frame indices, most recent first, in `frames'.
     * These indices are the offsets into the `stack' array of the word before
     * the first word pushed in each frame.
      The frame we'd get by doing a call now. 
     * All versions other than V6 can use evaluation stack outside a function
     * context. We write a faked stack frame (most fields zero) to cater for
     * this.
      Write out the rest of the stack frames.  Points to call frame.  Check type of call.  Function.  Procedure.  Set procedure flag.  case 0x2000:  Make args into bitmap.  Write the main part of the frame...  Write the variables and eval stack.  Calculate length written thus far.  Fill in variable chunk lengths.  After all that, still nothing went wrong!  quetzal.c  - Saving and restoring of Quetzal files.
 *	Written by Martin Frost <mdf@doc.ic.ac.uk>
 *
 * Changes for Rockbox copyright 2009 Torne Wuff
 *
 * This file is part of Frotz.
 *
 * Frotz is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Frotz is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 
 * This is used only by save_quetzal. It probably should be allocated
 * dynamically rather than statically.
 
 * ID types.
 
 * Various parsing states within restoration.
 
 * Macros used to write the files.
  Read one word from file; return TRUE if OK.  Read one long from file; return TRUE if OK. 
 * Restore a saved game using Quetzal format. Return 2 if OK, 0 if an error
 * occurred before any damage was done, -1 on a fatal error.
  Set to -1 when errors must be fatal.  Check it's really an `IFZS' file.  Sanity checks.  Read each chunk and process it.  Read chunk header.  Couldn't contain a chunk.  Reduce remaining by size of header.  Handle chunk body.  Chunk goes past EOF?!  `IFhd' header chunk; must be first in file.  Setting PC means errors must be fatal.  Skip rest of chunk.  `Stks' stacks chunk; restoring this is quite complex. ;)  Setting SP means errors must be fatal. 
		 * All versions other than V6 may use evaluation stack outside
		 * any function context. As a result a faked function context
		 * will be present in the file here. We skip this context, but
		 * load the associated stack onto the stack proper...
		  We now proceed to load the main block of stack frames.  No space for frame.  Read PC, procedure flag and formal param count.  Number of formals.  Read result variable.  Check the procedure flag...  It's a procedure.  Shift to get PC value.  Functions have type 0, so no need to or anything.  Shift to get PC value.  Point at result byte.  Sanity check on result variable...  High part of PC  Low part of PC  FP  Read and process argument mask.  Should now be a power of 2  Not a power of 2  FP for next frame.  Read amount of eval stack used.  Amount of stack + number of locals.  End of `Stks' processing...  Any more special chunk types must go in HERE or ABOVE.  `CMem' compressed memory chunk; uncompress it.  Don't complain if two.  Bytes written to data area.  Start run.  Check for bogus run.  Skip rest.  Keep going; may be a `UMem' too.  Copy story file to memory during the run.  Not a run.  Make sure we don't load too much.  Skip rest.  Keep going; there may be a `UMem' too.  If chunk is short, assume a run.  Only if succeeded.  Fall right thru (to default) if already GOT_MEMORY  `UMem' uncompressed memory chunk; load it.  Don't complain if two.  Must be exactly the right size.  Only on success.  Fall into default action (skip chunk) on errors.  Fall thru (to default) if already GOT_MEMORY  Unrecognised chunk type; skip it.  Skip chunk.  Skip pad byte. 
     * We've reached the end of the file. For the restoration to have been a
     * success, we must have had one of each of the required chunks.
     
 * Save a game using Quetzal format. Return 1 if OK, 0 if failed.
  Write `IFZS' header.  Write `IFhd' chunk.  Includes pad.  Write `CMem' chunk.  j holds current run length.  It's a run of equal bytes.  Write out any run there may be.  Any runs are now written. Write this (nonzero) byte. 
     * Reached end of dynamic memory. We ignore any unwritten run there may be
     * at this point.
      Chunk length must be even.  Write `Stks' chunk. You are not expected to understand this. ;) 
     * We construct a list of frame indices, most recent first, in `frames'.
     * These indices are the offsets into the `stack' array of the word before
     * the first word pushed in each frame.
      The frame we'd get by doing a call now. 
     * All versions other than V6 can use evaluation stack outside a function
     * context. We write a faked stack frame (most fields zero) to cater for
     * this.
      Write out the rest of the stack frames.  Points to call frame.  Check type of call.  Function.  Procedure.  Set procedure flag.  case 0x2000:  Make args into bitmap.  Write the main part of the frame...  Write the variables and eval stack.  Calculate length written thus far.  Fill in variable chunk lengths.  After all that, still nothing went wrong!  quetzal.c  - Saving and restoring of Quetzal files.
 *	Written by Martin Frost <mdf@doc.ic.ac.uk>
 *
 * Changes for Rockbox copyright 2009 Torne Wuff
 *
 * This file is part of Frotz.
 *
 * Frotz is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Frotz is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 
 * This is used only by save_quetzal. It probably should be allocated
 * dynamically rather than statically.
 
 * ID types.
 
 * Various parsing states within restoration.
 
 * Macros used to write the files.
  Read one word from file; return TRUE if OK.  Read one long from file; return TRUE if OK. 
 * Restore a saved game using Quetzal format. Return 2 if OK, 0 if an error
 * occurred before any damage was done, -1 on a fatal error.
  Set to -1 when errors must be fatal.  Check it's really an `IFZS' file.  Sanity checks.  Read each chunk and process it.  Read chunk header.  Couldn't contain a chunk.  Reduce remaining by size of header.  Handle chunk body.  Chunk goes past EOF?!  `IFhd' header chunk; must be first in file.  Setting PC means errors must be fatal.  Skip rest of chunk.  `Stks' stacks chunk; restoring this is quite complex. ;)  Setting SP means errors must be fatal. 
		 * All versions other than V6 may use evaluation stack outside
		 * any function context. As a result a faked function context
		 * will be present in the file here. We skip this context, but
		 * load the associated stack onto the stack proper...
		  We now proceed to load the main block of stack frames.  No space for frame.  Read PC, procedure flag and formal param count.  Number of formals.  Read result variable.  Check the procedure flag...  It's a procedure.  Shift to get PC value.  Functions have type 0, so no need to or anything.  Shift to get PC value.  Point at result byte.  Sanity check on result variable...  High part of PC  Low part of PC  FP  Read and process argument mask.  Should now be a power of 2  Not a power of 2  FP for next frame.  Read amount of eval stack used.  Amount of stack + number of locals.  End of `Stks' processing...  Any more special chunk types must go in HERE or ABOVE.  `CMem' compressed memory chunk; uncompress it.  Don't complain if two.  Bytes written to data area.  Start run.  Check for bogus run.  Skip rest.  Keep going; may be a `UMem' too.  Copy story file to memory during the run.  Not a run.  Make sure we don't load too much.  Skip rest.  Keep going; there may be a `UMem' too.  If chunk is short, assume a run.  Only if succeeded.  Fall right thru (to default) if already GOT_MEMORY  `UMem' uncompressed memory chunk; load it.  Don't complain if two.  Must be exactly the right size.  Only on success.  Fall into default action (skip chunk) on errors.  Fall thru (to default) if already GOT_MEMORY  Unrecognised chunk type; skip it.  Skip chunk.  Skip pad byte. 
     * We've reached the end of the file. For the restoration to have been a
     * success, we must have had one of each of the required chunks.
     
 * Save a game using Quetzal format. Return 1 if OK, 0 if failed.
  Write `IFZS' header.  Write `IFhd' chunk.  Includes pad.  Write `CMem' chunk.  j holds current run length.  It's a run of equal bytes.  Write out any run there may be.  Any runs are now written. Write this (nonzero) byte. 
     * Reached end of dynamic memory. We ignore any unwritten run there may be
     * at this point.
      Chunk length must be even.  Write `Stks' chunk. You are not expected to understand this. ;) 
     * We construct a list of frame indices, most recent first, in `frames'.
     * These indices are the offsets into the `stack' array of the word before
     * the first word pushed in each frame.
      The frame we'd get by doing a call now. 
     * All versions other than V6 can use evaluation stack outside a function
     * context. We write a faked stack frame (most fields zero) to cater for
     * this.
      Write out the rest of the stack frames.  Points to call frame.  Check type of call.  Function.  Procedure.  Set procedure flag.  case 0x2000:  Make args into bitmap.  Write the main part of the frame...  Write the variables and eval stack.  Calculate length written thus far.  Fill in variable chunk lengths.  After all that, still nothing went wrong! 