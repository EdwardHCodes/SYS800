**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2004,2005 by Marcoen Hirschberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************   Some conversion functions for handling UTF-8
 *
 *   I got all the info from:
 *   http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
 *   and
 *   http://en.wikipedia.org/wiki/Unicode
  Because file scanning uses the default CP table when matching entries,
   on-demand loading is not feasible; we also must use the filesystem lock  APPLICATION  !APPLICATION  not needed just now (will probably end up a spinlock)  SJIS     GB2312   KSX1001  BIG5     guard against multi loaders  non-default codepage table buffer (cannot be bufalloced! playback itself
   may be making the load request)  iso8859-15 is closest, linux doesnt have a codepage named cp1252  defined(APPLICATION) && defined(__linux__)  we don't keep a pointer but we have to stop it if this applies to a
       buffer not yet swapped-in since it will likely be in use in an I/O
       call  alloc and read only if there is an associated file  must be opened without a chance of reentering from FS code  if the buffer is provided, use that but don't alloc  Encode a UCS value as UTF-8 and return a pointer after this UTF-8 char.  Recode an iso encoded string to UTF-8  use default table  use loaded table  alloc and load must be done outside the lock  table may be clobbered now  Already UTF-8  tid tells us which table to use and how  Greek  Hebrew  Cyrillic  Thai  Arabic  Turkish  Latin Extended  Central European  Western European  Japanese  Simplified Chinese  Korean  Traditional Chinese  we assume all cjk strings are written
                       in big endian order  unknown char, use replacement char  Recode a UTF-16 string with little-endian byte ordering to UTF-8  Check for a surrogate pair  Recode a UTF-16 string with big-endian byte ordering to UTF-8  Check for a surrogate pair  currently unused  Recode any UTF-16 string to UTF-8  Check for BOM  ADDME: Should default be LE or BE?  Return the number of UTF-8 chars in a string  Decode 1 UTF-8 char and return a pointer to the next char.  Start of new character.  U-00000000 - U-0000007F, 1 byte  U-00000080 - U-000007FF, 2 bytes  U-00000800 - U-0000FFFF, 3 bytes  U-00010000 - U-001FFFFF, 4 bytes  Invalid size.  Valid continuation character.  Invalid continuation char  Invalid UTF-8 char  currently we don't support chars above U-FFFF  load first then swap if load is successful, else just leave it; if
       handle is 0 then we just free the current one; this won't happen often
       thus we don't worry about reusing it and consequently avoid possible
       clobbering of the existing one  alloc and load must be done outside the lock  OOM; change nothing  seek to a given char in a utf8 string and
   return its start position in the string  not needed just now **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2004,2005 by Marcoen Hirschberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************   Some conversion functions for handling UTF-8
 *
 *   I got all the info from:
 *   http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
 *   and
 *   http://en.wikipedia.org/wiki/Unicode
  Because file scanning uses the default CP table when matching entries,
   on-demand loading is not feasible; we also must use the filesystem lock  APPLICATION  !APPLICATION  not needed just now (will probably end up a spinlock)  SJIS     GB2312   KSX1001  BIG5     guard against multi loaders  non-default codepage table buffer (cannot be bufalloced! playback itself
   may be making the load request)  iso8859-15 is closest, linux doesnt have a codepage named cp1252  defined(APPLICATION) && defined(__linux__)  we don't keep a pointer but we have to stop it if this applies to a
       buffer not yet swapped-in since it will likely be in use in an I/O
       call  alloc and read only if there is an associated file  must be opened without a chance of reentering from FS code  if the buffer is provided, use that but don't alloc  Encode a UCS value as UTF-8 and return a pointer after this UTF-8 char.  Recode an iso encoded string to UTF-8  use default table  use loaded table  alloc and load must be done outside the lock  table may be clobbered now  Already UTF-8  tid tells us which table to use and how  Greek  Hebrew  Cyrillic  Thai  Arabic  Turkish  Latin Extended  Central European  Western European  Japanese  Simplified Chinese  Korean  Traditional Chinese  we assume all cjk strings are written
                       in big endian order  unknown char, use replacement char  Recode a UTF-16 string with little-endian byte ordering to UTF-8  Check for a surrogate pair  Recode a UTF-16 string with big-endian byte ordering to UTF-8  Check for a surrogate pair  currently unused  Recode any UTF-16 string to UTF-8  Check for BOM  ADDME: Should default be LE or BE?  Return the number of UTF-8 chars in a string  Decode 1 UTF-8 char and return a pointer to the next char.  Start of new character.  U-00000000 - U-0000007F, 1 byte  U-00000080 - U-000007FF, 2 bytes  U-00000800 - U-0000FFFF, 3 bytes  U-00010000 - U-001FFFFF, 4 bytes  Invalid size.  Valid continuation character.  Invalid continuation char  Invalid UTF-8 char  currently we don't support chars above U-FFFF  load first then swap if load is successful, else just leave it; if
       handle is 0 then we just free the current one; this won't happen often
       thus we don't worry about reusing it and consequently avoid possible
       clobbering of the existing one  alloc and load must be done outside the lock  OOM; change nothing  seek to a given char in a utf8 string and
   return its start position in the string  not needed just now **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2004,2005 by Marcoen Hirschberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************   Some conversion functions for handling UTF-8
 *
 *   I got all the info from:
 *   http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
 *   and
 *   http://en.wikipedia.org/wiki/Unicode
  Because file scanning uses the default CP table when matching entries,
   on-demand loading is not feasible; we also must use the filesystem lock  APPLICATION  !APPLICATION  not needed just now (will probably end up a spinlock)  SJIS     GB2312   KSX1001  BIG5     guard against multi loaders  non-default codepage table buffer (cannot be bufalloced! playback itself
   may be making the load request)  iso8859-15 is closest, linux doesnt have a codepage named cp1252  defined(APPLICATION) && defined(__linux__)  we don't keep a pointer but we have to stop it if this applies to a
       buffer not yet swapped-in since it will likely be in use in an I/O
       call  alloc and read only if there is an associated file  must be opened without a chance of reentering from FS code  if the buffer is provided, use that but don't alloc  Encode a UCS value as UTF-8 and return a pointer after this UTF-8 char.  Recode an iso encoded string to UTF-8  use default table  use loaded table  alloc and load must be done outside the lock  table may be clobbered now  Already UTF-8  tid tells us which table to use and how  Greek  Hebrew  Cyrillic  Thai  Arabic  Turkish  Latin Extended  Central European  Western European  Japanese  Simplified Chinese  Korean  Traditional Chinese  we assume all cjk strings are written
                       in big endian order  unknown char, use replacement char  Recode a UTF-16 string with little-endian byte ordering to UTF-8  Check for a surrogate pair  Recode a UTF-16 string with big-endian byte ordering to UTF-8  Check for a surrogate pair  currently unused  Recode any UTF-16 string to UTF-8  Check for BOM  ADDME: Should default be LE or BE?  Return the number of UTF-8 chars in a string  Decode 1 UTF-8 char and return a pointer to the next char.  Start of new character.  U-00000000 - U-0000007F, 1 byte  U-00000080 - U-000007FF, 2 bytes  U-00000800 - U-0000FFFF, 3 bytes  U-00010000 - U-001FFFFF, 4 bytes  Invalid size.  Valid continuation character.  Invalid continuation char  Invalid UTF-8 char  currently we don't support chars above U-FFFF  load first then swap if load is successful, else just leave it; if
       handle is 0 then we just free the current one; this won't happen often
       thus we don't worry about reusing it and consequently avoid possible
       clobbering of the existing one  alloc and load must be done outside the lock  OOM; change nothing  seek to a given char in a utf8 string and
   return its start position in the string  not needed just now 