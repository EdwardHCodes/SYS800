**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 Dave Chapman
 *
 * ASF parsing code based on libasf by Juho Vähä-Herttua
 * http://code.google.com/p/libasf/  libasf itself was based on the ASF
 * parser in VLC - http://www.videolan.org/
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Read an unaligned 32-bit little endian long from buffer.  Read an unaligned 16-bit little endian short from buffer.  rockbox: comment 'set but unused' variables
    uint32_t send_time;
    uint16_t duration;
    uint32_t media_object_number;
    uint32_t media_object_offset;
    DEBUGF("Reading new packet at %d bytes ", (int)ci->curpos); TODO: We need a better way to detect endofstream  Skip ec_data  sequence value is not used  send_time = get_long_le(datap);  duration = get_short_le(datap); DEBUGF("and duration %d ms\n", duration); this is really idiotic, packet length can (and often will) be
     * undefined and we just have to use the header packet size as the size
     * value  this is also really idiotic, if packet length is smaller than packet
     * size, we need to manually add the additional bytes into padding length
      check if we have multiple payloads  not used  FIXME: should this be checked earlier?  We now parse the individual payloads, and move all payloads
       belonging to our audio stream to a contiguous block, starting at
       the location of the first payload.
     32KB  This should only happen with packets larger than 32KB (the
           guard buffer size).  All the streams I've seen have
           relatively small packets less than about 8KB), but I don't
           know what is expected.
        DEBUGF("payload_hdrlen = %d\n",payload_hdrlen); TODO  media_object_number = GETVALUE2b((packet_property >> 4) & 0x03, datap);  media_object_offset = GETVALUE2b((packet_property >> 2) & 0x03, datap);  TODO: Validate replicated_length  TODO: Is the content of this important for us?  in multiple payloads datalen should be a word  not enough data  The first payload can stay where it is  The second and subsequent payloads in this packet
                   that belong to the audio stream need to be moved to be
                   contiguous with the first payload.
                 rockbox: comment 'set but unused' variables
    uint32_t length;
    uint32_t padding_length;
     TODO: We need a better way to detect endofstream  Skip ec_data  length = GETVALUE2b((packet_flags >> 5) & 0x03, datap);  sequence value is not used  padding_length = GETVALUE2b((packet_flags >> 3) & 0x03, datap); the asf_get_timestamp function advances us 12-13 bytes past the packet start,
      need to undo this here so that we stay synced with the packetentry point for seeksestimate packet number from bitratesubtract header size in case theres a lot of metadata
    DEBUGF("bitrate:  %d\n", bitrate);
    DEBUGF("attempting seek to: %d ms, initialp: %d, lastp: %d, estimating packet: %d, packet size:  %d\n", ms, initial_packet, last_packet, packet_num, wfx->packet_size);calculate byte address of the start of that packetseek to estimated packetfor very large files it can be difficult and unimportant to find the exact packetcheck the time stamp of our packetDEBUGF("seeked to %d ms (%d) with duration %d\n", time,packet_num, duration);unknown error, try to recoverseek failed so return time stamp of the initial packetDEBUGF("Found our packet! Now at %d packet\n", packet_num);seek againestimate new packet number from bitrate and our current positionround down!**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 Dave Chapman
 *
 * ASF parsing code based on libasf by Juho Vähä-Herttua
 * http://code.google.com/p/libasf/  libasf itself was based on the ASF
 * parser in VLC - http://www.videolan.org/
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Read an unaligned 32-bit little endian long from buffer.  Read an unaligned 16-bit little endian short from buffer.  rockbox: comment 'set but unused' variables
    uint32_t send_time;
    uint16_t duration;
    uint32_t media_object_number;
    uint32_t media_object_offset;
    DEBUGF("Reading new packet at %d bytes ", (int)ci->curpos); TODO: We need a better way to detect endofstream  Skip ec_data  sequence value is not used  send_time = get_long_le(datap);  duration = get_short_le(datap); DEBUGF("and duration %d ms\n", duration); this is really idiotic, packet length can (and often will) be
     * undefined and we just have to use the header packet size as the size
     * value  this is also really idiotic, if packet length is smaller than packet
     * size, we need to manually add the additional bytes into padding length
      check if we have multiple payloads  not used  FIXME: should this be checked earlier?  We now parse the individual payloads, and move all payloads
       belonging to our audio stream to a contiguous block, starting at
       the location of the first payload.
     32KB  This should only happen with packets larger than 32KB (the
           guard buffer size).  All the streams I've seen have
           relatively small packets less than about 8KB), but I don't
           know what is expected.
        DEBUGF("payload_hdrlen = %d\n",payload_hdrlen); TODO  media_object_number = GETVALUE2b((packet_property >> 4) & 0x03, datap);  media_object_offset = GETVALUE2b((packet_property >> 2) & 0x03, datap);  TODO: Validate replicated_length  TODO: Is the content of this important for us?  in multiple payloads datalen should be a word  not enough data  The first payload can stay where it is  The second and subsequent payloads in this packet
                   that belong to the audio stream need to be moved to be
                   contiguous with the first payload.
                 rockbox: comment 'set but unused' variables
    uint32_t length;
    uint32_t padding_length;
     TODO: We need a better way to detect endofstream  Skip ec_data  length = GETVALUE2b((packet_flags >> 5) & 0x03, datap);  sequence value is not used  padding_length = GETVALUE2b((packet_flags >> 3) & 0x03, datap); the asf_get_timestamp function advances us 12-13 bytes past the packet start,
      need to undo this here so that we stay synced with the packetentry point for seeksestimate packet number from bitratesubtract header size in case theres a lot of metadata
    DEBUGF("bitrate:  %d\n", bitrate);
    DEBUGF("attempting seek to: %d ms, initialp: %d, lastp: %d, estimating packet: %d, packet size:  %d\n", ms, initial_packet, last_packet, packet_num, wfx->packet_size);calculate byte address of the start of that packetseek to estimated packetfor very large files it can be difficult and unimportant to find the exact packetcheck the time stamp of our packetDEBUGF("seeked to %d ms (%d) with duration %d\n", time,packet_num, duration);unknown error, try to recoverseek failed so return time stamp of the initial packetDEBUGF("Found our packet! Now at %d packet\n", packet_num);seek againestimate new packet number from bitrate and our current positionround down!**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 Dave Chapman
 *
 * ASF parsing code based on libasf by Juho Vähä-Herttua
 * http://code.google.com/p/libasf/  libasf itself was based on the ASF
 * parser in VLC - http://www.videolan.org/
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Read an unaligned 32-bit little endian long from buffer.  Read an unaligned 16-bit little endian short from buffer.  rockbox: comment 'set but unused' variables
    uint32_t send_time;
    uint16_t duration;
    uint32_t media_object_number;
    uint32_t media_object_offset;
    DEBUGF("Reading new packet at %d bytes ", (int)ci->curpos); TODO: We need a better way to detect endofstream  Skip ec_data  sequence value is not used  send_time = get_long_le(datap);  duration = get_short_le(datap); DEBUGF("and duration %d ms\n", duration); this is really idiotic, packet length can (and often will) be
     * undefined and we just have to use the header packet size as the size
     * value  this is also really idiotic, if packet length is smaller than packet
     * size, we need to manually add the additional bytes into padding length
      check if we have multiple payloads  not used  FIXME: should this be checked earlier?  We now parse the individual payloads, and move all payloads
       belonging to our audio stream to a contiguous block, starting at
       the location of the first payload.
     32KB  This should only happen with packets larger than 32KB (the
           guard buffer size).  All the streams I've seen have
           relatively small packets less than about 8KB), but I don't
           know what is expected.
        DEBUGF("payload_hdrlen = %d\n",payload_hdrlen); TODO  media_object_number = GETVALUE2b((packet_property >> 4) & 0x03, datap);  media_object_offset = GETVALUE2b((packet_property >> 2) & 0x03, datap);  TODO: Validate replicated_length  TODO: Is the content of this important for us?  in multiple payloads datalen should be a word  not enough data  The first payload can stay where it is  The second and subsequent payloads in this packet
                   that belong to the audio stream need to be moved to be
                   contiguous with the first payload.
                 rockbox: comment 'set but unused' variables
    uint32_t length;
    uint32_t padding_length;
     TODO: We need a better way to detect endofstream  Skip ec_data  length = GETVALUE2b((packet_flags >> 5) & 0x03, datap);  sequence value is not used  padding_length = GETVALUE2b((packet_flags >> 3) & 0x03, datap); the asf_get_timestamp function advances us 12-13 bytes past the packet start,
      need to undo this here so that we stay synced with the packetentry point for seeksestimate packet number from bitratesubtract header size in case theres a lot of metadata
    DEBUGF("bitrate:  %d\n", bitrate);
    DEBUGF("attempting seek to: %d ms, initialp: %d, lastp: %d, estimating packet: %d, packet size:  %d\n", ms, initial_packet, last_packet, packet_num, wfx->packet_size);calculate byte address of the start of that packetseek to estimated packetfor very large files it can be difficult and unimportant to find the exact packetcheck the time stamp of our packetDEBUGF("seeked to %d ms (%d) with duration %d\n", time,packet_num, duration);unknown error, try to recoverseek failed so return time stamp of the initial packetDEBUGF("Found our packet! Now at %d packet\n", packet_num);seek againestimate new packet number from bitrate and our current positionround down!