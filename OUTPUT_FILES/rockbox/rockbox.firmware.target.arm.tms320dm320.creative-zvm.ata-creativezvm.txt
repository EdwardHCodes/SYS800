**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Maurus Cuelenaere
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Disabled until figured out what's wrong  enable GIO2 interrupt  TODO: mimic OF inits...  Mask GIO2 interrupt 
 ---------------------------------------------------------------------------
 CreativeFileSystem parsing/handling code
 ---------------------------------------------------------------------------
  1GB array requires 80kB of RAM  struct cfs_direntry_item _items[items];  Limited version of UCS -> ASCII  Read MBLK  Read CFS header  Read root inode  Read root inode's first sector  Search VFAT inode logf(" * [%s] at 0x%x", ucs2letostring(&root_direntry_items[i].string[0]), root_direntry_items[i].inode_number); Read VFAT inode  Read VFAT inode's first sector  Search for VFAT's subinodes  Determine size of VFAT file  1GB guess  Clear data sectors  Read all data sectors' addresses in memory  Read second & third class chain  First class chain  Second class chain  Third class chain  Read third class subchain(s) 
     *  Sector mapping: start of CFS + FAT_SECTOR2CFS_SECTOR(sector) + missing part
     *  FAT works with sectors of 0x200 bytes, CFS with sectors of 0x8000 bytes.
      Check if count is lesser than or equal to 1 native CFS sector  Read sectors in parts of 0x8000  Disabled for now  Check if count is lesser than or equal to 1 native CFS sector  Read sectors in parts of 0x8000 
 ---------------------------------------------------------------------------
 MiniFileSystem parsing code
 ---------------------------------------------------------------------------
  stack overflow if not static  Read MBLK  Read directory listing  Read chain list  Copy data **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Maurus Cuelenaere
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Disabled until figured out what's wrong  enable GIO2 interrupt  TODO: mimic OF inits...  Mask GIO2 interrupt 
 ---------------------------------------------------------------------------
 CreativeFileSystem parsing/handling code
 ---------------------------------------------------------------------------
  1GB array requires 80kB of RAM  struct cfs_direntry_item _items[items];  Limited version of UCS -> ASCII  Read MBLK  Read CFS header  Read root inode  Read root inode's first sector  Search VFAT inode logf(" * [%s] at 0x%x", ucs2letostring(&root_direntry_items[i].string[0]), root_direntry_items[i].inode_number); Read VFAT inode  Read VFAT inode's first sector  Search for VFAT's subinodes  Determine size of VFAT file  1GB guess  Clear data sectors  Read all data sectors' addresses in memory  Read second & third class chain  First class chain  Second class chain  Third class chain  Read third class subchain(s) 
     *  Sector mapping: start of CFS + FAT_SECTOR2CFS_SECTOR(sector) + missing part
     *  FAT works with sectors of 0x200 bytes, CFS with sectors of 0x8000 bytes.
      Check if count is lesser than or equal to 1 native CFS sector  Read sectors in parts of 0x8000  Disabled for now  Check if count is lesser than or equal to 1 native CFS sector  Read sectors in parts of 0x8000 
 ---------------------------------------------------------------------------
 MiniFileSystem parsing code
 ---------------------------------------------------------------------------
  stack overflow if not static  Read MBLK  Read directory listing  Read chain list  Copy data **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Maurus Cuelenaere
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Disabled until figured out what's wrong  enable GIO2 interrupt  TODO: mimic OF inits...  Mask GIO2 interrupt 
 ---------------------------------------------------------------------------
 CreativeFileSystem parsing/handling code
 ---------------------------------------------------------------------------
  1GB array requires 80kB of RAM  struct cfs_direntry_item _items[items];  Limited version of UCS -> ASCII  Read MBLK  Read CFS header  Read root inode  Read root inode's first sector  Search VFAT inode logf(" * [%s] at 0x%x", ucs2letostring(&root_direntry_items[i].string[0]), root_direntry_items[i].inode_number); Read VFAT inode  Read VFAT inode's first sector  Search for VFAT's subinodes  Determine size of VFAT file  1GB guess  Clear data sectors  Read all data sectors' addresses in memory  Read second & third class chain  First class chain  Second class chain  Third class chain  Read third class subchain(s) 
     *  Sector mapping: start of CFS + FAT_SECTOR2CFS_SECTOR(sector) + missing part
     *  FAT works with sectors of 0x200 bytes, CFS with sectors of 0x8000 bytes.
      Check if count is lesser than or equal to 1 native CFS sector  Read sectors in parts of 0x8000  Disabled for now  Check if count is lesser than or equal to 1 native CFS sector  Read sectors in parts of 0x8000 
 ---------------------------------------------------------------------------
 MiniFileSystem parsing code
 ---------------------------------------------------------------------------
  stack overflow if not static  Read MBLK  Read directory listing  Read chain list  Copy data 