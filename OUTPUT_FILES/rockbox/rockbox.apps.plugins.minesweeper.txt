**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2004-2006 Antoine Cellerier <dionoea -at- videolan -dot- org>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** what the minesweeper() function can return  variable button definitions  We want to have at least 130 tiles on the screen  the tile struct
 * if there is a mine, mine is true
 * if tile is known by player, known is true
 * if tile has a flag, flag is true
 * neighbors is the total number of mines arround tile
  the height and width of the field  The Minefield. Caution it is defined as Y, X! Not the opposite.  total number of mines on the game  percentage of mines on minefield used during generation  number of tiles left on the game  Because mines are set after the first move...  We need a stack (created on discover()) for the cascade algorithm.  Unveil tiles and push them to stack if they are empty.  Selected tile.  Exit if the tile is not empty. (no mines nearby)  Scan all nearby tiles. If we meet a tile with a number we just unveil
     * it. If we meet an empty tile, we push the location in stack. For each
     * location in stack we do the same thing. (scan again all nearby tiles)
      Pop x, y from stack.  Reset the whole board for a new game.  put mines on the mine field  there is p% chance that a tile is a mine  if the tile has coordinates (x,y), or is adjacent to those,
 * then it can't be a mine because that would reduce the game
 * from a logic game to a guessing game.  we need to compute the neighbor element for each tile  In case the user is lucky and there are no mines positioned.  A function that will uncover all the board, when the user wins or loses.
   can easily be expanded, (just a call assigned to a button) as a solver.  welcome screen where player can chose mine percentage  start playing  quit program  the big and ugly game function  the cursor coordinates *
     * Show the menu
     *
     * Init game
     *
     * Play
      clear the screen buffer  display the mine field  display the cursor  update the screen  quit minesweeper (you really shouldn't use this button ...)  move cursor left  move cursor right  move cursor down  move cursor up move cursor though the entire field discover a tile (and it's neighbors if .neighbors == 0)  we put the mines on the first "click" so that you don't
                 * lose on the first "click"  toggle flag under cursor  show how many mines you think you have found and how many
             * there really are on the game  plugin entry point **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2004-2006 Antoine Cellerier <dionoea -at- videolan -dot- org>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** what the minesweeper() function can return  variable button definitions  We want to have at least 130 tiles on the screen  the tile struct
 * if there is a mine, mine is true
 * if tile is known by player, known is true
 * if tile has a flag, flag is true
 * neighbors is the total number of mines arround tile
  the height and width of the field  The Minefield. Caution it is defined as Y, X! Not the opposite.  total number of mines on the game  percentage of mines on minefield used during generation  number of tiles left on the game  Because mines are set after the first move...  We need a stack (created on discover()) for the cascade algorithm.  Unveil tiles and push them to stack if they are empty.  Selected tile.  Exit if the tile is not empty. (no mines nearby)  Scan all nearby tiles. If we meet a tile with a number we just unveil
     * it. If we meet an empty tile, we push the location in stack. For each
     * location in stack we do the same thing. (scan again all nearby tiles)
      Pop x, y from stack.  Reset the whole board for a new game.  put mines on the mine field  there is p% chance that a tile is a mine  if the tile has coordinates (x,y), or is adjacent to those,
 * then it can't be a mine because that would reduce the game
 * from a logic game to a guessing game.  we need to compute the neighbor element for each tile  In case the user is lucky and there are no mines positioned.  A function that will uncover all the board, when the user wins or loses.
   can easily be expanded, (just a call assigned to a button) as a solver.  welcome screen where player can chose mine percentage  start playing  quit program  the big and ugly game function  the cursor coordinates *
     * Show the menu
     *
     * Init game
     *
     * Play
      clear the screen buffer  display the mine field  display the cursor  update the screen  quit minesweeper (you really shouldn't use this button ...)  move cursor left  move cursor right  move cursor down  move cursor up move cursor though the entire field discover a tile (and it's neighbors if .neighbors == 0)  we put the mines on the first "click" so that you don't
                 * lose on the first "click"  toggle flag under cursor  show how many mines you think you have found and how many
             * there really are on the game  plugin entry point **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2004-2006 Antoine Cellerier <dionoea -at- videolan -dot- org>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** what the minesweeper() function can return  variable button definitions  We want to have at least 130 tiles on the screen  the tile struct
 * if there is a mine, mine is true
 * if tile is known by player, known is true
 * if tile has a flag, flag is true
 * neighbors is the total number of mines arround tile
  the height and width of the field  The Minefield. Caution it is defined as Y, X! Not the opposite.  total number of mines on the game  percentage of mines on minefield used during generation  number of tiles left on the game  Because mines are set after the first move...  We need a stack (created on discover()) for the cascade algorithm.  Unveil tiles and push them to stack if they are empty.  Selected tile.  Exit if the tile is not empty. (no mines nearby)  Scan all nearby tiles. If we meet a tile with a number we just unveil
     * it. If we meet an empty tile, we push the location in stack. For each
     * location in stack we do the same thing. (scan again all nearby tiles)
      Pop x, y from stack.  Reset the whole board for a new game.  put mines on the mine field  there is p% chance that a tile is a mine  if the tile has coordinates (x,y), or is adjacent to those,
 * then it can't be a mine because that would reduce the game
 * from a logic game to a guessing game.  we need to compute the neighbor element for each tile  In case the user is lucky and there are no mines positioned.  A function that will uncover all the board, when the user wins or loses.
   can easily be expanded, (just a call assigned to a button) as a solver.  welcome screen where player can chose mine percentage  start playing  quit program  the big and ugly game function  the cursor coordinates *
     * Show the menu
     *
     * Init game
     *
     * Play
      clear the screen buffer  display the mine field  display the cursor  update the screen  quit minesweeper (you really shouldn't use this button ...)  move cursor left  move cursor right  move cursor down  move cursor up move cursor though the entire field discover a tile (and it's neighbors if .neighbors == 0)  we put the mines on the first "click" so that you don't
                 * lose on the first "click"  toggle flag under cursor  show how many mines you think you have found and how many
             * there really are on the game  plugin entry point 