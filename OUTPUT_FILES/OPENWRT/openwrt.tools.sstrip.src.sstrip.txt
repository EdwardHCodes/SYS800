 http://www.muppetlabs.com/~breadbox/software/elfkickers.html  sstrip: Copyright (C) 1999-2001 by Brian Raiter, under the GNU
 * General Public License. No warranty. See COPYING for details.
 *
 * Aug 23, 2004 Hacked by Manuel Novoa III <mjn3@codepoet.org> to
 * handle targets of different endianness and/or elf class, making
 * it more useful in a cross-devel environment.
  ============== original README ===================
 *
 * sstrip is a small utility that removes the contents at the end of an
 * ELF file that are not part of the program's memory image.
 * 
 * Most ELF executables are built with both a program header table and a
 * section header table. However, only the former is required in order
 * for the OS to load, link and execute a program. sstrip attempts to
 * extract the ELF header, the program header table, and its contents,
 * leaving everything else in the bit bucket. It can only remove parts of
 * the file that occur at the end, after the parts to be saved. However,
 * this almost always includes the section header table, and occasionally
 * a few random sections that are not used when running a program.
 * 
 * It should be noted that the GNU bfd library is (understandably)
 * dependent on the section header table as an index to the file's
 * contents. Thus, an executable file that has no section header table
 * cannot be used with gdb, objdump, or any other program based upon the
 * bfd library, at all. In fact, the program will not even recognize the
 * file as a valid executable. (This limitation is noted in the source
 * code comments for bfd, and is marked "FIXME", so this may change at
 * some future date. However, I would imagine that it is a pretty
 * low-priority item, as executables without a section header table are
 * rare in the extreme.) This probably also explains why strip doesn't
 * offer the option to do this.
 * 
 * Shared library files may also have their section header table removed.
 * Such a library will still function; however, it will no longer be
 * possible for a compiler to link a new program against it.
 * 
 * As an added bonus, sstrip also tries to removes trailing zero bytes
 * from the end of the file. (This normally cannot be done with an
 * executable that has a section header table.)
 * 
 * sstrip is a very simplistic program. It depends upon the common
 * practice of putting the parts of the file that contribute to the
 * memory image at the front, and the remaining material at the end. This
 * permits it to discard the latter material without affecting file
 * offsets and memory addresses in what remains. Of course, the ELF
 * standard permits files to be organized in almost any order, so if a
 * pathological linker decided to put its section headers at the top,
 * sstrip would be useless on such executables.
  The name of the program.
  The name of the current file.
  A simple error-handling function. FALSE is always returned for the
 * convenience of the caller.
  A flag to signal the need for endian reversal.
  Get a value from the elf header, compensating for endianness.
  Set a value 'Y' in the elf header to 'X', compensating for endianness.
  A macro for I/O errors: The given error message is used only when
 * errno is not set.
  readelfheader() reads the ELF header into our global variable, and \
 * checks to make sure that this is in fact a file that we should be \
 * munging. \
  Verify the sizes of the ELF header and the program segment \
	 * header table entries. \
	  Finally, check the file type. \
	  readphdrtable() loads the program segment header table into memory. \
  getmemorysize() determines the offset of the last byte of the file \
 * that is referenced by an entry in the program segment header table. \
 * (Anything in the file after that point is not used when the program \
 * is executing, and thus can be safely discarded.) \
  Start by setting the size to include the ELF header and the \
	 * complete program segment header table. \
	  Then keep extending the size to include whatever data the \
	 * program segment header table references. \
	  modifyheaders() removes references to the section header table if \
 * it was stripped, and reduces program header table entries that \
 * included truncated bytes at the end of the file. \
  If the section header table is gone, then remove all references \
	 * to it in the ELF header. \
	  The program adjusts the file size of any segment that was \
	 * truncated. The case of a segment being completely stripped out \
	 * is handled separately. \
	  commitchanges() writes the new headers back to the original file \
 * and sets the file to its new size. \
  Save the changes to the ELF header, if any. \
	  Save the changes to the program segment header table, if any. \
	  Eleventh-hour sanity check: don't truncate before the end of \
	 * the program segment header table. \
	  Chop off the end of the file. \
	  First elements of Elf32_Ehdr and Elf64_Ehdr are common.
  Check the ELF signature.
	  Compare the file's class and endianness with the program's.
	  		fprintf(stderr, "ELF file has different endianness.\n");  		fprintf(stderr, "ELF file has different endianness.\n");  Check the target architecture.
	 	 if (EGET(ehdr->e_machine) != ELF_ARCH) {  		/\* return err("ELF file created for different architecture."); *\/  		fprintf(stderr, "ELF file created for different architecture.\n");  	}  truncatezeros() examines the bytes at the end of the file's
 * size-to-be, and reduces the size to exclude any trailing zero
 * bytes.
  Sanity check.
	  main() loops over the cmdline arguments, leaving all the real work
 * to the other functions.
  http://www.muppetlabs.com/~breadbox/software/elfkickers.html  sstrip: Copyright (C) 1999-2001 by Brian Raiter, under the GNU
 * General Public License. No warranty. See COPYING for details.
 *
 * Aug 23, 2004 Hacked by Manuel Novoa III <mjn3@codepoet.org> to
 * handle targets of different endianness and/or elf class, making
 * it more useful in a cross-devel environment.
  ============== original README ===================
 *
 * sstrip is a small utility that removes the contents at the end of an
 * ELF file that are not part of the program's memory image.
 * 
 * Most ELF executables are built with both a program header table and a
 * section header table. However, only the former is required in order
 * for the OS to load, link and execute a program. sstrip attempts to
 * extract the ELF header, the program header table, and its contents,
 * leaving everything else in the bit bucket. It can only remove parts of
 * the file that occur at the end, after the parts to be saved. However,
 * this almost always includes the section header table, and occasionally
 * a few random sections that are not used when running a program.
 * 
 * It should be noted that the GNU bfd library is (understandably)
 * dependent on the section header table as an index to the file's
 * contents. Thus, an executable file that has no section header table
 * cannot be used with gdb, objdump, or any other program based upon the
 * bfd library, at all. In fact, the program will not even recognize the
 * file as a valid executable. (This limitation is noted in the source
 * code comments for bfd, and is marked "FIXME", so this may change at
 * some future date. However, I would imagine that it is a pretty
 * low-priority item, as executables without a section header table are
 * rare in the extreme.) This probably also explains why strip doesn't
 * offer the option to do this.
 * 
 * Shared library files may also have their section header table removed.
 * Such a library will still function; however, it will no longer be
 * possible for a compiler to link a new program against it.
 * 
 * As an added bonus, sstrip also tries to removes trailing zero bytes
 * from the end of the file. (This normally cannot be done with an
 * executable that has a section header table.)
 * 
 * sstrip is a very simplistic program. It depends upon the common
 * practice of putting the parts of the file that contribute to the
 * memory image at the front, and the remaining material at the end. This
 * permits it to discard the latter material without affecting file
 * offsets and memory addresses in what remains. Of course, the ELF
 * standard permits files to be organized in almost any order, so if a
 * pathological linker decided to put its section headers at the top,
 * sstrip would be useless on such executables.
  The name of the program.
  The name of the current file.
  A simple error-handling function. FALSE is always returned for the
 * convenience of the caller.
  A flag to signal the need for endian reversal.
  Get a value from the elf header, compensating for endianness.
  Set a value 'Y' in the elf header to 'X', compensating for endianness.
  A macro for I/O errors: The given error message is used only when
 * errno is not set.
  readelfheader() reads the ELF header into our global variable, and \
 * checks to make sure that this is in fact a file that we should be \
 * munging. \
  Verify the sizes of the ELF header and the program segment \
	 * header table entries. \
	  Finally, check the file type. \
	  readphdrtable() loads the program segment header table into memory. \
  getmemorysize() determines the offset of the last byte of the file \
 * that is referenced by an entry in the program segment header table. \
 * (Anything in the file after that point is not used when the program \
 * is executing, and thus can be safely discarded.) \
  Start by setting the size to include the ELF header and the \
	 * complete program segment header table. \
	  Then keep extending the size to include whatever data the \
	 * program segment header table references. \
	  modifyheaders() removes references to the section header table if \
 * it was stripped, and reduces program header table entries that \
 * included truncated bytes at the end of the file. \
  If the section header table is gone, then remove all references \
	 * to it in the ELF header. \
	  The program adjusts the file size of any segment that was \
	 * truncated. The case of a segment being completely stripped out \
	 * is handled separately. \
	  commitchanges() writes the new headers back to the original file \
 * and sets the file to its new size. \
  Save the changes to the ELF header, if any. \
	  Save the changes to the program segment header table, if any. \
	  Eleventh-hour sanity check: don't truncate before the end of \
	 * the program segment header table. \
	  Chop off the end of the file. \
	  First elements of Elf32_Ehdr and Elf64_Ehdr are common.
  Check the ELF signature.
	  Compare the file's class and endianness with the program's.
	  		fprintf(stderr, "ELF file has different endianness.\n");  		fprintf(stderr, "ELF file has different endianness.\n");  Check the target architecture.
	 	 if (EGET(ehdr->e_machine) != ELF_ARCH) {  		/\* return err("ELF file created for different architecture."); *\/  		fprintf(stderr, "ELF file created for different architecture.\n");  	}  truncatezeros() examines the bytes at the end of the file's
 * size-to-be, and reduces the size to exclude any trailing zero
 * bytes.
  Sanity check.
	  main() loops over the cmdline arguments, leaving all the real work
 * to the other functions.
 