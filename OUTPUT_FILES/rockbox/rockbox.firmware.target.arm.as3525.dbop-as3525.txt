**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2009 by Bertrik Sikken
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** doesn't work with the new ams sansas so far and is not needed  read the DBOP data pins  make sure that the DBOP FIFO is empty  write DBOP_DOUT to pre-charge DBOP data lines with a defined level  no strobe towards lcd  tri-state output  enw=1 (enable write)  ow=1 (16-bit data width)  two additional writes to precharge longer get rid of the read noise  perform a DBOP read  tri-state output  strd=1 (start read)  ow=1 (16-bit data width)  rs_t=31 (read DBOP at end of cycle)  restore previous values  for the debug menu  bits 14:13 2 serial half words 2 serial bytes 2 serial half words  1 serial half word  need to do a single 16bit write beforehand if the address is
         * not word aligned or count is 1, switch to 16bit mode if needed  from here, 32bit transfers are save
     * set it to transfer 4*(outputwidth) units at a time,
     * if bit 12 is set it only does 2 halfwords though (we never set it)
     * switch to 32bit output if needed  Wait if push fifo is full  While push fifo is not empty  due to the 32bit alignment requirement or uneven count,
     * we possibly need to do a 16bit transfer at the end also **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2009 by Bertrik Sikken
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** doesn't work with the new ams sansas so far and is not needed  read the DBOP data pins  make sure that the DBOP FIFO is empty  write DBOP_DOUT to pre-charge DBOP data lines with a defined level  no strobe towards lcd  tri-state output  enw=1 (enable write)  ow=1 (16-bit data width)  two additional writes to precharge longer get rid of the read noise  perform a DBOP read  tri-state output  strd=1 (start read)  ow=1 (16-bit data width)  rs_t=31 (read DBOP at end of cycle)  restore previous values  for the debug menu  bits 14:13 2 serial half words 2 serial bytes 2 serial half words  1 serial half word  need to do a single 16bit write beforehand if the address is
         * not word aligned or count is 1, switch to 16bit mode if needed  from here, 32bit transfers are save
     * set it to transfer 4*(outputwidth) units at a time,
     * if bit 12 is set it only does 2 halfwords though (we never set it)
     * switch to 32bit output if needed  Wait if push fifo is full  While push fifo is not empty  due to the 32bit alignment requirement or uneven count,
     * we possibly need to do a 16bit transfer at the end also **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2009 by Bertrik Sikken
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** doesn't work with the new ams sansas so far and is not needed  read the DBOP data pins  make sure that the DBOP FIFO is empty  write DBOP_DOUT to pre-charge DBOP data lines with a defined level  no strobe towards lcd  tri-state output  enw=1 (enable write)  ow=1 (16-bit data width)  two additional writes to precharge longer get rid of the read noise  perform a DBOP read  tri-state output  strd=1 (start read)  ow=1 (16-bit data width)  rs_t=31 (read DBOP at end of cycle)  restore previous values  for the debug menu  bits 14:13 2 serial half words 2 serial bytes 2 serial half words  1 serial half word  need to do a single 16bit write beforehand if the address is
         * not word aligned or count is 1, switch to 16bit mode if needed  from here, 32bit transfers are save
     * set it to transfer 4*(outputwidth) units at a time,
     * if bit 12 is set it only does 2 halfwords though (we never set it)
     * switch to 32bit output if needed  Wait if push fifo is full  While push fifo is not empty  due to the 32bit alignment requirement or uneven count,
     * we possibly need to do a 16bit transfer at the end also 