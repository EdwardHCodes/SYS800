
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org

    MMX assembler version of SDL_MixAudio for signed little endian 16 bit samples and signed 8 bit samples
    Copyright 2002 Stephane Marchesin (stephane.marchesin@wanadoo.fr)
    This code is licensed under the LGPL (see COPYING for details)
 
    Assumes buffer size in bytes is a multiple of 16
    Assumes SDL_MIX_MAXVOLUME = 128
**********************************************
*   Mixing for 16 bit signed buffers
********************************************** buggy, so we're disabling them. --ryan.  eax = volume  edx = size  process 16 bytes per iteration = 8 samples  mm0 = vol|vol|vol|vol  mm1 = a|b|c|d  mm2 = a|b|c|d  mm4 = e|f|g|h  pré charger le buffer dst dans mm7  mm7 = dst[0]  multiplier par le volume  mm1 = l(a*v)|l(b*v)|l(c*v)|l(d*v)  mm2 = h(a*v)|h(b*v)|h(c*v)|h(d*v)  mm5 = e|f|g|h  mm4 = l(e*v)|l(f*v)|l(g*v)|l(h*v)  mm5 = h(e*v)|h(f*v)|h(g*v)|h(h*v)  mm3 = l(a*v)|l(b*v)|l(c*v)|l(d*v)  mm1 = a*v|b*v  mm6 = l(e*v)|l(f*v)|l(g*v)|l(h*v)  mm3 = c*v|d*v  mm4 = e*f|f*v  mm6 = g*v|h*v  pré charger le buffer dst dans mm5  mm5 = dst[1]  diviser par 128  mm1 = a*v/128|b*v/128 , 128 = SDL_MIX_MAXVOLUME  mm3 = c*v/128|d*v/128  mm4 = e*v/128|f*v/128  mm1 = le sample avec le volume modifié  mm3 = s(a*v|b*v|c*v|d*v)  mm6= g*v/128|h*v/128  mm3 = adjust_volume(src)+dst  mm4 = le sample avec le volume modifié  mm6 = s(e*v|f*v|g*v|h*v)  mm6 = adjust_volume(src)+dst //////////////////////////////////////////////  Mixing for 8 bit signed buffers //////////////////////////////////////////////  eax = volume  edx = size  process 8 bytes per iteration = 8 samples  mm2 = 0  mm1 = a|b|c|d|e|f|g|h  mm3 = a|b|c|d|e|f|g|h  on va faire le "sign extension" en faisant un cmp avec 0 qui retourne 1 si <0, 0 si >0  mm2 = 11111111|00000000|00000000....  mm1 = 0|a|0|b|0|c|0|d  mm3 = 0|e|0|f|0|g|0|h  mm2 = destination  mm1 = v*a|v*b|v*c|v*d  mm3 = v*e|v*f|v*g|v*h  mm1 = v*a/128|v*b/128|v*c/128|v*d/128   mm3 = v*e/128|v*f/128|v*g/128|v*h/128  mm1 = v*a/128|v*b/128|v*c/128|v*d/128|v*e/128|v*f/128|v*g/128|v*h/128  add to destination buffer  store back to ram 
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org

    MMX assembler version of SDL_MixAudio for signed little endian 16 bit samples and signed 8 bit samples
    Copyright 2002 Stephane Marchesin (stephane.marchesin@wanadoo.fr)
    This code is licensed under the LGPL (see COPYING for details)
 
    Assumes buffer size in bytes is a multiple of 16
    Assumes SDL_MIX_MAXVOLUME = 128
**********************************************
*   Mixing for 16 bit signed buffers
********************************************** buggy, so we're disabling them. --ryan.  eax = volume  edx = size  process 16 bytes per iteration = 8 samples  mm0 = vol|vol|vol|vol  mm1 = a|b|c|d  mm2 = a|b|c|d  mm4 = e|f|g|h  pré charger le buffer dst dans mm7  mm7 = dst[0]  multiplier par le volume  mm1 = l(a*v)|l(b*v)|l(c*v)|l(d*v)  mm2 = h(a*v)|h(b*v)|h(c*v)|h(d*v)  mm5 = e|f|g|h  mm4 = l(e*v)|l(f*v)|l(g*v)|l(h*v)  mm5 = h(e*v)|h(f*v)|h(g*v)|h(h*v)  mm3 = l(a*v)|l(b*v)|l(c*v)|l(d*v)  mm1 = a*v|b*v  mm6 = l(e*v)|l(f*v)|l(g*v)|l(h*v)  mm3 = c*v|d*v  mm4 = e*f|f*v  mm6 = g*v|h*v  pré charger le buffer dst dans mm5  mm5 = dst[1]  diviser par 128  mm1 = a*v/128|b*v/128 , 128 = SDL_MIX_MAXVOLUME  mm3 = c*v/128|d*v/128  mm4 = e*v/128|f*v/128  mm1 = le sample avec le volume modifié  mm3 = s(a*v|b*v|c*v|d*v)  mm6= g*v/128|h*v/128  mm3 = adjust_volume(src)+dst  mm4 = le sample avec le volume modifié  mm6 = s(e*v|f*v|g*v|h*v)  mm6 = adjust_volume(src)+dst //////////////////////////////////////////////  Mixing for 8 bit signed buffers //////////////////////////////////////////////  eax = volume  edx = size  process 8 bytes per iteration = 8 samples  mm2 = 0  mm1 = a|b|c|d|e|f|g|h  mm3 = a|b|c|d|e|f|g|h  on va faire le "sign extension" en faisant un cmp avec 0 qui retourne 1 si <0, 0 si >0  mm2 = 11111111|00000000|00000000....  mm1 = 0|a|0|b|0|c|0|d  mm3 = 0|e|0|f|0|g|0|h  mm2 = destination  mm1 = v*a|v*b|v*c|v*d  mm3 = v*e|v*f|v*g|v*h  mm1 = v*a/128|v*b/128|v*c/128|v*d/128   mm3 = v*e/128|v*f/128|v*g/128|v*h/128  mm1 = v*a/128|v*b/128|v*c/128|v*d/128|v*e/128|v*f/128|v*g/128|v*h/128  add to destination buffer  store back to ram 
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org

    MMX assembler version of SDL_MixAudio for signed little endian 16 bit samples and signed 8 bit samples
    Copyright 2002 Stephane Marchesin (stephane.marchesin@wanadoo.fr)
    This code is licensed under the LGPL (see COPYING for details)
 
    Assumes buffer size in bytes is a multiple of 16
    Assumes SDL_MIX_MAXVOLUME = 128
**********************************************
*   Mixing for 16 bit signed buffers
********************************************** buggy, so we're disabling them. --ryan.  eax = volume  edx = size  process 16 bytes per iteration = 8 samples  mm0 = vol|vol|vol|vol  mm1 = a|b|c|d  mm2 = a|b|c|d  mm4 = e|f|g|h  pré charger le buffer dst dans mm7  mm7 = dst[0]  multiplier par le volume  mm1 = l(a*v)|l(b*v)|l(c*v)|l(d*v)  mm2 = h(a*v)|h(b*v)|h(c*v)|h(d*v)  mm5 = e|f|g|h  mm4 = l(e*v)|l(f*v)|l(g*v)|l(h*v)  mm5 = h(e*v)|h(f*v)|h(g*v)|h(h*v)  mm3 = l(a*v)|l(b*v)|l(c*v)|l(d*v)  mm1 = a*v|b*v  mm6 = l(e*v)|l(f*v)|l(g*v)|l(h*v)  mm3 = c*v|d*v  mm4 = e*f|f*v  mm6 = g*v|h*v  pré charger le buffer dst dans mm5  mm5 = dst[1]  diviser par 128  mm1 = a*v/128|b*v/128 , 128 = SDL_MIX_MAXVOLUME  mm3 = c*v/128|d*v/128  mm4 = e*v/128|f*v/128  mm1 = le sample avec le volume modifié  mm3 = s(a*v|b*v|c*v|d*v)  mm6= g*v/128|h*v/128  mm3 = adjust_volume(src)+dst  mm4 = le sample avec le volume modifié  mm6 = s(e*v|f*v|g*v|h*v)  mm6 = adjust_volume(src)+dst //////////////////////////////////////////////  Mixing for 8 bit signed buffers //////////////////////////////////////////////  eax = volume  edx = size  process 8 bytes per iteration = 8 samples  mm2 = 0  mm1 = a|b|c|d|e|f|g|h  mm3 = a|b|c|d|e|f|g|h  on va faire le "sign extension" en faisant un cmp avec 0 qui retourne 1 si <0, 0 si >0  mm2 = 11111111|00000000|00000000....  mm1 = 0|a|0|b|0|c|0|d  mm3 = 0|e|0|f|0|g|0|h  mm2 = destination  mm1 = v*a|v*b|v*c|v*d  mm3 = v*e|v*f|v*g|v*h  mm1 = v*a/128|v*b/128|v*c/128|v*d/128   mm3 = v*e/128|v*f/128|v*g/128|v*h/128  mm1 = v*a/128|v*b/128|v*c/128|v*d/128|v*e/128|v*f/128|v*g/128|v*h/128  add to destination buffer  store back to ram 