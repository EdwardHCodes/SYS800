**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * $Id$
 *
 * Copyright (C) 2005 by Andy Young
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** --- Local functions - declarations ---  --- Public functions - implementation ---  The FM chip has no pullup for SCL, so we have to bit-bang the
       I2C for that one.  The FM chip has no pullup for SCL, so we have to bit-bang the
       I2C for that one.  I2C Clock divisor = 160 => 124.1556 MHz / 2 / 160 = 388.08 kHz  Enable interface 1  secondary channel is handled in the interrupt driven ADC driver  Enable interface 1  Enable interface 2  iRiver firmware does this  Enable interface  second channel  End I2C session on the given interface. 
 * Writes bytes to a I2C device.
 *
 * Returns number of bytes successfully sent or a negative value on error.
 
 * Reads bytes from a I2C device.
 *
 * Returns number of bytes successfully received or a negative value on error.
  Switch to Rx mode  Turn on ACK generation if reading multiple bytes  Dummy read  Don't ACK the last byte to be read from the slave  Generate STOP before reading last byte received  --- Local functions - implementation ---  Begin I2C session on the given interface.
 *
 * Returns 0 on success, negative value on error.
  Wait for bus to become free  Generate START and prepare for write  Wait for slave to act on given I2C interface.
 *
 * Returns 0 on success, negative value on error.
  Clear interrupt flag  Write the given byte to the given I2C interface.
 *
 * Returns 0 on success, negative value on error.
  Check that transfer is complete  Check that the byte has been ACKed **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * $Id$
 *
 * Copyright (C) 2005 by Andy Young
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** --- Local functions - declarations ---  --- Public functions - implementation ---  The FM chip has no pullup for SCL, so we have to bit-bang the
       I2C for that one.  The FM chip has no pullup for SCL, so we have to bit-bang the
       I2C for that one.  I2C Clock divisor = 160 => 124.1556 MHz / 2 / 160 = 388.08 kHz  Enable interface 1  secondary channel is handled in the interrupt driven ADC driver  Enable interface 1  Enable interface 2  iRiver firmware does this  Enable interface  second channel  End I2C session on the given interface. 
 * Writes bytes to a I2C device.
 *
 * Returns number of bytes successfully sent or a negative value on error.
 
 * Reads bytes from a I2C device.
 *
 * Returns number of bytes successfully received or a negative value on error.
  Switch to Rx mode  Turn on ACK generation if reading multiple bytes  Dummy read  Don't ACK the last byte to be read from the slave  Generate STOP before reading last byte received  --- Local functions - implementation ---  Begin I2C session on the given interface.
 *
 * Returns 0 on success, negative value on error.
  Wait for bus to become free  Generate START and prepare for write  Wait for slave to act on given I2C interface.
 *
 * Returns 0 on success, negative value on error.
  Clear interrupt flag  Write the given byte to the given I2C interface.
 *
 * Returns 0 on success, negative value on error.
  Check that transfer is complete  Check that the byte has been ACKed **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * $Id$
 *
 * Copyright (C) 2005 by Andy Young
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** --- Local functions - declarations ---  --- Public functions - implementation ---  The FM chip has no pullup for SCL, so we have to bit-bang the
       I2C for that one.  The FM chip has no pullup for SCL, so we have to bit-bang the
       I2C for that one.  I2C Clock divisor = 160 => 124.1556 MHz / 2 / 160 = 388.08 kHz  Enable interface 1  secondary channel is handled in the interrupt driven ADC driver  Enable interface 1  Enable interface 2  iRiver firmware does this  Enable interface  second channel  End I2C session on the given interface. 
 * Writes bytes to a I2C device.
 *
 * Returns number of bytes successfully sent or a negative value on error.
 
 * Reads bytes from a I2C device.
 *
 * Returns number of bytes successfully received or a negative value on error.
  Switch to Rx mode  Turn on ACK generation if reading multiple bytes  Dummy read  Don't ACK the last byte to be read from the slave  Generate STOP before reading last byte received  --- Local functions - implementation ---  Begin I2C session on the given interface.
 *
 * Returns 0 on success, negative value on error.
  Wait for bus to become free  Generate START and prepare for write  Wait for slave to act on given I2C interface.
 *
 * Returns 0 on success, negative value on error.
  Clear interrupt flag  Write the given byte to the given I2C interface.
 *
 * Returns 0 on success, negative value on error.
  Check that transfer is complete  Check that the byte has been ACKed 