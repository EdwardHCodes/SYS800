**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006-2007 Thom Johansen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** For bishelf (bass/treble)  Each peaking filter  Each high/low shelving filter * 
 * Calculate first order shelving filter. Filter is not directly usable by the
 * filter_process() function.
 * @param cutoff shelf midpoint frequency. See eq_pk_coefs for format.
 * @param A decibel value multiplied by ten, describing gain/attenuation of
 * shelf. Max value is 24 dB.
 * @param low true for low-shelf filter, false for high-shelf filter.
 * @param c pointer to coefficient storage. Coefficients are s4.27 format.
  s3.28  10^(db/40), s3.28  0.25 .. 4.10  -1 .. 3.98  0.25 .. 4.10  -1 .. 3.98  0.25 .. 4.10  -3.98 .. 1  0.25 .. 4.10  -3.98 .. 1  0.24 .. 3.98, s2.29  0.063 .. 15.85  -15.85 .. 15.85  -1 .. 1 * 
 * Calculate second order section filter consisting of one low-shelf and one
 * high-shelf section.
 * @param cutoff_low low-shelf midpoint frequency. See filter_pk_coefs for format.
 * @param cutoff_high high-shelf midpoint frequency.
 * @param A_low decibel value multiplied by ten, describing gain/attenuation of
 * low-shelf part. Max value is 24 dB.
 * @param A_high decibel value multiplied by ten, describing gain/attenuation of
 * high-shelf part. Max value is 24 dB.
 * @param A decibel value multiplied by ten, describing additional overall gain.
 * @param c pointer to coefficient storage. Coefficients are s4.27 format.
  10^(db/20), s0.31  now we cascade the two first order filters to one second order filter
     * which can be used by filter_process(). these resulting coefficients have a
     * really wide numerical range, so we use a fixed point format which will
     * work for the selected cutoff frequencies (in tone_controls.c) only.
      Coef calculation taken from Audio-EQ-Cookbook.txt by Robert Bristow-Johnson.
 * Slightly faster calculation can be done by deriving forms which use tan()
 * instead of cos() and sin(), but the latter are far easier to use when doing
 * fixed point math, and performance is not a big point in the calculation part.
 * All the 'a' filter coefficients are negated so we can use only additions
 * in the filtering equation.
 * 
 * Calculate second order section peaking filter coefficients.
 * @param cutoff a value from 0 to 0x80000000, where 0 represents 0 Hz and
 * 0x80000000 represents the Nyquist frequency (samplerate/2).
 * @param Q Q factor value multiplied by ten. Lower bound is artificially set
 * at 0.5.
 * @param db decibel value multiplied by ten, describing gain/attenuation at
 * peak freq. Max value is 24 dB.
 * @param c pointer to coefficient storage. Coefficients are s3.28 format.
  s3.28  10^(db/40), s2.29  s1.30  these are all s3.28 format  possible numerical ranges are in comments by each coef  [1 .. 5]  [-2 .. 2]  [-3 .. 1]  [1 .. 5]  [-3 .. 1]  range of this is roughly [0.2 .. 1], but we'll never hit 1 completely  s0.31  [0.25 .. 4]  [-2 .. 2]  [-2.4 .. 1]  [-2 .. 2]  [-0.6 .. 1] *
 * Calculate coefficients for lowshelf filter. Parameters are as for
 * filter_pk_coefs, but the coefficient format is s5.26 fixed point.
  s6.25  10^(db/80), s5.26  s2.29  s1.30  these are all s6.25 format  [0.1 .. 40]  [-16 .. 63.4]  [0 .. 31.7]  [0.5 .. 10]  [-16 .. 4]  [0 .. 8]  [0.1 .. 1.99]  s1.30  [0.06 .. 15.9]  [-2 .. 31.7]  [0 .. 15.9]  [-2 .. 2]  [0 .. 1] *
 * Calculate coefficients for highshelf filter. Parameters are as for
 * filter_pk_coefs, but the coefficient format is s5.26 fixed point.
  s6.25  10^(db/80), s5.26  s2.29  s1.30  these are all s6.25 format  [0.1 .. 40]  [-63.5 .. 16]  [0 .. 32]  [0.5 .. 10]  [-4 .. 16]  [0 .. 8]  [0.1 .. 1.99]  s1.30  [0 .. 16]  [-31.7 .. 2]  [0 .. 16]  [-2 .. 2]  [0 .. 1] *
 * Copy filter definition without destroying dst's history
 *
 * Clear filter sample history
 *
 * We realise the filters as a second order direct form 1 structure. Direct
 * form 1 was chosen because of better numerical properties for fixed point
 * implementations.
  Direct form 1 filtering code.
       y[n] = b0*x[i] + b1*x[i - 1] + b2*x[i - 2] + a1*y[i - 1] + a2*y[i - 2],
       where y[] is output and x[] is input.
      CPU  ring buffer **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006-2007 Thom Johansen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** For bishelf (bass/treble)  Each peaking filter  Each high/low shelving filter * 
 * Calculate first order shelving filter. Filter is not directly usable by the
 * filter_process() function.
 * @param cutoff shelf midpoint frequency. See eq_pk_coefs for format.
 * @param A decibel value multiplied by ten, describing gain/attenuation of
 * shelf. Max value is 24 dB.
 * @param low true for low-shelf filter, false for high-shelf filter.
 * @param c pointer to coefficient storage. Coefficients are s4.27 format.
  s3.28  10^(db/40), s3.28  0.25 .. 4.10  -1 .. 3.98  0.25 .. 4.10  -1 .. 3.98  0.25 .. 4.10  -3.98 .. 1  0.25 .. 4.10  -3.98 .. 1  0.24 .. 3.98, s2.29  0.063 .. 15.85  -15.85 .. 15.85  -1 .. 1 * 
 * Calculate second order section filter consisting of one low-shelf and one
 * high-shelf section.
 * @param cutoff_low low-shelf midpoint frequency. See filter_pk_coefs for format.
 * @param cutoff_high high-shelf midpoint frequency.
 * @param A_low decibel value multiplied by ten, describing gain/attenuation of
 * low-shelf part. Max value is 24 dB.
 * @param A_high decibel value multiplied by ten, describing gain/attenuation of
 * high-shelf part. Max value is 24 dB.
 * @param A decibel value multiplied by ten, describing additional overall gain.
 * @param c pointer to coefficient storage. Coefficients are s4.27 format.
  10^(db/20), s0.31  now we cascade the two first order filters to one second order filter
     * which can be used by filter_process(). these resulting coefficients have a
     * really wide numerical range, so we use a fixed point format which will
     * work for the selected cutoff frequencies (in tone_controls.c) only.
      Coef calculation taken from Audio-EQ-Cookbook.txt by Robert Bristow-Johnson.
 * Slightly faster calculation can be done by deriving forms which use tan()
 * instead of cos() and sin(), but the latter are far easier to use when doing
 * fixed point math, and performance is not a big point in the calculation part.
 * All the 'a' filter coefficients are negated so we can use only additions
 * in the filtering equation.
 * 
 * Calculate second order section peaking filter coefficients.
 * @param cutoff a value from 0 to 0x80000000, where 0 represents 0 Hz and
 * 0x80000000 represents the Nyquist frequency (samplerate/2).
 * @param Q Q factor value multiplied by ten. Lower bound is artificially set
 * at 0.5.
 * @param db decibel value multiplied by ten, describing gain/attenuation at
 * peak freq. Max value is 24 dB.
 * @param c pointer to coefficient storage. Coefficients are s3.28 format.
  s3.28  10^(db/40), s2.29  s1.30  these are all s3.28 format  possible numerical ranges are in comments by each coef  [1 .. 5]  [-2 .. 2]  [-3 .. 1]  [1 .. 5]  [-3 .. 1]  range of this is roughly [0.2 .. 1], but we'll never hit 1 completely  s0.31  [0.25 .. 4]  [-2 .. 2]  [-2.4 .. 1]  [-2 .. 2]  [-0.6 .. 1] *
 * Calculate coefficients for lowshelf filter. Parameters are as for
 * filter_pk_coefs, but the coefficient format is s5.26 fixed point.
  s6.25  10^(db/80), s5.26  s2.29  s1.30  these are all s6.25 format  [0.1 .. 40]  [-16 .. 63.4]  [0 .. 31.7]  [0.5 .. 10]  [-16 .. 4]  [0 .. 8]  [0.1 .. 1.99]  s1.30  [0.06 .. 15.9]  [-2 .. 31.7]  [0 .. 15.9]  [-2 .. 2]  [0 .. 1] *
 * Calculate coefficients for highshelf filter. Parameters are as for
 * filter_pk_coefs, but the coefficient format is s5.26 fixed point.
  s6.25  10^(db/80), s5.26  s2.29  s1.30  these are all s6.25 format  [0.1 .. 40]  [-63.5 .. 16]  [0 .. 32]  [0.5 .. 10]  [-4 .. 16]  [0 .. 8]  [0.1 .. 1.99]  s1.30  [0 .. 16]  [-31.7 .. 2]  [0 .. 16]  [-2 .. 2]  [0 .. 1] *
 * Copy filter definition without destroying dst's history
 *
 * Clear filter sample history
 *
 * We realise the filters as a second order direct form 1 structure. Direct
 * form 1 was chosen because of better numerical properties for fixed point
 * implementations.
  Direct form 1 filtering code.
       y[n] = b0*x[i] + b1*x[i - 1] + b2*x[i - 2] + a1*y[i - 1] + a2*y[i - 2],
       where y[] is output and x[] is input.
      CPU  ring buffer **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006-2007 Thom Johansen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** For bishelf (bass/treble)  Each peaking filter  Each high/low shelving filter * 
 * Calculate first order shelving filter. Filter is not directly usable by the
 * filter_process() function.
 * @param cutoff shelf midpoint frequency. See eq_pk_coefs for format.
 * @param A decibel value multiplied by ten, describing gain/attenuation of
 * shelf. Max value is 24 dB.
 * @param low true for low-shelf filter, false for high-shelf filter.
 * @param c pointer to coefficient storage. Coefficients are s4.27 format.
  s3.28  10^(db/40), s3.28  0.25 .. 4.10  -1 .. 3.98  0.25 .. 4.10  -1 .. 3.98  0.25 .. 4.10  -3.98 .. 1  0.25 .. 4.10  -3.98 .. 1  0.24 .. 3.98, s2.29  0.063 .. 15.85  -15.85 .. 15.85  -1 .. 1 * 
 * Calculate second order section filter consisting of one low-shelf and one
 * high-shelf section.
 * @param cutoff_low low-shelf midpoint frequency. See filter_pk_coefs for format.
 * @param cutoff_high high-shelf midpoint frequency.
 * @param A_low decibel value multiplied by ten, describing gain/attenuation of
 * low-shelf part. Max value is 24 dB.
 * @param A_high decibel value multiplied by ten, describing gain/attenuation of
 * high-shelf part. Max value is 24 dB.
 * @param A decibel value multiplied by ten, describing additional overall gain.
 * @param c pointer to coefficient storage. Coefficients are s4.27 format.
  10^(db/20), s0.31  now we cascade the two first order filters to one second order filter
     * which can be used by filter_process(). these resulting coefficients have a
     * really wide numerical range, so we use a fixed point format which will
     * work for the selected cutoff frequencies (in tone_controls.c) only.
      Coef calculation taken from Audio-EQ-Cookbook.txt by Robert Bristow-Johnson.
 * Slightly faster calculation can be done by deriving forms which use tan()
 * instead of cos() and sin(), but the latter are far easier to use when doing
 * fixed point math, and performance is not a big point in the calculation part.
 * All the 'a' filter coefficients are negated so we can use only additions
 * in the filtering equation.
 * 
 * Calculate second order section peaking filter coefficients.
 * @param cutoff a value from 0 to 0x80000000, where 0 represents 0 Hz and
 * 0x80000000 represents the Nyquist frequency (samplerate/2).
 * @param Q Q factor value multiplied by ten. Lower bound is artificially set
 * at 0.5.
 * @param db decibel value multiplied by ten, describing gain/attenuation at
 * peak freq. Max value is 24 dB.
 * @param c pointer to coefficient storage. Coefficients are s3.28 format.
  s3.28  10^(db/40), s2.29  s1.30  these are all s3.28 format  possible numerical ranges are in comments by each coef  [1 .. 5]  [-2 .. 2]  [-3 .. 1]  [1 .. 5]  [-3 .. 1]  range of this is roughly [0.2 .. 1], but we'll never hit 1 completely  s0.31  [0.25 .. 4]  [-2 .. 2]  [-2.4 .. 1]  [-2 .. 2]  [-0.6 .. 1] *
 * Calculate coefficients for lowshelf filter. Parameters are as for
 * filter_pk_coefs, but the coefficient format is s5.26 fixed point.
  s6.25  10^(db/80), s5.26  s2.29  s1.30  these are all s6.25 format  [0.1 .. 40]  [-16 .. 63.4]  [0 .. 31.7]  [0.5 .. 10]  [-16 .. 4]  [0 .. 8]  [0.1 .. 1.99]  s1.30  [0.06 .. 15.9]  [-2 .. 31.7]  [0 .. 15.9]  [-2 .. 2]  [0 .. 1] *
 * Calculate coefficients for highshelf filter. Parameters are as for
 * filter_pk_coefs, but the coefficient format is s5.26 fixed point.
  s6.25  10^(db/80), s5.26  s2.29  s1.30  these are all s6.25 format  [0.1 .. 40]  [-63.5 .. 16]  [0 .. 32]  [0.5 .. 10]  [-4 .. 16]  [0 .. 8]  [0.1 .. 1.99]  s1.30  [0 .. 16]  [-31.7 .. 2]  [0 .. 16]  [-2 .. 2]  [0 .. 1] *
 * Copy filter definition without destroying dst's history
 *
 * Clear filter sample history
 *
 * We realise the filters as a second order direct form 1 structure. Direct
 * form 1 was chosen because of better numerical properties for fixed point
 * implementations.
  Direct form 1 filtering code.
       y[n] = b0*x[i] + b1*x[i - 1] + b2*x[i - 2] + a1*y[i - 1] + a2*y[i - 2],
       where y[] is output and x[] is input.
      CPU  ring buffer 