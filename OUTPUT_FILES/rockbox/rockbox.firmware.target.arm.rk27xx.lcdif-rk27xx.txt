**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2011 Marcin Bukat
 * Copyright (C) 2012 Andrew Ryabinin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** dwdma linked list struct - hw defined
 * we don't use __attribute__((packed)) just because
 * all fields are 32bits and so are aligned
  array of structs which describes full screen update
 * each struct describes dma transfer for single line
  18 bit interface  g = ((data & 0x00000300) >> 2) | ((data & 0x000000e0) >> 3);  16 bit interface  Warning: datasheet addresses and OF addresses
     * don't match for HOR_ACT and VERT_ACT
      define horizonatal active region  define vertical active region  This lines define layout of data in lcdif internal buffer
     * LINEx_UVADDR = LINEx_YADDR + 1
     * buffer is organized as 2048 x 32bit
     * we use RGB565 (16 bits per pixel) so we pack 2 pixels
     * in every lcdbuffer mem cell
      alpha b111
     * stop at current frame complete
     * MCU mode
     * 24b RGB
      CSn/WEn/RDn signal timings  This loop seems to fix strange glitch where
     * whole lcd content was shifted ~4 lines verticaly
     * on second lcd_update call
      Setup buffered writes to lcd controler  configure pins to drive lcd in 18bit or 16bit mode  global enable  build LLPs  Public functions  Switch between lcdif bypass mode and buffered mode
 * used in private implementations of lcd_set_gram_area()
  Helper functions used to write commands
 * to lcd controler in bypass mode
 * used in controler specific implementations of:
 * lcd_sleep()
 * lcd_display_init()
  rockbox API functions  setup pins for lcd interface  init dwdma module  basic lcdc module configuration  min alowed transfer seems to be 4x4 pixels  whole framebuffer for now  Setup buffered writes to lcd controler  Wait for DMA transfer to finish **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2011 Marcin Bukat
 * Copyright (C) 2012 Andrew Ryabinin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** dwdma linked list struct - hw defined
 * we don't use __attribute__((packed)) just because
 * all fields are 32bits and so are aligned
  array of structs which describes full screen update
 * each struct describes dma transfer for single line
  18 bit interface  g = ((data & 0x00000300) >> 2) | ((data & 0x000000e0) >> 3);  16 bit interface  Warning: datasheet addresses and OF addresses
     * don't match for HOR_ACT and VERT_ACT
      define horizonatal active region  define vertical active region  This lines define layout of data in lcdif internal buffer
     * LINEx_UVADDR = LINEx_YADDR + 1
     * buffer is organized as 2048 x 32bit
     * we use RGB565 (16 bits per pixel) so we pack 2 pixels
     * in every lcdbuffer mem cell
      alpha b111
     * stop at current frame complete
     * MCU mode
     * 24b RGB
      CSn/WEn/RDn signal timings  This loop seems to fix strange glitch where
     * whole lcd content was shifted ~4 lines verticaly
     * on second lcd_update call
      Setup buffered writes to lcd controler  configure pins to drive lcd in 18bit or 16bit mode  global enable  build LLPs  Public functions  Switch between lcdif bypass mode and buffered mode
 * used in private implementations of lcd_set_gram_area()
  Helper functions used to write commands
 * to lcd controler in bypass mode
 * used in controler specific implementations of:
 * lcd_sleep()
 * lcd_display_init()
  rockbox API functions  setup pins for lcd interface  init dwdma module  basic lcdc module configuration  min alowed transfer seems to be 4x4 pixels  whole framebuffer for now  Setup buffered writes to lcd controler  Wait for DMA transfer to finish **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2011 Marcin Bukat
 * Copyright (C) 2012 Andrew Ryabinin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** dwdma linked list struct - hw defined
 * we don't use __attribute__((packed)) just because
 * all fields are 32bits and so are aligned
  array of structs which describes full screen update
 * each struct describes dma transfer for single line
  18 bit interface  g = ((data & 0x00000300) >> 2) | ((data & 0x000000e0) >> 3);  16 bit interface  Warning: datasheet addresses and OF addresses
     * don't match for HOR_ACT and VERT_ACT
      define horizonatal active region  define vertical active region  This lines define layout of data in lcdif internal buffer
     * LINEx_UVADDR = LINEx_YADDR + 1
     * buffer is organized as 2048 x 32bit
     * we use RGB565 (16 bits per pixel) so we pack 2 pixels
     * in every lcdbuffer mem cell
      alpha b111
     * stop at current frame complete
     * MCU mode
     * 24b RGB
      CSn/WEn/RDn signal timings  This loop seems to fix strange glitch where
     * whole lcd content was shifted ~4 lines verticaly
     * on second lcd_update call
      Setup buffered writes to lcd controler  configure pins to drive lcd in 18bit or 16bit mode  global enable  build LLPs  Public functions  Switch between lcdif bypass mode and buffered mode
 * used in private implementations of lcd_set_gram_area()
  Helper functions used to write commands
 * to lcd controler in bypass mode
 * used in controler specific implementations of:
 * lcd_sleep()
 * lcd_display_init()
  rockbox API functions  setup pins for lcd interface  init dwdma module  basic lcdc module configuration  min alowed transfer seems to be 4x4 pixels  whole framebuffer for now  Setup buffered writes to lcd controler  Wait for DMA transfer to finish 