
** $Id: ltablib.c,v 1.38.1.3 2008/02/14 16:46:58 roberto Exp $
** Library for Table Manipulation
** See Copyright Notice in lua.h
 function  1st argument  2nd argument  remove nil result  first key  function  key  value  remove value and result  first key  remove value  first empty element  where to insert new element  called with only 2 arguments  insert new element at the end  2nd argument is the position  `grow' array if necessary  move up elements  t[i] = t[i-1]  new size  t[pos] = v  position is outside bounds?  nothing to remove  t.n = n-1  result = t[pos]  t[pos] = t[pos+1]  t[e] = nil  add last value (if interval was not empty) 
** {======================================================
** Quicksort
** (based on `Algorithms in MODULA-3', Robert Sedgewick;
**  Addison-Wesley, 1993.)
 function?  -1 to compensate function  -2 to compensate function and `a'  a < b?  for tail recursion  sort elements a[l], a[(l+u)/2] and a[u]  a[u] < a[l]?  swap a[l] - a[u]  only 2 elements  a[i]<a[l]?  remove a[l]  a[u]<a[i]?  only 3 elements  Pivot  a[l] <= P == a[u-1] <= a[u], only need to sort from l+1 to u-2  invariant: a[l..i] <= P <= a[j..u]  repeat ++i until a[i] >= P  remove a[i]  repeat --j until a[j] <= P  remove a[j]  pop pivot, a[i], a[j]  swap pivot (a[u-1]) with a[i]  a[l..i-1] <= a[i] == P <= a[i+1..u]  adjust so that smaller half is in [j..i] and larger one in [l..u]  call recursively the smaller one  repeat the routine for the larger one  assume array is smaller than 2^40  is there a 2nd argument?  make sure there is two arguments  }====================================================== 
** $Id: ltablib.c,v 1.38.1.3 2008/02/14 16:46:58 roberto Exp $
** Library for Table Manipulation
** See Copyright Notice in lua.h
 function  1st argument  2nd argument  remove nil result  first key  function  key  value  remove value and result  first key  remove value  first empty element  where to insert new element  called with only 2 arguments  insert new element at the end  2nd argument is the position  `grow' array if necessary  move up elements  t[i] = t[i-1]  new size  t[pos] = v  position is outside bounds?  nothing to remove  t.n = n-1  result = t[pos]  t[pos] = t[pos+1]  t[e] = nil  add last value (if interval was not empty) 
** {======================================================
** Quicksort
** (based on `Algorithms in MODULA-3', Robert Sedgewick;
**  Addison-Wesley, 1993.)
 function?  -1 to compensate function  -2 to compensate function and `a'  a < b?  for tail recursion  sort elements a[l], a[(l+u)/2] and a[u]  a[u] < a[l]?  swap a[l] - a[u]  only 2 elements  a[i]<a[l]?  remove a[l]  a[u]<a[i]?  only 3 elements  Pivot  a[l] <= P == a[u-1] <= a[u], only need to sort from l+1 to u-2  invariant: a[l..i] <= P <= a[j..u]  repeat ++i until a[i] >= P  remove a[i]  repeat --j until a[j] <= P  remove a[j]  pop pivot, a[i], a[j]  swap pivot (a[u-1]) with a[i]  a[l..i-1] <= a[i] == P <= a[i+1..u]  adjust so that smaller half is in [j..i] and larger one in [l..u]  call recursively the smaller one  repeat the routine for the larger one  assume array is smaller than 2^40  is there a 2nd argument?  make sure there is two arguments  }====================================================== 
** $Id: ltablib.c,v 1.38.1.3 2008/02/14 16:46:58 roberto Exp $
** Library for Table Manipulation
** See Copyright Notice in lua.h
 function  1st argument  2nd argument  remove nil result  first key  function  key  value  remove value and result  first key  remove value  first empty element  where to insert new element  called with only 2 arguments  insert new element at the end  2nd argument is the position  `grow' array if necessary  move up elements  t[i] = t[i-1]  new size  t[pos] = v  position is outside bounds?  nothing to remove  t.n = n-1  result = t[pos]  t[pos] = t[pos+1]  t[e] = nil  add last value (if interval was not empty) 
** {======================================================
** Quicksort
** (based on `Algorithms in MODULA-3', Robert Sedgewick;
**  Addison-Wesley, 1993.)
 function?  -1 to compensate function  -2 to compensate function and `a'  a < b?  for tail recursion  sort elements a[l], a[(l+u)/2] and a[u]  a[u] < a[l]?  swap a[l] - a[u]  only 2 elements  a[i]<a[l]?  remove a[l]  a[u]<a[i]?  only 3 elements  Pivot  a[l] <= P == a[u-1] <= a[u], only need to sort from l+1 to u-2  invariant: a[l..i] <= P <= a[j..u]  repeat ++i until a[i] >= P  remove a[i]  repeat --j until a[j] <= P  remove a[j]  pop pivot, a[i], a[j]  swap pivot (a[u-1]) with a[i]  a[l..i-1] <= a[i] == P <= a[i+1..u]  adjust so that smaller half is in [j..i] and larger one in [l..u]  call recursively the smaller one  repeat the routine for the larger one  assume array is smaller than 2^40  is there a 2nd argument?  make sure there is two arguments  }====================================================== 