**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2012 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** Driver for the Freescale MPR121 Capacitive Proximity Sensor  NOTE on the architecture of the driver
 *
 * All non-time-critical operations (setup, gpio/pwm changes) are done with
 * blocking i2c transfers to make the code simpler. Since reading the touch
 * status is time critical, it is done asynchronously: when the IRQ pin is
 * asserted, it will disable IRQ pin sensing and trigger an asynchronous i2c
 * transfer to read touch status. When the transfer finishes, the driver will
 * renable IRQ pin sensing.  touch bitmask as reported by mpr121  async transfer to read touch status  buffer for async transfer operation  buffer for async transfer operation  put status in the global variable  start sensing IRQ pin again  NOTE the callback will not be fired until interrupt is enabled back.
     *
     * now setup an asynchronous i2c transfer to read touch status register,
     * this is a readmem operation with a first stage to select register
     * and a second stage to read status (2 bytes)  set touch status register address  soft reset  enable interrupt  stop mode  write baseline values  write eleprox bv  write global fields  touch & release thresholds  debounce  analog-front end and filters  electrode charge  Auto-Configuration  electrode configuration  gpio config **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2012 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** Driver for the Freescale MPR121 Capacitive Proximity Sensor  NOTE on the architecture of the driver
 *
 * All non-time-critical operations (setup, gpio/pwm changes) are done with
 * blocking i2c transfers to make the code simpler. Since reading the touch
 * status is time critical, it is done asynchronously: when the IRQ pin is
 * asserted, it will disable IRQ pin sensing and trigger an asynchronous i2c
 * transfer to read touch status. When the transfer finishes, the driver will
 * renable IRQ pin sensing.  touch bitmask as reported by mpr121  async transfer to read touch status  buffer for async transfer operation  buffer for async transfer operation  put status in the global variable  start sensing IRQ pin again  NOTE the callback will not be fired until interrupt is enabled back.
     *
     * now setup an asynchronous i2c transfer to read touch status register,
     * this is a readmem operation with a first stage to select register
     * and a second stage to read status (2 bytes)  set touch status register address  soft reset  enable interrupt  stop mode  write baseline values  write eleprox bv  write global fields  touch & release thresholds  debounce  analog-front end and filters  electrode charge  Auto-Configuration  electrode configuration  gpio config **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2012 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** Driver for the Freescale MPR121 Capacitive Proximity Sensor  NOTE on the architecture of the driver
 *
 * All non-time-critical operations (setup, gpio/pwm changes) are done with
 * blocking i2c transfers to make the code simpler. Since reading the touch
 * status is time critical, it is done asynchronously: when the IRQ pin is
 * asserted, it will disable IRQ pin sensing and trigger an asynchronous i2c
 * transfer to read touch status. When the transfer finishes, the driver will
 * renable IRQ pin sensing.  touch bitmask as reported by mpr121  async transfer to read touch status  buffer for async transfer operation  buffer for async transfer operation  put status in the global variable  start sensing IRQ pin again  NOTE the callback will not be fired until interrupt is enabled back.
     *
     * now setup an asynchronous i2c transfer to read touch status register,
     * this is a readmem operation with a first stage to select register
     * and a second stage to read status (2 bytes)  set touch status register address  soft reset  enable interrupt  stop mode  write baseline values  write eleprox bv  write global fields  touch & release thresholds  debounce  analog-front end and filters  electrode charge  Auto-Configuration  electrode configuration  gpio config 