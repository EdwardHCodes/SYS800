*
	 * The "current" patient, used to determine if the patient has changed
	 TODO: Stop listening to the BP waveform for efficiency?Rely on addition of metrics to add devices...Flow rate published - add to panel.  addPumpToMainPanel avoids duplication of devices anyway,so just call it here....and removal of devices to remove devices.log.info("udi " + c.unique_device_identifier + " is MRN=" + mrnPartition);
		            	 * The patient has definitely changed - even if the selected patient is "Unassigned",
		            	 * then that "Patient" has an ID
		            	 Nothing else to do.Patient has changeddeviceUdiToPatientMRN.put(c.unique_device_identifier, p);*
	 * Use this to allow access to the numeric sample that has a listener attached.
	 * Then if the pump is changed, the listener can be detached from the previous numeric
	 
	class SampleValuesChangeListener implements ChangeListener<Number[]> {

		@Override
		public void changed(ObservableValue<? extends Number[]> observable, Number[] oldValue, Number[] newValue) {
			//Ignore the old values.  Just get new ones.
			float[] minMax=getMinAndMax(newValue);
			//System.err.println("got minMax as "+minMax[0]+ " and "+minMax[1]);
			diastolic.setText(Integer.toString((int)minMax[0]));
			systolic.setText(Integer.toString((int)minMax[1]));
			/*
			 * https://nursingcenter.com/ncblog/december-2011/calculating-the-map
			 
			float meanCalc=(minMax[1]+(2*minMax[0]))/3;
			mean.setText(Integer.toString((int)meanCalc));
		}
	}
	
	SampleValuesChangeListener bpArrayListener=new SampleValuesChangeListener();
	*
	 * Use this to allow access to the array sample that has a listener attached.
	 * Then if the BP monitor is changed, the listener can be detached from the previous sample
	 
		if(currentBPSample!=null) {
			currentBPSample.valuesProperty().removeListener(bpArrayListener);
		}
		No device selected and/or available - can happen when patient is changed and no devices for that patient
		samples.forEach( s-> {
			if (! s.getUnique_device_identifier().contentEquals(newDevice.getUDI())) return;	//Some other device.
			//This sample is from the current device.
			if(s.getMetric_id().equals(ARTERIAL)) {
				s.valuesProperty().addListener(bpArrayListener);
				currentBPSample=s;
			}
		});
		*
	 * It barely seems worth a class, but it is one...
	 * @author Simon
	 *
	 *
		 * How long to sleep before asking for the given rate
		 *
		 * The rate to ask for.
		 *
	 * The "current" patient, used to determine if the patient has changed
	 TODO: Stop listening to the BP waveform for efficiency?Rely on addition of metrics to add devices...Flow rate published - add to panel.  addPumpToMainPanel avoids duplication of devices anyway,so just call it here....and removal of devices to remove devices.log.info("udi " + c.unique_device_identifier + " is MRN=" + mrnPartition);
		            	 * The patient has definitely changed - even if the selected patient is "Unassigned",
		            	 * then that "Patient" has an ID
		            	 Nothing else to do.Patient has changeddeviceUdiToPatientMRN.put(c.unique_device_identifier, p);*
	 * Use this to allow access to the numeric sample that has a listener attached.
	 * Then if the pump is changed, the listener can be detached from the previous numeric
	 
	class SampleValuesChangeListener implements ChangeListener<Number[]> {

		@Override
		public void changed(ObservableValue<? extends Number[]> observable, Number[] oldValue, Number[] newValue) {
			//Ignore the old values.  Just get new ones.
			float[] minMax=getMinAndMax(newValue);
			//System.err.println("got minMax as "+minMax[0]+ " and "+minMax[1]);
			diastolic.setText(Integer.toString((int)minMax[0]));
			systolic.setText(Integer.toString((int)minMax[1]));
			/*
			 * https://nursingcenter.com/ncblog/december-2011/calculating-the-map
			 
			float meanCalc=(minMax[1]+(2*minMax[0]))/3;
			mean.setText(Integer.toString((int)meanCalc));
		}
	}
	
	SampleValuesChangeListener bpArrayListener=new SampleValuesChangeListener();
	*
	 * Use this to allow access to the array sample that has a listener attached.
	 * Then if the BP monitor is changed, the listener can be detached from the previous sample
	 
		if(currentBPSample!=null) {
			currentBPSample.valuesProperty().removeListener(bpArrayListener);
		}
		No device selected and/or available - can happen when patient is changed and no devices for that patient
		samples.forEach( s-> {
			if (! s.getUnique_device_identifier().contentEquals(newDevice.getUDI())) return;	//Some other device.
			//This sample is from the current device.
			if(s.getMetric_id().equals(ARTERIAL)) {
				s.valuesProperty().addListener(bpArrayListener);
				currentBPSample=s;
			}
		});
		*
	 * It barely seems worth a class, but it is one...
	 * @author Simon
	 *
	 *
		 * How long to sleep before asking for the given rate
		 *
		 * The rate to ask for.
		 *
	 * The "current" patient, used to determine if the patient has changed
	 TODO: Stop listening to the BP waveform for efficiency?Rely on addition of metrics to add devices...Flow rate published - add to panel.  addPumpToMainPanel avoids duplication of devices anyway,so just call it here....and removal of devices to remove devices.log.info("udi " + c.unique_device_identifier + " is MRN=" + mrnPartition);
		            	 * The patient has definitely changed - even if the selected patient is "Unassigned",
		            	 * then that "Patient" has an ID
		            	 Nothing else to do.Patient has changeddeviceUdiToPatientMRN.put(c.unique_device_identifier, p);*
	 * Use this to allow access to the numeric sample that has a listener attached.
	 * Then if the pump is changed, the listener can be detached from the previous numeric
	 
	class SampleValuesChangeListener implements ChangeListener<Number[]> {

		@Override
		public void changed(ObservableValue<? extends Number[]> observable, Number[] oldValue, Number[] newValue) {
			//Ignore the old values.  Just get new ones.
			float[] minMax=getMinAndMax(newValue);
			//System.err.println("got minMax as "+minMax[0]+ " and "+minMax[1]);
			diastolic.setText(Integer.toString((int)minMax[0]));
			systolic.setText(Integer.toString((int)minMax[1]));
			/*
			 * https://nursingcenter.com/ncblog/december-2011/calculating-the-map
			 
			float meanCalc=(minMax[1]+(2*minMax[0]))/3;
			mean.setText(Integer.toString((int)meanCalc));
		}
	}
	
	SampleValuesChangeListener bpArrayListener=new SampleValuesChangeListener();
	*
	 * Use this to allow access to the array sample that has a listener attached.
	 * Then if the BP monitor is changed, the listener can be detached from the previous sample
	 
		if(currentBPSample!=null) {
			currentBPSample.valuesProperty().removeListener(bpArrayListener);
		}
		No device selected and/or available - can happen when patient is changed and no devices for that patient
		samples.forEach( s-> {
			if (! s.getUnique_device_identifier().contentEquals(newDevice.getUDI())) return;	//Some other device.
			//This sample is from the current device.
			if(s.getMetric_id().equals(ARTERIAL)) {
				s.valuesProperty().addListener(bpArrayListener);
				currentBPSample=s;
			}
		});
		*
	 * It barely seems worth a class, but it is one...
	 * @author Simon
	 *
	 *
		 * How long to sleep before asking for the given rate
		 *
		 * The rate to ask for.
		 *
	 * The "current" patient, used to determine if the patient has changed
	 TODO: Stop listening to the BP waveform for efficiency?Rely on addition of metrics to add devices...Flow rate published - add to panel.  addPumpToMainPanel avoids duplication of devices anyway,so just call it here....and removal of devices to remove devices.log.info("udi " + c.unique_device_identifier + " is MRN=" + mrnPartition);
		            	 * The patient has definitely changed - even if the selected patient is "Unassigned",
		            	 * then that "Patient" has an ID
		            	 Nothing else to do.Patient has changeddeviceUdiToPatientMRN.put(c.unique_device_identifier, p);*
	 * Use this to allow access to the numeric sample that has a listener attached.
	 * Then if the pump is changed, the listener can be detached from the previous numeric
	 
	class SampleValuesChangeListener implements ChangeListener<Number[]> {

		@Override
		public void changed(ObservableValue<? extends Number[]> observable, Number[] oldValue, Number[] newValue) {
			//Ignore the old values.  Just get new ones.
			float[] minMax=getMinAndMax(newValue);
			//System.err.println("got minMax as "+minMax[0]+ " and "+minMax[1]);
			diastolic.setText(Integer.toString((int)minMax[0]));
			systolic.setText(Integer.toString((int)minMax[1]));
			/*
			 * https://nursingcenter.com/ncblog/december-2011/calculating-the-map
			 
			float meanCalc=(minMax[1]+(2*minMax[0]))/3;
			mean.setText(Integer.toString((int)meanCalc));
		}
	}
	
	SampleValuesChangeListener bpArrayListener=new SampleValuesChangeListener();
	*
	 * Use this to allow access to the array sample that has a listener attached.
	 * Then if the BP monitor is changed, the listener can be detached from the previous sample
	 
		if(currentBPSample!=null) {
			currentBPSample.valuesProperty().removeListener(bpArrayListener);
		}
		No device selected and/or available - can happen when patient is changed and no devices for that patient
		samples.forEach( s-> {
			if (! s.getUnique_device_identifier().contentEquals(newDevice.getUDI())) return;	//Some other device.
			//This sample is from the current device.
			if(s.getMetric_id().equals(ARTERIAL)) {
				s.valuesProperty().addListener(bpArrayListener);
				currentBPSample=s;
			}
		});
		*
	 * It barely seems worth a class, but it is one...
	 * @author Simon
	 *
	 *
		 * How long to sleep before asking for the given rate
		 *
		 * The rate to ask for.
		 