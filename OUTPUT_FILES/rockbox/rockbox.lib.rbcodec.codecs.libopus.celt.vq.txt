 Copyright (c) 2007-2008 CSIRO
   Copyright (c) 2007-2009 Xiph.Org Foundation
   Written by Jean-Marc Valin 
   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

   - Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

   - Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
   OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 OVERRIDE_vq_exp_rotation1   sin(theta)  This is just a simple (equivalent) way of computing sqrt(len/stride) with rounding.
         It's basically incrementing long as (stride2+0.5)^2 < len/stride. NOTE: As a minor optimization, we could be passing around log2(B), not B, for both this and for
      extract_collapse_mask().* Takes the pitch vector and the decoded residual vector, computes the gain
    that will give ||p+g*y||=1 and mixes the residual with the pitch. NOTE: As a minor optimization, we could be passing around log2(B), not B, for both this and for
      exp_rotation(). Get rid of the sign  Do a pre-search by projecting on the pyramid  If X is too small, just replace it with a pulse at 0  Prevents infinities and NaNs from causing too many pulses
         to be allocated. 64 is an approximation of infinity here.  It's really important to round *towards zero* here  This should never happen, but just in case it does (e.g. on silence)
      we fill the first bin with pulses.  The squared magnitude term gets added anyway, so we might as well
         add it outside the loop  Temporary sums of the new pulse(s)  We're multiplying y[j] by two so we don't have to do it here  Approximate score: we maximise Rxy/sqrt(Ryy) (we're guaranteed that
            Rxy is positive because the sign is pre-computed)  The idea is to check for num/den >= best_num/best_den, but that way
            we can do it without any division  OPT: Make sure to use conditional moves here  Updating the sums of the new pulse(s)  We're multiplying y[j] by two so we don't have to do it here  Only now that we've made the final choice, update y/iy  Multiplying y[j] by 2 so we don't have to do it everywhere else  Put the original sign back * Decode pulse vector and combine the result with the pitch vector to produce
    the final normalised signal in the current band. return celt_sqrt(E); OVERRIDE_renormalise_vector  0.63662 = 2/pi  Copyright (c) 2007-2008 CSIRO
   Copyright (c) 2007-2009 Xiph.Org Foundation
   Written by Jean-Marc Valin 
   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

   - Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

   - Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
   OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 OVERRIDE_vq_exp_rotation1   sin(theta)  This is just a simple (equivalent) way of computing sqrt(len/stride) with rounding.
         It's basically incrementing long as (stride2+0.5)^2 < len/stride. NOTE: As a minor optimization, we could be passing around log2(B), not B, for both this and for
      extract_collapse_mask().* Takes the pitch vector and the decoded residual vector, computes the gain
    that will give ||p+g*y||=1 and mixes the residual with the pitch. NOTE: As a minor optimization, we could be passing around log2(B), not B, for both this and for
      exp_rotation(). Get rid of the sign  Do a pre-search by projecting on the pyramid  If X is too small, just replace it with a pulse at 0  Prevents infinities and NaNs from causing too many pulses
         to be allocated. 64 is an approximation of infinity here.  It's really important to round *towards zero* here  This should never happen, but just in case it does (e.g. on silence)
      we fill the first bin with pulses.  The squared magnitude term gets added anyway, so we might as well
         add it outside the loop  Temporary sums of the new pulse(s)  We're multiplying y[j] by two so we don't have to do it here  Approximate score: we maximise Rxy/sqrt(Ryy) (we're guaranteed that
            Rxy is positive because the sign is pre-computed)  The idea is to check for num/den >= best_num/best_den, but that way
            we can do it without any division  OPT: Make sure to use conditional moves here  Updating the sums of the new pulse(s)  We're multiplying y[j] by two so we don't have to do it here  Only now that we've made the final choice, update y/iy  Multiplying y[j] by 2 so we don't have to do it everywhere else  Put the original sign back * Decode pulse vector and combine the result with the pitch vector to produce
    the final normalised signal in the current band. return celt_sqrt(E); OVERRIDE_renormalise_vector  0.63662 = 2/pi  Copyright (c) 2007-2008 CSIRO
   Copyright (c) 2007-2009 Xiph.Org Foundation
   Written by Jean-Marc Valin 
   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

   - Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

   - Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
   OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 OVERRIDE_vq_exp_rotation1   sin(theta)  This is just a simple (equivalent) way of computing sqrt(len/stride) with rounding.
         It's basically incrementing long as (stride2+0.5)^2 < len/stride. NOTE: As a minor optimization, we could be passing around log2(B), not B, for both this and for
      extract_collapse_mask().* Takes the pitch vector and the decoded residual vector, computes the gain
    that will give ||p+g*y||=1 and mixes the residual with the pitch. NOTE: As a minor optimization, we could be passing around log2(B), not B, for both this and for
      exp_rotation(). Get rid of the sign  Do a pre-search by projecting on the pyramid  If X is too small, just replace it with a pulse at 0  Prevents infinities and NaNs from causing too many pulses
         to be allocated. 64 is an approximation of infinity here.  It's really important to round *towards zero* here  This should never happen, but just in case it does (e.g. on silence)
      we fill the first bin with pulses.  The squared magnitude term gets added anyway, so we might as well
         add it outside the loop  Temporary sums of the new pulse(s)  We're multiplying y[j] by two so we don't have to do it here  Approximate score: we maximise Rxy/sqrt(Ryy) (we're guaranteed that
            Rxy is positive because the sign is pre-computed)  The idea is to check for num/den >= best_num/best_den, but that way
            we can do it without any division  OPT: Make sure to use conditional moves here  Updating the sums of the new pulse(s)  We're multiplying y[j] by two so we don't have to do it here  Only now that we've made the final choice, update y/iy  Multiplying y[j] by 2 so we don't have to do it everywhere else  Put the original sign back * Decode pulse vector and combine the result with the pitch vector to produce
    the final normalised signal in the current band. return celt_sqrt(E); OVERRIDE_renormalise_vector  0.63662 = 2/pi 