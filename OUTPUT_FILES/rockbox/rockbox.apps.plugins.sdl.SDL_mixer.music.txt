
  SDL_mixer:  An audio mixer library based on the SDL library
  Copyright (C) 1997-2012 Sam Lantinga <slouken@libsdl.org>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
 $Id$  Used to calculate fading steps  rcg06042009 report available decoders at runtime.  Semicolon-separated SoundFont paths  oh well, go on without it.  Local low-level functions prototypes  Support for hooking when the music has finished  If music isn't playing, halt it if no looping is required, restart it  otherwhise. NOP if the music is playing  Restart music if it has to loop  Native MIDI handles looping internally  Restart music if it has to loop at a high level  Mixing function printf("music_mixer() called!\n"); Handle fading  Fading in  The playing is done externally  Native midi is handled asynchronously  Unknown music type??  Handle seamless music looping printf("sample 0: %d %d", stream[0], stream[1]); Initialize the music players with a certain desired audio format  Keep a copy of the mixer  Calculate the number of ms for each callback  Portable case-insensitive string compare function  Detection code lifted from SMPEG  No sync bits Bitrate is 0 Bitrate is 15 Frequency is 3 Layer is 4 MUS_MOD can't be auto-detected. If no other format was detected, MOD is
 * assumed and MUS_MOD will be returned, meaning that the format might not
 * actually be MOD-based.
 *
 * Returns MUS_NONE in case of errors.  WAVE files have the magic four bytes "RIFF"
	   AIFF files have the magic 12 bytes "FORM" XXXX "AIFF"  Ogg Vorbis files have the magic four bytes "OggS"  FLAC files have the magic four bytes "fLaC"  MIDI files have the magic four bytes "MThd"  Assume MOD format.
	 *
	 * Apparently there is no way to check if the file is really a MOD,
	 * or there are too many formats supported by MikMod/ModPlug, or
	 * MikMod/ModPlug does this check by itself.  Load a music file  Allocate memory for the music structure  Use the extension as a first guess on the file type  No need to guard these with #ifdef *_MUSIC stuff,
	 * since we simply call Mix_LoadMUSType_RW() later  skip the dot in the extension  We need to know if a specific error occurs; if not, we'll set a
	 * generic one, so we clear the current one.  If the caller wants auto-detection, figure out what kind of file
	 * this is.  Don't call Mix_SetError() here since detect_music_type()
			 * does that.  Allocate memory for the music structure  The WAVE loader needs the first 4 bytes of the header elseprintf("Timidity successfully loaded song!\n"); switch (want)  Free a music chunk previously loaded  Stop the music if it's currently playing  Wait for any fade out to finish  Unknown music type??  Find out the music format of a mixer music, or the currently playing
   music, if 'music' is NULL.
 Play a music chunk.  Returns 0, or -1 if there was an error.
  This fixes a bug with native MIDI on Mac OS X, where you
	   can't really stop and restart MIDI from the audio callback.
	 Just a seek suffices to restart playing  Note the music we're playing  Set the initial volume  Set up for playback  can't set volume until file is loaded, so finally set it now  Player_SetVolume() does nothing before Player_Start()  Set the playback position, note any errors if an offset is used  If the setup failed, we're not playing any music anymore  Don't play null pointers :-)  Setup the data  Play the puppy  If the current music is fading out, wait for the fade to complete  Loop is the number of times to play the audio  Set the playing music position  TODO: Implement this for other music backends  Set the music's initial volume  Set the music volume  Unknown music type??  Halt playing of music  Unknown music type??  Progressively stop the music  just halt immediately.  Pause/Resume the music stream  Check the status of the music  Set the external music playback command  Not supported by any players at this time  Not supported by any players at this time  Uninitialize the music players  rcg06042009 report available decoders at runtime. 
  SDL_mixer:  An audio mixer library based on the SDL library
  Copyright (C) 1997-2012 Sam Lantinga <slouken@libsdl.org>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
 $Id$  Used to calculate fading steps  rcg06042009 report available decoders at runtime.  Semicolon-separated SoundFont paths  oh well, go on without it.  Local low-level functions prototypes  Support for hooking when the music has finished  If music isn't playing, halt it if no looping is required, restart it  otherwhise. NOP if the music is playing  Restart music if it has to loop  Native MIDI handles looping internally  Restart music if it has to loop at a high level  Mixing function printf("music_mixer() called!\n"); Handle fading  Fading in  The playing is done externally  Native midi is handled asynchronously  Unknown music type??  Handle seamless music looping printf("sample 0: %d %d", stream[0], stream[1]); Initialize the music players with a certain desired audio format  Keep a copy of the mixer  Calculate the number of ms for each callback  Portable case-insensitive string compare function  Detection code lifted from SMPEG  No sync bits Bitrate is 0 Bitrate is 15 Frequency is 3 Layer is 4 MUS_MOD can't be auto-detected. If no other format was detected, MOD is
 * assumed and MUS_MOD will be returned, meaning that the format might not
 * actually be MOD-based.
 *
 * Returns MUS_NONE in case of errors.  WAVE files have the magic four bytes "RIFF"
	   AIFF files have the magic 12 bytes "FORM" XXXX "AIFF"  Ogg Vorbis files have the magic four bytes "OggS"  FLAC files have the magic four bytes "fLaC"  MIDI files have the magic four bytes "MThd"  Assume MOD format.
	 *
	 * Apparently there is no way to check if the file is really a MOD,
	 * or there are too many formats supported by MikMod/ModPlug, or
	 * MikMod/ModPlug does this check by itself.  Load a music file  Allocate memory for the music structure  Use the extension as a first guess on the file type  No need to guard these with #ifdef *_MUSIC stuff,
	 * since we simply call Mix_LoadMUSType_RW() later  skip the dot in the extension  We need to know if a specific error occurs; if not, we'll set a
	 * generic one, so we clear the current one.  If the caller wants auto-detection, figure out what kind of file
	 * this is.  Don't call Mix_SetError() here since detect_music_type()
			 * does that.  Allocate memory for the music structure  The WAVE loader needs the first 4 bytes of the header elseprintf("Timidity successfully loaded song!\n"); switch (want)  Free a music chunk previously loaded  Stop the music if it's currently playing  Wait for any fade out to finish  Unknown music type??  Find out the music format of a mixer music, or the currently playing
   music, if 'music' is NULL.
 Play a music chunk.  Returns 0, or -1 if there was an error.
  This fixes a bug with native MIDI on Mac OS X, where you
	   can't really stop and restart MIDI from the audio callback.
	 Just a seek suffices to restart playing  Note the music we're playing  Set the initial volume  Set up for playback  can't set volume until file is loaded, so finally set it now  Player_SetVolume() does nothing before Player_Start()  Set the playback position, note any errors if an offset is used  If the setup failed, we're not playing any music anymore  Don't play null pointers :-)  Setup the data  Play the puppy  If the current music is fading out, wait for the fade to complete  Loop is the number of times to play the audio  Set the playing music position  TODO: Implement this for other music backends  Set the music's initial volume  Set the music volume  Unknown music type??  Halt playing of music  Unknown music type??  Progressively stop the music  just halt immediately.  Pause/Resume the music stream  Check the status of the music  Set the external music playback command  Not supported by any players at this time  Not supported by any players at this time  Uninitialize the music players  rcg06042009 report available decoders at runtime. 
  SDL_mixer:  An audio mixer library based on the SDL library
  Copyright (C) 1997-2012 Sam Lantinga <slouken@libsdl.org>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
 $Id$  Used to calculate fading steps  rcg06042009 report available decoders at runtime.  Semicolon-separated SoundFont paths  oh well, go on without it.  Local low-level functions prototypes  Support for hooking when the music has finished  If music isn't playing, halt it if no looping is required, restart it  otherwhise. NOP if the music is playing  Restart music if it has to loop  Native MIDI handles looping internally  Restart music if it has to loop at a high level  Mixing function printf("music_mixer() called!\n"); Handle fading  Fading in  The playing is done externally  Native midi is handled asynchronously  Unknown music type??  Handle seamless music looping printf("sample 0: %d %d", stream[0], stream[1]); Initialize the music players with a certain desired audio format  Keep a copy of the mixer  Calculate the number of ms for each callback  Portable case-insensitive string compare function  Detection code lifted from SMPEG  No sync bits Bitrate is 0 Bitrate is 15 Frequency is 3 Layer is 4 MUS_MOD can't be auto-detected. If no other format was detected, MOD is
 * assumed and MUS_MOD will be returned, meaning that the format might not
 * actually be MOD-based.
 *
 * Returns MUS_NONE in case of errors.  WAVE files have the magic four bytes "RIFF"
	   AIFF files have the magic 12 bytes "FORM" XXXX "AIFF"  Ogg Vorbis files have the magic four bytes "OggS"  FLAC files have the magic four bytes "fLaC"  MIDI files have the magic four bytes "MThd"  Assume MOD format.
	 *
	 * Apparently there is no way to check if the file is really a MOD,
	 * or there are too many formats supported by MikMod/ModPlug, or
	 * MikMod/ModPlug does this check by itself.  Load a music file  Allocate memory for the music structure  Use the extension as a first guess on the file type  No need to guard these with #ifdef *_MUSIC stuff,
	 * since we simply call Mix_LoadMUSType_RW() later  skip the dot in the extension  We need to know if a specific error occurs; if not, we'll set a
	 * generic one, so we clear the current one.  If the caller wants auto-detection, figure out what kind of file
	 * this is.  Don't call Mix_SetError() here since detect_music_type()
			 * does that.  Allocate memory for the music structure  The WAVE loader needs the first 4 bytes of the header elseprintf("Timidity successfully loaded song!\n"); switch (want)  Free a music chunk previously loaded  Stop the music if it's currently playing  Wait for any fade out to finish  Unknown music type??  Find out the music format of a mixer music, or the currently playing
   music, if 'music' is NULL.
 Play a music chunk.  Returns 0, or -1 if there was an error.
  This fixes a bug with native MIDI on Mac OS X, where you
	   can't really stop and restart MIDI from the audio callback.
	 Just a seek suffices to restart playing  Note the music we're playing  Set the initial volume  Set up for playback  can't set volume until file is loaded, so finally set it now  Player_SetVolume() does nothing before Player_Start()  Set the playback position, note any errors if an offset is used  If the setup failed, we're not playing any music anymore  Don't play null pointers :-)  Setup the data  Play the puppy  If the current music is fading out, wait for the fade to complete  Loop is the number of times to play the audio  Set the playing music position  TODO: Implement this for other music backends  Set the music's initial volume  Set the music volume  Unknown music type??  Halt playing of music  Unknown music type??  Progressively stop the music  just halt immediately.  Pause/Resume the music stream  Check the status of the music  Set the external music playback command  Not supported by any players at this time  Not supported by any players at this time  Uninitialize the music players  rcg06042009 report available decoders at runtime. 