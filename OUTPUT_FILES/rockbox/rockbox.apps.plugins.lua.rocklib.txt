**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 Dan Everton (safetydan)
 * Copyright (C) 2009 Maurus Cuelenaere
 * Copyright (C) 2018 William Wilgus
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * http://www.lua.org/manual/5.1/manual.html#lua_CFunction
 *
 * In order to communicate properly with Lua, a C function must use the following protocol,
 * which defines the way parameters and results are passed: a C function receives its arguments
 * from Lua in its stack in direct order (the first argument is pushed first). To return values to Lua,
 * a C function just pushes them onto the stack, in direct order (the first result is pushed first),
 * and returns the number of results. Any other value in the stack below the results will be properly
 * discarded by Lua. Like a Lua function, a C function called by Lua can also return many results.
 *
 * When porting new functions, don't forget to check rocklib_aux.pl whether it automatically creates
 * wrappers for the function and if so, add the function names to @forbidden_functions. This is to
 * prevent namespace collisions and adding duplicate wrappers.
 
 * -----------------------------
 *
 *  Rockbox wrappers start here!
 *
 * -----------------------------
  KERNEL  DEVICE INPUT CONTROL  newuserdata will be pushed onto stack after args Push item on the stack  Pop it  newuserdata will be pushed onto stack after args newuserdata will be pushed onto stack after args it is dangerous to store the lua state byond its guaranteed lifetime
       be sure to clear state asap (as in before you exit the calling function) lua callback function cb(action) return action end  newuserdata will be pushed onto stack after args DEVICE AUDIO / PLAYLIST CONTROL  just passes NULL to work with the current playlist  only required parameter  default to false  default to false  only required parameter  default to false  default to false  not perfect but provides a decent compromise  return previous (or current) audio status push nil so options w/o return have something to return nilnilpush nil so options w/o return have something to return  DEVICE LIGHTING CONTROL  HAVE_BACKLIGHT  DEVICE STRING / FILENAME MANIPULATION See files.lua  ROCKBOX SETTINGS / INFO pointer to string (**char) no writes allowed  allows pointer within structure to be calculated offset  include \0  switch size  reader  switch type  writer const bool      isstr_p = lua_toboolean(L, 4);const bool      isstr_p = lua_toboolean(L, 4); no writes allowed  no writes allowed  no writes allowed  stk pos 1 is no longer offset it is starting address  will add this back if anyone finds a target that needs it  SPEAKING  MISC close lua state, open a new lua state, load script @ filename  signal exit handler  atexit in rocklua.c  KERNEL  DEVICE INPUT CONTROL  DEVICE AUDIO / SOUND / PLAYLIST CONTROL  DEVICE LIGHTING CONTROL  Backlight helper  HAVE_BACKLIGHT  DEVICE STRING / FILENAME MANIPULATION See files.lua  ROCKBOX SETTINGS / INFO  SPEAKING  MISC 
 ** Open Rockbox library
  see rb_defines.lua  useful integer constants  queue sys events  some useful paths constants **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 Dan Everton (safetydan)
 * Copyright (C) 2009 Maurus Cuelenaere
 * Copyright (C) 2018 William Wilgus
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * http://www.lua.org/manual/5.1/manual.html#lua_CFunction
 *
 * In order to communicate properly with Lua, a C function must use the following protocol,
 * which defines the way parameters and results are passed: a C function receives its arguments
 * from Lua in its stack in direct order (the first argument is pushed first). To return values to Lua,
 * a C function just pushes them onto the stack, in direct order (the first result is pushed first),
 * and returns the number of results. Any other value in the stack below the results will be properly
 * discarded by Lua. Like a Lua function, a C function called by Lua can also return many results.
 *
 * When porting new functions, don't forget to check rocklib_aux.pl whether it automatically creates
 * wrappers for the function and if so, add the function names to @forbidden_functions. This is to
 * prevent namespace collisions and adding duplicate wrappers.
 
 * -----------------------------
 *
 *  Rockbox wrappers start here!
 *
 * -----------------------------
  KERNEL  DEVICE INPUT CONTROL  newuserdata will be pushed onto stack after args Push item on the stack  Pop it  newuserdata will be pushed onto stack after args newuserdata will be pushed onto stack after args it is dangerous to store the lua state byond its guaranteed lifetime
       be sure to clear state asap (as in before you exit the calling function) lua callback function cb(action) return action end  newuserdata will be pushed onto stack after args DEVICE AUDIO / PLAYLIST CONTROL  just passes NULL to work with the current playlist  only required parameter  default to false  default to false  only required parameter  default to false  default to false  not perfect but provides a decent compromise  return previous (or current) audio status push nil so options w/o return have something to return nilnilpush nil so options w/o return have something to return  DEVICE LIGHTING CONTROL  HAVE_BACKLIGHT  DEVICE STRING / FILENAME MANIPULATION See files.lua  ROCKBOX SETTINGS / INFO pointer to string (**char) no writes allowed  allows pointer within structure to be calculated offset  include \0  switch size  reader  switch type  writer const bool      isstr_p = lua_toboolean(L, 4);const bool      isstr_p = lua_toboolean(L, 4); no writes allowed  no writes allowed  no writes allowed  stk pos 1 is no longer offset it is starting address  will add this back if anyone finds a target that needs it  SPEAKING  MISC close lua state, open a new lua state, load script @ filename  signal exit handler  atexit in rocklua.c  KERNEL  DEVICE INPUT CONTROL  DEVICE AUDIO / SOUND / PLAYLIST CONTROL  DEVICE LIGHTING CONTROL  Backlight helper  HAVE_BACKLIGHT  DEVICE STRING / FILENAME MANIPULATION See files.lua  ROCKBOX SETTINGS / INFO  SPEAKING  MISC 
 ** Open Rockbox library
  see rb_defines.lua  useful integer constants  queue sys events  some useful paths constants **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 Dan Everton (safetydan)
 * Copyright (C) 2009 Maurus Cuelenaere
 * Copyright (C) 2018 William Wilgus
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * http://www.lua.org/manual/5.1/manual.html#lua_CFunction
 *
 * In order to communicate properly with Lua, a C function must use the following protocol,
 * which defines the way parameters and results are passed: a C function receives its arguments
 * from Lua in its stack in direct order (the first argument is pushed first). To return values to Lua,
 * a C function just pushes them onto the stack, in direct order (the first result is pushed first),
 * and returns the number of results. Any other value in the stack below the results will be properly
 * discarded by Lua. Like a Lua function, a C function called by Lua can also return many results.
 *
 * When porting new functions, don't forget to check rocklib_aux.pl whether it automatically creates
 * wrappers for the function and if so, add the function names to @forbidden_functions. This is to
 * prevent namespace collisions and adding duplicate wrappers.
 
 * -----------------------------
 *
 *  Rockbox wrappers start here!
 *
 * -----------------------------
  KERNEL  DEVICE INPUT CONTROL  newuserdata will be pushed onto stack after args Push item on the stack  Pop it  newuserdata will be pushed onto stack after args newuserdata will be pushed onto stack after args it is dangerous to store the lua state byond its guaranteed lifetime
       be sure to clear state asap (as in before you exit the calling function) lua callback function cb(action) return action end  newuserdata will be pushed onto stack after args DEVICE AUDIO / PLAYLIST CONTROL  just passes NULL to work with the current playlist  only required parameter  default to false  default to false  only required parameter  default to false  default to false  not perfect but provides a decent compromise  return previous (or current) audio status push nil so options w/o return have something to return nilnilpush nil so options w/o return have something to return  DEVICE LIGHTING CONTROL  HAVE_BACKLIGHT  DEVICE STRING / FILENAME MANIPULATION See files.lua  ROCKBOX SETTINGS / INFO pointer to string (**char) no writes allowed  allows pointer within structure to be calculated offset  include \0  switch size  reader  switch type  writer const bool      isstr_p = lua_toboolean(L, 4);const bool      isstr_p = lua_toboolean(L, 4); no writes allowed  no writes allowed  no writes allowed  stk pos 1 is no longer offset it is starting address  will add this back if anyone finds a target that needs it  SPEAKING  MISC close lua state, open a new lua state, load script @ filename  signal exit handler  atexit in rocklua.c  KERNEL  DEVICE INPUT CONTROL  DEVICE AUDIO / SOUND / PLAYLIST CONTROL  DEVICE LIGHTING CONTROL  Backlight helper  HAVE_BACKLIGHT  DEVICE STRING / FILENAME MANIPULATION See files.lua  ROCKBOX SETTINGS / INFO  SPEAKING  MISC 
 ** Open Rockbox library
  see rb_defines.lua  useful integer constants  queue sys events  some useful paths constants 