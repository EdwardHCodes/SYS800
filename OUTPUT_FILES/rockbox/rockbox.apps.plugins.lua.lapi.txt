
** $Id: lapi.c,v 2.55.1.5 2008/07/04 18:41:18 roberto Exp $
** Lua API
** See Copyright Notice in lua.h
 #include <assert.h>  pseudo-indices  no enclosing function?  use global table as environment  stack overflow 
** basic stack manipulation
 `subtract' index (index is negative)  explicit test for incompatible code  function upvalue? 
** access functions (stack -> C)
 may call tag method  may call tag method  `luaV_tostring' may create a new string  conversion failed?  previous call may reallocate the stack  `luaV_tostring' may create a new string 
** push functions (C -> stack)
 ensure that true is 1 
** get functions (Lua -> stack)

** set functions (stack -> Lua)
 pop index and value  pop key and value 
** `load' and `call' functions (run Lua code)

** Execute a protected call.
 data to `f_call'  function to be called 
** Execute a protected C call.
 data to `f_Ccall'  push function  push only argument 
** Garbage-collection function
 GC values are expressed in Kbytes: #bytes/2^10  gc is block so we need to pretend that the collection cycle finished.  end of cycle?  signal it  invalid option 
** miscellaneous functions
 to avoid warnings  no more elements  remove key  push empty string  else n == 1; nothing to do 
** $Id: lapi.c,v 2.55.1.5 2008/07/04 18:41:18 roberto Exp $
** Lua API
** See Copyright Notice in lua.h
 #include <assert.h>  pseudo-indices  no enclosing function?  use global table as environment  stack overflow 
** basic stack manipulation
 `subtract' index (index is negative)  explicit test for incompatible code  function upvalue? 
** access functions (stack -> C)
 may call tag method  may call tag method  `luaV_tostring' may create a new string  conversion failed?  previous call may reallocate the stack  `luaV_tostring' may create a new string 
** push functions (C -> stack)
 ensure that true is 1 
** get functions (Lua -> stack)

** set functions (stack -> Lua)
 pop index and value  pop key and value 
** `load' and `call' functions (run Lua code)

** Execute a protected call.
 data to `f_call'  function to be called 
** Execute a protected C call.
 data to `f_Ccall'  push function  push only argument 
** Garbage-collection function
 GC values are expressed in Kbytes: #bytes/2^10  gc is block so we need to pretend that the collection cycle finished.  end of cycle?  signal it  invalid option 
** miscellaneous functions
 to avoid warnings  no more elements  remove key  push empty string  else n == 1; nothing to do 
** $Id: lapi.c,v 2.55.1.5 2008/07/04 18:41:18 roberto Exp $
** Lua API
** See Copyright Notice in lua.h
 #include <assert.h>  pseudo-indices  no enclosing function?  use global table as environment  stack overflow 
** basic stack manipulation
 `subtract' index (index is negative)  explicit test for incompatible code  function upvalue? 
** access functions (stack -> C)
 may call tag method  may call tag method  `luaV_tostring' may create a new string  conversion failed?  previous call may reallocate the stack  `luaV_tostring' may create a new string 
** push functions (C -> stack)
 ensure that true is 1 
** get functions (Lua -> stack)

** set functions (stack -> Lua)
 pop index and value  pop key and value 
** `load' and `call' functions (run Lua code)

** Execute a protected call.
 data to `f_call'  function to be called 
** Execute a protected C call.
 data to `f_Ccall'  push function  push only argument 
** Garbage-collection function
 GC values are expressed in Kbytes: #bytes/2^10  gc is block so we need to pretend that the collection cycle finished.  end of cycle?  signal it  invalid option 
** miscellaneous functions
 to avoid warnings  no more elements  remove key  push empty string  else n == 1; nothing to do 