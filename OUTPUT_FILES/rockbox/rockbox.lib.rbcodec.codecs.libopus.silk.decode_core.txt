**********************************************************************
Copyright (c) 2006-2011, Skype Limited. All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
- Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
- Neither the name of Internet Society, IETF or IETF Trust, nor the
names of specific contributors, may be used to endorse or promote
products derived from this software without specific prior written
permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
****************************************************************************************************************************** Core decoder. Performs inverse NSQ operation LTP + LPC ******************************************************** I/O  Decoder state                                I    Decoder control                              O    Decoded speech                               I    Pulse signal                                 Decode excitation  Copy LPC state  Loop over subframes  Preload LPC coeficients to array on stack. Gives small performance gain  Calculate gain adjustment factor  Scale short term state  Save inv_gain  Avoid abrupt transition from voiced PLC to unvoiced normal decoding  Voiced  Re-whitening  Rewhiten with new A coefs  After rewhitening the LTP state is unscaled  Do LTP downscaling to reduce inter-packet dependency  Update LTP state when Gain changes  Long-term prediction  Set up pointer  Unrolled loop  Avoids introducing a bias because silk_SMLAWB() always rounds to -inf  Generate LPC excitation  Update states  Short-term prediction  Avoids introducing a bias because silk_SMLAWB() always rounds to -inf  Add prediction to LPC excitation  Scale with gain  DEBUG_STORE_DATA( dec.pcm, pxq, psDec->subfr_length * sizeof( opus_int16 ) )  Update LPC filter state  Save LPC state **********************************************************************
Copyright (c) 2006-2011, Skype Limited. All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
- Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
- Neither the name of Internet Society, IETF or IETF Trust, nor the
names of specific contributors, may be used to endorse or promote
products derived from this software without specific prior written
permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
****************************************************************************************************************************** Core decoder. Performs inverse NSQ operation LTP + LPC ******************************************************** I/O  Decoder state                                I    Decoder control                              O    Decoded speech                               I    Pulse signal                                 Decode excitation  Copy LPC state  Loop over subframes  Preload LPC coeficients to array on stack. Gives small performance gain  Calculate gain adjustment factor  Scale short term state  Save inv_gain  Avoid abrupt transition from voiced PLC to unvoiced normal decoding  Voiced  Re-whitening  Rewhiten with new A coefs  After rewhitening the LTP state is unscaled  Do LTP downscaling to reduce inter-packet dependency  Update LTP state when Gain changes  Long-term prediction  Set up pointer  Unrolled loop  Avoids introducing a bias because silk_SMLAWB() always rounds to -inf  Generate LPC excitation  Update states  Short-term prediction  Avoids introducing a bias because silk_SMLAWB() always rounds to -inf  Add prediction to LPC excitation  Scale with gain  DEBUG_STORE_DATA( dec.pcm, pxq, psDec->subfr_length * sizeof( opus_int16 ) )  Update LPC filter state  Save LPC state **********************************************************************
Copyright (c) 2006-2011, Skype Limited. All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
- Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
- Neither the name of Internet Society, IETF or IETF Trust, nor the
names of specific contributors, may be used to endorse or promote
products derived from this software without specific prior written
permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
****************************************************************************************************************************** Core decoder. Performs inverse NSQ operation LTP + LPC ******************************************************** I/O  Decoder state                                I    Decoder control                              O    Decoded speech                               I    Pulse signal                                 Decode excitation  Copy LPC state  Loop over subframes  Preload LPC coeficients to array on stack. Gives small performance gain  Calculate gain adjustment factor  Scale short term state  Save inv_gain  Avoid abrupt transition from voiced PLC to unvoiced normal decoding  Voiced  Re-whitening  Rewhiten with new A coefs  After rewhitening the LTP state is unscaled  Do LTP downscaling to reduce inter-packet dependency  Update LTP state when Gain changes  Long-term prediction  Set up pointer  Unrolled loop  Avoids introducing a bias because silk_SMLAWB() always rounds to -inf  Generate LPC excitation  Update states  Short-term prediction  Avoids introducing a bias because silk_SMLAWB() always rounds to -inf  Add prediction to LPC excitation  Scale with gain  DEBUG_STORE_DATA( dec.pcm, pxq, psDec->subfr_length * sizeof( opus_int16 ) )  Update LPC filter state  Save LPC state 