 Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *   the automap code
 *
 *-----------------------------------------------------------------------------
  Ty 03/27/98 - externalizationsjff 1/7/98 default automap colors added map background grid lines color normal 1s wall color line at floor height change color line at ceiling height change color line at sector with floor=ceiling color red key color blue key color yellow key color red door color  (diff from keys to allow option) blue door color (of enabling one but not other ) yellow door color teleporter line color secret sector boundary color jff 4/23/98 add exit line color computer map unseen line color line with no floor/ceiling changes general sprite color item sprite color friendly sprite color crosshair color single player arrow color colors for player arrows in multiplayerjff 3/9/98 add option to not show secret sectors until enteredjff 4/3/98 add symbols for "no-color" for disable and "black color" for black drawing stuff scale on entry how much the automap moves window per tic in frame-buffer coordinates moves 140 pixels in 1 second how much zoom-in per tic goes to 2x in 1 second how much zoom-out per tic pulls out to 0.5x in 1 second translates between frame-buffer and map distances translates between frame-buffer and map coordinates The vector graphics for the automap.  A line drawing of the player pointing right,   starting from the middle. ----- -----> >----> >>---> killough 3/22/98: He's alive, Jim :) ----- -----> >----> >>---> J F Fjff 1/5/98 new symbol for keys on automapjff 1/5/98 end of new symbol killough 2/7/98: make global, rename to ddt_* kluge until AM_LevelInit() is called Mode that the automap is in location of window on screen size of window on screen how far the window pans each tic (map coords) how far the window zooms each tic (map coords) how far the window zooms each tic (fb coords) LL x,y window location on the map (map coords) UR x,y window location on the map (map coords) width/height of window on map (map coords) based on level size max_x-min_x, max_y-min_y based on player size used to tell when to stop zooming out used to tell when to stop zooming in old stuff for recovery later old location used by the Follower routine used by MTOF to scale from map-to-frame-buffer coords used by FTOM to scale from frame-buffer-to-map coords (=1/scale_mtof) the player represented by an arrow killough 2/22/98: Remove limit on automap marks, and make variables external for use in savegames. where the points are next point to be assigned (also number of points now) killough 2/22/98 AM_getIslope() Calculates the slope and slope according to the x-axis of a line segment in map coordinates (with the upright y-axis n' all) so that it can be used with the brain-dead drawing stuff. Passed the line slope is desired for and an islope_t structure for return Returns nothing AM_activateNewScale() Changes the map scale after zooming or translating Passed nothing, returns nothing AM_saveScaleAndLoc() Saves the current center and zoom Affects the variables that remember old scale and loc Passed nothing, returns nothing AM_restoreScaleAndLoc() restores the center and zoom from locally saved values Affects global variables for location and scale Passed nothing, returns nothing Change the scaling multipliers AM_addMark() Adds a marker at the current location Affects global variables for marked points Passed nothing, returns nothing killough 2/22/98: remove limit on automap marks AM_findMinMaxBoundaries() Determines bounding box of all vertices, sets global variables controlling zoom range. Passed nothing, returns nothing const? never changed? AM_changeWindowLoc() Moves the map window by the global variables m_paninc.x, m_paninc.y Passed nothing, returns nothing AM_initVariables() Initialize the variables for the automap Affects the automap global variables Status bar is notified that the automap has been entered Passed nothing, returns nothing find player to center on initially for saving & restoring inform the status bar of the change AM_loadPics() cph - mark numbers no longer needed cached AM_unloadPics() cph - mark numbers no longer needed cached AM_clearMarks() Sets the number of marks to 0, thereby clearing them from the display Affects the global variable markpointnum Passed nothing, returns nothing AM_LevelInit() Initialize the automap at the start of a new level should be called at the start of every level Passed nothing, returns nothing Affects automap's global variables CPhipps - get status bar height from status bar code killough 2/7/98: get rid of finit_ vars to allow runtime setting of width/height AM_Stop() Cease automap operations, unload patches, notify status bar Passed nothing, returns nothing AM_Start() Start up automap operations,  if a new level, or game start, (re)initialize level variables  init map variables  load mark patches Passed nothing, returns nothing AM_minOutWindowScale() Set the window scale to the maximum size Passed nothing, returns nothing AM_maxOutWindowScale(void) Set the window scale to the minimum size Passed nothing, returns nothing AM_Responder() Handle events (user inputs) in automap mode Passed an input event, returns true if its handled phares phares phares    |    V CPhipps - put all automap mode stuff into one enum Ty 03/27/98 - externalized CPhipps Ty 03/27/98 - *not* externalized Ty 03/27/98 - *not* externalized Ty 03/27/98 - *not* externalized    ^    | phares AM_rotate() Rotation in 2D. Used to rotate player arrow line character. Passed the coordinates of a point, and an angle Returns the coordinates rotated by the angle CPhipps - made static & enhanced for automap rotation AM_changeWindowScale() Automap zooming Passed nothing, returns nothing Change the scaling multipliers AM_doFollowPlayer() Turn on follow mode - the map scrolls opposite to player motion Passed nothing, returns nothing AM_Ticker() Updates on gametic - enter follow mode, zoom, or change map location Passed nothing, returns nothing Change the zoom if necessary Change x,y location AM_clipMline() Automap clipping of lines. Based on Cohen-Sutherland clipping algorithm but with a slightly faster reject and precalculated slopes. If the speed is needed, use a hash algorithm to handle the common cases. Passed the line's coordinates on map and in the frame buffer performs clipping on them in the lines frame coordinates. Returns true if any part of line was not clipped do trivial rejects and outcodes trivially outside trivially outside transform to frame-buffer coordinates. may be partially inside box find an outside point clip to each side trivially outside AM_drawFline() Draw a line in the frame buffer. Classic Bresenham w/ whatever optimizations needed for speed Passed the frame coordinates of line, and the color to be drawn Returns nothing killough 2/22/98 For debugging onlyjff 8/3/98 use logical output routine AM_drawMline() Clip lines, draw visible parts of lines. Passed the map coordinates of the line, and the color to draw it Color -1 is special and prevents drawing. Color 247 is special and is translated to black, allowing Color 0 to represent feature disable in the defaults file. Returns nothing. jff 4/3/98 allow not drawing any sort of line by setting its color to -1 jff 4/3/98 if color is 247 (xparent), use black draws it on frame buffer using fb coords AM_drawGrid() Draws blockmap aligned grid lines. Passed the color to draw the grid lines Returns nothing Figure out start of vertical gridlines draw vertical gridlines Figure out start of horizontal gridlines draw horizontal gridlines AM_DoorColor() Returns the 'color' or key needed for a door linedef type Passed the type of linedef, returns:   -1 if not a keyed door    0 if a red key required    1 if a blue key required    2 if a yellow key required    3 if a multiple keys required jff 4/3/98 add routine to get color of generalized keyed doorany or all keys closed keyed doorbluekeyyellowkeyredkeynot a keyed doornot a keyed door Determines visible lines, draws them. This is LineDef based, not LineSeg based. jff 1/5/98 many changes in this routine backward compatibility not needed, so just changes, no ifs addition of clauses for:    doors opening, keyed door id, secret sectors,    teleports, exit lines, key things ability to suppress any of added features or lines with no height changes support for gamma correction in automap abandoned jff 4/3/98 changed mapcolor_xxxx=0 as control to disable feature jff 4/3/98 changed mapcolor_xxxx=-1 to disable drawing line completely draw the unclipped visible portions of all lines if line has been seen or IDDT has been used cph - show keyed doors and lines  non-secret  closed keyed door bluekeyyellowkeyredkeyany or all jff 4/23/98 add exit lines to automap  exit line  jff 1/10/98 add new color for 1S secret sector boundaryjff 4/3/98 0 is disable line bounding secret sectorjff 2/16/98 fixed bug special was cleared now for 2S lines  jff 1/10/98 add color change for all teleporter types teleporters secret door wall color non-secret closed door non-secret closed doorjff 1/6/98 show secret sector 2S linesjff 2/16/98 fixed bug special was cleared after getting itjff 3/9/98 add logic to not show secret til after entered if map_secret_after is true line bounding secret sectorjff 1/6/98 end secret sector line change floor level change ceiling level change2S lines that appear only in IDDT now draw the lines only visible because the player has computermap computermap visible lines invisible flag lines do not show AM_drawLineCharacter() Draws a vector graphic according to numerous parameters Passed the structure defining the vector graphic shape, the number of vectors in it, the scale to draw it at, the angle to draw it at, the color to draw it with, and the map coordinates to draw it at. Returns nothing cph AM_drawPlayers() Draws the player arrow in single player, or all the player arrows in a netgame. Passed nothing, returns nothingjff colorjff color *close* to black jff 1/6/98 use default color AM_drawThings() Draws the things on the automap in double IDDT cheat mode Passed colors and colorrange, no longer used Returns nothing for all sectors for all things in that sectorjff 1/5/98 case over doomednum of thing being drawnjff 1/5/98 treat keys specialjff  red keyjff yellow keyjff blue keyjff 1/5/98 end added code for keysjff previously entire code bbm 2/28/03 Show countable items in yellow.  AM_drawMarks() Draw the marked locations on the automap Passed nothing, returns nothing killough 2/22/98: Rewrote AM_drawMarks(). Removed limit on marks. killough 2/22/98: remove automap mark limit killough 2/22/98: less spacing for '1' cph - construct patch name and draw marker killough 2/22/98: 1 space backwards AM_drawCrosshair() Draw the single point crosshair representing map center Passed the color to draw the pixel with Returns nothing CPhipps - made static inline, and use the general pixel plotter function single point for now AM_Drawer() Draws the entire automap Passed nothing, returns nothing CPhipps - all automap modes put into one enum cph - If not overlay mode, clear background for the automapjff 1/5/98 background default colorjff 1/7/98 grid default colorjff 1/5/98 default double IDDT spritejff 1/7/98 default crosshair color Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *   the automap code
 *
 *-----------------------------------------------------------------------------
  Ty 03/27/98 - externalizationsjff 1/7/98 default automap colors added map background grid lines color normal 1s wall color line at floor height change color line at ceiling height change color line at sector with floor=ceiling color red key color blue key color yellow key color red door color  (diff from keys to allow option) blue door color (of enabling one but not other ) yellow door color teleporter line color secret sector boundary color jff 4/23/98 add exit line color computer map unseen line color line with no floor/ceiling changes general sprite color item sprite color friendly sprite color crosshair color single player arrow color colors for player arrows in multiplayerjff 3/9/98 add option to not show secret sectors until enteredjff 4/3/98 add symbols for "no-color" for disable and "black color" for black drawing stuff scale on entry how much the automap moves window per tic in frame-buffer coordinates moves 140 pixels in 1 second how much zoom-in per tic goes to 2x in 1 second how much zoom-out per tic pulls out to 0.5x in 1 second translates between frame-buffer and map distances translates between frame-buffer and map coordinates The vector graphics for the automap.  A line drawing of the player pointing right,   starting from the middle. ----- -----> >----> >>---> killough 3/22/98: He's alive, Jim :) ----- -----> >----> >>---> J F Fjff 1/5/98 new symbol for keys on automapjff 1/5/98 end of new symbol killough 2/7/98: make global, rename to ddt_* kluge until AM_LevelInit() is called Mode that the automap is in location of window on screen size of window on screen how far the window pans each tic (map coords) how far the window zooms each tic (map coords) how far the window zooms each tic (fb coords) LL x,y window location on the map (map coords) UR x,y window location on the map (map coords) width/height of window on map (map coords) based on level size max_x-min_x, max_y-min_y based on player size used to tell when to stop zooming out used to tell when to stop zooming in old stuff for recovery later old location used by the Follower routine used by MTOF to scale from map-to-frame-buffer coords used by FTOM to scale from frame-buffer-to-map coords (=1/scale_mtof) the player represented by an arrow killough 2/22/98: Remove limit on automap marks, and make variables external for use in savegames. where the points are next point to be assigned (also number of points now) killough 2/22/98 AM_getIslope() Calculates the slope and slope according to the x-axis of a line segment in map coordinates (with the upright y-axis n' all) so that it can be used with the brain-dead drawing stuff. Passed the line slope is desired for and an islope_t structure for return Returns nothing AM_activateNewScale() Changes the map scale after zooming or translating Passed nothing, returns nothing AM_saveScaleAndLoc() Saves the current center and zoom Affects the variables that remember old scale and loc Passed nothing, returns nothing AM_restoreScaleAndLoc() restores the center and zoom from locally saved values Affects global variables for location and scale Passed nothing, returns nothing Change the scaling multipliers AM_addMark() Adds a marker at the current location Affects global variables for marked points Passed nothing, returns nothing killough 2/22/98: remove limit on automap marks AM_findMinMaxBoundaries() Determines bounding box of all vertices, sets global variables controlling zoom range. Passed nothing, returns nothing const? never changed? AM_changeWindowLoc() Moves the map window by the global variables m_paninc.x, m_paninc.y Passed nothing, returns nothing AM_initVariables() Initialize the variables for the automap Affects the automap global variables Status bar is notified that the automap has been entered Passed nothing, returns nothing find player to center on initially for saving & restoring inform the status bar of the change AM_loadPics() cph - mark numbers no longer needed cached AM_unloadPics() cph - mark numbers no longer needed cached AM_clearMarks() Sets the number of marks to 0, thereby clearing them from the display Affects the global variable markpointnum Passed nothing, returns nothing AM_LevelInit() Initialize the automap at the start of a new level should be called at the start of every level Passed nothing, returns nothing Affects automap's global variables CPhipps - get status bar height from status bar code killough 2/7/98: get rid of finit_ vars to allow runtime setting of width/height AM_Stop() Cease automap operations, unload patches, notify status bar Passed nothing, returns nothing AM_Start() Start up automap operations,  if a new level, or game start, (re)initialize level variables  init map variables  load mark patches Passed nothing, returns nothing AM_minOutWindowScale() Set the window scale to the maximum size Passed nothing, returns nothing AM_maxOutWindowScale(void) Set the window scale to the minimum size Passed nothing, returns nothing AM_Responder() Handle events (user inputs) in automap mode Passed an input event, returns true if its handled phares phares phares    |    V CPhipps - put all automap mode stuff into one enum Ty 03/27/98 - externalized CPhipps Ty 03/27/98 - *not* externalized Ty 03/27/98 - *not* externalized Ty 03/27/98 - *not* externalized    ^    | phares AM_rotate() Rotation in 2D. Used to rotate player arrow line character. Passed the coordinates of a point, and an angle Returns the coordinates rotated by the angle CPhipps - made static & enhanced for automap rotation AM_changeWindowScale() Automap zooming Passed nothing, returns nothing Change the scaling multipliers AM_doFollowPlayer() Turn on follow mode - the map scrolls opposite to player motion Passed nothing, returns nothing AM_Ticker() Updates on gametic - enter follow mode, zoom, or change map location Passed nothing, returns nothing Change the zoom if necessary Change x,y location AM_clipMline() Automap clipping of lines. Based on Cohen-Sutherland clipping algorithm but with a slightly faster reject and precalculated slopes. If the speed is needed, use a hash algorithm to handle the common cases. Passed the line's coordinates on map and in the frame buffer performs clipping on them in the lines frame coordinates. Returns true if any part of line was not clipped do trivial rejects and outcodes trivially outside trivially outside transform to frame-buffer coordinates. may be partially inside box find an outside point clip to each side trivially outside AM_drawFline() Draw a line in the frame buffer. Classic Bresenham w/ whatever optimizations needed for speed Passed the frame coordinates of line, and the color to be drawn Returns nothing killough 2/22/98 For debugging onlyjff 8/3/98 use logical output routine AM_drawMline() Clip lines, draw visible parts of lines. Passed the map coordinates of the line, and the color to draw it Color -1 is special and prevents drawing. Color 247 is special and is translated to black, allowing Color 0 to represent feature disable in the defaults file. Returns nothing. jff 4/3/98 allow not drawing any sort of line by setting its color to -1 jff 4/3/98 if color is 247 (xparent), use black draws it on frame buffer using fb coords AM_drawGrid() Draws blockmap aligned grid lines. Passed the color to draw the grid lines Returns nothing Figure out start of vertical gridlines draw vertical gridlines Figure out start of horizontal gridlines draw horizontal gridlines AM_DoorColor() Returns the 'color' or key needed for a door linedef type Passed the type of linedef, returns:   -1 if not a keyed door    0 if a red key required    1 if a blue key required    2 if a yellow key required    3 if a multiple keys required jff 4/3/98 add routine to get color of generalized keyed doorany or all keys closed keyed doorbluekeyyellowkeyredkeynot a keyed doornot a keyed door Determines visible lines, draws them. This is LineDef based, not LineSeg based. jff 1/5/98 many changes in this routine backward compatibility not needed, so just changes, no ifs addition of clauses for:    doors opening, keyed door id, secret sectors,    teleports, exit lines, key things ability to suppress any of added features or lines with no height changes support for gamma correction in automap abandoned jff 4/3/98 changed mapcolor_xxxx=0 as control to disable feature jff 4/3/98 changed mapcolor_xxxx=-1 to disable drawing line completely draw the unclipped visible portions of all lines if line has been seen or IDDT has been used cph - show keyed doors and lines  non-secret  closed keyed door bluekeyyellowkeyredkeyany or all jff 4/23/98 add exit lines to automap  exit line  jff 1/10/98 add new color for 1S secret sector boundaryjff 4/3/98 0 is disable line bounding secret sectorjff 2/16/98 fixed bug special was cleared now for 2S lines  jff 1/10/98 add color change for all teleporter types teleporters secret door wall color non-secret closed door non-secret closed doorjff 1/6/98 show secret sector 2S linesjff 2/16/98 fixed bug special was cleared after getting itjff 3/9/98 add logic to not show secret til after entered if map_secret_after is true line bounding secret sectorjff 1/6/98 end secret sector line change floor level change ceiling level change2S lines that appear only in IDDT now draw the lines only visible because the player has computermap computermap visible lines invisible flag lines do not show AM_drawLineCharacter() Draws a vector graphic according to numerous parameters Passed the structure defining the vector graphic shape, the number of vectors in it, the scale to draw it at, the angle to draw it at, the color to draw it with, and the map coordinates to draw it at. Returns nothing cph AM_drawPlayers() Draws the player arrow in single player, or all the player arrows in a netgame. Passed nothing, returns nothingjff colorjff color *close* to black jff 1/6/98 use default color AM_drawThings() Draws the things on the automap in double IDDT cheat mode Passed colors and colorrange, no longer used Returns nothing for all sectors for all things in that sectorjff 1/5/98 case over doomednum of thing being drawnjff 1/5/98 treat keys specialjff  red keyjff yellow keyjff blue keyjff 1/5/98 end added code for keysjff previously entire code bbm 2/28/03 Show countable items in yellow.  AM_drawMarks() Draw the marked locations on the automap Passed nothing, returns nothing killough 2/22/98: Rewrote AM_drawMarks(). Removed limit on marks. killough 2/22/98: remove automap mark limit killough 2/22/98: less spacing for '1' cph - construct patch name and draw marker killough 2/22/98: 1 space backwards AM_drawCrosshair() Draw the single point crosshair representing map center Passed the color to draw the pixel with Returns nothing CPhipps - made static inline, and use the general pixel plotter function single point for now AM_Drawer() Draws the entire automap Passed nothing, returns nothing CPhipps - all automap modes put into one enum cph - If not overlay mode, clear background for the automapjff 1/5/98 background default colorjff 1/7/98 grid default colorjff 1/5/98 default double IDDT spritejff 1/7/98 default crosshair color Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *   the automap code
 *
 *-----------------------------------------------------------------------------
  Ty 03/27/98 - externalizationsjff 1/7/98 default automap colors added map background grid lines color normal 1s wall color line at floor height change color line at ceiling height change color line at sector with floor=ceiling color red key color blue key color yellow key color red door color  (diff from keys to allow option) blue door color (of enabling one but not other ) yellow door color teleporter line color secret sector boundary color jff 4/23/98 add exit line color computer map unseen line color line with no floor/ceiling changes general sprite color item sprite color friendly sprite color crosshair color single player arrow color colors for player arrows in multiplayerjff 3/9/98 add option to not show secret sectors until enteredjff 4/3/98 add symbols for "no-color" for disable and "black color" for black drawing stuff scale on entry how much the automap moves window per tic in frame-buffer coordinates moves 140 pixels in 1 second how much zoom-in per tic goes to 2x in 1 second how much zoom-out per tic pulls out to 0.5x in 1 second translates between frame-buffer and map distances translates between frame-buffer and map coordinates The vector graphics for the automap.  A line drawing of the player pointing right,   starting from the middle. ----- -----> >----> >>---> killough 3/22/98: He's alive, Jim :) ----- -----> >----> >>---> J F Fjff 1/5/98 new symbol for keys on automapjff 1/5/98 end of new symbol killough 2/7/98: make global, rename to ddt_* kluge until AM_LevelInit() is called Mode that the automap is in location of window on screen size of window on screen how far the window pans each tic (map coords) how far the window zooms each tic (map coords) how far the window zooms each tic (fb coords) LL x,y window location on the map (map coords) UR x,y window location on the map (map coords) width/height of window on map (map coords) based on level size max_x-min_x, max_y-min_y based on player size used to tell when to stop zooming out used to tell when to stop zooming in old stuff for recovery later old location used by the Follower routine used by MTOF to scale from map-to-frame-buffer coords used by FTOM to scale from frame-buffer-to-map coords (=1/scale_mtof) the player represented by an arrow killough 2/22/98: Remove limit on automap marks, and make variables external for use in savegames. where the points are next point to be assigned (also number of points now) killough 2/22/98 AM_getIslope() Calculates the slope and slope according to the x-axis of a line segment in map coordinates (with the upright y-axis n' all) so that it can be used with the brain-dead drawing stuff. Passed the line slope is desired for and an islope_t structure for return Returns nothing AM_activateNewScale() Changes the map scale after zooming or translating Passed nothing, returns nothing AM_saveScaleAndLoc() Saves the current center and zoom Affects the variables that remember old scale and loc Passed nothing, returns nothing AM_restoreScaleAndLoc() restores the center and zoom from locally saved values Affects global variables for location and scale Passed nothing, returns nothing Change the scaling multipliers AM_addMark() Adds a marker at the current location Affects global variables for marked points Passed nothing, returns nothing killough 2/22/98: remove limit on automap marks AM_findMinMaxBoundaries() Determines bounding box of all vertices, sets global variables controlling zoom range. Passed nothing, returns nothing const? never changed? AM_changeWindowLoc() Moves the map window by the global variables m_paninc.x, m_paninc.y Passed nothing, returns nothing AM_initVariables() Initialize the variables for the automap Affects the automap global variables Status bar is notified that the automap has been entered Passed nothing, returns nothing find player to center on initially for saving & restoring inform the status bar of the change AM_loadPics() cph - mark numbers no longer needed cached AM_unloadPics() cph - mark numbers no longer needed cached AM_clearMarks() Sets the number of marks to 0, thereby clearing them from the display Affects the global variable markpointnum Passed nothing, returns nothing AM_LevelInit() Initialize the automap at the start of a new level should be called at the start of every level Passed nothing, returns nothing Affects automap's global variables CPhipps - get status bar height from status bar code killough 2/7/98: get rid of finit_ vars to allow runtime setting of width/height AM_Stop() Cease automap operations, unload patches, notify status bar Passed nothing, returns nothing AM_Start() Start up automap operations,  if a new level, or game start, (re)initialize level variables  init map variables  load mark patches Passed nothing, returns nothing AM_minOutWindowScale() Set the window scale to the maximum size Passed nothing, returns nothing AM_maxOutWindowScale(void) Set the window scale to the minimum size Passed nothing, returns nothing AM_Responder() Handle events (user inputs) in automap mode Passed an input event, returns true if its handled phares phares phares    |    V CPhipps - put all automap mode stuff into one enum Ty 03/27/98 - externalized CPhipps Ty 03/27/98 - *not* externalized Ty 03/27/98 - *not* externalized Ty 03/27/98 - *not* externalized    ^    | phares AM_rotate() Rotation in 2D. Used to rotate player arrow line character. Passed the coordinates of a point, and an angle Returns the coordinates rotated by the angle CPhipps - made static & enhanced for automap rotation AM_changeWindowScale() Automap zooming Passed nothing, returns nothing Change the scaling multipliers AM_doFollowPlayer() Turn on follow mode - the map scrolls opposite to player motion Passed nothing, returns nothing AM_Ticker() Updates on gametic - enter follow mode, zoom, or change map location Passed nothing, returns nothing Change the zoom if necessary Change x,y location AM_clipMline() Automap clipping of lines. Based on Cohen-Sutherland clipping algorithm but with a slightly faster reject and precalculated slopes. If the speed is needed, use a hash algorithm to handle the common cases. Passed the line's coordinates on map and in the frame buffer performs clipping on them in the lines frame coordinates. Returns true if any part of line was not clipped do trivial rejects and outcodes trivially outside trivially outside transform to frame-buffer coordinates. may be partially inside box find an outside point clip to each side trivially outside AM_drawFline() Draw a line in the frame buffer. Classic Bresenham w/ whatever optimizations needed for speed Passed the frame coordinates of line, and the color to be drawn Returns nothing killough 2/22/98 For debugging onlyjff 8/3/98 use logical output routine AM_drawMline() Clip lines, draw visible parts of lines. Passed the map coordinates of the line, and the color to draw it Color -1 is special and prevents drawing. Color 247 is special and is translated to black, allowing Color 0 to represent feature disable in the defaults file. Returns nothing. jff 4/3/98 allow not drawing any sort of line by setting its color to -1 jff 4/3/98 if color is 247 (xparent), use black draws it on frame buffer using fb coords AM_drawGrid() Draws blockmap aligned grid lines. Passed the color to draw the grid lines Returns nothing Figure out start of vertical gridlines draw vertical gridlines Figure out start of horizontal gridlines draw horizontal gridlines AM_DoorColor() Returns the 'color' or key needed for a door linedef type Passed the type of linedef, returns:   -1 if not a keyed door    0 if a red key required    1 if a blue key required    2 if a yellow key required    3 if a multiple keys required jff 4/3/98 add routine to get color of generalized keyed doorany or all keys closed keyed doorbluekeyyellowkeyredkeynot a keyed doornot a keyed door Determines visible lines, draws them. This is LineDef based, not LineSeg based. jff 1/5/98 many changes in this routine backward compatibility not needed, so just changes, no ifs addition of clauses for:    doors opening, keyed door id, secret sectors,    teleports, exit lines, key things ability to suppress any of added features or lines with no height changes support for gamma correction in automap abandoned jff 4/3/98 changed mapcolor_xxxx=0 as control to disable feature jff 4/3/98 changed mapcolor_xxxx=-1 to disable drawing line completely draw the unclipped visible portions of all lines if line has been seen or IDDT has been used cph - show keyed doors and lines  non-secret  closed keyed door bluekeyyellowkeyredkeyany or all jff 4/23/98 add exit lines to automap  exit line  jff 1/10/98 add new color for 1S secret sector boundaryjff 4/3/98 0 is disable line bounding secret sectorjff 2/16/98 fixed bug special was cleared now for 2S lines  jff 1/10/98 add color change for all teleporter types teleporters secret door wall color non-secret closed door non-secret closed doorjff 1/6/98 show secret sector 2S linesjff 2/16/98 fixed bug special was cleared after getting itjff 3/9/98 add logic to not show secret til after entered if map_secret_after is true line bounding secret sectorjff 1/6/98 end secret sector line change floor level change ceiling level change2S lines that appear only in IDDT now draw the lines only visible because the player has computermap computermap visible lines invisible flag lines do not show AM_drawLineCharacter() Draws a vector graphic according to numerous parameters Passed the structure defining the vector graphic shape, the number of vectors in it, the scale to draw it at, the angle to draw it at, the color to draw it with, and the map coordinates to draw it at. Returns nothing cph AM_drawPlayers() Draws the player arrow in single player, or all the player arrows in a netgame. Passed nothing, returns nothingjff colorjff color *close* to black jff 1/6/98 use default color AM_drawThings() Draws the things on the automap in double IDDT cheat mode Passed colors and colorrange, no longer used Returns nothing for all sectors for all things in that sectorjff 1/5/98 case over doomednum of thing being drawnjff 1/5/98 treat keys specialjff  red keyjff yellow keyjff blue keyjff 1/5/98 end added code for keysjff previously entire code bbm 2/28/03 Show countable items in yellow.  AM_drawMarks() Draw the marked locations on the automap Passed nothing, returns nothing killough 2/22/98: Rewrote AM_drawMarks(). Removed limit on marks. killough 2/22/98: remove automap mark limit killough 2/22/98: less spacing for '1' cph - construct patch name and draw marker killough 2/22/98: 1 space backwards AM_drawCrosshair() Draw the single point crosshair representing map center Passed the color to draw the pixel with Returns nothing CPhipps - made static inline, and use the general pixel plotter function single point for now AM_Drawer() Draws the entire automap Passed nothing, returns nothing CPhipps - all automap modes put into one enum cph - If not overlay mode, clear background for the automapjff 1/5/98 background default colorjff 1/7/98 grid default colorjff 1/5/98 default double IDDT spritejff 1/7/98 default crosshair color