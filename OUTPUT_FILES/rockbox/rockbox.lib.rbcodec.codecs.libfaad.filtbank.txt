
** FAAD2 - Freeware Advanced Audio (AAC) Decoder including SBR decoding
** Copyright (C) 2003-2004 M. Bakker, Ahead Software AG, http://www.nero.com
**  
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
** 
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
** 
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software 
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** Any non-GPL usage of this software or parts of this software is strictly
** forbidden.
**
** Commercial non-GPL licensing of this software is possible.
** For more info contact Ahead Software through Mpeg4AAClicense@nero.com.
**
** $Id$
* static variables Windowing functions borrowed from libwmai Block sizes are always power of two  consume the first data and window value so we can use those
         * registers again  *dst=*dst+(r9<<1) Block sizes are always power of two  Block sizes are always power of two. Smallest block is always way bigger
     * than four too. Block sizes are always power of two. Smallest block is always way bigger
     * than four too. select windows of current frame and previous frame (Sine or KBD)  AAC uses two different window shapes depending on spectal features  perform iMDCT  add second half output of previous frame to windowed output of current frame  window the second half and save as overlap for next frame  perform iMDCT  add second half output of previous frame to windowed output of current frame  window the second half and save as overlap for next frame  construct second half window using padding with 1's and 0's  this could be assemblerized too, but this case is extremely uncommon  perform iMDCT for each short block  Add second half output of previous frame to windowed output of current 
         * frame  Step 1: copy  Step 2: First window half, first half of nshort  Step 3: First window half, second half of nshort  Window the second half and save as overlap for next frame  Step 1: Second window half, first half of nshort  Step 2: Second window half, second half of nshort  Step 3: Set to zero  perform iMDCT  add second half output of previous frame to windowed output of current frame  construct first half window using padding with 1's and 0's  nflat_ls can be divided by 2.  window the second half and save as overlap for next frame printf("0x%.8X\n", time_out[i]); only works for LTP -> no overlapping, no short blocks assert(window_sequence != EIGHT_SHORT_SEQUENCE);
** FAAD2 - Freeware Advanced Audio (AAC) Decoder including SBR decoding
** Copyright (C) 2003-2004 M. Bakker, Ahead Software AG, http://www.nero.com
**  
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
** 
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
** 
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software 
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** Any non-GPL usage of this software or parts of this software is strictly
** forbidden.
**
** Commercial non-GPL licensing of this software is possible.
** For more info contact Ahead Software through Mpeg4AAClicense@nero.com.
**
** $Id$
* static variables Windowing functions borrowed from libwmai Block sizes are always power of two  consume the first data and window value so we can use those
         * registers again  *dst=*dst+(r9<<1) Block sizes are always power of two  Block sizes are always power of two. Smallest block is always way bigger
     * than four too. Block sizes are always power of two. Smallest block is always way bigger
     * than four too. select windows of current frame and previous frame (Sine or KBD)  AAC uses two different window shapes depending on spectal features  perform iMDCT  add second half output of previous frame to windowed output of current frame  window the second half and save as overlap for next frame  perform iMDCT  add second half output of previous frame to windowed output of current frame  window the second half and save as overlap for next frame  construct second half window using padding with 1's and 0's  this could be assemblerized too, but this case is extremely uncommon  perform iMDCT for each short block  Add second half output of previous frame to windowed output of current 
         * frame  Step 1: copy  Step 2: First window half, first half of nshort  Step 3: First window half, second half of nshort  Window the second half and save as overlap for next frame  Step 1: Second window half, first half of nshort  Step 2: Second window half, second half of nshort  Step 3: Set to zero  perform iMDCT  add second half output of previous frame to windowed output of current frame  construct first half window using padding with 1's and 0's  nflat_ls can be divided by 2.  window the second half and save as overlap for next frame printf("0x%.8X\n", time_out[i]); only works for LTP -> no overlapping, no short blocks assert(window_sequence != EIGHT_SHORT_SEQUENCE);
** FAAD2 - Freeware Advanced Audio (AAC) Decoder including SBR decoding
** Copyright (C) 2003-2004 M. Bakker, Ahead Software AG, http://www.nero.com
**  
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
** 
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
** 
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software 
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** Any non-GPL usage of this software or parts of this software is strictly
** forbidden.
**
** Commercial non-GPL licensing of this software is possible.
** For more info contact Ahead Software through Mpeg4AAClicense@nero.com.
**
** $Id$
* static variables Windowing functions borrowed from libwmai Block sizes are always power of two  consume the first data and window value so we can use those
         * registers again  *dst=*dst+(r9<<1) Block sizes are always power of two  Block sizes are always power of two. Smallest block is always way bigger
     * than four too. Block sizes are always power of two. Smallest block is always way bigger
     * than four too. select windows of current frame and previous frame (Sine or KBD)  AAC uses two different window shapes depending on spectal features  perform iMDCT  add second half output of previous frame to windowed output of current frame  window the second half and save as overlap for next frame  perform iMDCT  add second half output of previous frame to windowed output of current frame  window the second half and save as overlap for next frame  construct second half window using padding with 1's and 0's  this could be assemblerized too, but this case is extremely uncommon  perform iMDCT for each short block  Add second half output of previous frame to windowed output of current 
         * frame  Step 1: copy  Step 2: First window half, first half of nshort  Step 3: First window half, second half of nshort  Window the second half and save as overlap for next frame  Step 1: Second window half, first half of nshort  Step 2: Second window half, second half of nshort  Step 3: Set to zero  perform iMDCT  add second half output of previous frame to windowed output of current frame  construct first half window using padding with 1's and 0's  nflat_ls can be divided by 2.  window the second half and save as overlap for next frame printf("0x%.8X\n", time_out[i]); only works for LTP -> no overlapping, no short blocks assert(window_sequence != EIGHT_SHORT_SEQUENCE);