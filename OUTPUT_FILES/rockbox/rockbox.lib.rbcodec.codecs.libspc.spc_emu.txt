**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006-2007 Adam Gashlin (hcs)
 * Copyright (C) 2004-2007 Shay Green (blargg)
 * Copyright (C) 2002 Brad Martin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** lovingly ripped off from Game_Music_Emu 0.5.2. http://www.slack.net/~ant/  DSP Based on Brad Martin's OpenSPC DSP emulator  tag reading from sexyspc by John Brawn (John_Brawn@yahoo.com) and others *************** Timers *************** when disabled, next_tick should always be in the future  avoid unnecessary division *************** SPC emulator *************** 1.024 MHz clock / 32000 samples per second  TODO: ROM can still get overwritten when DSP writes to echo buffer  8 kHz  8 kHz  8 kHz  Put STOP instruction around memory to catch PC underflow/overflow.  A few tracks read from the last four bytes of IPL ROM  Have DSP in a defined state in case EMU is run and hasn't loaded
     * a program yet  ram  boot rom (have to force enable_rom() to update it)  dsp  some SPCs rely on DSP immediately generating one sample  timers  Handle registers which already give 0 when read by
       setting RAM and not changing it.
       Put STOP instruction in registers which can be read,
       to catch attempted execution. *************** DSP interaction *************** divide by CLOCKS_PER_SAMPLE  counters  dsp  first page is very common  RAM  DSP case 0xF2: mapped to RAM dprintf( "DSP write to $%02X\n", (int) reg );  Test register dprintf( "Wrote $%02X to $F0\n", (int) data );  Config  timers  just enabled  port clears  Ports  to do: handle output ports  verified on SNES that these are read/write (RAM) case 0xF8: case 0xF9:  Timers  Counters (cleared on write) dprintf( "Wrote to counter $%02X\n", (int) addr ); *************** Sample generation *************** output is always in pairs of samples  DSP output is made on-the-fly when DSP registers are read or written  Localize timer next_tick times and run them to the present to prevent
       a running but ignored timer's next_tick from getting too far behind
       and overflowing.  Run from start_time to 0, pre-advancing by extra cycles from last run dprintf( "Unhandled instruction $%02X, pc = $%04X\n",
                (int) CPU_read( r.pc ), (unsigned) r.pc );  Catch DSP up to present **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006-2007 Adam Gashlin (hcs)
 * Copyright (C) 2004-2007 Shay Green (blargg)
 * Copyright (C) 2002 Brad Martin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** lovingly ripped off from Game_Music_Emu 0.5.2. http://www.slack.net/~ant/  DSP Based on Brad Martin's OpenSPC DSP emulator  tag reading from sexyspc by John Brawn (John_Brawn@yahoo.com) and others *************** Timers *************** when disabled, next_tick should always be in the future  avoid unnecessary division *************** SPC emulator *************** 1.024 MHz clock / 32000 samples per second  TODO: ROM can still get overwritten when DSP writes to echo buffer  8 kHz  8 kHz  8 kHz  Put STOP instruction around memory to catch PC underflow/overflow.  A few tracks read from the last four bytes of IPL ROM  Have DSP in a defined state in case EMU is run and hasn't loaded
     * a program yet  ram  boot rom (have to force enable_rom() to update it)  dsp  some SPCs rely on DSP immediately generating one sample  timers  Handle registers which already give 0 when read by
       setting RAM and not changing it.
       Put STOP instruction in registers which can be read,
       to catch attempted execution. *************** DSP interaction *************** divide by CLOCKS_PER_SAMPLE  counters  dsp  first page is very common  RAM  DSP case 0xF2: mapped to RAM dprintf( "DSP write to $%02X\n", (int) reg );  Test register dprintf( "Wrote $%02X to $F0\n", (int) data );  Config  timers  just enabled  port clears  Ports  to do: handle output ports  verified on SNES that these are read/write (RAM) case 0xF8: case 0xF9:  Timers  Counters (cleared on write) dprintf( "Wrote to counter $%02X\n", (int) addr ); *************** Sample generation *************** output is always in pairs of samples  DSP output is made on-the-fly when DSP registers are read or written  Localize timer next_tick times and run them to the present to prevent
       a running but ignored timer's next_tick from getting too far behind
       and overflowing.  Run from start_time to 0, pre-advancing by extra cycles from last run dprintf( "Unhandled instruction $%02X, pc = $%04X\n",
                (int) CPU_read( r.pc ), (unsigned) r.pc );  Catch DSP up to present **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006-2007 Adam Gashlin (hcs)
 * Copyright (C) 2004-2007 Shay Green (blargg)
 * Copyright (C) 2002 Brad Martin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** lovingly ripped off from Game_Music_Emu 0.5.2. http://www.slack.net/~ant/  DSP Based on Brad Martin's OpenSPC DSP emulator  tag reading from sexyspc by John Brawn (John_Brawn@yahoo.com) and others *************** Timers *************** when disabled, next_tick should always be in the future  avoid unnecessary division *************** SPC emulator *************** 1.024 MHz clock / 32000 samples per second  TODO: ROM can still get overwritten when DSP writes to echo buffer  8 kHz  8 kHz  8 kHz  Put STOP instruction around memory to catch PC underflow/overflow.  A few tracks read from the last four bytes of IPL ROM  Have DSP in a defined state in case EMU is run and hasn't loaded
     * a program yet  ram  boot rom (have to force enable_rom() to update it)  dsp  some SPCs rely on DSP immediately generating one sample  timers  Handle registers which already give 0 when read by
       setting RAM and not changing it.
       Put STOP instruction in registers which can be read,
       to catch attempted execution. *************** DSP interaction *************** divide by CLOCKS_PER_SAMPLE  counters  dsp  first page is very common  RAM  DSP case 0xF2: mapped to RAM dprintf( "DSP write to $%02X\n", (int) reg );  Test register dprintf( "Wrote $%02X to $F0\n", (int) data );  Config  timers  just enabled  port clears  Ports  to do: handle output ports  verified on SNES that these are read/write (RAM) case 0xF8: case 0xF9:  Timers  Counters (cleared on write) dprintf( "Wrote to counter $%02X\n", (int) addr ); *************** Sample generation *************** output is always in pairs of samples  DSP output is made on-the-fly when DSP registers are read or written  Localize timer next_tick times and run them to the present to prevent
       a running but ignored timer's next_tick from getting too far behind
       and overflowing.  Run from start_time to 0, pre-advancing by extra cycles from last run dprintf( "Unhandled instruction $%02X, pc = $%04X\n",
                (int) CPU_read( r.pc ), (unsigned) r.pc );  Catch DSP up to present 