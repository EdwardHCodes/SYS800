**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Forward interrupt handler declarations  00h  04h  08h  0ch  10h  Module base address  Running job  Most recent job added  Module interrupt handler  Composite address value  Have buffers been modified?  Enable count  Clock gating index  Module interrupt number  Actually begin the session at the queue head  If interface isn't enabled or buffers have been used, the transfer
       cannot be started/restarted.  Set speed  Clear status  Enable module, enable Interrupt, master transmitter  Slave address/rd  Receiving less than two bytes - disable ACK generation  Remember composite address - contains info concerning RX or TX  Set config, generate START.  Address slave (first byte sent) and begin session.  Clear IIF  Bus arbitration was lost - retry current transfer until it succeeds  Best guess as to why: at high CPU speeds, voltage hasn't had time to
         * stabilize to register STOP if a new transfer is started very soon
         * after a previous one has completed. AFAICT, this might happen once at
         * most on a transfer. Switching to repeated START could be a better way
         * to handle the cases where multiple transfers are already queued.  Restart failed - STOP  ADDR cycle or TX  NACK  Send next TX byte  ADDR cycle is complete  Switch to RX mode  Dummy read  Transfer complete or NACK - STOP  RX  2nd to Last byte - NACK  Read data from I2DR and store  Generate STOP signal before reading final byte  Read data from I2DR and store  Start next transfer, if any  Last job on queue  Callback may have restarted transfers.  Queue next job  Send and/or receive data on the specified node asynchronously  Can't pass a busy descriptor, requires a node, < 0 sizes
           or all-0 sizes not permitted.  No transfers in progress; start interface.  Start ok: actually put it in the queue.  First, self-reference terminate  Already running: simply add to end and the final INT on the
         * running transfer will pick it up.  Add to tail  New tail  Self-reference terminate * Synchronous transfers support * Sub-address  Raw read from slave  Do one-time inits for each module that will be used - leave
     * module disabled and unclocked until something wants it.  Enable or disable the node - modules will be switched on/off accordingly.  First enable  Last enable  Wait for last tranfer  Wait for STOP **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Forward interrupt handler declarations  00h  04h  08h  0ch  10h  Module base address  Running job  Most recent job added  Module interrupt handler  Composite address value  Have buffers been modified?  Enable count  Clock gating index  Module interrupt number  Actually begin the session at the queue head  If interface isn't enabled or buffers have been used, the transfer
       cannot be started/restarted.  Set speed  Clear status  Enable module, enable Interrupt, master transmitter  Slave address/rd  Receiving less than two bytes - disable ACK generation  Remember composite address - contains info concerning RX or TX  Set config, generate START.  Address slave (first byte sent) and begin session.  Clear IIF  Bus arbitration was lost - retry current transfer until it succeeds  Best guess as to why: at high CPU speeds, voltage hasn't had time to
         * stabilize to register STOP if a new transfer is started very soon
         * after a previous one has completed. AFAICT, this might happen once at
         * most on a transfer. Switching to repeated START could be a better way
         * to handle the cases where multiple transfers are already queued.  Restart failed - STOP  ADDR cycle or TX  NACK  Send next TX byte  ADDR cycle is complete  Switch to RX mode  Dummy read  Transfer complete or NACK - STOP  RX  2nd to Last byte - NACK  Read data from I2DR and store  Generate STOP signal before reading final byte  Read data from I2DR and store  Start next transfer, if any  Last job on queue  Callback may have restarted transfers.  Queue next job  Send and/or receive data on the specified node asynchronously  Can't pass a busy descriptor, requires a node, < 0 sizes
           or all-0 sizes not permitted.  No transfers in progress; start interface.  Start ok: actually put it in the queue.  First, self-reference terminate  Already running: simply add to end and the final INT on the
         * running transfer will pick it up.  Add to tail  New tail  Self-reference terminate * Synchronous transfers support * Sub-address  Raw read from slave  Do one-time inits for each module that will be used - leave
     * module disabled and unclocked until something wants it.  Enable or disable the node - modules will be switched on/off accordingly.  First enable  Last enable  Wait for last tranfer  Wait for STOP **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Forward interrupt handler declarations  00h  04h  08h  0ch  10h  Module base address  Running job  Most recent job added  Module interrupt handler  Composite address value  Have buffers been modified?  Enable count  Clock gating index  Module interrupt number  Actually begin the session at the queue head  If interface isn't enabled or buffers have been used, the transfer
       cannot be started/restarted.  Set speed  Clear status  Enable module, enable Interrupt, master transmitter  Slave address/rd  Receiving less than two bytes - disable ACK generation  Remember composite address - contains info concerning RX or TX  Set config, generate START.  Address slave (first byte sent) and begin session.  Clear IIF  Bus arbitration was lost - retry current transfer until it succeeds  Best guess as to why: at high CPU speeds, voltage hasn't had time to
         * stabilize to register STOP if a new transfer is started very soon
         * after a previous one has completed. AFAICT, this might happen once at
         * most on a transfer. Switching to repeated START could be a better way
         * to handle the cases where multiple transfers are already queued.  Restart failed - STOP  ADDR cycle or TX  NACK  Send next TX byte  ADDR cycle is complete  Switch to RX mode  Dummy read  Transfer complete or NACK - STOP  RX  2nd to Last byte - NACK  Read data from I2DR and store  Generate STOP signal before reading final byte  Read data from I2DR and store  Start next transfer, if any  Last job on queue  Callback may have restarted transfers.  Queue next job  Send and/or receive data on the specified node asynchronously  Can't pass a busy descriptor, requires a node, < 0 sizes
           or all-0 sizes not permitted.  No transfers in progress; start interface.  Start ok: actually put it in the queue.  First, self-reference terminate  Already running: simply add to end and the final INT on the
         * running transfer will pick it up.  Add to tail  New tail  Self-reference terminate * Synchronous transfers support * Sub-address  Raw read from slave  Do one-time inits for each module that will be used - leave
     * module disabled and unclocked until something wants it.  Enable or disable the node - modules will be switched on/off accordingly.  First enable  Last enable  Wait for last tranfer  Wait for STOP 