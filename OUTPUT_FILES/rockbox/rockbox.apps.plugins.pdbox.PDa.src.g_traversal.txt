 Copyright (c) 1997-1999 Miller Puckette.
* For information on usage and redistribution, and for a DISCLAIMER OF ALL
* WARRANTIES, see the file, "LICENSE.txt," in this distribution.   This file defines Text objects which traverse data contained in scalars
and arrays:

pointer - point to an object belonging to a template
get -     get numeric fields
set -     change numeric fields
element - get an array element
getsize - get the size of an array
setsize - change the size of an array
append -  add an element to a list
sublist - get a pointer into a list which is an element of another scalar

 ROCKBOX  for read/write to files  ROCKBOX  ------------- gstubs and gpointers - safe pointing ---------------  create a gstub which is "owned" by a glist (gl) or an array ("a").  when a "gpointer" is set to point to this stub (so we can later chase
down the owner) we increase a reference count.  The following routine is called
whenever a gpointer is unset from pointing here.  If the owner is
gone and the refcount goes to zero, we can free the gstub safely.  this routing is called by the owner to inform the gstub that it is
being deleted.  If no gpointers are pointing here, we can free the gstub;
otherwise we wait for the last gstub_dis() to free it.  call this to verify that a pointer is fresh, i.e., that it either
points to real data or to the head of a list, and that in either case
the object hasn't disappeared since this pointer was generated. 
Unless "headok" is set,  the routine also fails for the head of a list.  call this if you know the pointer is fresh but don't know if we're pointing
to the head of a list or to real data.   Any pointer is known to be fresh
when it appears as the argument of a message, but if your "pointer" method 
or inlet stores it and you use it later, call gpointer_check above.  LATER reconsider the above... I no longer think it's true!  get the template for the object pointer to.  Assumes we've already checked
freshness.  Returns 0 if head of list.  copy a pointer to another, assuming the first one is fresh and
    the second one hasn't yet been initialized.  ---------------------- pointers -----------------------------  ROCKBOX  ROCKBOX  ---------------------- get -----------------------------  LATER connect with the template and set the outlet's type
    	    correctly.  We can't yet guarantee that the template is there
    	    before we hit this routine.  LATER deal with other types.  ---------------------- set -----------------------------  LATER take other types  LATER figure out type as in "get" object.  LATER deal with other types ala get_pointer.  ---------------------- elem -----------------------------  ---------------------- getsize -----------------------------  ROCKBOX  ROCKBOX  ---------------------- setsize -----------------------------  erase the array before resizing it.  If we belong to a
    	scalar it's easy, but if we belong to an element of another
    	array we have to search back until we get to a scalar to erase.
    	When graphics updates become queueable this may fall apart...  now do the resizing and, if growing, initialize new scalars  ROCKBOX  ROCKBOX  post("new %x %x, ntypes %d", newelem, *(int *)newelem, ntypes);  redraw again.  ---------------------- append -----------------------------  ---------------------- sublist -----------------------------  ----------------- setup function -------------------  Copyright (c) 1997-1999 Miller Puckette.
* For information on usage and redistribution, and for a DISCLAIMER OF ALL
* WARRANTIES, see the file, "LICENSE.txt," in this distribution.   This file defines Text objects which traverse data contained in scalars
and arrays:

pointer - point to an object belonging to a template
get -     get numeric fields
set -     change numeric fields
element - get an array element
getsize - get the size of an array
setsize - change the size of an array
append -  add an element to a list
sublist - get a pointer into a list which is an element of another scalar

 ROCKBOX  for read/write to files  ROCKBOX  ------------- gstubs and gpointers - safe pointing ---------------  create a gstub which is "owned" by a glist (gl) or an array ("a").  when a "gpointer" is set to point to this stub (so we can later chase
down the owner) we increase a reference count.  The following routine is called
whenever a gpointer is unset from pointing here.  If the owner is
gone and the refcount goes to zero, we can free the gstub safely.  this routing is called by the owner to inform the gstub that it is
being deleted.  If no gpointers are pointing here, we can free the gstub;
otherwise we wait for the last gstub_dis() to free it.  call this to verify that a pointer is fresh, i.e., that it either
points to real data or to the head of a list, and that in either case
the object hasn't disappeared since this pointer was generated. 
Unless "headok" is set,  the routine also fails for the head of a list.  call this if you know the pointer is fresh but don't know if we're pointing
to the head of a list or to real data.   Any pointer is known to be fresh
when it appears as the argument of a message, but if your "pointer" method 
or inlet stores it and you use it later, call gpointer_check above.  LATER reconsider the above... I no longer think it's true!  get the template for the object pointer to.  Assumes we've already checked
freshness.  Returns 0 if head of list.  copy a pointer to another, assuming the first one is fresh and
    the second one hasn't yet been initialized.  ---------------------- pointers -----------------------------  ROCKBOX  ROCKBOX  ---------------------- get -----------------------------  LATER connect with the template and set the outlet's type
    	    correctly.  We can't yet guarantee that the template is there
    	    before we hit this routine.  LATER deal with other types.  ---------------------- set -----------------------------  LATER take other types  LATER figure out type as in "get" object.  LATER deal with other types ala get_pointer.  ---------------------- elem -----------------------------  ---------------------- getsize -----------------------------  ROCKBOX  ROCKBOX  ---------------------- setsize -----------------------------  erase the array before resizing it.  If we belong to a
    	scalar it's easy, but if we belong to an element of another
    	array we have to search back until we get to a scalar to erase.
    	When graphics updates become queueable this may fall apart...  now do the resizing and, if growing, initialize new scalars  ROCKBOX  ROCKBOX  post("new %x %x, ntypes %d", newelem, *(int *)newelem, ntypes);  redraw again.  ---------------------- append -----------------------------  ---------------------- sublist -----------------------------  ----------------- setup function -------------------  Copyright (c) 1997-1999 Miller Puckette.
* For information on usage and redistribution, and for a DISCLAIMER OF ALL
* WARRANTIES, see the file, "LICENSE.txt," in this distribution.   This file defines Text objects which traverse data contained in scalars
and arrays:

pointer - point to an object belonging to a template
get -     get numeric fields
set -     change numeric fields
element - get an array element
getsize - get the size of an array
setsize - change the size of an array
append -  add an element to a list
sublist - get a pointer into a list which is an element of another scalar

 ROCKBOX  for read/write to files  ROCKBOX  ------------- gstubs and gpointers - safe pointing ---------------  create a gstub which is "owned" by a glist (gl) or an array ("a").  when a "gpointer" is set to point to this stub (so we can later chase
down the owner) we increase a reference count.  The following routine is called
whenever a gpointer is unset from pointing here.  If the owner is
gone and the refcount goes to zero, we can free the gstub safely.  this routing is called by the owner to inform the gstub that it is
being deleted.  If no gpointers are pointing here, we can free the gstub;
otherwise we wait for the last gstub_dis() to free it.  call this to verify that a pointer is fresh, i.e., that it either
points to real data or to the head of a list, and that in either case
the object hasn't disappeared since this pointer was generated. 
Unless "headok" is set,  the routine also fails for the head of a list.  call this if you know the pointer is fresh but don't know if we're pointing
to the head of a list or to real data.   Any pointer is known to be fresh
when it appears as the argument of a message, but if your "pointer" method 
or inlet stores it and you use it later, call gpointer_check above.  LATER reconsider the above... I no longer think it's true!  get the template for the object pointer to.  Assumes we've already checked
freshness.  Returns 0 if head of list.  copy a pointer to another, assuming the first one is fresh and
    the second one hasn't yet been initialized.  ---------------------- pointers -----------------------------  ROCKBOX  ROCKBOX  ---------------------- get -----------------------------  LATER connect with the template and set the outlet's type
    	    correctly.  We can't yet guarantee that the template is there
    	    before we hit this routine.  LATER deal with other types.  ---------------------- set -----------------------------  LATER take other types  LATER figure out type as in "get" object.  LATER deal with other types ala get_pointer.  ---------------------- elem -----------------------------  ---------------------- getsize -----------------------------  ROCKBOX  ROCKBOX  ---------------------- setsize -----------------------------  erase the array before resizing it.  If we belong to a
    	scalar it's easy, but if we belong to an element of another
    	array we have to search back until we get to a scalar to erase.
    	When graphics updates become queueable this may fall apart...  now do the resizing and, if growing, initialize new scalars  ROCKBOX  ROCKBOX  post("new %x %x, ntypes %d", newelem, *(int *)newelem, ntypes);  redraw again.  ---------------------- append -----------------------------  ---------------------- sublist -----------------------------  ----------------- setup function ------------------- 