*****************************************************************************
**
** FILE NAME    : ifxmips_deu_danube.c
** PROJECT      : IFX UEIP
** MODULES      : DEU Module for Danube
**
** DATE         : September 8, 2009
** AUTHOR       : Mohammad Firdaus
** DESCRIPTION  : Data Encryption Unit Driver
** COPYRIGHT    :       Copyright (c) 2009
**                      Infineon Technologies AG
**                      Am Campeon 1-12, 85579 Neubiberg, Germany
**
**    This program is free software; you can redistribute it and/or modify
**    it under the terms of the GNU General Public License as published by
**    the Free Software Foundation; either version 2 of the License, or
**    (at your option) any later version.
**
** HISTORY
** $Date        $Author             $Comment
** 08,Sept 2009 Mohammad Firdaus    Initial UEIP release
******************************************************************************!
  \defgroup IFX_DEU IFX_DEU_DRIVERS
  \ingroup API
  \brief deu driver module
!
  \file	ifxmips_deu_danube.c
  \ingroup IFX_DEU
  \brief board specific deu driver file for danube
!
  \defgroup BOARD_SPECIFIC_FUNCTIONS IFX_BOARD_SPECIFIC_FUNCTIONS
  \ingroup IFX_DEU
  \brief board specific deu functions
 Project header files dma_cache_inv Function Declerations  Variables definition ! \fn u32 endian_swap(u32 input) 
 *  \ingroup BOARD_SPECIFIC_FUNCTIONS
 *  \brief function is not used
 *  \param input Data input to be swapped
 *  \return input
! \fn	u32 input_swap(u32 input)
 *  \ingroup BOARD_SPECIFIC_FUNCTIONS
 *  \brief Swap the input data if the current chip is Danube version
 *         1.4 and do nothing to the data if the current chip is 
 *         Danube version 1.3 
 *  \param input data that needs to be swapped
 *  \return input or swapped input
! \fn void aes_chip_init (void)
 *  \ingroup BOARD_SPECIFIC_FUNCTIONS
 * \brief initialize AES hardware   
start crypto engine with write to ILR! \fn void des_chip_init (void)
 *  \ingroup BOARD_SPECIFIC_FUNCTIONS
 *  \brief initialize DES hardware
 start crypto engine with write to ILR! \fn void chip_version (void)
 *  \ingroup IFX_DES_FUNCTIONS
 *  \brief To find the version of the chip by looking at the chip ID
 *  \param ifx_danube_pre_1_4 (sets to 1 if Chip is Danube less than v1.4)
 DANUBE PRE 1.4 SOFTWARE FIX *****************************************************************************
**
** FILE NAME    : ifxmips_deu_danube.c
** PROJECT      : IFX UEIP
** MODULES      : DEU Module for Danube
**
** DATE         : September 8, 2009
** AUTHOR       : Mohammad Firdaus
** DESCRIPTION  : Data Encryption Unit Driver
** COPYRIGHT    :       Copyright (c) 2009
**                      Infineon Technologies AG
**                      Am Campeon 1-12, 85579 Neubiberg, Germany
**
**    This program is free software; you can redistribute it and/or modify
**    it under the terms of the GNU General Public License as published by
**    the Free Software Foundation; either version 2 of the License, or
**    (at your option) any later version.
**
** HISTORY
** $Date        $Author             $Comment
** 08,Sept 2009 Mohammad Firdaus    Initial UEIP release
******************************************************************************!
  \defgroup IFX_DEU IFX_DEU_DRIVERS
  \ingroup API
  \brief deu driver module
!
  \file	ifxmips_deu_danube.c
  \ingroup IFX_DEU
  \brief board specific deu driver file for danube
!
  \defgroup BOARD_SPECIFIC_FUNCTIONS IFX_BOARD_SPECIFIC_FUNCTIONS
  \ingroup IFX_DEU
  \brief board specific deu functions
 Project header files dma_cache_inv Function Declerations  Variables definition ! \fn u32 endian_swap(u32 input) 
 *  \ingroup BOARD_SPECIFIC_FUNCTIONS
 *  \brief function is not used
 *  \param input Data input to be swapped
 *  \return input
! \fn	u32 input_swap(u32 input)
 *  \ingroup BOARD_SPECIFIC_FUNCTIONS
 *  \brief Swap the input data if the current chip is Danube version
 *         1.4 and do nothing to the data if the current chip is 
 *         Danube version 1.3 
 *  \param input data that needs to be swapped
 *  \return input or swapped input
! \fn void aes_chip_init (void)
 *  \ingroup BOARD_SPECIFIC_FUNCTIONS
 * \brief initialize AES hardware   
start crypto engine with write to ILR! \fn void des_chip_init (void)
 *  \ingroup BOARD_SPECIFIC_FUNCTIONS
 *  \brief initialize DES hardware
 start crypto engine with write to ILR! \fn void chip_version (void)
 *  \ingroup IFX_DES_FUNCTIONS
 *  \brief To find the version of the chip by looking at the chip ID
 *  \param ifx_danube_pre_1_4 (sets to 1 if Chip is Danube less than v1.4)
 DANUBE PRE 1.4 SOFTWARE FIX *****************************************************************************
**
** FILE NAME    : ifxmips_deu_danube.c
** PROJECT      : IFX UEIP
** MODULES      : DEU Module for Danube
**
** DATE         : September 8, 2009
** AUTHOR       : Mohammad Firdaus
** DESCRIPTION  : Data Encryption Unit Driver
** COPYRIGHT    :       Copyright (c) 2009
**                      Infineon Technologies AG
**                      Am Campeon 1-12, 85579 Neubiberg, Germany
**
**    This program is free software; you can redistribute it and/or modify
**    it under the terms of the GNU General Public License as published by
**    the Free Software Foundation; either version 2 of the License, or
**    (at your option) any later version.
**
** HISTORY
** $Date        $Author             $Comment
** 08,Sept 2009 Mohammad Firdaus    Initial UEIP release
******************************************************************************!
  \defgroup IFX_DEU IFX_DEU_DRIVERS
  \ingroup API
  \brief deu driver module
!
  \file	ifxmips_deu_danube.c
  \ingroup IFX_DEU
  \brief board specific deu driver file for danube
!
  \defgroup BOARD_SPECIFIC_FUNCTIONS IFX_BOARD_SPECIFIC_FUNCTIONS
  \ingroup IFX_DEU
  \brief board specific deu functions
 Project header files dma_cache_inv Function Declerations  Variables definition ! \fn u32 endian_swap(u32 input) 
 *  \ingroup BOARD_SPECIFIC_FUNCTIONS
 *  \brief function is not used
 *  \param input Data input to be swapped
 *  \return input
! \fn	u32 input_swap(u32 input)
 *  \ingroup BOARD_SPECIFIC_FUNCTIONS
 *  \brief Swap the input data if the current chip is Danube version
 *         1.4 and do nothing to the data if the current chip is 
 *         Danube version 1.3 
 *  \param input data that needs to be swapped
 *  \return input or swapped input
! \fn void aes_chip_init (void)
 *  \ingroup BOARD_SPECIFIC_FUNCTIONS
 * \brief initialize AES hardware   
start crypto engine with write to ILR! \fn void des_chip_init (void)
 *  \ingroup BOARD_SPECIFIC_FUNCTIONS
 *  \brief initialize DES hardware
 start crypto engine with write to ILR! \fn void chip_version (void)
 *  \ingroup IFX_DES_FUNCTIONS
 *  \brief To find the version of the chip by looking at the chip ID
 *  \param ifx_danube_pre_1_4 (sets to 1 if Chip is Danube less than v1.4)
 DANUBE PRE 1.4 SOFTWARE FIX 