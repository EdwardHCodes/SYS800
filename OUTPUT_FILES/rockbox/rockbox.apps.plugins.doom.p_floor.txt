 Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *  General plane mover and floor mover action routines
 *  Floor motion, pure changer types, raising stairs. donuts, elevators
 *
 *-----------------------------------------------------------------------------///////////////////////////////////////////////////////////////////// Plane (floor or ceiling), Floor motion and Elevator action routines///////////////////////////////////////////////////////////////////// T_MovePlane() Move a plane (floor or ceiling) and check for crushing. Called every tick by all actions that move floors or ceilings. Passed the sector to move a plane in, the speed to move it at, the dest height it is to achieve, whether it crushes obstacles, whether it moves a floor or ceiling, and the direction up or down to move. Returns a result_e:  ok - plane moved normally, has not achieved destination yet  pastdest - plane moved normally and is now at destination height  crushed - plane encountered an obstacle, is holding until removedjff 02/04/98 used to keep floors/ceilings from moving thru each other Moving a floor Moving a floor downjff 3/19/98 use faster chkjff 3/19/98 use faster chkjff 3/19/98 use faster chk cph - make more compatible with original Doom, by
             *  reintroducing this code. This means floors can't lower
             *  if objects are stuck in the ceiling  Moving a floor up jff 02/04/98 keep floor from moving thru ceilings jff 2/22/98 weaken check to demo_compatibilityjff 3/19/98 use faster chkjff 3/19/98 use faster chk crushing is possiblejff 3/19/98 use faster chk jff 1/25/98 fix floor crusher jff 3/19/98 use faster chk moving a ceiling moving a ceiling down jff 02/04/98 keep ceiling from moving thru floors jff 2/22/98 weaken check to demo_compatibilityjff 3/19/98 use faster chkjff 3/19/98 use faster chk crushing is possiblejff 3/19/98 use faster chkjff 3/19/98 use faster chk moving a ceiling upjff 3/19/98 use faster chkjff 3/19/98 use faster chkjff 3/19/98 use faster chk T_MoveFloor() Move a floor to it's destination (up or down). Called once per tick for each moving floor. Passed a floormove_t structure that contains all pertinent info about the move. See P_SPEC.H for fields. No return. jff 02/08/98 all cases with labels beginning with gen added to support generalized line type behaviors. move the floor make the floormove sound if destination height is reached going up handle texture/type changesjff add to fix bug in special transfers from changesfall thru going down handle texture/type changesjff add to fix bug in special transfers from changesjff add to fix bug in special transfers from changesfall thrujff 2/22/98remove this floor from list of moversjff 2/26/98 implement stair retrigger lockout while still building note this only applies to the retriggerable generalized stairs if this sector is stairlocked thinker done, promote lock to -1 search for a non-done thinker if all thinkers previous are done search forward if all thinkers ahead are done too clear all locks make floor stop sound T_MoveElevator() Move an elevator to it's destination (up or down) Called once per tick for each moving floor. Passed an elevator_t structure that contains all pertinent info about the move. See P_SPEC.H for fields. No return. jff 02/22/98 added to support parallel floor/ceiling motion moving downjff 4/7/98 reverse order of ceiling/floor move floor jff 4/7/98 don't move ceil if blocked move ceiling upjff 4/7/98 reverse order of ceiling/floor move ceiling jff 4/7/98 don't move floor if blocked move floor make floor move sound if destination height acheivedjff 2/22/98jff 2/22/98 remove elevator from actives make floor stop sound///////////////////////////////////////////////////////////////////// Floor motion linedef handlers///////////////////////////////////////////////////////////////////// EV_DoFloor() Handle regular and extended floor types Passed the line that activated the floor and the type of floor motion Returns true if a thinker was created. move all floors with the same tag as the linedef Don't start a second thinker on the same floorjff 2/23/98 new floor thinkerjff 2/22/98 setup the thinker according to the linedef typejff 02/03/30 support lowering floor by 24 absolutejff 02/03/30 support lowering floor by 32 absolute (fast)jff 02/03/30 support lowering floor to next lowest floor jff 2/03/30 support straight raise by 32 (fast)jff 3/14/98 transfer both old and new special jff 3/13/98 no ovf  jff 8/14/98 don't scan texture 0, its not real jff 8/14/98 don't scan texture 0, its not realjff 3/13/98 do not allow height overflow jff 1/24/98 make sure floor->newspecial gets initialized in case no surrounding sector is at floordestheight --> should not affect compatibility <--jff 3/14/98 transfer both old and new specialjff 5/23/98 use model subroutine to unify fixes and handlingjff 3/14/98 transfer both old and new special EV_DoChange() Handle pure change types. These change floor texture and sector type by trigger or numeric model without moving the floor. The linedef causing the change and the type of change is passed Returns true if any sector changes jff 3/15/98 added to better support generalized sector types change all sectors with the same tag as the linedef handle trigger or numeric change type if no model, no change
 * EV_BuildStairs()
 *
 * Handles staircase building. A sequence of sectors chosen by algorithm
 * rise at a speed indicated to a height that increases by the stepsize
 * each step.
 *
 * Passed the linedef triggering the stairs and the type of stair rise
 * Returns true if any thinkers are created
 *
 * cph 2001/09/21 - compatibility nightmares again
 * There are three different ways this function has, during its history, stepped
 * through all the stairs to be triggered by the single switch
 * - original Doom used a linear P_FindSectorFromLineTag, but failed to preserve
 * the index of the previous sector found, so instead it would restart its
 * linear search from the last sector of the previous staircase
 * - MBF/PrBoom with comp_stairs fail to emulate this, because their
 * P_FindSectorFromLineTag is a chained hash table implementation. Instead they
 * start following the hash chain from the last sector of the previous
 * staircase, which will (probably) have the wrong tag, so they miss any further
 * stairs
 * - Boom fixed the bug, and MBF/PrBoom without comp_stairs work right
  Emulate original Doom's linear lower-bounded P_FindSectorFromLineTag
    * as needed  cph 2001/09/22 - cleaned up this function to save my sanity. A separate
    * outer loop index makes the logic much cleared, and local variables moved
    * into the inner blocks helps too  start a stair at each sector tagged the same as the linedef don't start a stair if the first step's floor is already movingjff 2/22/98 create new floor thinker for first stepjff 3/31/98 do not leave uninited set up the speed and stepsize according to the stairs type killough -- prevent compiler warningjff 2/27/98 fix uninitialized crush fieldjff 2/27/98 fix uninitialized crush field Find next sector to raise   1. Find 2-sided line with same sector side[0] (lowest numbered)   2. Other side is the next sector to raise   3. Unless already moving, or different texture, then stop buildingjff 5/7/98 if no backside, continue if sector's floor is different texture, look for another jff 6/19/98 prevent double stepsize
               * killough 10/98: intentionally left this way [MBF comment]
               * cph 2001/02/06: stair bug fix should be controlled by comp_stairs,
               *  except if we're emulating MBF which perversly reverted the fix
                jff 6/28/98 change demo compatibility if sector's floor already moving, look for anotherjff 2/22/98 cph - see comment above - do this iff we didn't do so above  create and initialize a thinker for the next stepjff 2/22/98jff 3/31/98 do not leave uninitedjff 2/27/98 fix uninitialized crush field continue until no next step is found killough 10/98: compatibility option  cph 2001/09/22 - emulate buggy MBF comp_stairs for demos, with logic
          * reversed since we now have a separate outer loop index.
          * DEMOSYNC - what about boom_compatibility_compatibility?
           Trash outer loop index  cph 2001/09/22 - now the correct comp_stairs - Doom used a linear
             * search from the last secnum, so we set that as a minimum value and do
             * a fresh tag search
              EV_DoDonut() Handle donut function: lower pillar, raise surrounding pool, both to height, texture and type of the sector surrounding the pool. Passed the linedef that triggered the donut Returns whether a thinker was created do function on all sectors with same tag as linedef s1 is pillar's sector do not start the donut if the pillar is already movingjff 2/22/98 s2 is pool's sector note lowest numbered line around pillar must be two-sided do not start the donut if the pool is already moving
       * cph - DEMOSYNC - was !compatibility jff 5/7/98 find a two sided line around the pool whose other side isn't the pillarjff 3/29/98 use true two-sidedness, not the flag killough 4/5/98: changed demo_compatibility to compatibilityjff 1/26/98 no donut action - no switch change on return s3 is model sector for changes  Spawn rising slimejff 2/22/98  Spawn lowering donut-hole pillarjff 2/22/98 EV_DoElevator Handle elevator linedef types Passed the linedef that triggered the elevator and the elevator action jff 2/22/98 new type to move floor and ceiling in parallel act on all sectors with the same tag as the triggering linedef If either floor or ceiling is already activated, skip itjff 2/22/98 create and initialize new elevator thinkerjff 2/22/98jff 2/22/98 set up the fields according to the type of elevator action elevator down to next floor elevator up to next floor elevator to floor height of activating switch's front sector Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *  General plane mover and floor mover action routines
 *  Floor motion, pure changer types, raising stairs. donuts, elevators
 *
 *-----------------------------------------------------------------------------///////////////////////////////////////////////////////////////////// Plane (floor or ceiling), Floor motion and Elevator action routines///////////////////////////////////////////////////////////////////// T_MovePlane() Move a plane (floor or ceiling) and check for crushing. Called every tick by all actions that move floors or ceilings. Passed the sector to move a plane in, the speed to move it at, the dest height it is to achieve, whether it crushes obstacles, whether it moves a floor or ceiling, and the direction up or down to move. Returns a result_e:  ok - plane moved normally, has not achieved destination yet  pastdest - plane moved normally and is now at destination height  crushed - plane encountered an obstacle, is holding until removedjff 02/04/98 used to keep floors/ceilings from moving thru each other Moving a floor Moving a floor downjff 3/19/98 use faster chkjff 3/19/98 use faster chkjff 3/19/98 use faster chk cph - make more compatible with original Doom, by
             *  reintroducing this code. This means floors can't lower
             *  if objects are stuck in the ceiling  Moving a floor up jff 02/04/98 keep floor from moving thru ceilings jff 2/22/98 weaken check to demo_compatibilityjff 3/19/98 use faster chkjff 3/19/98 use faster chk crushing is possiblejff 3/19/98 use faster chk jff 1/25/98 fix floor crusher jff 3/19/98 use faster chk moving a ceiling moving a ceiling down jff 02/04/98 keep ceiling from moving thru floors jff 2/22/98 weaken check to demo_compatibilityjff 3/19/98 use faster chkjff 3/19/98 use faster chk crushing is possiblejff 3/19/98 use faster chkjff 3/19/98 use faster chk moving a ceiling upjff 3/19/98 use faster chkjff 3/19/98 use faster chkjff 3/19/98 use faster chk T_MoveFloor() Move a floor to it's destination (up or down). Called once per tick for each moving floor. Passed a floormove_t structure that contains all pertinent info about the move. See P_SPEC.H for fields. No return. jff 02/08/98 all cases with labels beginning with gen added to support generalized line type behaviors. move the floor make the floormove sound if destination height is reached going up handle texture/type changesjff add to fix bug in special transfers from changesfall thru going down handle texture/type changesjff add to fix bug in special transfers from changesjff add to fix bug in special transfers from changesfall thrujff 2/22/98remove this floor from list of moversjff 2/26/98 implement stair retrigger lockout while still building note this only applies to the retriggerable generalized stairs if this sector is stairlocked thinker done, promote lock to -1 search for a non-done thinker if all thinkers previous are done search forward if all thinkers ahead are done too clear all locks make floor stop sound T_MoveElevator() Move an elevator to it's destination (up or down) Called once per tick for each moving floor. Passed an elevator_t structure that contains all pertinent info about the move. See P_SPEC.H for fields. No return. jff 02/22/98 added to support parallel floor/ceiling motion moving downjff 4/7/98 reverse order of ceiling/floor move floor jff 4/7/98 don't move ceil if blocked move ceiling upjff 4/7/98 reverse order of ceiling/floor move ceiling jff 4/7/98 don't move floor if blocked move floor make floor move sound if destination height acheivedjff 2/22/98jff 2/22/98 remove elevator from actives make floor stop sound///////////////////////////////////////////////////////////////////// Floor motion linedef handlers///////////////////////////////////////////////////////////////////// EV_DoFloor() Handle regular and extended floor types Passed the line that activated the floor and the type of floor motion Returns true if a thinker was created. move all floors with the same tag as the linedef Don't start a second thinker on the same floorjff 2/23/98 new floor thinkerjff 2/22/98 setup the thinker according to the linedef typejff 02/03/30 support lowering floor by 24 absolutejff 02/03/30 support lowering floor by 32 absolute (fast)jff 02/03/30 support lowering floor to next lowest floor jff 2/03/30 support straight raise by 32 (fast)jff 3/14/98 transfer both old and new special jff 3/13/98 no ovf  jff 8/14/98 don't scan texture 0, its not real jff 8/14/98 don't scan texture 0, its not realjff 3/13/98 do not allow height overflow jff 1/24/98 make sure floor->newspecial gets initialized in case no surrounding sector is at floordestheight --> should not affect compatibility <--jff 3/14/98 transfer both old and new specialjff 5/23/98 use model subroutine to unify fixes and handlingjff 3/14/98 transfer both old and new special EV_DoChange() Handle pure change types. These change floor texture and sector type by trigger or numeric model without moving the floor. The linedef causing the change and the type of change is passed Returns true if any sector changes jff 3/15/98 added to better support generalized sector types change all sectors with the same tag as the linedef handle trigger or numeric change type if no model, no change
 * EV_BuildStairs()
 *
 * Handles staircase building. A sequence of sectors chosen by algorithm
 * rise at a speed indicated to a height that increases by the stepsize
 * each step.
 *
 * Passed the linedef triggering the stairs and the type of stair rise
 * Returns true if any thinkers are created
 *
 * cph 2001/09/21 - compatibility nightmares again
 * There are three different ways this function has, during its history, stepped
 * through all the stairs to be triggered by the single switch
 * - original Doom used a linear P_FindSectorFromLineTag, but failed to preserve
 * the index of the previous sector found, so instead it would restart its
 * linear search from the last sector of the previous staircase
 * - MBF/PrBoom with comp_stairs fail to emulate this, because their
 * P_FindSectorFromLineTag is a chained hash table implementation. Instead they
 * start following the hash chain from the last sector of the previous
 * staircase, which will (probably) have the wrong tag, so they miss any further
 * stairs
 * - Boom fixed the bug, and MBF/PrBoom without comp_stairs work right
  Emulate original Doom's linear lower-bounded P_FindSectorFromLineTag
    * as needed  cph 2001/09/22 - cleaned up this function to save my sanity. A separate
    * outer loop index makes the logic much cleared, and local variables moved
    * into the inner blocks helps too  start a stair at each sector tagged the same as the linedef don't start a stair if the first step's floor is already movingjff 2/22/98 create new floor thinker for first stepjff 3/31/98 do not leave uninited set up the speed and stepsize according to the stairs type killough -- prevent compiler warningjff 2/27/98 fix uninitialized crush fieldjff 2/27/98 fix uninitialized crush field Find next sector to raise   1. Find 2-sided line with same sector side[0] (lowest numbered)   2. Other side is the next sector to raise   3. Unless already moving, or different texture, then stop buildingjff 5/7/98 if no backside, continue if sector's floor is different texture, look for another jff 6/19/98 prevent double stepsize
               * killough 10/98: intentionally left this way [MBF comment]
               * cph 2001/02/06: stair bug fix should be controlled by comp_stairs,
               *  except if we're emulating MBF which perversly reverted the fix
                jff 6/28/98 change demo compatibility if sector's floor already moving, look for anotherjff 2/22/98 cph - see comment above - do this iff we didn't do so above  create and initialize a thinker for the next stepjff 2/22/98jff 3/31/98 do not leave uninitedjff 2/27/98 fix uninitialized crush field continue until no next step is found killough 10/98: compatibility option  cph 2001/09/22 - emulate buggy MBF comp_stairs for demos, with logic
          * reversed since we now have a separate outer loop index.
          * DEMOSYNC - what about boom_compatibility_compatibility?
           Trash outer loop index  cph 2001/09/22 - now the correct comp_stairs - Doom used a linear
             * search from the last secnum, so we set that as a minimum value and do
             * a fresh tag search
              EV_DoDonut() Handle donut function: lower pillar, raise surrounding pool, both to height, texture and type of the sector surrounding the pool. Passed the linedef that triggered the donut Returns whether a thinker was created do function on all sectors with same tag as linedef s1 is pillar's sector do not start the donut if the pillar is already movingjff 2/22/98 s2 is pool's sector note lowest numbered line around pillar must be two-sided do not start the donut if the pool is already moving
       * cph - DEMOSYNC - was !compatibility jff 5/7/98 find a two sided line around the pool whose other side isn't the pillarjff 3/29/98 use true two-sidedness, not the flag killough 4/5/98: changed demo_compatibility to compatibilityjff 1/26/98 no donut action - no switch change on return s3 is model sector for changes  Spawn rising slimejff 2/22/98  Spawn lowering donut-hole pillarjff 2/22/98 EV_DoElevator Handle elevator linedef types Passed the linedef that triggered the elevator and the elevator action jff 2/22/98 new type to move floor and ceiling in parallel act on all sectors with the same tag as the triggering linedef If either floor or ceiling is already activated, skip itjff 2/22/98 create and initialize new elevator thinkerjff 2/22/98jff 2/22/98 set up the fields according to the type of elevator action elevator down to next floor elevator up to next floor elevator to floor height of activating switch's front sector Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *  General plane mover and floor mover action routines
 *  Floor motion, pure changer types, raising stairs. donuts, elevators
 *
 *-----------------------------------------------------------------------------///////////////////////////////////////////////////////////////////// Plane (floor or ceiling), Floor motion and Elevator action routines///////////////////////////////////////////////////////////////////// T_MovePlane() Move a plane (floor or ceiling) and check for crushing. Called every tick by all actions that move floors or ceilings. Passed the sector to move a plane in, the speed to move it at, the dest height it is to achieve, whether it crushes obstacles, whether it moves a floor or ceiling, and the direction up or down to move. Returns a result_e:  ok - plane moved normally, has not achieved destination yet  pastdest - plane moved normally and is now at destination height  crushed - plane encountered an obstacle, is holding until removedjff 02/04/98 used to keep floors/ceilings from moving thru each other Moving a floor Moving a floor downjff 3/19/98 use faster chkjff 3/19/98 use faster chkjff 3/19/98 use faster chk cph - make more compatible with original Doom, by
             *  reintroducing this code. This means floors can't lower
             *  if objects are stuck in the ceiling  Moving a floor up jff 02/04/98 keep floor from moving thru ceilings jff 2/22/98 weaken check to demo_compatibilityjff 3/19/98 use faster chkjff 3/19/98 use faster chk crushing is possiblejff 3/19/98 use faster chk jff 1/25/98 fix floor crusher jff 3/19/98 use faster chk moving a ceiling moving a ceiling down jff 02/04/98 keep ceiling from moving thru floors jff 2/22/98 weaken check to demo_compatibilityjff 3/19/98 use faster chkjff 3/19/98 use faster chk crushing is possiblejff 3/19/98 use faster chkjff 3/19/98 use faster chk moving a ceiling upjff 3/19/98 use faster chkjff 3/19/98 use faster chkjff 3/19/98 use faster chk T_MoveFloor() Move a floor to it's destination (up or down). Called once per tick for each moving floor. Passed a floormove_t structure that contains all pertinent info about the move. See P_SPEC.H for fields. No return. jff 02/08/98 all cases with labels beginning with gen added to support generalized line type behaviors. move the floor make the floormove sound if destination height is reached going up handle texture/type changesjff add to fix bug in special transfers from changesfall thru going down handle texture/type changesjff add to fix bug in special transfers from changesjff add to fix bug in special transfers from changesfall thrujff 2/22/98remove this floor from list of moversjff 2/26/98 implement stair retrigger lockout while still building note this only applies to the retriggerable generalized stairs if this sector is stairlocked thinker done, promote lock to -1 search for a non-done thinker if all thinkers previous are done search forward if all thinkers ahead are done too clear all locks make floor stop sound T_MoveElevator() Move an elevator to it's destination (up or down) Called once per tick for each moving floor. Passed an elevator_t structure that contains all pertinent info about the move. See P_SPEC.H for fields. No return. jff 02/22/98 added to support parallel floor/ceiling motion moving downjff 4/7/98 reverse order of ceiling/floor move floor jff 4/7/98 don't move ceil if blocked move ceiling upjff 4/7/98 reverse order of ceiling/floor move ceiling jff 4/7/98 don't move floor if blocked move floor make floor move sound if destination height acheivedjff 2/22/98jff 2/22/98 remove elevator from actives make floor stop sound///////////////////////////////////////////////////////////////////// Floor motion linedef handlers///////////////////////////////////////////////////////////////////// EV_DoFloor() Handle regular and extended floor types Passed the line that activated the floor and the type of floor motion Returns true if a thinker was created. move all floors with the same tag as the linedef Don't start a second thinker on the same floorjff 2/23/98 new floor thinkerjff 2/22/98 setup the thinker according to the linedef typejff 02/03/30 support lowering floor by 24 absolutejff 02/03/30 support lowering floor by 32 absolute (fast)jff 02/03/30 support lowering floor to next lowest floor jff 2/03/30 support straight raise by 32 (fast)jff 3/14/98 transfer both old and new special jff 3/13/98 no ovf  jff 8/14/98 don't scan texture 0, its not real jff 8/14/98 don't scan texture 0, its not realjff 3/13/98 do not allow height overflow jff 1/24/98 make sure floor->newspecial gets initialized in case no surrounding sector is at floordestheight --> should not affect compatibility <--jff 3/14/98 transfer both old and new specialjff 5/23/98 use model subroutine to unify fixes and handlingjff 3/14/98 transfer both old and new special EV_DoChange() Handle pure change types. These change floor texture and sector type by trigger or numeric model without moving the floor. The linedef causing the change and the type of change is passed Returns true if any sector changes jff 3/15/98 added to better support generalized sector types change all sectors with the same tag as the linedef handle trigger or numeric change type if no model, no change
 * EV_BuildStairs()
 *
 * Handles staircase building. A sequence of sectors chosen by algorithm
 * rise at a speed indicated to a height that increases by the stepsize
 * each step.
 *
 * Passed the linedef triggering the stairs and the type of stair rise
 * Returns true if any thinkers are created
 *
 * cph 2001/09/21 - compatibility nightmares again
 * There are three different ways this function has, during its history, stepped
 * through all the stairs to be triggered by the single switch
 * - original Doom used a linear P_FindSectorFromLineTag, but failed to preserve
 * the index of the previous sector found, so instead it would restart its
 * linear search from the last sector of the previous staircase
 * - MBF/PrBoom with comp_stairs fail to emulate this, because their
 * P_FindSectorFromLineTag is a chained hash table implementation. Instead they
 * start following the hash chain from the last sector of the previous
 * staircase, which will (probably) have the wrong tag, so they miss any further
 * stairs
 * - Boom fixed the bug, and MBF/PrBoom without comp_stairs work right
  Emulate original Doom's linear lower-bounded P_FindSectorFromLineTag
    * as needed  cph 2001/09/22 - cleaned up this function to save my sanity. A separate
    * outer loop index makes the logic much cleared, and local variables moved
    * into the inner blocks helps too  start a stair at each sector tagged the same as the linedef don't start a stair if the first step's floor is already movingjff 2/22/98 create new floor thinker for first stepjff 3/31/98 do not leave uninited set up the speed and stepsize according to the stairs type killough -- prevent compiler warningjff 2/27/98 fix uninitialized crush fieldjff 2/27/98 fix uninitialized crush field Find next sector to raise   1. Find 2-sided line with same sector side[0] (lowest numbered)   2. Other side is the next sector to raise   3. Unless already moving, or different texture, then stop buildingjff 5/7/98 if no backside, continue if sector's floor is different texture, look for another jff 6/19/98 prevent double stepsize
               * killough 10/98: intentionally left this way [MBF comment]
               * cph 2001/02/06: stair bug fix should be controlled by comp_stairs,
               *  except if we're emulating MBF which perversly reverted the fix
                jff 6/28/98 change demo compatibility if sector's floor already moving, look for anotherjff 2/22/98 cph - see comment above - do this iff we didn't do so above  create and initialize a thinker for the next stepjff 2/22/98jff 3/31/98 do not leave uninitedjff 2/27/98 fix uninitialized crush field continue until no next step is found killough 10/98: compatibility option  cph 2001/09/22 - emulate buggy MBF comp_stairs for demos, with logic
          * reversed since we now have a separate outer loop index.
          * DEMOSYNC - what about boom_compatibility_compatibility?
           Trash outer loop index  cph 2001/09/22 - now the correct comp_stairs - Doom used a linear
             * search from the last secnum, so we set that as a minimum value and do
             * a fresh tag search
              EV_DoDonut() Handle donut function: lower pillar, raise surrounding pool, both to height, texture and type of the sector surrounding the pool. Passed the linedef that triggered the donut Returns whether a thinker was created do function on all sectors with same tag as linedef s1 is pillar's sector do not start the donut if the pillar is already movingjff 2/22/98 s2 is pool's sector note lowest numbered line around pillar must be two-sided do not start the donut if the pool is already moving
       * cph - DEMOSYNC - was !compatibility jff 5/7/98 find a two sided line around the pool whose other side isn't the pillarjff 3/29/98 use true two-sidedness, not the flag killough 4/5/98: changed demo_compatibility to compatibilityjff 1/26/98 no donut action - no switch change on return s3 is model sector for changes  Spawn rising slimejff 2/22/98  Spawn lowering donut-hole pillarjff 2/22/98 EV_DoElevator Handle elevator linedef types Passed the linedef that triggered the elevator and the elevator action jff 2/22/98 new type to move floor and ceiling in parallel act on all sectors with the same tag as the triggering linedef If either floor or ceiling is already activated, skip itjff 2/22/98 create and initialize new elevator thinkerjff 2/22/98jff 2/22/98 set up the fields according to the type of elevator action elevator down to next floor elevator up to next floor elevator to floor height of activating switch's front sector