**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Nicolas Pitre <nico@cam.org>
 * Copyright (C) 2006-2007 by Stéphane Doyon <s.doyon@videotron.ca>
 * Copyright (C) 2012 Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** double buffer for double rate  Max input count so dst doesn't overflow  48KHz factor 3.0  this stage  number of audio channels  current samplerate of input data  stretch factor (perdecimille)  maximum displacement on a frame  source window pace  destination window pace  power of two for dst_step  overlap buffer frame shift  overlap buffer used size  overlap buffer (L+R)  Processed buffer passed out to later stages  Blend overlapping frame samples according to position  acc = curr*(i<<(30-order)) >> 23  acc += prev*(j<<(30-order)) >> 23  Prepare mask  Get extension bits  Get bit 7 of LSb extension ...  ... into bit 0  Get result >> 8  Everything x2  Insert proper LSb from extension  Generic  CPU_*  Discard all data  Dump remaining output  Save parameters we'll need later if format changes  just discard remaining input data  Check parameters  blend_frame_samples works in s0.31 mode. Also must shift by
       one less bit before mac in order not to overflow.  ignored if mono  data_len in samples  deal with overlap data first, if any  append just enough data to have all of the overlap buffer consumed  one more step to allow for pregap data  still not enough to process at least one frame  recursively call ourselves to process the overlap buffer  readjust pointers to account for data already consumed  process all complete frames  find frame overlap by autocorelation  most positive  overlap fading-out previous frame with fading-in current frame  adjust pointers for next frame  here next_frame - prev_frame = src_step - dst_step - shift  while  now deal with remaining partial frames  preserve remaining data + needed overlap data for next call  TDSOP_PROCESS:  special overlap buffer processing: remember frame shift only  TDSOP_LAST:  last call: purge all remaining data to output buffer  TDSOP_PURGE:  switch * DSP interface * Enable or disable the availability of timestretch  No change  Set the timestretch ratio  not enabled  no change  Return the timestretch ratio  Return whether or not timestretch is enabled and initialized  Apply timestretch to the input buffer and switch to our output buffer  switch to our buffer  output remains from an earlier call  use this to get consumed src  advance src by samples consumed  else purged dsp_outbuf  inherit in-place processed mask from source buffer  Process format changes and settings changes  relevent parameters are changing - all overlap will be discarded  channel count transistion - have to make old data in overlap
           buffer compatible with new format  mono->stereo: Process the old mono as stereo now  stereo->mono: Process the old stereo as mono now  Nothing to do  everything is at 100% until dsp_set_timestretch is called with
       some other value and timestretch is enabled at the time  DSP message hook  fail the init  moving overlap (input) buffers  moving outbuf left channel and dsp_outbuf.p32[0]  mono mode  moving outbuf right channel and dsp_outbuf.p32[1]  Database entry **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Nicolas Pitre <nico@cam.org>
 * Copyright (C) 2006-2007 by Stéphane Doyon <s.doyon@videotron.ca>
 * Copyright (C) 2012 Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** double buffer for double rate  Max input count so dst doesn't overflow  48KHz factor 3.0  this stage  number of audio channels  current samplerate of input data  stretch factor (perdecimille)  maximum displacement on a frame  source window pace  destination window pace  power of two for dst_step  overlap buffer frame shift  overlap buffer used size  overlap buffer (L+R)  Processed buffer passed out to later stages  Blend overlapping frame samples according to position  acc = curr*(i<<(30-order)) >> 23  acc += prev*(j<<(30-order)) >> 23  Prepare mask  Get extension bits  Get bit 7 of LSb extension ...  ... into bit 0  Get result >> 8  Everything x2  Insert proper LSb from extension  Generic  CPU_*  Discard all data  Dump remaining output  Save parameters we'll need later if format changes  just discard remaining input data  Check parameters  blend_frame_samples works in s0.31 mode. Also must shift by
       one less bit before mac in order not to overflow.  ignored if mono  data_len in samples  deal with overlap data first, if any  append just enough data to have all of the overlap buffer consumed  one more step to allow for pregap data  still not enough to process at least one frame  recursively call ourselves to process the overlap buffer  readjust pointers to account for data already consumed  process all complete frames  find frame overlap by autocorelation  most positive  overlap fading-out previous frame with fading-in current frame  adjust pointers for next frame  here next_frame - prev_frame = src_step - dst_step - shift  while  now deal with remaining partial frames  preserve remaining data + needed overlap data for next call  TDSOP_PROCESS:  special overlap buffer processing: remember frame shift only  TDSOP_LAST:  last call: purge all remaining data to output buffer  TDSOP_PURGE:  switch * DSP interface * Enable or disable the availability of timestretch  No change  Set the timestretch ratio  not enabled  no change  Return the timestretch ratio  Return whether or not timestretch is enabled and initialized  Apply timestretch to the input buffer and switch to our output buffer  switch to our buffer  output remains from an earlier call  use this to get consumed src  advance src by samples consumed  else purged dsp_outbuf  inherit in-place processed mask from source buffer  Process format changes and settings changes  relevent parameters are changing - all overlap will be discarded  channel count transistion - have to make old data in overlap
           buffer compatible with new format  mono->stereo: Process the old mono as stereo now  stereo->mono: Process the old stereo as mono now  Nothing to do  everything is at 100% until dsp_set_timestretch is called with
       some other value and timestretch is enabled at the time  DSP message hook  fail the init  moving overlap (input) buffers  moving outbuf left channel and dsp_outbuf.p32[0]  mono mode  moving outbuf right channel and dsp_outbuf.p32[1]  Database entry **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Nicolas Pitre <nico@cam.org>
 * Copyright (C) 2006-2007 by Stéphane Doyon <s.doyon@videotron.ca>
 * Copyright (C) 2012 Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** double buffer for double rate  Max input count so dst doesn't overflow  48KHz factor 3.0  this stage  number of audio channels  current samplerate of input data  stretch factor (perdecimille)  maximum displacement on a frame  source window pace  destination window pace  power of two for dst_step  overlap buffer frame shift  overlap buffer used size  overlap buffer (L+R)  Processed buffer passed out to later stages  Blend overlapping frame samples according to position  acc = curr*(i<<(30-order)) >> 23  acc += prev*(j<<(30-order)) >> 23  Prepare mask  Get extension bits  Get bit 7 of LSb extension ...  ... into bit 0  Get result >> 8  Everything x2  Insert proper LSb from extension  Generic  CPU_*  Discard all data  Dump remaining output  Save parameters we'll need later if format changes  just discard remaining input data  Check parameters  blend_frame_samples works in s0.31 mode. Also must shift by
       one less bit before mac in order not to overflow.  ignored if mono  data_len in samples  deal with overlap data first, if any  append just enough data to have all of the overlap buffer consumed  one more step to allow for pregap data  still not enough to process at least one frame  recursively call ourselves to process the overlap buffer  readjust pointers to account for data already consumed  process all complete frames  find frame overlap by autocorelation  most positive  overlap fading-out previous frame with fading-in current frame  adjust pointers for next frame  here next_frame - prev_frame = src_step - dst_step - shift  while  now deal with remaining partial frames  preserve remaining data + needed overlap data for next call  TDSOP_PROCESS:  special overlap buffer processing: remember frame shift only  TDSOP_LAST:  last call: purge all remaining data to output buffer  TDSOP_PURGE:  switch * DSP interface * Enable or disable the availability of timestretch  No change  Set the timestretch ratio  not enabled  no change  Return the timestretch ratio  Return whether or not timestretch is enabled and initialized  Apply timestretch to the input buffer and switch to our output buffer  switch to our buffer  output remains from an earlier call  use this to get consumed src  advance src by samples consumed  else purged dsp_outbuf  inherit in-place processed mask from source buffer  Process format changes and settings changes  relevent parameters are changing - all overlap will be discarded  channel count transistion - have to make old data in overlap
           buffer compatible with new format  mono->stereo: Process the old mono as stereo now  stereo->mono: Process the old stereo as mono now  Nothing to do  everything is at 100% until dsp_set_timestretch is called with
       some other value and timestretch is enabled at the time  DSP message hook  fail the init  moving overlap (input) buffers  moving outbuf left channel and dsp_outbuf.p32[0]  mono mode  moving outbuf right channel and dsp_outbuf.p32[1]  Database entry 