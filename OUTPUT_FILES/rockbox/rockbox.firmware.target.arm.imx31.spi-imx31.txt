**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2007 Will Robertson
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Forward interrupt handler declarations  000h  004h  008h  00Ch  010h  014h  018h  1C0h  State data associatated with each CSPI module  CSPI module address  Running job  Most recent job added  Last node used for module  Interrupt handler  Independent copy of txcount  Enable count  Size of transfers in bytes  Clock-gating value  AVIC vector number  Init non-zero members  Reset the module  Reset by leaving it disabled  Write the context for the node and remember it to avoid unneeded reconfigure  Errata says CSPI should be disabled when writing PERIODREG.  Switch the module's node  Set the wait-states  Keep reserved and start bits cleared. Keep enabled bit.  Fill the TX fifo. Returns the number of remaining words.  Increment buffer  Write to FIFO  Start a transfer on the SPI  Enable module  Trans. complete: TX will run out in prefill  INT when TX half-empty  Must grab data on every word  Enough data to wait for half-full  Ack 'complete'  Enable interrupts  Begin transfer  Common code for interrupt handlers  Data received - empty out RXFIFO  There is a receive buffer  No more to receive - stop RX interrupts  < 4 words expected - switch to RX ready  Data to transmit - fill TXFIFO or write until exhausted.  If transfer completed because TXFIFO ran out of data, resume it or
           else it will not finish.  Still more after this  Out of data - stop TX interrupts, enable TC interrupt.  Outbound transfer is complete.  All interrupts are masked; we're done with current transfer.  Last job on queue  Callback may have restarted transfers.  Disable module  Queue next job.  Failed: try next  Interrupt handlers for each CSPI module  Initialize the SPI driver  Enable or disable the node - modules will be switch on/off accordingly.  Enable clock-gating register  Reset  Enable interrupt at controller level  Last enable for this module  Wait for outstanding transactions  Disable interrupt at controller level  Disable interface  Disable interface clock  Send and/or receive data on the specified node  No data? No problem.  Can't pass a busy descriptor, requires a node and negative size
         * is invalid to pass.  No transfers in progress; start interface.  Start ok: actually put it in the queue.  First, self-reference terminate  Already running: simply add to end and the final INT on the
         * running transfer will pick it up.  Add to tail  New tail  Self-reference terminate  Returns 'true' if the descriptor is not busy **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2007 Will Robertson
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Forward interrupt handler declarations  000h  004h  008h  00Ch  010h  014h  018h  1C0h  State data associatated with each CSPI module  CSPI module address  Running job  Most recent job added  Last node used for module  Interrupt handler  Independent copy of txcount  Enable count  Size of transfers in bytes  Clock-gating value  AVIC vector number  Init non-zero members  Reset the module  Reset by leaving it disabled  Write the context for the node and remember it to avoid unneeded reconfigure  Errata says CSPI should be disabled when writing PERIODREG.  Switch the module's node  Set the wait-states  Keep reserved and start bits cleared. Keep enabled bit.  Fill the TX fifo. Returns the number of remaining words.  Increment buffer  Write to FIFO  Start a transfer on the SPI  Enable module  Trans. complete: TX will run out in prefill  INT when TX half-empty  Must grab data on every word  Enough data to wait for half-full  Ack 'complete'  Enable interrupts  Begin transfer  Common code for interrupt handlers  Data received - empty out RXFIFO  There is a receive buffer  No more to receive - stop RX interrupts  < 4 words expected - switch to RX ready  Data to transmit - fill TXFIFO or write until exhausted.  If transfer completed because TXFIFO ran out of data, resume it or
           else it will not finish.  Still more after this  Out of data - stop TX interrupts, enable TC interrupt.  Outbound transfer is complete.  All interrupts are masked; we're done with current transfer.  Last job on queue  Callback may have restarted transfers.  Disable module  Queue next job.  Failed: try next  Interrupt handlers for each CSPI module  Initialize the SPI driver  Enable or disable the node - modules will be switch on/off accordingly.  Enable clock-gating register  Reset  Enable interrupt at controller level  Last enable for this module  Wait for outstanding transactions  Disable interrupt at controller level  Disable interface  Disable interface clock  Send and/or receive data on the specified node  No data? No problem.  Can't pass a busy descriptor, requires a node and negative size
         * is invalid to pass.  No transfers in progress; start interface.  Start ok: actually put it in the queue.  First, self-reference terminate  Already running: simply add to end and the final INT on the
         * running transfer will pick it up.  Add to tail  New tail  Self-reference terminate  Returns 'true' if the descriptor is not busy **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2007 Will Robertson
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Forward interrupt handler declarations  000h  004h  008h  00Ch  010h  014h  018h  1C0h  State data associatated with each CSPI module  CSPI module address  Running job  Most recent job added  Last node used for module  Interrupt handler  Independent copy of txcount  Enable count  Size of transfers in bytes  Clock-gating value  AVIC vector number  Init non-zero members  Reset the module  Reset by leaving it disabled  Write the context for the node and remember it to avoid unneeded reconfigure  Errata says CSPI should be disabled when writing PERIODREG.  Switch the module's node  Set the wait-states  Keep reserved and start bits cleared. Keep enabled bit.  Fill the TX fifo. Returns the number of remaining words.  Increment buffer  Write to FIFO  Start a transfer on the SPI  Enable module  Trans. complete: TX will run out in prefill  INT when TX half-empty  Must grab data on every word  Enough data to wait for half-full  Ack 'complete'  Enable interrupts  Begin transfer  Common code for interrupt handlers  Data received - empty out RXFIFO  There is a receive buffer  No more to receive - stop RX interrupts  < 4 words expected - switch to RX ready  Data to transmit - fill TXFIFO or write until exhausted.  If transfer completed because TXFIFO ran out of data, resume it or
           else it will not finish.  Still more after this  Out of data - stop TX interrupts, enable TC interrupt.  Outbound transfer is complete.  All interrupts are masked; we're done with current transfer.  Last job on queue  Callback may have restarted transfers.  Disable module  Queue next job.  Failed: try next  Interrupt handlers for each CSPI module  Initialize the SPI driver  Enable or disable the node - modules will be switch on/off accordingly.  Enable clock-gating register  Reset  Enable interrupt at controller level  Last enable for this module  Wait for outstanding transactions  Disable interrupt at controller level  Disable interface  Disable interface clock  Send and/or receive data on the specified node  No data? No problem.  Can't pass a busy descriptor, requires a node and negative size
         * is invalid to pass.  No transfers in progress; start interface.  Start ok: actually put it in the queue.  First, self-reference terminate  Already running: simply add to end and the final INT on the
         * running transfer will pick it up.  Add to tail  New tail  Self-reference terminate  Returns 'true' if the descriptor is not busy 