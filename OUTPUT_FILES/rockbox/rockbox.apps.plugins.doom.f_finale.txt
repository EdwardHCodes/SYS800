 Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *      Game completion, final screen animation.
 *
 *-----------------------------------------------------------------------------
  Ty 03/22/98 - externalizations CPhipps - hmm... Stage of animation:  0 = text, 1 = art screen, 2 = character cast cph - made static cph - made static const defines for the end mission display text                     // phares original value                    // phares original value                    // phares new value                         // phares new value                         // phares CPhipps - removed the old finale screen text message strings; they were commented out for ages already Ty 03/22/98 - ... the new s_WHATEVER extern variables are used in the code below instead. killough 3/28/98: used to accelerate intermission screens whether we're in "mid-stage" F_StartFinale killough 3/28/98: clear accelerative text flags Okay - IWAD dependend stuff. This has been changed severly, and  some stuff might have changed in the process. DOOM 1 - E1, E3 or E4, but each nine missions Ty 03/30/98 - new externalized bg flats Ty 03/23/98 - Was e1text variable. Ty 03/23/98 - Same stuff for each Ouch. DOOM II and missions packs with E1, M34 Ty 08/27/98 - added the gamemission logic Ouch. Ty 08/27/98 - end gamemission logic Indeterminate. Ty 03/30/98 - not externalized Not used anywhere else. FIXME - other text, music? Get_TextSpeed() returns the value of the text display speed  // phares Rewritten to allow user-directed acceleration -- killough 3/28/98 F_Ticker killough 3/28/98: almost totally rewritten, to use player-directed acceleration instead of constant delays. Now the player can accelerate the text display by using the fire/use keys while it is being printed. The delay automatically responds to the user, and gives enough time to read. killough 5/10/98: add back v1.9 demo compatibility killough 3/28/98: check for acceleration check for skipping go on to the next level advance animation killough 2/28/98: changed to allow acceleration  Doom 1 / Ultimate Doom episode end with enough time, it's automatic force a wipe you must press a button to continue in Doom 2 cast of Doom 2 characters next level, e.g. MAP07 F_TextWrite This program displays the background and text at end-mission     // phares text time. It draws both repeatedly so that other displays,      //   | like the main menu, can be drawn over it dynamically and         //   V erased dynamically. The TEXTSPEED constant is changed into the Get_TextSpeed function so that the speed of writing the      //   ^ text can be increased, and there's still time to read what's     //   | written.                                                         // phares CPhipps - reformatted draw some of the text onto the screen CPhipps - const phares CPhipps - patch drawing updated Final DOOM 2 animation Casting by id Software.   in order of appearance CPhipps - const** Ty - hard coded for now  CPhipps - static const, initialised here F_StartCast force a screen wipe F_CastTicker not time to change state yet switch from deathstate to next monster just advance to next state in animation Oh, gross hack! sound hacks.... go into attack frame F_CastResponder already in dying frames go into death frame CPhipps - static, const char* CPhipps - const find width draw it CPhipps - patch drawing updated F_CastDrawer erase the entire screen to a background CPhipps - patch drawing updated Ty 03/30/98 bg texture extern draw the current frame in the middle of the screen CPhipps - patch drawing updated F_BunnyScroll CPhipps - patch drawing updated CPhipps - patch drawing updated F_Drawer CPhipps - patch drawing updated Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *      Game completion, final screen animation.
 *
 *-----------------------------------------------------------------------------
  Ty 03/22/98 - externalizations CPhipps - hmm... Stage of animation:  0 = text, 1 = art screen, 2 = character cast cph - made static cph - made static const defines for the end mission display text                     // phares original value                    // phares original value                    // phares new value                         // phares new value                         // phares CPhipps - removed the old finale screen text message strings; they were commented out for ages already Ty 03/22/98 - ... the new s_WHATEVER extern variables are used in the code below instead. killough 3/28/98: used to accelerate intermission screens whether we're in "mid-stage" F_StartFinale killough 3/28/98: clear accelerative text flags Okay - IWAD dependend stuff. This has been changed severly, and  some stuff might have changed in the process. DOOM 1 - E1, E3 or E4, but each nine missions Ty 03/30/98 - new externalized bg flats Ty 03/23/98 - Was e1text variable. Ty 03/23/98 - Same stuff for each Ouch. DOOM II and missions packs with E1, M34 Ty 08/27/98 - added the gamemission logic Ouch. Ty 08/27/98 - end gamemission logic Indeterminate. Ty 03/30/98 - not externalized Not used anywhere else. FIXME - other text, music? Get_TextSpeed() returns the value of the text display speed  // phares Rewritten to allow user-directed acceleration -- killough 3/28/98 F_Ticker killough 3/28/98: almost totally rewritten, to use player-directed acceleration instead of constant delays. Now the player can accelerate the text display by using the fire/use keys while it is being printed. The delay automatically responds to the user, and gives enough time to read. killough 5/10/98: add back v1.9 demo compatibility killough 3/28/98: check for acceleration check for skipping go on to the next level advance animation killough 2/28/98: changed to allow acceleration  Doom 1 / Ultimate Doom episode end with enough time, it's automatic force a wipe you must press a button to continue in Doom 2 cast of Doom 2 characters next level, e.g. MAP07 F_TextWrite This program displays the background and text at end-mission     // phares text time. It draws both repeatedly so that other displays,      //   | like the main menu, can be drawn over it dynamically and         //   V erased dynamically. The TEXTSPEED constant is changed into the Get_TextSpeed function so that the speed of writing the      //   ^ text can be increased, and there's still time to read what's     //   | written.                                                         // phares CPhipps - reformatted draw some of the text onto the screen CPhipps - const phares CPhipps - patch drawing updated Final DOOM 2 animation Casting by id Software.   in order of appearance CPhipps - const** Ty - hard coded for now  CPhipps - static const, initialised here F_StartCast force a screen wipe F_CastTicker not time to change state yet switch from deathstate to next monster just advance to next state in animation Oh, gross hack! sound hacks.... go into attack frame F_CastResponder already in dying frames go into death frame CPhipps - static, const char* CPhipps - const find width draw it CPhipps - patch drawing updated F_CastDrawer erase the entire screen to a background CPhipps - patch drawing updated Ty 03/30/98 bg texture extern draw the current frame in the middle of the screen CPhipps - patch drawing updated F_BunnyScroll CPhipps - patch drawing updated CPhipps - patch drawing updated F_Drawer CPhipps - patch drawing updated Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *      Game completion, final screen animation.
 *
 *-----------------------------------------------------------------------------
  Ty 03/22/98 - externalizations CPhipps - hmm... Stage of animation:  0 = text, 1 = art screen, 2 = character cast cph - made static cph - made static const defines for the end mission display text                     // phares original value                    // phares original value                    // phares new value                         // phares new value                         // phares CPhipps - removed the old finale screen text message strings; they were commented out for ages already Ty 03/22/98 - ... the new s_WHATEVER extern variables are used in the code below instead. killough 3/28/98: used to accelerate intermission screens whether we're in "mid-stage" F_StartFinale killough 3/28/98: clear accelerative text flags Okay - IWAD dependend stuff. This has been changed severly, and  some stuff might have changed in the process. DOOM 1 - E1, E3 or E4, but each nine missions Ty 03/30/98 - new externalized bg flats Ty 03/23/98 - Was e1text variable. Ty 03/23/98 - Same stuff for each Ouch. DOOM II and missions packs with E1, M34 Ty 08/27/98 - added the gamemission logic Ouch. Ty 08/27/98 - end gamemission logic Indeterminate. Ty 03/30/98 - not externalized Not used anywhere else. FIXME - other text, music? Get_TextSpeed() returns the value of the text display speed  // phares Rewritten to allow user-directed acceleration -- killough 3/28/98 F_Ticker killough 3/28/98: almost totally rewritten, to use player-directed acceleration instead of constant delays. Now the player can accelerate the text display by using the fire/use keys while it is being printed. The delay automatically responds to the user, and gives enough time to read. killough 5/10/98: add back v1.9 demo compatibility killough 3/28/98: check for acceleration check for skipping go on to the next level advance animation killough 2/28/98: changed to allow acceleration  Doom 1 / Ultimate Doom episode end with enough time, it's automatic force a wipe you must press a button to continue in Doom 2 cast of Doom 2 characters next level, e.g. MAP07 F_TextWrite This program displays the background and text at end-mission     // phares text time. It draws both repeatedly so that other displays,      //   | like the main menu, can be drawn over it dynamically and         //   V erased dynamically. The TEXTSPEED constant is changed into the Get_TextSpeed function so that the speed of writing the      //   ^ text can be increased, and there's still time to read what's     //   | written.                                                         // phares CPhipps - reformatted draw some of the text onto the screen CPhipps - const phares CPhipps - patch drawing updated Final DOOM 2 animation Casting by id Software.   in order of appearance CPhipps - const** Ty - hard coded for now  CPhipps - static const, initialised here F_StartCast force a screen wipe F_CastTicker not time to change state yet switch from deathstate to next monster just advance to next state in animation Oh, gross hack! sound hacks.... go into attack frame F_CastResponder already in dying frames go into death frame CPhipps - static, const char* CPhipps - const find width draw it CPhipps - patch drawing updated F_CastDrawer erase the entire screen to a background CPhipps - patch drawing updated Ty 03/30/98 bg texture extern draw the current frame in the middle of the screen CPhipps - patch drawing updated F_BunnyScroll CPhipps - patch drawing updated CPhipps - patch drawing updated F_Drawer CPhipps - patch drawing updated