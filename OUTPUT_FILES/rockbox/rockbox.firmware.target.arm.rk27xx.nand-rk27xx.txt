**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 by Bertrik Sikken
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** This is for documentation purpose as FTL has not been reverse engineered yet
 * Raw nand handling functions based on OF disassembly and partially inspired
 * by Rockchip patent
  this is the struct OF uses  holds nand chips characteristics  sum of all phy sectors in all chips  taken from OF  SAMSUNG   TOSHIBA   HYNIX     INFINEON  MICRON    RENESAS   ST        phisical sectors   64M, small page  128M, small page  128M, large page  256M, large page  512M, large page    1G, large page    2G, large page    4G, large page  Maybe we should handle IOMUX here as well?
     * for chip == 0,1 it is not needed
      buff for CMD_READ_ID response  Redundat - we will use special macros
         * just for reference what OF does
          write cmd to flash chip  write cmd to flash chip  read 5 bytes of CMD_READ_ID response  Get the vendor of the chip  store Manufacturer index  look for matching device code
             * and store total phys sectors
              div zero is fatal for us (not for OF :P)  loc_7e8  flash access time (ns)  set_large
         * j is index in device_code table
          small block  cell type  1KB~8KB  set_sec_per_page_raw  64KB~512KB  set_sec_per_block_raw  simult_prog  buff4_mulplane  set_interleave  large block  read ID block and propagate SysDiskCapacity and SysResBlocks  read single page in unbuffered mode  setup transfer  column  column  row  row  row  wait for operation complete  copy data from page register
     * WARNING flash page size can be different
     * for different chips. This value should be set
     * based on initialization.
      WARNING this code assumes only one nand chip
     * it does not handle data split across different nand chips
      wait for operation to complete  enables hw checksum control most probably  This initializes the transfer from the nand to the buffer
     * There are 4 consecutive hw buffers 512 bytes long for data (PAGE_BUF)
     * and 4 16 bytes long for metadata (BCH code checksum) (SPARE_BUF)
      This scheme utilizes some overlap in data transfers -
     * data are copied from buffer to the mem and from nand to the buf
     * at the same time.
      wait for transfer to complete  initialize next transfer to the next buffer  copy data chunk  copy metadata chunk (BCH)
         * in real application this can be discarded
          wait for transfer to complete  copy data chunk  copy metadata chunk (BCH)
     * in real application this can be discarded
      TODO implement  TODO implement  TODO implement  TODO implement  TODO implement  TODO implement  TODO implement  TODO implement  TODO implement **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 by Bertrik Sikken
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** This is for documentation purpose as FTL has not been reverse engineered yet
 * Raw nand handling functions based on OF disassembly and partially inspired
 * by Rockchip patent
  this is the struct OF uses  holds nand chips characteristics  sum of all phy sectors in all chips  taken from OF  SAMSUNG   TOSHIBA   HYNIX     INFINEON  MICRON    RENESAS   ST        phisical sectors   64M, small page  128M, small page  128M, large page  256M, large page  512M, large page    1G, large page    2G, large page    4G, large page  Maybe we should handle IOMUX here as well?
     * for chip == 0,1 it is not needed
      buff for CMD_READ_ID response  Redundat - we will use special macros
         * just for reference what OF does
          write cmd to flash chip  write cmd to flash chip  read 5 bytes of CMD_READ_ID response  Get the vendor of the chip  store Manufacturer index  look for matching device code
             * and store total phys sectors
              div zero is fatal for us (not for OF :P)  loc_7e8  flash access time (ns)  set_large
         * j is index in device_code table
          small block  cell type  1KB~8KB  set_sec_per_page_raw  64KB~512KB  set_sec_per_block_raw  simult_prog  buff4_mulplane  set_interleave  large block  read ID block and propagate SysDiskCapacity and SysResBlocks  read single page in unbuffered mode  setup transfer  column  column  row  row  row  wait for operation complete  copy data from page register
     * WARNING flash page size can be different
     * for different chips. This value should be set
     * based on initialization.
      WARNING this code assumes only one nand chip
     * it does not handle data split across different nand chips
      wait for operation to complete  enables hw checksum control most probably  This initializes the transfer from the nand to the buffer
     * There are 4 consecutive hw buffers 512 bytes long for data (PAGE_BUF)
     * and 4 16 bytes long for metadata (BCH code checksum) (SPARE_BUF)
      This scheme utilizes some overlap in data transfers -
     * data are copied from buffer to the mem and from nand to the buf
     * at the same time.
      wait for transfer to complete  initialize next transfer to the next buffer  copy data chunk  copy metadata chunk (BCH)
         * in real application this can be discarded
          wait for transfer to complete  copy data chunk  copy metadata chunk (BCH)
     * in real application this can be discarded
      TODO implement  TODO implement  TODO implement  TODO implement  TODO implement  TODO implement  TODO implement  TODO implement  TODO implement **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 by Bertrik Sikken
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** This is for documentation purpose as FTL has not been reverse engineered yet
 * Raw nand handling functions based on OF disassembly and partially inspired
 * by Rockchip patent
  this is the struct OF uses  holds nand chips characteristics  sum of all phy sectors in all chips  taken from OF  SAMSUNG   TOSHIBA   HYNIX     INFINEON  MICRON    RENESAS   ST        phisical sectors   64M, small page  128M, small page  128M, large page  256M, large page  512M, large page    1G, large page    2G, large page    4G, large page  Maybe we should handle IOMUX here as well?
     * for chip == 0,1 it is not needed
      buff for CMD_READ_ID response  Redundat - we will use special macros
         * just for reference what OF does
          write cmd to flash chip  write cmd to flash chip  read 5 bytes of CMD_READ_ID response  Get the vendor of the chip  store Manufacturer index  look for matching device code
             * and store total phys sectors
              div zero is fatal for us (not for OF :P)  loc_7e8  flash access time (ns)  set_large
         * j is index in device_code table
          small block  cell type  1KB~8KB  set_sec_per_page_raw  64KB~512KB  set_sec_per_block_raw  simult_prog  buff4_mulplane  set_interleave  large block  read ID block and propagate SysDiskCapacity and SysResBlocks  read single page in unbuffered mode  setup transfer  column  column  row  row  row  wait for operation complete  copy data from page register
     * WARNING flash page size can be different
     * for different chips. This value should be set
     * based on initialization.
      WARNING this code assumes only one nand chip
     * it does not handle data split across different nand chips
      wait for operation to complete  enables hw checksum control most probably  This initializes the transfer from the nand to the buffer
     * There are 4 consecutive hw buffers 512 bytes long for data (PAGE_BUF)
     * and 4 16 bytes long for metadata (BCH code checksum) (SPARE_BUF)
      This scheme utilizes some overlap in data transfers -
     * data are copied from buffer to the mem and from nand to the buf
     * at the same time.
      wait for transfer to complete  initialize next transfer to the next buffer  copy data chunk  copy metadata chunk (BCH)
         * in real application this can be discarded
          wait for transfer to complete  copy data chunk  copy metadata chunk (BCH)
     * in real application this can be discarded
      TODO implement  TODO implement  TODO implement  TODO implement  TODO implement  TODO implement  TODO implement  TODO implement  TODO implement 