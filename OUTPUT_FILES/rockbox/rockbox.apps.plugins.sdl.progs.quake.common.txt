
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 common.c -- misc functions used in client and server set true if using non-id files only for startup check, then set if a packfile directory differs from this, it is assumed to be hacked this graphic needs to be in the pak file to use registered features


All of Quake's data access is through a hierchal file system, but the contents of the file system can be transparently merged from several sources.

The "base directory" is the path to the directory holding the quake.exe and all game directories.  The sys_* files pass this to host_init in quakeparms_t->basedir.  This can be overridden with the "-basedir" command line parm to allow code debugging in a different directory.  The base directory is
only used during filesystem initialization.

The "game directory" is the first tree on the search path and directory that all generated files (savegames, screenshots, demos, config files) will be saved to.  This can be overridden with the "-game" command line parameter.  The game directory can never be changed while quake is executing.  This is a precacution against having a malicious server instruct clients to write files over areas they shouldn't.

The "cache directory" is only used during development to save network bandwidth, especially over ISDN / T1 lines.  If there is a cache directory
specified, when a file is found by the normal search path, it will be mirrored
into the cache directory, then opened there.



FIXME:
The file "parms.txt" will be read out of the game directory and appended to the current command line arguments to allow different games to initialize startup parms differently.  This could be used to add a "-sspeed 22050" for the high quality sound edition.  Because they are added at the end, they will not override an explicit setting on the original command line.
	
============================================================================ ClearLink is used for new headnodes
============================================================================

					LIBRARY REPLACEMENT FUNCTIONS

============================================================================
 strings not equal     strings are equal strings not equal     strings are equal strings are equal until end point strings not equal strings are equal              s1++;              s2++; check for hex check for character assume decimal check for hex check for character assume decimal
============================================================================

					BYTE ORDER FUNCTIONS

============================================================================
 safe for unaligned accesses same
==============================================================================

			MESSAGE IO FUNCTIONS

Handles byte ordering and avoids alignment errors
==============================================================================
 writing functions reading functions returns -1 and sets msg_badread if no more characters are available===========================================================================      Z_Free (buf->data);      buf->data = NULL;      buf->maxsize = 0; byte * cast to keep VC++ happy no trailing 0 write over trailing 0============================================================================
============
COM_SkipPath
============

============
COM_StripExtension
============

============
COM_FileExtension
============

============
COM_FileBase
============
 BUG printf("writing %d bytes to outbuf", s-s2);
==================
COM_DefaultExtension
==================
 if path doesn't have a .EXT, append extension (extension should include the .) it has an extension
==============
COM_Parse

Parse a token out of a string
==============
 skip whitespace end of file; skip // comments handle quoted strings specially parse single characters parse a regular word
================
COM_CheckParm

Returns the position (1 to argc-1) in the program's argument list
where the given parameter apears, or 0 if not present
================
 NEXTSTEP sometimes clears appkit vars.
================
COM_CheckRegistered

Looks for the pop.txt file and verifies it.
Sets the "registered" cvar.
Immediately exits out if an alternate game was attempted to be started without
being registered.
================

================
COM_InitArgv
================
 reconstitute the command line for the cmdline externally visible cvar force all the safe-mode switches. Note that we reserved extra space in case we need to add these, so we don't need an overflow check
================
COM_Init
================
 set the byte swapping variables in a portable manner  This is necessary because egcs 1.1.1 mis-compiles swaptest with -O2
============
va

does a varargs printf into a temp buffer, so I don't need to have
varargs versions of all text functions.
FIXME: make this buffer size safe someday
============
/ just for debugging
=============================================================================

QUAKE FILESYSTEM

=============================================================================
 in memory on disk only one of filename / pack will be used
============
COM_Path_f

============

============
COM_WriteFile

The filename will be prefixed by the current game directory
============

============
COM_CreatePath

Only used for CopyFile
============
 create the directory
===========
COM_CopyFile

Copies a file over from the net to the local cache, creating any directories
needed.  This is for the convenience of developers using ISDN from home.
===========
 create directories up to the cache file
===========
COM_FindFile

Finds the file in the search path.
Sets com_filesize and one of handle or file
===========
 search through the path, one element at a time gross hack to use quake 1 progs with quake 2 maps is the element a pak file? look through all the pak file elements found it!if(*handle != 1)rb->splashf(HZ, "handle found: %d", *handle); open a new file on the pakfile check a file in the directory tree if not a registered version, don't ever go beyond base see if the file needs to be updated in the cache
===========
COM_OpenFile

filename never has a leading slash, but may contain directory walks
returns a handle and a length
it may actually be inside a pak file
===========

===========
COM_FOpenFile

If the requested file is inside a packfile, a new FILE * will be opened
into the file.
===========

============
COM_CloseFile

If it is a pak file handle, don't really close it
============

============
COM_LoadFile

Filename are reletive to the quake directory.
Allways appends a 0 byte.
============
printf("COM_LoadFile(%s)", path); quiet compiler warning look for it in the filesystem or pack filesprintf("handle %d", h); extract the filename base name for hunk tag BUG IS HERE printf("handle %d base \"%s\"", h, base);printf("");
 * This function was NOT originally thread-safe, leading to a race
 * condition between the Mod_LoadModel and S_LoadSound (which run in
 * different threads). Fixed with mutex lock. - FW 7/29/19
  uses temp hunk if larger than bufsize
=================
COM_LoadPackFile

Takes an explicit (not game tree related) path to a pak file.

Loads the header and directory, adding the files at the beginning
of the list so they override previous pack files.
=================
              Con_Printf ("Couldn't open %s\n", packfile); not the original file crc the directory to check for modifications parse the directory
================
COM_AddGameDirectory

Sets com_gamedir, adds the directory to the head of the path,
then loads and adds pak1.pak pak2.pak ... 
================
 add the directory to the search path add any pak files in the format pak0.pak pak1.pak, ... add the contents of the parms.txt file to the end of the command line
================
COM_InitFilesystem
================
 -basedir <path> Overrides the system supplied base directory (under GAMENAME) -cachedir <path> Overrides the system supplied cache directory (NULL or /qcache) -cachedir - will disable caching. start up with GAMENAME by default (id1) -game <gamedir> Adds basedir/gamedir as an override game -path <dir or packfile> [<dir or packfile>] ... Fully specifies the exact serach path, overriding the generated one
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 common.c -- misc functions used in client and server set true if using non-id files only for startup check, then set if a packfile directory differs from this, it is assumed to be hacked this graphic needs to be in the pak file to use registered features


All of Quake's data access is through a hierchal file system, but the contents of the file system can be transparently merged from several sources.

The "base directory" is the path to the directory holding the quake.exe and all game directories.  The sys_* files pass this to host_init in quakeparms_t->basedir.  This can be overridden with the "-basedir" command line parm to allow code debugging in a different directory.  The base directory is
only used during filesystem initialization.

The "game directory" is the first tree on the search path and directory that all generated files (savegames, screenshots, demos, config files) will be saved to.  This can be overridden with the "-game" command line parameter.  The game directory can never be changed while quake is executing.  This is a precacution against having a malicious server instruct clients to write files over areas they shouldn't.

The "cache directory" is only used during development to save network bandwidth, especially over ISDN / T1 lines.  If there is a cache directory
specified, when a file is found by the normal search path, it will be mirrored
into the cache directory, then opened there.



FIXME:
The file "parms.txt" will be read out of the game directory and appended to the current command line arguments to allow different games to initialize startup parms differently.  This could be used to add a "-sspeed 22050" for the high quality sound edition.  Because they are added at the end, they will not override an explicit setting on the original command line.
	
============================================================================ ClearLink is used for new headnodes
============================================================================

					LIBRARY REPLACEMENT FUNCTIONS

============================================================================
 strings not equal     strings are equal strings not equal     strings are equal strings are equal until end point strings not equal strings are equal              s1++;              s2++; check for hex check for character assume decimal check for hex check for character assume decimal
============================================================================

					BYTE ORDER FUNCTIONS

============================================================================
 safe for unaligned accesses same
==============================================================================

			MESSAGE IO FUNCTIONS

Handles byte ordering and avoids alignment errors
==============================================================================
 writing functions reading functions returns -1 and sets msg_badread if no more characters are available===========================================================================      Z_Free (buf->data);      buf->data = NULL;      buf->maxsize = 0; byte * cast to keep VC++ happy no trailing 0 write over trailing 0============================================================================
============
COM_SkipPath
============

============
COM_StripExtension
============

============
COM_FileExtension
============

============
COM_FileBase
============
 BUG printf("writing %d bytes to outbuf", s-s2);
==================
COM_DefaultExtension
==================
 if path doesn't have a .EXT, append extension (extension should include the .) it has an extension
==============
COM_Parse

Parse a token out of a string
==============
 skip whitespace end of file; skip // comments handle quoted strings specially parse single characters parse a regular word
================
COM_CheckParm

Returns the position (1 to argc-1) in the program's argument list
where the given parameter apears, or 0 if not present
================
 NEXTSTEP sometimes clears appkit vars.
================
COM_CheckRegistered

Looks for the pop.txt file and verifies it.
Sets the "registered" cvar.
Immediately exits out if an alternate game was attempted to be started without
being registered.
================

================
COM_InitArgv
================
 reconstitute the command line for the cmdline externally visible cvar force all the safe-mode switches. Note that we reserved extra space in case we need to add these, so we don't need an overflow check
================
COM_Init
================
 set the byte swapping variables in a portable manner  This is necessary because egcs 1.1.1 mis-compiles swaptest with -O2
============
va

does a varargs printf into a temp buffer, so I don't need to have
varargs versions of all text functions.
FIXME: make this buffer size safe someday
============
/ just for debugging
=============================================================================

QUAKE FILESYSTEM

=============================================================================
 in memory on disk only one of filename / pack will be used
============
COM_Path_f

============

============
COM_WriteFile

The filename will be prefixed by the current game directory
============

============
COM_CreatePath

Only used for CopyFile
============
 create the directory
===========
COM_CopyFile

Copies a file over from the net to the local cache, creating any directories
needed.  This is for the convenience of developers using ISDN from home.
===========
 create directories up to the cache file
===========
COM_FindFile

Finds the file in the search path.
Sets com_filesize and one of handle or file
===========
 search through the path, one element at a time gross hack to use quake 1 progs with quake 2 maps is the element a pak file? look through all the pak file elements found it!if(*handle != 1)rb->splashf(HZ, "handle found: %d", *handle); open a new file on the pakfile check a file in the directory tree if not a registered version, don't ever go beyond base see if the file needs to be updated in the cache
===========
COM_OpenFile

filename never has a leading slash, but may contain directory walks
returns a handle and a length
it may actually be inside a pak file
===========

===========
COM_FOpenFile

If the requested file is inside a packfile, a new FILE * will be opened
into the file.
===========

============
COM_CloseFile

If it is a pak file handle, don't really close it
============

============
COM_LoadFile

Filename are reletive to the quake directory.
Allways appends a 0 byte.
============
printf("COM_LoadFile(%s)", path); quiet compiler warning look for it in the filesystem or pack filesprintf("handle %d", h); extract the filename base name for hunk tag BUG IS HERE printf("handle %d base \"%s\"", h, base);printf("");
 * This function was NOT originally thread-safe, leading to a race
 * condition between the Mod_LoadModel and S_LoadSound (which run in
 * different threads). Fixed with mutex lock. - FW 7/29/19
  uses temp hunk if larger than bufsize
=================
COM_LoadPackFile

Takes an explicit (not game tree related) path to a pak file.

Loads the header and directory, adding the files at the beginning
of the list so they override previous pack files.
=================
              Con_Printf ("Couldn't open %s\n", packfile); not the original file crc the directory to check for modifications parse the directory
================
COM_AddGameDirectory

Sets com_gamedir, adds the directory to the head of the path,
then loads and adds pak1.pak pak2.pak ... 
================
 add the directory to the search path add any pak files in the format pak0.pak pak1.pak, ... add the contents of the parms.txt file to the end of the command line
================
COM_InitFilesystem
================
 -basedir <path> Overrides the system supplied base directory (under GAMENAME) -cachedir <path> Overrides the system supplied cache directory (NULL or /qcache) -cachedir - will disable caching. start up with GAMENAME by default (id1) -game <gamedir> Adds basedir/gamedir as an override game -path <dir or packfile> [<dir or packfile>] ... Fully specifies the exact serach path, overriding the generated one
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 common.c -- misc functions used in client and server set true if using non-id files only for startup check, then set if a packfile directory differs from this, it is assumed to be hacked this graphic needs to be in the pak file to use registered features


All of Quake's data access is through a hierchal file system, but the contents of the file system can be transparently merged from several sources.

The "base directory" is the path to the directory holding the quake.exe and all game directories.  The sys_* files pass this to host_init in quakeparms_t->basedir.  This can be overridden with the "-basedir" command line parm to allow code debugging in a different directory.  The base directory is
only used during filesystem initialization.

The "game directory" is the first tree on the search path and directory that all generated files (savegames, screenshots, demos, config files) will be saved to.  This can be overridden with the "-game" command line parameter.  The game directory can never be changed while quake is executing.  This is a precacution against having a malicious server instruct clients to write files over areas they shouldn't.

The "cache directory" is only used during development to save network bandwidth, especially over ISDN / T1 lines.  If there is a cache directory
specified, when a file is found by the normal search path, it will be mirrored
into the cache directory, then opened there.



FIXME:
The file "parms.txt" will be read out of the game directory and appended to the current command line arguments to allow different games to initialize startup parms differently.  This could be used to add a "-sspeed 22050" for the high quality sound edition.  Because they are added at the end, they will not override an explicit setting on the original command line.
	
============================================================================ ClearLink is used for new headnodes
============================================================================

					LIBRARY REPLACEMENT FUNCTIONS

============================================================================
 strings not equal     strings are equal strings not equal     strings are equal strings are equal until end point strings not equal strings are equal              s1++;              s2++; check for hex check for character assume decimal check for hex check for character assume decimal
============================================================================

					BYTE ORDER FUNCTIONS

============================================================================
 safe for unaligned accesses same
==============================================================================

			MESSAGE IO FUNCTIONS

Handles byte ordering and avoids alignment errors
==============================================================================
 writing functions reading functions returns -1 and sets msg_badread if no more characters are available===========================================================================      Z_Free (buf->data);      buf->data = NULL;      buf->maxsize = 0; byte * cast to keep VC++ happy no trailing 0 write over trailing 0============================================================================
============
COM_SkipPath
============

============
COM_StripExtension
============

============
COM_FileExtension
============

============
COM_FileBase
============
 BUG printf("writing %d bytes to outbuf", s-s2);
==================
COM_DefaultExtension
==================
 if path doesn't have a .EXT, append extension (extension should include the .) it has an extension
==============
COM_Parse

Parse a token out of a string
==============
 skip whitespace end of file; skip // comments handle quoted strings specially parse single characters parse a regular word
================
COM_CheckParm

Returns the position (1 to argc-1) in the program's argument list
where the given parameter apears, or 0 if not present
================
 NEXTSTEP sometimes clears appkit vars.
================
COM_CheckRegistered

Looks for the pop.txt file and verifies it.
Sets the "registered" cvar.
Immediately exits out if an alternate game was attempted to be started without
being registered.
================

================
COM_InitArgv
================
 reconstitute the command line for the cmdline externally visible cvar force all the safe-mode switches. Note that we reserved extra space in case we need to add these, so we don't need an overflow check
================
COM_Init
================
 set the byte swapping variables in a portable manner  This is necessary because egcs 1.1.1 mis-compiles swaptest with -O2
============
va

does a varargs printf into a temp buffer, so I don't need to have
varargs versions of all text functions.
FIXME: make this buffer size safe someday
============
/ just for debugging
=============================================================================

QUAKE FILESYSTEM

=============================================================================
 in memory on disk only one of filename / pack will be used
============
COM_Path_f

============

============
COM_WriteFile

The filename will be prefixed by the current game directory
============

============
COM_CreatePath

Only used for CopyFile
============
 create the directory
===========
COM_CopyFile

Copies a file over from the net to the local cache, creating any directories
needed.  This is for the convenience of developers using ISDN from home.
===========
 create directories up to the cache file
===========
COM_FindFile

Finds the file in the search path.
Sets com_filesize and one of handle or file
===========
 search through the path, one element at a time gross hack to use quake 1 progs with quake 2 maps is the element a pak file? look through all the pak file elements found it!if(*handle != 1)rb->splashf(HZ, "handle found: %d", *handle); open a new file on the pakfile check a file in the directory tree if not a registered version, don't ever go beyond base see if the file needs to be updated in the cache
===========
COM_OpenFile

filename never has a leading slash, but may contain directory walks
returns a handle and a length
it may actually be inside a pak file
===========

===========
COM_FOpenFile

If the requested file is inside a packfile, a new FILE * will be opened
into the file.
===========

============
COM_CloseFile

If it is a pak file handle, don't really close it
============

============
COM_LoadFile

Filename are reletive to the quake directory.
Allways appends a 0 byte.
============
printf("COM_LoadFile(%s)", path); quiet compiler warning look for it in the filesystem or pack filesprintf("handle %d", h); extract the filename base name for hunk tag BUG IS HERE printf("handle %d base \"%s\"", h, base);printf("");
 * This function was NOT originally thread-safe, leading to a race
 * condition between the Mod_LoadModel and S_LoadSound (which run in
 * different threads). Fixed with mutex lock. - FW 7/29/19
  uses temp hunk if larger than bufsize
=================
COM_LoadPackFile

Takes an explicit (not game tree related) path to a pak file.

Loads the header and directory, adding the files at the beginning
of the list so they override previous pack files.
=================
              Con_Printf ("Couldn't open %s\n", packfile); not the original file crc the directory to check for modifications parse the directory
================
COM_AddGameDirectory

Sets com_gamedir, adds the directory to the head of the path,
then loads and adds pak1.pak pak2.pak ... 
================
 add the directory to the search path add any pak files in the format pak0.pak pak1.pak, ... add the contents of the parms.txt file to the end of the command line
================
COM_InitFilesystem
================
 -basedir <path> Overrides the system supplied base directory (under GAMENAME) -cachedir <path> Overrides the system supplied cache directory (NULL or /qcache) -cachedir - will disable caching. start up with GAMENAME by default (id1) -game <gamedir> Adds basedir/gamedir as an override game -path <dir or packfile> [<dir or packfile>] ... Fully specifies the exact serach path, overriding the generated one