      ID Engine      ID_SD.c - Sound Manager for Wolfenstein 3D      v1.2      By Jason Blochowiak      This module handles dealing with generating sound on the appropriate              hardware      Depends on: User Mgr (for parm checking)      Globals:              For User Mgr:                      SoundBlasterPresent - SoundBlaster card present?                      AdLibPresent - AdLib card present?                      SoundMode - What device is used for sound effects                              (Use SM_SetSoundMode() to set)                      MusicMode - What device is used for music                              (Use SM_SetMusicMode() to set)                      DigiMode - What device is used for digitized sound effects                              (Use SM_SetDigiDevice() to set)              For Cache Mgr:                      NeedsDigitized - load digitized sounds?                      NeedsMusic - load music?      Global variables      Internal variables      PC Sound variables      AdLib variables      Sequencer variables [adlib sound stuff removed...] [adlib music and soundsource stuff removed...] Timer 0 ISR for 7000Hz interrupts Timer 0 ISR for 700Hz interrupts Timer 0 ISR for 140Hz interrupts/////////////////////////////////////////////////////////////////////////      SDL_SetTimer0() - Sets system timer 0 to the specified speed///////////////////////////////////////////////////////////////////////// If using Borland's profiling, don't screw with the timer      _asm pushfd Change timer 0 Kludge to handle special case for digitized PC sounds      _asm popfd/////////////////////////////////////////////////////////////////////////      SDL_SetIntsPerSec() - Uses SDL_SetTimer0() to set the number of              interrupts generated by system timer 0 per second/////////////////////////////////////////////////////////////////////////      PC Sound code/////////////////////////////////////////////////////////////////////////      SDL_PCPlaySample() - Plays the specified sample on the PC speaker/////////////////////////////////////////////////////////////////////////              _asm    pushfd              _asm    popfd/////////////////////////////////////////////////////////////////////////      SDL_PCStopSample() - Stops a sample playing on the PC speaker///////////////////////////////////////////////////////////////////////// Turn the speaker off ~2/////////////////////////////////////////////////////////////////////////      SDL_PCPlaySound() - Plays the specified sound on the PC speaker/////////////////////////////////////////////////////////////////////////      _asm    pushfd      _asm    popfd/////////////////////////////////////////////////////////////////////////      SDL_PCStopSound() - Stops the current sound playing on the PC Speaker/////////////////////////////////////////////////////////////////////////      _asm    pushfd Turn the speaker off ~2      _asm    popfd/////////////////////////////////////////////////////////////////////////      SDL_ShutPC() - Turns off the pc speaker/////////////////////////////////////////////////////////////////////////      _asm    pushfd Turn the speaker & gate off ~3      _asm    popfd            SDL_PCStopSampleInIRQ();            SDL_SBStopSampleInIRQ(); All sounds stopped in the meantime?            SDL_PositionSBP(leftpos,rightpos); more precise than original samples  Looks to be some sort of interpolation - FW19 float s0=0, s1=0, s2=0;float val = s0*sf*(sf-1)/2 - s1*(sf*sf-1) + s2*(sf+1)*sf/2; this is fine to keep as floating-point  dest are 16-bit samples (sizeof(dhead)-8 = 0) alignment is correct, as wavebuffer comes from malloc and sizeof(headchunk) % 4 == 0 and sizeof(wavechunk) % 4 == 0 dest are 16-bit samples (sizeof(dhead)-8 = 0) alignment is correct, as wavebuffer comes from malloc and sizeof(headchunk) % 4 == 0 and sizeof(wavechunk) % 4 == 0 Correct padding enforced by PM_Startup() Calculate the size of the digi from the sizes of the pages between the start page and the start page of the next sound Don't include padding of sound info page, if padding was added Patch lower 16-bit of size with size from sound info page. The original VSWAP contains padding which is included in the page size, but not included in the 16-bit size. So we use the more precise value.      AdLib Code/////////////////////////////////////////////////////////////////////////      SDL_ALStopSound() - Turns off any sound effects playing through the              AdLib card///////////////////////////////////////////////////////////////////////// modulator cell for channel 0 carrier cell for channel 0 Note: Switch commenting on these lines for old MUSE compatibility    alOutInIRQ(alFeedCon,inst->nConn);/////////////////////////////////////////////////////////////////////////      SDL_ALPlaySound() - Plays the specified sound on the AdLib card//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SDL_ShutAL() - Shuts down the AdLib card for sound effects//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SDL_CleanAL() - Totally shuts down the AdLib card//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SDL_StartAL() - Starts up the AdLib card for sound effects//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SDL_DetectAdLib() - Determines if there's an AdLib (or SoundBlaster              emulating an AdLib) present///////////////////////////////////////////////////////////////////////// Zero all the registers Set WSE=1    alOut(8, 0);                // Set CSM=0 & SEL=0//////////////////////////////////////////////////////////////////////////      SDL_ShutDevice() - turns off whatever device was being used for sound fx//////////////////////////////////////////////////////////////////////////            SDL_ShutPC();/////////////////////////////////////////////////////////////////////////      SDL_CleanDevice() - totally shuts down all sound devices//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SDL_StartDevice() - turns on whatever device is to be used for sound fx/////////////////////////////////////////////////////////////////////////      Public routines/////////////////////////////////////////////////////////////////////////      SD_SetSoundMode() - Sets which sound hardware to use for sound effects//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SD_SetMusicMode() - sets the device to use for background music/////////////////////////////////////////////////////////////////////////    SDL_SetTimerSpeed(); expect correct alignment/////////////////////////////////////////////////////////////////////////      SD_Startup() - starts up the Sound Mgr              Detects all additional sound hardware and installs my ISR///////////////////////////////////////////////////////////////////////// reserve player and boss weapon channels group remaining channels Init music SDL_t0FastAsmService played at 700Hzprintf("Unable to create virtual OPL!!\n"); Set WSE=1    YM3812Write(0,8,0); // Set CSM=0 & SEL=0		 // already set in for statement/////////////////////////////////////////////////////////////////////////      SD_Shutdown() - shuts down the Sound Mgr              Removes sound ISR and turns off whatever sound hardware was active//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SD_PositionSound() - Sets up a stereo imaging location for the next              sound to be played. Each channel ranges from 0 to 15.//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SD_PlaySound() - plays the specified sound on the appropriate hardware/////////////////////////////////////////////////////////////////////////            SDL_PCPlaySound((PCSound *)s);/////////////////////////////////////////////////////////////////////////      SD_SoundPlaying() - returns the sound number that's playing, or 0 if              no sound is playing//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SD_StopSound() - if a sound is playing, stops it/////////////////////////////////////////////////////////////////////////            SDL_PCStopSound();/////////////////////////////////////////////////////////////////////////      SD_WaitSoundDone() - waits until the current sound is done playing//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SD_MusicOn() - turns on the sequencer//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SD_MusicOff() - turns off the sequencer and any playing notes      returns the last music offset for music continue//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SD_StartMusic() - starts playing the music pointed to///////////////////////////////////////////////////////////////////////// alignment is correct alignment is correct fast forward to correct position (needed to reconstruct the instruments) disable play note flag disable drum flags/////////////////////////////////////////////////////////////////////////      SD_FadeOutMusic() - starts fading out the music. Call SD_MusicPlaying()              to see if the fadeout is complete///////////////////////////////////////////////////////////////////////// DEBUG - quick hack to turn the music off/////////////////////////////////////////////////////////////////////////      SD_MusicPlaying() - returns true if music is currently playing, false if              not/////////////////////////////////////////////////////////////////////////      ID Engine      ID_SD.c - Sound Manager for Wolfenstein 3D      v1.2      By Jason Blochowiak      This module handles dealing with generating sound on the appropriate              hardware      Depends on: User Mgr (for parm checking)      Globals:              For User Mgr:                      SoundBlasterPresent - SoundBlaster card present?                      AdLibPresent - AdLib card present?                      SoundMode - What device is used for sound effects                              (Use SM_SetSoundMode() to set)                      MusicMode - What device is used for music                              (Use SM_SetMusicMode() to set)                      DigiMode - What device is used for digitized sound effects                              (Use SM_SetDigiDevice() to set)              For Cache Mgr:                      NeedsDigitized - load digitized sounds?                      NeedsMusic - load music?      Global variables      Internal variables      PC Sound variables      AdLib variables      Sequencer variables [adlib sound stuff removed...] [adlib music and soundsource stuff removed...] Timer 0 ISR for 7000Hz interrupts Timer 0 ISR for 700Hz interrupts Timer 0 ISR for 140Hz interrupts/////////////////////////////////////////////////////////////////////////      SDL_SetTimer0() - Sets system timer 0 to the specified speed///////////////////////////////////////////////////////////////////////// If using Borland's profiling, don't screw with the timer      _asm pushfd Change timer 0 Kludge to handle special case for digitized PC sounds      _asm popfd/////////////////////////////////////////////////////////////////////////      SDL_SetIntsPerSec() - Uses SDL_SetTimer0() to set the number of              interrupts generated by system timer 0 per second/////////////////////////////////////////////////////////////////////////      PC Sound code/////////////////////////////////////////////////////////////////////////      SDL_PCPlaySample() - Plays the specified sample on the PC speaker/////////////////////////////////////////////////////////////////////////              _asm    pushfd              _asm    popfd/////////////////////////////////////////////////////////////////////////      SDL_PCStopSample() - Stops a sample playing on the PC speaker///////////////////////////////////////////////////////////////////////// Turn the speaker off ~2/////////////////////////////////////////////////////////////////////////      SDL_PCPlaySound() - Plays the specified sound on the PC speaker/////////////////////////////////////////////////////////////////////////      _asm    pushfd      _asm    popfd/////////////////////////////////////////////////////////////////////////      SDL_PCStopSound() - Stops the current sound playing on the PC Speaker/////////////////////////////////////////////////////////////////////////      _asm    pushfd Turn the speaker off ~2      _asm    popfd/////////////////////////////////////////////////////////////////////////      SDL_ShutPC() - Turns off the pc speaker/////////////////////////////////////////////////////////////////////////      _asm    pushfd Turn the speaker & gate off ~3      _asm    popfd            SDL_PCStopSampleInIRQ();            SDL_SBStopSampleInIRQ(); All sounds stopped in the meantime?            SDL_PositionSBP(leftpos,rightpos); more precise than original samples  Looks to be some sort of interpolation - FW19 float s0=0, s1=0, s2=0;float val = s0*sf*(sf-1)/2 - s1*(sf*sf-1) + s2*(sf+1)*sf/2; this is fine to keep as floating-point  dest are 16-bit samples (sizeof(dhead)-8 = 0) alignment is correct, as wavebuffer comes from malloc and sizeof(headchunk) % 4 == 0 and sizeof(wavechunk) % 4 == 0 dest are 16-bit samples (sizeof(dhead)-8 = 0) alignment is correct, as wavebuffer comes from malloc and sizeof(headchunk) % 4 == 0 and sizeof(wavechunk) % 4 == 0 Correct padding enforced by PM_Startup() Calculate the size of the digi from the sizes of the pages between the start page and the start page of the next sound Don't include padding of sound info page, if padding was added Patch lower 16-bit of size with size from sound info page. The original VSWAP contains padding which is included in the page size, but not included in the 16-bit size. So we use the more precise value.      AdLib Code/////////////////////////////////////////////////////////////////////////      SDL_ALStopSound() - Turns off any sound effects playing through the              AdLib card///////////////////////////////////////////////////////////////////////// modulator cell for channel 0 carrier cell for channel 0 Note: Switch commenting on these lines for old MUSE compatibility    alOutInIRQ(alFeedCon,inst->nConn);/////////////////////////////////////////////////////////////////////////      SDL_ALPlaySound() - Plays the specified sound on the AdLib card//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SDL_ShutAL() - Shuts down the AdLib card for sound effects//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SDL_CleanAL() - Totally shuts down the AdLib card//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SDL_StartAL() - Starts up the AdLib card for sound effects//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SDL_DetectAdLib() - Determines if there's an AdLib (or SoundBlaster              emulating an AdLib) present///////////////////////////////////////////////////////////////////////// Zero all the registers Set WSE=1    alOut(8, 0);                // Set CSM=0 & SEL=0//////////////////////////////////////////////////////////////////////////      SDL_ShutDevice() - turns off whatever device was being used for sound fx//////////////////////////////////////////////////////////////////////////            SDL_ShutPC();/////////////////////////////////////////////////////////////////////////      SDL_CleanDevice() - totally shuts down all sound devices//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SDL_StartDevice() - turns on whatever device is to be used for sound fx/////////////////////////////////////////////////////////////////////////      Public routines/////////////////////////////////////////////////////////////////////////      SD_SetSoundMode() - Sets which sound hardware to use for sound effects//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SD_SetMusicMode() - sets the device to use for background music/////////////////////////////////////////////////////////////////////////    SDL_SetTimerSpeed(); expect correct alignment/////////////////////////////////////////////////////////////////////////      SD_Startup() - starts up the Sound Mgr              Detects all additional sound hardware and installs my ISR///////////////////////////////////////////////////////////////////////// reserve player and boss weapon channels group remaining channels Init music SDL_t0FastAsmService played at 700Hzprintf("Unable to create virtual OPL!!\n"); Set WSE=1    YM3812Write(0,8,0); // Set CSM=0 & SEL=0		 // already set in for statement/////////////////////////////////////////////////////////////////////////      SD_Shutdown() - shuts down the Sound Mgr              Removes sound ISR and turns off whatever sound hardware was active//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SD_PositionSound() - Sets up a stereo imaging location for the next              sound to be played. Each channel ranges from 0 to 15.//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SD_PlaySound() - plays the specified sound on the appropriate hardware/////////////////////////////////////////////////////////////////////////            SDL_PCPlaySound((PCSound *)s);/////////////////////////////////////////////////////////////////////////      SD_SoundPlaying() - returns the sound number that's playing, or 0 if              no sound is playing//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SD_StopSound() - if a sound is playing, stops it/////////////////////////////////////////////////////////////////////////            SDL_PCStopSound();/////////////////////////////////////////////////////////////////////////      SD_WaitSoundDone() - waits until the current sound is done playing//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SD_MusicOn() - turns on the sequencer//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SD_MusicOff() - turns off the sequencer and any playing notes      returns the last music offset for music continue//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SD_StartMusic() - starts playing the music pointed to///////////////////////////////////////////////////////////////////////// alignment is correct alignment is correct fast forward to correct position (needed to reconstruct the instruments) disable play note flag disable drum flags/////////////////////////////////////////////////////////////////////////      SD_FadeOutMusic() - starts fading out the music. Call SD_MusicPlaying()              to see if the fadeout is complete///////////////////////////////////////////////////////////////////////// DEBUG - quick hack to turn the music off/////////////////////////////////////////////////////////////////////////      SD_MusicPlaying() - returns true if music is currently playing, false if              not/////////////////////////////////////////////////////////////////////////      ID Engine      ID_SD.c - Sound Manager for Wolfenstein 3D      v1.2      By Jason Blochowiak      This module handles dealing with generating sound on the appropriate              hardware      Depends on: User Mgr (for parm checking)      Globals:              For User Mgr:                      SoundBlasterPresent - SoundBlaster card present?                      AdLibPresent - AdLib card present?                      SoundMode - What device is used for sound effects                              (Use SM_SetSoundMode() to set)                      MusicMode - What device is used for music                              (Use SM_SetMusicMode() to set)                      DigiMode - What device is used for digitized sound effects                              (Use SM_SetDigiDevice() to set)              For Cache Mgr:                      NeedsDigitized - load digitized sounds?                      NeedsMusic - load music?      Global variables      Internal variables      PC Sound variables      AdLib variables      Sequencer variables [adlib sound stuff removed...] [adlib music and soundsource stuff removed...] Timer 0 ISR for 7000Hz interrupts Timer 0 ISR for 700Hz interrupts Timer 0 ISR for 140Hz interrupts/////////////////////////////////////////////////////////////////////////      SDL_SetTimer0() - Sets system timer 0 to the specified speed///////////////////////////////////////////////////////////////////////// If using Borland's profiling, don't screw with the timer      _asm pushfd Change timer 0 Kludge to handle special case for digitized PC sounds      _asm popfd/////////////////////////////////////////////////////////////////////////      SDL_SetIntsPerSec() - Uses SDL_SetTimer0() to set the number of              interrupts generated by system timer 0 per second/////////////////////////////////////////////////////////////////////////      PC Sound code/////////////////////////////////////////////////////////////////////////      SDL_PCPlaySample() - Plays the specified sample on the PC speaker/////////////////////////////////////////////////////////////////////////              _asm    pushfd              _asm    popfd/////////////////////////////////////////////////////////////////////////      SDL_PCStopSample() - Stops a sample playing on the PC speaker///////////////////////////////////////////////////////////////////////// Turn the speaker off ~2/////////////////////////////////////////////////////////////////////////      SDL_PCPlaySound() - Plays the specified sound on the PC speaker/////////////////////////////////////////////////////////////////////////      _asm    pushfd      _asm    popfd/////////////////////////////////////////////////////////////////////////      SDL_PCStopSound() - Stops the current sound playing on the PC Speaker/////////////////////////////////////////////////////////////////////////      _asm    pushfd Turn the speaker off ~2      _asm    popfd/////////////////////////////////////////////////////////////////////////      SDL_ShutPC() - Turns off the pc speaker/////////////////////////////////////////////////////////////////////////      _asm    pushfd Turn the speaker & gate off ~3      _asm    popfd            SDL_PCStopSampleInIRQ();            SDL_SBStopSampleInIRQ(); All sounds stopped in the meantime?            SDL_PositionSBP(leftpos,rightpos); more precise than original samples  Looks to be some sort of interpolation - FW19 float s0=0, s1=0, s2=0;float val = s0*sf*(sf-1)/2 - s1*(sf*sf-1) + s2*(sf+1)*sf/2; this is fine to keep as floating-point  dest are 16-bit samples (sizeof(dhead)-8 = 0) alignment is correct, as wavebuffer comes from malloc and sizeof(headchunk) % 4 == 0 and sizeof(wavechunk) % 4 == 0 dest are 16-bit samples (sizeof(dhead)-8 = 0) alignment is correct, as wavebuffer comes from malloc and sizeof(headchunk) % 4 == 0 and sizeof(wavechunk) % 4 == 0 Correct padding enforced by PM_Startup() Calculate the size of the digi from the sizes of the pages between the start page and the start page of the next sound Don't include padding of sound info page, if padding was added Patch lower 16-bit of size with size from sound info page. The original VSWAP contains padding which is included in the page size, but not included in the 16-bit size. So we use the more precise value.      AdLib Code/////////////////////////////////////////////////////////////////////////      SDL_ALStopSound() - Turns off any sound effects playing through the              AdLib card///////////////////////////////////////////////////////////////////////// modulator cell for channel 0 carrier cell for channel 0 Note: Switch commenting on these lines for old MUSE compatibility    alOutInIRQ(alFeedCon,inst->nConn);/////////////////////////////////////////////////////////////////////////      SDL_ALPlaySound() - Plays the specified sound on the AdLib card//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SDL_ShutAL() - Shuts down the AdLib card for sound effects//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SDL_CleanAL() - Totally shuts down the AdLib card//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SDL_StartAL() - Starts up the AdLib card for sound effects//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SDL_DetectAdLib() - Determines if there's an AdLib (or SoundBlaster              emulating an AdLib) present///////////////////////////////////////////////////////////////////////// Zero all the registers Set WSE=1    alOut(8, 0);                // Set CSM=0 & SEL=0//////////////////////////////////////////////////////////////////////////      SDL_ShutDevice() - turns off whatever device was being used for sound fx//////////////////////////////////////////////////////////////////////////            SDL_ShutPC();/////////////////////////////////////////////////////////////////////////      SDL_CleanDevice() - totally shuts down all sound devices//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SDL_StartDevice() - turns on whatever device is to be used for sound fx/////////////////////////////////////////////////////////////////////////      Public routines/////////////////////////////////////////////////////////////////////////      SD_SetSoundMode() - Sets which sound hardware to use for sound effects//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SD_SetMusicMode() - sets the device to use for background music/////////////////////////////////////////////////////////////////////////    SDL_SetTimerSpeed(); expect correct alignment/////////////////////////////////////////////////////////////////////////      SD_Startup() - starts up the Sound Mgr              Detects all additional sound hardware and installs my ISR///////////////////////////////////////////////////////////////////////// reserve player and boss weapon channels group remaining channels Init music SDL_t0FastAsmService played at 700Hzprintf("Unable to create virtual OPL!!\n"); Set WSE=1    YM3812Write(0,8,0); // Set CSM=0 & SEL=0		 // already set in for statement/////////////////////////////////////////////////////////////////////////      SD_Shutdown() - shuts down the Sound Mgr              Removes sound ISR and turns off whatever sound hardware was active//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SD_PositionSound() - Sets up a stereo imaging location for the next              sound to be played. Each channel ranges from 0 to 15.//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SD_PlaySound() - plays the specified sound on the appropriate hardware/////////////////////////////////////////////////////////////////////////            SDL_PCPlaySound((PCSound *)s);/////////////////////////////////////////////////////////////////////////      SD_SoundPlaying() - returns the sound number that's playing, or 0 if              no sound is playing//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SD_StopSound() - if a sound is playing, stops it/////////////////////////////////////////////////////////////////////////            SDL_PCStopSound();/////////////////////////////////////////////////////////////////////////      SD_WaitSoundDone() - waits until the current sound is done playing//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SD_MusicOn() - turns on the sequencer//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SD_MusicOff() - turns off the sequencer and any playing notes      returns the last music offset for music continue//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      SD_StartMusic() - starts playing the music pointed to///////////////////////////////////////////////////////////////////////// alignment is correct alignment is correct fast forward to correct position (needed to reconstruct the instruments) disable play note flag disable drum flags/////////////////////////////////////////////////////////////////////////      SD_FadeOutMusic() - starts fading out the music. Call SD_MusicPlaying()              to see if the fadeout is complete///////////////////////////////////////////////////////////////////////// DEBUG - quick hack to turn the music off/////////////////////////////////////////////////////////////////////////      SD_MusicPlaying() - returns true if music is currently playing, false if              not/////////////////////////////////////////////////////////////////////////