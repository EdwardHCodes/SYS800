**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Robert Hak <rhak at ramapo.edu>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** generated list of names from docs/CREDITS  to do: use target defines iso keypads to set animation timings  control if scrolling is automatic (with animation) or manual  snprintf "credits" text, and save the width and height  fly in "credits" text from the left  first screen's worth of lines fly in  clear any trails left behind  exit on abort, switch to manual on up/down  process user actions (if any)  up/down - abort was catched above  pause for a bit if needed  just a screen's worth at a time  fly out an existing line..  clear trails  exit on keypress, react to scrolling  while(namepos<LCD_WIDTH+offset_dummy)  takes care of trail on loop  stop on keypress  for(i=0; i<NUM_VISIBLE_LINES; i++)  no user intervention, draw the next screen-full  while(j < numnames)  handle the keypress that we intercepted during autoscroll  if(!manual_scroll)  user went into manual scrolling, handle it here  wait for user action  exit without animation  now make the text exit to the right  Turn off backlight timeout  Show the logo for about 3 secs allowing the user to stop  Turn on backlight timeout (revert to settings) **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Robert Hak <rhak at ramapo.edu>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** generated list of names from docs/CREDITS  to do: use target defines iso keypads to set animation timings  control if scrolling is automatic (with animation) or manual  snprintf "credits" text, and save the width and height  fly in "credits" text from the left  first screen's worth of lines fly in  clear any trails left behind  exit on abort, switch to manual on up/down  process user actions (if any)  up/down - abort was catched above  pause for a bit if needed  just a screen's worth at a time  fly out an existing line..  clear trails  exit on keypress, react to scrolling  while(namepos<LCD_WIDTH+offset_dummy)  takes care of trail on loop  stop on keypress  for(i=0; i<NUM_VISIBLE_LINES; i++)  no user intervention, draw the next screen-full  while(j < numnames)  handle the keypress that we intercepted during autoscroll  if(!manual_scroll)  user went into manual scrolling, handle it here  wait for user action  exit without animation  now make the text exit to the right  Turn off backlight timeout  Show the logo for about 3 secs allowing the user to stop  Turn on backlight timeout (revert to settings) **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Robert Hak <rhak at ramapo.edu>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** generated list of names from docs/CREDITS  to do: use target defines iso keypads to set animation timings  control if scrolling is automatic (with animation) or manual  snprintf "credits" text, and save the width and height  fly in "credits" text from the left  first screen's worth of lines fly in  clear any trails left behind  exit on abort, switch to manual on up/down  process user actions (if any)  up/down - abort was catched above  pause for a bit if needed  just a screen's worth at a time  fly out an existing line..  clear trails  exit on keypress, react to scrolling  while(namepos<LCD_WIDTH+offset_dummy)  takes care of trail on loop  stop on keypress  for(i=0; i<NUM_VISIBLE_LINES; i++)  no user intervention, draw the next screen-full  while(j < numnames)  handle the keypress that we intercepted during autoscroll  if(!manual_scroll)  user went into manual scrolling, handle it here  wait for user action  exit without animation  now make the text exit to the right  Turn off backlight timeout  Show the logo for about 3 secs allowing the user to stop  Turn on backlight timeout (revert to settings) 