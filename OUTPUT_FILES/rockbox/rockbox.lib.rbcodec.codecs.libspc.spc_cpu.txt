**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006-2007 Adam Gashlin (hcs)
 * Copyright (C) 2004-2007 Shay Green (blargg)
 * Copyright (C) 2002 Brad Martin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** The CPU portion (shock!)  0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  status flags  stack  main loop  Common instructions  BEQ (most common)  BNE  CALL  RET  Define common address modes based on opcode for immediate mode. Execution
   ends with data set to the address of the operand.  (X)  (dp)+Y  (dp+X)  abs+Y  abs+X  abs  dp+X  dp  1. 8-bit Data Transmission Commands. Group I  MOV A,addr case 0xE4: MOV a,dp (most common)  MOV A,(X)+  MOV A,imm  MOV X,dp+Y  MOV X,dp  MOV X,abs  MOV X,imm  MOV Y,dp+X  MOV Y,dp  MOV Y,abs  MOV Y,imm  2. 8-BIT DATA TRANSMISSION COMMANDS, GROUP 2  MOV addr,A  MOV abs,Y  MOV abs,X  MOV dp+Y,X  MOV dp,X  MOV dp+X,Y  MOV dp,Y  MOV dp,dp  MOV dp,#imm  3. 8-BIT DATA TRANSMISSIN COMMANDS, GROUP 3.  MOV A,X  MOV A,Y  MOV X,A  MOV Y,A  MOV X,SP  MOV SP,X case 0xC6: MOV (X),A (handled by MOV addr,A in group 2)  MOV (X)+,A  5. 8-BIT LOGIC OPERATION COMMANDS  addr  imm  X,Y  dp,dp dp,imm AND  OR  EOR  4. 8-BIT ARITHMETIC OPERATION COMMANDS  CMP addr  CMP imm  CMP (X),(Y)  CMP (dp),(dp)  CMP dp,imm  CMP X,dp  CMP X,abs  CMP X,imm  CMP Y,dp  CMP Y,abs  CMP Y,imm  SBC (x),(y)  ADC (x),(y)  compensate for inc later  SBC dp,dp  ADC dp,dp  SBC dp,imm  ADC dp,imm  catch ADC and SBC together, then decode later based on operand  ADC/SBC addr  SBC imm  ADC imm  A  SBC  sign-extend  6. ADDITION & SUBTRACTION COMMANDS  INC A  INC X  INC Y  DEC A  DEC X  DEC Y  DEC dp+X  INC dp+X  DEC dp  INC dp  DEC abs  INC abs  7. SHIFT, ROTATION COMMANDS  LSR A  ROR A  ASL A  ROL A  ASL dp  ASL dp+X  ROL dp+X  ROL dp  ASL abs  ROL abs  LSR dp  LSR dp+X  ROR dp+X  ROR dp  LSR abs  ROR abs  XCN  8. 16-BIT TRANSMISION COMMANDS  MOVW YA,dp  MOVW dp,YA  9. 16-BIT OPERATION COMMANDS  INCW dp  DECW dp  low byte  +1 for INCW, -1 for DECW  high byte  SUBW YA,dp  ADDW YA,dp  read 16-bit addend  to do: fix half-carry for SUBW (it's probably wrong)  for SUBW, negate and truncate to 16 bits  add low byte (A)  add high byte (Y)  half-carry (temporary avoids CodeWarrior optimizer bug)  overflow if sign of YA changed when previous sign
           and addend sign were same  CMPW YA,dp  10. MULTIPLICATION & DIVISON COMMANDS  MUL YA  DIV YA,X  behavior based on SPC CPU tests  11. DECIMAL COMPENSATION COMMANDS  seem unused  case 0xDF:  DAA  case 0xBE:  DAS  12. BRANCHING COMMANDS  BRA rel  BMI  BPL  BCS  BCC  BVS  BVC  BBS dp.bit,rel  BBC dp.bit,rel  CBNE dp+X,rel  fall through  CBNE dp,rel  DBNZ Y,rel  DBNZ dp,rel  JMP (abs+X)  fall through  JMP abs  13. SUB-ROUTINE CALL RETURN COMMANDS  BRK  untested  vector address verified  PCALL offset  TCALL n  14. STACK OPERATION COMMANDS  RET1  POP PSW  PUSH PSW  PUSH A  PUSH X  PUSH Y  POP A  POP X  POP Y  15. BIT OPERATION COMMANDS  SET1  CLR1  TSET1 abs  TCLR1 abs  AND1 C,mem.bit  AND1 C,/mem.bit  untested  OR1 C,mem.bit  untested  OR1 C,/mem.bit  untested  EOR1 C,mem.bit  NOT1 mem.bit  MOV1 mem.bit,C  MOV1 C,mem.bit  16. PROGRAM STATUS FLAG OPERATION COMMANDS  CLRC  SETC  NOTC  CLRV  CLRP  SETP  EI  untested  DI  untested  17. OTHER COMMANDS  NOP case 0xEF: SLEEP case 0xFF: STOP  force switch table to have 256 entries,
                   hopefully helping optimizer  switch  unhandled instructions fall out of switch so emulator can catch them  undo partial execution of opcode **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006-2007 Adam Gashlin (hcs)
 * Copyright (C) 2004-2007 Shay Green (blargg)
 * Copyright (C) 2002 Brad Martin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** The CPU portion (shock!)  0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  status flags  stack  main loop  Common instructions  BEQ (most common)  BNE  CALL  RET  Define common address modes based on opcode for immediate mode. Execution
   ends with data set to the address of the operand.  (X)  (dp)+Y  (dp+X)  abs+Y  abs+X  abs  dp+X  dp  1. 8-bit Data Transmission Commands. Group I  MOV A,addr case 0xE4: MOV a,dp (most common)  MOV A,(X)+  MOV A,imm  MOV X,dp+Y  MOV X,dp  MOV X,abs  MOV X,imm  MOV Y,dp+X  MOV Y,dp  MOV Y,abs  MOV Y,imm  2. 8-BIT DATA TRANSMISSION COMMANDS, GROUP 2  MOV addr,A  MOV abs,Y  MOV abs,X  MOV dp+Y,X  MOV dp,X  MOV dp+X,Y  MOV dp,Y  MOV dp,dp  MOV dp,#imm  3. 8-BIT DATA TRANSMISSIN COMMANDS, GROUP 3.  MOV A,X  MOV A,Y  MOV X,A  MOV Y,A  MOV X,SP  MOV SP,X case 0xC6: MOV (X),A (handled by MOV addr,A in group 2)  MOV (X)+,A  5. 8-BIT LOGIC OPERATION COMMANDS  addr  imm  X,Y  dp,dp dp,imm AND  OR  EOR  4. 8-BIT ARITHMETIC OPERATION COMMANDS  CMP addr  CMP imm  CMP (X),(Y)  CMP (dp),(dp)  CMP dp,imm  CMP X,dp  CMP X,abs  CMP X,imm  CMP Y,dp  CMP Y,abs  CMP Y,imm  SBC (x),(y)  ADC (x),(y)  compensate for inc later  SBC dp,dp  ADC dp,dp  SBC dp,imm  ADC dp,imm  catch ADC and SBC together, then decode later based on operand  ADC/SBC addr  SBC imm  ADC imm  A  SBC  sign-extend  6. ADDITION & SUBTRACTION COMMANDS  INC A  INC X  INC Y  DEC A  DEC X  DEC Y  DEC dp+X  INC dp+X  DEC dp  INC dp  DEC abs  INC abs  7. SHIFT, ROTATION COMMANDS  LSR A  ROR A  ASL A  ROL A  ASL dp  ASL dp+X  ROL dp+X  ROL dp  ASL abs  ROL abs  LSR dp  LSR dp+X  ROR dp+X  ROR dp  LSR abs  ROR abs  XCN  8. 16-BIT TRANSMISION COMMANDS  MOVW YA,dp  MOVW dp,YA  9. 16-BIT OPERATION COMMANDS  INCW dp  DECW dp  low byte  +1 for INCW, -1 for DECW  high byte  SUBW YA,dp  ADDW YA,dp  read 16-bit addend  to do: fix half-carry for SUBW (it's probably wrong)  for SUBW, negate and truncate to 16 bits  add low byte (A)  add high byte (Y)  half-carry (temporary avoids CodeWarrior optimizer bug)  overflow if sign of YA changed when previous sign
           and addend sign were same  CMPW YA,dp  10. MULTIPLICATION & DIVISON COMMANDS  MUL YA  DIV YA,X  behavior based on SPC CPU tests  11. DECIMAL COMPENSATION COMMANDS  seem unused  case 0xDF:  DAA  case 0xBE:  DAS  12. BRANCHING COMMANDS  BRA rel  BMI  BPL  BCS  BCC  BVS  BVC  BBS dp.bit,rel  BBC dp.bit,rel  CBNE dp+X,rel  fall through  CBNE dp,rel  DBNZ Y,rel  DBNZ dp,rel  JMP (abs+X)  fall through  JMP abs  13. SUB-ROUTINE CALL RETURN COMMANDS  BRK  untested  vector address verified  PCALL offset  TCALL n  14. STACK OPERATION COMMANDS  RET1  POP PSW  PUSH PSW  PUSH A  PUSH X  PUSH Y  POP A  POP X  POP Y  15. BIT OPERATION COMMANDS  SET1  CLR1  TSET1 abs  TCLR1 abs  AND1 C,mem.bit  AND1 C,/mem.bit  untested  OR1 C,mem.bit  untested  OR1 C,/mem.bit  untested  EOR1 C,mem.bit  NOT1 mem.bit  MOV1 mem.bit,C  MOV1 C,mem.bit  16. PROGRAM STATUS FLAG OPERATION COMMANDS  CLRC  SETC  NOTC  CLRV  CLRP  SETP  EI  untested  DI  untested  17. OTHER COMMANDS  NOP case 0xEF: SLEEP case 0xFF: STOP  force switch table to have 256 entries,
                   hopefully helping optimizer  switch  unhandled instructions fall out of switch so emulator can catch them  undo partial execution of opcode **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006-2007 Adam Gashlin (hcs)
 * Copyright (C) 2004-2007 Shay Green (blargg)
 * Copyright (C) 2002 Brad Martin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** The CPU portion (shock!)  0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  status flags  stack  main loop  Common instructions  BEQ (most common)  BNE  CALL  RET  Define common address modes based on opcode for immediate mode. Execution
   ends with data set to the address of the operand.  (X)  (dp)+Y  (dp+X)  abs+Y  abs+X  abs  dp+X  dp  1. 8-bit Data Transmission Commands. Group I  MOV A,addr case 0xE4: MOV a,dp (most common)  MOV A,(X)+  MOV A,imm  MOV X,dp+Y  MOV X,dp  MOV X,abs  MOV X,imm  MOV Y,dp+X  MOV Y,dp  MOV Y,abs  MOV Y,imm  2. 8-BIT DATA TRANSMISSION COMMANDS, GROUP 2  MOV addr,A  MOV abs,Y  MOV abs,X  MOV dp+Y,X  MOV dp,X  MOV dp+X,Y  MOV dp,Y  MOV dp,dp  MOV dp,#imm  3. 8-BIT DATA TRANSMISSIN COMMANDS, GROUP 3.  MOV A,X  MOV A,Y  MOV X,A  MOV Y,A  MOV X,SP  MOV SP,X case 0xC6: MOV (X),A (handled by MOV addr,A in group 2)  MOV (X)+,A  5. 8-BIT LOGIC OPERATION COMMANDS  addr  imm  X,Y  dp,dp dp,imm AND  OR  EOR  4. 8-BIT ARITHMETIC OPERATION COMMANDS  CMP addr  CMP imm  CMP (X),(Y)  CMP (dp),(dp)  CMP dp,imm  CMP X,dp  CMP X,abs  CMP X,imm  CMP Y,dp  CMP Y,abs  CMP Y,imm  SBC (x),(y)  ADC (x),(y)  compensate for inc later  SBC dp,dp  ADC dp,dp  SBC dp,imm  ADC dp,imm  catch ADC and SBC together, then decode later based on operand  ADC/SBC addr  SBC imm  ADC imm  A  SBC  sign-extend  6. ADDITION & SUBTRACTION COMMANDS  INC A  INC X  INC Y  DEC A  DEC X  DEC Y  DEC dp+X  INC dp+X  DEC dp  INC dp  DEC abs  INC abs  7. SHIFT, ROTATION COMMANDS  LSR A  ROR A  ASL A  ROL A  ASL dp  ASL dp+X  ROL dp+X  ROL dp  ASL abs  ROL abs  LSR dp  LSR dp+X  ROR dp+X  ROR dp  LSR abs  ROR abs  XCN  8. 16-BIT TRANSMISION COMMANDS  MOVW YA,dp  MOVW dp,YA  9. 16-BIT OPERATION COMMANDS  INCW dp  DECW dp  low byte  +1 for INCW, -1 for DECW  high byte  SUBW YA,dp  ADDW YA,dp  read 16-bit addend  to do: fix half-carry for SUBW (it's probably wrong)  for SUBW, negate and truncate to 16 bits  add low byte (A)  add high byte (Y)  half-carry (temporary avoids CodeWarrior optimizer bug)  overflow if sign of YA changed when previous sign
           and addend sign were same  CMPW YA,dp  10. MULTIPLICATION & DIVISON COMMANDS  MUL YA  DIV YA,X  behavior based on SPC CPU tests  11. DECIMAL COMPENSATION COMMANDS  seem unused  case 0xDF:  DAA  case 0xBE:  DAS  12. BRANCHING COMMANDS  BRA rel  BMI  BPL  BCS  BCC  BVS  BVC  BBS dp.bit,rel  BBC dp.bit,rel  CBNE dp+X,rel  fall through  CBNE dp,rel  DBNZ Y,rel  DBNZ dp,rel  JMP (abs+X)  fall through  JMP abs  13. SUB-ROUTINE CALL RETURN COMMANDS  BRK  untested  vector address verified  PCALL offset  TCALL n  14. STACK OPERATION COMMANDS  RET1  POP PSW  PUSH PSW  PUSH A  PUSH X  PUSH Y  POP A  POP X  POP Y  15. BIT OPERATION COMMANDS  SET1  CLR1  TSET1 abs  TCLR1 abs  AND1 C,mem.bit  AND1 C,/mem.bit  untested  OR1 C,mem.bit  untested  OR1 C,/mem.bit  untested  EOR1 C,mem.bit  NOT1 mem.bit  MOV1 mem.bit,C  MOV1 C,mem.bit  16. PROGRAM STATUS FLAG OPERATION COMMANDS  CLRC  SETC  NOTC  CLRV  CLRP  SETP  EI  untested  DI  untested  17. OTHER COMMANDS  NOP case 0xEF: SLEEP case 0xFF: STOP  force switch table to have 256 entries,
                   hopefully helping optimizer  switch  unhandled instructions fall out of switch so emulator can catch them  undo partial execution of opcode 