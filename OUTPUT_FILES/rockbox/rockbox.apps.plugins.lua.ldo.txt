
** $Id: ldo.c,v 2.38.1.4 2012/01/18 02:27:10 roberto Exp $
** Stack and Call structure of Lua
** See Copyright Notice in lua.h
 #include <setjmp.h> 
** {======================================================
** Error-recovery functions
** =======================================================
 chain list of long jump buffers  error code  error message on current top  there was an overflow?  can `undo' overflow?  close eventual pending closures  make sure the fixedstack & block_gc flags get reset.  chain new error handler  restore old error handler  }======================================================  double size is enough?  overflow while handling overflow?  tail call; no debug information about it  ensure minimum stack size  cannot call hooks inside a hook  compat. with old-style vararg?  number of extra arguments  create `arg' table  put table on stack  put extra arguments into `arg' table  store counter in field `n'  remove table from stack  move fixed parameters to final position  first fixed argument  final position of first argument  add `arg' parameter  Open a hole inside the stack at `func'  previous call may change stack  tag method is the new function to be called  `func' is not a function?  check the `function' tag method  Lua function? prepare its call  no varargs?  vararg function  previous call may change the stack  now `enter' new function  starting point  hooks assume 'pc' is already incremented  correct 'pc'  if is a C function, call it  ensure minimum stack size  now `enter' new function  do the actual call  yielding?  next call may change stack  Lua function?  tail calls  res == final position of 1st result  restore base  restore savedpc  move results to correct place  0 iff wanted == LUA_MULTRET 
** Call a function (C or Lua). The function to be called is at *func.
** The arguments are on the stack, right after the function.
** When returns, all the results are on the stack, starting at the original
** function position.
 error while handing stack error  is a Lua function?  call it  start coroutine?  resuming from previous yield  `common' yield?  finish interrupted execution of `OP_CALL'  complete it...  and correct top if not multiple results  yielded inside a hook: just continue its execution  error?  mark thread as `dead'  protect stack slots below  an error occurred?  close eventual pending closures 
** Execute a protected parser.
 data to `f_parser'  buffer to be used by the scanner  stop collector during parsing  initialize eventual upvalues 
** $Id: ldo.c,v 2.38.1.4 2012/01/18 02:27:10 roberto Exp $
** Stack and Call structure of Lua
** See Copyright Notice in lua.h
 #include <setjmp.h> 
** {======================================================
** Error-recovery functions
** =======================================================
 chain list of long jump buffers  error code  error message on current top  there was an overflow?  can `undo' overflow?  close eventual pending closures  make sure the fixedstack & block_gc flags get reset.  chain new error handler  restore old error handler  }======================================================  double size is enough?  overflow while handling overflow?  tail call; no debug information about it  ensure minimum stack size  cannot call hooks inside a hook  compat. with old-style vararg?  number of extra arguments  create `arg' table  put table on stack  put extra arguments into `arg' table  store counter in field `n'  remove table from stack  move fixed parameters to final position  first fixed argument  final position of first argument  add `arg' parameter  Open a hole inside the stack at `func'  previous call may change stack  tag method is the new function to be called  `func' is not a function?  check the `function' tag method  Lua function? prepare its call  no varargs?  vararg function  previous call may change the stack  now `enter' new function  starting point  hooks assume 'pc' is already incremented  correct 'pc'  if is a C function, call it  ensure minimum stack size  now `enter' new function  do the actual call  yielding?  next call may change stack  Lua function?  tail calls  res == final position of 1st result  restore base  restore savedpc  move results to correct place  0 iff wanted == LUA_MULTRET 
** Call a function (C or Lua). The function to be called is at *func.
** The arguments are on the stack, right after the function.
** When returns, all the results are on the stack, starting at the original
** function position.
 error while handing stack error  is a Lua function?  call it  start coroutine?  resuming from previous yield  `common' yield?  finish interrupted execution of `OP_CALL'  complete it...  and correct top if not multiple results  yielded inside a hook: just continue its execution  error?  mark thread as `dead'  protect stack slots below  an error occurred?  close eventual pending closures 
** Execute a protected parser.
 data to `f_parser'  buffer to be used by the scanner  stop collector during parsing  initialize eventual upvalues 
** $Id: ldo.c,v 2.38.1.4 2012/01/18 02:27:10 roberto Exp $
** Stack and Call structure of Lua
** See Copyright Notice in lua.h
 #include <setjmp.h> 
** {======================================================
** Error-recovery functions
** =======================================================
 chain list of long jump buffers  error code  error message on current top  there was an overflow?  can `undo' overflow?  close eventual pending closures  make sure the fixedstack & block_gc flags get reset.  chain new error handler  restore old error handler  }======================================================  double size is enough?  overflow while handling overflow?  tail call; no debug information about it  ensure minimum stack size  cannot call hooks inside a hook  compat. with old-style vararg?  number of extra arguments  create `arg' table  put table on stack  put extra arguments into `arg' table  store counter in field `n'  remove table from stack  move fixed parameters to final position  first fixed argument  final position of first argument  add `arg' parameter  Open a hole inside the stack at `func'  previous call may change stack  tag method is the new function to be called  `func' is not a function?  check the `function' tag method  Lua function? prepare its call  no varargs?  vararg function  previous call may change the stack  now `enter' new function  starting point  hooks assume 'pc' is already incremented  correct 'pc'  if is a C function, call it  ensure minimum stack size  now `enter' new function  do the actual call  yielding?  next call may change stack  Lua function?  tail calls  res == final position of 1st result  restore base  restore savedpc  move results to correct place  0 iff wanted == LUA_MULTRET 
** Call a function (C or Lua). The function to be called is at *func.
** The arguments are on the stack, right after the function.
** When returns, all the results are on the stack, starting at the original
** function position.
 error while handing stack error  is a Lua function?  call it  start coroutine?  resuming from previous yield  `common' yield?  finish interrupted execution of `OP_CALL'  complete it...  and correct top if not multiple results  yielded inside a hook: just continue its execution  error?  mark thread as `dead'  protect stack slots below  an error occurred?  close eventual pending closures 
** Execute a protected parser.
 data to `f_parser'  buffer to be used by the scanner  stop collector during parsing  initialize eventual upvalues 