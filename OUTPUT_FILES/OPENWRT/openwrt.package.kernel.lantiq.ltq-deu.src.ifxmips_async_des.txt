*****************************************************************************
**
** FILE NAME    : ifxmips_async_des.c
** PROJECT      : IFX UEIP
** MODULES      : DEU Module
**
** DATE         : October 11, 2010
** AUTHOR       : Mohammad Firdaus
** DESCRIPTION  : Data Encryption Unit Driver for DES Algorithm
** COPYRIGHT    :       Copyright (c) 2010
**                      Infineon Technologies AG
**                      Am Campeon 1-12, 85579 Neubiberg, Germany
**
**    This program is free software; you can redistribute it and/or modify
**    it under the terms of the GNU General Public License as published by
**    the Free Software Foundation; either version 2 of the License, or
**    (at your option) any later version.
**
** HISTORY
** $Date        $Author             $Comment
** 08,Sept 2009 Mohammad Firdaus    Initial UEIP release
** 11, Oct 2010 Mohammad Firdaus    Kernel Port incl. Async. Ablkcipher mode
** 21,March 2011 Mohammad Firdaus   Changes for Kernel 2.6.32 and IPSec integration
******************************************************************************!
 \defgroup IFX_DEU IFX_DEU_DRIVERS
 \ingroup API
 \brief ifx DEU driver module
!
  \file ifxmips_async_des.c
  \ingroup IFX_DEU
  \brief DES Encryption Driver main file
!
 \defgroup IFX_DES_FUNCTIONS IFX_DES_FUNCTIONS
 \ingroup IFX_DEU
 \brief IFX DES driver Functions
 DMA specific header and variables  Preprocessor declerations #define DES_3DES_START  IFX_DES_CON Function Declaration to prevent warning messages ! \fn int lq_des_setkey(struct crypto_ablkcipher *tfm, const u8 *key, unsigned int keylen)
 *  \ingroup IFX_DES_FUNCTIONS
 *  \brief sets DES key
 *  \param tfm linux crypto algo transform
 *  \param key input key
 *  \param keylen key length
printk("setkey in %s\n", __FILE__); des! \fn int lq_des3_ede_setkey(struct crypto_ablkcipher *tfm, const u8 *key, unsigned int keylen)
 *  \ingroup IFX_DES_FUNCTIONS
 *  \brief sets DES key
 *  \param tfm linux crypto algo transform
 *  \param key input key
 *  \param keylen key length
printk("setkey in %s\n", __FILE__); des! \fn void ifx_deu_des_core(void *ctx_arg, u8 *out_arg, const u8 *in_arg, u8 *iv_arg, u32 nbytes, int encdec, int mode)
 *  \ingroup IFX_DES_FUNCTIONS
 *  \brief main interface to DES hardware
 *  \param ctx_arg crypto algo context
 *  \param out_arg output bytestream
 *  \param in_arg input bytestream
 *  \param iv_arg initialization vector
 *  \param nbytes length of bytestream
 *  \param encdec 1 for encrypt; 0 for decrypt
 *  \param mode operation mode such as ebc, cbc
 des Hardware Section  no break;  no break; encryption0 ECB 1 CBC 2 OFB 3 CFB 4 CTR hexdump(prin,sizeof(*des)); memory alignment issue DES Prepare Rx buf length used in dma psuedo interrupt  \fn static inline struct des_container *des_container_cast (
 *                     struct scatterlist *dst)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Locate the structure des_container in memory.
 * \param *areq Pointer to memory location where ablkcipher_request is located
 * \return *des_cointainer The function pointer to des_container
 \fn static void lq_sg_complete(struct des_container *des_con)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Free the used up memory after encryt/decrypt.
 \fn void lq_sg_init(struct scatterlist *src,
 *                     struct scatterlist *dst)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Maps the scatterlists into a source/destination page.
 * \param *src Pointer to the source scatterlist
 * \param *dst Pointer to the destination scatterlist
 \fn static int process_next_packet(struct des_container *des_con,  struct ablkcipher_request *areq,
 *                                     int state)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Process the next packet after dequeuing the packet from crypto queue
 * \param *des_con  Pointer to DES container structure
 * \param *areq     Pointer to ablkcipher_request container
 * \param state     State of the packet (scattered packet or new packet to be processed)
 * \return -EINVAL: DEU failure, -EINPROGRESS: DEU encrypt/decrypt in progress, 1: no scatterlist left
printk("debug ln: %d, func: %s, reqsize: %d, scattersize: %d\n", 		__LINE__, __func__, areq->nbytes, chunk_size); \fn static void process_queue(unsigned long data)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Process next packet in queue
 * \param data not used
 * \return 
 \fn static int des_crypto_thread (void *data)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief DES thread that handles crypto requests from upper layer & DMA
 * \param *data Not used
 * \return -EINVAL: DEU failure, -EBUSY: DEU HW busy, 0: exit thread
 wait to prevent starting a crypto session before 
        * exiting the dma interrupt thread.
        printk("debug line - %d, func: %s, qlen: %d\n", __LINE__, __func__, des_queue->list.qlen); while(1) \fn static int lq_des_queue_mgr(struct des_ctx *ctx, struct ablkcipher_request *areq,
                            u8 *iv, int encdec, int mode)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief starts the process of queuing DEU requests
 * \param *ctx crypto algo contax
 * \param *areq Pointer to the balkcipher requests
 * \param *iv Pointer to intput vector location
 * \param dir Encrypt/Decrypt
 * \mode The mode DES algo is running
 * \return 0 if success
 DES encrypt/decrypt mode  printk("debug - Line: %d, func: %s, reqsize: %d, scattersize: %d\n", 	__LINE__, __func__, nbytes, chunk_bytes); \fn static int lq_des_encrypt(struct ablkcipher_request *areq)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Decrypt function for DES algo
 * \param *areq Pointer to ablkcipher request in memory
 * \return 0 is success, -EINPROGRESS if encryting, EINVAL if failure
 \fn static int lq_des_decrypt(struct ablkcipher_request *areq)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Decrypt function for DES algo
 * \param *areq Pointer to ablkcipher request in memory
 * \return 0 is success, -EINPROGRESS if encryting, EINVAL if failure
 \fn static int lq_ecb_des_encrypt(struct ablkcipher_request *areq)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Decrypt function for DES algo
 * \param *areq Pointer to ablkcipher request in memory
 * \return 0 is success, -EINPROGRESS if encryting, EINVAL if failure
 \fn static int lq_ecb_des_decrypt(struct ablkcipher_request *areq)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Decrypt function for DES algo
 * \param *areq Pointer to ablkcipher request in memory
 * \return 0 is success, -EINPROGRESS if encryting, EINVAL if failure
 \fn static int lq_cbc_ecb_des_encrypt(struct ablkcipher_request *areq)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Decrypt function for DES algo
 * \param *areq Pointer to ablkcipher request in memory
 * \return 0 is success, -EINPROGRESS if encryting, EINVAL if failure
 \fn static int lq_cbc_des_decrypt(struct ablkcipher_request *areq)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Decrypt function for DES algo
 * \param *areq Pointer to ablkcipher request in memory
 * \return 0 is success, -EINPROGRESS if encryting, EINVAL if failure
 DES Supported algo array ! \fn int __init lqdeu_async_des_init (void)
 *  \ingroup IFX_DES_FUNCTIONS
 *  \brief initialize des driver
printk("driver: %s\n", des_drivers_alg[i].alg.cra_name);! \fn void __exit lqdeu_fini_async_des (void)
 *  \ingroup IFX_DES_FUNCTIONS
 *  \brief unregister des driver
*****************************************************************************
**
** FILE NAME    : ifxmips_async_des.c
** PROJECT      : IFX UEIP
** MODULES      : DEU Module
**
** DATE         : October 11, 2010
** AUTHOR       : Mohammad Firdaus
** DESCRIPTION  : Data Encryption Unit Driver for DES Algorithm
** COPYRIGHT    :       Copyright (c) 2010
**                      Infineon Technologies AG
**                      Am Campeon 1-12, 85579 Neubiberg, Germany
**
**    This program is free software; you can redistribute it and/or modify
**    it under the terms of the GNU General Public License as published by
**    the Free Software Foundation; either version 2 of the License, or
**    (at your option) any later version.
**
** HISTORY
** $Date        $Author             $Comment
** 08,Sept 2009 Mohammad Firdaus    Initial UEIP release
** 11, Oct 2010 Mohammad Firdaus    Kernel Port incl. Async. Ablkcipher mode
** 21,March 2011 Mohammad Firdaus   Changes for Kernel 2.6.32 and IPSec integration
******************************************************************************!
 \defgroup IFX_DEU IFX_DEU_DRIVERS
 \ingroup API
 \brief ifx DEU driver module
!
  \file ifxmips_async_des.c
  \ingroup IFX_DEU
  \brief DES Encryption Driver main file
!
 \defgroup IFX_DES_FUNCTIONS IFX_DES_FUNCTIONS
 \ingroup IFX_DEU
 \brief IFX DES driver Functions
 DMA specific header and variables  Preprocessor declerations #define DES_3DES_START  IFX_DES_CON Function Declaration to prevent warning messages ! \fn int lq_des_setkey(struct crypto_ablkcipher *tfm, const u8 *key, unsigned int keylen)
 *  \ingroup IFX_DES_FUNCTIONS
 *  \brief sets DES key
 *  \param tfm linux crypto algo transform
 *  \param key input key
 *  \param keylen key length
printk("setkey in %s\n", __FILE__); des! \fn int lq_des3_ede_setkey(struct crypto_ablkcipher *tfm, const u8 *key, unsigned int keylen)
 *  \ingroup IFX_DES_FUNCTIONS
 *  \brief sets DES key
 *  \param tfm linux crypto algo transform
 *  \param key input key
 *  \param keylen key length
printk("setkey in %s\n", __FILE__); des! \fn void ifx_deu_des_core(void *ctx_arg, u8 *out_arg, const u8 *in_arg, u8 *iv_arg, u32 nbytes, int encdec, int mode)
 *  \ingroup IFX_DES_FUNCTIONS
 *  \brief main interface to DES hardware
 *  \param ctx_arg crypto algo context
 *  \param out_arg output bytestream
 *  \param in_arg input bytestream
 *  \param iv_arg initialization vector
 *  \param nbytes length of bytestream
 *  \param encdec 1 for encrypt; 0 for decrypt
 *  \param mode operation mode such as ebc, cbc
 des Hardware Section  no break;  no break; encryption0 ECB 1 CBC 2 OFB 3 CFB 4 CTR hexdump(prin,sizeof(*des)); memory alignment issue DES Prepare Rx buf length used in dma psuedo interrupt  \fn static inline struct des_container *des_container_cast (
 *                     struct scatterlist *dst)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Locate the structure des_container in memory.
 * \param *areq Pointer to memory location where ablkcipher_request is located
 * \return *des_cointainer The function pointer to des_container
 \fn static void lq_sg_complete(struct des_container *des_con)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Free the used up memory after encryt/decrypt.
 \fn void lq_sg_init(struct scatterlist *src,
 *                     struct scatterlist *dst)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Maps the scatterlists into a source/destination page.
 * \param *src Pointer to the source scatterlist
 * \param *dst Pointer to the destination scatterlist
 \fn static int process_next_packet(struct des_container *des_con,  struct ablkcipher_request *areq,
 *                                     int state)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Process the next packet after dequeuing the packet from crypto queue
 * \param *des_con  Pointer to DES container structure
 * \param *areq     Pointer to ablkcipher_request container
 * \param state     State of the packet (scattered packet or new packet to be processed)
 * \return -EINVAL: DEU failure, -EINPROGRESS: DEU encrypt/decrypt in progress, 1: no scatterlist left
printk("debug ln: %d, func: %s, reqsize: %d, scattersize: %d\n", 		__LINE__, __func__, areq->nbytes, chunk_size); \fn static void process_queue(unsigned long data)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Process next packet in queue
 * \param data not used
 * \return 
 \fn static int des_crypto_thread (void *data)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief DES thread that handles crypto requests from upper layer & DMA
 * \param *data Not used
 * \return -EINVAL: DEU failure, -EBUSY: DEU HW busy, 0: exit thread
 wait to prevent starting a crypto session before 
        * exiting the dma interrupt thread.
        printk("debug line - %d, func: %s, qlen: %d\n", __LINE__, __func__, des_queue->list.qlen); while(1) \fn static int lq_des_queue_mgr(struct des_ctx *ctx, struct ablkcipher_request *areq,
                            u8 *iv, int encdec, int mode)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief starts the process of queuing DEU requests
 * \param *ctx crypto algo contax
 * \param *areq Pointer to the balkcipher requests
 * \param *iv Pointer to intput vector location
 * \param dir Encrypt/Decrypt
 * \mode The mode DES algo is running
 * \return 0 if success
 DES encrypt/decrypt mode  printk("debug - Line: %d, func: %s, reqsize: %d, scattersize: %d\n", 	__LINE__, __func__, nbytes, chunk_bytes); \fn static int lq_des_encrypt(struct ablkcipher_request *areq)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Decrypt function for DES algo
 * \param *areq Pointer to ablkcipher request in memory
 * \return 0 is success, -EINPROGRESS if encryting, EINVAL if failure
 \fn static int lq_des_decrypt(struct ablkcipher_request *areq)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Decrypt function for DES algo
 * \param *areq Pointer to ablkcipher request in memory
 * \return 0 is success, -EINPROGRESS if encryting, EINVAL if failure
 \fn static int lq_ecb_des_encrypt(struct ablkcipher_request *areq)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Decrypt function for DES algo
 * \param *areq Pointer to ablkcipher request in memory
 * \return 0 is success, -EINPROGRESS if encryting, EINVAL if failure
 \fn static int lq_ecb_des_decrypt(struct ablkcipher_request *areq)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Decrypt function for DES algo
 * \param *areq Pointer to ablkcipher request in memory
 * \return 0 is success, -EINPROGRESS if encryting, EINVAL if failure
 \fn static int lq_cbc_ecb_des_encrypt(struct ablkcipher_request *areq)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Decrypt function for DES algo
 * \param *areq Pointer to ablkcipher request in memory
 * \return 0 is success, -EINPROGRESS if encryting, EINVAL if failure
 \fn static int lq_cbc_des_decrypt(struct ablkcipher_request *areq)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Decrypt function for DES algo
 * \param *areq Pointer to ablkcipher request in memory
 * \return 0 is success, -EINPROGRESS if encryting, EINVAL if failure
 DES Supported algo array ! \fn int __init lqdeu_async_des_init (void)
 *  \ingroup IFX_DES_FUNCTIONS
 *  \brief initialize des driver
printk("driver: %s\n", des_drivers_alg[i].alg.cra_name);! \fn void __exit lqdeu_fini_async_des (void)
 *  \ingroup IFX_DES_FUNCTIONS
 *  \brief unregister des driver
*****************************************************************************
**
** FILE NAME    : ifxmips_async_des.c
** PROJECT      : IFX UEIP
** MODULES      : DEU Module
**
** DATE         : October 11, 2010
** AUTHOR       : Mohammad Firdaus
** DESCRIPTION  : Data Encryption Unit Driver for DES Algorithm
** COPYRIGHT    :       Copyright (c) 2010
**                      Infineon Technologies AG
**                      Am Campeon 1-12, 85579 Neubiberg, Germany
**
**    This program is free software; you can redistribute it and/or modify
**    it under the terms of the GNU General Public License as published by
**    the Free Software Foundation; either version 2 of the License, or
**    (at your option) any later version.
**
** HISTORY
** $Date        $Author             $Comment
** 08,Sept 2009 Mohammad Firdaus    Initial UEIP release
** 11, Oct 2010 Mohammad Firdaus    Kernel Port incl. Async. Ablkcipher mode
** 21,March 2011 Mohammad Firdaus   Changes for Kernel 2.6.32 and IPSec integration
******************************************************************************!
 \defgroup IFX_DEU IFX_DEU_DRIVERS
 \ingroup API
 \brief ifx DEU driver module
!
  \file ifxmips_async_des.c
  \ingroup IFX_DEU
  \brief DES Encryption Driver main file
!
 \defgroup IFX_DES_FUNCTIONS IFX_DES_FUNCTIONS
 \ingroup IFX_DEU
 \brief IFX DES driver Functions
 DMA specific header and variables  Preprocessor declerations #define DES_3DES_START  IFX_DES_CON Function Declaration to prevent warning messages ! \fn int lq_des_setkey(struct crypto_ablkcipher *tfm, const u8 *key, unsigned int keylen)
 *  \ingroup IFX_DES_FUNCTIONS
 *  \brief sets DES key
 *  \param tfm linux crypto algo transform
 *  \param key input key
 *  \param keylen key length
printk("setkey in %s\n", __FILE__); des! \fn int lq_des3_ede_setkey(struct crypto_ablkcipher *tfm, const u8 *key, unsigned int keylen)
 *  \ingroup IFX_DES_FUNCTIONS
 *  \brief sets DES key
 *  \param tfm linux crypto algo transform
 *  \param key input key
 *  \param keylen key length
printk("setkey in %s\n", __FILE__); des! \fn void ifx_deu_des_core(void *ctx_arg, u8 *out_arg, const u8 *in_arg, u8 *iv_arg, u32 nbytes, int encdec, int mode)
 *  \ingroup IFX_DES_FUNCTIONS
 *  \brief main interface to DES hardware
 *  \param ctx_arg crypto algo context
 *  \param out_arg output bytestream
 *  \param in_arg input bytestream
 *  \param iv_arg initialization vector
 *  \param nbytes length of bytestream
 *  \param encdec 1 for encrypt; 0 for decrypt
 *  \param mode operation mode such as ebc, cbc
 des Hardware Section  no break;  no break; encryption0 ECB 1 CBC 2 OFB 3 CFB 4 CTR hexdump(prin,sizeof(*des)); memory alignment issue DES Prepare Rx buf length used in dma psuedo interrupt  \fn static inline struct des_container *des_container_cast (
 *                     struct scatterlist *dst)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Locate the structure des_container in memory.
 * \param *areq Pointer to memory location where ablkcipher_request is located
 * \return *des_cointainer The function pointer to des_container
 \fn static void lq_sg_complete(struct des_container *des_con)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Free the used up memory after encryt/decrypt.
 \fn void lq_sg_init(struct scatterlist *src,
 *                     struct scatterlist *dst)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Maps the scatterlists into a source/destination page.
 * \param *src Pointer to the source scatterlist
 * \param *dst Pointer to the destination scatterlist
 \fn static int process_next_packet(struct des_container *des_con,  struct ablkcipher_request *areq,
 *                                     int state)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Process the next packet after dequeuing the packet from crypto queue
 * \param *des_con  Pointer to DES container structure
 * \param *areq     Pointer to ablkcipher_request container
 * \param state     State of the packet (scattered packet or new packet to be processed)
 * \return -EINVAL: DEU failure, -EINPROGRESS: DEU encrypt/decrypt in progress, 1: no scatterlist left
printk("debug ln: %d, func: %s, reqsize: %d, scattersize: %d\n", 		__LINE__, __func__, areq->nbytes, chunk_size); \fn static void process_queue(unsigned long data)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Process next packet in queue
 * \param data not used
 * \return 
 \fn static int des_crypto_thread (void *data)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief DES thread that handles crypto requests from upper layer & DMA
 * \param *data Not used
 * \return -EINVAL: DEU failure, -EBUSY: DEU HW busy, 0: exit thread
 wait to prevent starting a crypto session before 
        * exiting the dma interrupt thread.
        printk("debug line - %d, func: %s, qlen: %d\n", __LINE__, __func__, des_queue->list.qlen); while(1) \fn static int lq_des_queue_mgr(struct des_ctx *ctx, struct ablkcipher_request *areq,
                            u8 *iv, int encdec, int mode)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief starts the process of queuing DEU requests
 * \param *ctx crypto algo contax
 * \param *areq Pointer to the balkcipher requests
 * \param *iv Pointer to intput vector location
 * \param dir Encrypt/Decrypt
 * \mode The mode DES algo is running
 * \return 0 if success
 DES encrypt/decrypt mode  printk("debug - Line: %d, func: %s, reqsize: %d, scattersize: %d\n", 	__LINE__, __func__, nbytes, chunk_bytes); \fn static int lq_des_encrypt(struct ablkcipher_request *areq)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Decrypt function for DES algo
 * \param *areq Pointer to ablkcipher request in memory
 * \return 0 is success, -EINPROGRESS if encryting, EINVAL if failure
 \fn static int lq_des_decrypt(struct ablkcipher_request *areq)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Decrypt function for DES algo
 * \param *areq Pointer to ablkcipher request in memory
 * \return 0 is success, -EINPROGRESS if encryting, EINVAL if failure
 \fn static int lq_ecb_des_encrypt(struct ablkcipher_request *areq)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Decrypt function for DES algo
 * \param *areq Pointer to ablkcipher request in memory
 * \return 0 is success, -EINPROGRESS if encryting, EINVAL if failure
 \fn static int lq_ecb_des_decrypt(struct ablkcipher_request *areq)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Decrypt function for DES algo
 * \param *areq Pointer to ablkcipher request in memory
 * \return 0 is success, -EINPROGRESS if encryting, EINVAL if failure
 \fn static int lq_cbc_ecb_des_encrypt(struct ablkcipher_request *areq)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Decrypt function for DES algo
 * \param *areq Pointer to ablkcipher request in memory
 * \return 0 is success, -EINPROGRESS if encryting, EINVAL if failure
 \fn static int lq_cbc_des_decrypt(struct ablkcipher_request *areq)
 * \ingroup IFX_DES_FUNCTIONS
 * \brief Decrypt function for DES algo
 * \param *areq Pointer to ablkcipher request in memory
 * \return 0 is success, -EINPROGRESS if encryting, EINVAL if failure
 DES Supported algo array ! \fn int __init lqdeu_async_des_init (void)
 *  \ingroup IFX_DES_FUNCTIONS
 *  \brief initialize des driver
printk("driver: %s\n", des_drivers_alg[i].alg.cra_name);! \fn void __exit lqdeu_fini_async_des (void)
 *  \ingroup IFX_DES_FUNCTIONS
 *  \brief unregister des driver
