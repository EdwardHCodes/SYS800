
 * An SDL replacement for BUILD's VESA code.
 *
 *  Written by Ryan C. Gordon. (icculus@clutteredmind.org)
 *
 * Please do NOT harrass Ken Silverman about any code modifications
 *  (including this file) to BUILD.
 
 * "Build Engine & Tools" Copyright (c) 1993-1997 Ken Silverman
 * Ken Silverman's official web site: "http://www.advsys.net/ken"
 * See the included license file "BUILDLIC.TXT" for license info.
 * This file IS NOT A PART OF Ken Silverman's original release
  NATIVE TIMER FUNCTION DECLARATION
 FCS: The timer section sadly uses Native high precision calls to implement timer functions.
 QueryPerformanceFrequency and QueryPerformanceCounter
 it seems SDL precision was not good enough (or rather using unaccurate OS functions) to replicate
 a DOS timer.
 END // NATIVE TIMER FUNCTION DECLARATION
 * !!! remove the surface_end checks, for speed's sake. They are a
 * !!!  needed safety right now. --ryan.
  !!! move these elsewhere? The frambuffer address This isn't static so that we can use it elsewhere AH  so we can make use of setcolor16()... - DDOI  if 
        print_tf_state("hardware surface available", info->hw_available);
        print_tf_state("window manager available", info->wm_available);
        print_tf_state("accelerated hardware->hardware blits", info->blit_hw);
        print_tf_state("accelerated hardware->hardware colorkey blits", info->blit_hw_CC);
        print_tf_state("accelerated hardware->hardware alpha blits", info->blit_hw_A);
        print_tf_state("accelerated software->hardware blits", info->blit_sw);
        print_tf_state("accelerated software->hardware colorkey blits", info->blit_sw_CC);
        print_tf_state("accelerated software->hardware alpha blits", info->blit_sw_A);
        print_tf_state("accelerated color fills", info->blit_fill);

        printf("video memory: (%d),\n", info->video_mem);
  if  else  output_driver_info 
 * !!! This is almost an entire copy of the original setgamemode().
 * !!!  Figure out what is needed for just 2D mode, and separate that
 * !!!  out. Then, place the original setgamemode() back into engine.c,
 * !!!  and remove our simple implementation (and this function.)
 * !!!  Just be sure to keep the non-DOS things, like the window's
 * !!!  titlebar caption.   --ryan.
  if  Leave room for horizlookup&horizlookup2 Build lookup table (X screespace -> frambuffer offset. Force drawrooms to call dosetaspect & recalculate stuff Let the Assembly module how many pixels to skip when drawing a column don't do SDL_SetVideoMode if SDL_WM_SetIcon not called. See sdl doc for SDL_WM_SetIcon if  dont be confused between vidoption (global) and davidoption
         * What bits BUILD expects:
         *  0 left button pressed if 1
         *  1 right button pressed if 1
         *  2 middle button pressed if 1
         *
         *   (That is, this is what Int 33h (AX=0x05) returns...)
         *
         *  additionally bits 3&4 are set for the mouse wheel
          sdl_mouse_up_filter printf("sdl_mouse_motion_filter: mrx=%d, mry=%d, mx=%d, my=%d\n",	mouse_relative_x, mouse_relative_y, event->motion.xrel, event->motion.yrel); mouse_relative_* is already reset in readmousexy(). It must not be reset here because calling this function does not mean we always handle the mouse. FIX_00001: Mouse speed is uneven and slower in windowed mode vs fullscreen mode. sdl_mouse_motion_filter 
     * The windib driver can't alert us to the keypad enter key, which
     *  Ken's code depends on heavily. It sends it as the same key as the
     *  regular return key. These users will have to hit SHIFT-ENTER,
     *  which we check for explicitly, and give the engine a keypad enter
     *  enter event.
      if  if  key released  if  if  if  handle_keypad_enter_hack   FIX_00002: New Toggle Windowed/FullScreen system now simpler and will  dynamically change for Windib or Directx driver. Windowed/Fullscreen  toggle also made available from menu.  Replace attempt_fullscreen_toggle(SDL_Surface **surface, Uint32 *flags)vscrn(); FIX_00005: Mouse pointer can be toggled on/off (see mouse menu or use CTRL-M) This is usefull to move the duke window when playing in window mode. if  hack to discard the ALT key... extended Simulating Key up Simulating Key up (not extended) SDL doesnt see we are releasing the ALT-ENTER keys	printf("key.keysym.sym=%d\n", event->key.keysym.sym); No DOS equivalent defined.  if  +128 signifies that the key is released in DOS.  sdl_key_filter  FIX_00003: Pause mode is now fully responsive - (Thx to Jonathon Fowler tips)Do Nothingprintf("Joybutton UP/DOWN\n");return(sdl_joystick_button_filter((const SDL_MouseButtonEvent*)event)); !!! rcg TEMP printf("This event is not handled: %d\n",event->type); switch  root_sdl_event_filter  handle_events  bleh...public version...  _handle_events  if  if  if  for  if  _joystick_init  if  _joystick_deinit  _joystick_update  _joystick_axis  _joystick_axis  _joystick_button  _readlastkeyhit  output_sdl_versions  lousy -ansi flag.  :)  string_dupe  FIX_00061: "ERROR: Two players have the same random ID" too frequent cuz of internet windows times Look through the command line argsfullscreen = 1;TODO:TODO ( "[Todo: handle -netmode <int>]" ) Set up the correct renderer Becarfull setenv can't reach dll in VC++ A way to proceed is to integrate the SDL libs in the exe instead. FIX_00004: SDL.dll and SDL_Mixer.dll are now integrated within the exe (this also makes the Windib/Directx driver switching easier with SDL) This requires to recompile the whole sdl and sdl mixer with the lib switch instead of the default dll switch. was 0x4A  was 0x4E  SBF - technically incorrect  SBF - technically incorrect  SBF - for windows...  Capture BMP of the current frame  FIX_00006: better naming system for screenshots + message when pic is taken.  Use ./screenshots folder. Screenshot code rerwritten. Faster and  makes smaller files. Doesn't freeze or lag the game anymore. screencapture  text mode.  Install icon index in this image to be transparent setgamemode  get_dimensions_from_str  if  if printf("Adding %s resolution (%dx%d).\n", typestr, w, h); add_vesa_mode  Let the user specify a specific mode via environment variable.  rockbox hack  add_user_defined_resolution  try without fullscreen.  fuck it.  if  else  get_physical_resolutions printf("Removing resolution #%d, %dx%d [%s].\n",index, validmodexdim[index], validmodeydim[index], reason); for  remove_vesa_mode  list shrinks.  if  for  cull_large_vesa_modes  list shrinks.  be sure to call cull_duplicate_vesa_modes() before calling this.  if  for  sort_vesa_modelist  cleanup_vesa_modelist  for  !!! tmp  fill in the standard resolutions...  Anything the hardware can specifically do is added now...  Now add specific resolutions that the user wants...  get rid of dupes and bogus resolutions...  print it out for debugging purposes... 
 * (From Ken's docs:)
 *   Set (num) palette palette entries starting at (start)
 *   palette entries are in a 4-byte format in this order:
 *       0: Blue (0-63)
 *       1: Green (0-63)
 *       2: Red (0-63)
 *       3: Reserved
 *
 * Naturally, the bytes are in the reverse order that SDL wants them...
 *  More importantly, SDL wants the color elements in a range from 0-255,
 *  so we do a conversion.
 static updated=0;if (updated >=1 )    return ;WritePaletteToFile(palettebuffer,"lastPalette.tga",16,16);updated++;CODE EXPLORATIONUsed only to write the last palette to file. doesn't map perfectly  This byte is unused in BUILD, too.  This byte is unused in both SDL and BUILD.  _uninitengine 
         * this global usually gets set by BUILD, but it's a one-shot
         *  deal, and we may not have an SDL surface at that point. --ryan.
          FIX_00063: Duke's angle changing or incorrect when using toggle fullscreen/window mode Empying the various pending events (especially the mouse one)SDL_EventState(SDL_MOUSEMOTION, SDL_IGNORE); setupmouse  readmousexy  special wheel treatment: make it like a button click readmousebstatus int counter= 0 ;char bmpName[256];sprintf(bmpName,"%d.bmp",counter++);SDL_SaveBMP(surface,bmpName);if (CLEAR_FRAMEBUFFER)    SDL_FillRect(surface,NULL,0); Fix this up The Right Way (TM) - DDOI  drawpixel16  Make this function pageoffset aware - DDOI  fillscreen16  Most of this line code is taken from Abrash's "Graphics Programming Blackbook".
Remember, sharing code is A Good Thing. AH Analyse the slope Make sure the status bar border draws correctly - DDOI  We'll always draw top to bottom  Point to the bitmap address first pixel to draw  Figure out whether we're going left or right, and how far we're going horizontally  Figure out how far we're going vertically  Special cases: Horizontal, vertical, and diagonal lines  Determine whether the line is X or Y major, and handle accordingly  X major line  Y major line  drawline16  else if  clear2dscreen  _idle -------------------------------------------------------------------------------------------------  TIMER================================================================================================= FIX_00007: game speed corrected. The game speed is now as the real DOS duke3d. Unloading a full 200 bullet pistol must take 45.1 sec. SDL timer was not fast/accurate enough and was slowing down the gameplay, so bad  This timer stuff is all Ken's idea. installusertimercallback() -- set up a callback function to be called when the timer is fired
 inittimer() -- initialise timer
 FCS: The tickspersecond parameter is a ratio value that helps replicating
      oldschool DOS tick per seconds.

      The way the timer work is:
      float newSystemTickPerSecond = [0,1]
      tickPerSecond on a DOS system = tickspersecond * newSystemTickPerSecond ;
 already installedprintf("Initialising timer, with tickPerSecond=%d\n",tickspersecond); OpenWatcom seems to want us to query the value into a local variable instead of the global 'timerfreq' or else it gets pissed with an access violation uninittimer() -- shut down timer sampletimer() -- update totalclock
   getticks() -- returns the windows ticks count
   FCS: This seeems to be only used in the multiplayer code
 gettimerfreq() -- returns the number of ticks per second the timer is configured to generate does nothing in SDL. Key input handling is set up elsewhere.  !!! why not here?  does nothing in SDL. Key input handling is set up elsewhere.  end of sdl_driver.c ... 
 * An SDL replacement for BUILD's VESA code.
 *
 *  Written by Ryan C. Gordon. (icculus@clutteredmind.org)
 *
 * Please do NOT harrass Ken Silverman about any code modifications
 *  (including this file) to BUILD.
 
 * "Build Engine & Tools" Copyright (c) 1993-1997 Ken Silverman
 * Ken Silverman's official web site: "http://www.advsys.net/ken"
 * See the included license file "BUILDLIC.TXT" for license info.
 * This file IS NOT A PART OF Ken Silverman's original release
  NATIVE TIMER FUNCTION DECLARATION
 FCS: The timer section sadly uses Native high precision calls to implement timer functions.
 QueryPerformanceFrequency and QueryPerformanceCounter
 it seems SDL precision was not good enough (or rather using unaccurate OS functions) to replicate
 a DOS timer.
 END // NATIVE TIMER FUNCTION DECLARATION
 * !!! remove the surface_end checks, for speed's sake. They are a
 * !!!  needed safety right now. --ryan.
  !!! move these elsewhere? The frambuffer address This isn't static so that we can use it elsewhere AH  so we can make use of setcolor16()... - DDOI  if 
        print_tf_state("hardware surface available", info->hw_available);
        print_tf_state("window manager available", info->wm_available);
        print_tf_state("accelerated hardware->hardware blits", info->blit_hw);
        print_tf_state("accelerated hardware->hardware colorkey blits", info->blit_hw_CC);
        print_tf_state("accelerated hardware->hardware alpha blits", info->blit_hw_A);
        print_tf_state("accelerated software->hardware blits", info->blit_sw);
        print_tf_state("accelerated software->hardware colorkey blits", info->blit_sw_CC);
        print_tf_state("accelerated software->hardware alpha blits", info->blit_sw_A);
        print_tf_state("accelerated color fills", info->blit_fill);

        printf("video memory: (%d),\n", info->video_mem);
  if  else  output_driver_info 
 * !!! This is almost an entire copy of the original setgamemode().
 * !!!  Figure out what is needed for just 2D mode, and separate that
 * !!!  out. Then, place the original setgamemode() back into engine.c,
 * !!!  and remove our simple implementation (and this function.)
 * !!!  Just be sure to keep the non-DOS things, like the window's
 * !!!  titlebar caption.   --ryan.
  if  Leave room for horizlookup&horizlookup2 Build lookup table (X screespace -> frambuffer offset. Force drawrooms to call dosetaspect & recalculate stuff Let the Assembly module how many pixels to skip when drawing a column don't do SDL_SetVideoMode if SDL_WM_SetIcon not called. See sdl doc for SDL_WM_SetIcon if  dont be confused between vidoption (global) and davidoption
         * What bits BUILD expects:
         *  0 left button pressed if 1
         *  1 right button pressed if 1
         *  2 middle button pressed if 1
         *
         *   (That is, this is what Int 33h (AX=0x05) returns...)
         *
         *  additionally bits 3&4 are set for the mouse wheel
          sdl_mouse_up_filter printf("sdl_mouse_motion_filter: mrx=%d, mry=%d, mx=%d, my=%d\n",	mouse_relative_x, mouse_relative_y, event->motion.xrel, event->motion.yrel); mouse_relative_* is already reset in readmousexy(). It must not be reset here because calling this function does not mean we always handle the mouse. FIX_00001: Mouse speed is uneven and slower in windowed mode vs fullscreen mode. sdl_mouse_motion_filter 
     * The windib driver can't alert us to the keypad enter key, which
     *  Ken's code depends on heavily. It sends it as the same key as the
     *  regular return key. These users will have to hit SHIFT-ENTER,
     *  which we check for explicitly, and give the engine a keypad enter
     *  enter event.
      if  if  key released  if  if  if  handle_keypad_enter_hack   FIX_00002: New Toggle Windowed/FullScreen system now simpler and will  dynamically change for Windib or Directx driver. Windowed/Fullscreen  toggle also made available from menu.  Replace attempt_fullscreen_toggle(SDL_Surface **surface, Uint32 *flags)vscrn(); FIX_00005: Mouse pointer can be toggled on/off (see mouse menu or use CTRL-M) This is usefull to move the duke window when playing in window mode. if  hack to discard the ALT key... extended Simulating Key up Simulating Key up (not extended) SDL doesnt see we are releasing the ALT-ENTER keys	printf("key.keysym.sym=%d\n", event->key.keysym.sym); No DOS equivalent defined.  if  +128 signifies that the key is released in DOS.  sdl_key_filter  FIX_00003: Pause mode is now fully responsive - (Thx to Jonathon Fowler tips)Do Nothingprintf("Joybutton UP/DOWN\n");return(sdl_joystick_button_filter((const SDL_MouseButtonEvent*)event)); !!! rcg TEMP printf("This event is not handled: %d\n",event->type); switch  root_sdl_event_filter  handle_events  bleh...public version...  _handle_events  if  if  if  for  if  _joystick_init  if  _joystick_deinit  _joystick_update  _joystick_axis  _joystick_axis  _joystick_button  _readlastkeyhit  output_sdl_versions  lousy -ansi flag.  :)  string_dupe  FIX_00061: "ERROR: Two players have the same random ID" too frequent cuz of internet windows times Look through the command line argsfullscreen = 1;TODO:TODO ( "[Todo: handle -netmode <int>]" ) Set up the correct renderer Becarfull setenv can't reach dll in VC++ A way to proceed is to integrate the SDL libs in the exe instead. FIX_00004: SDL.dll and SDL_Mixer.dll are now integrated within the exe (this also makes the Windib/Directx driver switching easier with SDL) This requires to recompile the whole sdl and sdl mixer with the lib switch instead of the default dll switch. was 0x4A  was 0x4E  SBF - technically incorrect  SBF - technically incorrect  SBF - for windows...  Capture BMP of the current frame  FIX_00006: better naming system for screenshots + message when pic is taken.  Use ./screenshots folder. Screenshot code rerwritten. Faster and  makes smaller files. Doesn't freeze or lag the game anymore. screencapture  text mode.  Install icon index in this image to be transparent setgamemode  get_dimensions_from_str  if  if printf("Adding %s resolution (%dx%d).\n", typestr, w, h); add_vesa_mode  Let the user specify a specific mode via environment variable.  rockbox hack  add_user_defined_resolution  try without fullscreen.  fuck it.  if  else  get_physical_resolutions printf("Removing resolution #%d, %dx%d [%s].\n",index, validmodexdim[index], validmodeydim[index], reason); for  remove_vesa_mode  list shrinks.  if  for  cull_large_vesa_modes  list shrinks.  be sure to call cull_duplicate_vesa_modes() before calling this.  if  for  sort_vesa_modelist  cleanup_vesa_modelist  for  !!! tmp  fill in the standard resolutions...  Anything the hardware can specifically do is added now...  Now add specific resolutions that the user wants...  get rid of dupes and bogus resolutions...  print it out for debugging purposes... 
 * (From Ken's docs:)
 *   Set (num) palette palette entries starting at (start)
 *   palette entries are in a 4-byte format in this order:
 *       0: Blue (0-63)
 *       1: Green (0-63)
 *       2: Red (0-63)
 *       3: Reserved
 *
 * Naturally, the bytes are in the reverse order that SDL wants them...
 *  More importantly, SDL wants the color elements in a range from 0-255,
 *  so we do a conversion.
 static updated=0;if (updated >=1 )    return ;WritePaletteToFile(palettebuffer,"lastPalette.tga",16,16);updated++;CODE EXPLORATIONUsed only to write the last palette to file. doesn't map perfectly  This byte is unused in BUILD, too.  This byte is unused in both SDL and BUILD.  _uninitengine 
         * this global usually gets set by BUILD, but it's a one-shot
         *  deal, and we may not have an SDL surface at that point. --ryan.
          FIX_00063: Duke's angle changing or incorrect when using toggle fullscreen/window mode Empying the various pending events (especially the mouse one)SDL_EventState(SDL_MOUSEMOTION, SDL_IGNORE); setupmouse  readmousexy  special wheel treatment: make it like a button click readmousebstatus int counter= 0 ;char bmpName[256];sprintf(bmpName,"%d.bmp",counter++);SDL_SaveBMP(surface,bmpName);if (CLEAR_FRAMEBUFFER)    SDL_FillRect(surface,NULL,0); Fix this up The Right Way (TM) - DDOI  drawpixel16  Make this function pageoffset aware - DDOI  fillscreen16  Most of this line code is taken from Abrash's "Graphics Programming Blackbook".
Remember, sharing code is A Good Thing. AH Analyse the slope Make sure the status bar border draws correctly - DDOI  We'll always draw top to bottom  Point to the bitmap address first pixel to draw  Figure out whether we're going left or right, and how far we're going horizontally  Figure out how far we're going vertically  Special cases: Horizontal, vertical, and diagonal lines  Determine whether the line is X or Y major, and handle accordingly  X major line  Y major line  drawline16  else if  clear2dscreen  _idle -------------------------------------------------------------------------------------------------  TIMER================================================================================================= FIX_00007: game speed corrected. The game speed is now as the real DOS duke3d. Unloading a full 200 bullet pistol must take 45.1 sec. SDL timer was not fast/accurate enough and was slowing down the gameplay, so bad  This timer stuff is all Ken's idea. installusertimercallback() -- set up a callback function to be called when the timer is fired
 inittimer() -- initialise timer
 FCS: The tickspersecond parameter is a ratio value that helps replicating
      oldschool DOS tick per seconds.

      The way the timer work is:
      float newSystemTickPerSecond = [0,1]
      tickPerSecond on a DOS system = tickspersecond * newSystemTickPerSecond ;
 already installedprintf("Initialising timer, with tickPerSecond=%d\n",tickspersecond); OpenWatcom seems to want us to query the value into a local variable instead of the global 'timerfreq' or else it gets pissed with an access violation uninittimer() -- shut down timer sampletimer() -- update totalclock
   getticks() -- returns the windows ticks count
   FCS: This seeems to be only used in the multiplayer code
 gettimerfreq() -- returns the number of ticks per second the timer is configured to generate does nothing in SDL. Key input handling is set up elsewhere.  !!! why not here?  does nothing in SDL. Key input handling is set up elsewhere.  end of sdl_driver.c ... 
 * An SDL replacement for BUILD's VESA code.
 *
 *  Written by Ryan C. Gordon. (icculus@clutteredmind.org)
 *
 * Please do NOT harrass Ken Silverman about any code modifications
 *  (including this file) to BUILD.
 
 * "Build Engine & Tools" Copyright (c) 1993-1997 Ken Silverman
 * Ken Silverman's official web site: "http://www.advsys.net/ken"
 * See the included license file "BUILDLIC.TXT" for license info.
 * This file IS NOT A PART OF Ken Silverman's original release
  NATIVE TIMER FUNCTION DECLARATION
 FCS: The timer section sadly uses Native high precision calls to implement timer functions.
 QueryPerformanceFrequency and QueryPerformanceCounter
 it seems SDL precision was not good enough (or rather using unaccurate OS functions) to replicate
 a DOS timer.
 END // NATIVE TIMER FUNCTION DECLARATION
 * !!! remove the surface_end checks, for speed's sake. They are a
 * !!!  needed safety right now. --ryan.
  !!! move these elsewhere? The frambuffer address This isn't static so that we can use it elsewhere AH  so we can make use of setcolor16()... - DDOI  if 
        print_tf_state("hardware surface available", info->hw_available);
        print_tf_state("window manager available", info->wm_available);
        print_tf_state("accelerated hardware->hardware blits", info->blit_hw);
        print_tf_state("accelerated hardware->hardware colorkey blits", info->blit_hw_CC);
        print_tf_state("accelerated hardware->hardware alpha blits", info->blit_hw_A);
        print_tf_state("accelerated software->hardware blits", info->blit_sw);
        print_tf_state("accelerated software->hardware colorkey blits", info->blit_sw_CC);
        print_tf_state("accelerated software->hardware alpha blits", info->blit_sw_A);
        print_tf_state("accelerated color fills", info->blit_fill);

        printf("video memory: (%d),\n", info->video_mem);
  if  else  output_driver_info 
 * !!! This is almost an entire copy of the original setgamemode().
 * !!!  Figure out what is needed for just 2D mode, and separate that
 * !!!  out. Then, place the original setgamemode() back into engine.c,
 * !!!  and remove our simple implementation (and this function.)
 * !!!  Just be sure to keep the non-DOS things, like the window's
 * !!!  titlebar caption.   --ryan.
  if  Leave room for horizlookup&horizlookup2 Build lookup table (X screespace -> frambuffer offset. Force drawrooms to call dosetaspect & recalculate stuff Let the Assembly module how many pixels to skip when drawing a column don't do SDL_SetVideoMode if SDL_WM_SetIcon not called. See sdl doc for SDL_WM_SetIcon if  dont be confused between vidoption (global) and davidoption
         * What bits BUILD expects:
         *  0 left button pressed if 1
         *  1 right button pressed if 1
         *  2 middle button pressed if 1
         *
         *   (That is, this is what Int 33h (AX=0x05) returns...)
         *
         *  additionally bits 3&4 are set for the mouse wheel
          sdl_mouse_up_filter printf("sdl_mouse_motion_filter: mrx=%d, mry=%d, mx=%d, my=%d\n",	mouse_relative_x, mouse_relative_y, event->motion.xrel, event->motion.yrel); mouse_relative_* is already reset in readmousexy(). It must not be reset here because calling this function does not mean we always handle the mouse. FIX_00001: Mouse speed is uneven and slower in windowed mode vs fullscreen mode. sdl_mouse_motion_filter 
     * The windib driver can't alert us to the keypad enter key, which
     *  Ken's code depends on heavily. It sends it as the same key as the
     *  regular return key. These users will have to hit SHIFT-ENTER,
     *  which we check for explicitly, and give the engine a keypad enter
     *  enter event.
      if  if  key released  if  if  if  handle_keypad_enter_hack   FIX_00002: New Toggle Windowed/FullScreen system now simpler and will  dynamically change for Windib or Directx driver. Windowed/Fullscreen  toggle also made available from menu.  Replace attempt_fullscreen_toggle(SDL_Surface **surface, Uint32 *flags)vscrn(); FIX_00005: Mouse pointer can be toggled on/off (see mouse menu or use CTRL-M) This is usefull to move the duke window when playing in window mode. if  hack to discard the ALT key... extended Simulating Key up Simulating Key up (not extended) SDL doesnt see we are releasing the ALT-ENTER keys	printf("key.keysym.sym=%d\n", event->key.keysym.sym); No DOS equivalent defined.  if  +128 signifies that the key is released in DOS.  sdl_key_filter  FIX_00003: Pause mode is now fully responsive - (Thx to Jonathon Fowler tips)Do Nothingprintf("Joybutton UP/DOWN\n");return(sdl_joystick_button_filter((const SDL_MouseButtonEvent*)event)); !!! rcg TEMP printf("This event is not handled: %d\n",event->type); switch  root_sdl_event_filter  handle_events  bleh...public version...  _handle_events  if  if  if  for  if  _joystick_init  if  _joystick_deinit  _joystick_update  _joystick_axis  _joystick_axis  _joystick_button  _readlastkeyhit  output_sdl_versions  lousy -ansi flag.  :)  string_dupe  FIX_00061: "ERROR: Two players have the same random ID" too frequent cuz of internet windows times Look through the command line argsfullscreen = 1;TODO:TODO ( "[Todo: handle -netmode <int>]" ) Set up the correct renderer Becarfull setenv can't reach dll in VC++ A way to proceed is to integrate the SDL libs in the exe instead. FIX_00004: SDL.dll and SDL_Mixer.dll are now integrated within the exe (this also makes the Windib/Directx driver switching easier with SDL) This requires to recompile the whole sdl and sdl mixer with the lib switch instead of the default dll switch. was 0x4A  was 0x4E  SBF - technically incorrect  SBF - technically incorrect  SBF - for windows...  Capture BMP of the current frame  FIX_00006: better naming system for screenshots + message when pic is taken.  Use ./screenshots folder. Screenshot code rerwritten. Faster and  makes smaller files. Doesn't freeze or lag the game anymore. screencapture  text mode.  Install icon index in this image to be transparent setgamemode  get_dimensions_from_str  if  if printf("Adding %s resolution (%dx%d).\n", typestr, w, h); add_vesa_mode  Let the user specify a specific mode via environment variable.  rockbox hack  add_user_defined_resolution  try without fullscreen.  fuck it.  if  else  get_physical_resolutions printf("Removing resolution #%d, %dx%d [%s].\n",index, validmodexdim[index], validmodeydim[index], reason); for  remove_vesa_mode  list shrinks.  if  for  cull_large_vesa_modes  list shrinks.  be sure to call cull_duplicate_vesa_modes() before calling this.  if  for  sort_vesa_modelist  cleanup_vesa_modelist  for  !!! tmp  fill in the standard resolutions...  Anything the hardware can specifically do is added now...  Now add specific resolutions that the user wants...  get rid of dupes and bogus resolutions...  print it out for debugging purposes... 
 * (From Ken's docs:)
 *   Set (num) palette palette entries starting at (start)
 *   palette entries are in a 4-byte format in this order:
 *       0: Blue (0-63)
 *       1: Green (0-63)
 *       2: Red (0-63)
 *       3: Reserved
 *
 * Naturally, the bytes are in the reverse order that SDL wants them...
 *  More importantly, SDL wants the color elements in a range from 0-255,
 *  so we do a conversion.
 static updated=0;if (updated >=1 )    return ;WritePaletteToFile(palettebuffer,"lastPalette.tga",16,16);updated++;CODE EXPLORATIONUsed only to write the last palette to file. doesn't map perfectly  This byte is unused in BUILD, too.  This byte is unused in both SDL and BUILD.  _uninitengine 
         * this global usually gets set by BUILD, but it's a one-shot
         *  deal, and we may not have an SDL surface at that point. --ryan.
          FIX_00063: Duke's angle changing or incorrect when using toggle fullscreen/window mode Empying the various pending events (especially the mouse one)SDL_EventState(SDL_MOUSEMOTION, SDL_IGNORE); setupmouse  readmousexy  special wheel treatment: make it like a button click readmousebstatus int counter= 0 ;char bmpName[256];sprintf(bmpName,"%d.bmp",counter++);SDL_SaveBMP(surface,bmpName);if (CLEAR_FRAMEBUFFER)    SDL_FillRect(surface,NULL,0); Fix this up The Right Way (TM) - DDOI  drawpixel16  Make this function pageoffset aware - DDOI  fillscreen16  Most of this line code is taken from Abrash's "Graphics Programming Blackbook".
Remember, sharing code is A Good Thing. AH Analyse the slope Make sure the status bar border draws correctly - DDOI  We'll always draw top to bottom  Point to the bitmap address first pixel to draw  Figure out whether we're going left or right, and how far we're going horizontally  Figure out how far we're going vertically  Special cases: Horizontal, vertical, and diagonal lines  Determine whether the line is X or Y major, and handle accordingly  X major line  Y major line  drawline16  else if  clear2dscreen  _idle -------------------------------------------------------------------------------------------------  TIMER================================================================================================= FIX_00007: game speed corrected. The game speed is now as the real DOS duke3d. Unloading a full 200 bullet pistol must take 45.1 sec. SDL timer was not fast/accurate enough and was slowing down the gameplay, so bad  This timer stuff is all Ken's idea. installusertimercallback() -- set up a callback function to be called when the timer is fired
 inittimer() -- initialise timer
 FCS: The tickspersecond parameter is a ratio value that helps replicating
      oldschool DOS tick per seconds.

      The way the timer work is:
      float newSystemTickPerSecond = [0,1]
      tickPerSecond on a DOS system = tickspersecond * newSystemTickPerSecond ;
 already installedprintf("Initialising timer, with tickPerSecond=%d\n",tickspersecond); OpenWatcom seems to want us to query the value into a local variable instead of the global 'timerfreq' or else it gets pissed with an access violation uninittimer() -- shut down timer sampletimer() -- update totalclock
   getticks() -- returns the windows ticks count
   FCS: This seeems to be only used in the multiplayer code
 gettimerfreq() -- returns the number of ticks per second the timer is configured to generate does nothing in SDL. Key input handling is set up elsewhere.  !!! why not here?  does nothing in SDL. Key input handling is set up elsewhere.  end of sdl_driver.c ... 