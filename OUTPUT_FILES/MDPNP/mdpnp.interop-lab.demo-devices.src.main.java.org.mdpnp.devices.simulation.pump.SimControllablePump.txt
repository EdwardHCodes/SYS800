*
 * A simulated pump for which the speed can be controlled.  Designed to be
 * used as part of the closed loop control demo application, so that that app
 * can be run without needing a real controllable pump attached.  But of course,
 * can be used for any other purpose.
 * 
 * Initial speed is 1.0, and can be controlled via an objective.  Publishes
 * numeric samples with the same metric ID as a physical pump that we are
 * using.
 * 
 * We use the scheduler to publish the metrics - using an initial delay of 5 seconds,
 * which roughly corresponds to the connection time to the physical pump that we are
 * basing the emulation from.
 *
		 * Following block of code is for receiving objectives for the flow rate
		 *
	 * Later on, we should introduce a way of controlling throwing IOException,
	 * so we can test the way a calling application handles that.
	 * @param newSpeed
	 * @throws IOException
	  TODO Auto-generated catch blockTake 5 secondsCompletely fake com port property that is useful for distinguishing instancesWe have access to "executor" - a scheduled executor service	  TODO Auto-generated method stub TODO Auto-generated method stub TODO Auto-generated method stubSystem.out.println("MSeriesScaleClock returning "+i.toString());*
 * A simulated pump for which the speed can be controlled.  Designed to be
 * used as part of the closed loop control demo application, so that that app
 * can be run without needing a real controllable pump attached.  But of course,
 * can be used for any other purpose.
 * 
 * Initial speed is 1.0, and can be controlled via an objective.  Publishes
 * numeric samples with the same metric ID as a physical pump that we are
 * using.
 * 
 * We use the scheduler to publish the metrics - using an initial delay of 5 seconds,
 * which roughly corresponds to the connection time to the physical pump that we are
 * basing the emulation from.
 *
		 * Following block of code is for receiving objectives for the flow rate
		 *
	 * Later on, we should introduce a way of controlling throwing IOException,
	 * so we can test the way a calling application handles that.
	 * @param newSpeed
	 * @throws IOException
	  TODO Auto-generated catch blockTake 5 secondsCompletely fake com port property that is useful for distinguishing instancesWe have access to "executor" - a scheduled executor service	  TODO Auto-generated method stub TODO Auto-generated method stub TODO Auto-generated method stubSystem.out.println("MSeriesScaleClock returning "+i.toString());*
 * A simulated pump for which the speed can be controlled.  Designed to be
 * used as part of the closed loop control demo application, so that that app
 * can be run without needing a real controllable pump attached.  But of course,
 * can be used for any other purpose.
 * 
 * Initial speed is 1.0, and can be controlled via an objective.  Publishes
 * numeric samples with the same metric ID as a physical pump that we are
 * using.
 * 
 * We use the scheduler to publish the metrics - using an initial delay of 5 seconds,
 * which roughly corresponds to the connection time to the physical pump that we are
 * basing the emulation from.
 *
		 * Following block of code is for receiving objectives for the flow rate
		 *
	 * Later on, we should introduce a way of controlling throwing IOException,
	 * so we can test the way a calling application handles that.
	 * @param newSpeed
	 * @throws IOException
	  TODO Auto-generated catch blockTake 5 secondsCompletely fake com port property that is useful for distinguishing instancesWe have access to "executor" - a scheduled executor service	  TODO Auto-generated method stub TODO Auto-generated method stub TODO Auto-generated method stubSystem.out.println("MSeriesScaleClock returning "+i.toString());*
 * A simulated pump for which the speed can be controlled.  Designed to be
 * used as part of the closed loop control demo application, so that that app
 * can be run without needing a real controllable pump attached.  But of course,
 * can be used for any other purpose.
 * 
 * Initial speed is 1.0, and can be controlled via an objective.  Publishes
 * numeric samples with the same metric ID as a physical pump that we are
 * using.
 * 
 * We use the scheduler to publish the metrics - using an initial delay of 5 seconds,
 * which roughly corresponds to the connection time to the physical pump that we are
 * basing the emulation from.
 *
		 * Following block of code is for receiving objectives for the flow rate
		 *
	 * Later on, we should introduce a way of controlling throwing IOException,
	 * so we can test the way a calling application handles that.
	 * @param newSpeed
	 * @throws IOException
	  TODO Auto-generated catch blockTake 5 secondsCompletely fake com port property that is useful for distinguishing instancesWe have access to "executor" - a scheduled executor service	  TODO Auto-generated method stub TODO Auto-generated method stub TODO Auto-generated method stubSystem.out.println("MSeriesScaleClock returning "+i.toString());