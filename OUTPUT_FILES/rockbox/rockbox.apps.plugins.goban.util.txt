**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007-2009 Joshua Simmons <mud at majidejima dot com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** waiting for user input messes up the testing code, so ifdef it IMPORTANT: keep in sync with the enum prop_type_t enum in types.h  look up the SGF specification for the meaning of these  These seems to be specified by the SGF specification.  You can do free
   form ones as well, but I haven't implemented that (and don't plan to)  TEST CODE BEGINS HERE define GBN_TEST to run this, either in goban.h or
   in the CFLAGS. The tests will be run when the plugin starts, after
   which the plugin will exit. Any error stops testing since many tests
   depend on previous setup. Note: The testing can take a while as there
   are some big loops.  Be patient.  If this isn't on a single line, the line numbers it reports will be wrong.
 *
 * I'm sure there's a way to make it better, but it's not really worth it.
  allocating and freeing storage units  make sure it fails a few times  setting up, saving and loading  test of a long game, captures, illegal moves  test of basic moves, legal moves, adding and removing stones  test captures  test ko 
     * Set up the board to look like this:
     * -X------
     * XO------
     * O-------
     * --------
      take the ko and make sure black can't take back  make sure white can fill, even with the ko_pos set  and make sure undo sets the ko again  make sure ko threats clear the ko  ko threat  response  take ko  make sure a pass is counted as a ko threat  and finally let's make sure that white can't directly retake  test some header information saving/loading as well as comment
       saving loading  that bit near the end is literally this: \\\] which tests escaping
       of ]s  this also tests that ko_pos is reset by setuping up a new game  test saving and loading a file with unhandled SGF properties. this
       test requires that the user diff unhnd.sgf with unhnd_out.sgf (any
       substantial difference is a bug and should be reported) the
       following are NOT substantial differences: - reordering of
       properties in a node - whitespace changes outside of a comment
       value or other property value - reordering of property values  Test variations a bit  start at a move, otherwise add_stone won't create a variation  make sure it doesn't  GBN_TEST **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007-2009 Joshua Simmons <mud at majidejima dot com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** waiting for user input messes up the testing code, so ifdef it IMPORTANT: keep in sync with the enum prop_type_t enum in types.h  look up the SGF specification for the meaning of these  These seems to be specified by the SGF specification.  You can do free
   form ones as well, but I haven't implemented that (and don't plan to)  TEST CODE BEGINS HERE define GBN_TEST to run this, either in goban.h or
   in the CFLAGS. The tests will be run when the plugin starts, after
   which the plugin will exit. Any error stops testing since many tests
   depend on previous setup. Note: The testing can take a while as there
   are some big loops.  Be patient.  If this isn't on a single line, the line numbers it reports will be wrong.
 *
 * I'm sure there's a way to make it better, but it's not really worth it.
  allocating and freeing storage units  make sure it fails a few times  setting up, saving and loading  test of a long game, captures, illegal moves  test of basic moves, legal moves, adding and removing stones  test captures  test ko 
     * Set up the board to look like this:
     * -X------
     * XO------
     * O-------
     * --------
      take the ko and make sure black can't take back  make sure white can fill, even with the ko_pos set  and make sure undo sets the ko again  make sure ko threats clear the ko  ko threat  response  take ko  make sure a pass is counted as a ko threat  and finally let's make sure that white can't directly retake  test some header information saving/loading as well as comment
       saving loading  that bit near the end is literally this: \\\] which tests escaping
       of ]s  this also tests that ko_pos is reset by setuping up a new game  test saving and loading a file with unhandled SGF properties. this
       test requires that the user diff unhnd.sgf with unhnd_out.sgf (any
       substantial difference is a bug and should be reported) the
       following are NOT substantial differences: - reordering of
       properties in a node - whitespace changes outside of a comment
       value or other property value - reordering of property values  Test variations a bit  start at a move, otherwise add_stone won't create a variation  make sure it doesn't  GBN_TEST **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007-2009 Joshua Simmons <mud at majidejima dot com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** waiting for user input messes up the testing code, so ifdef it IMPORTANT: keep in sync with the enum prop_type_t enum in types.h  look up the SGF specification for the meaning of these  These seems to be specified by the SGF specification.  You can do free
   form ones as well, but I haven't implemented that (and don't plan to)  TEST CODE BEGINS HERE define GBN_TEST to run this, either in goban.h or
   in the CFLAGS. The tests will be run when the plugin starts, after
   which the plugin will exit. Any error stops testing since many tests
   depend on previous setup. Note: The testing can take a while as there
   are some big loops.  Be patient.  If this isn't on a single line, the line numbers it reports will be wrong.
 *
 * I'm sure there's a way to make it better, but it's not really worth it.
  allocating and freeing storage units  make sure it fails a few times  setting up, saving and loading  test of a long game, captures, illegal moves  test of basic moves, legal moves, adding and removing stones  test captures  test ko 
     * Set up the board to look like this:
     * -X------
     * XO------
     * O-------
     * --------
      take the ko and make sure black can't take back  make sure white can fill, even with the ko_pos set  and make sure undo sets the ko again  make sure ko threats clear the ko  ko threat  response  take ko  make sure a pass is counted as a ko threat  and finally let's make sure that white can't directly retake  test some header information saving/loading as well as comment
       saving loading  that bit near the end is literally this: \\\] which tests escaping
       of ]s  this also tests that ko_pos is reset by setuping up a new game  test saving and loading a file with unhandled SGF properties. this
       test requires that the user diff unhnd.sgf with unhnd_out.sgf (any
       substantial difference is a bug and should be reported) the
       following are NOT substantial differences: - reordering of
       properties in a node - whitespace changes outside of a comment
       value or other property value - reordering of property values  Test variations a bit  start at a move, otherwise add_stone won't create a variation  make sure it doesn't  GBN_TEST 