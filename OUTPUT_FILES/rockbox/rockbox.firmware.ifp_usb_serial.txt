**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Tomasz Malesinski
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
#define LCD_DEBUG
#define BUTTONS
 #include "config.h"  length  descriptor type  USB version (1.1)  class and subclass  protocol  max packet size 0  vendor (iRiver)  product (0xee07)  device version  manufacturer string  product string  serial number string  number of configurations  length  descriptor type  total length  number of interfaces  configuration value  configuration string  attributes (none)  max power (100 mA)  interface descriptor  length  descriptor type  interface number  alternate setting  number of endpoints  interface class  interface subclass  interface protocol  interface string  endpoint IN  length  descriptor type  endpoint 1 IN  attributes (bulk)  max packet size  interval  endpoint OUT  length  descriptor type  endpoint 1 IN  attributes (bulk)  max packet size  interval  length  descriptor type  English (US)  |= is in the original firmware  clear buffer  SOFTCT off  SOFTCT on  SOFTCT off  CLKAON | GLINTENA  SOFTCT on 
    if (endpoints[n].out_ptr == endpoints[n].out_len
        && len < max_pkt_size)
 set interface feature  clear interface feature  set descriptor  synch frame 
    snprintf(s, 10, "l%02x", len);
    lcd_puts(0, 5, s);

    char s[10];
    snprintf(s, sizeof(s), "%02d", i);
    lcd_puts(0, 2, s);
    lcd_update();

        snprintf(s, sizeof(s), "i%08lx", ISP1582_INT);
        lcd_puts(0, 2, s);
        
    lcd_puts(0, 3, usb_connected() ? "C" : "N");
    lcd_update();

  Not used:
static void fifo_add(struct serial_fifo *fifo, int n)
{
    fifo->head = fifo_mod(fifo->head + n);
}

static void fifo_free_block(struct serial_fifo *fifo,
                           unsigned char **ptr, int *len)
{
    *ptr = fifo->buf + fifo->head;
    if (fifo->head >= fifo->tail)
    {
        int l = SERIAL_BUF_SIZE - fifo->head;
        if (fifo->tail == 0)
            l--;
        *len = l;
    }
    else
        *len = fifo->tail - fifo->head - 1;
}

  Not used:
static int usb_serial_in_empty(void)
{
    return fifo_empty(&serial_in_fifo);
}

  Not used:
static int usb_serial_out_full(void)
{
    return fifo_full(&serial_out_fifo);
}
**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Tomasz Malesinski
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
#define LCD_DEBUG
#define BUTTONS
 #include "config.h"  length  descriptor type  USB version (1.1)  class and subclass  protocol  max packet size 0  vendor (iRiver)  product (0xee07)  device version  manufacturer string  product string  serial number string  number of configurations  length  descriptor type  total length  number of interfaces  configuration value  configuration string  attributes (none)  max power (100 mA)  interface descriptor  length  descriptor type  interface number  alternate setting  number of endpoints  interface class  interface subclass  interface protocol  interface string  endpoint IN  length  descriptor type  endpoint 1 IN  attributes (bulk)  max packet size  interval  endpoint OUT  length  descriptor type  endpoint 1 IN  attributes (bulk)  max packet size  interval  length  descriptor type  English (US)  |= is in the original firmware  clear buffer  SOFTCT off  SOFTCT on  SOFTCT off  CLKAON | GLINTENA  SOFTCT on 
    if (endpoints[n].out_ptr == endpoints[n].out_len
        && len < max_pkt_size)
 set interface feature  clear interface feature  set descriptor  synch frame 
    snprintf(s, 10, "l%02x", len);
    lcd_puts(0, 5, s);

    char s[10];
    snprintf(s, sizeof(s), "%02d", i);
    lcd_puts(0, 2, s);
    lcd_update();

        snprintf(s, sizeof(s), "i%08lx", ISP1582_INT);
        lcd_puts(0, 2, s);
        
    lcd_puts(0, 3, usb_connected() ? "C" : "N");
    lcd_update();

  Not used:
static void fifo_add(struct serial_fifo *fifo, int n)
{
    fifo->head = fifo_mod(fifo->head + n);
}

static void fifo_free_block(struct serial_fifo *fifo,
                           unsigned char **ptr, int *len)
{
    *ptr = fifo->buf + fifo->head;
    if (fifo->head >= fifo->tail)
    {
        int l = SERIAL_BUF_SIZE - fifo->head;
        if (fifo->tail == 0)
            l--;
        *len = l;
    }
    else
        *len = fifo->tail - fifo->head - 1;
}

  Not used:
static int usb_serial_in_empty(void)
{
    return fifo_empty(&serial_in_fifo);
}

  Not used:
static int usb_serial_out_full(void)
{
    return fifo_full(&serial_out_fifo);
}
**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Tomasz Malesinski
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
#define LCD_DEBUG
#define BUTTONS
 #include "config.h"  length  descriptor type  USB version (1.1)  class and subclass  protocol  max packet size 0  vendor (iRiver)  product (0xee07)  device version  manufacturer string  product string  serial number string  number of configurations  length  descriptor type  total length  number of interfaces  configuration value  configuration string  attributes (none)  max power (100 mA)  interface descriptor  length  descriptor type  interface number  alternate setting  number of endpoints  interface class  interface subclass  interface protocol  interface string  endpoint IN  length  descriptor type  endpoint 1 IN  attributes (bulk)  max packet size  interval  endpoint OUT  length  descriptor type  endpoint 1 IN  attributes (bulk)  max packet size  interval  length  descriptor type  English (US)  |= is in the original firmware  clear buffer  SOFTCT off  SOFTCT on  SOFTCT off  CLKAON | GLINTENA  SOFTCT on 
    if (endpoints[n].out_ptr == endpoints[n].out_len
        && len < max_pkt_size)
 set interface feature  clear interface feature  set descriptor  synch frame 
    snprintf(s, 10, "l%02x", len);
    lcd_puts(0, 5, s);

    char s[10];
    snprintf(s, sizeof(s), "%02d", i);
    lcd_puts(0, 2, s);
    lcd_update();

        snprintf(s, sizeof(s), "i%08lx", ISP1582_INT);
        lcd_puts(0, 2, s);
        
    lcd_puts(0, 3, usb_connected() ? "C" : "N");
    lcd_update();

  Not used:
static void fifo_add(struct serial_fifo *fifo, int n)
{
    fifo->head = fifo_mod(fifo->head + n);
}

static void fifo_free_block(struct serial_fifo *fifo,
                           unsigned char **ptr, int *len)
{
    *ptr = fifo->buf + fifo->head;
    if (fifo->head >= fifo->tail)
    {
        int l = SERIAL_BUF_SIZE - fifo->head;
        if (fifo->tail == 0)
            l--;
        *len = l;
    }
    else
        *len = fifo->tail - fifo->head - 1;
}

  Not used:
static int usb_serial_in_empty(void)
{
    return fifo_empty(&serial_in_fifo);
}

  Not used:
static int usb_serial_out_full(void)
{
    return fifo_full(&serial_out_fifo);
}
