
  SDL - Simple DirectMedia Layer
  Copyright (C) 1997-2012 Sam Lantinga

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

  Sam Lantinga
  slouken@libsdl.org
 Key mapping. Receiving BTN_{x} sends RBSDL_{x} to the game.  change if needed  Initialization/Query functions  Hardware surface functions  etc.  ROCKBOX driver bootstrap functions  poll buttons  wolf3d code  check clickwheel with button_get()  button combo for menu  copied from doom  Initialize all variables that we clean on shutdown  Set the function pointers  set the ideal format  we byteswap in CopyRects()  we change this during the SDL_SetVideoMode implementation...  We're done!  we will scale anything, as long as the format is correct  normal  90deg CW  screen rotated 90deg CCW  have SDL write directly to the framebuffer  rotate 90deg, unless square  rotate keymap, too  scaling buffer, must be big enough to hold the biggest
         * possible input we can be given       printf("Setting mode %dx%d\n", width, height);  Allocate the new pixel format for the screen  Set up the new mode framebuffer  We're done  We don't actually allow hardware surfaces other than the main one  We need to wait for vertical retrace on page flipped displays  swap pixels directly in the framebuffer  Direct mode writes directly to lcd_framebuffer. Update and
     * exit!  we must scale  special case of full screen update  This is slow. Avoid if possible.  first copy the rectangle line-by-line into our
                     * scaling buffer  Our scaling input buffer now has the target
                     * rectangle in it. Now we must scale it down (into
                     * the output buffer)  now finally blit the output buffer to the actual
                     * framebuffer  FIXME: this won't work for rotated screen or overlapping rects  We are lazy and do not want to figure out the new
             * rectangle coordinates. See lcd_update() below. rb->lcd_update_rect(rects[i].x, rects[i].y, rects[i].w, rects[i].h); for  if  do nothing of note.  Note:  If we are terminated, this could be called in the middle of
   another SDL video routine -- notably UpdateRects.

  SDL - Simple DirectMedia Layer
  Copyright (C) 1997-2012 Sam Lantinga

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

  Sam Lantinga
  slouken@libsdl.org
 Key mapping. Receiving BTN_{x} sends RBSDL_{x} to the game.  change if needed  Initialization/Query functions  Hardware surface functions  etc.  ROCKBOX driver bootstrap functions  poll buttons  wolf3d code  check clickwheel with button_get()  button combo for menu  copied from doom  Initialize all variables that we clean on shutdown  Set the function pointers  set the ideal format  we byteswap in CopyRects()  we change this during the SDL_SetVideoMode implementation...  We're done!  we will scale anything, as long as the format is correct  normal  90deg CW  screen rotated 90deg CCW  have SDL write directly to the framebuffer  rotate 90deg, unless square  rotate keymap, too  scaling buffer, must be big enough to hold the biggest
         * possible input we can be given       printf("Setting mode %dx%d\n", width, height);  Allocate the new pixel format for the screen  Set up the new mode framebuffer  We're done  We don't actually allow hardware surfaces other than the main one  We need to wait for vertical retrace on page flipped displays  swap pixels directly in the framebuffer  Direct mode writes directly to lcd_framebuffer. Update and
     * exit!  we must scale  special case of full screen update  This is slow. Avoid if possible.  first copy the rectangle line-by-line into our
                     * scaling buffer  Our scaling input buffer now has the target
                     * rectangle in it. Now we must scale it down (into
                     * the output buffer)  now finally blit the output buffer to the actual
                     * framebuffer  FIXME: this won't work for rotated screen or overlapping rects  We are lazy and do not want to figure out the new
             * rectangle coordinates. See lcd_update() below. rb->lcd_update_rect(rects[i].x, rects[i].y, rects[i].w, rects[i].h); for  if  do nothing of note.  Note:  If we are terminated, this could be called in the middle of
   another SDL video routine -- notably UpdateRects.

  SDL - Simple DirectMedia Layer
  Copyright (C) 1997-2012 Sam Lantinga

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

  Sam Lantinga
  slouken@libsdl.org
 Key mapping. Receiving BTN_{x} sends RBSDL_{x} to the game.  change if needed  Initialization/Query functions  Hardware surface functions  etc.  ROCKBOX driver bootstrap functions  poll buttons  wolf3d code  check clickwheel with button_get()  button combo for menu  copied from doom  Initialize all variables that we clean on shutdown  Set the function pointers  set the ideal format  we byteswap in CopyRects()  we change this during the SDL_SetVideoMode implementation...  We're done!  we will scale anything, as long as the format is correct  normal  90deg CW  screen rotated 90deg CCW  have SDL write directly to the framebuffer  rotate 90deg, unless square  rotate keymap, too  scaling buffer, must be big enough to hold the biggest
         * possible input we can be given       printf("Setting mode %dx%d\n", width, height);  Allocate the new pixel format for the screen  Set up the new mode framebuffer  We're done  We don't actually allow hardware surfaces other than the main one  We need to wait for vertical retrace on page flipped displays  swap pixels directly in the framebuffer  Direct mode writes directly to lcd_framebuffer. Update and
     * exit!  we must scale  special case of full screen update  This is slow. Avoid if possible.  first copy the rectangle line-by-line into our
                     * scaling buffer  Our scaling input buffer now has the target
                     * rectangle in it. Now we must scale it down (into
                     * the output buffer)  now finally blit the output buffer to the actual
                     * framebuffer  FIXME: this won't work for rotated screen or overlapping rects  We are lazy and do not want to figure out the new
             * rectangle coordinates. See lcd_update() below. rb->lcd_update_rect(rects[i].x, rects[i].y, rects[i].w, rects[i].h); for  if  do nothing of note.  Note:  If we are terminated, this could be called in the middle of
   another SDL video routine -- notably UpdateRects.
