**********************************************************************
Copyright (c) 2006-2011, Skype Limited. All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
- Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
- Neither the name of Internet Society, IETF or IETF Trust, nor the
names of specific contributors, may be used to endorse or promote
products derived from this software without specific prior written
permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
******************************************************************************************** Decoder Super Struct ***************************************** Decoder functions ******************* O    Returns error code                               O    Number of bytes in SILK decoder state            Reset decoder state  O    Returns error code                               I/O  State                                            Not strictly needed, but it's cleaner that way  Decode a frame  O    Returns error code                               I/O  State                                            I/O  Control Structure                                I    0: no loss, 1 loss, 2 decode fec                 I    Indicates first decoder call for this packet     I/O  Compressor data structure                        O    Decoded output speech vector                     O    Number of samples decoded                       ******************************** Test if first frame in payload ******************************** Used to count frames in packet  If Mono -> Stereo transition in bitstream: init state of second channel  Assuming packet loss, use 10 ms  First decoder call for this payload  Decode VAD flags and LBRR flag  Decode LBRR flags  Regular decoding: skip all LBRR data  Use conditional coding if previous frame available  Get MS predictor index  For LBRR data, decode mid-only flag only if side-channel's LBRR flag is false  Reset side channel decoder prediction memory for first frame with side coding  Check if the temp buffer fits into the output PCM buffer. If it fits,
       we can delay allocating the temp buffer until after the SILK peak stack
       usage. We need to use a < and not a <= because of the two extra samples.  Call decoder for one frame  Use independent coding if no previous frame available  If we skipped a side frame in this packet, we don't
                   need LTP scaling; the LTP state is well-defined.  Convert Mid/Side to Left/Right  Buffering  Number of output samples  Set up pointers to temp buffers  Resample decoded signal to API_sampleRate  Interleave if stereo output and stereo stream  Create two channel output from mono stream  Resample right channel for newly collapsed stereo just in case
               we weren't doing collapsing when switching to mono  Export pitch lag, measured at 48 kHz sampling rate  On packet loss, remove the gain clamping to prevent having the energy "bounce back"
          if we lose packets when the energy is going down  Getting table of contents for a packet  I    Payload data                                 I    Number of input bytes                        I    Number of SILK frames per payload            O    Type of content                              For stereo, extract the flags for the mid channel **********************************************************************
Copyright (c) 2006-2011, Skype Limited. All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
- Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
- Neither the name of Internet Society, IETF or IETF Trust, nor the
names of specific contributors, may be used to endorse or promote
products derived from this software without specific prior written
permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
******************************************************************************************** Decoder Super Struct ***************************************** Decoder functions ******************* O    Returns error code                               O    Number of bytes in SILK decoder state            Reset decoder state  O    Returns error code                               I/O  State                                            Not strictly needed, but it's cleaner that way  Decode a frame  O    Returns error code                               I/O  State                                            I/O  Control Structure                                I    0: no loss, 1 loss, 2 decode fec                 I    Indicates first decoder call for this packet     I/O  Compressor data structure                        O    Decoded output speech vector                     O    Number of samples decoded                       ******************************** Test if first frame in payload ******************************** Used to count frames in packet  If Mono -> Stereo transition in bitstream: init state of second channel  Assuming packet loss, use 10 ms  First decoder call for this payload  Decode VAD flags and LBRR flag  Decode LBRR flags  Regular decoding: skip all LBRR data  Use conditional coding if previous frame available  Get MS predictor index  For LBRR data, decode mid-only flag only if side-channel's LBRR flag is false  Reset side channel decoder prediction memory for first frame with side coding  Check if the temp buffer fits into the output PCM buffer. If it fits,
       we can delay allocating the temp buffer until after the SILK peak stack
       usage. We need to use a < and not a <= because of the two extra samples.  Call decoder for one frame  Use independent coding if no previous frame available  If we skipped a side frame in this packet, we don't
                   need LTP scaling; the LTP state is well-defined.  Convert Mid/Side to Left/Right  Buffering  Number of output samples  Set up pointers to temp buffers  Resample decoded signal to API_sampleRate  Interleave if stereo output and stereo stream  Create two channel output from mono stream  Resample right channel for newly collapsed stereo just in case
               we weren't doing collapsing when switching to mono  Export pitch lag, measured at 48 kHz sampling rate  On packet loss, remove the gain clamping to prevent having the energy "bounce back"
          if we lose packets when the energy is going down  Getting table of contents for a packet  I    Payload data                                 I    Number of input bytes                        I    Number of SILK frames per payload            O    Type of content                              For stereo, extract the flags for the mid channel **********************************************************************
Copyright (c) 2006-2011, Skype Limited. All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
- Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
- Neither the name of Internet Society, IETF or IETF Trust, nor the
names of specific contributors, may be used to endorse or promote
products derived from this software without specific prior written
permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
******************************************************************************************** Decoder Super Struct ***************************************** Decoder functions ******************* O    Returns error code                               O    Number of bytes in SILK decoder state            Reset decoder state  O    Returns error code                               I/O  State                                            Not strictly needed, but it's cleaner that way  Decode a frame  O    Returns error code                               I/O  State                                            I/O  Control Structure                                I    0: no loss, 1 loss, 2 decode fec                 I    Indicates first decoder call for this packet     I/O  Compressor data structure                        O    Decoded output speech vector                     O    Number of samples decoded                       ******************************** Test if first frame in payload ******************************** Used to count frames in packet  If Mono -> Stereo transition in bitstream: init state of second channel  Assuming packet loss, use 10 ms  First decoder call for this payload  Decode VAD flags and LBRR flag  Decode LBRR flags  Regular decoding: skip all LBRR data  Use conditional coding if previous frame available  Get MS predictor index  For LBRR data, decode mid-only flag only if side-channel's LBRR flag is false  Reset side channel decoder prediction memory for first frame with side coding  Check if the temp buffer fits into the output PCM buffer. If it fits,
       we can delay allocating the temp buffer until after the SILK peak stack
       usage. We need to use a < and not a <= because of the two extra samples.  Call decoder for one frame  Use independent coding if no previous frame available  If we skipped a side frame in this packet, we don't
                   need LTP scaling; the LTP state is well-defined.  Convert Mid/Side to Left/Right  Buffering  Number of output samples  Set up pointers to temp buffers  Resample decoded signal to API_sampleRate  Interleave if stereo output and stereo stream  Create two channel output from mono stream  Resample right channel for newly collapsed stereo just in case
               we weren't doing collapsing when switching to mono  Export pitch lag, measured at 48 kHz sampling rate  On packet loss, remove the gain clamping to prevent having the energy "bounce back"
          if we lose packets when the energy is going down  Getting table of contents for a packet  I    Payload data                                 I    Number of input bytes                        I    Number of SILK frames per payload            O    Type of content                              For stereo, extract the flags for the mid channel 