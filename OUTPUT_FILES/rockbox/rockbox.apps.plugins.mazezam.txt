**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2006, 2008 Malcolm Tyrrell
 *
 * MazezaM - a Rockbox version of my ZX Spectrum game from 2002
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Include standard plugin macro  All the text is here  how many lives at game start  The level at the first checkpoint  A checkpoint every _ levels  Yellow     Blue       White      Black      Dark gray  White      Dark gray  the rows are coloured sequentially  Orange       Red          Green        Cyan         Pink         Yellow       Blue         Magenta      darker version of the above  maximum height of a level  maximum number of chunks on a line  A structure for storing level data in unparsed form  the number of lines  the width  the line on which the entrance lies  the line on which the exit lies  the chunk data in string form  The number of levels.  The levels. In theory, they could be stored in a file so this data
 * structure should not be accessed outside parse_level()
 *
 * These levels are copyright (C) 2002 Malcolm Tyrrell. They're
 * probably covered by the GPL as they constitute part of the source
 * code of this plugin, but you may distibute them seperately with
 * other Free Software if you want. You can download them from:
 * http://webpages.dcu.ie/~tyrrelma/MazezaM.
  This data structure which holds information about the rows  the number of chunks on a line  the width of a chunk  the inset of a chunk  Parsed level data  The state variable used to hold the state of the plugin  The player wants to quit  A USB cable has been inserted  There's a parse error in the levels  The player has finished the game  The player is at the main menu  The player is out of lives  A level has been completed  The player wants to retry the level  The player wan't to access the in-game menu  The various constants needed for configuration files.
 * See apps/plugins/lib/configfile.*
  A structure containing the data that is written to
 * the configuration file
  level at which to restart the game  Store the display settings so they are reintroduced during menus ****************************************************************************
* Store the LCD settings
***************************************************************************** Store the old settings ****************************************************************************
* Restore the LCD settings to their defaults
***************************************************************************** Turn on backlight timeout (revert to settings)  Restore the old settings ****************************************************************************
* Adjust the LCD settings to suit MazezaM levels
***************************************************************************** Turn off backlight timeout  Set the new settings ****************************************************************************
* Parse the level data from the level_data structure. This could be
* replaced by a file read. Returns true if the level parsed correctly.
***************************************************************************** for each line in the level  the character we last considered ****************************************************************************
* Draw the walls of a level
***************************************************************************** draw the upper wall  draw the lower wall  Note: the exit is made one pixel thinner than necessary as a visual
     * clue that chunks cannot be pushed into it
     ****************************************************************************
* Draw chunk row i
***************************************************************************** the row number  the data about the chunks  an array of the horizontal offset of the lines  The assignment below is just a hack to make supress a warning on
     * non color targets  We #def these out to supress a compiler warning  adding width to i should have a fixed, but randomising effect on
     * the choice of the colours of the top line of chunks
      draw shade  draw fill ****************************************************************************
* Draw the player
***************************************************************************** For drawing the player, taken from the sokoban plugin  draw the player (mostly copied from the sokoban plugin) ****************************************************************************
* Draw the gate
*********************************************************************************************************************************************************
* Draw the level
***************************************************************************** an array of the horizontal offset of the lines  player's x and y coords  First we calculate the draw info  The number of pixels the side of a square should be  The x and y position (in pixels) of the top left corner of the
     * level
      draw the chunks  if the player has moved into the level, draw the gate ****************************************************************************
* Manage the congratulations screen
*********************************************************************************************************************************************************
* Manage the playing of a level
***************************************************************************** is there a chunk in the way of the player? ****************************************************************************
* Manage the in game menu
***************************************************************************** The initial option is retry level  Don't show the status bar  retry  Audio playback  quit  Back ****************************************************************************
* Is the level a checkpoint
*********************************************************************************************************************************************************
* Set up and play a level
* new_level should be true if this is the first time we've encountered
* this level
***************************************************************************** amount each line has been shifted  If we've just reached a checkpoint, then alert the player  Clear the splash  Splash text seems to use the remote display by
     * default. I suppose I better keep it tidy!
      ensure keys pressed during the splash screen are ignored  this little loop just ensures we return to the game if the player
     * doesn't perform an interesting action during the in game menu ****************************************************************************
* Update the resume data based on the level reached
*********************************************************************************************************************************************************
* The loop which manages a full game of MazezaM.
***************************************************************************** We want to know when a player reaches a level for the first time,
     * so we keep a second copy of the level.  Splash text seems to use the remote display by
             * default. I suppose I better keep it tidy!
             ****************************************************************************
* Load the resume data from the config file. The data is
* stored in both r and old.
***************************************************************************** an extra precaution ****************************************************************************
* Save the resume data in the config file, but only if necessary
***************************************************************************** To reduce disk usage, only write the file if the resume data has
     * changed.
     ****************************************************************************
* Manages the main menu 
***************************************************************************** The initial option is "play game"  Load data  Continue  Play new game  Audio playback  Quit  I'm not sure if it's appropriate to write to disk on USB events.
     * Currently, I do so.
     ****************************************************************************
* Plugin entry point 
***************************************************************************** Usual plugin stuff **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2006, 2008 Malcolm Tyrrell
 *
 * MazezaM - a Rockbox version of my ZX Spectrum game from 2002
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Include standard plugin macro  All the text is here  how many lives at game start  The level at the first checkpoint  A checkpoint every _ levels  Yellow     Blue       White      Black      Dark gray  White      Dark gray  the rows are coloured sequentially  Orange       Red          Green        Cyan         Pink         Yellow       Blue         Magenta      darker version of the above  maximum height of a level  maximum number of chunks on a line  A structure for storing level data in unparsed form  the number of lines  the width  the line on which the entrance lies  the line on which the exit lies  the chunk data in string form  The number of levels.  The levels. In theory, they could be stored in a file so this data
 * structure should not be accessed outside parse_level()
 *
 * These levels are copyright (C) 2002 Malcolm Tyrrell. They're
 * probably covered by the GPL as they constitute part of the source
 * code of this plugin, but you may distibute them seperately with
 * other Free Software if you want. You can download them from:
 * http://webpages.dcu.ie/~tyrrelma/MazezaM.
  This data structure which holds information about the rows  the number of chunks on a line  the width of a chunk  the inset of a chunk  Parsed level data  The state variable used to hold the state of the plugin  The player wants to quit  A USB cable has been inserted  There's a parse error in the levels  The player has finished the game  The player is at the main menu  The player is out of lives  A level has been completed  The player wants to retry the level  The player wan't to access the in-game menu  The various constants needed for configuration files.
 * See apps/plugins/lib/configfile.*
  A structure containing the data that is written to
 * the configuration file
  level at which to restart the game  Store the display settings so they are reintroduced during menus ****************************************************************************
* Store the LCD settings
***************************************************************************** Store the old settings ****************************************************************************
* Restore the LCD settings to their defaults
***************************************************************************** Turn on backlight timeout (revert to settings)  Restore the old settings ****************************************************************************
* Adjust the LCD settings to suit MazezaM levels
***************************************************************************** Turn off backlight timeout  Set the new settings ****************************************************************************
* Parse the level data from the level_data structure. This could be
* replaced by a file read. Returns true if the level parsed correctly.
***************************************************************************** for each line in the level  the character we last considered ****************************************************************************
* Draw the walls of a level
***************************************************************************** draw the upper wall  draw the lower wall  Note: the exit is made one pixel thinner than necessary as a visual
     * clue that chunks cannot be pushed into it
     ****************************************************************************
* Draw chunk row i
***************************************************************************** the row number  the data about the chunks  an array of the horizontal offset of the lines  The assignment below is just a hack to make supress a warning on
     * non color targets  We #def these out to supress a compiler warning  adding width to i should have a fixed, but randomising effect on
     * the choice of the colours of the top line of chunks
      draw shade  draw fill ****************************************************************************
* Draw the player
***************************************************************************** For drawing the player, taken from the sokoban plugin  draw the player (mostly copied from the sokoban plugin) ****************************************************************************
* Draw the gate
*********************************************************************************************************************************************************
* Draw the level
***************************************************************************** an array of the horizontal offset of the lines  player's x and y coords  First we calculate the draw info  The number of pixels the side of a square should be  The x and y position (in pixels) of the top left corner of the
     * level
      draw the chunks  if the player has moved into the level, draw the gate ****************************************************************************
* Manage the congratulations screen
*********************************************************************************************************************************************************
* Manage the playing of a level
***************************************************************************** is there a chunk in the way of the player? ****************************************************************************
* Manage the in game menu
***************************************************************************** The initial option is retry level  Don't show the status bar  retry  Audio playback  quit  Back ****************************************************************************
* Is the level a checkpoint
*********************************************************************************************************************************************************
* Set up and play a level
* new_level should be true if this is the first time we've encountered
* this level
***************************************************************************** amount each line has been shifted  If we've just reached a checkpoint, then alert the player  Clear the splash  Splash text seems to use the remote display by
     * default. I suppose I better keep it tidy!
      ensure keys pressed during the splash screen are ignored  this little loop just ensures we return to the game if the player
     * doesn't perform an interesting action during the in game menu ****************************************************************************
* Update the resume data based on the level reached
*********************************************************************************************************************************************************
* The loop which manages a full game of MazezaM.
***************************************************************************** We want to know when a player reaches a level for the first time,
     * so we keep a second copy of the level.  Splash text seems to use the remote display by
             * default. I suppose I better keep it tidy!
             ****************************************************************************
* Load the resume data from the config file. The data is
* stored in both r and old.
***************************************************************************** an extra precaution ****************************************************************************
* Save the resume data in the config file, but only if necessary
***************************************************************************** To reduce disk usage, only write the file if the resume data has
     * changed.
     ****************************************************************************
* Manages the main menu 
***************************************************************************** The initial option is "play game"  Load data  Continue  Play new game  Audio playback  Quit  I'm not sure if it's appropriate to write to disk on USB events.
     * Currently, I do so.
     ****************************************************************************
* Plugin entry point 
***************************************************************************** Usual plugin stuff **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2006, 2008 Malcolm Tyrrell
 *
 * MazezaM - a Rockbox version of my ZX Spectrum game from 2002
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Include standard plugin macro  All the text is here  how many lives at game start  The level at the first checkpoint  A checkpoint every _ levels  Yellow     Blue       White      Black      Dark gray  White      Dark gray  the rows are coloured sequentially  Orange       Red          Green        Cyan         Pink         Yellow       Blue         Magenta      darker version of the above  maximum height of a level  maximum number of chunks on a line  A structure for storing level data in unparsed form  the number of lines  the width  the line on which the entrance lies  the line on which the exit lies  the chunk data in string form  The number of levels.  The levels. In theory, they could be stored in a file so this data
 * structure should not be accessed outside parse_level()
 *
 * These levels are copyright (C) 2002 Malcolm Tyrrell. They're
 * probably covered by the GPL as they constitute part of the source
 * code of this plugin, but you may distibute them seperately with
 * other Free Software if you want. You can download them from:
 * http://webpages.dcu.ie/~tyrrelma/MazezaM.
  This data structure which holds information about the rows  the number of chunks on a line  the width of a chunk  the inset of a chunk  Parsed level data  The state variable used to hold the state of the plugin  The player wants to quit  A USB cable has been inserted  There's a parse error in the levels  The player has finished the game  The player is at the main menu  The player is out of lives  A level has been completed  The player wants to retry the level  The player wan't to access the in-game menu  The various constants needed for configuration files.
 * See apps/plugins/lib/configfile.*
  A structure containing the data that is written to
 * the configuration file
  level at which to restart the game  Store the display settings so they are reintroduced during menus ****************************************************************************
* Store the LCD settings
***************************************************************************** Store the old settings ****************************************************************************
* Restore the LCD settings to their defaults
***************************************************************************** Turn on backlight timeout (revert to settings)  Restore the old settings ****************************************************************************
* Adjust the LCD settings to suit MazezaM levels
***************************************************************************** Turn off backlight timeout  Set the new settings ****************************************************************************
* Parse the level data from the level_data structure. This could be
* replaced by a file read. Returns true if the level parsed correctly.
***************************************************************************** for each line in the level  the character we last considered ****************************************************************************
* Draw the walls of a level
***************************************************************************** draw the upper wall  draw the lower wall  Note: the exit is made one pixel thinner than necessary as a visual
     * clue that chunks cannot be pushed into it
     ****************************************************************************
* Draw chunk row i
***************************************************************************** the row number  the data about the chunks  an array of the horizontal offset of the lines  The assignment below is just a hack to make supress a warning on
     * non color targets  We #def these out to supress a compiler warning  adding width to i should have a fixed, but randomising effect on
     * the choice of the colours of the top line of chunks
      draw shade  draw fill ****************************************************************************
* Draw the player
***************************************************************************** For drawing the player, taken from the sokoban plugin  draw the player (mostly copied from the sokoban plugin) ****************************************************************************
* Draw the gate
*********************************************************************************************************************************************************
* Draw the level
***************************************************************************** an array of the horizontal offset of the lines  player's x and y coords  First we calculate the draw info  The number of pixels the side of a square should be  The x and y position (in pixels) of the top left corner of the
     * level
      draw the chunks  if the player has moved into the level, draw the gate ****************************************************************************
* Manage the congratulations screen
*********************************************************************************************************************************************************
* Manage the playing of a level
***************************************************************************** is there a chunk in the way of the player? ****************************************************************************
* Manage the in game menu
***************************************************************************** The initial option is retry level  Don't show the status bar  retry  Audio playback  quit  Back ****************************************************************************
* Is the level a checkpoint
*********************************************************************************************************************************************************
* Set up and play a level
* new_level should be true if this is the first time we've encountered
* this level
***************************************************************************** amount each line has been shifted  If we've just reached a checkpoint, then alert the player  Clear the splash  Splash text seems to use the remote display by
     * default. I suppose I better keep it tidy!
      ensure keys pressed during the splash screen are ignored  this little loop just ensures we return to the game if the player
     * doesn't perform an interesting action during the in game menu ****************************************************************************
* Update the resume data based on the level reached
*********************************************************************************************************************************************************
* The loop which manages a full game of MazezaM.
***************************************************************************** We want to know when a player reaches a level for the first time,
     * so we keep a second copy of the level.  Splash text seems to use the remote display by
             * default. I suppose I better keep it tidy!
             ****************************************************************************
* Load the resume data from the config file. The data is
* stored in both r and old.
***************************************************************************** an extra precaution ****************************************************************************
* Save the resume data in the config file, but only if necessary
***************************************************************************** To reduce disk usage, only write the file if the resume data has
     * changed.
     ****************************************************************************
* Manages the main menu 
***************************************************************************** The initial option is "play game"  Load data  Continue  Play new game  Audio playback  Quit  I'm not sure if it's appropriate to write to disk on USB events.
     * Currently, I do so.
     ****************************************************************************
* Plugin entry point 
***************************************************************************** Usual plugin stuff 