**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 Michael Sevakis (jhMikeS)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** NOTE: often-unaligned accesses  t0=i0i1           t2=f0f1           t1=i2i3           t3=r0r1           out=f0*i0+f1*i1   out+=r1*i2+r0*i3  To do >> 16 below  amp * vol >> 16  'output' still 5 bits too big  NOTE: often-unaligned accesses  t0=i0i1    t2=f0f1    t1=i2i3    t3=f2f3    out=f0*i0  t0=f1*i1   t2=r1*i2   t3=r0*i3   t3[31:16], t2[15:0]  t3[31:16]*2, t2[15:0]*2  out[15:0]=
                                                 * sat16(t3[31:16]+t2[15:0])  output will be sign-extended in next step  !SPC_NOINTERP  Echo filter history  Keep last 8 samples  duplicate at +8 eliminates wrap checking below  L0R0 = acc0           L1R1-L4R4 = r2-r5     C0C1-C2C3 = r0-r1     L0R0,L1R1->L0L1,R0R1  acc0=L0*C0+L1*C1      acc1=R0*C0+R1*C1      L2R2,L3R3->L2L3,R2R3  acc0+=L2*C2+L3*C3     acc1+=R2*C2+R3*C3     L5R5-L7R7 = r2-r4     C4C5-C6C7 = r0-r1     L4R4,L5R5->L4L5,R4R5  acc0+=L4*C4+L5*C5     acc1+=R4*C4+R5*C5     L6R6,L7R7->L6L7,R6R7  acc0+=L6*C6+L7*C7     acc1+=R6*C6+R7*C7     SPC_NOECHO **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 Michael Sevakis (jhMikeS)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** NOTE: often-unaligned accesses  t0=i0i1           t2=f0f1           t1=i2i3           t3=r0r1           out=f0*i0+f1*i1   out+=r1*i2+r0*i3  To do >> 16 below  amp * vol >> 16  'output' still 5 bits too big  NOTE: often-unaligned accesses  t0=i0i1    t2=f0f1    t1=i2i3    t3=f2f3    out=f0*i0  t0=f1*i1   t2=r1*i2   t3=r0*i3   t3[31:16], t2[15:0]  t3[31:16]*2, t2[15:0]*2  out[15:0]=
                                                 * sat16(t3[31:16]+t2[15:0])  output will be sign-extended in next step  !SPC_NOINTERP  Echo filter history  Keep last 8 samples  duplicate at +8 eliminates wrap checking below  L0R0 = acc0           L1R1-L4R4 = r2-r5     C0C1-C2C3 = r0-r1     L0R0,L1R1->L0L1,R0R1  acc0=L0*C0+L1*C1      acc1=R0*C0+R1*C1      L2R2,L3R3->L2L3,R2R3  acc0+=L2*C2+L3*C3     acc1+=R2*C2+R3*C3     L5R5-L7R7 = r2-r4     C4C5-C6C7 = r0-r1     L4R4,L5R5->L4L5,R4R5  acc0+=L4*C4+L5*C5     acc1+=R4*C4+R5*C5     L6R6,L7R7->L6L7,R6R7  acc0+=L6*C6+L7*C7     acc1+=R6*C6+R7*C7     SPC_NOECHO **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 Michael Sevakis (jhMikeS)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** NOTE: often-unaligned accesses  t0=i0i1           t2=f0f1           t1=i2i3           t3=r0r1           out=f0*i0+f1*i1   out+=r1*i2+r0*i3  To do >> 16 below  amp * vol >> 16  'output' still 5 bits too big  NOTE: often-unaligned accesses  t0=i0i1    t2=f0f1    t1=i2i3    t3=f2f3    out=f0*i0  t0=f1*i1   t2=r1*i2   t3=r0*i3   t3[31:16], t2[15:0]  t3[31:16]*2, t2[15:0]*2  out[15:0]=
                                                 * sat16(t3[31:16]+t2[15:0])  output will be sign-extended in next step  !SPC_NOINTERP  Echo filter history  Keep last 8 samples  duplicate at +8 eliminates wrap checking below  L0R0 = acc0           L1R1-L4R4 = r2-r5     C0C1-C2C3 = r0-r1     L0R0,L1R1->L0L1,R0R1  acc0=L0*C0+L1*C1      acc1=R0*C0+R1*C1      L2R2,L3R3->L2L3,R2R3  acc0+=L2*C2+L3*C3     acc1+=R2*C2+R3*C3     L5R5-L7R7 = r2-r4     C4C5-C6C7 = r0-r1     L4R4,L5R5->L4L5,R4R5  acc0+=L4*C4+L5*C5     acc1+=R4*C4+R5*C5     L6R6,L7R7->L6L7,R6R7  acc0+=L6*C6+L7*C7     acc1+=R6*C6+R7*C7     SPC_NOECHO 