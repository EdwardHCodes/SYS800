**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Daniel Stenberg
 *
 * iPod driver based on code from the ipodlinux project - http://ipodlinux.org
 * Adapted for Rockbox in December 2005
 * Original file: linux/arch/armnommu/mach-ipod/keyboard.c
 * Copyright (c) 2003-2005 Bernard Leach (leachbj@bouncycastle.org)
 *
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * Rockbox button functions
  Compute every ... clicks  deg/s  deg/s  Variable to use for setting button status in interrupt handler  direction reversal or was hold - reset all  poke backlight every 1/4s of activity  Mini 1st Gen wheel has inverse direction mapping
     * compared to 1st..3rd Gen wheel.  only happens if we get out of sync  have a keycode  calculate deg/s based upon sensitivity-adjusted interrupt period  timer wrapped (no activity for awhile), skip acceleration  check overflow below  limit to 24 bits  very slow - no smoothing  ensure backlight never gets stuck for an extended period if tick
         * wrapped such that next poke is very far ahead  some velocity filtering to smooth things out  quick enough and same key is being posted more than once in a
             * row - generate repeats - use unsmoothed v to guage  post wheel keycode with wheel data  message posted - reset delta  skipped post - increment delta and limit to 7 bits  mini 1 only, mini 2G uses iPod 4G code  The ipodlinux source had a udelay(250) here, but testing has shown that
       it is not needed - tested on mini 1g.  udelay(250); get source(s) of interupt  not for us  get current keypad & wheel status  toggle interrupt level  ack any active interrupts  hold switch causes all outputs to go low     we shouldn't interpret these as key presses CPU_INT_EN = 0x40000000; iPod Mini G1  buttons - enable as input  scroll wheel- enable as input  port b 4,5  port b 4,5  buttons - set interrupt levels  scroll wheel - set interrupt levels  enable interrupts  unmask interrupt 
 * Get button pressed from hardware
  normal buttons  The int_btn variable is set in the button interrupt handler **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Daniel Stenberg
 *
 * iPod driver based on code from the ipodlinux project - http://ipodlinux.org
 * Adapted for Rockbox in December 2005
 * Original file: linux/arch/armnommu/mach-ipod/keyboard.c
 * Copyright (c) 2003-2005 Bernard Leach (leachbj@bouncycastle.org)
 *
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * Rockbox button functions
  Compute every ... clicks  deg/s  deg/s  Variable to use for setting button status in interrupt handler  direction reversal or was hold - reset all  poke backlight every 1/4s of activity  Mini 1st Gen wheel has inverse direction mapping
     * compared to 1st..3rd Gen wheel.  only happens if we get out of sync  have a keycode  calculate deg/s based upon sensitivity-adjusted interrupt period  timer wrapped (no activity for awhile), skip acceleration  check overflow below  limit to 24 bits  very slow - no smoothing  ensure backlight never gets stuck for an extended period if tick
         * wrapped such that next poke is very far ahead  some velocity filtering to smooth things out  quick enough and same key is being posted more than once in a
             * row - generate repeats - use unsmoothed v to guage  post wheel keycode with wheel data  message posted - reset delta  skipped post - increment delta and limit to 7 bits  mini 1 only, mini 2G uses iPod 4G code  The ipodlinux source had a udelay(250) here, but testing has shown that
       it is not needed - tested on mini 1g.  udelay(250); get source(s) of interupt  not for us  get current keypad & wheel status  toggle interrupt level  ack any active interrupts  hold switch causes all outputs to go low     we shouldn't interpret these as key presses CPU_INT_EN = 0x40000000; iPod Mini G1  buttons - enable as input  scroll wheel- enable as input  port b 4,5  port b 4,5  buttons - set interrupt levels  scroll wheel - set interrupt levels  enable interrupts  unmask interrupt 
 * Get button pressed from hardware
  normal buttons  The int_btn variable is set in the button interrupt handler **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Daniel Stenberg
 *
 * iPod driver based on code from the ipodlinux project - http://ipodlinux.org
 * Adapted for Rockbox in December 2005
 * Original file: linux/arch/armnommu/mach-ipod/keyboard.c
 * Copyright (c) 2003-2005 Bernard Leach (leachbj@bouncycastle.org)
 *
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * Rockbox button functions
  Compute every ... clicks  deg/s  deg/s  Variable to use for setting button status in interrupt handler  direction reversal or was hold - reset all  poke backlight every 1/4s of activity  Mini 1st Gen wheel has inverse direction mapping
     * compared to 1st..3rd Gen wheel.  only happens if we get out of sync  have a keycode  calculate deg/s based upon sensitivity-adjusted interrupt period  timer wrapped (no activity for awhile), skip acceleration  check overflow below  limit to 24 bits  very slow - no smoothing  ensure backlight never gets stuck for an extended period if tick
         * wrapped such that next poke is very far ahead  some velocity filtering to smooth things out  quick enough and same key is being posted more than once in a
             * row - generate repeats - use unsmoothed v to guage  post wheel keycode with wheel data  message posted - reset delta  skipped post - increment delta and limit to 7 bits  mini 1 only, mini 2G uses iPod 4G code  The ipodlinux source had a udelay(250) here, but testing has shown that
       it is not needed - tested on mini 1g.  udelay(250); get source(s) of interupt  not for us  get current keypad & wheel status  toggle interrupt level  ack any active interrupts  hold switch causes all outputs to go low     we shouldn't interpret these as key presses CPU_INT_EN = 0x40000000; iPod Mini G1  buttons - enable as input  scroll wheel- enable as input  port b 4,5  port b 4,5  buttons - set interrupt levels  scroll wheel - set interrupt levels  enable interrupts  unmask interrupt 
 * Get button pressed from hardware
  normal buttons  The int_btn variable is set in the button interrupt handler 