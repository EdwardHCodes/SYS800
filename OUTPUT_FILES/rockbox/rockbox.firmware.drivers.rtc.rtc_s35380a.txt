**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * adopted for HD300 by Marcin Bukat
 * Copyright (C) 2009 by Bertrik Sikken
 * Copyright (C) 2008 by Robert Kukla 
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************  Driver for the Seiko S35380A real-time clock chip with i2c interface

    This driver was derived from rtc_s3539a.c and adapted for the MPIO HD300
  STATUS_REG1 flags  STATUS_REG2 flags  REALTIME_DATA register bytes  INT1, INT2 register bytes  INT1, INT2 register bits  s35380a chip has reversed bits order in byte
 * This is little helper function to deal with
  Read 'size' bytes from RTC 'reg' and put data in 'buf'
 * bits are reversed in data bytes afterwards so they appear in regular order
 * return i2c transfer code
  Write 'size' bytes to RTC 'reg' and put data in 'buf'
 * bits are reversed in data bytes prior to sending them to RTC
 * return i2c transfer code
  Reset RTC by writing '1' to RESET bit in STATUS_REG1  Initialize RTC (according to scheme outlined in datasheet).
 * Configure chip to 24h time format.
  cache INT1, INT2 flags as reading the register seem to clear
     * this bits (which is not described in datasheet)
      test POC and BLD flags  test TEST flag  setup 24h time format  Read realtime data register  mask out p.m. flag  Not implemented for now  Write to realtime data register  Set alarm (INT1) data register  INT1 register can be accessed only when IN1AE flag is set  A1mE, A1HE - validity flags  AM/PM flag has to be set properly regardles of
     * time format used (H1224 flag in STATUS_REG1)
     * this is not described in datasheet for s35380a
     * but is somehow described in datasheet for s35390a
      Read alarm (INT1) data register  INT1 alarm register can be accessed only when INT1AE is set  read the content of INT1 register  mask out A1HE and PM/AM bits  mask out A1mE bit  Disable alarm - this is not strictly needed in rockbox
     * as after rtc_get_alarm() rtc_set_alarm() or rtc_enable_alarm(false)
     * are called. I just found this weird that simple reading register
     * changes alarm settings.
      Check if we just triggered alarm.
 * We check both INT1 and INT2. Rockbox uses only INT1 but
 * OF in MPIO HD300 uses both
  Enable/disable alarm function  Return true if wakeup is due to RTC alarm **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * adopted for HD300 by Marcin Bukat
 * Copyright (C) 2009 by Bertrik Sikken
 * Copyright (C) 2008 by Robert Kukla 
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************  Driver for the Seiko S35380A real-time clock chip with i2c interface

    This driver was derived from rtc_s3539a.c and adapted for the MPIO HD300
  STATUS_REG1 flags  STATUS_REG2 flags  REALTIME_DATA register bytes  INT1, INT2 register bytes  INT1, INT2 register bits  s35380a chip has reversed bits order in byte
 * This is little helper function to deal with
  Read 'size' bytes from RTC 'reg' and put data in 'buf'
 * bits are reversed in data bytes afterwards so they appear in regular order
 * return i2c transfer code
  Write 'size' bytes to RTC 'reg' and put data in 'buf'
 * bits are reversed in data bytes prior to sending them to RTC
 * return i2c transfer code
  Reset RTC by writing '1' to RESET bit in STATUS_REG1  Initialize RTC (according to scheme outlined in datasheet).
 * Configure chip to 24h time format.
  cache INT1, INT2 flags as reading the register seem to clear
     * this bits (which is not described in datasheet)
      test POC and BLD flags  test TEST flag  setup 24h time format  Read realtime data register  mask out p.m. flag  Not implemented for now  Write to realtime data register  Set alarm (INT1) data register  INT1 register can be accessed only when IN1AE flag is set  A1mE, A1HE - validity flags  AM/PM flag has to be set properly regardles of
     * time format used (H1224 flag in STATUS_REG1)
     * this is not described in datasheet for s35380a
     * but is somehow described in datasheet for s35390a
      Read alarm (INT1) data register  INT1 alarm register can be accessed only when INT1AE is set  read the content of INT1 register  mask out A1HE and PM/AM bits  mask out A1mE bit  Disable alarm - this is not strictly needed in rockbox
     * as after rtc_get_alarm() rtc_set_alarm() or rtc_enable_alarm(false)
     * are called. I just found this weird that simple reading register
     * changes alarm settings.
      Check if we just triggered alarm.
 * We check both INT1 and INT2. Rockbox uses only INT1 but
 * OF in MPIO HD300 uses both
  Enable/disable alarm function  Return true if wakeup is due to RTC alarm **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * adopted for HD300 by Marcin Bukat
 * Copyright (C) 2009 by Bertrik Sikken
 * Copyright (C) 2008 by Robert Kukla 
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************  Driver for the Seiko S35380A real-time clock chip with i2c interface

    This driver was derived from rtc_s3539a.c and adapted for the MPIO HD300
  STATUS_REG1 flags  STATUS_REG2 flags  REALTIME_DATA register bytes  INT1, INT2 register bytes  INT1, INT2 register bits  s35380a chip has reversed bits order in byte
 * This is little helper function to deal with
  Read 'size' bytes from RTC 'reg' and put data in 'buf'
 * bits are reversed in data bytes afterwards so they appear in regular order
 * return i2c transfer code
  Write 'size' bytes to RTC 'reg' and put data in 'buf'
 * bits are reversed in data bytes prior to sending them to RTC
 * return i2c transfer code
  Reset RTC by writing '1' to RESET bit in STATUS_REG1  Initialize RTC (according to scheme outlined in datasheet).
 * Configure chip to 24h time format.
  cache INT1, INT2 flags as reading the register seem to clear
     * this bits (which is not described in datasheet)
      test POC and BLD flags  test TEST flag  setup 24h time format  Read realtime data register  mask out p.m. flag  Not implemented for now  Write to realtime data register  Set alarm (INT1) data register  INT1 register can be accessed only when IN1AE flag is set  A1mE, A1HE - validity flags  AM/PM flag has to be set properly regardles of
     * time format used (H1224 flag in STATUS_REG1)
     * this is not described in datasheet for s35380a
     * but is somehow described in datasheet for s35390a
      Read alarm (INT1) data register  INT1 alarm register can be accessed only when INT1AE is set  read the content of INT1 register  mask out A1HE and PM/AM bits  mask out A1mE bit  Disable alarm - this is not strictly needed in rockbox
     * as after rtc_get_alarm() rtc_set_alarm() or rtc_enable_alarm(false)
     * are called. I just found this weird that simple reading register
     * changes alarm settings.
      Check if we just triggered alarm.
 * We check both INT1 and INT2. Rockbox uses only INT1 but
 * OF in MPIO HD300 uses both
  Enable/disable alarm function  Return true if wakeup is due to RTC alarm 