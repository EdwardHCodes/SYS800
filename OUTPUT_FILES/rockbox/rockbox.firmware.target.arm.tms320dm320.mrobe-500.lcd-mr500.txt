**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Karl Kurbjun
 *
 * Some of this is based on the Cowon A2 Firmware release:
 * http://www.cowonglobal.com/download/gnu/cowon_pmp_a2_src_1.59_GPL.tar.gz
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** memset16()  Copies a rectangle from one framebuffer to another. Can be used in
   single transfer mode with width = num pixels, and height = 1 which
   allows a full-width rectangle to be copied more efficiently. 
** These are imported from lcd-16bit.c
 Disabling these saves another ~15mA  Disabling the LCD saves ~50mA  pin 36  "enabled" implies "powered"  Wait long enough for a frame to be written  Pin 39 appears to be related to the composite output  Note this is expecting a screen size of 480x640 or 240x320, other screen
 * sizes need to be considered for fudge factors
  LCD init - based on code from ingenient-bsp/bootloader/board/dm320/splash.c
 *  and code by Catalin Patulea from the M:Robe 500i linux port
  LCD off  Set LCD resolution to VGA  Set LCD resolution to QVGA  Enable clocks for display  Clear the Frame  Setup the LCD controller  HSYNC pulse width  VSYNC pulse width  These calculations support 640x480 and 320x240 (based on OF)  Back porch  Data valid  Setup the display  Setup the OSD windows  Used for 565 RGB  read from OF  Unused  This is a bit messy, the LCD transfers appear to happen in chunks of 32
     * pixels. (based on OF)
      LCD on     lcd_enable_composite(false); Turn off the RGB buffer and enable the YUV buffer with zoom  This does a 2x zoom  Turn on the RGB window, set it to 16 bit and turn YUV window off  Addresses are relative to start of SDRAM  Flush the area that is being copied from.  Addresses are relative to start of SDRAM  Enable Image Buffer clock  ...  Give the DMA access to the buffer  Setup buffer offsets and transfer width/height  ...  Set the start address of buffer  Setup SDRAM stride  Addresses are in 16-bit words  Setup the registers to initiate the read from SDRAM  Set direction and start  Wait for read to finish  Set direction and start transfer  Wait for the transfer to complete  Decrease height, update pointers/counters  Disable Image Buffer clock  Calculate starting place  Flush the area that is being copied from.     commit_dcache_range(src, (stride*pix_width*width)); Addresses are relative to start of SDRAM  Enable Image Buffer clock  ...  Give the DMA access to the buffer  Setup buffer offsets and transfer width/height  ...  Set the start address of buffer  Setup SDRAM stride  Addresses are in 16-bit words  Setup the registers to initiate the read from SDRAM  Set direction and start  Wait for read to finish  Set direction and start transfer  Wait for the transfer to complete  update the width, update pointers/counters  Disable Image Buffer clock  Update a fraction of the display.  nothing left to do  Clip right  Clip left  Clip bottom  Clip top  Copy part of the Rockbox framebuffer to the second framebuffer  Not full width - do line-by-line  Full width - copy as one line  Update the display.
   This must be called after all other LCD functions that change the display.     char *dst=(char *)FRAME+x+y*(LCD_NATIVE_WIDTH+LCD_FUDGE); Write in y and cb  Write in the index and cr  Write 256 values in  Performance function to blit a YUV bitmap directly to the LCD  Show it rotated so the LCD_WIDTH is now the height  y has to be on a 16 pixel boundary  Sorry, but width and height must be >= 2 or else  Scope z  Skip down two luma lines-width  Skip down one chroma line-width/2  TODO: TODO: TODO:**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Karl Kurbjun
 *
 * Some of this is based on the Cowon A2 Firmware release:
 * http://www.cowonglobal.com/download/gnu/cowon_pmp_a2_src_1.59_GPL.tar.gz
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** memset16()  Copies a rectangle from one framebuffer to another. Can be used in
   single transfer mode with width = num pixels, and height = 1 which
   allows a full-width rectangle to be copied more efficiently. 
** These are imported from lcd-16bit.c
 Disabling these saves another ~15mA  Disabling the LCD saves ~50mA  pin 36  "enabled" implies "powered"  Wait long enough for a frame to be written  Pin 39 appears to be related to the composite output  Note this is expecting a screen size of 480x640 or 240x320, other screen
 * sizes need to be considered for fudge factors
  LCD init - based on code from ingenient-bsp/bootloader/board/dm320/splash.c
 *  and code by Catalin Patulea from the M:Robe 500i linux port
  LCD off  Set LCD resolution to VGA  Set LCD resolution to QVGA  Enable clocks for display  Clear the Frame  Setup the LCD controller  HSYNC pulse width  VSYNC pulse width  These calculations support 640x480 and 320x240 (based on OF)  Back porch  Data valid  Setup the display  Setup the OSD windows  Used for 565 RGB  read from OF  Unused  This is a bit messy, the LCD transfers appear to happen in chunks of 32
     * pixels. (based on OF)
      LCD on     lcd_enable_composite(false); Turn off the RGB buffer and enable the YUV buffer with zoom  This does a 2x zoom  Turn on the RGB window, set it to 16 bit and turn YUV window off  Addresses are relative to start of SDRAM  Flush the area that is being copied from.  Addresses are relative to start of SDRAM  Enable Image Buffer clock  ...  Give the DMA access to the buffer  Setup buffer offsets and transfer width/height  ...  Set the start address of buffer  Setup SDRAM stride  Addresses are in 16-bit words  Setup the registers to initiate the read from SDRAM  Set direction and start  Wait for read to finish  Set direction and start transfer  Wait for the transfer to complete  Decrease height, update pointers/counters  Disable Image Buffer clock  Calculate starting place  Flush the area that is being copied from.     commit_dcache_range(src, (stride*pix_width*width)); Addresses are relative to start of SDRAM  Enable Image Buffer clock  ...  Give the DMA access to the buffer  Setup buffer offsets and transfer width/height  ...  Set the start address of buffer  Setup SDRAM stride  Addresses are in 16-bit words  Setup the registers to initiate the read from SDRAM  Set direction and start  Wait for read to finish  Set direction and start transfer  Wait for the transfer to complete  update the width, update pointers/counters  Disable Image Buffer clock  Update a fraction of the display.  nothing left to do  Clip right  Clip left  Clip bottom  Clip top  Copy part of the Rockbox framebuffer to the second framebuffer  Not full width - do line-by-line  Full width - copy as one line  Update the display.
   This must be called after all other LCD functions that change the display.     char *dst=(char *)FRAME+x+y*(LCD_NATIVE_WIDTH+LCD_FUDGE); Write in y and cb  Write in the index and cr  Write 256 values in  Performance function to blit a YUV bitmap directly to the LCD  Show it rotated so the LCD_WIDTH is now the height  y has to be on a 16 pixel boundary  Sorry, but width and height must be >= 2 or else  Scope z  Skip down two luma lines-width  Skip down one chroma line-width/2  TODO: TODO: TODO:**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Karl Kurbjun
 *
 * Some of this is based on the Cowon A2 Firmware release:
 * http://www.cowonglobal.com/download/gnu/cowon_pmp_a2_src_1.59_GPL.tar.gz
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** memset16()  Copies a rectangle from one framebuffer to another. Can be used in
   single transfer mode with width = num pixels, and height = 1 which
   allows a full-width rectangle to be copied more efficiently. 
** These are imported from lcd-16bit.c
 Disabling these saves another ~15mA  Disabling the LCD saves ~50mA  pin 36  "enabled" implies "powered"  Wait long enough for a frame to be written  Pin 39 appears to be related to the composite output  Note this is expecting a screen size of 480x640 or 240x320, other screen
 * sizes need to be considered for fudge factors
  LCD init - based on code from ingenient-bsp/bootloader/board/dm320/splash.c
 *  and code by Catalin Patulea from the M:Robe 500i linux port
  LCD off  Set LCD resolution to VGA  Set LCD resolution to QVGA  Enable clocks for display  Clear the Frame  Setup the LCD controller  HSYNC pulse width  VSYNC pulse width  These calculations support 640x480 and 320x240 (based on OF)  Back porch  Data valid  Setup the display  Setup the OSD windows  Used for 565 RGB  read from OF  Unused  This is a bit messy, the LCD transfers appear to happen in chunks of 32
     * pixels. (based on OF)
      LCD on     lcd_enable_composite(false); Turn off the RGB buffer and enable the YUV buffer with zoom  This does a 2x zoom  Turn on the RGB window, set it to 16 bit and turn YUV window off  Addresses are relative to start of SDRAM  Flush the area that is being copied from.  Addresses are relative to start of SDRAM  Enable Image Buffer clock  ...  Give the DMA access to the buffer  Setup buffer offsets and transfer width/height  ...  Set the start address of buffer  Setup SDRAM stride  Addresses are in 16-bit words  Setup the registers to initiate the read from SDRAM  Set direction and start  Wait for read to finish  Set direction and start transfer  Wait for the transfer to complete  Decrease height, update pointers/counters  Disable Image Buffer clock  Calculate starting place  Flush the area that is being copied from.     commit_dcache_range(src, (stride*pix_width*width)); Addresses are relative to start of SDRAM  Enable Image Buffer clock  ...  Give the DMA access to the buffer  Setup buffer offsets and transfer width/height  ...  Set the start address of buffer  Setup SDRAM stride  Addresses are in 16-bit words  Setup the registers to initiate the read from SDRAM  Set direction and start  Wait for read to finish  Set direction and start transfer  Wait for the transfer to complete  update the width, update pointers/counters  Disable Image Buffer clock  Update a fraction of the display.  nothing left to do  Clip right  Clip left  Clip bottom  Clip top  Copy part of the Rockbox framebuffer to the second framebuffer  Not full width - do line-by-line  Full width - copy as one line  Update the display.
   This must be called after all other LCD functions that change the display.     char *dst=(char *)FRAME+x+y*(LCD_NATIVE_WIDTH+LCD_FUDGE); Write in y and cb  Write in the index and cr  Write 256 values in  Performance function to blit a YUV bitmap directly to the LCD  Show it rotated so the LCD_WIDTH is now the height  y has to be on a 16 pixel boundary  Sorry, but width and height must be >= 2 or else  Scope z  Skip down two luma lines-width  Skip down one chroma line-width/2  TODO: TODO: TODO: