**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright © 2008-2009 Rafaël Carré
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** maximum data we can transfer via DMA
                                      * i.e. 32 bits at once (size of I2SO_DATA)
                                      * and the number of 32bits words has to
                                      * fit in 11 bits of DMA register  Pointer to callback buffer  Size of callback buffer  Pointer to sub buffer  Remaining size - in 4*32 bits  size of current subtransfer  Stopping playback gates clock if not recording  Mask the DMA interrupt  Unmask the DMA interrupt if enabled  Might get called again if locked  force writeback  force writeback  Ensure byte counts read back 0  if producer's buffer finished, upper layer starts anew  else unlock calls the callback if sub buffers remain  enable dma, stereo  divider is 9 bits but the highest one (for 8kHz) fit in 8 bits  I2SI_MCLK2PAD_EN = disabled  I2SI_MCLK_EN = disabled  I2SI_MCLK_DIV_SEL = unused  I2SI_MCLK_SEL = clk_main  I2SO_MCLK_EN  I2SO_MCLK_DIV_SEL  I2SO_MCLK_SEL ***************************************************************************
 ** Recording DMA transfer
 * In nonzero, keep the sample; else, discard it  disables all interrupts  I2SIN_MASK_POAF  RX is left-channel-only mono  empty  Discard every other sample since ADC clock is 1/2 LRCK  Data is in left channel only - copy to right channel
                   14-bit => 16-bit samples  In this case, loopback is manual so that both output
                       channels have audio  Sync output fifo so it goes empty not before input is
                           filled  CONFIG_CPU == AS3525  RX is stereo  empty  Discard every other sample since ADC clock is 1/2 LRCK  Loopback is in I2S hardware  14-bit => 16-bit samples  Inform middle layer  disables all interrupts  ensure empty FIFO  push error, pop error  disables all interrupts  14 bits samples, i2c clk src = I2SOUTIF, sdata src = AFE,
     * data valid at positive edge of SCLK  HAVE_RECORDING **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright © 2008-2009 Rafaël Carré
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** maximum data we can transfer via DMA
                                      * i.e. 32 bits at once (size of I2SO_DATA)
                                      * and the number of 32bits words has to
                                      * fit in 11 bits of DMA register  Pointer to callback buffer  Size of callback buffer  Pointer to sub buffer  Remaining size - in 4*32 bits  size of current subtransfer  Stopping playback gates clock if not recording  Mask the DMA interrupt  Unmask the DMA interrupt if enabled  Might get called again if locked  force writeback  force writeback  Ensure byte counts read back 0  if producer's buffer finished, upper layer starts anew  else unlock calls the callback if sub buffers remain  enable dma, stereo  divider is 9 bits but the highest one (for 8kHz) fit in 8 bits  I2SI_MCLK2PAD_EN = disabled  I2SI_MCLK_EN = disabled  I2SI_MCLK_DIV_SEL = unused  I2SI_MCLK_SEL = clk_main  I2SO_MCLK_EN  I2SO_MCLK_DIV_SEL  I2SO_MCLK_SEL ***************************************************************************
 ** Recording DMA transfer
 * In nonzero, keep the sample; else, discard it  disables all interrupts  I2SIN_MASK_POAF  RX is left-channel-only mono  empty  Discard every other sample since ADC clock is 1/2 LRCK  Data is in left channel only - copy to right channel
                   14-bit => 16-bit samples  In this case, loopback is manual so that both output
                       channels have audio  Sync output fifo so it goes empty not before input is
                           filled  CONFIG_CPU == AS3525  RX is stereo  empty  Discard every other sample since ADC clock is 1/2 LRCK  Loopback is in I2S hardware  14-bit => 16-bit samples  Inform middle layer  disables all interrupts  ensure empty FIFO  push error, pop error  disables all interrupts  14 bits samples, i2c clk src = I2SOUTIF, sdata src = AFE,
     * data valid at positive edge of SCLK  HAVE_RECORDING **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright © 2008-2009 Rafaël Carré
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** maximum data we can transfer via DMA
                                      * i.e. 32 bits at once (size of I2SO_DATA)
                                      * and the number of 32bits words has to
                                      * fit in 11 bits of DMA register  Pointer to callback buffer  Size of callback buffer  Pointer to sub buffer  Remaining size - in 4*32 bits  size of current subtransfer  Stopping playback gates clock if not recording  Mask the DMA interrupt  Unmask the DMA interrupt if enabled  Might get called again if locked  force writeback  force writeback  Ensure byte counts read back 0  if producer's buffer finished, upper layer starts anew  else unlock calls the callback if sub buffers remain  enable dma, stereo  divider is 9 bits but the highest one (for 8kHz) fit in 8 bits  I2SI_MCLK2PAD_EN = disabled  I2SI_MCLK_EN = disabled  I2SI_MCLK_DIV_SEL = unused  I2SI_MCLK_SEL = clk_main  I2SO_MCLK_EN  I2SO_MCLK_DIV_SEL  I2SO_MCLK_SEL ***************************************************************************
 ** Recording DMA transfer
 * In nonzero, keep the sample; else, discard it  disables all interrupts  I2SIN_MASK_POAF  RX is left-channel-only mono  empty  Discard every other sample since ADC clock is 1/2 LRCK  Data is in left channel only - copy to right channel
                   14-bit => 16-bit samples  In this case, loopback is manual so that both output
                       channels have audio  Sync output fifo so it goes empty not before input is
                           filled  CONFIG_CPU == AS3525  RX is stereo  empty  Discard every other sample since ADC clock is 1/2 LRCK  Loopback is in I2S hardware  14-bit => 16-bit samples  Inform middle layer  disables all interrupts  ensure empty FIFO  push error, pop error  disables all interrupts  14 bits samples, i2c clk src = I2SOUTIF, sdata src = AFE,
     * data valid at positive edge of SCLK  HAVE_RECORDING 