 uclpack.c -- example program: a simple file packer

   This file is part of the UCL data compression library.

   Copyright (C) 1996-2002 Markus Franz Xaver Johannes Oberhumer
   All Rights Reserved.

   The UCL library is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License as
   published by the Free Software Foundation; either version 2 of
   the License, or (at your option) any later version.

   The UCL library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with the UCL library; see the file COPYING.
   If not, write to the Free Software Foundation, Inc.,
   59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

   Markus F.X.J. Oberhumer
   <markus@oberhumer.com>
 ************************************************************************
// NOTE: this is an example program, so do not use to backup your data
//
// This program lacks things like sophisticated file handling but is
// pretty complete regarding compression - it should provide a good
// starting point for adaption for you applications.
************************************************************************* don't compute or verify checksum, always use fast decompressor  magic file header for compressed files ************************************************************************
// file IO
************************************************************************* read and write portable 32-bit integers ************************************************************************
// util
*************************************************************************************************************************************************
// compress
*************************************************************************
 * Step 1: write magic header, flags & block size, init checksum
  compression method  compression level 
 * Step 2: allocate compression buffers and work-memory
 
 * Step 3: process blocks
  read block  update checksum  compress block  uncompressed  this should NEVER happen  write uncompressed block size  write compressed block  not compressible - write uncompressed block  write EOF marker  write checksum ************************************************************************
// decompress / test
//
// We are using overlapping (in-place) decompression to save some
// memory - see overlap.c.
*************************************************************************
 * Step 1: check magic header, read flags & block size, init checksum
 
 * Step 2: allocate buffer for in-place decompression
 
 * Step 3: process blocks
  read uncompressed size  exit if last block (EOF marker)  read compressed size  sanity check of the size values  place compressed block at the top of the buffer  read compressed block data  decompress - use safe decompressor as data might be corrupted  write decompressed block  update checksum  write original (incompressible) block  update checksum  read and verify checksum ************************************************************************
//
************************************************************************* open input file  open output file  this is an example program, so make sure we don't overwrite a file ************************************************************************
//
*************************************************************************
 * Step 1: initialize the UCL library
 
 * Step 2: get options
 
 * Step 3: process file(s)
  compress 
vi:ts=4:et
 uclpack.c -- example program: a simple file packer

   This file is part of the UCL data compression library.

   Copyright (C) 1996-2002 Markus Franz Xaver Johannes Oberhumer
   All Rights Reserved.

   The UCL library is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License as
   published by the Free Software Foundation; either version 2 of
   the License, or (at your option) any later version.

   The UCL library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with the UCL library; see the file COPYING.
   If not, write to the Free Software Foundation, Inc.,
   59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

   Markus F.X.J. Oberhumer
   <markus@oberhumer.com>
 ************************************************************************
// NOTE: this is an example program, so do not use to backup your data
//
// This program lacks things like sophisticated file handling but is
// pretty complete regarding compression - it should provide a good
// starting point for adaption for you applications.
************************************************************************* don't compute or verify checksum, always use fast decompressor  magic file header for compressed files ************************************************************************
// file IO
************************************************************************* read and write portable 32-bit integers ************************************************************************
// util
*************************************************************************************************************************************************
// compress
*************************************************************************
 * Step 1: write magic header, flags & block size, init checksum
  compression method  compression level 
 * Step 2: allocate compression buffers and work-memory
 
 * Step 3: process blocks
  read block  update checksum  compress block  uncompressed  this should NEVER happen  write uncompressed block size  write compressed block  not compressible - write uncompressed block  write EOF marker  write checksum ************************************************************************
// decompress / test
//
// We are using overlapping (in-place) decompression to save some
// memory - see overlap.c.
*************************************************************************
 * Step 1: check magic header, read flags & block size, init checksum
 
 * Step 2: allocate buffer for in-place decompression
 
 * Step 3: process blocks
  read uncompressed size  exit if last block (EOF marker)  read compressed size  sanity check of the size values  place compressed block at the top of the buffer  read compressed block data  decompress - use safe decompressor as data might be corrupted  write decompressed block  update checksum  write original (incompressible) block  update checksum  read and verify checksum ************************************************************************
//
************************************************************************* open input file  open output file  this is an example program, so make sure we don't overwrite a file ************************************************************************
//
*************************************************************************
 * Step 1: initialize the UCL library
 
 * Step 2: get options
 
 * Step 3: process file(s)
  compress 
vi:ts=4:et
 uclpack.c -- example program: a simple file packer

   This file is part of the UCL data compression library.

   Copyright (C) 1996-2002 Markus Franz Xaver Johannes Oberhumer
   All Rights Reserved.

   The UCL library is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License as
   published by the Free Software Foundation; either version 2 of
   the License, or (at your option) any later version.

   The UCL library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with the UCL library; see the file COPYING.
   If not, write to the Free Software Foundation, Inc.,
   59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

   Markus F.X.J. Oberhumer
   <markus@oberhumer.com>
 ************************************************************************
// NOTE: this is an example program, so do not use to backup your data
//
// This program lacks things like sophisticated file handling but is
// pretty complete regarding compression - it should provide a good
// starting point for adaption for you applications.
************************************************************************* don't compute or verify checksum, always use fast decompressor  magic file header for compressed files ************************************************************************
// file IO
************************************************************************* read and write portable 32-bit integers ************************************************************************
// util
*************************************************************************************************************************************************
// compress
*************************************************************************
 * Step 1: write magic header, flags & block size, init checksum
  compression method  compression level 
 * Step 2: allocate compression buffers and work-memory
 
 * Step 3: process blocks
  read block  update checksum  compress block  uncompressed  this should NEVER happen  write uncompressed block size  write compressed block  not compressible - write uncompressed block  write EOF marker  write checksum ************************************************************************
// decompress / test
//
// We are using overlapping (in-place) decompression to save some
// memory - see overlap.c.
*************************************************************************
 * Step 1: check magic header, read flags & block size, init checksum
 
 * Step 2: allocate buffer for in-place decompression
 
 * Step 3: process blocks
  read uncompressed size  exit if last block (EOF marker)  read compressed size  sanity check of the size values  place compressed block at the top of the buffer  read compressed block data  decompress - use safe decompressor as data might be corrupted  write decompressed block  update checksum  write original (incompressible) block  update checksum  read and verify checksum ************************************************************************
//
************************************************************************* open input file  open output file  this is an example program, so make sure we don't overwrite a file ************************************************************************
//
*************************************************************************
 * Step 1: initialize the UCL library
 
 * Step 2: get options
 
 * Step 3: process file(s)
  compress 
vi:ts=4:et
