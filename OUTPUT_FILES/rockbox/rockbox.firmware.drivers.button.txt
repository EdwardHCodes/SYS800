**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Daniel Stenberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * Rockbox button functions
  lcd_active() prototype  Last valid button status  Last button status, for debouncing/filtering  data value from last message dequeued  buttons can be flipped to match the LCD flip  HAVE_BACKLIGHT  how long until repeat kicks in, in centiseconds  the next two make repeat "accelerate", which is nice for lists
 * which begin to scroll a bit faster when holding until the
 * real list accerelation kicks in (this smoothes acceleration)
  the speed repeat starts at, in centiseconds  speed repeat finishes at, in centiseconds 
 * on touchscreen it's different, scrolling is done by swiping over the
 * screen (potentially very quickly) and is completely different from button
 * targets
 * So, on touchscreen we don't want to artifically slow down early repeats,
 * it'd have the contrary effect of making rockbox appear lagging
  Debouncer for headphone plug/unplug  Try to post only transistions  Debouncer for lineout plug/unplug  Try to post only transistions  one can swipe over the scren very quickly,
     * for this to work we want to forget about old presses and
     * only respect the very latest ones  Only post events if the queue is empty,
     * to avoid afterscroll effects.
     * i.e. don't post new buttons if previous ones haven't been
     * processed yet - but always post releases  on touchscreen we posted unconditionally  Post events for the remote control  Use the autoresetting oneshot to debounce the detection signal  Use the autoresetting oneshot to debounce the detection signal  Find out if a key has been released  normal keypress  repeat? 
                    Power button on these devices reports two distinct key codes, which are
                    triggerd by a short or medium duration press. Additionlly a long duration press
                    will trigger a hard reset, which is hardwired.

                    The time delta between medium and long duration press is not large enough to
                    register here as power off repeat. A hard reset is triggered before Rockbox
                    can power off.

                    To cirumvent the hard reset, Rockbox will shutdown on the first POWEROFF_BUTTON
                    repeat. POWEROFF_BUTTON is associated with the a medium duration press of the
                    power button.
                 yes we have repeat  Send a SYS_POWEROFF event if we have a device
                           which doesn't shut down easily with the OFF
                           key  Tell the main thread that it's time to
                               power off  Safety net for players without hardware
                               poweroff  initial repeat  only coordinates changed, post anyway  Only post repeat events if the queue is empty,
                     * to avoid afterscroll effects.  no backlight, nothing to skip  Loop once after wait time if boosted in order to unboost and wait the
       full remaining time  TIMEOUT_NOBLOCK  TIMEOUT_BLOCK (ticks < 0)  GUI boost build gets immediate kick, otherwise at least 3
               messages had to be there  ndef HAVE_ADJUSTABLE_CPU_FREQ  HAVE_ADJUSTABLE_CPU_FREQ  Init used objects first  hardware inits  Start polling last  BUTTON_DRIVER_CLOSE 
 * helper function to swap LEFT/RIGHT, UP/DOWN (if present), and F1/F3 (Recorder)
  !SIMULATOR 
 * set the flip attribute
 * better only call this when the queue is empty
  not the current setting  avoid race condition with the button_tick()  HAVE_LCD_FLIP 
 * Get button pressed from hardware
  swap upside down  HAVE_LCD_FLIP  Filter the button status. It is only accepted if we get the same
       status twice in a row.  WHEEL_ACCEL_FACTOR = 2^16 / WHEEL_ACCEL_START *
 * data:
 *    [31] Use acceleration
 * [30:24] Message post count (skipped + 1) (1-127)
 *  [23:0] Velocity - degree/sec
 *
 * WHEEL_ACCEL_FACTOR:
 * Value in degree/sec -- configurable via settings -- above which
 * the accelerated scrolling starts. Factor is internally scaled by
 * 1<<16 in respect to the following 32bit integer operations.
  read driver's velocity from data  v = 28.4 fixed point  Calculate real numbers item to scroll based upon acceleration
         * setting, use correct roundoff  HAVE_WHEEL_ACCELERATION **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Daniel Stenberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * Rockbox button functions
  lcd_active() prototype  Last valid button status  Last button status, for debouncing/filtering  data value from last message dequeued  buttons can be flipped to match the LCD flip  HAVE_BACKLIGHT  how long until repeat kicks in, in centiseconds  the next two make repeat "accelerate", which is nice for lists
 * which begin to scroll a bit faster when holding until the
 * real list accerelation kicks in (this smoothes acceleration)
  the speed repeat starts at, in centiseconds  speed repeat finishes at, in centiseconds 
 * on touchscreen it's different, scrolling is done by swiping over the
 * screen (potentially very quickly) and is completely different from button
 * targets
 * So, on touchscreen we don't want to artifically slow down early repeats,
 * it'd have the contrary effect of making rockbox appear lagging
  Debouncer for headphone plug/unplug  Try to post only transistions  Debouncer for lineout plug/unplug  Try to post only transistions  one can swipe over the scren very quickly,
     * for this to work we want to forget about old presses and
     * only respect the very latest ones  Only post events if the queue is empty,
     * to avoid afterscroll effects.
     * i.e. don't post new buttons if previous ones haven't been
     * processed yet - but always post releases  on touchscreen we posted unconditionally  Post events for the remote control  Use the autoresetting oneshot to debounce the detection signal  Use the autoresetting oneshot to debounce the detection signal  Find out if a key has been released  normal keypress  repeat? 
                    Power button on these devices reports two distinct key codes, which are
                    triggerd by a short or medium duration press. Additionlly a long duration press
                    will trigger a hard reset, which is hardwired.

                    The time delta between medium and long duration press is not large enough to
                    register here as power off repeat. A hard reset is triggered before Rockbox
                    can power off.

                    To cirumvent the hard reset, Rockbox will shutdown on the first POWEROFF_BUTTON
                    repeat. POWEROFF_BUTTON is associated with the a medium duration press of the
                    power button.
                 yes we have repeat  Send a SYS_POWEROFF event if we have a device
                           which doesn't shut down easily with the OFF
                           key  Tell the main thread that it's time to
                               power off  Safety net for players without hardware
                               poweroff  initial repeat  only coordinates changed, post anyway  Only post repeat events if the queue is empty,
                     * to avoid afterscroll effects.  no backlight, nothing to skip  Loop once after wait time if boosted in order to unboost and wait the
       full remaining time  TIMEOUT_NOBLOCK  TIMEOUT_BLOCK (ticks < 0)  GUI boost build gets immediate kick, otherwise at least 3
               messages had to be there  ndef HAVE_ADJUSTABLE_CPU_FREQ  HAVE_ADJUSTABLE_CPU_FREQ  Init used objects first  hardware inits  Start polling last  BUTTON_DRIVER_CLOSE 
 * helper function to swap LEFT/RIGHT, UP/DOWN (if present), and F1/F3 (Recorder)
  !SIMULATOR 
 * set the flip attribute
 * better only call this when the queue is empty
  not the current setting  avoid race condition with the button_tick()  HAVE_LCD_FLIP 
 * Get button pressed from hardware
  swap upside down  HAVE_LCD_FLIP  Filter the button status. It is only accepted if we get the same
       status twice in a row.  WHEEL_ACCEL_FACTOR = 2^16 / WHEEL_ACCEL_START *
 * data:
 *    [31] Use acceleration
 * [30:24] Message post count (skipped + 1) (1-127)
 *  [23:0] Velocity - degree/sec
 *
 * WHEEL_ACCEL_FACTOR:
 * Value in degree/sec -- configurable via settings -- above which
 * the accelerated scrolling starts. Factor is internally scaled by
 * 1<<16 in respect to the following 32bit integer operations.
  read driver's velocity from data  v = 28.4 fixed point  Calculate real numbers item to scroll based upon acceleration
         * setting, use correct roundoff  HAVE_WHEEL_ACCELERATION **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 by Daniel Stenberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
 * Rockbox button functions
  lcd_active() prototype  Last valid button status  Last button status, for debouncing/filtering  data value from last message dequeued  buttons can be flipped to match the LCD flip  HAVE_BACKLIGHT  how long until repeat kicks in, in centiseconds  the next two make repeat "accelerate", which is nice for lists
 * which begin to scroll a bit faster when holding until the
 * real list accerelation kicks in (this smoothes acceleration)
  the speed repeat starts at, in centiseconds  speed repeat finishes at, in centiseconds 
 * on touchscreen it's different, scrolling is done by swiping over the
 * screen (potentially very quickly) and is completely different from button
 * targets
 * So, on touchscreen we don't want to artifically slow down early repeats,
 * it'd have the contrary effect of making rockbox appear lagging
  Debouncer for headphone plug/unplug  Try to post only transistions  Debouncer for lineout plug/unplug  Try to post only transistions  one can swipe over the scren very quickly,
     * for this to work we want to forget about old presses and
     * only respect the very latest ones  Only post events if the queue is empty,
     * to avoid afterscroll effects.
     * i.e. don't post new buttons if previous ones haven't been
     * processed yet - but always post releases  on touchscreen we posted unconditionally  Post events for the remote control  Use the autoresetting oneshot to debounce the detection signal  Use the autoresetting oneshot to debounce the detection signal  Find out if a key has been released  normal keypress  repeat? 
                    Power button on these devices reports two distinct key codes, which are
                    triggerd by a short or medium duration press. Additionlly a long duration press
                    will trigger a hard reset, which is hardwired.

                    The time delta between medium and long duration press is not large enough to
                    register here as power off repeat. A hard reset is triggered before Rockbox
                    can power off.

                    To cirumvent the hard reset, Rockbox will shutdown on the first POWEROFF_BUTTON
                    repeat. POWEROFF_BUTTON is associated with the a medium duration press of the
                    power button.
                 yes we have repeat  Send a SYS_POWEROFF event if we have a device
                           which doesn't shut down easily with the OFF
                           key  Tell the main thread that it's time to
                               power off  Safety net for players without hardware
                               poweroff  initial repeat  only coordinates changed, post anyway  Only post repeat events if the queue is empty,
                     * to avoid afterscroll effects.  no backlight, nothing to skip  Loop once after wait time if boosted in order to unboost and wait the
       full remaining time  TIMEOUT_NOBLOCK  TIMEOUT_BLOCK (ticks < 0)  GUI boost build gets immediate kick, otherwise at least 3
               messages had to be there  ndef HAVE_ADJUSTABLE_CPU_FREQ  HAVE_ADJUSTABLE_CPU_FREQ  Init used objects first  hardware inits  Start polling last  BUTTON_DRIVER_CLOSE 
 * helper function to swap LEFT/RIGHT, UP/DOWN (if present), and F1/F3 (Recorder)
  !SIMULATOR 
 * set the flip attribute
 * better only call this when the queue is empty
  not the current setting  avoid race condition with the button_tick()  HAVE_LCD_FLIP 
 * Get button pressed from hardware
  swap upside down  HAVE_LCD_FLIP  Filter the button status. It is only accepted if we get the same
       status twice in a row.  WHEEL_ACCEL_FACTOR = 2^16 / WHEEL_ACCEL_START *
 * data:
 *    [31] Use acceleration
 * [30:24] Message post count (skipped + 1) (1-127)
 *  [23:0] Velocity - degree/sec
 *
 * WHEEL_ACCEL_FACTOR:
 * Value in degree/sec -- configurable via settings -- above which
 * the accelerated scrolling starts. Factor is internally scaled by
 * 1<<16 in respect to the following 32bit integer operations.
  read driver's velocity from data  v = 28.4 fixed point  Calculate real numbers item to scroll based upon acceleration
         * setting, use correct roundoff  HAVE_WHEEL_ACCELERATION 