**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Antonius Hellmann
 * Copyright (C) 2006-2013 Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** 00h - "RIFF"                             04h - sz following headers + data_size   format header  08h - "WAVE"                             0Ch - "fmt "                             10h - 16 for PCM (sz format data)        format data  14h - 1=PCM                              16h - 1=M, 2=S, etc.                     18h - HZ                                 1Ch - num_channels*sample_rate*bits_per_sample/8  20h - num_channels*bits_per_samples/8    22h - 8=8 bits, 16=16 bits, etc.         Not for audio_format=1 (PCM)   uint16_t extra_param_size;   24h - size of extra data                  uint8_t  extra_params[extra_param_size];                              data header  24h - "data"  28h - num_samples*num_channels*bits_per_sample/8   uint8_t  data[data_size];    2Ch - actual sound data  format -> format_size  audio_format -> bits_per_sample  data_id -> data_size  "RIFF" header  riff_id           riff_size    (*)  format header  format            format_id         format_size       format data  audio_format      num_channels (*)  sample_rate  (*)  byte_rate    (*)  block_align  (*)  bits_per_sample   data header  data_id           data_size    (*)  (*) updated when finalizing stream  Byte-swap samples, stereo or mono  ROCKBOX_BIG_ENDIAN  reset sample count  write template header  update template header  Called for stream error; get correct data size  "RIFF" header  format data  data header  this is the codec entry point  this is called for each file to process  main encoding loop  First obtain output buffer; when available, get PCM data  this is called by recording system **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Antonius Hellmann
 * Copyright (C) 2006-2013 Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** 00h - "RIFF"                             04h - sz following headers + data_size   format header  08h - "WAVE"                             0Ch - "fmt "                             10h - 16 for PCM (sz format data)        format data  14h - 1=PCM                              16h - 1=M, 2=S, etc.                     18h - HZ                                 1Ch - num_channels*sample_rate*bits_per_sample/8  20h - num_channels*bits_per_samples/8    22h - 8=8 bits, 16=16 bits, etc.         Not for audio_format=1 (PCM)   uint16_t extra_param_size;   24h - size of extra data                  uint8_t  extra_params[extra_param_size];                              data header  24h - "data"  28h - num_samples*num_channels*bits_per_sample/8   uint8_t  data[data_size];    2Ch - actual sound data  format -> format_size  audio_format -> bits_per_sample  data_id -> data_size  "RIFF" header  riff_id           riff_size    (*)  format header  format            format_id         format_size       format data  audio_format      num_channels (*)  sample_rate  (*)  byte_rate    (*)  block_align  (*)  bits_per_sample   data header  data_id           data_size    (*)  (*) updated when finalizing stream  Byte-swap samples, stereo or mono  ROCKBOX_BIG_ENDIAN  reset sample count  write template header  update template header  Called for stream error; get correct data size  "RIFF" header  format data  data header  this is the codec entry point  this is called for each file to process  main encoding loop  First obtain output buffer; when available, get PCM data  this is called by recording system **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Antonius Hellmann
 * Copyright (C) 2006-2013 Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** 00h - "RIFF"                             04h - sz following headers + data_size   format header  08h - "WAVE"                             0Ch - "fmt "                             10h - 16 for PCM (sz format data)        format data  14h - 1=PCM                              16h - 1=M, 2=S, etc.                     18h - HZ                                 1Ch - num_channels*sample_rate*bits_per_sample/8  20h - num_channels*bits_per_samples/8    22h - 8=8 bits, 16=16 bits, etc.         Not for audio_format=1 (PCM)   uint16_t extra_param_size;   24h - size of extra data                  uint8_t  extra_params[extra_param_size];                              data header  24h - "data"  28h - num_samples*num_channels*bits_per_sample/8   uint8_t  data[data_size];    2Ch - actual sound data  format -> format_size  audio_format -> bits_per_sample  data_id -> data_size  "RIFF" header  riff_id           riff_size    (*)  format header  format            format_id         format_size       format data  audio_format      num_channels (*)  sample_rate  (*)  byte_rate    (*)  block_align  (*)  bits_per_sample   data header  data_id           data_size    (*)  (*) updated when finalizing stream  Byte-swap samples, stereo or mono  ROCKBOX_BIG_ENDIAN  reset sample count  write template header  update template header  Called for stream error; get correct data size  "RIFF" header  format data  data header  this is the codec entry point  this is called for each file to process  main encoding loop  First obtain output buffer; when available, get PCM data  this is called by recording system 