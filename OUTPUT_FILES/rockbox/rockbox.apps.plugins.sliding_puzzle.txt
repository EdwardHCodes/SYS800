**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 Vicentini Martin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** variable button definitions  use a square image, (the default Archos bitmap looks square on its display)
   Puzzle image dimension is min(lcd_height,lcd_width)
   4x4 is more convenient for square puzzles
   Note: sliding_puzzle.bmp should be evenly divisible by SPOTS_X
   and SPOTS_Y, otherwise lcd_bitmap_part stride won't be correct     PICMODE_RANDOM, placeholder  initial_bmp_path points to selected bitmap if this game is launched
   as a viewer for a .bmp file, or NULL if game is launched regular way  unused  initially assume using the built-in default  some modes don't even need to touch disk and trivially succeed 
        case PICMODE_RANDOM:
            if(NULL == (filename=get_random_bmp_path()) )
                filename = initial_bmp_path;
            break;
 if we already loaded image before, don't touch disk  something must have failed. get_albumart_bmp_path could return
       NULL if albumart doesn't exist or couldn't be loaded, or
       read_bmp_file could have failed.  return false and caller should
       try the next mode (PICMODE_DEFAULT_PICTURE and PICMODE_NUMERALS will
       always succeed)  draws a spot at the coordinates (x,y), range of p is 1-20  the bottom-right cell of the default sliding_puzzle image is
           an appropriate hole graphic  just draw a black rectangle  check if the puzzle is solved  move a piece in any direction  draw spots to the lcd  initializes the puzzle  shuffle spots  test if the puzzle is solvable  First, check if the problem has even or odd parity,
       depending on where the empty square is  Now check how many swaps we need to solve it  if the random puzzle isn't solvable just change two spots  the main game loop  get out of here  mix up the pieces  change picture  if load_resize_bitmap fails to load bitmap, try next picmode
                 tell the user what mode we picked in the end!  If launched as a viewer, just go straight to the game without
       bothering with the splash or instructions page  if not launched as a viewer, use default puzzle, and show help  print title  print instructions  Calculate possible font sizes and text positions **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 Vicentini Martin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** variable button definitions  use a square image, (the default Archos bitmap looks square on its display)
   Puzzle image dimension is min(lcd_height,lcd_width)
   4x4 is more convenient for square puzzles
   Note: sliding_puzzle.bmp should be evenly divisible by SPOTS_X
   and SPOTS_Y, otherwise lcd_bitmap_part stride won't be correct     PICMODE_RANDOM, placeholder  initial_bmp_path points to selected bitmap if this game is launched
   as a viewer for a .bmp file, or NULL if game is launched regular way  unused  initially assume using the built-in default  some modes don't even need to touch disk and trivially succeed 
        case PICMODE_RANDOM:
            if(NULL == (filename=get_random_bmp_path()) )
                filename = initial_bmp_path;
            break;
 if we already loaded image before, don't touch disk  something must have failed. get_albumart_bmp_path could return
       NULL if albumart doesn't exist or couldn't be loaded, or
       read_bmp_file could have failed.  return false and caller should
       try the next mode (PICMODE_DEFAULT_PICTURE and PICMODE_NUMERALS will
       always succeed)  draws a spot at the coordinates (x,y), range of p is 1-20  the bottom-right cell of the default sliding_puzzle image is
           an appropriate hole graphic  just draw a black rectangle  check if the puzzle is solved  move a piece in any direction  draw spots to the lcd  initializes the puzzle  shuffle spots  test if the puzzle is solvable  First, check if the problem has even or odd parity,
       depending on where the empty square is  Now check how many swaps we need to solve it  if the random puzzle isn't solvable just change two spots  the main game loop  get out of here  mix up the pieces  change picture  if load_resize_bitmap fails to load bitmap, try next picmode
                 tell the user what mode we picked in the end!  If launched as a viewer, just go straight to the game without
       bothering with the splash or instructions page  if not launched as a viewer, use default puzzle, and show help  print title  print instructions  Calculate possible font sizes and text positions **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002 Vicentini Martin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** variable button definitions  use a square image, (the default Archos bitmap looks square on its display)
   Puzzle image dimension is min(lcd_height,lcd_width)
   4x4 is more convenient for square puzzles
   Note: sliding_puzzle.bmp should be evenly divisible by SPOTS_X
   and SPOTS_Y, otherwise lcd_bitmap_part stride won't be correct     PICMODE_RANDOM, placeholder  initial_bmp_path points to selected bitmap if this game is launched
   as a viewer for a .bmp file, or NULL if game is launched regular way  unused  initially assume using the built-in default  some modes don't even need to touch disk and trivially succeed 
        case PICMODE_RANDOM:
            if(NULL == (filename=get_random_bmp_path()) )
                filename = initial_bmp_path;
            break;
 if we already loaded image before, don't touch disk  something must have failed. get_albumart_bmp_path could return
       NULL if albumart doesn't exist or couldn't be loaded, or
       read_bmp_file could have failed.  return false and caller should
       try the next mode (PICMODE_DEFAULT_PICTURE and PICMODE_NUMERALS will
       always succeed)  draws a spot at the coordinates (x,y), range of p is 1-20  the bottom-right cell of the default sliding_puzzle image is
           an appropriate hole graphic  just draw a black rectangle  check if the puzzle is solved  move a piece in any direction  draw spots to the lcd  initializes the puzzle  shuffle spots  test if the puzzle is solvable  First, check if the problem has even or odd parity,
       depending on where the empty square is  Now check how many swaps we need to solve it  if the random puzzle isn't solvable just change two spots  the main game loop  get out of here  mix up the pieces  change picture  if load_resize_bitmap fails to load bitmap, try next picmode
                 tell the user what mode we picked in the end!  If launched as a viewer, just go straight to the game without
       bothering with the splash or instructions page  if not launched as a viewer, use default puzzle, and show help  print title  print instructions  Calculate possible font sizes and text positions 