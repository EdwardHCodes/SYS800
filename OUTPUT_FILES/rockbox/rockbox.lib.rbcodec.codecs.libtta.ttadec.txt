
 * ttadec.c
 *
 * Description:  TTAv1 decoder library for HW players
 * Developed by: Alexander Djourik <ald@true-audio.com>
 *               Pavel Zhilin <pzh@true-audio.com>
 *
 * Copyright (c) 2004 True Audio Software. All rights reserved.
 *
 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the True Audio Software nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ****************** static variables and structures ****************** decoder state  Rockbox speciffic: cache is defined in get_samples() (non static value)  static int     cache[MAX_NCH];   // decoder cache  currently playing file info  number of frames in file  the frame length in samples  the length of the last frame in samples  currently playing frame index  the playing position in frame  output data max value  Rockbox speciffic: seek_table is static size  the playing position table  seek table status  Rockbox speciffic: deletes read_id3_tags().  static int read_id3_tags (tta_info *info); ******************** rockbox helper functions ************************ emulate stdio functions ************************ crc32 functions **************************************************** bit operations ***************************************************** rice operations ***************************************************** buffer functions ***************************************************** decoder functions *************************** rockbox: not used
const char *get_error_str (int error) {
    switch (error) {
    case NO_ERROR:      return "No errors found";
    case OPEN_ERROR:    return "Can't open file";
    case FORMAT_ERROR:  return "Not supported file format";
    case FILE_ERROR:    return "File is corrupted";
    case READ_ERROR:    return "Can't read from file";
    case MEMORY_ERROR:  return "Insufficient memory available";
    default:            return "Unknown error code";
    }
}  clear the memory  skip id3v2 tags  read TTA header  check for TTA3 signature  check for player supported formats  fill the File Info  info->COMPRESS = (double) datasize / origsize;  init bit reader  signed integer mode 
     * Rockbox speciffic
     *    playable tta file is to MAX_SEEK_TABLE_SIZE frames
     *    about 1:08:15 (frequency 44.1 kHz)
      read seek table  init seek table  init bit reader 
     * Rockbox speciffic
     *    because pcm data is int32_t, does not multiply ttainfo->BSIZE.
     
 * Rockbox specffic
 *    because the seek table is static size buffer, player_stop() is nooperation function.
 
    if (seek_table) {
        free(seek_table);
        seek_table = NULL;
    }

 * Rockbox speciffic
 *   with the optimization, the decoding logic is modify a little.
  decoder cache  decode Rice unsigned  Rockbox specific: the following logic move to update_rice()  decompress stage 1: adaptive hybrid filter  decompress stage 2: fixed order 1 prediction  check for errors  Rockbox speciffic: Rockbox supports max 2channels  Rockbox speciffic: id3 tags functions delete.  eof 
 * ttadec.c
 *
 * Description:  TTAv1 decoder library for HW players
 * Developed by: Alexander Djourik <ald@true-audio.com>
 *               Pavel Zhilin <pzh@true-audio.com>
 *
 * Copyright (c) 2004 True Audio Software. All rights reserved.
 *
 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the True Audio Software nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ****************** static variables and structures ****************** decoder state  Rockbox speciffic: cache is defined in get_samples() (non static value)  static int     cache[MAX_NCH];   // decoder cache  currently playing file info  number of frames in file  the frame length in samples  the length of the last frame in samples  currently playing frame index  the playing position in frame  output data max value  Rockbox speciffic: seek_table is static size  the playing position table  seek table status  Rockbox speciffic: deletes read_id3_tags().  static int read_id3_tags (tta_info *info); ******************** rockbox helper functions ************************ emulate stdio functions ************************ crc32 functions **************************************************** bit operations ***************************************************** rice operations ***************************************************** buffer functions ***************************************************** decoder functions *************************** rockbox: not used
const char *get_error_str (int error) {
    switch (error) {
    case NO_ERROR:      return "No errors found";
    case OPEN_ERROR:    return "Can't open file";
    case FORMAT_ERROR:  return "Not supported file format";
    case FILE_ERROR:    return "File is corrupted";
    case READ_ERROR:    return "Can't read from file";
    case MEMORY_ERROR:  return "Insufficient memory available";
    default:            return "Unknown error code";
    }
}  clear the memory  skip id3v2 tags  read TTA header  check for TTA3 signature  check for player supported formats  fill the File Info  info->COMPRESS = (double) datasize / origsize;  init bit reader  signed integer mode 
     * Rockbox speciffic
     *    playable tta file is to MAX_SEEK_TABLE_SIZE frames
     *    about 1:08:15 (frequency 44.1 kHz)
      read seek table  init seek table  init bit reader 
     * Rockbox speciffic
     *    because pcm data is int32_t, does not multiply ttainfo->BSIZE.
     
 * Rockbox specffic
 *    because the seek table is static size buffer, player_stop() is nooperation function.
 
    if (seek_table) {
        free(seek_table);
        seek_table = NULL;
    }

 * Rockbox speciffic
 *   with the optimization, the decoding logic is modify a little.
  decoder cache  decode Rice unsigned  Rockbox specific: the following logic move to update_rice()  decompress stage 1: adaptive hybrid filter  decompress stage 2: fixed order 1 prediction  check for errors  Rockbox speciffic: Rockbox supports max 2channels  Rockbox speciffic: id3 tags functions delete.  eof 
 * ttadec.c
 *
 * Description:  TTAv1 decoder library for HW players
 * Developed by: Alexander Djourik <ald@true-audio.com>
 *               Pavel Zhilin <pzh@true-audio.com>
 *
 * Copyright (c) 2004 True Audio Software. All rights reserved.
 *
 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the True Audio Software nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ****************** static variables and structures ****************** decoder state  Rockbox speciffic: cache is defined in get_samples() (non static value)  static int     cache[MAX_NCH];   // decoder cache  currently playing file info  number of frames in file  the frame length in samples  the length of the last frame in samples  currently playing frame index  the playing position in frame  output data max value  Rockbox speciffic: seek_table is static size  the playing position table  seek table status  Rockbox speciffic: deletes read_id3_tags().  static int read_id3_tags (tta_info *info); ******************** rockbox helper functions ************************ emulate stdio functions ************************ crc32 functions **************************************************** bit operations ***************************************************** rice operations ***************************************************** buffer functions ***************************************************** decoder functions *************************** rockbox: not used
const char *get_error_str (int error) {
    switch (error) {
    case NO_ERROR:      return "No errors found";
    case OPEN_ERROR:    return "Can't open file";
    case FORMAT_ERROR:  return "Not supported file format";
    case FILE_ERROR:    return "File is corrupted";
    case READ_ERROR:    return "Can't read from file";
    case MEMORY_ERROR:  return "Insufficient memory available";
    default:            return "Unknown error code";
    }
}  clear the memory  skip id3v2 tags  read TTA header  check for TTA3 signature  check for player supported formats  fill the File Info  info->COMPRESS = (double) datasize / origsize;  init bit reader  signed integer mode 
     * Rockbox speciffic
     *    playable tta file is to MAX_SEEK_TABLE_SIZE frames
     *    about 1:08:15 (frequency 44.1 kHz)
      read seek table  init seek table  init bit reader 
     * Rockbox speciffic
     *    because pcm data is int32_t, does not multiply ttainfo->BSIZE.
     
 * Rockbox specffic
 *    because the seek table is static size buffer, player_stop() is nooperation function.
 
    if (seek_table) {
        free(seek_table);
        seek_table = NULL;
    }

 * Rockbox speciffic
 *   with the optimization, the decoding logic is modify a little.
  decoder cache  decode Rice unsigned  Rockbox specific: the following logic move to update_rice()  decompress stage 1: adaptive hybrid filter  decompress stage 2: fixed order 1 prediction  check for errors  Rockbox speciffic: Rockbox supports max 2channels  Rockbox speciffic: id3 tags functions delete.  eof 