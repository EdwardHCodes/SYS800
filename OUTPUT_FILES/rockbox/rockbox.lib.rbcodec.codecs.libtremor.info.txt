*******************************************************************
 *                                                                  *
 * THIS FILE IS PART OF THE OggVorbis 'TREMOR' CODEC SOURCE CODE.   *
 *                                                                  *
 * USE, DISTRIBUTION AND REPRODUCTION OF THIS LIBRARY SOURCE IS     *
 * GOVERNED BY A BSD-STYLE SOURCE LICENSE INCLUDED WITH THIS SOURCE *
 * IN 'COPYING'. PLEASE READ THESE TERMS BEFORE DISTRIBUTING.       *
 *                                                                  *
 * THE OggVorbis 'TREMOR' SOURCE CODE IS (C) COPYRIGHT 1994-2003    *
 * BY THE Xiph.Org FOUNDATION http://www.xiph.org/                  *
 *                                                                  *
 ********************************************************************

 function: maintain the info structure, info <-> header packets

 ******************************************************************* general handling of the header and the vorbis_info structure (and
   substructures)  helpers 
void vorbis_comment_init(vorbis_comment *vc){
  memset(vc,0,sizeof(*vc));
}

void vorbis_comment_clear(vorbis_comment *vc){
  if(vc){
    long i;
    if(vc->user_comments){
      for(i=0;i<vc->comments;i++)
        if(vc->user_comments[i])_ogg_free(vc->user_comments[i]);
      _ogg_free(vc->user_comments);
    }
    if(vc->comment_lengths)_ogg_free(vc->comment_lengths);
    if(vc->vendor)_ogg_free(vc->vendor);
    memset(vc,0,sizeof(*vc));
  }
}
 blocksize 0 is guaranteed to be short, 1 is guarantted to be long.
   They may be equal, but short will never ge greater than long  used by synthesis, which has a full, alloced vi  unpack does the range checking  unpack does the range checking  unpack does the range checking  knows if the book was not alloced  Header packing/unpacking ******************************************* EOP check  ROCKBOX: the meat of this function was deleted as we don't need it  all of the real encoding details are here.  The modes, books,
   everything  codebooks  time backend settings  ci->time_param[i]=_time_P[ci->time_type[i]]->unpack(vi,opb);
       Vorbis I has no time backend if(!ci->time_param[i])goto err_out; floor backend settings  residue backend settings  map backend settings  mode settings  top level EOP check  Is this packet a vorbis ID header?  Not the initial packet  not an ID header  not vorbis  The Vorbis header is in three packets; the initial small packet in
   the first page that identifies basic parameters, a second packet
   with bitstream comments and a third packet that holds the
   codebook.  Which of the three types of header is this?  Also verify header-ness, vorbis  not a vorbis header  least significant *bit* is read first  Not the initial packet  previously initialized info header  least significant *bit* is read first  um... we didn't get the initial header return(_vorbis_unpack_comment(vc,&opb)); least significant *bit* is read first || vc->vendor==NULL um... we didn;t get the initial header or comments yet  Not a valid vorbis header type *******************************************************************
 *                                                                  *
 * THIS FILE IS PART OF THE OggVorbis 'TREMOR' CODEC SOURCE CODE.   *
 *                                                                  *
 * USE, DISTRIBUTION AND REPRODUCTION OF THIS LIBRARY SOURCE IS     *
 * GOVERNED BY A BSD-STYLE SOURCE LICENSE INCLUDED WITH THIS SOURCE *
 * IN 'COPYING'. PLEASE READ THESE TERMS BEFORE DISTRIBUTING.       *
 *                                                                  *
 * THE OggVorbis 'TREMOR' SOURCE CODE IS (C) COPYRIGHT 1994-2003    *
 * BY THE Xiph.Org FOUNDATION http://www.xiph.org/                  *
 *                                                                  *
 ********************************************************************

 function: maintain the info structure, info <-> header packets

 ******************************************************************* general handling of the header and the vorbis_info structure (and
   substructures)  helpers 
void vorbis_comment_init(vorbis_comment *vc){
  memset(vc,0,sizeof(*vc));
}

void vorbis_comment_clear(vorbis_comment *vc){
  if(vc){
    long i;
    if(vc->user_comments){
      for(i=0;i<vc->comments;i++)
        if(vc->user_comments[i])_ogg_free(vc->user_comments[i]);
      _ogg_free(vc->user_comments);
    }
    if(vc->comment_lengths)_ogg_free(vc->comment_lengths);
    if(vc->vendor)_ogg_free(vc->vendor);
    memset(vc,0,sizeof(*vc));
  }
}
 blocksize 0 is guaranteed to be short, 1 is guarantted to be long.
   They may be equal, but short will never ge greater than long  used by synthesis, which has a full, alloced vi  unpack does the range checking  unpack does the range checking  unpack does the range checking  knows if the book was not alloced  Header packing/unpacking ******************************************* EOP check  ROCKBOX: the meat of this function was deleted as we don't need it  all of the real encoding details are here.  The modes, books,
   everything  codebooks  time backend settings  ci->time_param[i]=_time_P[ci->time_type[i]]->unpack(vi,opb);
       Vorbis I has no time backend if(!ci->time_param[i])goto err_out; floor backend settings  residue backend settings  map backend settings  mode settings  top level EOP check  Is this packet a vorbis ID header?  Not the initial packet  not an ID header  not vorbis  The Vorbis header is in three packets; the initial small packet in
   the first page that identifies basic parameters, a second packet
   with bitstream comments and a third packet that holds the
   codebook.  Which of the three types of header is this?  Also verify header-ness, vorbis  not a vorbis header  least significant *bit* is read first  Not the initial packet  previously initialized info header  least significant *bit* is read first  um... we didn't get the initial header return(_vorbis_unpack_comment(vc,&opb)); least significant *bit* is read first || vc->vendor==NULL um... we didn;t get the initial header or comments yet  Not a valid vorbis header type *******************************************************************
 *                                                                  *
 * THIS FILE IS PART OF THE OggVorbis 'TREMOR' CODEC SOURCE CODE.   *
 *                                                                  *
 * USE, DISTRIBUTION AND REPRODUCTION OF THIS LIBRARY SOURCE IS     *
 * GOVERNED BY A BSD-STYLE SOURCE LICENSE INCLUDED WITH THIS SOURCE *
 * IN 'COPYING'. PLEASE READ THESE TERMS BEFORE DISTRIBUTING.       *
 *                                                                  *
 * THE OggVorbis 'TREMOR' SOURCE CODE IS (C) COPYRIGHT 1994-2003    *
 * BY THE Xiph.Org FOUNDATION http://www.xiph.org/                  *
 *                                                                  *
 ********************************************************************

 function: maintain the info structure, info <-> header packets

 ******************************************************************* general handling of the header and the vorbis_info structure (and
   substructures)  helpers 
void vorbis_comment_init(vorbis_comment *vc){
  memset(vc,0,sizeof(*vc));
}

void vorbis_comment_clear(vorbis_comment *vc){
  if(vc){
    long i;
    if(vc->user_comments){
      for(i=0;i<vc->comments;i++)
        if(vc->user_comments[i])_ogg_free(vc->user_comments[i]);
      _ogg_free(vc->user_comments);
    }
    if(vc->comment_lengths)_ogg_free(vc->comment_lengths);
    if(vc->vendor)_ogg_free(vc->vendor);
    memset(vc,0,sizeof(*vc));
  }
}
 blocksize 0 is guaranteed to be short, 1 is guarantted to be long.
   They may be equal, but short will never ge greater than long  used by synthesis, which has a full, alloced vi  unpack does the range checking  unpack does the range checking  unpack does the range checking  knows if the book was not alloced  Header packing/unpacking ******************************************* EOP check  ROCKBOX: the meat of this function was deleted as we don't need it  all of the real encoding details are here.  The modes, books,
   everything  codebooks  time backend settings  ci->time_param[i]=_time_P[ci->time_type[i]]->unpack(vi,opb);
       Vorbis I has no time backend if(!ci->time_param[i])goto err_out; floor backend settings  residue backend settings  map backend settings  mode settings  top level EOP check  Is this packet a vorbis ID header?  Not the initial packet  not an ID header  not vorbis  The Vorbis header is in three packets; the initial small packet in
   the first page that identifies basic parameters, a second packet
   with bitstream comments and a third packet that holds the
   codebook.  Which of the three types of header is this?  Also verify header-ness, vorbis  not a vorbis header  least significant *bit* is read first  Not the initial packet  previously initialized info header  least significant *bit* is read first  um... we didn't get the initial header return(_vorbis_unpack_comment(vc,&opb)); least significant *bit* is read first || vc->vendor==NULL um... we didn;t get the initial header or comments yet  Not a valid vorbis header type 