
 * hw_interrupt changes the virtual interrupt lines included in the
 * specified mask to the values the corresponding bits in i take, and
 * in doing so, raises the appropriate bit of R_IF for any interrupt
 * lines that transition from low to high.
  FIXME - is this correct? not sure the docs understand...  if ((i & (hw.ilines ^ i) & R_IE) && cpu.ime) cpu.halt = 0;  if ((i & R_IE) && cpu.ime) cpu.halt = 0; 
 * hw_dma performs plain old memory-to-oam dma, the original dmg
 * dma. Although on the hardware it takes a good deal of time, the cpu
 * continues running during this mode of dma, so no special tricks to
 * stall the cpu are necessary.
  Begin or cancel HDMA  Perform GDMA  FIXME - this should use cpu time! cpu_timers(102 * cnt);daliascpu_timers(228 + (16*cnt)); this should be right according to no$ 
 * pad_refresh updates the P1 register from the pad states, generating
 * the appropriate interrupts (by quickly raising and lowering the
 * interrupt line) if a transition has been made.
 
 * These simple functions just update the state of a button on the
 * pad.
 
 * hw_interrupt changes the virtual interrupt lines included in the
 * specified mask to the values the corresponding bits in i take, and
 * in doing so, raises the appropriate bit of R_IF for any interrupt
 * lines that transition from low to high.
  FIXME - is this correct? not sure the docs understand...  if ((i & (hw.ilines ^ i) & R_IE) && cpu.ime) cpu.halt = 0;  if ((i & R_IE) && cpu.ime) cpu.halt = 0; 
 * hw_dma performs plain old memory-to-oam dma, the original dmg
 * dma. Although on the hardware it takes a good deal of time, the cpu
 * continues running during this mode of dma, so no special tricks to
 * stall the cpu are necessary.
  Begin or cancel HDMA  Perform GDMA  FIXME - this should use cpu time! cpu_timers(102 * cnt);daliascpu_timers(228 + (16*cnt)); this should be right according to no$ 
 * pad_refresh updates the P1 register from the pad states, generating
 * the appropriate interrupts (by quickly raising and lowering the
 * interrupt line) if a transition has been made.
 
 * These simple functions just update the state of a button on the
 * pad.
 
 * hw_interrupt changes the virtual interrupt lines included in the
 * specified mask to the values the corresponding bits in i take, and
 * in doing so, raises the appropriate bit of R_IF for any interrupt
 * lines that transition from low to high.
  FIXME - is this correct? not sure the docs understand...  if ((i & (hw.ilines ^ i) & R_IE) && cpu.ime) cpu.halt = 0;  if ((i & R_IE) && cpu.ime) cpu.halt = 0; 
 * hw_dma performs plain old memory-to-oam dma, the original dmg
 * dma. Although on the hardware it takes a good deal of time, the cpu
 * continues running during this mode of dma, so no special tricks to
 * stall the cpu are necessary.
  Begin or cancel HDMA  Perform GDMA  FIXME - this should use cpu time! cpu_timers(102 * cnt);daliascpu_timers(228 + (16*cnt)); this should be right according to no$ 
 * pad_refresh updates the P1 register from the pad states, generating
 * the appropriate interrupts (by quickly raising and lowering the
 * interrupt line) if a transition has been made.
 
 * These simple functions just update the state of a button on the
 * pad.
 