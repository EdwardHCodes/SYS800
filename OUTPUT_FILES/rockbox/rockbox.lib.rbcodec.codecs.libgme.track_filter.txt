 Game_Music_Emu 0.6-pre. http://www.slack.net/~ant/ Copyright (C) 2003-2008 Shay Green. This module is free software; you
can redistribute it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version. This
module is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
details. You should have received a copy of the GNU Lesser General Public
License along with this module; if not, write to the Free Software Foundation,
Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA  fade ends with gain at 1.0 / (1 << fade_shift) play until non-silence or end of track remove from silence and buf first would otherwise be invalid caught up to emulator, so update track ended Fading unit / pow( 2.0, (double) x / step ) Silence detection number of consecutive silent samples at end sentinel fill internal buffer and check it for silence prints nifty graph of how far ahead we are when searching for silencedprintf( "%*s \n", int ((emu_time - out_time) * 7 / 44100), "*" ); use any remaining silence samples during a run of silence, run emulator at >=2x speed so it gets ahead end track if sufficient silence has been found fill from remaining silence use any remaining samples from buffer generate remaining samples normally if left unupdated, ahead_time could become too large check end for a new run of silence cause silence detection on next play() Game_Music_Emu 0.6-pre. http://www.slack.net/~ant/ Copyright (C) 2003-2008 Shay Green. This module is free software; you
can redistribute it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version. This
module is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
details. You should have received a copy of the GNU Lesser General Public
License along with this module; if not, write to the Free Software Foundation,
Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA  fade ends with gain at 1.0 / (1 << fade_shift) play until non-silence or end of track remove from silence and buf first would otherwise be invalid caught up to emulator, so update track ended Fading unit / pow( 2.0, (double) x / step ) Silence detection number of consecutive silent samples at end sentinel fill internal buffer and check it for silence prints nifty graph of how far ahead we are when searching for silencedprintf( "%*s \n", int ((emu_time - out_time) * 7 / 44100), "*" ); use any remaining silence samples during a run of silence, run emulator at >=2x speed so it gets ahead end track if sufficient silence has been found fill from remaining silence use any remaining samples from buffer generate remaining samples normally if left unupdated, ahead_time could become too large check end for a new run of silence cause silence detection on next play() Game_Music_Emu 0.6-pre. http://www.slack.net/~ant/ Copyright (C) 2003-2008 Shay Green. This module is free software; you
can redistribute it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version. This
module is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
details. You should have received a copy of the GNU Lesser General Public
License along with this module; if not, write to the Free Software Foundation,
Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA  fade ends with gain at 1.0 / (1 << fade_shift) play until non-silence or end of track remove from silence and buf first would otherwise be invalid caught up to emulator, so update track ended Fading unit / pow( 2.0, (double) x / step ) Silence detection number of consecutive silent samples at end sentinel fill internal buffer and check it for silence prints nifty graph of how far ahead we are when searching for silencedprintf( "%*s \n", int ((emu_time - out_time) * 7 / 44100), "*" ); use any remaining silence samples during a run of silence, run emulator at >=2x speed so it gets ahead end track if sufficient silence has been found fill from remaining silence use any remaining samples from buffer generate remaining samples normally if left unupdated, ahead_time could become too large check end for a new run of silence cause silence detection on next play()