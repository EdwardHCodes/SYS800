**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 Robert Bieber
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Global variables for the parser  Auxiliary parsing functions (not visible at global scope) Keeps track of location in the document Clearing any memory already used  Making sure last is at the end  Keeps track of location in the document  Used when we need to look ahead  Flag for parsing sublines  Parsing out the viewport tag if there is one  First, we check to see if this line will contain sublines  Advancing the cursor as normal  strip all leading comments  Making sure last is at the end  strip all comments  Auxiliary Parsing Functions 
 * If conditional is set to true, then this will break upon encountering
 * SEPARATESYM.  This should only be used when parsing a line inside a
 * conditional, otherwise just use the wrapper function skin_parse_line()
  A wrapper for the line  Allocating memory if necessary  Parsing the current element  Moving up the calling function's pointer  First we count the sublines  ...and then we parse them  Flag for the all-or-none option  Checking the tag name  First we check the two characters after the '%', then a single char  Copying basic tag info  Checking for the * flag  If this tag has no arguments, we can bail out now  Checking the number of arguments and allocating args  Skipping over escaped characters  Restoring the cursor  Now we have to actually parse each argument  Making sure we haven't run out of arguments  Checking for the optional bar  Scanning the arguments  Checking for comments  we need to guess which type of param it is. 
             * guess using this priority:
             * default > decimal/integer > single tag/code > string
              Storing the type code  Checking a nullable argument for null.  Scanning an int argument  skip trailing % sign  Scanning a string argument  Recursively parsing a code argument  Checking for the optional bar  Checking for a premature end 
 * If the conditional flag is set true, then parsing text will stop at an
 * ARGLISTSEPARATESYM.  Only set that flag when parsing within a conditional
  First figure out how much text we're copying  Dealing with possibility of escaped characters  Copying the text into the element struct  Advancing cursor if we've encountered an escaped character  Starting past the "%"  Some conditional tags allow for target feature checking,
     * so to handle that call the callback as usual with type == TAG
     * then call it a second time with type == CONDITIONAL and check the return
     * value  Parsing the tag first  Counting the children  if we are skipping the true branch fix that up  Parsing the children  Feature tags could end up having 0 children which breaks
     * the render in dangerous ways. Minor hack, but insert an empty
     * child.  (e.g %?xx<foo> when xx isnt available ) 
     * Finding the index of the ending newline or null-terminator
     * The length of the string of interest doesn't include the leading #, the
     * length we need to reserve is the same as the index of the last character
      We copy from one char past cursor to leave out the #  Move cursor up past # and all text  Checking for sublines  Advancing the cursor as normal  Memory management  On a ROCKBOX build we try to save space as much as possible
 * so if we can, use a shared param pool which should be more then large
 * enough for any tag. params should be used straight away by the callback
 * so this is safe.
  First make the recursive call  Free any text  Then recursively free any children, before freeing their pointers  Free any parameters, making sure to deallocate strings  Finally, delete root's memory **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 Robert Bieber
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Global variables for the parser  Auxiliary parsing functions (not visible at global scope) Keeps track of location in the document Clearing any memory already used  Making sure last is at the end  Keeps track of location in the document  Used when we need to look ahead  Flag for parsing sublines  Parsing out the viewport tag if there is one  First, we check to see if this line will contain sublines  Advancing the cursor as normal  strip all leading comments  Making sure last is at the end  strip all comments  Auxiliary Parsing Functions 
 * If conditional is set to true, then this will break upon encountering
 * SEPARATESYM.  This should only be used when parsing a line inside a
 * conditional, otherwise just use the wrapper function skin_parse_line()
  A wrapper for the line  Allocating memory if necessary  Parsing the current element  Moving up the calling function's pointer  First we count the sublines  ...and then we parse them  Flag for the all-or-none option  Checking the tag name  First we check the two characters after the '%', then a single char  Copying basic tag info  Checking for the * flag  If this tag has no arguments, we can bail out now  Checking the number of arguments and allocating args  Skipping over escaped characters  Restoring the cursor  Now we have to actually parse each argument  Making sure we haven't run out of arguments  Checking for the optional bar  Scanning the arguments  Checking for comments  we need to guess which type of param it is. 
             * guess using this priority:
             * default > decimal/integer > single tag/code > string
              Storing the type code  Checking a nullable argument for null.  Scanning an int argument  skip trailing % sign  Scanning a string argument  Recursively parsing a code argument  Checking for the optional bar  Checking for a premature end 
 * If the conditional flag is set true, then parsing text will stop at an
 * ARGLISTSEPARATESYM.  Only set that flag when parsing within a conditional
  First figure out how much text we're copying  Dealing with possibility of escaped characters  Copying the text into the element struct  Advancing cursor if we've encountered an escaped character  Starting past the "%"  Some conditional tags allow for target feature checking,
     * so to handle that call the callback as usual with type == TAG
     * then call it a second time with type == CONDITIONAL and check the return
     * value  Parsing the tag first  Counting the children  if we are skipping the true branch fix that up  Parsing the children  Feature tags could end up having 0 children which breaks
     * the render in dangerous ways. Minor hack, but insert an empty
     * child.  (e.g %?xx<foo> when xx isnt available ) 
     * Finding the index of the ending newline or null-terminator
     * The length of the string of interest doesn't include the leading #, the
     * length we need to reserve is the same as the index of the last character
      We copy from one char past cursor to leave out the #  Move cursor up past # and all text  Checking for sublines  Advancing the cursor as normal  Memory management  On a ROCKBOX build we try to save space as much as possible
 * so if we can, use a shared param pool which should be more then large
 * enough for any tag. params should be used straight away by the callback
 * so this is safe.
  First make the recursive call  Free any text  Then recursively free any children, before freeing their pointers  Free any parameters, making sure to deallocate strings  Finally, delete root's memory **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 Robert Bieber
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Global variables for the parser  Auxiliary parsing functions (not visible at global scope) Keeps track of location in the document Clearing any memory already used  Making sure last is at the end  Keeps track of location in the document  Used when we need to look ahead  Flag for parsing sublines  Parsing out the viewport tag if there is one  First, we check to see if this line will contain sublines  Advancing the cursor as normal  strip all leading comments  Making sure last is at the end  strip all comments  Auxiliary Parsing Functions 
 * If conditional is set to true, then this will break upon encountering
 * SEPARATESYM.  This should only be used when parsing a line inside a
 * conditional, otherwise just use the wrapper function skin_parse_line()
  A wrapper for the line  Allocating memory if necessary  Parsing the current element  Moving up the calling function's pointer  First we count the sublines  ...and then we parse them  Flag for the all-or-none option  Checking the tag name  First we check the two characters after the '%', then a single char  Copying basic tag info  Checking for the * flag  If this tag has no arguments, we can bail out now  Checking the number of arguments and allocating args  Skipping over escaped characters  Restoring the cursor  Now we have to actually parse each argument  Making sure we haven't run out of arguments  Checking for the optional bar  Scanning the arguments  Checking for comments  we need to guess which type of param it is. 
             * guess using this priority:
             * default > decimal/integer > single tag/code > string
              Storing the type code  Checking a nullable argument for null.  Scanning an int argument  skip trailing % sign  Scanning a string argument  Recursively parsing a code argument  Checking for the optional bar  Checking for a premature end 
 * If the conditional flag is set true, then parsing text will stop at an
 * ARGLISTSEPARATESYM.  Only set that flag when parsing within a conditional
  First figure out how much text we're copying  Dealing with possibility of escaped characters  Copying the text into the element struct  Advancing cursor if we've encountered an escaped character  Starting past the "%"  Some conditional tags allow for target feature checking,
     * so to handle that call the callback as usual with type == TAG
     * then call it a second time with type == CONDITIONAL and check the return
     * value  Parsing the tag first  Counting the children  if we are skipping the true branch fix that up  Parsing the children  Feature tags could end up having 0 children which breaks
     * the render in dangerous ways. Minor hack, but insert an empty
     * child.  (e.g %?xx<foo> when xx isnt available ) 
     * Finding the index of the ending newline or null-terminator
     * The length of the string of interest doesn't include the leading #, the
     * length we need to reserve is the same as the index of the last character
      We copy from one char past cursor to leave out the #  Move cursor up past # and all text  Checking for sublines  Advancing the cursor as normal  Memory management  On a ROCKBOX build we try to save space as much as possible
 * so if we can, use a shared param pool which should be more then large
 * enough for any tag. params should be used straight away by the callback
 * so this is safe.
  First make the recursive call  Free any text  Then recursively free any children, before freeing their pointers  Free any parameters, making sure to deallocate strings  Finally, delete root's memory 