Use a slightly different name here to avoid poss conflict with any other subscriber variable.TODO: Something simpler than a VBox?*
	 * The "current" patient, used to determine if the patient has changed
	 *
	 * Graphing timeline used to animate the axis
	 *
	 * Thread that monitors the last update time from the BP monitor
	 TODO: Make all algos implement an interface so we can dynamically find them.*
	 * Map of name for a control algorithm to the method that implements it.  Populated in configureFields
	 *
	 * The current session id.
	 *
	 * A prepared statement used to record the end time of the session in the database.
	 Need a context here...TODO: clone the device id, or does that mess everything up?            System.err.println("NumericBPDeviceConstructor subscriber is "+subscriber); TODO clearly a synchronization issue here. enforce a singular calling thread or synchronize accessesTODO: This is a clone of rapid respiratory device.  Do we need a new subscriber here?Can't it share the passed in subscriber?  That already comes from the parentContextanyway, so is the same bean if you look back to the factory. TODO Make this more elegant                System.err.println("assignedSubscriber is "+assignedSubscriber);numericBPDeviceAdapter.setPartition(strings.toArray(new String[0]));We have the device - we must associate it with the correct partition...mdsHandler.mdsHandler.publish(new MDSConnectivity());        System.err.println(connectivity.toString("Published device connectivity ",2));main.setPrefSize(400, 400);new TextFormatter<?>(UnaryOperator<TextFormatter.Change> change
		 * We use bindBidirectional here because systolicProperty and diastolicProperty and numbers,
		 * but the text field is a String, and bindBidrectional allows us to specify a converter
		 * to handle the change between the two.
		  TODO Auto-generated catch blockRely on addition of metrics to add devices......and removal of devices to remove devices.Similarly, rely on metrics to add BP devices. TODO Auto-generated method stub TODO Auto-generated method stub TODO Auto-generated method stub TODO Auto-generated method stub		        System.err.println("CLC.handleConnectivity Partition is "+c.partition);log.info("udi " + c.unique_device_identifier + " is MRN=" + mrnPartition);
		            	 * The patient has definitely changed - even if the selected patient is "Unassigned",
		            	 * then that "Patient" has an ID
		            	 Nothing else to do.Patient has changeddeviceUdiToPatientMRN.put(c.unique_device_identifier, p);*
	 * Use this to allow access to the numeric sample that has a listener attached.
	 * Then if the pump is changed, the listener can be detached from the previous numeric
	 This getMinAndMax method is called before the start button is pressed, in which case the numericBPDevicewon't have been created yet, hence the null check.Ignore the old values.  Just get new ones.System.err.println("got minMax as "+minMax[0]+ " and "+minMax[1]);currentDiastolic.setText(Integer.toString((int)minMax[0]));currentSystolic.setText(Integer.toString((int)minMax[1]));
			 * https://nursingcenter.com/ncblog/december-2011/calculating-the-map
			 *
	 * Use this to allow access to the array sample that has a listener attached.
	 * Then if the BP monitor is changed, the listener can be detached from the previous sample
	 No device selected and/or available - can happen when patient is changed and no devices for that patientSome other device.This sample is from the current device.TODO: is it better to have multiple alerts, one for each parameter - or a combined one?
	 * Using multiple seperate alerts, each included in its own validity checked method, allows for nicer
	 * and more modular code, but could be annoying for the user in the case of multiple invalid options.
	 * They won't see more than one alert at a time, because we will do
	 * 
	 * if(aValid() && bValid() && cValid().....)
	 * 
	 * but they might want all errors to be reported at once.  Maybe we extend the use of an error label to
	 * give a "live" status.  In theory, the values should be constrained by the factory used for the spinners,
	 * but...  
	 * 
	 * Anyway, in the meantime...
	 Open loop mode.Closed loop mode.Check patient selectedCheck QCore selectedCheck BP monitor selectedCheck target BP rangeCheck infusion rate.Simpler to do the alert here as we know what mode we are in.Get a whole graph thing...TODO: What should happen during a stop/start cycle?  Just stop the timeline, or actually kill a previous instance and add a new one?Remove any existing instanceThis is the flow rate from the pump we want        		System.err.println("Found numeric for matching pump");Maybe we can use a different session identifier later, but this is handy for now.Every algo should populate algoThread. TODO Auto-generated catch block*
	 * This is only public to allow simple reflection access.  Later on when it implements an interface
	 * or we do other dynamic discovery, it can go back to being private
	 					System.err.println("Set initial speed in Simons Simple Algo");Now, we check the BP.Continually check the BP against the target;Check the BP against the target							System.err.println("Need to increase the pump speed");Need to increase the pump speed.TODO: How should we record this - as a new instance of AppConfig, or not?							System.err.println("Setting the pump speed back to default");Current BP is OK.  Set the speed to default.!!!!GET A CLASS CAST HERE DOUBLE CANNOT BE CAST TO FLOAT!TODO: How should we record this - as a new instance of AppConfig, or not?Sleep after deciding what to do.*
	 * A control alogrithm that sets the pump speed to be
	 * 
	 * 100 + 2 * (target systolic - current systolic)
	 * 
	 * For example, if target is 120 and current is 90, the difference is 30 so the target is 160.
	 * 
	 * If target is 120 and current is 75, the difference is 45 and so the target is 190.
	 TODO: factor out this initial step to something that can be shared?					System.err.println("Set initial speed in Simons Simple Algo");							System.err.println("Setting the pump speed back to default");Current BP is OK.  Set the speed to default.!!!!GET A CLASS CAST HERE DOUBLE CANNOT BE CAST TO FLOAT!End of run()End of new Thread()*
	 * Starts a thread that monitors the last time data was received from the BP monitor
	 						System.err.println("BP update delta is "+delta);Calling stop everything will interrupt this thread.But return anyway.							System.err.println("More than one minute since last update - showing oneMinuteAlert");					System.err.println("bpUpdateAlarmThread was interrupted.  Calling return...");TODO: Do we really need the extra boolean, or do the alarm popups prevent further alarms being shown anyway because of being modal?				System.err.println("systolic alarm condition...");				System.err.println("diastolic alarm condition...");*
	 * Method that monitors the BP values (systolic/diastolic).  We don't need a thread
	 * to do this, because we are using properties for those two variables, and so we can
	 * just add listeners to them.  The listeners are assigned to instance variables above,
	 * so that the instances can be removed later.
	 https://bugs.openjdk.java.net/browse/JDK-8125218Prevent any further writes from writeNumerics.*
	 * A small class to contain a BP alarm, and a way to store it in the database
	 * @author simon
	 *
	 TODO: Inconsitent style with the AppConfig classTODO: Device time as well?  Prob important.*
		 * Creates a new instance of the Blood Pressure alarm, which is immediately written
		 * to the database.
		 *
		 * @param type Should be one of BP_ALARM_SYS or BP_ALARM_DIA - but no check here
		 * @param value The value for the BP.
		 *
	 * A small class to contain the app configuration when the app is started
	 * or changed, and a way to store it in the database in accordance with the
	 * logging requirement.
	 * @author simon
	 *
	 *
		 * 0 for open, 1 for closed
		 *
		 * Target systolic rate
		 *
		 * Target diastolic rate
		 *
		 * Systolic alarm level
		 *
		 * Diastolic alarm level
		 *
		 * UDI for the pump
		 *
		 * UDI for the BP monitor
		 *
		 * Infusion rate
		 *
		 * The ID of the patient.
		 *
		 * The id of the session
		  TODO Auto-generated catch blockend of AppConfigUse a slightly different name here to avoid poss conflict with any other subscriber variable.TODO: Something simpler than a VBox?*
	 * The "current" patient, used to determine if the patient has changed
	 *
	 * Graphing timeline used to animate the axis
	 *
	 * Thread that monitors the last update time from the BP monitor
	 TODO: Make all algos implement an interface so we can dynamically find them.*
	 * Map of name for a control algorithm to the method that implements it.  Populated in configureFields
	 *
	 * The current session id.
	 *
	 * A prepared statement used to record the end time of the session in the database.
	 Need a context here...TODO: clone the device id, or does that mess everything up?            System.err.println("NumericBPDeviceConstructor subscriber is "+subscriber); TODO clearly a synchronization issue here. enforce a singular calling thread or synchronize accessesTODO: This is a clone of rapid respiratory device.  Do we need a new subscriber here?Can't it share the passed in subscriber?  That already comes from the parentContextanyway, so is the same bean if you look back to the factory. TODO Make this more elegant                System.err.println("assignedSubscriber is "+assignedSubscriber);numericBPDeviceAdapter.setPartition(strings.toArray(new String[0]));We have the device - we must associate it with the correct partition...mdsHandler.mdsHandler.publish(new MDSConnectivity());        System.err.println(connectivity.toString("Published device connectivity ",2));main.setPrefSize(400, 400);new TextFormatter<?>(UnaryOperator<TextFormatter.Change> change
		 * We use bindBidirectional here because systolicProperty and diastolicProperty and numbers,
		 * but the text field is a String, and bindBidrectional allows us to specify a converter
		 * to handle the change between the two.
		  TODO Auto-generated catch blockRely on addition of metrics to add devices......and removal of devices to remove devices.Similarly, rely on metrics to add BP devices. TODO Auto-generated method stub TODO Auto-generated method stub TODO Auto-generated method stub TODO Auto-generated method stub		        System.err.println("CLC.handleConnectivity Partition is "+c.partition);log.info("udi " + c.unique_device_identifier + " is MRN=" + mrnPartition);
		            	 * The patient has definitely changed - even if the selected patient is "Unassigned",
		            	 * then that "Patient" has an ID
		            	 Nothing else to do.Patient has changeddeviceUdiToPatientMRN.put(c.unique_device_identifier, p);*
	 * Use this to allow access to the numeric sample that has a listener attached.
	 * Then if the pump is changed, the listener can be detached from the previous numeric
	 This getMinAndMax method is called before the start button is pressed, in which case the numericBPDevicewon't have been created yet, hence the null check.Ignore the old values.  Just get new ones.System.err.println("got minMax as "+minMax[0]+ " and "+minMax[1]);currentDiastolic.setText(Integer.toString((int)minMax[0]));currentSystolic.setText(Integer.toString((int)minMax[1]));
			 * https://nursingcenter.com/ncblog/december-2011/calculating-the-map
			 *
	 * Use this to allow access to the array sample that has a listener attached.
	 * Then if the BP monitor is changed, the listener can be detached from the previous sample
	 No device selected and/or available - can happen when patient is changed and no devices for that patientSome other device.This sample is from the current device.TODO: is it better to have multiple alerts, one for each parameter - or a combined one?
	 * Using multiple seperate alerts, each included in its own validity checked method, allows for nicer
	 * and more modular code, but could be annoying for the user in the case of multiple invalid options.
	 * They won't see more than one alert at a time, because we will do
	 * 
	 * if(aValid() && bValid() && cValid().....)
	 * 
	 * but they might want all errors to be reported at once.  Maybe we extend the use of an error label to
	 * give a "live" status.  In theory, the values should be constrained by the factory used for the spinners,
	 * but...  
	 * 
	 * Anyway, in the meantime...
	 Open loop mode.Closed loop mode.Check patient selectedCheck QCore selectedCheck BP monitor selectedCheck target BP rangeCheck infusion rate.Simpler to do the alert here as we know what mode we are in.Get a whole graph thing...TODO: What should happen during a stop/start cycle?  Just stop the timeline, or actually kill a previous instance and add a new one?Remove any existing instanceThis is the flow rate from the pump we want        		System.err.println("Found numeric for matching pump");Maybe we can use a different session identifier later, but this is handy for now.Every algo should populate algoThread. TODO Auto-generated catch block*
	 * This is only public to allow simple reflection access.  Later on when it implements an interface
	 * or we do other dynamic discovery, it can go back to being private
	 					System.err.println("Set initial speed in Simons Simple Algo");Now, we check the BP.Continually check the BP against the target;Check the BP against the target							System.err.println("Need to increase the pump speed");Need to increase the pump speed.TODO: How should we record this - as a new instance of AppConfig, or not?							System.err.println("Setting the pump speed back to default");Current BP is OK.  Set the speed to default.!!!!GET A CLASS CAST HERE DOUBLE CANNOT BE CAST TO FLOAT!TODO: How should we record this - as a new instance of AppConfig, or not?Sleep after deciding what to do.*
	 * A control alogrithm that sets the pump speed to be
	 * 
	 * 100 + 2 * (target systolic - current systolic)
	 * 
	 * For example, if target is 120 and current is 90, the difference is 30 so the target is 160.
	 * 
	 * If target is 120 and current is 75, the difference is 45 and so the target is 190.
	 TODO: factor out this initial step to something that can be shared?					System.err.println("Set initial speed in Simons Simple Algo");							System.err.println("Setting the pump speed back to default");Current BP is OK.  Set the speed to default.!!!!GET A CLASS CAST HERE DOUBLE CANNOT BE CAST TO FLOAT!End of run()End of new Thread()*
	 * Starts a thread that monitors the last time data was received from the BP monitor
	 						System.err.println("BP update delta is "+delta);Calling stop everything will interrupt this thread.But return anyway.							System.err.println("More than one minute since last update - showing oneMinuteAlert");					System.err.println("bpUpdateAlarmThread was interrupted.  Calling return...");TODO: Do we really need the extra boolean, or do the alarm popups prevent further alarms being shown anyway because of being modal?				System.err.println("systolic alarm condition...");				System.err.println("diastolic alarm condition...");*
	 * Method that monitors the BP values (systolic/diastolic).  We don't need a thread
	 * to do this, because we are using properties for those two variables, and so we can
	 * just add listeners to them.  The listeners are assigned to instance variables above,
	 * so that the instances can be removed later.
	 https://bugs.openjdk.java.net/browse/JDK-8125218Prevent any further writes from writeNumerics.*
	 * A small class to contain a BP alarm, and a way to store it in the database
	 * @author simon
	 *
	 TODO: Inconsitent style with the AppConfig classTODO: Device time as well?  Prob important.*
		 * Creates a new instance of the Blood Pressure alarm, which is immediately written
		 * to the database.
		 *
		 * @param type Should be one of BP_ALARM_SYS or BP_ALARM_DIA - but no check here
		 * @param value The value for the BP.
		 *
	 * A small class to contain the app configuration when the app is started
	 * or changed, and a way to store it in the database in accordance with the
	 * logging requirement.
	 * @author simon
	 *
	 *
		 * 0 for open, 1 for closed
		 *
		 * Target systolic rate
		 *
		 * Target diastolic rate
		 *
		 * Systolic alarm level
		 *
		 * Diastolic alarm level
		 *
		 * UDI for the pump
		 *
		 * UDI for the BP monitor
		 *
		 * Infusion rate
		 *
		 * The ID of the patient.
		 *
		 * The id of the session
		  TODO Auto-generated catch blockend of AppConfigUse a slightly different name here to avoid poss conflict with any other subscriber variable.TODO: Something simpler than a VBox?*
	 * The "current" patient, used to determine if the patient has changed
	 *
	 * Graphing timeline used to animate the axis
	 *
	 * Thread that monitors the last update time from the BP monitor
	 TODO: Make all algos implement an interface so we can dynamically find them.*
	 * Map of name for a control algorithm to the method that implements it.  Populated in configureFields
	 *
	 * The current session id.
	 *
	 * A prepared statement used to record the end time of the session in the database.
	 Need a context here...TODO: clone the device id, or does that mess everything up?            System.err.println("NumericBPDeviceConstructor subscriber is "+subscriber); TODO clearly a synchronization issue here. enforce a singular calling thread or synchronize accessesTODO: This is a clone of rapid respiratory device.  Do we need a new subscriber here?Can't it share the passed in subscriber?  That already comes from the parentContextanyway, so is the same bean if you look back to the factory. TODO Make this more elegant                System.err.println("assignedSubscriber is "+assignedSubscriber);numericBPDeviceAdapter.setPartition(strings.toArray(new String[0]));We have the device - we must associate it with the correct partition...mdsHandler.mdsHandler.publish(new MDSConnectivity());        System.err.println(connectivity.toString("Published device connectivity ",2));main.setPrefSize(400, 400);new TextFormatter<?>(UnaryOperator<TextFormatter.Change> change
		 * We use bindBidirectional here because systolicProperty and diastolicProperty and numbers,
		 * but the text field is a String, and bindBidrectional allows us to specify a converter
		 * to handle the change between the two.
		  TODO Auto-generated catch blockRely on addition of metrics to add devices......and removal of devices to remove devices.Similarly, rely on metrics to add BP devices. TODO Auto-generated method stub TODO Auto-generated method stub TODO Auto-generated method stub TODO Auto-generated method stub		        System.err.println("CLC.handleConnectivity Partition is "+c.partition);log.info("udi " + c.unique_device_identifier + " is MRN=" + mrnPartition);
		            	 * The patient has definitely changed - even if the selected patient is "Unassigned",
		            	 * then that "Patient" has an ID
		            	 Nothing else to do.Patient has changeddeviceUdiToPatientMRN.put(c.unique_device_identifier, p);*
	 * Use this to allow access to the numeric sample that has a listener attached.
	 * Then if the pump is changed, the listener can be detached from the previous numeric
	 This getMinAndMax method is called before the start button is pressed, in which case the numericBPDevicewon't have been created yet, hence the null check.Ignore the old values.  Just get new ones.System.err.println("got minMax as "+minMax[0]+ " and "+minMax[1]);currentDiastolic.setText(Integer.toString((int)minMax[0]));currentSystolic.setText(Integer.toString((int)minMax[1]));
			 * https://nursingcenter.com/ncblog/december-2011/calculating-the-map
			 *
	 * Use this to allow access to the array sample that has a listener attached.
	 * Then if the BP monitor is changed, the listener can be detached from the previous sample
	 No device selected and/or available - can happen when patient is changed and no devices for that patientSome other device.This sample is from the current device.TODO: is it better to have multiple alerts, one for each parameter - or a combined one?
	 * Using multiple seperate alerts, each included in its own validity checked method, allows for nicer
	 * and more modular code, but could be annoying for the user in the case of multiple invalid options.
	 * They won't see more than one alert at a time, because we will do
	 * 
	 * if(aValid() && bValid() && cValid().....)
	 * 
	 * but they might want all errors to be reported at once.  Maybe we extend the use of an error label to
	 * give a "live" status.  In theory, the values should be constrained by the factory used for the spinners,
	 * but...  
	 * 
	 * Anyway, in the meantime...
	 Open loop mode.Closed loop mode.Check patient selectedCheck QCore selectedCheck BP monitor selectedCheck target BP rangeCheck infusion rate.Simpler to do the alert here as we know what mode we are in.Get a whole graph thing...TODO: What should happen during a stop/start cycle?  Just stop the timeline, or actually kill a previous instance and add a new one?Remove any existing instanceThis is the flow rate from the pump we want        		System.err.println("Found numeric for matching pump");Maybe we can use a different session identifier later, but this is handy for now.Every algo should populate algoThread. TODO Auto-generated catch block*
	 * This is only public to allow simple reflection access.  Later on when it implements an interface
	 * or we do other dynamic discovery, it can go back to being private
	 					System.err.println("Set initial speed in Simons Simple Algo");Now, we check the BP.Continually check the BP against the target;Check the BP against the target							System.err.println("Need to increase the pump speed");Need to increase the pump speed.TODO: How should we record this - as a new instance of AppConfig, or not?							System.err.println("Setting the pump speed back to default");Current BP is OK.  Set the speed to default.!!!!GET A CLASS CAST HERE DOUBLE CANNOT BE CAST TO FLOAT!TODO: How should we record this - as a new instance of AppConfig, or not?Sleep after deciding what to do.*
	 * A control alogrithm that sets the pump speed to be
	 * 
	 * 100 + 2 * (target systolic - current systolic)
	 * 
	 * For example, if target is 120 and current is 90, the difference is 30 so the target is 160.
	 * 
	 * If target is 120 and current is 75, the difference is 45 and so the target is 190.
	 TODO: factor out this initial step to something that can be shared?					System.err.println("Set initial speed in Simons Simple Algo");							System.err.println("Setting the pump speed back to default");Current BP is OK.  Set the speed to default.!!!!GET A CLASS CAST HERE DOUBLE CANNOT BE CAST TO FLOAT!End of run()End of new Thread()*
	 * Starts a thread that monitors the last time data was received from the BP monitor
	 						System.err.println("BP update delta is "+delta);Calling stop everything will interrupt this thread.But return anyway.							System.err.println("More than one minute since last update - showing oneMinuteAlert");					System.err.println("bpUpdateAlarmThread was interrupted.  Calling return...");TODO: Do we really need the extra boolean, or do the alarm popups prevent further alarms being shown anyway because of being modal?				System.err.println("systolic alarm condition...");				System.err.println("diastolic alarm condition...");*
	 * Method that monitors the BP values (systolic/diastolic).  We don't need a thread
	 * to do this, because we are using properties for those two variables, and so we can
	 * just add listeners to them.  The listeners are assigned to instance variables above,
	 * so that the instances can be removed later.
	 https://bugs.openjdk.java.net/browse/JDK-8125218Prevent any further writes from writeNumerics.*
	 * A small class to contain a BP alarm, and a way to store it in the database
	 * @author simon
	 *
	 TODO: Inconsitent style with the AppConfig classTODO: Device time as well?  Prob important.*
		 * Creates a new instance of the Blood Pressure alarm, which is immediately written
		 * to the database.
		 *
		 * @param type Should be one of BP_ALARM_SYS or BP_ALARM_DIA - but no check here
		 * @param value The value for the BP.
		 *
	 * A small class to contain the app configuration when the app is started
	 * or changed, and a way to store it in the database in accordance with the
	 * logging requirement.
	 * @author simon
	 *
	 *
		 * 0 for open, 1 for closed
		 *
		 * Target systolic rate
		 *
		 * Target diastolic rate
		 *
		 * Systolic alarm level
		 *
		 * Diastolic alarm level
		 *
		 * UDI for the pump
		 *
		 * UDI for the BP monitor
		 *
		 * Infusion rate
		 *
		 * The ID of the patient.
		 *
		 * The id of the session
		  TODO Auto-generated catch blockend of AppConfigUse a slightly different name here to avoid poss conflict with any other subscriber variable.TODO: Something simpler than a VBox?*
	 * The "current" patient, used to determine if the patient has changed
	 *
	 * Graphing timeline used to animate the axis
	 *
	 * Thread that monitors the last update time from the BP monitor
	 TODO: Make all algos implement an interface so we can dynamically find them.*
	 * Map of name for a control algorithm to the method that implements it.  Populated in configureFields
	 *
	 * The current session id.
	 *
	 * A prepared statement used to record the end time of the session in the database.
	 Need a context here...TODO: clone the device id, or does that mess everything up?            System.err.println("NumericBPDeviceConstructor subscriber is "+subscriber); TODO clearly a synchronization issue here. enforce a singular calling thread or synchronize accessesTODO: This is a clone of rapid respiratory device.  Do we need a new subscriber here?Can't it share the passed in subscriber?  That already comes from the parentContextanyway, so is the same bean if you look back to the factory. TODO Make this more elegant                System.err.println("assignedSubscriber is "+assignedSubscriber);numericBPDeviceAdapter.setPartition(strings.toArray(new String[0]));We have the device - we must associate it with the correct partition...mdsHandler.mdsHandler.publish(new MDSConnectivity());        System.err.println(connectivity.toString("Published device connectivity ",2));main.setPrefSize(400, 400);new TextFormatter<?>(UnaryOperator<TextFormatter.Change> change
		 * We use bindBidirectional here because systolicProperty and diastolicProperty and numbers,
		 * but the text field is a String, and bindBidrectional allows us to specify a converter
		 * to handle the change between the two.
		  TODO Auto-generated catch blockRely on addition of metrics to add devices......and removal of devices to remove devices.Similarly, rely on metrics to add BP devices. TODO Auto-generated method stub TODO Auto-generated method stub TODO Auto-generated method stub TODO Auto-generated method stub		        System.err.println("CLC.handleConnectivity Partition is "+c.partition);log.info("udi " + c.unique_device_identifier + " is MRN=" + mrnPartition);
		            	 * The patient has definitely changed - even if the selected patient is "Unassigned",
		            	 * then that "Patient" has an ID
		            	 Nothing else to do.Patient has changeddeviceUdiToPatientMRN.put(c.unique_device_identifier, p);*
	 * Use this to allow access to the numeric sample that has a listener attached.
	 * Then if the pump is changed, the listener can be detached from the previous numeric
	 This getMinAndMax method is called before the start button is pressed, in which case the numericBPDevicewon't have been created yet, hence the null check.Ignore the old values.  Just get new ones.System.err.println("got minMax as "+minMax[0]+ " and "+minMax[1]);currentDiastolic.setText(Integer.toString((int)minMax[0]));currentSystolic.setText(Integer.toString((int)minMax[1]));
			 * https://nursingcenter.com/ncblog/december-2011/calculating-the-map
			 *
	 * Use this to allow access to the array sample that has a listener attached.
	 * Then if the BP monitor is changed, the listener can be detached from the previous sample
	 No device selected and/or available - can happen when patient is changed and no devices for that patientSome other device.This sample is from the current device.TODO: is it better to have multiple alerts, one for each parameter - or a combined one?
	 * Using multiple seperate alerts, each included in its own validity checked method, allows for nicer
	 * and more modular code, but could be annoying for the user in the case of multiple invalid options.
	 * They won't see more than one alert at a time, because we will do
	 * 
	 * if(aValid() && bValid() && cValid().....)
	 * 
	 * but they might want all errors to be reported at once.  Maybe we extend the use of an error label to
	 * give a "live" status.  In theory, the values should be constrained by the factory used for the spinners,
	 * but...  
	 * 
	 * Anyway, in the meantime...
	 Open loop mode.Closed loop mode.Check patient selectedCheck QCore selectedCheck BP monitor selectedCheck target BP rangeCheck infusion rate.Simpler to do the alert here as we know what mode we are in.Get a whole graph thing...TODO: What should happen during a stop/start cycle?  Just stop the timeline, or actually kill a previous instance and add a new one?Remove any existing instanceThis is the flow rate from the pump we want        		System.err.println("Found numeric for matching pump");Maybe we can use a different session identifier later, but this is handy for now.Every algo should populate algoThread. TODO Auto-generated catch block*
	 * This is only public to allow simple reflection access.  Later on when it implements an interface
	 * or we do other dynamic discovery, it can go back to being private
	 					System.err.println("Set initial speed in Simons Simple Algo");Now, we check the BP.Continually check the BP against the target;Check the BP against the target							System.err.println("Need to increase the pump speed");Need to increase the pump speed.TODO: How should we record this - as a new instance of AppConfig, or not?							System.err.println("Setting the pump speed back to default");Current BP is OK.  Set the speed to default.!!!!GET A CLASS CAST HERE DOUBLE CANNOT BE CAST TO FLOAT!TODO: How should we record this - as a new instance of AppConfig, or not?Sleep after deciding what to do.*
	 * A control alogrithm that sets the pump speed to be
	 * 
	 * 100 + 2 * (target systolic - current systolic)
	 * 
	 * For example, if target is 120 and current is 90, the difference is 30 so the target is 160.
	 * 
	 * If target is 120 and current is 75, the difference is 45 and so the target is 190.
	 TODO: factor out this initial step to something that can be shared?					System.err.println("Set initial speed in Simons Simple Algo");							System.err.println("Setting the pump speed back to default");Current BP is OK.  Set the speed to default.!!!!GET A CLASS CAST HERE DOUBLE CANNOT BE CAST TO FLOAT!End of run()End of new Thread()*
	 * Starts a thread that monitors the last time data was received from the BP monitor
	 						System.err.println("BP update delta is "+delta);Calling stop everything will interrupt this thread.But return anyway.							System.err.println("More than one minute since last update - showing oneMinuteAlert");					System.err.println("bpUpdateAlarmThread was interrupted.  Calling return...");TODO: Do we really need the extra boolean, or do the alarm popups prevent further alarms being shown anyway because of being modal?				System.err.println("systolic alarm condition...");				System.err.println("diastolic alarm condition...");*
	 * Method that monitors the BP values (systolic/diastolic).  We don't need a thread
	 * to do this, because we are using properties for those two variables, and so we can
	 * just add listeners to them.  The listeners are assigned to instance variables above,
	 * so that the instances can be removed later.
	 https://bugs.openjdk.java.net/browse/JDK-8125218Prevent any further writes from writeNumerics.*
	 * A small class to contain a BP alarm, and a way to store it in the database
	 * @author simon
	 *
	 TODO: Inconsitent style with the AppConfig classTODO: Device time as well?  Prob important.*
		 * Creates a new instance of the Blood Pressure alarm, which is immediately written
		 * to the database.
		 *
		 * @param type Should be one of BP_ALARM_SYS or BP_ALARM_DIA - but no check here
		 * @param value The value for the BP.
		 *
	 * A small class to contain the app configuration when the app is started
	 * or changed, and a way to store it in the database in accordance with the
	 * logging requirement.
	 * @author simon
	 *
	 *
		 * 0 for open, 1 for closed
		 *
		 * Target systolic rate
		 *
		 * Target diastolic rate
		 *
		 * Systolic alarm level
		 *
		 * Diastolic alarm level
		 *
		 * UDI for the pump
		 *
		 * UDI for the BP monitor
		 *
		 * Infusion rate
		 *
		 * The ID of the patient.
		 *
		 * The id of the session
		  TODO Auto-generated catch blockend of AppConfigUse a slightly different name here to avoid poss conflict with any other subscriber variable.TODO: Something simpler than a VBox?*
	 * The "current" patient, used to determine if the patient has changed
	 *
	 * Graphing timeline used to animate the axis
	 *
	 * Thread that monitors the last update time from the BP monitor
	 TODO: Make all algos implement an interface so we can dynamically find them.*
	 * Map of name for a control algorithm to the method that implements it.  Populated in configureFields
	 *
	 * The current session id.
	 *
	 * A prepared statement used to record the end time of the session in the database.
	 Need a context here...TODO: clone the device id, or does that mess everything up?            System.err.println("NumericBPDeviceConstructor subscriber is "+subscriber); TODO clearly a synchronization issue here. enforce a singular calling thread or synchronize accessesTODO: This is a clone of rapid respiratory device.  Do we need a new subscriber here?Can't it share the passed in subscriber?  That already comes from the parentContextanyway, so is the same bean if you look back to the factory. TODO Make this more elegant                System.err.println("assignedSubscriber is "+assignedSubscriber);numericBPDeviceAdapter.setPartition(strings.toArray(new String[0]));We have the device - we must associate it with the correct partition...mdsHandler.mdsHandler.publish(new MDSConnectivity());        System.err.println(connectivity.toString("Published device connectivity ",2));main.setPrefSize(400, 400);new TextFormatter<?>(UnaryOperator<TextFormatter.Change> change
		 * We use bindBidirectional here because systolicProperty and diastolicProperty and numbers,
		 * but the text field is a String, and bindBidrectional allows us to specify a converter
		 * to handle the change between the two.
		  TODO Auto-generated catch blockRely on addition of metrics to add devices......and removal of devices to remove devices.Similarly, rely on metrics to add BP devices. TODO Auto-generated method stub TODO Auto-generated method stub TODO Auto-generated method stub TODO Auto-generated method stub		        System.err.println("CLC.handleConnectivity Partition is "+c.partition);log.info("udi " + c.unique_device_identifier + " is MRN=" + mrnPartition);
		            	 * The patient has definitely changed - even if the selected patient is "Unassigned",
		            	 * then that "Patient" has an ID
		            	 Nothing else to do.Patient has changeddeviceUdiToPatientMRN.put(c.unique_device_identifier, p);*
	 * Use this to allow access to the numeric sample that has a listener attached.
	 * Then if the pump is changed, the listener can be detached from the previous numeric
	 This getMinAndMax method is called before the start button is pressed, in which case the numericBPDevicewon't have been created yet, hence the null check.Ignore the old values.  Just get new ones.System.err.println("got minMax as "+minMax[0]+ " and "+minMax[1]);currentDiastolic.setText(Integer.toString((int)minMax[0]));currentSystolic.setText(Integer.toString((int)minMax[1]));
			 * https://nursingcenter.com/ncblog/december-2011/calculating-the-map
			 *
	 * Use this to allow access to the array sample that has a listener attached.
	 * Then if the BP monitor is changed, the listener can be detached from the previous sample
	 No device selected and/or available - can happen when patient is changed and no devices for that patientSome other device.This sample is from the current device.TODO: is it better to have multiple alerts, one for each parameter - or a combined one?
	 * Using multiple seperate alerts, each included in its own validity checked method, allows for nicer
	 * and more modular code, but could be annoying for the user in the case of multiple invalid options.
	 * They won't see more than one alert at a time, because we will do
	 * 
	 * if(aValid() && bValid() && cValid().....)
	 * 
	 * but they might want all errors to be reported at once.  Maybe we extend the use of an error label to
	 * give a "live" status.  In theory, the values should be constrained by the factory used for the spinners,
	 * but...  
	 * 
	 * Anyway, in the meantime...
	 Open loop mode.Closed loop mode.Check patient selectedCheck QCore selectedCheck BP monitor selectedCheck target BP rangeCheck infusion rate.Simpler to do the alert here as we know what mode we are in.Get a whole graph thing...TODO: What should happen during a stop/start cycle?  Just stop the timeline, or actually kill a previous instance and add a new one?Remove any existing instanceThis is the flow rate from the pump we want        		System.err.println("Found numeric for matching pump");Maybe we can use a different session identifier later, but this is handy for now.Every algo should populate algoThread. TODO Auto-generated catch block*
	 * This is only public to allow simple reflection access.  Later on when it implements an interface
	 * or we do other dynamic discovery, it can go back to being private
	 					System.err.println("Set initial speed in Simons Simple Algo");Now, we check the BP.Continually check the BP against the target;Check the BP against the target							System.err.println("Need to increase the pump speed");Need to increase the pump speed.TODO: How should we record this - as a new instance of AppConfig, or not?							System.err.println("Setting the pump speed back to default");Current BP is OK.  Set the speed to default.!!!!GET A CLASS CAST HERE DOUBLE CANNOT BE CAST TO FLOAT!TODO: How should we record this - as a new instance of AppConfig, or not?Sleep after deciding what to do.*
	 * A control alogrithm that sets the pump speed to be
	 * 
	 * 100 + 2 * (target systolic - current systolic)
	 * 
	 * For example, if target is 120 and current is 90, the difference is 30 so the target is 160.
	 * 
	 * If target is 120 and current is 75, the difference is 45 and so the target is 190.
	 TODO: factor out this initial step to something that can be shared?					System.err.println("Set initial speed in Simons Simple Algo");							System.err.println("Setting the pump speed back to default");Current BP is OK.  Set the speed to default.!!!!GET A CLASS CAST HERE DOUBLE CANNOT BE CAST TO FLOAT!End of run()End of new Thread()*
	 * Starts a thread that monitors the last time data was received from the BP monitor
	 						System.err.println("BP update delta is "+delta);Calling stop everything will interrupt this thread.But return anyway.							System.err.println("More than one minute since last update - showing oneMinuteAlert");					System.err.println("bpUpdateAlarmThread was interrupted.  Calling return...");TODO: Do we really need the extra boolean, or do the alarm popups prevent further alarms being shown anyway because of being modal?				System.err.println("systolic alarm condition...");				System.err.println("diastolic alarm condition...");*
	 * Method that monitors the BP values (systolic/diastolic).  We don't need a thread
	 * to do this, because we are using properties for those two variables, and so we can
	 * just add listeners to them.  The listeners are assigned to instance variables above,
	 * so that the instances can be removed later.
	 https://bugs.openjdk.java.net/browse/JDK-8125218Prevent any further writes from writeNumerics.*
	 * A small class to contain a BP alarm, and a way to store it in the database
	 * @author simon
	 *
	 TODO: Inconsitent style with the AppConfig classTODO: Device time as well?  Prob important.*
		 * Creates a new instance of the Blood Pressure alarm, which is immediately written
		 * to the database.
		 *
		 * @param type Should be one of BP_ALARM_SYS or BP_ALARM_DIA - but no check here
		 * @param value The value for the BP.
		 *
	 * A small class to contain the app configuration when the app is started
	 * or changed, and a way to store it in the database in accordance with the
	 * logging requirement.
	 * @author simon
	 *
	 *
		 * 0 for open, 1 for closed
		 *
		 * Target systolic rate
		 *
		 * Target diastolic rate
		 *
		 * Systolic alarm level
		 *
		 * Diastolic alarm level
		 *
		 * UDI for the pump
		 *
		 * UDI for the BP monitor
		 *
		 * Infusion rate
		 *
		 * The ID of the patient.
		 *
		 * The id of the session
		  TODO Auto-generated catch blockend of AppConfigUse a slightly different name here to avoid poss conflict with any other subscriber variable.TODO: Something simpler than a VBox?*
	 * The "current" patient, used to determine if the patient has changed
	 *
	 * Graphing timeline used to animate the axis
	 *
	 * Thread that monitors the last update time from the BP monitor
	 TODO: Make all algos implement an interface so we can dynamically find them.*
	 * Map of name for a control algorithm to the method that implements it.  Populated in configureFields
	 *
	 * The current session id.
	 *
	 * A prepared statement used to record the end time of the session in the database.
	 Need a context here...TODO: clone the device id, or does that mess everything up?            System.err.println("NumericBPDeviceConstructor subscriber is "+subscriber); TODO clearly a synchronization issue here. enforce a singular calling thread or synchronize accessesTODO: This is a clone of rapid respiratory device.  Do we need a new subscriber here?Can't it share the passed in subscriber?  That already comes from the parentContextanyway, so is the same bean if you look back to the factory. TODO Make this more elegant                System.err.println("assignedSubscriber is "+assignedSubscriber);numericBPDeviceAdapter.setPartition(strings.toArray(new String[0]));We have the device - we must associate it with the correct partition...mdsHandler.mdsHandler.publish(new MDSConnectivity());        System.err.println(connectivity.toString("Published device connectivity ",2));main.setPrefSize(400, 400);new TextFormatter<?>(UnaryOperator<TextFormatter.Change> change
		 * We use bindBidirectional here because systolicProperty and diastolicProperty and numbers,
		 * but the text field is a String, and bindBidrectional allows us to specify a converter
		 * to handle the change between the two.
		  TODO Auto-generated catch blockRely on addition of metrics to add devices......and removal of devices to remove devices.Similarly, rely on metrics to add BP devices. TODO Auto-generated method stub TODO Auto-generated method stub TODO Auto-generated method stub TODO Auto-generated method stub		        System.err.println("CLC.handleConnectivity Partition is "+c.partition);log.info("udi " + c.unique_device_identifier + " is MRN=" + mrnPartition);
		            	 * The patient has definitely changed - even if the selected patient is "Unassigned",
		            	 * then that "Patient" has an ID
		            	 Nothing else to do.Patient has changeddeviceUdiToPatientMRN.put(c.unique_device_identifier, p);*
	 * Use this to allow access to the numeric sample that has a listener attached.
	 * Then if the pump is changed, the listener can be detached from the previous numeric
	 This getMinAndMax method is called before the start button is pressed, in which case the numericBPDevicewon't have been created yet, hence the null check.Ignore the old values.  Just get new ones.System.err.println("got minMax as "+minMax[0]+ " and "+minMax[1]);currentDiastolic.setText(Integer.toString((int)minMax[0]));currentSystolic.setText(Integer.toString((int)minMax[1]));
			 * https://nursingcenter.com/ncblog/december-2011/calculating-the-map
			 *
	 * Use this to allow access to the array sample that has a listener attached.
	 * Then if the BP monitor is changed, the listener can be detached from the previous sample
	 No device selected and/or available - can happen when patient is changed and no devices for that patientSome other device.This sample is from the current device.TODO: is it better to have multiple alerts, one for each parameter - or a combined one?
	 * Using multiple seperate alerts, each included in its own validity checked method, allows for nicer
	 * and more modular code, but could be annoying for the user in the case of multiple invalid options.
	 * They won't see more than one alert at a time, because we will do
	 * 
	 * if(aValid() && bValid() && cValid().....)
	 * 
	 * but they might want all errors to be reported at once.  Maybe we extend the use of an error label to
	 * give a "live" status.  In theory, the values should be constrained by the factory used for the spinners,
	 * but...  
	 * 
	 * Anyway, in the meantime...
	 Open loop mode.Closed loop mode.Check patient selectedCheck QCore selectedCheck BP monitor selectedCheck target BP rangeCheck infusion rate.Simpler to do the alert here as we know what mode we are in.Get a whole graph thing...TODO: What should happen during a stop/start cycle?  Just stop the timeline, or actually kill a previous instance and add a new one?Remove any existing instanceThis is the flow rate from the pump we want        		System.err.println("Found numeric for matching pump");Maybe we can use a different session identifier later, but this is handy for now.Every algo should populate algoThread. TODO Auto-generated catch block*
	 * This is only public to allow simple reflection access.  Later on when it implements an interface
	 * or we do other dynamic discovery, it can go back to being private
	 					System.err.println("Set initial speed in Simons Simple Algo");Now, we check the BP.Continually check the BP against the target;Check the BP against the target							System.err.println("Need to increase the pump speed");Need to increase the pump speed.TODO: How should we record this - as a new instance of AppConfig, or not?							System.err.println("Setting the pump speed back to default");Current BP is OK.  Set the speed to default.!!!!GET A CLASS CAST HERE DOUBLE CANNOT BE CAST TO FLOAT!TODO: How should we record this - as a new instance of AppConfig, or not?Sleep after deciding what to do.*
	 * A control alogrithm that sets the pump speed to be
	 * 
	 * 100 + 2 * (target systolic - current systolic)
	 * 
	 * For example, if target is 120 and current is 90, the difference is 30 so the target is 160.
	 * 
	 * If target is 120 and current is 75, the difference is 45 and so the target is 190.
	 TODO: factor out this initial step to something that can be shared?					System.err.println("Set initial speed in Simons Simple Algo");							System.err.println("Setting the pump speed back to default");Current BP is OK.  Set the speed to default.!!!!GET A CLASS CAST HERE DOUBLE CANNOT BE CAST TO FLOAT!End of run()End of new Thread()*
	 * Starts a thread that monitors the last time data was received from the BP monitor
	 						System.err.println("BP update delta is "+delta);Calling stop everything will interrupt this thread.But return anyway.							System.err.println("More than one minute since last update - showing oneMinuteAlert");					System.err.println("bpUpdateAlarmThread was interrupted.  Calling return...");TODO: Do we really need the extra boolean, or do the alarm popups prevent further alarms being shown anyway because of being modal?				System.err.println("systolic alarm condition...");				System.err.println("diastolic alarm condition...");*
	 * Method that monitors the BP values (systolic/diastolic).  We don't need a thread
	 * to do this, because we are using properties for those two variables, and so we can
	 * just add listeners to them.  The listeners are assigned to instance variables above,
	 * so that the instances can be removed later.
	 https://bugs.openjdk.java.net/browse/JDK-8125218Prevent any further writes from writeNumerics.*
	 * A small class to contain a BP alarm, and a way to store it in the database
	 * @author simon
	 *
	 TODO: Inconsitent style with the AppConfig classTODO: Device time as well?  Prob important.*
		 * Creates a new instance of the Blood Pressure alarm, which is immediately written
		 * to the database.
		 *
		 * @param type Should be one of BP_ALARM_SYS or BP_ALARM_DIA - but no check here
		 * @param value The value for the BP.
		 *
	 * A small class to contain the app configuration when the app is started
	 * or changed, and a way to store it in the database in accordance with the
	 * logging requirement.
	 * @author simon
	 *
	 *
		 * 0 for open, 1 for closed
		 *
		 * Target systolic rate
		 *
		 * Target diastolic rate
		 *
		 * Systolic alarm level
		 *
		 * Diastolic alarm level
		 *
		 * UDI for the pump
		 *
		 * UDI for the BP monitor
		 *
		 * Infusion rate
		 *
		 * The ID of the patient.
		 *
		 * The id of the session
		  TODO Auto-generated catch blockend of AppConfigUse a slightly different name here to avoid poss conflict with any other subscriber variable.TODO: Something simpler than a VBox?*
	 * The "current" patient, used to determine if the patient has changed
	 *
	 * Graphing timeline used to animate the axis
	 *
	 * Thread that monitors the last update time from the BP monitor
	 TODO: Make all algos implement an interface so we can dynamically find them.*
	 * Map of name for a control algorithm to the method that implements it.  Populated in configureFields
	 *
	 * The current session id.
	 *
	 * A prepared statement used to record the end time of the session in the database.
	 Need a context here...TODO: clone the device id, or does that mess everything up?            System.err.println("NumericBPDeviceConstructor subscriber is "+subscriber); TODO clearly a synchronization issue here. enforce a singular calling thread or synchronize accessesTODO: This is a clone of rapid respiratory device.  Do we need a new subscriber here?Can't it share the passed in subscriber?  That already comes from the parentContextanyway, so is the same bean if you look back to the factory. TODO Make this more elegant                System.err.println("assignedSubscriber is "+assignedSubscriber);numericBPDeviceAdapter.setPartition(strings.toArray(new String[0]));We have the device - we must associate it with the correct partition...mdsHandler.mdsHandler.publish(new MDSConnectivity());        System.err.println(connectivity.toString("Published device connectivity ",2));main.setPrefSize(400, 400);new TextFormatter<?>(UnaryOperator<TextFormatter.Change> change
		 * We use bindBidirectional here because systolicProperty and diastolicProperty and numbers,
		 * but the text field is a String, and bindBidrectional allows us to specify a converter
		 * to handle the change between the two.
		  TODO Auto-generated catch blockRely on addition of metrics to add devices......and removal of devices to remove devices.Similarly, rely on metrics to add BP devices. TODO Auto-generated method stub TODO Auto-generated method stub TODO Auto-generated method stub TODO Auto-generated method stub		        System.err.println("CLC.handleConnectivity Partition is "+c.partition);log.info("udi " + c.unique_device_identifier + " is MRN=" + mrnPartition);
		            	 * The patient has definitely changed - even if the selected patient is "Unassigned",
		            	 * then that "Patient" has an ID
		            	 Nothing else to do.Patient has changeddeviceUdiToPatientMRN.put(c.unique_device_identifier, p);*
	 * Use this to allow access to the numeric sample that has a listener attached.
	 * Then if the pump is changed, the listener can be detached from the previous numeric
	 This getMinAndMax method is called before the start button is pressed, in which case the numericBPDevicewon't have been created yet, hence the null check.Ignore the old values.  Just get new ones.System.err.println("got minMax as "+minMax[0]+ " and "+minMax[1]);currentDiastolic.setText(Integer.toString((int)minMax[0]));currentSystolic.setText(Integer.toString((int)minMax[1]));
			 * https://nursingcenter.com/ncblog/december-2011/calculating-the-map
			 *
	 * Use this to allow access to the array sample that has a listener attached.
	 * Then if the BP monitor is changed, the listener can be detached from the previous sample
	 No device selected and/or available - can happen when patient is changed and no devices for that patientSome other device.This sample is from the current device.TODO: is it better to have multiple alerts, one for each parameter - or a combined one?
	 * Using multiple seperate alerts, each included in its own validity checked method, allows for nicer
	 * and more modular code, but could be annoying for the user in the case of multiple invalid options.
	 * They won't see more than one alert at a time, because we will do
	 * 
	 * if(aValid() && bValid() && cValid().....)
	 * 
	 * but they might want all errors to be reported at once.  Maybe we extend the use of an error label to
	 * give a "live" status.  In theory, the values should be constrained by the factory used for the spinners,
	 * but...  
	 * 
	 * Anyway, in the meantime...
	 Open loop mode.Closed loop mode.Check patient selectedCheck QCore selectedCheck BP monitor selectedCheck target BP rangeCheck infusion rate.Simpler to do the alert here as we know what mode we are in.Get a whole graph thing...TODO: What should happen during a stop/start cycle?  Just stop the timeline, or actually kill a previous instance and add a new one?Remove any existing instanceThis is the flow rate from the pump we want        		System.err.println("Found numeric for matching pump");Maybe we can use a different session identifier later, but this is handy for now.Every algo should populate algoThread. TODO Auto-generated catch block*
	 * This is only public to allow simple reflection access.  Later on when it implements an interface
	 * or we do other dynamic discovery, it can go back to being private
	 					System.err.println("Set initial speed in Simons Simple Algo");Now, we check the BP.Continually check the BP against the target;Check the BP against the target							System.err.println("Need to increase the pump speed");Need to increase the pump speed.TODO: How should we record this - as a new instance of AppConfig, or not?							System.err.println("Setting the pump speed back to default");Current BP is OK.  Set the speed to default.!!!!GET A CLASS CAST HERE DOUBLE CANNOT BE CAST TO FLOAT!TODO: How should we record this - as a new instance of AppConfig, or not?Sleep after deciding what to do.*
	 * A control alogrithm that sets the pump speed to be
	 * 
	 * 100 + 2 * (target systolic - current systolic)
	 * 
	 * For example, if target is 120 and current is 90, the difference is 30 so the target is 160.
	 * 
	 * If target is 120 and current is 75, the difference is 45 and so the target is 190.
	 TODO: factor out this initial step to something that can be shared?					System.err.println("Set initial speed in Simons Simple Algo");							System.err.println("Setting the pump speed back to default");Current BP is OK.  Set the speed to default.!!!!GET A CLASS CAST HERE DOUBLE CANNOT BE CAST TO FLOAT!End of run()End of new Thread()*
	 * Starts a thread that monitors the last time data was received from the BP monitor
	 						System.err.println("BP update delta is "+delta);Calling stop everything will interrupt this thread.But return anyway.							System.err.println("More than one minute since last update - showing oneMinuteAlert");					System.err.println("bpUpdateAlarmThread was interrupted.  Calling return...");TODO: Do we really need the extra boolean, or do the alarm popups prevent further alarms being shown anyway because of being modal?				System.err.println("systolic alarm condition...");				System.err.println("diastolic alarm condition...");*
	 * Method that monitors the BP values (systolic/diastolic).  We don't need a thread
	 * to do this, because we are using properties for those two variables, and so we can
	 * just add listeners to them.  The listeners are assigned to instance variables above,
	 * so that the instances can be removed later.
	 https://bugs.openjdk.java.net/browse/JDK-8125218Prevent any further writes from writeNumerics.*
	 * A small class to contain a BP alarm, and a way to store it in the database
	 * @author simon
	 *
	 TODO: Inconsitent style with the AppConfig classTODO: Device time as well?  Prob important.*
		 * Creates a new instance of the Blood Pressure alarm, which is immediately written
		 * to the database.
		 *
		 * @param type Should be one of BP_ALARM_SYS or BP_ALARM_DIA - but no check here
		 * @param value The value for the BP.
		 *
	 * A small class to contain the app configuration when the app is started
	 * or changed, and a way to store it in the database in accordance with the
	 * logging requirement.
	 * @author simon
	 *
	 *
		 * 0 for open, 1 for closed
		 *
		 * Target systolic rate
		 *
		 * Target diastolic rate
		 *
		 * Systolic alarm level
		 *
		 * Diastolic alarm level
		 *
		 * UDI for the pump
		 *
		 * UDI for the BP monitor
		 *
		 * Infusion rate
		 *
		 * The ID of the patient.
		 *
		 * The id of the session
		  TODO Auto-generated catch blockend of AppConfig