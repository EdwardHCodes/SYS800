 Game_Music_Emu 0.6-pre. http://www.slack.net/~ant/ Copyright (C) 2003-2006 Shay Green. This module is free software; you
can redistribute it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version. This
module is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
details. You should have received a copy of the GNU Lesser General Public
License along with this module; if not, write to the Free Software Foundation,
Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA  number of frames until play interrupts init KikiKaikai needed this to work defaults Set sound gain Init rom Init & clear nsfe info TODO: extremely hacky! Unload Setup if ( header_.chip_flags & ~(fds_flag | namco_flag | vrc6_flag | fme7_flag) )
		warning( "Uses unsupported audio expansion hardware" ); * Header stuff True if file supports only PAL speed NTSC PAL Default rate Custom rate Gets address, given pointer to it in file header. If zero, returns rom_addr. Unload TODO: extremely hacky! if ( header_.vers != 1 )
		warning( "Unknown file version" );  set up data if ( load_addr < (fds_enabled() ? sram_addr : rom_addr) )
		warning( "Load address is too low" );  if ( header_.vers != 1 )
		warning( "Unknown file version" );  sound and memory Set track_count Change clock rate & setup buffer Post load Find bank in ROM if ( offset >= rom.size() )
		warning( "invalid bank" );  TODO: FDS bank switching is kind of hacky, might need to treat ROM as RAM so changes won't get lost when switching. Map standard things mirrored four times Determine initial banks No initial banks, so assign them based on load_addr Map banks Map FDS RAM Emulation Music Emu sample rate can't be changed once set Set bass frequency sample rate must be set first all or nothing sample rate must be set first Jumps to routine, given pointer to address in file header. Pushes idle_addr as return address, NOT old PC. Unmapped read  Unmapped_write Remap track if playlist available Arrange time of first call to play routine Setup for call to init routine if ( this->cpu.r.pc < get_addr( header.load_addr ) )
		warning( "Init address < load address" );  convert filter times to samples Emulate until next play call if possible Halt instruction encountered special_event( "illegal instruction" ); Init/play routine returned play can now be called regularly nothing to run continue init routine that was interrupted by play routine Calculate time of next call to play routine extra clock every other call Call routine if ready Save state if init routine is still running special_event( "play called during init" ); Localize to new time frame Tell/Seek start_track() must have been called already for long skip, mute sound round to multiple of 2048 Fading Remute voices Game_Music_Emu 0.6-pre. http://www.slack.net/~ant/ Copyright (C) 2003-2006 Shay Green. This module is free software; you
can redistribute it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version. This
module is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
details. You should have received a copy of the GNU Lesser General Public
License along with this module; if not, write to the Free Software Foundation,
Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA  number of frames until play interrupts init KikiKaikai needed this to work defaults Set sound gain Init rom Init & clear nsfe info TODO: extremely hacky! Unload Setup if ( header_.chip_flags & ~(fds_flag | namco_flag | vrc6_flag | fme7_flag) )
		warning( "Uses unsupported audio expansion hardware" ); * Header stuff True if file supports only PAL speed NTSC PAL Default rate Custom rate Gets address, given pointer to it in file header. If zero, returns rom_addr. Unload TODO: extremely hacky! if ( header_.vers != 1 )
		warning( "Unknown file version" );  set up data if ( load_addr < (fds_enabled() ? sram_addr : rom_addr) )
		warning( "Load address is too low" );  if ( header_.vers != 1 )
		warning( "Unknown file version" );  sound and memory Set track_count Change clock rate & setup buffer Post load Find bank in ROM if ( offset >= rom.size() )
		warning( "invalid bank" );  TODO: FDS bank switching is kind of hacky, might need to treat ROM as RAM so changes won't get lost when switching. Map standard things mirrored four times Determine initial banks No initial banks, so assign them based on load_addr Map banks Map FDS RAM Emulation Music Emu sample rate can't be changed once set Set bass frequency sample rate must be set first all or nothing sample rate must be set first Jumps to routine, given pointer to address in file header. Pushes idle_addr as return address, NOT old PC. Unmapped read  Unmapped_write Remap track if playlist available Arrange time of first call to play routine Setup for call to init routine if ( this->cpu.r.pc < get_addr( header.load_addr ) )
		warning( "Init address < load address" );  convert filter times to samples Emulate until next play call if possible Halt instruction encountered special_event( "illegal instruction" ); Init/play routine returned play can now be called regularly nothing to run continue init routine that was interrupted by play routine Calculate time of next call to play routine extra clock every other call Call routine if ready Save state if init routine is still running special_event( "play called during init" ); Localize to new time frame Tell/Seek start_track() must have been called already for long skip, mute sound round to multiple of 2048 Fading Remute voices Game_Music_Emu 0.6-pre. http://www.slack.net/~ant/ Copyright (C) 2003-2006 Shay Green. This module is free software; you
can redistribute it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version. This
module is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
details. You should have received a copy of the GNU Lesser General Public
License along with this module; if not, write to the Free Software Foundation,
Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA  number of frames until play interrupts init KikiKaikai needed this to work defaults Set sound gain Init rom Init & clear nsfe info TODO: extremely hacky! Unload Setup if ( header_.chip_flags & ~(fds_flag | namco_flag | vrc6_flag | fme7_flag) )
		warning( "Uses unsupported audio expansion hardware" ); * Header stuff True if file supports only PAL speed NTSC PAL Default rate Custom rate Gets address, given pointer to it in file header. If zero, returns rom_addr. Unload TODO: extremely hacky! if ( header_.vers != 1 )
		warning( "Unknown file version" );  set up data if ( load_addr < (fds_enabled() ? sram_addr : rom_addr) )
		warning( "Load address is too low" );  if ( header_.vers != 1 )
		warning( "Unknown file version" );  sound and memory Set track_count Change clock rate & setup buffer Post load Find bank in ROM if ( offset >= rom.size() )
		warning( "invalid bank" );  TODO: FDS bank switching is kind of hacky, might need to treat ROM as RAM so changes won't get lost when switching. Map standard things mirrored four times Determine initial banks No initial banks, so assign them based on load_addr Map banks Map FDS RAM Emulation Music Emu sample rate can't be changed once set Set bass frequency sample rate must be set first all or nothing sample rate must be set first Jumps to routine, given pointer to address in file header. Pushes idle_addr as return address, NOT old PC. Unmapped read  Unmapped_write Remap track if playlist available Arrange time of first call to play routine Setup for call to init routine if ( this->cpu.r.pc < get_addr( header.load_addr ) )
		warning( "Init address < load address" );  convert filter times to samples Emulate until next play call if possible Halt instruction encountered special_event( "illegal instruction" ); Init/play routine returned play can now be called regularly nothing to run continue init routine that was interrupted by play routine Calculate time of next call to play routine extra clock every other call Call routine if ready Save state if init routine is still running special_event( "play called during init" ); Localize to new time frame Tell/Seek start_track() must have been called already for long skip, mute sound round to multiple of 2048 Fading Remute voices