****************************************************************************
 * md5.c: not so strong MD5 hashing
 *****************************************************************************
 * Copyright (C) 2004-2005 the VideoLAN team
 * $Id: cb57f7b6522df0960a924193cfca438c03a92521 $
 *
 * Authors: Jon Lech Johansen <jon-vl@nanocrew.net>
 *          Sam Hocevar <sam@zoy.org>
 *
 * Adapted to Rockbox by: Antoine Cellerier <dionoea at videolan dot org>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
 ********************************************************************************************************************************************************
 * Reverse: reverse byte order
 ********************************************************************************************************************************************************
 * DigestMD5: update the MD5 digest with 64 bytes of data
 ********************************************************************************************************************************************************
 * InitMD5: initialise an MD5 message
 *****************************************************************************
 * The MD5 message-digest algorithm is described in RFC 1321
 ********************************************************************************************************************************************************
 * AddMD5: add i_len bytes to an MD5 message
 **************************************************************************** Current bytes in the spare buffer  If we can complete our spare buffer to 64 bytes, do it and add the
     * resulting buffer to the MD5 message  Add as many entire 64 bytes blocks as we can to the MD5 message  Copy our remaining data to the message's spare buffer ****************************************************************************
 * EndMD5: finish an MD5 message
 *****************************************************************************
 * This function adds adequate padding to the end of the message, and appends
 * the bit count so that we end at a block boundary.
 **************************************************************************** Append 0x80 to our buffer. No boundary check because the temporary
     * buffer cannot be full, otherwise AddMD5 would have emptied it.  If less than 8 bytes are available at the end of the block, complete
     * this 64 bytes block with zeros and add it to the message. We'll add
     * our length at the end of the next block.  Fill the unused space in our last block with zeroes and put the
     * message length at the end. ****************************************************************************
 * md5.c: not so strong MD5 hashing
 *****************************************************************************
 * Copyright (C) 2004-2005 the VideoLAN team
 * $Id: cb57f7b6522df0960a924193cfca438c03a92521 $
 *
 * Authors: Jon Lech Johansen <jon-vl@nanocrew.net>
 *          Sam Hocevar <sam@zoy.org>
 *
 * Adapted to Rockbox by: Antoine Cellerier <dionoea at videolan dot org>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
 ********************************************************************************************************************************************************
 * Reverse: reverse byte order
 ********************************************************************************************************************************************************
 * DigestMD5: update the MD5 digest with 64 bytes of data
 ********************************************************************************************************************************************************
 * InitMD5: initialise an MD5 message
 *****************************************************************************
 * The MD5 message-digest algorithm is described in RFC 1321
 ********************************************************************************************************************************************************
 * AddMD5: add i_len bytes to an MD5 message
 **************************************************************************** Current bytes in the spare buffer  If we can complete our spare buffer to 64 bytes, do it and add the
     * resulting buffer to the MD5 message  Add as many entire 64 bytes blocks as we can to the MD5 message  Copy our remaining data to the message's spare buffer ****************************************************************************
 * EndMD5: finish an MD5 message
 *****************************************************************************
 * This function adds adequate padding to the end of the message, and appends
 * the bit count so that we end at a block boundary.
 **************************************************************************** Append 0x80 to our buffer. No boundary check because the temporary
     * buffer cannot be full, otherwise AddMD5 would have emptied it.  If less than 8 bytes are available at the end of the block, complete
     * this 64 bytes block with zeros and add it to the message. We'll add
     * our length at the end of the next block.  Fill the unused space in our last block with zeroes and put the
     * message length at the end. ****************************************************************************
 * md5.c: not so strong MD5 hashing
 *****************************************************************************
 * Copyright (C) 2004-2005 the VideoLAN team
 * $Id: cb57f7b6522df0960a924193cfca438c03a92521 $
 *
 * Authors: Jon Lech Johansen <jon-vl@nanocrew.net>
 *          Sam Hocevar <sam@zoy.org>
 *
 * Adapted to Rockbox by: Antoine Cellerier <dionoea at videolan dot org>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
 ********************************************************************************************************************************************************
 * Reverse: reverse byte order
 ********************************************************************************************************************************************************
 * DigestMD5: update the MD5 digest with 64 bytes of data
 ********************************************************************************************************************************************************
 * InitMD5: initialise an MD5 message
 *****************************************************************************
 * The MD5 message-digest algorithm is described in RFC 1321
 ********************************************************************************************************************************************************
 * AddMD5: add i_len bytes to an MD5 message
 **************************************************************************** Current bytes in the spare buffer  If we can complete our spare buffer to 64 bytes, do it and add the
     * resulting buffer to the MD5 message  Add as many entire 64 bytes blocks as we can to the MD5 message  Copy our remaining data to the message's spare buffer ****************************************************************************
 * EndMD5: finish an MD5 message
 *****************************************************************************
 * This function adds adequate padding to the end of the message, and appends
 * the bit count so that we end at a block boundary.
 **************************************************************************** Append 0x80 to our buffer. No boundary check because the temporary
     * buffer cannot be full, otherwise AddMD5 would have emptied it.  If less than 8 bytes are available at the end of the block, complete
     * this 64 bytes block with zeros and add it to the message. We'll add
     * our length at the end of the next block.  Fill the unused space in our last block with zeroes and put the
     * message length at the end. 