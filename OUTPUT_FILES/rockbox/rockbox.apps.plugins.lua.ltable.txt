
** $Id: ltable.c,v 2.32.1.2 2007/12/28 15:32:23 roberto Exp $
** Lua tables (hash)
** See Copyright Notice in lua.h

** Implementation of tables (aka arrays, objects, or hash tables).
** Tables keep its elements in two parts: an array part and a hash part.
** Non-negative integer keys are all candidates to be kept in the array
** part. The actual size of the array is the largest `n' such that at
** least half the slots between 0 and n are in use.
** Hash uses a mix of chained scatter table with Brent's variation.
** A main invariant of these tables is that, if an element is not
** in its main position (i.e. the `original' position that its hash gives
** to it), then the colliding element is in its own main position.
** Hence even when the load factor reaches 100%, performance remains good.

** max size of array part is 2^MAXBITS

** for some types, it is better to avoid modulus by power of 2, as
** they tend to have many 2 factors.

** number of ints inside a lua_Number
 value  key 
** hash for lua_Numbers
 avoid problems with -0 
** returns the `main' position of an element in a table (that is, the index
** of its hash value)

** returns the index for `key' if `key' is an appropriate key to live in
** the array part of the table, -1 otherwise.
 `key' did not match some condition 
** returns the index of a `key' for table traversals. First goes all
** elements in the array part, then elements in the hash part. The
** beginning of a traversal is signalled by -1.
 first iteration  is `key' inside array part?  yes; that's the index (corrected to C)  check whether `key' is somewhere in the chain  key may be dead already, but it is ok to use it in `next'  key index in hash table  hash elements are numbered after array ones  key not found  to avoid warnings  find original element  try first array part  a non-nil value?  then hash part  a non-nil value?  no more elements 
** {=============================================================
** Rehash
** ==============================================================
 2^i  number of elements smaller than 2^i  number of elements to go to array part  optimal size for array part  more than half elements present?  optimal size (till now)  all elements smaller than n will go to array part  all elements already counted  is `key' an appropriate array index?  count as such  2^lg  summation of `nums'  count to traverse all array keys  for each slice  counter  adjust upper limit  no more elements to count  count elements in range (2^(lg-1), 2^lg]  total number of elements  summation of `nums'  no elements to hash part?  use common `dummynode'  all positions are free  save old hash ...  array part must grow?  create new hash part with appropriate size  array part must shrink?  re-insert elements from vanishing slice  shrink array  re-insert elements from hash part  free old array  nums[i] = number of keys between 2^(i-1) and 2^i  reset counts  count keys in array part  all those keys are integer keys  count keys in hash part  count extra key  compute new size for array part  resize the table to new computed sizes 
** }=============================================================
 put table on stack  temporary values (kept only if some malloc fails)  remove table from stack  could not find a free place 
** inserts a new key into a hash table; first, check whether key's main 
** position is free. If not, check whether colliding node is in its main 
** position or not: if it is not, move colliding node to an empty place and 
** put new key in its main position; otherwise (colliding node is in its main 
** position), new key goes to an empty position. 
 get a free place  cannot find a free place?  grow table  re-insert key into grown table  is colliding node out of its main position?  yes; move colliding node into free position  find previous  redo the chain with `n' in place of `mp'  copy colliding node into free pos. (mp->next also goes)  now `mp' is free  colliding node is in its own main position  new node will go into free position  chain new position 
** search function for integers
 (1 <= key && key <= t->sizearray)  check whether `key' is somewhere in the chain  that's it 
** search function for strings
 check whether `key' is somewhere in the chain  that's it 
** main search function
 index is int?  use specialized version  else go through  check whether `key' is somewhere in the chain  that's it  i is zero or a present index  find `i' and `j' such that i is present and j is not  overflow?  table was built with bad purposes: resort to linear search  now do a binary search between them 
** Try to find a boundary in table `t'. A `boundary' is an integer index
** such that t[i] is non-nil and t[i+1] is nil (and 0 if t[1] is nil).
 there is a boundary in the array part: (binary) search for it  else must find a boundary in hash part  hash part is empty?  that is easy... 
** $Id: ltable.c,v 2.32.1.2 2007/12/28 15:32:23 roberto Exp $
** Lua tables (hash)
** See Copyright Notice in lua.h

** Implementation of tables (aka arrays, objects, or hash tables).
** Tables keep its elements in two parts: an array part and a hash part.
** Non-negative integer keys are all candidates to be kept in the array
** part. The actual size of the array is the largest `n' such that at
** least half the slots between 0 and n are in use.
** Hash uses a mix of chained scatter table with Brent's variation.
** A main invariant of these tables is that, if an element is not
** in its main position (i.e. the `original' position that its hash gives
** to it), then the colliding element is in its own main position.
** Hence even when the load factor reaches 100%, performance remains good.

** max size of array part is 2^MAXBITS

** for some types, it is better to avoid modulus by power of 2, as
** they tend to have many 2 factors.

** number of ints inside a lua_Number
 value  key 
** hash for lua_Numbers
 avoid problems with -0 
** returns the `main' position of an element in a table (that is, the index
** of its hash value)

** returns the index for `key' if `key' is an appropriate key to live in
** the array part of the table, -1 otherwise.
 `key' did not match some condition 
** returns the index of a `key' for table traversals. First goes all
** elements in the array part, then elements in the hash part. The
** beginning of a traversal is signalled by -1.
 first iteration  is `key' inside array part?  yes; that's the index (corrected to C)  check whether `key' is somewhere in the chain  key may be dead already, but it is ok to use it in `next'  key index in hash table  hash elements are numbered after array ones  key not found  to avoid warnings  find original element  try first array part  a non-nil value?  then hash part  a non-nil value?  no more elements 
** {=============================================================
** Rehash
** ==============================================================
 2^i  number of elements smaller than 2^i  number of elements to go to array part  optimal size for array part  more than half elements present?  optimal size (till now)  all elements smaller than n will go to array part  all elements already counted  is `key' an appropriate array index?  count as such  2^lg  summation of `nums'  count to traverse all array keys  for each slice  counter  adjust upper limit  no more elements to count  count elements in range (2^(lg-1), 2^lg]  total number of elements  summation of `nums'  no elements to hash part?  use common `dummynode'  all positions are free  save old hash ...  array part must grow?  create new hash part with appropriate size  array part must shrink?  re-insert elements from vanishing slice  shrink array  re-insert elements from hash part  free old array  nums[i] = number of keys between 2^(i-1) and 2^i  reset counts  count keys in array part  all those keys are integer keys  count keys in hash part  count extra key  compute new size for array part  resize the table to new computed sizes 
** }=============================================================
 put table on stack  temporary values (kept only if some malloc fails)  remove table from stack  could not find a free place 
** inserts a new key into a hash table; first, check whether key's main 
** position is free. If not, check whether colliding node is in its main 
** position or not: if it is not, move colliding node to an empty place and 
** put new key in its main position; otherwise (colliding node is in its main 
** position), new key goes to an empty position. 
 get a free place  cannot find a free place?  grow table  re-insert key into grown table  is colliding node out of its main position?  yes; move colliding node into free position  find previous  redo the chain with `n' in place of `mp'  copy colliding node into free pos. (mp->next also goes)  now `mp' is free  colliding node is in its own main position  new node will go into free position  chain new position 
** search function for integers
 (1 <= key && key <= t->sizearray)  check whether `key' is somewhere in the chain  that's it 
** search function for strings
 check whether `key' is somewhere in the chain  that's it 
** main search function
 index is int?  use specialized version  else go through  check whether `key' is somewhere in the chain  that's it  i is zero or a present index  find `i' and `j' such that i is present and j is not  overflow?  table was built with bad purposes: resort to linear search  now do a binary search between them 
** Try to find a boundary in table `t'. A `boundary' is an integer index
** such that t[i] is non-nil and t[i+1] is nil (and 0 if t[1] is nil).
 there is a boundary in the array part: (binary) search for it  else must find a boundary in hash part  hash part is empty?  that is easy... 
** $Id: ltable.c,v 2.32.1.2 2007/12/28 15:32:23 roberto Exp $
** Lua tables (hash)
** See Copyright Notice in lua.h

** Implementation of tables (aka arrays, objects, or hash tables).
** Tables keep its elements in two parts: an array part and a hash part.
** Non-negative integer keys are all candidates to be kept in the array
** part. The actual size of the array is the largest `n' such that at
** least half the slots between 0 and n are in use.
** Hash uses a mix of chained scatter table with Brent's variation.
** A main invariant of these tables is that, if an element is not
** in its main position (i.e. the `original' position that its hash gives
** to it), then the colliding element is in its own main position.
** Hence even when the load factor reaches 100%, performance remains good.

** max size of array part is 2^MAXBITS

** for some types, it is better to avoid modulus by power of 2, as
** they tend to have many 2 factors.

** number of ints inside a lua_Number
 value  key 
** hash for lua_Numbers
 avoid problems with -0 
** returns the `main' position of an element in a table (that is, the index
** of its hash value)

** returns the index for `key' if `key' is an appropriate key to live in
** the array part of the table, -1 otherwise.
 `key' did not match some condition 
** returns the index of a `key' for table traversals. First goes all
** elements in the array part, then elements in the hash part. The
** beginning of a traversal is signalled by -1.
 first iteration  is `key' inside array part?  yes; that's the index (corrected to C)  check whether `key' is somewhere in the chain  key may be dead already, but it is ok to use it in `next'  key index in hash table  hash elements are numbered after array ones  key not found  to avoid warnings  find original element  try first array part  a non-nil value?  then hash part  a non-nil value?  no more elements 
** {=============================================================
** Rehash
** ==============================================================
 2^i  number of elements smaller than 2^i  number of elements to go to array part  optimal size for array part  more than half elements present?  optimal size (till now)  all elements smaller than n will go to array part  all elements already counted  is `key' an appropriate array index?  count as such  2^lg  summation of `nums'  count to traverse all array keys  for each slice  counter  adjust upper limit  no more elements to count  count elements in range (2^(lg-1), 2^lg]  total number of elements  summation of `nums'  no elements to hash part?  use common `dummynode'  all positions are free  save old hash ...  array part must grow?  create new hash part with appropriate size  array part must shrink?  re-insert elements from vanishing slice  shrink array  re-insert elements from hash part  free old array  nums[i] = number of keys between 2^(i-1) and 2^i  reset counts  count keys in array part  all those keys are integer keys  count keys in hash part  count extra key  compute new size for array part  resize the table to new computed sizes 
** }=============================================================
 put table on stack  temporary values (kept only if some malloc fails)  remove table from stack  could not find a free place 
** inserts a new key into a hash table; first, check whether key's main 
** position is free. If not, check whether colliding node is in its main 
** position or not: if it is not, move colliding node to an empty place and 
** put new key in its main position; otherwise (colliding node is in its main 
** position), new key goes to an empty position. 
 get a free place  cannot find a free place?  grow table  re-insert key into grown table  is colliding node out of its main position?  yes; move colliding node into free position  find previous  redo the chain with `n' in place of `mp'  copy colliding node into free pos. (mp->next also goes)  now `mp' is free  colliding node is in its own main position  new node will go into free position  chain new position 
** search function for integers
 (1 <= key && key <= t->sizearray)  check whether `key' is somewhere in the chain  that's it 
** search function for strings
 check whether `key' is somewhere in the chain  that's it 
** main search function
 index is int?  use specialized version  else go through  check whether `key' is somewhere in the chain  that's it  i is zero or a present index  find `i' and `j' such that i is present and j is not  overflow?  table was built with bad purposes: resort to linear search  now do a binary search between them 
** Try to find a boundary in table `t'. A `boundary' is an integer index
** such that t[i] is non-nil and t[i+1] is nil (and 0 if t[1] is nil).
 there is a boundary in the array part: (binary) search for it  else must find a boundary in hash part  hash part is empty?  that is easy... 