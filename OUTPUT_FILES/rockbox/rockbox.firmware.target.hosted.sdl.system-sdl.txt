**************************************************************************
 *             __________               __   ___.                  
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___  
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /  
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <   
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \  
 *                     \/            \/     \/    \/            \/ 
 * $Id$
 *
 * Copyright (C) 2006 by Daniel Everton <dan@iocaine.org>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** use backgrounds by default  include remote by default  Used for player simulator  Used for player simulator 
 * This thread will read the buttons in an interrupt like fashion, and
 * also initializes SDL_INIT_VIDEO and the surfaces
 *
 * it must be done in the same thread (at least on windows) because events only
 * work in the thread which called SDL_Init(SubSystem) with SDL_INIT_VIDEO
 *
 * This is an SDL thread and relies on preemptive behavoir of the host
 * Try and load the background image. If it fails go without  Set things up  Fullscreen mode for maemo app  SDL touch screen fix: Work around a SDL assumption that returns
       relative mouse coordinates when you get to the screen edges
       using the touchscreen and a disabled mouse cursor.
      start maemo thread: Listen to display on/off events and battery monitoring  0-count so it blocks  let system_init proceed 
     * finally enter the button loop  Order here is relevent to prevent deadlocks and use of destroyed
       sync primitives by kernel threads  not needed for native threads  Shut down SDL event loop  since sim_thread_shutdown() grabs the mutex we need to let it free,
     * otherwise SDL_WaitThread will deadlock  wait for event thread to finish  lock again before entering the scheduler  sim_thread_shutdown() will cause sim_do_exit() to be called via longjmp,
     * but only if we let the sdl thread scheduler exit the other threads  fake stack, OS manages size (and growth)  Make glib thread safe  0-count so it blocks  wait for sdl_event_thread to run so that it can initialize the surfaces
     * and video subsystem needed for SDL events  cleanup  stub  HAVE_STORAGE_FLUSH **************************************************************************
 *             __________               __   ___.                  
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___  
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /  
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <   
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \  
 *                     \/            \/     \/    \/            \/ 
 * $Id$
 *
 * Copyright (C) 2006 by Daniel Everton <dan@iocaine.org>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** use backgrounds by default  include remote by default  Used for player simulator  Used for player simulator 
 * This thread will read the buttons in an interrupt like fashion, and
 * also initializes SDL_INIT_VIDEO and the surfaces
 *
 * it must be done in the same thread (at least on windows) because events only
 * work in the thread which called SDL_Init(SubSystem) with SDL_INIT_VIDEO
 *
 * This is an SDL thread and relies on preemptive behavoir of the host
 * Try and load the background image. If it fails go without  Set things up  Fullscreen mode for maemo app  SDL touch screen fix: Work around a SDL assumption that returns
       relative mouse coordinates when you get to the screen edges
       using the touchscreen and a disabled mouse cursor.
      start maemo thread: Listen to display on/off events and battery monitoring  0-count so it blocks  let system_init proceed 
     * finally enter the button loop  Order here is relevent to prevent deadlocks and use of destroyed
       sync primitives by kernel threads  not needed for native threads  Shut down SDL event loop  since sim_thread_shutdown() grabs the mutex we need to let it free,
     * otherwise SDL_WaitThread will deadlock  wait for event thread to finish  lock again before entering the scheduler  sim_thread_shutdown() will cause sim_do_exit() to be called via longjmp,
     * but only if we let the sdl thread scheduler exit the other threads  fake stack, OS manages size (and growth)  Make glib thread safe  0-count so it blocks  wait for sdl_event_thread to run so that it can initialize the surfaces
     * and video subsystem needed for SDL events  cleanup  stub  HAVE_STORAGE_FLUSH **************************************************************************
 *             __________               __   ___.                  
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___  
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /  
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <   
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \  
 *                     \/            \/     \/    \/            \/ 
 * $Id$
 *
 * Copyright (C) 2006 by Daniel Everton <dan@iocaine.org>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** use backgrounds by default  include remote by default  Used for player simulator  Used for player simulator 
 * This thread will read the buttons in an interrupt like fashion, and
 * also initializes SDL_INIT_VIDEO and the surfaces
 *
 * it must be done in the same thread (at least on windows) because events only
 * work in the thread which called SDL_Init(SubSystem) with SDL_INIT_VIDEO
 *
 * This is an SDL thread and relies on preemptive behavoir of the host
 * Try and load the background image. If it fails go without  Set things up  Fullscreen mode for maemo app  SDL touch screen fix: Work around a SDL assumption that returns
       relative mouse coordinates when you get to the screen edges
       using the touchscreen and a disabled mouse cursor.
      start maemo thread: Listen to display on/off events and battery monitoring  0-count so it blocks  let system_init proceed 
     * finally enter the button loop  Order here is relevent to prevent deadlocks and use of destroyed
       sync primitives by kernel threads  not needed for native threads  Shut down SDL event loop  since sim_thread_shutdown() grabs the mutex we need to let it free,
     * otherwise SDL_WaitThread will deadlock  wait for event thread to finish  lock again before entering the scheduler  sim_thread_shutdown() will cause sim_do_exit() to be called via longjmp,
     * but only if we let the sdl thread scheduler exit the other threads  fake stack, OS manages size (and growth)  Make glib thread safe  0-count so it blocks  wait for sdl_event_thread to run so that it can initialize the surfaces
     * and video subsystem needed for SDL events  cleanup  stub  HAVE_STORAGE_FLUSH 