**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002-2007 Björn Stenberg
 * Copyright (C) 2007-2008 Nicolas Pennequin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Image stuff  Extract a part from a path.
 *
 * buf      - buffer extract part to.
 * buf_size - size of buffer.
 * path     - path to extract from.
 * level    - what to extract. 0 is file name, 1 is parent of file, 2 is
 *            parent of parent, etc.
 *
 * Returns buf if the desired level was found, NULL otherwise.
  A helper to determine the enum value for pitch/speed.

   When there are two choices (i.e. boolean), return 1 if the value is
   different from normal value and 2 if the value is the same as the
   normal value.  E.g. "%?Sp<%Sp>" would show the pitch only when
   playing at a modified pitch.

   When there are more than two choices (i.e. enum), the left half of
   the choices are to show 0..normal range, and the right half of the
   choices are to show values over that.  The last entry is used when
   it is set to the normal setting, following the rockbox convention
   to use the last entry for special values.

   E.g.

   2 items: %?Sp<0..99 or 101..infinity|100>
   3 items: %?Sp<0..99|101..infinity|100>
   4 items: %?Sp<0..49|50..99|101..infinity|100>
   5 items: %?Sp<0..49|50..99|101..149|150..infinity|100>
   6 items: %?Sp<0..33|34..66|67..99|101..133|134..infinity|100>
   7 items: %?Sp<0..33|34..66|67..99|101..133|134..167|167..infinity|100>
 Remove extension  All tokens which only need the info to return a value go in here  make it a percentage  ignore remainders < 100, so 22050 Hz becomes just 22k  id3 == NULL, handle the error based on the expected return type  Most tokens expect NULL on error so leave that for the default case,
             * The ones that expect "0" need to be handled  Formats the frequency (specified in Hz) in MHz,    with one or two digits after the decimal point --  depending on the frequency changing step.          Returns buf                                        Tokens which are really only used by the radio screen go in here  Radio/tuner tokens  changes based on "region"  changes based on "region"  make sure it's in the valid range  end of the SKIN_TOKEN_HAVE_RDS case  HAVE_RDS_CAP  Don't inline this; it was broken out of get_token_value to reduce stack
 * usage.
  fall through  Return the tags value as text. buf should be used as temp storage if needed.

   intval is used with conditionals/enums: when this function is called,
   intval should contain the number of options in the conditional/enum.
   When this function returns, intval is -1 if the tag is non numeric or,
   if the tag is numeric, *intval is the enum case we want to go to (between 1
   and the original value of *intval, inclusive).
   When not treating a conditional/enum, intval should be NULL.
 Think very carefully about using this. 
                             maybe get_id3_token() is the better place?  if the token is an RTC one, update the time
       and do the necessary checks  so 0 is the first item  First enum is used for "unknown level",
                         * last enum is used for 100%.
                          music  stop  play  pause  ff / rwd  recording  radio  d: day of month (01..31)  e: day of month, blank padded ( 1..31)  H: hour (00..23)  k: hour ( 0..23)  I: hour (01..12)  l: hour ( 1..12)  m: month (01..12)  M: minute (00..59)  S: second (00..59)  y: last two digits of year (00..99)  Y: year (1970...)  p: upper case AM or PM indicator  P: lower case am or pm indicator  a: abbreviated weekday name (Sun..Sat)  b: abbreviated month name (Jan..Dec)  u: day of week (1..7); 1 is Monday  w: day of week (0..6); 0 is Sunday  peakmeter  off  no tag  due to above, coming here with !id3 shouldn't be possible hold switch or softlock Handle contionals  %?St|name|<min|min+1|...|max-1|max>  settings with decimals can't be used in conditionals  %?St|name|<#000000|#000001|...|#FFFFFF>  shouldn't overflow since colors are stored
                             * on 16 bits ...
                             * but this is pretty useless anyway  %?St|name|<1st choice|2nd choice|...>  %?St|name|<1st choice|2nd choice|...>  Not sure about this one. cfg_name/vals are
                             * indexed from 0 right?  %?St|name|<if true|if false>  %?St|name|<if non empty string|if empty>
                         * The string's emptyness discards the setting's
                         * prefix and suffix  if there is a prefix we should ignore it here  This shouldn't happen ... but you never know  Special handlng for filenames because we dont want to show the prefix  Recording tokens  order from REC_FREQ_CFG_VAL_LIST  Use rate in use, not current measured rate if it changed  SIMULATOR  WAV, AIFF, WV, MPEG  FIXME: I dont know if this is needed?  Fixme later  HAVE_RECORDING **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002-2007 Björn Stenberg
 * Copyright (C) 2007-2008 Nicolas Pennequin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Image stuff  Extract a part from a path.
 *
 * buf      - buffer extract part to.
 * buf_size - size of buffer.
 * path     - path to extract from.
 * level    - what to extract. 0 is file name, 1 is parent of file, 2 is
 *            parent of parent, etc.
 *
 * Returns buf if the desired level was found, NULL otherwise.
  A helper to determine the enum value for pitch/speed.

   When there are two choices (i.e. boolean), return 1 if the value is
   different from normal value and 2 if the value is the same as the
   normal value.  E.g. "%?Sp<%Sp>" would show the pitch only when
   playing at a modified pitch.

   When there are more than two choices (i.e. enum), the left half of
   the choices are to show 0..normal range, and the right half of the
   choices are to show values over that.  The last entry is used when
   it is set to the normal setting, following the rockbox convention
   to use the last entry for special values.

   E.g.

   2 items: %?Sp<0..99 or 101..infinity|100>
   3 items: %?Sp<0..99|101..infinity|100>
   4 items: %?Sp<0..49|50..99|101..infinity|100>
   5 items: %?Sp<0..49|50..99|101..149|150..infinity|100>
   6 items: %?Sp<0..33|34..66|67..99|101..133|134..infinity|100>
   7 items: %?Sp<0..33|34..66|67..99|101..133|134..167|167..infinity|100>
 Remove extension  All tokens which only need the info to return a value go in here  make it a percentage  ignore remainders < 100, so 22050 Hz becomes just 22k  id3 == NULL, handle the error based on the expected return type  Most tokens expect NULL on error so leave that for the default case,
             * The ones that expect "0" need to be handled  Formats the frequency (specified in Hz) in MHz,    with one or two digits after the decimal point --  depending on the frequency changing step.          Returns buf                                        Tokens which are really only used by the radio screen go in here  Radio/tuner tokens  changes based on "region"  changes based on "region"  make sure it's in the valid range  end of the SKIN_TOKEN_HAVE_RDS case  HAVE_RDS_CAP  Don't inline this; it was broken out of get_token_value to reduce stack
 * usage.
  fall through  Return the tags value as text. buf should be used as temp storage if needed.

   intval is used with conditionals/enums: when this function is called,
   intval should contain the number of options in the conditional/enum.
   When this function returns, intval is -1 if the tag is non numeric or,
   if the tag is numeric, *intval is the enum case we want to go to (between 1
   and the original value of *intval, inclusive).
   When not treating a conditional/enum, intval should be NULL.
 Think very carefully about using this. 
                             maybe get_id3_token() is the better place?  if the token is an RTC one, update the time
       and do the necessary checks  so 0 is the first item  First enum is used for "unknown level",
                         * last enum is used for 100%.
                          music  stop  play  pause  ff / rwd  recording  radio  d: day of month (01..31)  e: day of month, blank padded ( 1..31)  H: hour (00..23)  k: hour ( 0..23)  I: hour (01..12)  l: hour ( 1..12)  m: month (01..12)  M: minute (00..59)  S: second (00..59)  y: last two digits of year (00..99)  Y: year (1970...)  p: upper case AM or PM indicator  P: lower case am or pm indicator  a: abbreviated weekday name (Sun..Sat)  b: abbreviated month name (Jan..Dec)  u: day of week (1..7); 1 is Monday  w: day of week (0..6); 0 is Sunday  peakmeter  off  no tag  due to above, coming here with !id3 shouldn't be possible hold switch or softlock Handle contionals  %?St|name|<min|min+1|...|max-1|max>  settings with decimals can't be used in conditionals  %?St|name|<#000000|#000001|...|#FFFFFF>  shouldn't overflow since colors are stored
                             * on 16 bits ...
                             * but this is pretty useless anyway  %?St|name|<1st choice|2nd choice|...>  %?St|name|<1st choice|2nd choice|...>  Not sure about this one. cfg_name/vals are
                             * indexed from 0 right?  %?St|name|<if true|if false>  %?St|name|<if non empty string|if empty>
                         * The string's emptyness discards the setting's
                         * prefix and suffix  if there is a prefix we should ignore it here  This shouldn't happen ... but you never know  Special handlng for filenames because we dont want to show the prefix  Recording tokens  order from REC_FREQ_CFG_VAL_LIST  Use rate in use, not current measured rate if it changed  SIMULATOR  WAV, AIFF, WV, MPEG  FIXME: I dont know if this is needed?  Fixme later  HAVE_RECORDING **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2002-2007 Björn Stenberg
 * Copyright (C) 2007-2008 Nicolas Pennequin
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Image stuff  Extract a part from a path.
 *
 * buf      - buffer extract part to.
 * buf_size - size of buffer.
 * path     - path to extract from.
 * level    - what to extract. 0 is file name, 1 is parent of file, 2 is
 *            parent of parent, etc.
 *
 * Returns buf if the desired level was found, NULL otherwise.
  A helper to determine the enum value for pitch/speed.

   When there are two choices (i.e. boolean), return 1 if the value is
   different from normal value and 2 if the value is the same as the
   normal value.  E.g. "%?Sp<%Sp>" would show the pitch only when
   playing at a modified pitch.

   When there are more than two choices (i.e. enum), the left half of
   the choices are to show 0..normal range, and the right half of the
   choices are to show values over that.  The last entry is used when
   it is set to the normal setting, following the rockbox convention
   to use the last entry for special values.

   E.g.

   2 items: %?Sp<0..99 or 101..infinity|100>
   3 items: %?Sp<0..99|101..infinity|100>
   4 items: %?Sp<0..49|50..99|101..infinity|100>
   5 items: %?Sp<0..49|50..99|101..149|150..infinity|100>
   6 items: %?Sp<0..33|34..66|67..99|101..133|134..infinity|100>
   7 items: %?Sp<0..33|34..66|67..99|101..133|134..167|167..infinity|100>
 Remove extension  All tokens which only need the info to return a value go in here  make it a percentage  ignore remainders < 100, so 22050 Hz becomes just 22k  id3 == NULL, handle the error based on the expected return type  Most tokens expect NULL on error so leave that for the default case,
             * The ones that expect "0" need to be handled  Formats the frequency (specified in Hz) in MHz,    with one or two digits after the decimal point --  depending on the frequency changing step.          Returns buf                                        Tokens which are really only used by the radio screen go in here  Radio/tuner tokens  changes based on "region"  changes based on "region"  make sure it's in the valid range  end of the SKIN_TOKEN_HAVE_RDS case  HAVE_RDS_CAP  Don't inline this; it was broken out of get_token_value to reduce stack
 * usage.
  fall through  Return the tags value as text. buf should be used as temp storage if needed.

   intval is used with conditionals/enums: when this function is called,
   intval should contain the number of options in the conditional/enum.
   When this function returns, intval is -1 if the tag is non numeric or,
   if the tag is numeric, *intval is the enum case we want to go to (between 1
   and the original value of *intval, inclusive).
   When not treating a conditional/enum, intval should be NULL.
 Think very carefully about using this. 
                             maybe get_id3_token() is the better place?  if the token is an RTC one, update the time
       and do the necessary checks  so 0 is the first item  First enum is used for "unknown level",
                         * last enum is used for 100%.
                          music  stop  play  pause  ff / rwd  recording  radio  d: day of month (01..31)  e: day of month, blank padded ( 1..31)  H: hour (00..23)  k: hour ( 0..23)  I: hour (01..12)  l: hour ( 1..12)  m: month (01..12)  M: minute (00..59)  S: second (00..59)  y: last two digits of year (00..99)  Y: year (1970...)  p: upper case AM or PM indicator  P: lower case am or pm indicator  a: abbreviated weekday name (Sun..Sat)  b: abbreviated month name (Jan..Dec)  u: day of week (1..7); 1 is Monday  w: day of week (0..6); 0 is Sunday  peakmeter  off  no tag  due to above, coming here with !id3 shouldn't be possible hold switch or softlock Handle contionals  %?St|name|<min|min+1|...|max-1|max>  settings with decimals can't be used in conditionals  %?St|name|<#000000|#000001|...|#FFFFFF>  shouldn't overflow since colors are stored
                             * on 16 bits ...
                             * but this is pretty useless anyway  %?St|name|<1st choice|2nd choice|...>  %?St|name|<1st choice|2nd choice|...>  Not sure about this one. cfg_name/vals are
                             * indexed from 0 right?  %?St|name|<if true|if false>  %?St|name|<if non empty string|if empty>
                         * The string's emptyness discards the setting's
                         * prefix and suffix  if there is a prefix we should ignore it here  This shouldn't happen ... but you never know  Special handlng for filenames because we dont want to show the prefix  Recording tokens  order from REC_FREQ_CFG_VAL_LIST  Use rate in use, not current measured rate if it changed  SIMULATOR  WAV, AIFF, WV, MPEG  FIXME: I dont know if this is needed?  Fixme later  HAVE_RECORDING 