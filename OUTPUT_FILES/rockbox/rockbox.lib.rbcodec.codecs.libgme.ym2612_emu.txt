 Game_Music_Emu $vers. http://www.slack.net/~ant/ Based on Gens 2.10 ym2612.c Copyright (C) 2002 Stéphane Dallongeville (gens AT consolemul.com)  Copyright (C) 2004-2007 Shay Green. This module is free software; you
can redistribute it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version. This
module is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
details. You should have received a copy of the GNU Lesser General Public
License along with this module; if not, write to the Free Software Foundation,
Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA  This is mostly the original source in its C style and all. Somewhat optimized and simplified. Uses a template to generate the many variants of Update_Chan. Rewrote header file. In need of full rewrite by someone more familiar with FM sound and the YM2612. Has some inaccuracies compared to the Sega Genesis sound, particularly being mixed at such a high sample accuracy (the Genesis sounds like it has only 8 bit samples). - Shay Ported again to c by gama. Not sure if performance is better than the original c version. FD = 0 FD = 1 FD = 2 FD = 3 current phase calculation int en0, en1, en2, en3;            // current enveloppe calculation on recupere le bon pointeur de slot la touche est-elle rel'chee ? Fix Ecco 2 splash sound      SL->Ecnt = g.DECAY_TO_ATTACK [g.ENV_TAB [SL->Ecnt >> ENV_LBITS]] + ENV_ATTACK;      SL->Ecnt = 0; on recupere le bon pointeur de slot la touche est-elle appuyee ? attack phase ? SOR2 do a lot of TL adjustement and this fix R.Shinobi jump sound... SSG-EG envelope shapes :
			   E  At Al H
			  
			   1  0  0  0  \\\\
			   1  0  0  1  \___
			   1  0  1  0  \/\/
			   1  0  1  1  \
			   1  1  0  0  ////
			   1  1  0  1  /
			   1  1  1  0  /\/\
			   1  1  1  1  /___
			  
			   E  = SSG-EG enable
			   At = Start negate
			   Al = Altern
			   H  = Hold  Fix VectorMan 2 heli sound (level 1) Real thing ?          if (ch->FB = ((data >> 3) & 7)) ch->FB = 9 - ch->FB;       // Thunder force 4 (music stage 8), Gynoug, Aladdin bug sound...          else ch->FB = 31; LFO enable Cool Spot music 1, LFO modified severals time which distord the sound, have to check that on a real genesis... Parametre divers b7 = CSM MODE b6 = 3 slot mode b5 = reset b b4 = reset a b3 = timer enable b b2 = timer enable a b1 = load b b0 = load a We changed the channel 2 mode, so recalculate phase step This fix the punch sound in Street of Rage 2 recalculate phase step          if ((data & 2) && (YM2612->Status & 2)) YM2612->TimerBcnt = YM2612->TimerBL;          if ((data & 1) && (YM2612->Status & 1)) YM2612->TimerAcnt = YM2612->TimerAL;          YM2612->Status &= (~data >> 4);                  // Reset du Status au cas ou c'est demande Reset Status On appuie sur la touche pour le slot 1 On rel'che la touche pour le slot 1 On appuie sur la touche pour le slot 3 On rel'che la touche pour le slot 3 On appuie sur la touche pour le slot 2 On rel'che la touche pour le slot 2 On appuie sur la touche pour le slot 4 On rel'che la touche pour le slot 4 activation/desactivation du DAC 144 = 12 * (prescale * 2) = 12 * 6 * 2 prescale set to 6 by default double Frequence = (double)Frequency / FP_ONE_CLOCK;  Tableau TL : [0     -  4095] = +output  [4095  - ...] = +output overflow (fill with 0) [12288 - 16383] = -output  [16384 - ...] = -output overflow (fill with 0) YM2612 cut off sound after 78 dB (14 bits output ?) Decibel -> Voltage Tableau SIN : impl->g.SIN_TAB [x] [y] = sin(x) * y;  x = phase and y = volume Sinus in dB convert to dB Get TL range Tableau LFO (LFO wav) : Sinus ajusted to MAX enveloppe modulation Sinus Tableau Enveloppe : impl->g.ENV_TAB [0] -> impl->g.ENV_TAB [ENV_LENGHT - 1]              = attack curve impl->g.ENV_TAB [ENV_LENGHT] -> impl->g.ENV_TAB [2 * ENV_LENGHT - 1] = decay curve Attack curve (x^8 - music level 2 Vectorman 2) used to gain higher precision  Decay curve (just linear) for the stopped state Tableau pour la conversion Attack -> Decay and Decay -> Attack Tableau pour le Substain Level 3 and not 6 (Mickey Mania first music for test) special case : volume off Tableau Frequency Step * 1 / 2 because MUL = value * 2 double const factor = Frequence / 2.0 / (1 << ((21 - 7) - SIN_LBITS - SIN_HBITS));  double const factor = Frequence / 2.0 * (1 << (SIN_LBITS + SIN_HBITS - (21 - 7)));  Tableaux Attack & Decay Rate bits 0-1 : 4*(x1.00, x1.25, x1.50, x1.75) on ajuste pour le tableau impl->g.ENV_TAB bits 2-5 : shift bits (x2^0 - x2^15) Tableau Detune double const factor = 1.0 / (1 << (21 - SIN_LBITS - SIN_HBITS)) * Frequence;  double const factor = (1 << (SIN_LBITS + SIN_HBITS - 21)) * Frequence;  double y = DT_DEF_TAB [(i << 5) + j] * factor;  Tableau LFO Only set rates if necessary Put it at the end of Decay phase... Env_Attack_Next Verified with Gynoug even in HQ (explode SFX) Env_Decay_Next Verified with Gynoug even in HQ (explode SFX) Env_Substain_Next(slot_t *SL) SSG envelope type re KEY ON sl->Fcnt = 0; sl->ChgEnM = ~0; fall through Env_Release_Next default: no op Timer A ON ?      if ((impl->YM2612.TimerAcnt -= 14073) <= 0)       // 13879=NTSC (old: 14475=NTSC  14586=PAL) timer a overflow Timer B ON ?      if ((impl->YM2612.TimerBcnt -= 14073) <= 0)       // 13879=NTSC (old: 14475=NTSC  14586=PAL) timer b overflow Mise à jour des pas des compteurs-frequences s'ils ont ete modifies static int seq [4] = { 2, 1, 3, 0 }; if ( i2 ) i2 = seq [i]; keycode attenuation si le KSR a change alors les differents taux pour l'enveloppe sont mis à jour Game_Music_Emu $vers. http://www.slack.net/~ant/ Based on Gens 2.10 ym2612.c Copyright (C) 2002 Stéphane Dallongeville (gens AT consolemul.com)  Copyright (C) 2004-2007 Shay Green. This module is free software; you
can redistribute it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version. This
module is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
details. You should have received a copy of the GNU Lesser General Public
License along with this module; if not, write to the Free Software Foundation,
Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA  This is mostly the original source in its C style and all. Somewhat optimized and simplified. Uses a template to generate the many variants of Update_Chan. Rewrote header file. In need of full rewrite by someone more familiar with FM sound and the YM2612. Has some inaccuracies compared to the Sega Genesis sound, particularly being mixed at such a high sample accuracy (the Genesis sounds like it has only 8 bit samples). - Shay Ported again to c by gama. Not sure if performance is better than the original c version. FD = 0 FD = 1 FD = 2 FD = 3 current phase calculation int en0, en1, en2, en3;            // current enveloppe calculation on recupere le bon pointeur de slot la touche est-elle rel'chee ? Fix Ecco 2 splash sound      SL->Ecnt = g.DECAY_TO_ATTACK [g.ENV_TAB [SL->Ecnt >> ENV_LBITS]] + ENV_ATTACK;      SL->Ecnt = 0; on recupere le bon pointeur de slot la touche est-elle appuyee ? attack phase ? SOR2 do a lot of TL adjustement and this fix R.Shinobi jump sound... SSG-EG envelope shapes :
			   E  At Al H
			  
			   1  0  0  0  \\\\
			   1  0  0  1  \___
			   1  0  1  0  \/\/
			   1  0  1  1  \
			   1  1  0  0  ////
			   1  1  0  1  /
			   1  1  1  0  /\/\
			   1  1  1  1  /___
			  
			   E  = SSG-EG enable
			   At = Start negate
			   Al = Altern
			   H  = Hold  Fix VectorMan 2 heli sound (level 1) Real thing ?          if (ch->FB = ((data >> 3) & 7)) ch->FB = 9 - ch->FB;       // Thunder force 4 (music stage 8), Gynoug, Aladdin bug sound...          else ch->FB = 31; LFO enable Cool Spot music 1, LFO modified severals time which distord the sound, have to check that on a real genesis... Parametre divers b7 = CSM MODE b6 = 3 slot mode b5 = reset b b4 = reset a b3 = timer enable b b2 = timer enable a b1 = load b b0 = load a We changed the channel 2 mode, so recalculate phase step This fix the punch sound in Street of Rage 2 recalculate phase step          if ((data & 2) && (YM2612->Status & 2)) YM2612->TimerBcnt = YM2612->TimerBL;          if ((data & 1) && (YM2612->Status & 1)) YM2612->TimerAcnt = YM2612->TimerAL;          YM2612->Status &= (~data >> 4);                  // Reset du Status au cas ou c'est demande Reset Status On appuie sur la touche pour le slot 1 On rel'che la touche pour le slot 1 On appuie sur la touche pour le slot 3 On rel'che la touche pour le slot 3 On appuie sur la touche pour le slot 2 On rel'che la touche pour le slot 2 On appuie sur la touche pour le slot 4 On rel'che la touche pour le slot 4 activation/desactivation du DAC 144 = 12 * (prescale * 2) = 12 * 6 * 2 prescale set to 6 by default double Frequence = (double)Frequency / FP_ONE_CLOCK;  Tableau TL : [0     -  4095] = +output  [4095  - ...] = +output overflow (fill with 0) [12288 - 16383] = -output  [16384 - ...] = -output overflow (fill with 0) YM2612 cut off sound after 78 dB (14 bits output ?) Decibel -> Voltage Tableau SIN : impl->g.SIN_TAB [x] [y] = sin(x) * y;  x = phase and y = volume Sinus in dB convert to dB Get TL range Tableau LFO (LFO wav) : Sinus ajusted to MAX enveloppe modulation Sinus Tableau Enveloppe : impl->g.ENV_TAB [0] -> impl->g.ENV_TAB [ENV_LENGHT - 1]              = attack curve impl->g.ENV_TAB [ENV_LENGHT] -> impl->g.ENV_TAB [2 * ENV_LENGHT - 1] = decay curve Attack curve (x^8 - music level 2 Vectorman 2) used to gain higher precision  Decay curve (just linear) for the stopped state Tableau pour la conversion Attack -> Decay and Decay -> Attack Tableau pour le Substain Level 3 and not 6 (Mickey Mania first music for test) special case : volume off Tableau Frequency Step * 1 / 2 because MUL = value * 2 double const factor = Frequence / 2.0 / (1 << ((21 - 7) - SIN_LBITS - SIN_HBITS));  double const factor = Frequence / 2.0 * (1 << (SIN_LBITS + SIN_HBITS - (21 - 7)));  Tableaux Attack & Decay Rate bits 0-1 : 4*(x1.00, x1.25, x1.50, x1.75) on ajuste pour le tableau impl->g.ENV_TAB bits 2-5 : shift bits (x2^0 - x2^15) Tableau Detune double const factor = 1.0 / (1 << (21 - SIN_LBITS - SIN_HBITS)) * Frequence;  double const factor = (1 << (SIN_LBITS + SIN_HBITS - 21)) * Frequence;  double y = DT_DEF_TAB [(i << 5) + j] * factor;  Tableau LFO Only set rates if necessary Put it at the end of Decay phase... Env_Attack_Next Verified with Gynoug even in HQ (explode SFX) Env_Decay_Next Verified with Gynoug even in HQ (explode SFX) Env_Substain_Next(slot_t *SL) SSG envelope type re KEY ON sl->Fcnt = 0; sl->ChgEnM = ~0; fall through Env_Release_Next default: no op Timer A ON ?      if ((impl->YM2612.TimerAcnt -= 14073) <= 0)       // 13879=NTSC (old: 14475=NTSC  14586=PAL) timer a overflow Timer B ON ?      if ((impl->YM2612.TimerBcnt -= 14073) <= 0)       // 13879=NTSC (old: 14475=NTSC  14586=PAL) timer b overflow Mise à jour des pas des compteurs-frequences s'ils ont ete modifies static int seq [4] = { 2, 1, 3, 0 }; if ( i2 ) i2 = seq [i]; keycode attenuation si le KSR a change alors les differents taux pour l'enveloppe sont mis à jour Game_Music_Emu $vers. http://www.slack.net/~ant/ Based on Gens 2.10 ym2612.c Copyright (C) 2002 Stéphane Dallongeville (gens AT consolemul.com)  Copyright (C) 2004-2007 Shay Green. This module is free software; you
can redistribute it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version. This
module is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
details. You should have received a copy of the GNU Lesser General Public
License along with this module; if not, write to the Free Software Foundation,
Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA  This is mostly the original source in its C style and all. Somewhat optimized and simplified. Uses a template to generate the many variants of Update_Chan. Rewrote header file. In need of full rewrite by someone more familiar with FM sound and the YM2612. Has some inaccuracies compared to the Sega Genesis sound, particularly being mixed at such a high sample accuracy (the Genesis sounds like it has only 8 bit samples). - Shay Ported again to c by gama. Not sure if performance is better than the original c version. FD = 0 FD = 1 FD = 2 FD = 3 current phase calculation int en0, en1, en2, en3;            // current enveloppe calculation on recupere le bon pointeur de slot la touche est-elle rel'chee ? Fix Ecco 2 splash sound      SL->Ecnt = g.DECAY_TO_ATTACK [g.ENV_TAB [SL->Ecnt >> ENV_LBITS]] + ENV_ATTACK;      SL->Ecnt = 0; on recupere le bon pointeur de slot la touche est-elle appuyee ? attack phase ? SOR2 do a lot of TL adjustement and this fix R.Shinobi jump sound... SSG-EG envelope shapes :
			   E  At Al H
			  
			   1  0  0  0  \\\\
			   1  0  0  1  \___
			   1  0  1  0  \/\/
			   1  0  1  1  \
			   1  1  0  0  ////
			   1  1  0  1  /
			   1  1  1  0  /\/\
			   1  1  1  1  /___
			  
			   E  = SSG-EG enable
			   At = Start negate
			   Al = Altern
			   H  = Hold  Fix VectorMan 2 heli sound (level 1) Real thing ?          if (ch->FB = ((data >> 3) & 7)) ch->FB = 9 - ch->FB;       // Thunder force 4 (music stage 8), Gynoug, Aladdin bug sound...          else ch->FB = 31; LFO enable Cool Spot music 1, LFO modified severals time which distord the sound, have to check that on a real genesis... Parametre divers b7 = CSM MODE b6 = 3 slot mode b5 = reset b b4 = reset a b3 = timer enable b b2 = timer enable a b1 = load b b0 = load a We changed the channel 2 mode, so recalculate phase step This fix the punch sound in Street of Rage 2 recalculate phase step          if ((data & 2) && (YM2612->Status & 2)) YM2612->TimerBcnt = YM2612->TimerBL;          if ((data & 1) && (YM2612->Status & 1)) YM2612->TimerAcnt = YM2612->TimerAL;          YM2612->Status &= (~data >> 4);                  // Reset du Status au cas ou c'est demande Reset Status On appuie sur la touche pour le slot 1 On rel'che la touche pour le slot 1 On appuie sur la touche pour le slot 3 On rel'che la touche pour le slot 3 On appuie sur la touche pour le slot 2 On rel'che la touche pour le slot 2 On appuie sur la touche pour le slot 4 On rel'che la touche pour le slot 4 activation/desactivation du DAC 144 = 12 * (prescale * 2) = 12 * 6 * 2 prescale set to 6 by default double Frequence = (double)Frequency / FP_ONE_CLOCK;  Tableau TL : [0     -  4095] = +output  [4095  - ...] = +output overflow (fill with 0) [12288 - 16383] = -output  [16384 - ...] = -output overflow (fill with 0) YM2612 cut off sound after 78 dB (14 bits output ?) Decibel -> Voltage Tableau SIN : impl->g.SIN_TAB [x] [y] = sin(x) * y;  x = phase and y = volume Sinus in dB convert to dB Get TL range Tableau LFO (LFO wav) : Sinus ajusted to MAX enveloppe modulation Sinus Tableau Enveloppe : impl->g.ENV_TAB [0] -> impl->g.ENV_TAB [ENV_LENGHT - 1]              = attack curve impl->g.ENV_TAB [ENV_LENGHT] -> impl->g.ENV_TAB [2 * ENV_LENGHT - 1] = decay curve Attack curve (x^8 - music level 2 Vectorman 2) used to gain higher precision  Decay curve (just linear) for the stopped state Tableau pour la conversion Attack -> Decay and Decay -> Attack Tableau pour le Substain Level 3 and not 6 (Mickey Mania first music for test) special case : volume off Tableau Frequency Step * 1 / 2 because MUL = value * 2 double const factor = Frequence / 2.0 / (1 << ((21 - 7) - SIN_LBITS - SIN_HBITS));  double const factor = Frequence / 2.0 * (1 << (SIN_LBITS + SIN_HBITS - (21 - 7)));  Tableaux Attack & Decay Rate bits 0-1 : 4*(x1.00, x1.25, x1.50, x1.75) on ajuste pour le tableau impl->g.ENV_TAB bits 2-5 : shift bits (x2^0 - x2^15) Tableau Detune double const factor = 1.0 / (1 << (21 - SIN_LBITS - SIN_HBITS)) * Frequence;  double const factor = (1 << (SIN_LBITS + SIN_HBITS - 21)) * Frequence;  double y = DT_DEF_TAB [(i << 5) + j] * factor;  Tableau LFO Only set rates if necessary Put it at the end of Decay phase... Env_Attack_Next Verified with Gynoug even in HQ (explode SFX) Env_Decay_Next Verified with Gynoug even in HQ (explode SFX) Env_Substain_Next(slot_t *SL) SSG envelope type re KEY ON sl->Fcnt = 0; sl->ChgEnM = ~0; fall through Env_Release_Next default: no op Timer A ON ?      if ((impl->YM2612.TimerAcnt -= 14073) <= 0)       // 13879=NTSC (old: 14475=NTSC  14586=PAL) timer a overflow Timer B ON ?      if ((impl->YM2612.TimerBcnt -= 14073) <= 0)       // 13879=NTSC (old: 14475=NTSC  14586=PAL) timer b overflow Mise à jour des pas des compteurs-frequences s'ils ont ete modifies static int seq [4] = { 2, 1, 3, 0 }; if ( i2 ) i2 = seq [i]; keycode attenuation si le KSR a change alors les differents taux pour l'enveloppe sont mis à jour