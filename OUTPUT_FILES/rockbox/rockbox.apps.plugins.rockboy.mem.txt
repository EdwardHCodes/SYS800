
 * In order to make reads and writes efficient, we keep tables
 * (indexed by the high nibble of the address) specifying which
 * regions can be read/written without a function call. For such
 * ranges, the pointer in the map table points to the base of the
 * region in host system memory. For ranges that require special
 * processing, the pointer is NULL.
 *
 * mem_updatemap is called whenever bank changes or other operations
 * make the old maps potentially invalid.
 [R_VBK & 1][R_VBK & 1]
 * ioreg_write handles output to io registers in the FF00-FF7F,FFFF
 * range. It takes the register number (low byte of the address) and a
 * byte value to be written.
  FIXME - this is a hack for stupid roms that probe serial  & 0x7f; 
 * Memory bank controllers typically intercept write attempts to
 * 0000-7FFF, using the address and byte written as instructions to
 * change rom or sram banks, control special hardware, etc.
 *
 * mbc_write takes an address (which should be in the proper range)
 * and a byte value written to the address.
  printf("mbc %d: rom bank %02X -[%04X:%02X]-> ", mbc.type, mbc.rombank, a, b);  is this at all right?  FIXME - save high bit as rumble state  mask off high bit  fall thru  FIXME - this is all guesswork -- is it right???  FIXME - this is all guesswork -- is it right??? 
 * mem_write is the basic write function. Although it should only be
 * called when the write map contains a NULL for the requested address
 * region, it accepts writes to any address.
  printf("write to 0x%04X: 0x%02X\n", a, b);  if ((R_STAT & 0x03) == 0x03) break;  if (R_STAT & 0x02) break;  return writehi(a & 0xFF, b); 
 * mem_read is the basic read function...not useful for much anymore
 * with the read map, but it's still necessary for the final messy
 * region.
  printf("read %04x\n", a);  if ((R_STAT & 0x03) == 0x03) return 0xFF;  if (R_STAT & 0x02) return 0xFF;  return readhi(a & 0xFF);  not reached 
 * In order to make reads and writes efficient, we keep tables
 * (indexed by the high nibble of the address) specifying which
 * regions can be read/written without a function call. For such
 * ranges, the pointer in the map table points to the base of the
 * region in host system memory. For ranges that require special
 * processing, the pointer is NULL.
 *
 * mem_updatemap is called whenever bank changes or other operations
 * make the old maps potentially invalid.
 [R_VBK & 1][R_VBK & 1]
 * ioreg_write handles output to io registers in the FF00-FF7F,FFFF
 * range. It takes the register number (low byte of the address) and a
 * byte value to be written.
  FIXME - this is a hack for stupid roms that probe serial  & 0x7f; 
 * Memory bank controllers typically intercept write attempts to
 * 0000-7FFF, using the address and byte written as instructions to
 * change rom or sram banks, control special hardware, etc.
 *
 * mbc_write takes an address (which should be in the proper range)
 * and a byte value written to the address.
  printf("mbc %d: rom bank %02X -[%04X:%02X]-> ", mbc.type, mbc.rombank, a, b);  is this at all right?  FIXME - save high bit as rumble state  mask off high bit  fall thru  FIXME - this is all guesswork -- is it right???  FIXME - this is all guesswork -- is it right??? 
 * mem_write is the basic write function. Although it should only be
 * called when the write map contains a NULL for the requested address
 * region, it accepts writes to any address.
  printf("write to 0x%04X: 0x%02X\n", a, b);  if ((R_STAT & 0x03) == 0x03) break;  if (R_STAT & 0x02) break;  return writehi(a & 0xFF, b); 
 * mem_read is the basic read function...not useful for much anymore
 * with the read map, but it's still necessary for the final messy
 * region.
  printf("read %04x\n", a);  if ((R_STAT & 0x03) == 0x03) return 0xFF;  if (R_STAT & 0x02) return 0xFF;  return readhi(a & 0xFF);  not reached 
 * In order to make reads and writes efficient, we keep tables
 * (indexed by the high nibble of the address) specifying which
 * regions can be read/written without a function call. For such
 * ranges, the pointer in the map table points to the base of the
 * region in host system memory. For ranges that require special
 * processing, the pointer is NULL.
 *
 * mem_updatemap is called whenever bank changes or other operations
 * make the old maps potentially invalid.
 [R_VBK & 1][R_VBK & 1]
 * ioreg_write handles output to io registers in the FF00-FF7F,FFFF
 * range. It takes the register number (low byte of the address) and a
 * byte value to be written.
  FIXME - this is a hack for stupid roms that probe serial  & 0x7f; 
 * Memory bank controllers typically intercept write attempts to
 * 0000-7FFF, using the address and byte written as instructions to
 * change rom or sram banks, control special hardware, etc.
 *
 * mbc_write takes an address (which should be in the proper range)
 * and a byte value written to the address.
  printf("mbc %d: rom bank %02X -[%04X:%02X]-> ", mbc.type, mbc.rombank, a, b);  is this at all right?  FIXME - save high bit as rumble state  mask off high bit  fall thru  FIXME - this is all guesswork -- is it right???  FIXME - this is all guesswork -- is it right??? 
 * mem_write is the basic write function. Although it should only be
 * called when the write map contains a NULL for the requested address
 * region, it accepts writes to any address.
  printf("write to 0x%04X: 0x%02X\n", a, b);  if ((R_STAT & 0x03) == 0x03) break;  if (R_STAT & 0x02) break;  return writehi(a & 0xFF, b); 
 * mem_read is the basic read function...not useful for much anymore
 * with the read map, but it's still necessary for the final messy
 * region.
  printf("read %04x\n", a);  if ((R_STAT & 0x03) == 0x03) return 0xFF;  if (R_STAT & 0x02) return 0xFF;  return readhi(a & 0xFF);  not reached 