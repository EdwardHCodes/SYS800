
 * MD5C.C - RSA Data Security, Inc., MD5 message-digest algorithm
 *
 * Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991. All
 * rights reserved.
 *
 * License to copy and use this software is granted provided that it
 * is identified as the "RSA Data Security, Inc. MD5 Message-Digest
 * Algorithm" in all material mentioning or referencing this software
 * or this function.
 *
 * License is also granted to make and use derivative works provided
 * that such works are identified as "derived from the RSA Data
 * Security, Inc. MD5 Message-Digest Algorithm" in all material
 * mentioning or referencing the derived work.
 *
 * RSA Data Security, Inc. makes no representations concerning either
 * the merchantability of this software or the suitability of this
 * software for any particular purpose. It is provided "as is"
 * without express or implied warranty of any kind.
 *
 * These notices must be retained in any copies of any part of this
 * documentation and/or software.
 *
 * $FreeBSD: src/lib/libmd/md5c.c,v 1.9.2.1 1999/08/29 14:57:12 peter Exp $
 *
 * This code is the same as the code published by RSA Inc.  It has been
 * edited for clarity and style only.
 *
 * ----------------------------------------------------------------------------
 * The md5_crypt() function was taken from freeBSD's libcrypt and contains
 * this license:
 *    "THE BEER-WARE LICENSE" (Revision 42):
 *     <phk@login.dknet.dk> wrote this file.  As long as you retain this notice you
 *     can do whatever you want with this stuff. If we meet some day, and you think
 *     this stuff is worth it, you can buy me a beer in return.   Poul-Henning Kamp
 *
 * $FreeBSD: src/lib/libcrypt/crypt.c,v 1.7.2.1 1999/08/29 14:56:33 peter Exp $
 *
 * ----------------------------------------------------------------------------
 * On April 19th, 2001 md5_crypt() was modified to make it reentrant
 * by Erik Andersen <andersen@uclibc.org>
 *
 *
 * June 28, 2001             Manuel Novoa III
 *
 * "Un-inlined" code using loops and static const tables in order to
 * reduce generated code size (on i386 from approx 4k to approx 2.5k).
 *
 * June 29, 2001             Manuel Novoa III
 *
 * Completely removed static PADDING array.
 *
 * Reintroduced the loop unrolling in MD5_Transform and added the
 * MD5_SIZE_OVER_SPEED option for configurability.  Define below as:
 *       0    fully unrolled loops
 *       1    partially unrolled (4 ops per loop)
 *       2    no unrolling -- introduces the need to swap 4 variables (slow)
 *       3    no unrolling and all 4 loops merged into one with switch
 *               in each loop (glacial)
 * On i386, sizes are roughly (-Os -fno-builtin):
 *     0: 3k     1: 2.5k     2: 2.2k     3: 2k
 *
 *
 * Since SuSv3 does not require crypt_r, modified again August 7, 2002
 * by Erik Andersen to remove reentrance stuff...
 
 * Valid values are  1 (fastest/largest) to 3 (smallest/slowest).
 ******************************************************************** MD5 context.  state (ABCD)  number of bits, modulo 2^64 (lsb first)  input buffer  i386 
 * __md5_Encodes input (uint32_t) into output (unsigned char). Assumes len is
 * a multiple of 4.
 
 * __md5_Decodes input (unsigned char) into output (uint32_t). Assumes len is
 * a multiple of 4.
  i386  F, G, H and I are basic MD5 functions.  ROTATE_LEFT rotates x left n bits. 
 * FF, GG, HH, and II transformations for rounds 1, 2, 3, and 4.
 * Rotation is separate from addition to prevent recomputation.
  MD5 initialization. Begins an MD5 operation, writing a new context.  Load magic initialization constants.  
 * MD5 block update operation. Continues an MD5 message-digest
 * operation, processing another message block, and updating the
 * context.
  Compute number of bytes mod 64  Update number of bits  Transform as many times as possible.  Buffer remaining input 
 * MD5 padding. Adds padding followed by original length.
  Save number of bits  Pad out to 56 mod 64.  Append length (before padding) 
 * MD5 finalization. Ends an MD5 message-digest operation, writing the
 * the message digest and zeroizing the context.
  Do padding.  Store state in digest  Zeroize sensitive information.  MD5 basic transformation. Transforms state based on block.  MD5_SIZE_OVER_SPEED > 1  round 1  round 2  round 3  round 4  1  2  3  4  MD5_SIZE_OVER_SPEED > 0  Round 1  Round 2  Round 3  Round 4  Round 1  Round 2  Round 3  Round 4  Round 1  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  Round 2  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  Round 3  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  Round 4  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  Zeroize sensitive information. 
 * UNIX password
 *
 * Use MD5 for what it is best at...
  final[16] exists only to aid in looping  Refine the Salt first  It stops at the first '$', max 8 chars  get the length of the true salt  The password first, since that is what is most unknown  Then our magic string  Then the raw salt  Then just as many characters of the MD5(pw, salt, pw)  Don't leave anything around in vm they could use. TODO: the above comment seems to be wrong. final is used later. Then something really weird...  Now make the output string 
	 * and now, just to make sure things don't run too fast
	 * On a 60 Mhz Pentium this takes 34 msec, so you would
	 * need 30 seconds to build a 1000 entry dictionary...
	  12 bytes max (sl is up to 8 bytes)  Add 5*4+2 = 22 bytes of hash, + NUL byte.  Don't leave anything around in vm they could use. 
 * MD5C.C - RSA Data Security, Inc., MD5 message-digest algorithm
 *
 * Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991. All
 * rights reserved.
 *
 * License to copy and use this software is granted provided that it
 * is identified as the "RSA Data Security, Inc. MD5 Message-Digest
 * Algorithm" in all material mentioning or referencing this software
 * or this function.
 *
 * License is also granted to make and use derivative works provided
 * that such works are identified as "derived from the RSA Data
 * Security, Inc. MD5 Message-Digest Algorithm" in all material
 * mentioning or referencing the derived work.
 *
 * RSA Data Security, Inc. makes no representations concerning either
 * the merchantability of this software or the suitability of this
 * software for any particular purpose. It is provided "as is"
 * without express or implied warranty of any kind.
 *
 * These notices must be retained in any copies of any part of this
 * documentation and/or software.
 *
 * $FreeBSD: src/lib/libmd/md5c.c,v 1.9.2.1 1999/08/29 14:57:12 peter Exp $
 *
 * This code is the same as the code published by RSA Inc.  It has been
 * edited for clarity and style only.
 *
 * ----------------------------------------------------------------------------
 * The md5_crypt() function was taken from freeBSD's libcrypt and contains
 * this license:
 *    "THE BEER-WARE LICENSE" (Revision 42):
 *     <phk@login.dknet.dk> wrote this file.  As long as you retain this notice you
 *     can do whatever you want with this stuff. If we meet some day, and you think
 *     this stuff is worth it, you can buy me a beer in return.   Poul-Henning Kamp
 *
 * $FreeBSD: src/lib/libcrypt/crypt.c,v 1.7.2.1 1999/08/29 14:56:33 peter Exp $
 *
 * ----------------------------------------------------------------------------
 * On April 19th, 2001 md5_crypt() was modified to make it reentrant
 * by Erik Andersen <andersen@uclibc.org>
 *
 *
 * June 28, 2001             Manuel Novoa III
 *
 * "Un-inlined" code using loops and static const tables in order to
 * reduce generated code size (on i386 from approx 4k to approx 2.5k).
 *
 * June 29, 2001             Manuel Novoa III
 *
 * Completely removed static PADDING array.
 *
 * Reintroduced the loop unrolling in MD5_Transform and added the
 * MD5_SIZE_OVER_SPEED option for configurability.  Define below as:
 *       0    fully unrolled loops
 *       1    partially unrolled (4 ops per loop)
 *       2    no unrolling -- introduces the need to swap 4 variables (slow)
 *       3    no unrolling and all 4 loops merged into one with switch
 *               in each loop (glacial)
 * On i386, sizes are roughly (-Os -fno-builtin):
 *     0: 3k     1: 2.5k     2: 2.2k     3: 2k
 *
 *
 * Since SuSv3 does not require crypt_r, modified again August 7, 2002
 * by Erik Andersen to remove reentrance stuff...
 
 * Valid values are  1 (fastest/largest) to 3 (smallest/slowest).
 ******************************************************************** MD5 context.  state (ABCD)  number of bits, modulo 2^64 (lsb first)  input buffer  i386 
 * __md5_Encodes input (uint32_t) into output (unsigned char). Assumes len is
 * a multiple of 4.
 
 * __md5_Decodes input (unsigned char) into output (uint32_t). Assumes len is
 * a multiple of 4.
  i386  F, G, H and I are basic MD5 functions.  ROTATE_LEFT rotates x left n bits. 
 * FF, GG, HH, and II transformations for rounds 1, 2, 3, and 4.
 * Rotation is separate from addition to prevent recomputation.
  MD5 initialization. Begins an MD5 operation, writing a new context.  Load magic initialization constants.  
 * MD5 block update operation. Continues an MD5 message-digest
 * operation, processing another message block, and updating the
 * context.
  Compute number of bytes mod 64  Update number of bits  Transform as many times as possible.  Buffer remaining input 
 * MD5 padding. Adds padding followed by original length.
  Save number of bits  Pad out to 56 mod 64.  Append length (before padding) 
 * MD5 finalization. Ends an MD5 message-digest operation, writing the
 * the message digest and zeroizing the context.
  Do padding.  Store state in digest  Zeroize sensitive information.  MD5 basic transformation. Transforms state based on block.  MD5_SIZE_OVER_SPEED > 1  round 1  round 2  round 3  round 4  1  2  3  4  MD5_SIZE_OVER_SPEED > 0  Round 1  Round 2  Round 3  Round 4  Round 1  Round 2  Round 3  Round 4  Round 1  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  Round 2  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  Round 3  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  Round 4  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  Zeroize sensitive information. 
 * UNIX password
 *
 * Use MD5 for what it is best at...
  final[16] exists only to aid in looping  Refine the Salt first  It stops at the first '$', max 8 chars  get the length of the true salt  The password first, since that is what is most unknown  Then our magic string  Then the raw salt  Then just as many characters of the MD5(pw, salt, pw)  Don't leave anything around in vm they could use. TODO: the above comment seems to be wrong. final is used later. Then something really weird...  Now make the output string 
	 * and now, just to make sure things don't run too fast
	 * On a 60 Mhz Pentium this takes 34 msec, so you would
	 * need 30 seconds to build a 1000 entry dictionary...
	  12 bytes max (sl is up to 8 bytes)  Add 5*4+2 = 22 bytes of hash, + NUL byte.  Don't leave anything around in vm they could use. 
 * MD5C.C - RSA Data Security, Inc., MD5 message-digest algorithm
 *
 * Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991. All
 * rights reserved.
 *
 * License to copy and use this software is granted provided that it
 * is identified as the "RSA Data Security, Inc. MD5 Message-Digest
 * Algorithm" in all material mentioning or referencing this software
 * or this function.
 *
 * License is also granted to make and use derivative works provided
 * that such works are identified as "derived from the RSA Data
 * Security, Inc. MD5 Message-Digest Algorithm" in all material
 * mentioning or referencing the derived work.
 *
 * RSA Data Security, Inc. makes no representations concerning either
 * the merchantability of this software or the suitability of this
 * software for any particular purpose. It is provided "as is"
 * without express or implied warranty of any kind.
 *
 * These notices must be retained in any copies of any part of this
 * documentation and/or software.
 *
 * $FreeBSD: src/lib/libmd/md5c.c,v 1.9.2.1 1999/08/29 14:57:12 peter Exp $
 *
 * This code is the same as the code published by RSA Inc.  It has been
 * edited for clarity and style only.
 *
 * ----------------------------------------------------------------------------
 * The md5_crypt() function was taken from freeBSD's libcrypt and contains
 * this license:
 *    "THE BEER-WARE LICENSE" (Revision 42):
 *     <phk@login.dknet.dk> wrote this file.  As long as you retain this notice you
 *     can do whatever you want with this stuff. If we meet some day, and you think
 *     this stuff is worth it, you can buy me a beer in return.   Poul-Henning Kamp
 *
 * $FreeBSD: src/lib/libcrypt/crypt.c,v 1.7.2.1 1999/08/29 14:56:33 peter Exp $
 *
 * ----------------------------------------------------------------------------
 * On April 19th, 2001 md5_crypt() was modified to make it reentrant
 * by Erik Andersen <andersen@uclibc.org>
 *
 *
 * June 28, 2001             Manuel Novoa III
 *
 * "Un-inlined" code using loops and static const tables in order to
 * reduce generated code size (on i386 from approx 4k to approx 2.5k).
 *
 * June 29, 2001             Manuel Novoa III
 *
 * Completely removed static PADDING array.
 *
 * Reintroduced the loop unrolling in MD5_Transform and added the
 * MD5_SIZE_OVER_SPEED option for configurability.  Define below as:
 *       0    fully unrolled loops
 *       1    partially unrolled (4 ops per loop)
 *       2    no unrolling -- introduces the need to swap 4 variables (slow)
 *       3    no unrolling and all 4 loops merged into one with switch
 *               in each loop (glacial)
 * On i386, sizes are roughly (-Os -fno-builtin):
 *     0: 3k     1: 2.5k     2: 2.2k     3: 2k
 *
 *
 * Since SuSv3 does not require crypt_r, modified again August 7, 2002
 * by Erik Andersen to remove reentrance stuff...
 
 * Valid values are  1 (fastest/largest) to 3 (smallest/slowest).
 ******************************************************************** MD5 context.  state (ABCD)  number of bits, modulo 2^64 (lsb first)  input buffer  i386 
 * __md5_Encodes input (uint32_t) into output (unsigned char). Assumes len is
 * a multiple of 4.
 
 * __md5_Decodes input (unsigned char) into output (uint32_t). Assumes len is
 * a multiple of 4.
  i386  F, G, H and I are basic MD5 functions.  ROTATE_LEFT rotates x left n bits. 
 * FF, GG, HH, and II transformations for rounds 1, 2, 3, and 4.
 * Rotation is separate from addition to prevent recomputation.
  MD5 initialization. Begins an MD5 operation, writing a new context.  Load magic initialization constants.  
 * MD5 block update operation. Continues an MD5 message-digest
 * operation, processing another message block, and updating the
 * context.
  Compute number of bytes mod 64  Update number of bits  Transform as many times as possible.  Buffer remaining input 
 * MD5 padding. Adds padding followed by original length.
  Save number of bits  Pad out to 56 mod 64.  Append length (before padding) 
 * MD5 finalization. Ends an MD5 message-digest operation, writing the
 * the message digest and zeroizing the context.
  Do padding.  Store state in digest  Zeroize sensitive information.  MD5 basic transformation. Transforms state based on block.  MD5_SIZE_OVER_SPEED > 1  round 1  round 2  round 3  round 4  1  2  3  4  MD5_SIZE_OVER_SPEED > 0  Round 1  Round 2  Round 3  Round 4  Round 1  Round 2  Round 3  Round 4  Round 1  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  Round 2  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  Round 3  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  Round 4  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  Zeroize sensitive information. 
 * UNIX password
 *
 * Use MD5 for what it is best at...
  final[16] exists only to aid in looping  Refine the Salt first  It stops at the first '$', max 8 chars  get the length of the true salt  The password first, since that is what is most unknown  Then our magic string  Then the raw salt  Then just as many characters of the MD5(pw, salt, pw)  Don't leave anything around in vm they could use. TODO: the above comment seems to be wrong. final is used later. Then something really weird...  Now make the output string 
	 * and now, just to make sure things don't run too fast
	 * On a 60 Mhz Pentium this takes 34 msec, so you would
	 * need 30 seconds to build a 1000 entry dictionary...
	  12 bytes max (sl is up to 8 bytes)  Add 5*4+2 = 22 bytes of hash, + NUL byte.  Don't leave anything around in vm they could use. 