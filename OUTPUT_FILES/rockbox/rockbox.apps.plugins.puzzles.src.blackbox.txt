
 * blackbox.c: implementation of 'Black Box'.
  Terminology, for ease of reading various macros scattered about the place.
 *
 * The 'arena' is the inner area where the balls are placed. This is
 *   indexed from (0,0) to (w-1,h-1) but its offset in the grid is (1,1).
 *
 * The 'range' (firing range) is the bit around the edge where
 *   the lasers are fired from. This is indexed from 0 --> (2*(w+h) - 1),
 *   starting at the top left ((1,0) on the grid) and moving clockwise.
 *
 * The 'grid' is just the big array containing arena and range;
 *   locations (0,0), (0,w+1), (h+1,w+1) and (h+1,0) are unused.
  structure copy  Allow 'a-b' for a range, otherwise assume a single number.  next one is just for ease of coding stuff into 'char'
     * types, and could be worked around if required. 
 * We store: width | height | ball1x | ball1y | [ ball2x | ball2y | [...] ]
 * all stored as unsigned chars; validate_params has already
 * checked this won't overflow an 8-bit char.
 * Then we obfuscate it.
  the bitmap is 2+(nballs*2) long; the hex version is double that.  check general grid size  check each ball will fit on that grid  needs to be disjoint from both sets  (w+2)x(h+2), to allow for laser firing range  one per laser  user has finished placing his own balls.  number of next laser to be fired.  specify numbers because they must match array indexes.  up  right  down  left  top row; from (1,0) to (w,0)  RHS; from (w+1, 1) to (w+1, h)  bottom row; from (1, h+1) to (w, h+1); counts backwards  LHS; from (0, 1) to (0, h); counts backwards  in arena  outside grid  one of 4 corners  top line  RHS  Bottom [and counts backwards]  LHS [and counts backwards ]  0 = never, 1 = always, 2 = if anim. 
     * The error counter needs preserving across a serialisation.
     
     * If we've encountered a `justwrong' state as a result of
     * actually making a move, increment the ui error counter.
      Given a position and a direction, check whether we can see a ball in front
 * of us, or to our front-left or front-right.  if we're off the grid (into the firing range) there's never a ball.  deal with strange initial reflection rules (that stop
     * you turning down the laser range)  I've just chosen to prioritise instant-hit over instant-reflection;
     * I can't find anywhere that gives me a definite algorithm for this.  hit  reflection  move us onto the grid.  paranoia. This obviously should never happen  we're facing a ball; send back a reflection.  hit  ball to our left; rotate clockwise and look again.  ball to our right; rotate anti-clockwise and look again.  ... otherwise, we have no balls ahead of us so just move one step.  Checks that the guessed balls in the state match up with the real balls
 * for all possible lasers (i.e. not just the ones that the player might
 * have already guessed). This is required because any layout with >4 balls
 * might have multiple valid solutions. Returns non-zero for a 'correct'
 * (i.e. consistent) layout. 
	 * First, check that each laser the player has already
	 * fired is consistent with the layout. If not, show them
	 * one error they've made and reveal no further
	 * information.
	 *
	 * Failing that, check to see whether the player would have
	 * been able to fire any laser which distinguished the real
	 * solution from their guess. If so, show them one such
	 * laser and reveal no further information.
	  clear out BALL_CORRECT on guess, make BALL_GUESS BALL_CORRECT. 
	     * At least one of the player's existing lasers
	     * contradicts their ball placement. Pick a random one,
	     * highlight it, and return.
	     *
	     * A temporary random state is created from the current
	     * grid, so that repeating the same marking will give
	     * the same answer instead of a different one.
	     
	     * At least one of the player's unfired lasers would
	     * demonstrate their ball placement to be wrong. Pick a
	     * random one, highlight it, and return.
	     *
	     * A temporary random state is created from the current
	     * grid, so that repeating the same marking will give
	     * the same answer instead of a different one.
	      duplicate the state (to solution)  clear out the lasers of solution  duplicate solution to guess.  clear out BALL_CORRECT on guess, make BALL_GUESS BALL_CORRECT.  for each laser (on both game_states), fire it if it hasn't been fired.
     * If one has been fired (or received a hit) and another hasn't, we know
     * the ball layouts didn't match and can short-circuit return.  check each game_state's laser against the other; if any differ, return 0  If the original state didn't have this shot fired,
             * and it would be wrong between the guess and the solution,
             * add it.  add a new shot, incrementing state's laser count.  fix up original state so the 'correct' balls end up matching the guesses,
     * as we've just proved that they were equivalent.  fill in nright and nwrong.  w and h to make macros work...  as the game_state grid  disallow moving cursor to corners.  Fix up 'button' for the below logic.  and use gx  and use gy  ----------------------------------------------------------------------
 * Drawing routines.
  Border is ts/2, to make things easier.
     * Thus we have (width) + 2 (firing range*2) + 1 (border*2) tiles
     * across, and similarly height + 2 + 1 tiles down.  Guessed balls are always black; if they're incorrect they'll
             * have a red cross added later.
             * Missing balls are red.  guesses are black/black, all else background.  Incorrect guess; draw a red cross over the ball.  clockwise around the outline starting at pt behind (1,1).  phew...  draw the arena  draw the lasers  draw the 'finish' button 
         * We return nonzero whenever the solution has been revealed,
         * even (on spoiler grounds) if it wasn't guessed correctly.
          game_request_keys  wants_statusbar  flags  vim: set shiftwidth=4 tabstop=8: 
 * blackbox.c: implementation of 'Black Box'.
  Terminology, for ease of reading various macros scattered about the place.
 *
 * The 'arena' is the inner area where the balls are placed. This is
 *   indexed from (0,0) to (w-1,h-1) but its offset in the grid is (1,1).
 *
 * The 'range' (firing range) is the bit around the edge where
 *   the lasers are fired from. This is indexed from 0 --> (2*(w+h) - 1),
 *   starting at the top left ((1,0) on the grid) and moving clockwise.
 *
 * The 'grid' is just the big array containing arena and range;
 *   locations (0,0), (0,w+1), (h+1,w+1) and (h+1,0) are unused.
  structure copy  Allow 'a-b' for a range, otherwise assume a single number.  next one is just for ease of coding stuff into 'char'
     * types, and could be worked around if required. 
 * We store: width | height | ball1x | ball1y | [ ball2x | ball2y | [...] ]
 * all stored as unsigned chars; validate_params has already
 * checked this won't overflow an 8-bit char.
 * Then we obfuscate it.
  the bitmap is 2+(nballs*2) long; the hex version is double that.  check general grid size  check each ball will fit on that grid  needs to be disjoint from both sets  (w+2)x(h+2), to allow for laser firing range  one per laser  user has finished placing his own balls.  number of next laser to be fired.  specify numbers because they must match array indexes.  up  right  down  left  top row; from (1,0) to (w,0)  RHS; from (w+1, 1) to (w+1, h)  bottom row; from (1, h+1) to (w, h+1); counts backwards  LHS; from (0, 1) to (0, h); counts backwards  in arena  outside grid  one of 4 corners  top line  RHS  Bottom [and counts backwards]  LHS [and counts backwards ]  0 = never, 1 = always, 2 = if anim. 
     * The error counter needs preserving across a serialisation.
     
     * If we've encountered a `justwrong' state as a result of
     * actually making a move, increment the ui error counter.
      Given a position and a direction, check whether we can see a ball in front
 * of us, or to our front-left or front-right.  if we're off the grid (into the firing range) there's never a ball.  deal with strange initial reflection rules (that stop
     * you turning down the laser range)  I've just chosen to prioritise instant-hit over instant-reflection;
     * I can't find anywhere that gives me a definite algorithm for this.  hit  reflection  move us onto the grid.  paranoia. This obviously should never happen  we're facing a ball; send back a reflection.  hit  ball to our left; rotate clockwise and look again.  ball to our right; rotate anti-clockwise and look again.  ... otherwise, we have no balls ahead of us so just move one step.  Checks that the guessed balls in the state match up with the real balls
 * for all possible lasers (i.e. not just the ones that the player might
 * have already guessed). This is required because any layout with >4 balls
 * might have multiple valid solutions. Returns non-zero for a 'correct'
 * (i.e. consistent) layout. 
	 * First, check that each laser the player has already
	 * fired is consistent with the layout. If not, show them
	 * one error they've made and reveal no further
	 * information.
	 *
	 * Failing that, check to see whether the player would have
	 * been able to fire any laser which distinguished the real
	 * solution from their guess. If so, show them one such
	 * laser and reveal no further information.
	  clear out BALL_CORRECT on guess, make BALL_GUESS BALL_CORRECT. 
	     * At least one of the player's existing lasers
	     * contradicts their ball placement. Pick a random one,
	     * highlight it, and return.
	     *
	     * A temporary random state is created from the current
	     * grid, so that repeating the same marking will give
	     * the same answer instead of a different one.
	     
	     * At least one of the player's unfired lasers would
	     * demonstrate their ball placement to be wrong. Pick a
	     * random one, highlight it, and return.
	     *
	     * A temporary random state is created from the current
	     * grid, so that repeating the same marking will give
	     * the same answer instead of a different one.
	      duplicate the state (to solution)  clear out the lasers of solution  duplicate solution to guess.  clear out BALL_CORRECT on guess, make BALL_GUESS BALL_CORRECT.  for each laser (on both game_states), fire it if it hasn't been fired.
     * If one has been fired (or received a hit) and another hasn't, we know
     * the ball layouts didn't match and can short-circuit return.  check each game_state's laser against the other; if any differ, return 0  If the original state didn't have this shot fired,
             * and it would be wrong between the guess and the solution,
             * add it.  add a new shot, incrementing state's laser count.  fix up original state so the 'correct' balls end up matching the guesses,
     * as we've just proved that they were equivalent.  fill in nright and nwrong.  w and h to make macros work...  as the game_state grid  disallow moving cursor to corners.  Fix up 'button' for the below logic.  and use gx  and use gy  ----------------------------------------------------------------------
 * Drawing routines.
  Border is ts/2, to make things easier.
     * Thus we have (width) + 2 (firing range*2) + 1 (border*2) tiles
     * across, and similarly height + 2 + 1 tiles down.  Guessed balls are always black; if they're incorrect they'll
             * have a red cross added later.
             * Missing balls are red.  guesses are black/black, all else background.  Incorrect guess; draw a red cross over the ball.  clockwise around the outline starting at pt behind (1,1).  phew...  draw the arena  draw the lasers  draw the 'finish' button 
         * We return nonzero whenever the solution has been revealed,
         * even (on spoiler grounds) if it wasn't guessed correctly.
          game_request_keys  wants_statusbar  flags  vim: set shiftwidth=4 tabstop=8: 
 * blackbox.c: implementation of 'Black Box'.
  Terminology, for ease of reading various macros scattered about the place.
 *
 * The 'arena' is the inner area where the balls are placed. This is
 *   indexed from (0,0) to (w-1,h-1) but its offset in the grid is (1,1).
 *
 * The 'range' (firing range) is the bit around the edge where
 *   the lasers are fired from. This is indexed from 0 --> (2*(w+h) - 1),
 *   starting at the top left ((1,0) on the grid) and moving clockwise.
 *
 * The 'grid' is just the big array containing arena and range;
 *   locations (0,0), (0,w+1), (h+1,w+1) and (h+1,0) are unused.
  structure copy  Allow 'a-b' for a range, otherwise assume a single number.  next one is just for ease of coding stuff into 'char'
     * types, and could be worked around if required. 
 * We store: width | height | ball1x | ball1y | [ ball2x | ball2y | [...] ]
 * all stored as unsigned chars; validate_params has already
 * checked this won't overflow an 8-bit char.
 * Then we obfuscate it.
  the bitmap is 2+(nballs*2) long; the hex version is double that.  check general grid size  check each ball will fit on that grid  needs to be disjoint from both sets  (w+2)x(h+2), to allow for laser firing range  one per laser  user has finished placing his own balls.  number of next laser to be fired.  specify numbers because they must match array indexes.  up  right  down  left  top row; from (1,0) to (w,0)  RHS; from (w+1, 1) to (w+1, h)  bottom row; from (1, h+1) to (w, h+1); counts backwards  LHS; from (0, 1) to (0, h); counts backwards  in arena  outside grid  one of 4 corners  top line  RHS  Bottom [and counts backwards]  LHS [and counts backwards ]  0 = never, 1 = always, 2 = if anim. 
     * The error counter needs preserving across a serialisation.
     
     * If we've encountered a `justwrong' state as a result of
     * actually making a move, increment the ui error counter.
      Given a position and a direction, check whether we can see a ball in front
 * of us, or to our front-left or front-right.  if we're off the grid (into the firing range) there's never a ball.  deal with strange initial reflection rules (that stop
     * you turning down the laser range)  I've just chosen to prioritise instant-hit over instant-reflection;
     * I can't find anywhere that gives me a definite algorithm for this.  hit  reflection  move us onto the grid.  paranoia. This obviously should never happen  we're facing a ball; send back a reflection.  hit  ball to our left; rotate clockwise and look again.  ball to our right; rotate anti-clockwise and look again.  ... otherwise, we have no balls ahead of us so just move one step.  Checks that the guessed balls in the state match up with the real balls
 * for all possible lasers (i.e. not just the ones that the player might
 * have already guessed). This is required because any layout with >4 balls
 * might have multiple valid solutions. Returns non-zero for a 'correct'
 * (i.e. consistent) layout. 
	 * First, check that each laser the player has already
	 * fired is consistent with the layout. If not, show them
	 * one error they've made and reveal no further
	 * information.
	 *
	 * Failing that, check to see whether the player would have
	 * been able to fire any laser which distinguished the real
	 * solution from their guess. If so, show them one such
	 * laser and reveal no further information.
	  clear out BALL_CORRECT on guess, make BALL_GUESS BALL_CORRECT. 
	     * At least one of the player's existing lasers
	     * contradicts their ball placement. Pick a random one,
	     * highlight it, and return.
	     *
	     * A temporary random state is created from the current
	     * grid, so that repeating the same marking will give
	     * the same answer instead of a different one.
	     
	     * At least one of the player's unfired lasers would
	     * demonstrate their ball placement to be wrong. Pick a
	     * random one, highlight it, and return.
	     *
	     * A temporary random state is created from the current
	     * grid, so that repeating the same marking will give
	     * the same answer instead of a different one.
	      duplicate the state (to solution)  clear out the lasers of solution  duplicate solution to guess.  clear out BALL_CORRECT on guess, make BALL_GUESS BALL_CORRECT.  for each laser (on both game_states), fire it if it hasn't been fired.
     * If one has been fired (or received a hit) and another hasn't, we know
     * the ball layouts didn't match and can short-circuit return.  check each game_state's laser against the other; if any differ, return 0  If the original state didn't have this shot fired,
             * and it would be wrong between the guess and the solution,
             * add it.  add a new shot, incrementing state's laser count.  fix up original state so the 'correct' balls end up matching the guesses,
     * as we've just proved that they were equivalent.  fill in nright and nwrong.  w and h to make macros work...  as the game_state grid  disallow moving cursor to corners.  Fix up 'button' for the below logic.  and use gx  and use gy  ----------------------------------------------------------------------
 * Drawing routines.
  Border is ts/2, to make things easier.
     * Thus we have (width) + 2 (firing range*2) + 1 (border*2) tiles
     * across, and similarly height + 2 + 1 tiles down.  Guessed balls are always black; if they're incorrect they'll
             * have a red cross added later.
             * Missing balls are red.  guesses are black/black, all else background.  Incorrect guess; draw a red cross over the ball.  clockwise around the outline starting at pt behind (1,1).  phew...  draw the arena  draw the lasers  draw the 'finish' button 
         * We return nonzero whenever the solution has been revealed,
         * even (on spoiler grounds) if it wasn't guessed correctly.
          game_request_keys  wants_statusbar  flags  vim: set shiftwidth=4 tabstop=8: 