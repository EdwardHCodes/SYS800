**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2009 by Tomer Shalev
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define LOGF_ENABLE Documents avaiable here: http://www.usb.org/developers/devclass_docs/  1.1  Subclass Codes (HID1_11.pdf, page 18)  Protocol Codes (HID1_11.pdf, page 19)  HID main items (HID1_11.pdf, page 38)  Parts (HID1_11.pdf, page 40)  0x01  0x02  0x04  0x08  0x10  0x20  0x40  0x80  0x0100  HID global items (HID1_11.pdf, page 45)  HID local items (HID1_11.pdf, page 50)  Types of class descriptors (HID1_11.pdf, page 59)  HID-only class specific requests (HID1_11.pdf, page 61)  Get_Report and Set_Report Report Type field (HID1_11.pdf, page 61)  hid interface  Write the id into the buffer in the appropriate location, and returns the
     * buffer length  # of bytes  Prefix must be of len BUF_DUMP_PREFIX_SIZE  Each key is a word in id (up to 4 keys supported)  Each modifier key is a bit in the first byte  Any other key should be set in a separate byte #define MOUSE_BUTTON_MIDDLE  0x4 Set proper button  Keep buf empty, to mark mouse button release  Handle mouse accelarated movement  TODO: Find a better mouse accellaration algorithm  Move/scroll mouse  HAVE_USB_HID_MOUSE  Keyboard control  Consumer usage controls - play/pause, stop, etc.  Mouse control  HAVE_USB_HID_MOUSE  Interface descriptor  HID descriptor  Endpoint descriptor  called by usb_core_init()  called by usb_core_transfer_complete()  The DAP is registered as a keyboard with several LEDs, therefore the OS sends
 * LED report to notify the DAP whether Num Lock / Caps Lock etc. are enabled.
 * In order to allow sending info to the DAP, the Set Report mechanism can be
 * used by defining vendor specific output reports and send them from the host
 * to the DAP using the host's custom driver  Defining other LEDs and setting them from the USB host (OS) can be used
     * to send messages to the DAP  called by usb_core_control_request()  ack  ack  Buffer overflow - item still in use  Prepare buffer for sending  Key pressed  Key released **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2009 by Tomer Shalev
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define LOGF_ENABLE Documents avaiable here: http://www.usb.org/developers/devclass_docs/  1.1  Subclass Codes (HID1_11.pdf, page 18)  Protocol Codes (HID1_11.pdf, page 19)  HID main items (HID1_11.pdf, page 38)  Parts (HID1_11.pdf, page 40)  0x01  0x02  0x04  0x08  0x10  0x20  0x40  0x80  0x0100  HID global items (HID1_11.pdf, page 45)  HID local items (HID1_11.pdf, page 50)  Types of class descriptors (HID1_11.pdf, page 59)  HID-only class specific requests (HID1_11.pdf, page 61)  Get_Report and Set_Report Report Type field (HID1_11.pdf, page 61)  hid interface  Write the id into the buffer in the appropriate location, and returns the
     * buffer length  # of bytes  Prefix must be of len BUF_DUMP_PREFIX_SIZE  Each key is a word in id (up to 4 keys supported)  Each modifier key is a bit in the first byte  Any other key should be set in a separate byte #define MOUSE_BUTTON_MIDDLE  0x4 Set proper button  Keep buf empty, to mark mouse button release  Handle mouse accelarated movement  TODO: Find a better mouse accellaration algorithm  Move/scroll mouse  HAVE_USB_HID_MOUSE  Keyboard control  Consumer usage controls - play/pause, stop, etc.  Mouse control  HAVE_USB_HID_MOUSE  Interface descriptor  HID descriptor  Endpoint descriptor  called by usb_core_init()  called by usb_core_transfer_complete()  The DAP is registered as a keyboard with several LEDs, therefore the OS sends
 * LED report to notify the DAP whether Num Lock / Caps Lock etc. are enabled.
 * In order to allow sending info to the DAP, the Set Report mechanism can be
 * used by defining vendor specific output reports and send them from the host
 * to the DAP using the host's custom driver  Defining other LEDs and setting them from the USB host (OS) can be used
     * to send messages to the DAP  called by usb_core_control_request()  ack  ack  Buffer overflow - item still in use  Prepare buffer for sending  Key pressed  Key released **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2009 by Tomer Shalev
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define LOGF_ENABLE Documents avaiable here: http://www.usb.org/developers/devclass_docs/  1.1  Subclass Codes (HID1_11.pdf, page 18)  Protocol Codes (HID1_11.pdf, page 19)  HID main items (HID1_11.pdf, page 38)  Parts (HID1_11.pdf, page 40)  0x01  0x02  0x04  0x08  0x10  0x20  0x40  0x80  0x0100  HID global items (HID1_11.pdf, page 45)  HID local items (HID1_11.pdf, page 50)  Types of class descriptors (HID1_11.pdf, page 59)  HID-only class specific requests (HID1_11.pdf, page 61)  Get_Report and Set_Report Report Type field (HID1_11.pdf, page 61)  hid interface  Write the id into the buffer in the appropriate location, and returns the
     * buffer length  # of bytes  Prefix must be of len BUF_DUMP_PREFIX_SIZE  Each key is a word in id (up to 4 keys supported)  Each modifier key is a bit in the first byte  Any other key should be set in a separate byte #define MOUSE_BUTTON_MIDDLE  0x4 Set proper button  Keep buf empty, to mark mouse button release  Handle mouse accelarated movement  TODO: Find a better mouse accellaration algorithm  Move/scroll mouse  HAVE_USB_HID_MOUSE  Keyboard control  Consumer usage controls - play/pause, stop, etc.  Mouse control  HAVE_USB_HID_MOUSE  Interface descriptor  HID descriptor  Endpoint descriptor  called by usb_core_init()  called by usb_core_transfer_complete()  The DAP is registered as a keyboard with several LEDs, therefore the OS sends
 * LED report to notify the DAP whether Num Lock / Caps Lock etc. are enabled.
 * In order to allow sending info to the DAP, the Set Report mechanism can be
 * used by defining vendor specific output reports and send them from the host
 * to the DAP using the host's custom driver  Defining other LEDs and setting them from the USB host (OS) can be used
     * to send messages to the DAP  called by usb_core_control_request()  ack  ack  Buffer overflow - item still in use  Prepare buffer for sending  Key pressed  Key released 