**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 by Thomas Martitz
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** TIMER units  how long a tick lasts  how long a ms lasts  300ms   20ms   60ms  phsyical clicks per rotation * wheel value changes per phys click 
 * based on button-e200.c, adjusted to the AMS timers and fuzev2's
 * scrollwheel and cleaned up a little
  wheel values and times from the previous irq  We only post every 4th action, as this matches better with the physical
     * clicks of the wheel  number of items to skip in lists, 1 in slow mode  accumulated wheel rotations per second  fast or slow mode?  Read wheel
     * Bits 6 and 7 of GPIOA change as follows (Gray Code):
     * Clockwise rotation   00 -> 01 -> 11 -> 10 -> 00
     * Counter-clockwise    00 -> 10 -> 11 -> 01 -> 00
     *
     * For easy look-up, actual wheel values act as indicies also,
     * which is why the table seems to be not ordered correctly
      Clockwise rotation  Counter-clockwise   assume repeat  to timer unit  interpolate velocity in timer_freq/timer_unit == 1/s  accumulate velocities over time with each v  direction reversals nullify all fast mode states  fast OFF happens immediately when velocity drops below
           threshold  moving out of fast mode  reset velocity  wheel_delta is always 1 in slow mode  fast ON gets filtered to avoid inadvertent jumps to fast mode  moving into fast mode  skip some wheel changes, so that 1 post represents
             * 1 item in lists  wheel_delta is always 1 in slow mode  generate repeats if quick enough  message posted - reset delta and poke backlight on skipped post - increment delta  activate the wheel  setup scrollwheel isr  clear previous irq if any  enable edge detecting  detect both raising and falling edges  lastly, enable the interrupt  scroll wheel handling  ack interrupt 
 * Get button pressed from hardware
  if we don't wait for the fifo to empty, we'll see screen corruption
     * (the higher the CPU frequency the higher the corruption)  B1 is shared with FM i2c note that lower delays (4, 2 us) work without frequency scaling power/hold is on the same pin. we know it's hold if the bit isn't
         * set now anymore  light handling  BOOTLOADER  read power, but not if hold button was just released, since
     * you basically always hit power due to the slider mechanism after releasing
     * (fuze only)
      HAS_BUTTON_HOLD **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 by Thomas Martitz
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** TIMER units  how long a tick lasts  how long a ms lasts  300ms   20ms   60ms  phsyical clicks per rotation * wheel value changes per phys click 
 * based on button-e200.c, adjusted to the AMS timers and fuzev2's
 * scrollwheel and cleaned up a little
  wheel values and times from the previous irq  We only post every 4th action, as this matches better with the physical
     * clicks of the wheel  number of items to skip in lists, 1 in slow mode  accumulated wheel rotations per second  fast or slow mode?  Read wheel
     * Bits 6 and 7 of GPIOA change as follows (Gray Code):
     * Clockwise rotation   00 -> 01 -> 11 -> 10 -> 00
     * Counter-clockwise    00 -> 10 -> 11 -> 01 -> 00
     *
     * For easy look-up, actual wheel values act as indicies also,
     * which is why the table seems to be not ordered correctly
      Clockwise rotation  Counter-clockwise   assume repeat  to timer unit  interpolate velocity in timer_freq/timer_unit == 1/s  accumulate velocities over time with each v  direction reversals nullify all fast mode states  fast OFF happens immediately when velocity drops below
           threshold  moving out of fast mode  reset velocity  wheel_delta is always 1 in slow mode  fast ON gets filtered to avoid inadvertent jumps to fast mode  moving into fast mode  skip some wheel changes, so that 1 post represents
             * 1 item in lists  wheel_delta is always 1 in slow mode  generate repeats if quick enough  message posted - reset delta and poke backlight on skipped post - increment delta  activate the wheel  setup scrollwheel isr  clear previous irq if any  enable edge detecting  detect both raising and falling edges  lastly, enable the interrupt  scroll wheel handling  ack interrupt 
 * Get button pressed from hardware
  if we don't wait for the fifo to empty, we'll see screen corruption
     * (the higher the CPU frequency the higher the corruption)  B1 is shared with FM i2c note that lower delays (4, 2 us) work without frequency scaling power/hold is on the same pin. we know it's hold if the bit isn't
         * set now anymore  light handling  BOOTLOADER  read power, but not if hold button was just released, since
     * you basically always hit power due to the slider mechanism after releasing
     * (fuze only)
      HAS_BUTTON_HOLD **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2010 by Thomas Martitz
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** TIMER units  how long a tick lasts  how long a ms lasts  300ms   20ms   60ms  phsyical clicks per rotation * wheel value changes per phys click 
 * based on button-e200.c, adjusted to the AMS timers and fuzev2's
 * scrollwheel and cleaned up a little
  wheel values and times from the previous irq  We only post every 4th action, as this matches better with the physical
     * clicks of the wheel  number of items to skip in lists, 1 in slow mode  accumulated wheel rotations per second  fast or slow mode?  Read wheel
     * Bits 6 and 7 of GPIOA change as follows (Gray Code):
     * Clockwise rotation   00 -> 01 -> 11 -> 10 -> 00
     * Counter-clockwise    00 -> 10 -> 11 -> 01 -> 00
     *
     * For easy look-up, actual wheel values act as indicies also,
     * which is why the table seems to be not ordered correctly
      Clockwise rotation  Counter-clockwise   assume repeat  to timer unit  interpolate velocity in timer_freq/timer_unit == 1/s  accumulate velocities over time with each v  direction reversals nullify all fast mode states  fast OFF happens immediately when velocity drops below
           threshold  moving out of fast mode  reset velocity  wheel_delta is always 1 in slow mode  fast ON gets filtered to avoid inadvertent jumps to fast mode  moving into fast mode  skip some wheel changes, so that 1 post represents
             * 1 item in lists  wheel_delta is always 1 in slow mode  generate repeats if quick enough  message posted - reset delta and poke backlight on skipped post - increment delta  activate the wheel  setup scrollwheel isr  clear previous irq if any  enable edge detecting  detect both raising and falling edges  lastly, enable the interrupt  scroll wheel handling  ack interrupt 
 * Get button pressed from hardware
  if we don't wait for the fifo to empty, we'll see screen corruption
     * (the higher the CPU frequency the higher the corruption)  B1 is shared with FM i2c note that lower delays (4, 2 us) work without frequency scaling power/hold is on the same pin. we know it's hold if the bit isn't
         * set now anymore  light handling  BOOTLOADER  read power, but not if hold button was just released, since
     * you basically always hit power due to the slider mechanism after releasing
     * (fuze only)
      HAS_BUTTON_HOLD 