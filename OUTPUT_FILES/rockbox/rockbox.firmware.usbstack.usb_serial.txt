**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Christian Gmeiner
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define LOGF_ENABLE serial interface  send_buffer: local ring buffer.
 * transit_buffer: used to store aligned data that will be sent by the USB
 * driver. PP502x needs boost for high speed USB, but still works up to
 * around 100 bytes without boost, we play safe and limit packet size to 32
 * bytes, it doesn't hurt because data can be sent over several transfers.
  The number of bytes to transfer that haven't been given to the USB stack yet  The number of bytes to transfer that have been given to the USB stack  called by usb_core_control_request()  prime rx endpoint  we come here too after a bus reset, so reset some data  called by usb_code_init()  current buffer wraps, so new data can't wrap  current buffer doesn't wrap, so new data might  wrap  else do nothing. The transfer completion handler will pick it up  called by usb_core_transfer_complete()  Data received. TODO : Do something with it ?  Get the next bit  Data sent out. Update circular buffer  TODO: Handle (length != buffer_transitlength) **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Christian Gmeiner
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define LOGF_ENABLE serial interface  send_buffer: local ring buffer.
 * transit_buffer: used to store aligned data that will be sent by the USB
 * driver. PP502x needs boost for high speed USB, but still works up to
 * around 100 bytes without boost, we play safe and limit packet size to 32
 * bytes, it doesn't hurt because data can be sent over several transfers.
  The number of bytes to transfer that haven't been given to the USB stack yet  The number of bytes to transfer that have been given to the USB stack  called by usb_core_control_request()  prime rx endpoint  we come here too after a bus reset, so reset some data  called by usb_code_init()  current buffer wraps, so new data can't wrap  current buffer doesn't wrap, so new data might  wrap  else do nothing. The transfer completion handler will pick it up  called by usb_core_transfer_complete()  Data received. TODO : Do something with it ?  Get the next bit  Data sent out. Update circular buffer  TODO: Handle (length != buffer_transitlength) **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Christian Gmeiner
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define LOGF_ENABLE serial interface  send_buffer: local ring buffer.
 * transit_buffer: used to store aligned data that will be sent by the USB
 * driver. PP502x needs boost for high speed USB, but still works up to
 * around 100 bytes without boost, we play safe and limit packet size to 32
 * bytes, it doesn't hurt because data can be sent over several transfers.
  The number of bytes to transfer that haven't been given to the USB stack yet  The number of bytes to transfer that have been given to the USB stack  called by usb_core_control_request()  prime rx endpoint  we come here too after a bus reset, so reset some data  called by usb_code_init()  current buffer wraps, so new data can't wrap  current buffer doesn't wrap, so new data might  wrap  else do nothing. The transfer completion handler will pick it up  called by usb_core_transfer_complete()  Data received. TODO : Do something with it ?  Get the next bit  Data sent out. Update circular buffer  TODO: Handle (length != buffer_transitlength) 