 SPDX-License-Identifier: GPL-2.0-only
 * linux/drivers/net/ethernet/rtl838x_eth.c
 * Copyright (C) 2020 B. Koblitz
 
 * Maximum number of RX rings is 8, assigned by switch based on
 * packet/port priortity (not implemented)
 * Maximum number of TX rings is 2 (only ring 0 used)
 * RX ringlength needs to be at least 200, otherwise CPU and Switch
 * may gridlock.
  buffer size  pkt len 
 * Discard the RX ring-buffers, called as part of the net-ISR
 * when the buffer runs over
 * Caller needs to hold priv->lock
  make sure the header is visible to the ASIC   Ignore TX interrupt  Clear ISR  RX interrupt  Disable RX interrupt  RX buffer overrun  Stop TX/RX  Reset NIC  Restore notification settings: on RTL838x these bits are null  Restart TX/RX to CPU port  Set Speed, duplex, flow control
		 * FORCE_EN | LINK_EN | NWAY_EN | DUP_SEL
		 * | SPD_SEL = 0b10 | FORCE_FC_EN | PHY_MASTER_SLV_MANUAL_EN
		 * | MEDIA_SEL
		  allow CRC errors on CPU-port  Force CPU port link up  Disable and clear interrupts  Disable Head of Line features for all RX rings  Truncate RX buffer to 0x640 (1600) bytes, pad TX  Enable RX done, RX overflow and TX done interrupts  Enable traffic, engine expects empty FCS field  Make sure to flood all traffic to CPU_PORT  CPU port joins Lookup Miss Flooding Portmask  Table access: CMD: read, table = 2  Sets MC_PMSK table port bit for port 52 to 1  All rings owned by switch, last one wraps  Last header is wrapping around  Block all ports  Flush L2 address cache  CPU-Port: Link down BUG: Works only for RTL838x  Disable traffic  Disable all TX/RX interrupts  Check for DSA tagging at the end of the buffer  Reuse tag space for CRC  ASIC expects that packet includes CRC, so we extend by 4 bytes  We can send this packet if CPU owns the descriptor  Set descriptor for tx  Create cpu_tag  Copy packet data to tx buffer  Make sure packet data is visible to ASIC  Hand over to switch  BUG: before tx fetch, need to make sure right data is accessed  Tell switch to send data  strip the CRC  Add 4 bytes for cpu_tag  BUG: Prevent ASIC bug  Update each ring cnt  Make sure data is visible  Overwrite CRC with cpu_tag  Enable RX interrupt  Allow all the expected bits  With the exclusion of MII and Reverse MII, we support Gigabit,
	 * including Half duplex
	  This is only being called for the master device,
	 * i.e. the CPU-Port
	  Restart by disabling and re-enabling link  Stop TX/RX to port  Restart TX/RX to port  2 more registers, ALE/MAC block  from mac_config_init Unlimited egress rate  fix timer for EEE  Init VLAN  Disable MAC polling the PHY so that we can start configuration  Enable PHY control via SoC  Disable MAC polling the PHY so that we can start configuration  Disable PHY polling via SoC  obtain buffer memory space  Allocate buffer memory  obtain device IRQ number  try to get mac address in the following order:
	 * 1) from device tree data
	 * 2) from internal registers set by bootloader
	  if the address is invalid, use a random value  sentinel  SPDX-License-Identifier: GPL-2.0-only
 * linux/drivers/net/ethernet/rtl838x_eth.c
 * Copyright (C) 2020 B. Koblitz
 
 * Maximum number of RX rings is 8, assigned by switch based on
 * packet/port priortity (not implemented)
 * Maximum number of TX rings is 2 (only ring 0 used)
 * RX ringlength needs to be at least 200, otherwise CPU and Switch
 * may gridlock.
  buffer size  pkt len 
 * Discard the RX ring-buffers, called as part of the net-ISR
 * when the buffer runs over
 * Caller needs to hold priv->lock
  make sure the header is visible to the ASIC   Ignore TX interrupt  Clear ISR  RX interrupt  Disable RX interrupt  RX buffer overrun  Stop TX/RX  Reset NIC  Restore notification settings: on RTL838x these bits are null  Restart TX/RX to CPU port  Set Speed, duplex, flow control
		 * FORCE_EN | LINK_EN | NWAY_EN | DUP_SEL
		 * | SPD_SEL = 0b10 | FORCE_FC_EN | PHY_MASTER_SLV_MANUAL_EN
		 * | MEDIA_SEL
		  allow CRC errors on CPU-port  Force CPU port link up  Disable and clear interrupts  Disable Head of Line features for all RX rings  Truncate RX buffer to 0x640 (1600) bytes, pad TX  Enable RX done, RX overflow and TX done interrupts  Enable traffic, engine expects empty FCS field  Make sure to flood all traffic to CPU_PORT  CPU port joins Lookup Miss Flooding Portmask  Table access: CMD: read, table = 2  Sets MC_PMSK table port bit for port 52 to 1  All rings owned by switch, last one wraps  Last header is wrapping around  Block all ports  Flush L2 address cache  CPU-Port: Link down BUG: Works only for RTL838x  Disable traffic  Disable all TX/RX interrupts  Check for DSA tagging at the end of the buffer  Reuse tag space for CRC  ASIC expects that packet includes CRC, so we extend by 4 bytes  We can send this packet if CPU owns the descriptor  Set descriptor for tx  Create cpu_tag  Copy packet data to tx buffer  Make sure packet data is visible to ASIC  Hand over to switch  BUG: before tx fetch, need to make sure right data is accessed  Tell switch to send data  strip the CRC  Add 4 bytes for cpu_tag  BUG: Prevent ASIC bug  Update each ring cnt  Make sure data is visible  Overwrite CRC with cpu_tag  Enable RX interrupt  Allow all the expected bits  With the exclusion of MII and Reverse MII, we support Gigabit,
	 * including Half duplex
	  This is only being called for the master device,
	 * i.e. the CPU-Port
	  Restart by disabling and re-enabling link  Stop TX/RX to port  Restart TX/RX to port  2 more registers, ALE/MAC block  from mac_config_init Unlimited egress rate  fix timer for EEE  Init VLAN  Disable MAC polling the PHY so that we can start configuration  Enable PHY control via SoC  Disable MAC polling the PHY so that we can start configuration  Disable PHY polling via SoC  obtain buffer memory space  Allocate buffer memory  obtain device IRQ number  try to get mac address in the following order:
	 * 1) from device tree data
	 * 2) from internal registers set by bootloader
	  if the address is invalid, use a random value  sentinel  SPDX-License-Identifier: GPL-2.0-only
 * linux/drivers/net/ethernet/rtl838x_eth.c
 * Copyright (C) 2020 B. Koblitz
 
 * Maximum number of RX rings is 8, assigned by switch based on
 * packet/port priortity (not implemented)
 * Maximum number of TX rings is 2 (only ring 0 used)
 * RX ringlength needs to be at least 200, otherwise CPU and Switch
 * may gridlock.
  buffer size  pkt len 
 * Discard the RX ring-buffers, called as part of the net-ISR
 * when the buffer runs over
 * Caller needs to hold priv->lock
  make sure the header is visible to the ASIC   Ignore TX interrupt  Clear ISR  RX interrupt  Disable RX interrupt  RX buffer overrun  Stop TX/RX  Reset NIC  Restore notification settings: on RTL838x these bits are null  Restart TX/RX to CPU port  Set Speed, duplex, flow control
		 * FORCE_EN | LINK_EN | NWAY_EN | DUP_SEL
		 * | SPD_SEL = 0b10 | FORCE_FC_EN | PHY_MASTER_SLV_MANUAL_EN
		 * | MEDIA_SEL
		  allow CRC errors on CPU-port  Force CPU port link up  Disable and clear interrupts  Disable Head of Line features for all RX rings  Truncate RX buffer to 0x640 (1600) bytes, pad TX  Enable RX done, RX overflow and TX done interrupts  Enable traffic, engine expects empty FCS field  Make sure to flood all traffic to CPU_PORT  CPU port joins Lookup Miss Flooding Portmask  Table access: CMD: read, table = 2  Sets MC_PMSK table port bit for port 52 to 1  All rings owned by switch, last one wraps  Last header is wrapping around  Block all ports  Flush L2 address cache  CPU-Port: Link down BUG: Works only for RTL838x  Disable traffic  Disable all TX/RX interrupts  Check for DSA tagging at the end of the buffer  Reuse tag space for CRC  ASIC expects that packet includes CRC, so we extend by 4 bytes  We can send this packet if CPU owns the descriptor  Set descriptor for tx  Create cpu_tag  Copy packet data to tx buffer  Make sure packet data is visible to ASIC  Hand over to switch  BUG: before tx fetch, need to make sure right data is accessed  Tell switch to send data  strip the CRC  Add 4 bytes for cpu_tag  BUG: Prevent ASIC bug  Update each ring cnt  Make sure data is visible  Overwrite CRC with cpu_tag  Enable RX interrupt  Allow all the expected bits  With the exclusion of MII and Reverse MII, we support Gigabit,
	 * including Half duplex
	  This is only being called for the master device,
	 * i.e. the CPU-Port
	  Restart by disabling and re-enabling link  Stop TX/RX to port  Restart TX/RX to port  2 more registers, ALE/MAC block  from mac_config_init Unlimited egress rate  fix timer for EEE  Init VLAN  Disable MAC polling the PHY so that we can start configuration  Enable PHY control via SoC  Disable MAC polling the PHY so that we can start configuration  Disable PHY polling via SoC  obtain buffer memory space  Allocate buffer memory  obtain device IRQ number  try to get mac address in the following order:
	 * 1) from device tree data
	 * 2) from internal registers set by bootloader
	  if the address is invalid, use a random value  sentinel 