**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 by Marcin Bukat
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** EP number  EP type  DIR_IN/DIR_OUT  RXSTAT/TXSTAT register  flag to mark EPs taken  tx/rx buffer address  size of the transfer (bytes)  number of bytes transfered/received   flag indicating that transfer is blocking  semaphore for blocking transfers  compute RXCON address from RXSTAT, and so on  compute TXCON address from TXSTAT, and so on  stub  BOUT1  BIN2  IIN3  BOUT4  BIN5  IIN6  BOUT7  BIN8  IIN9  BOUT10  BIN11  IIN12  BOUT13  BIN14  IIN15  copy setup data from packet  pass setup data to the upper layer  TXFULL flag  setup transfer size and DMA  local buffer address  Decrement by max packet size is intentional.
     * This way if we have final packet short one we will get negative len
     * after transfer, which in turn indicates we *don't* need to send
     * zero length packet. If the final packet is max sized packet we will
     * get zero len after transfer which indicates we need to send
     * zero length packet to signal host end of the transfer.
      clear NAK  setup DMA  local buffer address  clear NAK  check if clear feature was sent by host  check if a transfer has finished  finished ?  release semaphore for blocking transfer  more data to send  check if clear feature was sent by host  check if a transfer has finished  finished ?  min 10ms  This polls for DEV_EN bit set in DEV_INFO  register
     * as well as tracks current requested configuration
     * (DEV_INFO [11:8]). On state change it notifies usb stack
     * about it.
      SET ADDRESS request  SET CONFIGURATION request  return port speed FS=0, HS=1  Reserve endpoint  Find an available ep/dir pair  allocate endpoint and enable interrupt  Free endpoint  disable interrupt from this endpoint  Set the address (usually it's in a register).
 * There is a problem here: some controller want the address to be set between
 * control out and ack and some want to wait for the end of the transaction.
 * In the first case, you need to write some code special code when getting
 * setup packets and ignore this function (have a look at other drives)
  UDC seems to set this automaticaly  for send transfers, make sure the data is committed  wait for transfer to end  Setup a send transfer. (blocking)  Setup a send transfer. (non blocking)  Setup a receive transfer. (non blocking)  for recv, discard the cache lines related to the buffer  Kill all transfers. Usually you need to set a bit for each endpoint
 *  and flush fifos. You should also call the completion handler with 
 * error status for everything
  Set test mode, you can forget that for now, usually it's sufficient
 * to bit copy the argument into some register of the controller
  Check if endpoint is in stall state  Stall the endpoint. Usually set a flag in the controller  one time init (once per connection) - basicaly enable usb core  init semaphore of ep0  turn off usb core  disable USB interrupts in interrupt controller  we cannot disable UDC clock since this causes data abort
     * when reading DEV_INFO in order to check usb connect event
      UDC ISR function  read what caused UDC irq  usb reset  Enable Suspend Irq  Enable Resume Irq  Enable USB Reset Irq  Enable OUT Token receive Irq EP0  Enable IN Token transmit Irq EP0  Enable SETUP Packet Receive Irq  interrupt high active  enable EP0 irqs  Set as one to enable the EP0 tx irq  Set as one to response NAK handshake  Endpoint 0 Enable. When cleared the
                                    * endpoint does not respond to an SETUP
                                    * or OUT token  Set as one to response NAK handshake  This needs to be processed AFTER usb reset  setup interrupt  EP0 IN done  EP0 OUT done  usb reset  usb resume  TxClr  RxClr  usb suspend  usb connect  wait at least 10ms  other endpoints **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 by Marcin Bukat
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** EP number  EP type  DIR_IN/DIR_OUT  RXSTAT/TXSTAT register  flag to mark EPs taken  tx/rx buffer address  size of the transfer (bytes)  number of bytes transfered/received   flag indicating that transfer is blocking  semaphore for blocking transfers  compute RXCON address from RXSTAT, and so on  compute TXCON address from TXSTAT, and so on  stub  BOUT1  BIN2  IIN3  BOUT4  BIN5  IIN6  BOUT7  BIN8  IIN9  BOUT10  BIN11  IIN12  BOUT13  BIN14  IIN15  copy setup data from packet  pass setup data to the upper layer  TXFULL flag  setup transfer size and DMA  local buffer address  Decrement by max packet size is intentional.
     * This way if we have final packet short one we will get negative len
     * after transfer, which in turn indicates we *don't* need to send
     * zero length packet. If the final packet is max sized packet we will
     * get zero len after transfer which indicates we need to send
     * zero length packet to signal host end of the transfer.
      clear NAK  setup DMA  local buffer address  clear NAK  check if clear feature was sent by host  check if a transfer has finished  finished ?  release semaphore for blocking transfer  more data to send  check if clear feature was sent by host  check if a transfer has finished  finished ?  min 10ms  This polls for DEV_EN bit set in DEV_INFO  register
     * as well as tracks current requested configuration
     * (DEV_INFO [11:8]). On state change it notifies usb stack
     * about it.
      SET ADDRESS request  SET CONFIGURATION request  return port speed FS=0, HS=1  Reserve endpoint  Find an available ep/dir pair  allocate endpoint and enable interrupt  Free endpoint  disable interrupt from this endpoint  Set the address (usually it's in a register).
 * There is a problem here: some controller want the address to be set between
 * control out and ack and some want to wait for the end of the transaction.
 * In the first case, you need to write some code special code when getting
 * setup packets and ignore this function (have a look at other drives)
  UDC seems to set this automaticaly  for send transfers, make sure the data is committed  wait for transfer to end  Setup a send transfer. (blocking)  Setup a send transfer. (non blocking)  Setup a receive transfer. (non blocking)  for recv, discard the cache lines related to the buffer  Kill all transfers. Usually you need to set a bit for each endpoint
 *  and flush fifos. You should also call the completion handler with 
 * error status for everything
  Set test mode, you can forget that for now, usually it's sufficient
 * to bit copy the argument into some register of the controller
  Check if endpoint is in stall state  Stall the endpoint. Usually set a flag in the controller  one time init (once per connection) - basicaly enable usb core  init semaphore of ep0  turn off usb core  disable USB interrupts in interrupt controller  we cannot disable UDC clock since this causes data abort
     * when reading DEV_INFO in order to check usb connect event
      UDC ISR function  read what caused UDC irq  usb reset  Enable Suspend Irq  Enable Resume Irq  Enable USB Reset Irq  Enable OUT Token receive Irq EP0  Enable IN Token transmit Irq EP0  Enable SETUP Packet Receive Irq  interrupt high active  enable EP0 irqs  Set as one to enable the EP0 tx irq  Set as one to response NAK handshake  Endpoint 0 Enable. When cleared the
                                    * endpoint does not respond to an SETUP
                                    * or OUT token  Set as one to response NAK handshake  This needs to be processed AFTER usb reset  setup interrupt  EP0 IN done  EP0 OUT done  usb reset  usb resume  TxClr  RxClr  usb suspend  usb connect  wait at least 10ms  other endpoints **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 by Marcin Bukat
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** EP number  EP type  DIR_IN/DIR_OUT  RXSTAT/TXSTAT register  flag to mark EPs taken  tx/rx buffer address  size of the transfer (bytes)  number of bytes transfered/received   flag indicating that transfer is blocking  semaphore for blocking transfers  compute RXCON address from RXSTAT, and so on  compute TXCON address from TXSTAT, and so on  stub  BOUT1  BIN2  IIN3  BOUT4  BIN5  IIN6  BOUT7  BIN8  IIN9  BOUT10  BIN11  IIN12  BOUT13  BIN14  IIN15  copy setup data from packet  pass setup data to the upper layer  TXFULL flag  setup transfer size and DMA  local buffer address  Decrement by max packet size is intentional.
     * This way if we have final packet short one we will get negative len
     * after transfer, which in turn indicates we *don't* need to send
     * zero length packet. If the final packet is max sized packet we will
     * get zero len after transfer which indicates we need to send
     * zero length packet to signal host end of the transfer.
      clear NAK  setup DMA  local buffer address  clear NAK  check if clear feature was sent by host  check if a transfer has finished  finished ?  release semaphore for blocking transfer  more data to send  check if clear feature was sent by host  check if a transfer has finished  finished ?  min 10ms  This polls for DEV_EN bit set in DEV_INFO  register
     * as well as tracks current requested configuration
     * (DEV_INFO [11:8]). On state change it notifies usb stack
     * about it.
      SET ADDRESS request  SET CONFIGURATION request  return port speed FS=0, HS=1  Reserve endpoint  Find an available ep/dir pair  allocate endpoint and enable interrupt  Free endpoint  disable interrupt from this endpoint  Set the address (usually it's in a register).
 * There is a problem here: some controller want the address to be set between
 * control out and ack and some want to wait for the end of the transaction.
 * In the first case, you need to write some code special code when getting
 * setup packets and ignore this function (have a look at other drives)
  UDC seems to set this automaticaly  for send transfers, make sure the data is committed  wait for transfer to end  Setup a send transfer. (blocking)  Setup a send transfer. (non blocking)  Setup a receive transfer. (non blocking)  for recv, discard the cache lines related to the buffer  Kill all transfers. Usually you need to set a bit for each endpoint
 *  and flush fifos. You should also call the completion handler with 
 * error status for everything
  Set test mode, you can forget that for now, usually it's sufficient
 * to bit copy the argument into some register of the controller
  Check if endpoint is in stall state  Stall the endpoint. Usually set a flag in the controller  one time init (once per connection) - basicaly enable usb core  init semaphore of ep0  turn off usb core  disable USB interrupts in interrupt controller  we cannot disable UDC clock since this causes data abort
     * when reading DEV_INFO in order to check usb connect event
      UDC ISR function  read what caused UDC irq  usb reset  Enable Suspend Irq  Enable Resume Irq  Enable USB Reset Irq  Enable OUT Token receive Irq EP0  Enable IN Token transmit Irq EP0  Enable SETUP Packet Receive Irq  interrupt high active  enable EP0 irqs  Set as one to enable the EP0 tx irq  Set as one to response NAK handshake  Endpoint 0 Enable. When cleared the
                                    * endpoint does not respond to an SETUP
                                    * or OUT token  Set as one to response NAK handshake  This needs to be processed AFTER usb reset  setup interrupt  EP0 IN done  EP0 OUT done  usb reset  usb resume  TxClr  RxClr  usb suspend  usb connect  wait at least 10ms  other endpoints 