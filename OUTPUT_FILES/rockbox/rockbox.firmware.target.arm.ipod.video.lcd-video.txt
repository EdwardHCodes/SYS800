**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * LCD driver for iPod Video
 *
 * Based on code from the ipodlinux project - http://ipodlinux.org/
 * Adapted for Rockbox in December 2005
 *
 * Original file: linux/arch/armnommu/mach-ipod/fb.c
 *
 * Copyright (c) 2003-2005 Bernard Leach (leachbj@bouncycastle.org)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** off_t  Included only for lcd_awake() prototype  The BCM bus width is 16 bits. But since the low address bits aren't decoded
 * by the chip (the 3 BCM address bits are mapped to address bits 16..18 of the
 * PP5022), writing 32 bits (and even more, using 'stmia') at once works.  Time until the BCM is considered stalled and will be re-kicked.
 * Must be guaranteed to be >~ 20ms.  An LCD update command done while the LCD is off needs >~ 200ms  Addresses within BCM  Parameters/data for commands  TV out framebuffer  BMP data for TV out functions  BCM commands.  Write them to BCMA_COMMAND.  Note BCM_CMD encoding.  Execute "M25 Diagnostics".  Status displayed on LCD.  Takes <40s  BCM_CMD(4) may be another TV-related command  The following might do more depending on word at 0xE00000  BCM_CMD(12) involved in shutdown  Macrovision analog copy prevention is on by default on TV output.
   Execute this command after enabling TV out to turn it off.
  also used to ensure BCM stays off for >= 50 ms  inter-core sync  Get address and length of iPod flash section.
   Based on part of FS#6721.  This may belong elsewhere.
   (BCM initialization uploads the vmcs section to the BCM.)
  Find the image in the directory  Verify checksum.  Probably unnecessary, but it's fast.  HAVE_LCD_SLEEP  write destination address  wait for it to be write ready  set destination address  write value  write source address  wait for it to be read ready  read value  No core level interrupt mask - already in interrupt context  Update requested and BCM is no longer busy.  BCM still busy after timeout, i.e. stalled.  Kick off update  Update finished properly and no new update pending.  Kick off update  Post update request  BOOTLOADER  Kick off update  BOOTLOADER ** hardware configuration ** TODO: Implement lcd_set_contrast()  TODO: Implement lcd_set_invert_display()  turn the display upside down (call lcd_update() afterwards)  TODO: Implement lcd_set_flip()  LCD init  These port initializations are supposed to be done when initializing
       the BCM.  None of it is changed when shutting down the BCM.
      This pin is used for BCM interrupts  BCM cannot be shut down because firmware wasn't found  lcd_write_data needs an even number of 16 bit values  BCM is powered.  Assume it is initialized.  BCM is not powered, so it needs to be initialized.
           This can only happen when loading Rockbox via ROLO.
          !HAVE_LCD_SLEEP  !BOOTLOADER ** update functions ** Update a fraction of the display.  Nothing left to do.  Ensure x and width are both even. The BCM doesn't like small unaligned
     * writes and would just ignore them.  Prevent the tick from triggering BCM updates while we're writing.  Update the display.
   This must be called after all other LCD functions that change the display.  Line write helper function for lcd_yuv_blit. Writes two lines of yuv420.  Performance function to blit a YUV bitmap directly to the LCD  Sorry, but width and height must be >= 2 or else  Prevent the tick from triggering BCM updates while we're writing.  Skip up two lines  Skip down one chroma line  Executes a BCM command immediately and waits for it to complete.
   Other BCM commands (eg. LCD updates or lcd_tick) must not interfere.
  Immediately switch off the backlight to avoid flashing.  Not sure what this does.  Blanks the LCD and decreases power consumption
       below what clearing the LCD would achieve.
       Executing an LCD update command wakes it.
      Not sure if this does anything  Further cuts power use, probably by powering down BCM.
       After this point, BCM needs to be bootstrapped
      Data written to BCM_CONTROL and BCM_ALT_CONTROL  Power up BCM  Bootstrap stage 1  Interrupt-related code for future use
       GPIOC_INT_LEV |= 0x40;
       GPIOC_INT_EN |= 0x40;
       CPU_HI_INT_EN |= 0x40000;
     Bootstrap stage 2  Bootstrap stage 3: upload firmware  Upload firmware to BCM SRAM  sleep(HZ/2) apparently unneeded  Ensure BCM has been off for >= 50 ms  Start the first LCD update, which also initializes the LCD  Wait for end of first LCD update, so LCD isn't white
           when the backlight turns on.
          Wait for BCM to finish work  Remember time to ensure BCM stays off for >= 50 ms  HAVE_LCD_SHUTDOWN  HAVE_LCD_SLEEP **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * LCD driver for iPod Video
 *
 * Based on code from the ipodlinux project - http://ipodlinux.org/
 * Adapted for Rockbox in December 2005
 *
 * Original file: linux/arch/armnommu/mach-ipod/fb.c
 *
 * Copyright (c) 2003-2005 Bernard Leach (leachbj@bouncycastle.org)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** off_t  Included only for lcd_awake() prototype  The BCM bus width is 16 bits. But since the low address bits aren't decoded
 * by the chip (the 3 BCM address bits are mapped to address bits 16..18 of the
 * PP5022), writing 32 bits (and even more, using 'stmia') at once works.  Time until the BCM is considered stalled and will be re-kicked.
 * Must be guaranteed to be >~ 20ms.  An LCD update command done while the LCD is off needs >~ 200ms  Addresses within BCM  Parameters/data for commands  TV out framebuffer  BMP data for TV out functions  BCM commands.  Write them to BCMA_COMMAND.  Note BCM_CMD encoding.  Execute "M25 Diagnostics".  Status displayed on LCD.  Takes <40s  BCM_CMD(4) may be another TV-related command  The following might do more depending on word at 0xE00000  BCM_CMD(12) involved in shutdown  Macrovision analog copy prevention is on by default on TV output.
   Execute this command after enabling TV out to turn it off.
  also used to ensure BCM stays off for >= 50 ms  inter-core sync  Get address and length of iPod flash section.
   Based on part of FS#6721.  This may belong elsewhere.
   (BCM initialization uploads the vmcs section to the BCM.)
  Find the image in the directory  Verify checksum.  Probably unnecessary, but it's fast.  HAVE_LCD_SLEEP  write destination address  wait for it to be write ready  set destination address  write value  write source address  wait for it to be read ready  read value  No core level interrupt mask - already in interrupt context  Update requested and BCM is no longer busy.  BCM still busy after timeout, i.e. stalled.  Kick off update  Update finished properly and no new update pending.  Kick off update  Post update request  BOOTLOADER  Kick off update  BOOTLOADER ** hardware configuration ** TODO: Implement lcd_set_contrast()  TODO: Implement lcd_set_invert_display()  turn the display upside down (call lcd_update() afterwards)  TODO: Implement lcd_set_flip()  LCD init  These port initializations are supposed to be done when initializing
       the BCM.  None of it is changed when shutting down the BCM.
      This pin is used for BCM interrupts  BCM cannot be shut down because firmware wasn't found  lcd_write_data needs an even number of 16 bit values  BCM is powered.  Assume it is initialized.  BCM is not powered, so it needs to be initialized.
           This can only happen when loading Rockbox via ROLO.
          !HAVE_LCD_SLEEP  !BOOTLOADER ** update functions ** Update a fraction of the display.  Nothing left to do.  Ensure x and width are both even. The BCM doesn't like small unaligned
     * writes and would just ignore them.  Prevent the tick from triggering BCM updates while we're writing.  Update the display.
   This must be called after all other LCD functions that change the display.  Line write helper function for lcd_yuv_blit. Writes two lines of yuv420.  Performance function to blit a YUV bitmap directly to the LCD  Sorry, but width and height must be >= 2 or else  Prevent the tick from triggering BCM updates while we're writing.  Skip up two lines  Skip down one chroma line  Executes a BCM command immediately and waits for it to complete.
   Other BCM commands (eg. LCD updates or lcd_tick) must not interfere.
  Immediately switch off the backlight to avoid flashing.  Not sure what this does.  Blanks the LCD and decreases power consumption
       below what clearing the LCD would achieve.
       Executing an LCD update command wakes it.
      Not sure if this does anything  Further cuts power use, probably by powering down BCM.
       After this point, BCM needs to be bootstrapped
      Data written to BCM_CONTROL and BCM_ALT_CONTROL  Power up BCM  Bootstrap stage 1  Interrupt-related code for future use
       GPIOC_INT_LEV |= 0x40;
       GPIOC_INT_EN |= 0x40;
       CPU_HI_INT_EN |= 0x40000;
     Bootstrap stage 2  Bootstrap stage 3: upload firmware  Upload firmware to BCM SRAM  sleep(HZ/2) apparently unneeded  Ensure BCM has been off for >= 50 ms  Start the first LCD update, which also initializes the LCD  Wait for end of first LCD update, so LCD isn't white
           when the backlight turns on.
          Wait for BCM to finish work  Remember time to ensure BCM stays off for >= 50 ms  HAVE_LCD_SHUTDOWN  HAVE_LCD_SLEEP **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * LCD driver for iPod Video
 *
 * Based on code from the ipodlinux project - http://ipodlinux.org/
 * Adapted for Rockbox in December 2005
 *
 * Original file: linux/arch/armnommu/mach-ipod/fb.c
 *
 * Copyright (c) 2003-2005 Bernard Leach (leachbj@bouncycastle.org)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** off_t  Included only for lcd_awake() prototype  The BCM bus width is 16 bits. But since the low address bits aren't decoded
 * by the chip (the 3 BCM address bits are mapped to address bits 16..18 of the
 * PP5022), writing 32 bits (and even more, using 'stmia') at once works.  Time until the BCM is considered stalled and will be re-kicked.
 * Must be guaranteed to be >~ 20ms.  An LCD update command done while the LCD is off needs >~ 200ms  Addresses within BCM  Parameters/data for commands  TV out framebuffer  BMP data for TV out functions  BCM commands.  Write them to BCMA_COMMAND.  Note BCM_CMD encoding.  Execute "M25 Diagnostics".  Status displayed on LCD.  Takes <40s  BCM_CMD(4) may be another TV-related command  The following might do more depending on word at 0xE00000  BCM_CMD(12) involved in shutdown  Macrovision analog copy prevention is on by default on TV output.
   Execute this command after enabling TV out to turn it off.
  also used to ensure BCM stays off for >= 50 ms  inter-core sync  Get address and length of iPod flash section.
   Based on part of FS#6721.  This may belong elsewhere.
   (BCM initialization uploads the vmcs section to the BCM.)
  Find the image in the directory  Verify checksum.  Probably unnecessary, but it's fast.  HAVE_LCD_SLEEP  write destination address  wait for it to be write ready  set destination address  write value  write source address  wait for it to be read ready  read value  No core level interrupt mask - already in interrupt context  Update requested and BCM is no longer busy.  BCM still busy after timeout, i.e. stalled.  Kick off update  Update finished properly and no new update pending.  Kick off update  Post update request  BOOTLOADER  Kick off update  BOOTLOADER ** hardware configuration ** TODO: Implement lcd_set_contrast()  TODO: Implement lcd_set_invert_display()  turn the display upside down (call lcd_update() afterwards)  TODO: Implement lcd_set_flip()  LCD init  These port initializations are supposed to be done when initializing
       the BCM.  None of it is changed when shutting down the BCM.
      This pin is used for BCM interrupts  BCM cannot be shut down because firmware wasn't found  lcd_write_data needs an even number of 16 bit values  BCM is powered.  Assume it is initialized.  BCM is not powered, so it needs to be initialized.
           This can only happen when loading Rockbox via ROLO.
          !HAVE_LCD_SLEEP  !BOOTLOADER ** update functions ** Update a fraction of the display.  Nothing left to do.  Ensure x and width are both even. The BCM doesn't like small unaligned
     * writes and would just ignore them.  Prevent the tick from triggering BCM updates while we're writing.  Update the display.
   This must be called after all other LCD functions that change the display.  Line write helper function for lcd_yuv_blit. Writes two lines of yuv420.  Performance function to blit a YUV bitmap directly to the LCD  Sorry, but width and height must be >= 2 or else  Prevent the tick from triggering BCM updates while we're writing.  Skip up two lines  Skip down one chroma line  Executes a BCM command immediately and waits for it to complete.
   Other BCM commands (eg. LCD updates or lcd_tick) must not interfere.
  Immediately switch off the backlight to avoid flashing.  Not sure what this does.  Blanks the LCD and decreases power consumption
       below what clearing the LCD would achieve.
       Executing an LCD update command wakes it.
      Not sure if this does anything  Further cuts power use, probably by powering down BCM.
       After this point, BCM needs to be bootstrapped
      Data written to BCM_CONTROL and BCM_ALT_CONTROL  Power up BCM  Bootstrap stage 1  Interrupt-related code for future use
       GPIOC_INT_LEV |= 0x40;
       GPIOC_INT_EN |= 0x40;
       CPU_HI_INT_EN |= 0x40000;
     Bootstrap stage 2  Bootstrap stage 3: upload firmware  Upload firmware to BCM SRAM  sleep(HZ/2) apparently unneeded  Ensure BCM has been off for >= 50 ms  Start the first LCD update, which also initializes the LCD  Wait for end of first LCD update, so LCD isn't white
           when the backlight turns on.
          Wait for BCM to finish work  Remember time to ensure BCM stays off for >= 50 ms  HAVE_LCD_SHUTDOWN  HAVE_LCD_SLEEP 