
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 r_alias.c: routines for setting up to draw alias models FIXME: shouldn't be needed (is needed for patch right now, but that should move) lowest light value we'll allow, to avoid the  need for inner-loop light clamping FIXME: should go away TODO: these probably will go away with optimized rasterization
================
R_AliasCheckBBox
================
 expand, rotate, and translate points into worldspace construct the base bounding box for this frame TODO: don't repeat this check when drawing? x worldspace coordinates y worldspace coordinates z worldspace coordinates we must clip points that are closer than the near clip plane everything was near-z-clipped organize points by edges, use edges to get new points (possible trivial reject) edge endpoints if one end is clipped and the other isn't, make a new point project the vertices that remain after clipping TODO: probably should do this loop in ASM, especially if we use floats we don't need to bother with vertices that were z-clipped FIXME: do with chop mode in ASM, or convert to float trivial reject off one side
================
R_AliasTransformVector
================

================
R_AliasPreparePoints

General clipped case
================
 clip and draw all triangles completely clipped totally unclipped partially clipped
================
R_AliasSetUpTransform
================
 TODO: should really be stored with the entity instead of being reconstructed TODO: should use a look-up table TODO: could cache lazily, stored in the entity TODO: can do this with simple matrix rearrangement FIXME: can do more efficiently than full concatenation TODO: should be global, set when vright, etc., set	viewmatrix[0][3] = 0;	viewmatrix[1][3] = 0;	viewmatrix[2][3] = 0; do the scaling up of x and y to screen coordinates as part of the transform for the unclipped case (it would mess up clipping in the clipped case). Also scale down z, so 1/z is scaled 31 bits for free, and scale down x and y correspondingly so the projected x and y come out right FIXME: make this work for clipped case too?
================
R_AliasTransformFinalVert
================
 lighting clamp; because we limited the minimum ambient and shading light, we don't have to clamp low light, just bright
================
R_AliasTransformAndProjectFinalVerts
================
 transform and project x, y, and z are scaled down by 1/2**31 in the transform, so 1/z is scaled up by 1/2**31, and the scaling cancels out for x and y in the projection lighting clamp; because we limited the minimum ambient and shading light, we don't have to clamp low light, just bright
================
R_AliasProjectFinalVert
================
 project points
================
R_AliasPrepareUnclippedPoints
================
 FIXME: just use pfinalverts directly?
===============
R_AliasSetupSkin
===============
 when loading in Mod_LoadAliasSkinGroup, we guaranteed all interval values are positive, so we don't have to worry about division by 0
================
R_AliasSetupLighting
================
 guarantee that no vertex will ever be lit below LIGHT_MIN, so we don't have to clamp off the bottom rotate the lighting vector into the model's frame of reference
=================
R_AliasSetupFrame

set r_apverts
=================
 when loading in Mod_LoadAliasGroup, we guaranteed all interval values are positive, so we don't have to worry about division by 0
================
R_AliasDrawModel
================
 cache align FIXME: precalc...
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 r_alias.c: routines for setting up to draw alias models FIXME: shouldn't be needed (is needed for patch right now, but that should move) lowest light value we'll allow, to avoid the  need for inner-loop light clamping FIXME: should go away TODO: these probably will go away with optimized rasterization
================
R_AliasCheckBBox
================
 expand, rotate, and translate points into worldspace construct the base bounding box for this frame TODO: don't repeat this check when drawing? x worldspace coordinates y worldspace coordinates z worldspace coordinates we must clip points that are closer than the near clip plane everything was near-z-clipped organize points by edges, use edges to get new points (possible trivial reject) edge endpoints if one end is clipped and the other isn't, make a new point project the vertices that remain after clipping TODO: probably should do this loop in ASM, especially if we use floats we don't need to bother with vertices that were z-clipped FIXME: do with chop mode in ASM, or convert to float trivial reject off one side
================
R_AliasTransformVector
================

================
R_AliasPreparePoints

General clipped case
================
 clip and draw all triangles completely clipped totally unclipped partially clipped
================
R_AliasSetUpTransform
================
 TODO: should really be stored with the entity instead of being reconstructed TODO: should use a look-up table TODO: could cache lazily, stored in the entity TODO: can do this with simple matrix rearrangement FIXME: can do more efficiently than full concatenation TODO: should be global, set when vright, etc., set	viewmatrix[0][3] = 0;	viewmatrix[1][3] = 0;	viewmatrix[2][3] = 0; do the scaling up of x and y to screen coordinates as part of the transform for the unclipped case (it would mess up clipping in the clipped case). Also scale down z, so 1/z is scaled 31 bits for free, and scale down x and y correspondingly so the projected x and y come out right FIXME: make this work for clipped case too?
================
R_AliasTransformFinalVert
================
 lighting clamp; because we limited the minimum ambient and shading light, we don't have to clamp low light, just bright
================
R_AliasTransformAndProjectFinalVerts
================
 transform and project x, y, and z are scaled down by 1/2**31 in the transform, so 1/z is scaled up by 1/2**31, and the scaling cancels out for x and y in the projection lighting clamp; because we limited the minimum ambient and shading light, we don't have to clamp low light, just bright
================
R_AliasProjectFinalVert
================
 project points
================
R_AliasPrepareUnclippedPoints
================
 FIXME: just use pfinalverts directly?
===============
R_AliasSetupSkin
===============
 when loading in Mod_LoadAliasSkinGroup, we guaranteed all interval values are positive, so we don't have to worry about division by 0
================
R_AliasSetupLighting
================
 guarantee that no vertex will ever be lit below LIGHT_MIN, so we don't have to clamp off the bottom rotate the lighting vector into the model's frame of reference
=================
R_AliasSetupFrame

set r_apverts
=================
 when loading in Mod_LoadAliasGroup, we guaranteed all interval values are positive, so we don't have to worry about division by 0
================
R_AliasDrawModel
================
 cache align FIXME: precalc...
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 r_alias.c: routines for setting up to draw alias models FIXME: shouldn't be needed (is needed for patch right now, but that should move) lowest light value we'll allow, to avoid the  need for inner-loop light clamping FIXME: should go away TODO: these probably will go away with optimized rasterization
================
R_AliasCheckBBox
================
 expand, rotate, and translate points into worldspace construct the base bounding box for this frame TODO: don't repeat this check when drawing? x worldspace coordinates y worldspace coordinates z worldspace coordinates we must clip points that are closer than the near clip plane everything was near-z-clipped organize points by edges, use edges to get new points (possible trivial reject) edge endpoints if one end is clipped and the other isn't, make a new point project the vertices that remain after clipping TODO: probably should do this loop in ASM, especially if we use floats we don't need to bother with vertices that were z-clipped FIXME: do with chop mode in ASM, or convert to float trivial reject off one side
================
R_AliasTransformVector
================

================
R_AliasPreparePoints

General clipped case
================
 clip and draw all triangles completely clipped totally unclipped partially clipped
================
R_AliasSetUpTransform
================
 TODO: should really be stored with the entity instead of being reconstructed TODO: should use a look-up table TODO: could cache lazily, stored in the entity TODO: can do this with simple matrix rearrangement FIXME: can do more efficiently than full concatenation TODO: should be global, set when vright, etc., set	viewmatrix[0][3] = 0;	viewmatrix[1][3] = 0;	viewmatrix[2][3] = 0; do the scaling up of x and y to screen coordinates as part of the transform for the unclipped case (it would mess up clipping in the clipped case). Also scale down z, so 1/z is scaled 31 bits for free, and scale down x and y correspondingly so the projected x and y come out right FIXME: make this work for clipped case too?
================
R_AliasTransformFinalVert
================
 lighting clamp; because we limited the minimum ambient and shading light, we don't have to clamp low light, just bright
================
R_AliasTransformAndProjectFinalVerts
================
 transform and project x, y, and z are scaled down by 1/2**31 in the transform, so 1/z is scaled up by 1/2**31, and the scaling cancels out for x and y in the projection lighting clamp; because we limited the minimum ambient and shading light, we don't have to clamp low light, just bright
================
R_AliasProjectFinalVert
================
 project points
================
R_AliasPrepareUnclippedPoints
================
 FIXME: just use pfinalverts directly?
===============
R_AliasSetupSkin
===============
 when loading in Mod_LoadAliasSkinGroup, we guaranteed all interval values are positive, so we don't have to worry about division by 0
================
R_AliasSetupLighting
================
 guarantee that no vertex will ever be lit below LIGHT_MIN, so we don't have to clamp off the bottom rotate the lighting vector into the model's frame of reference
=================
R_AliasSetupFrame

set r_apverts
=================
 when loading in Mod_LoadAliasGroup, we guaranteed all interval values are positive, so we don't have to worry about division by 0
================
R_AliasDrawModel
================
 cache align FIXME: precalc...