**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2009 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Most of the code in here is based upon the Linux BSP provided by Freescale
 * Copyright 2004-2008 Freescale Semiconductor, Inc. All Rights Reserved.  Cut down to bare bones essentials  Mask of channels with callback enabled  One channel control block per channel in physically mapped device RAM  Channel 0 (command channel) data  All SDMA channel interrupts are handled here.
 * Dispatches lower channel numbers first (prioritized by SDMA API callers
 * who specify the desired channel number).
  Ack all ints  Only dispatch ints with callback  Isolate bottom bit  Clear it  Call callback (required if using an interrupt). bit number = channel  Return pc of SDMA script in SDMA halfword space according to peripheral
 * and transfer type  Not using this  Not using this  Not using this  Not using this  Not using this 
         * Peripheral <------> Memory
         * evtOvr = 0 mcuOvr = 0 dspOvr = 1
          Not using this 
         * DSP <-----------> Memory
         * evtOvr = 1 mcuOvr = 0 dspOvr = 0
          Not using this  evtOvr = 1 mcuOvr = 0 dspOvr = 1  Not using this  evtOvr = 0 mcuOvr = 1 dspOvr = 0  Fill the buffer descriptor with the values given in parameter.
 * Expects physical addresses.  C0_* command or transfer size  BD_* flags  Size of buffer to transfer  Buffer to transfer  Configure channel ownership  DSP side  Not using this  Event  MCU side  Obtain script start address for perihperal and transfer type  Failed to find a script  Set peripheral DMA request mask for this channel  ATA has two  Send channel context to SDMA core  Clear channel-wide error flag  No more to do  Obtain channel ownership configuration  Set who owns it and thus can activate it  Set event ID to channel activation bitmapping  ATA has two * Public routines * Reset the controller  No channel enabled, all priorities 0  Ensure no ints pending  Nobody owns any channel (yet)  32-word channel contexts, use default bootscript address  SDMA core must run at the proper frequency based upon the AHB/IPG
     * ratio  No dsp, no debug
     * Static context switching - TLSbo86520L SW Workaround for SDMA Chnl0
     * access issue  Tell SDMA where the host channel table is  No channel descriptor  Command channel owned by AP  Load SDMA script code  No dsp, no debug, dynamic context switching  Busy wait for a channel to complete  Set a new channel priority  Resets a channel to start of script next time it runs.  Resume or start execution on a channel  Pause a running channel - can be resumed  Stop a channel from executing - cannot be resumed  Lock callback  Stop execution  Unlock callback if it was set  If initialized already, should close first then init.  Initialize channel control block.  Finish any channel descriptor inits.  Do an initial setup now.  Enable interrupt if a callback is specified.  Minimum schedulable = 1  Block callbacks (if not initialized, it won't be set).  Stop the channel if running  No ownership  Cannot schedule it again  Reset channel control block entry  Check channel-wide error flag  Write 32-bit words to SDMA core memory. Host endian->SDMA endian.  Setup buffer descriptor with channel 0 command  Read 32-bit words from SDMA core memory. SDMA endian->host endian.  Setup buffer descriptor with channel 0 command **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2009 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Most of the code in here is based upon the Linux BSP provided by Freescale
 * Copyright 2004-2008 Freescale Semiconductor, Inc. All Rights Reserved.  Cut down to bare bones essentials  Mask of channels with callback enabled  One channel control block per channel in physically mapped device RAM  Channel 0 (command channel) data  All SDMA channel interrupts are handled here.
 * Dispatches lower channel numbers first (prioritized by SDMA API callers
 * who specify the desired channel number).
  Ack all ints  Only dispatch ints with callback  Isolate bottom bit  Clear it  Call callback (required if using an interrupt). bit number = channel  Return pc of SDMA script in SDMA halfword space according to peripheral
 * and transfer type  Not using this  Not using this  Not using this  Not using this  Not using this 
         * Peripheral <------> Memory
         * evtOvr = 0 mcuOvr = 0 dspOvr = 1
          Not using this 
         * DSP <-----------> Memory
         * evtOvr = 1 mcuOvr = 0 dspOvr = 0
          Not using this  evtOvr = 1 mcuOvr = 0 dspOvr = 1  Not using this  evtOvr = 0 mcuOvr = 1 dspOvr = 0  Fill the buffer descriptor with the values given in parameter.
 * Expects physical addresses.  C0_* command or transfer size  BD_* flags  Size of buffer to transfer  Buffer to transfer  Configure channel ownership  DSP side  Not using this  Event  MCU side  Obtain script start address for perihperal and transfer type  Failed to find a script  Set peripheral DMA request mask for this channel  ATA has two  Send channel context to SDMA core  Clear channel-wide error flag  No more to do  Obtain channel ownership configuration  Set who owns it and thus can activate it  Set event ID to channel activation bitmapping  ATA has two * Public routines * Reset the controller  No channel enabled, all priorities 0  Ensure no ints pending  Nobody owns any channel (yet)  32-word channel contexts, use default bootscript address  SDMA core must run at the proper frequency based upon the AHB/IPG
     * ratio  No dsp, no debug
     * Static context switching - TLSbo86520L SW Workaround for SDMA Chnl0
     * access issue  Tell SDMA where the host channel table is  No channel descriptor  Command channel owned by AP  Load SDMA script code  No dsp, no debug, dynamic context switching  Busy wait for a channel to complete  Set a new channel priority  Resets a channel to start of script next time it runs.  Resume or start execution on a channel  Pause a running channel - can be resumed  Stop a channel from executing - cannot be resumed  Lock callback  Stop execution  Unlock callback if it was set  If initialized already, should close first then init.  Initialize channel control block.  Finish any channel descriptor inits.  Do an initial setup now.  Enable interrupt if a callback is specified.  Minimum schedulable = 1  Block callbacks (if not initialized, it won't be set).  Stop the channel if running  No ownership  Cannot schedule it again  Reset channel control block entry  Check channel-wide error flag  Write 32-bit words to SDMA core memory. Host endian->SDMA endian.  Setup buffer descriptor with channel 0 command  Read 32-bit words from SDMA core memory. SDMA endian->host endian.  Setup buffer descriptor with channel 0 command **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2009 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Most of the code in here is based upon the Linux BSP provided by Freescale
 * Copyright 2004-2008 Freescale Semiconductor, Inc. All Rights Reserved.  Cut down to bare bones essentials  Mask of channels with callback enabled  One channel control block per channel in physically mapped device RAM  Channel 0 (command channel) data  All SDMA channel interrupts are handled here.
 * Dispatches lower channel numbers first (prioritized by SDMA API callers
 * who specify the desired channel number).
  Ack all ints  Only dispatch ints with callback  Isolate bottom bit  Clear it  Call callback (required if using an interrupt). bit number = channel  Return pc of SDMA script in SDMA halfword space according to peripheral
 * and transfer type  Not using this  Not using this  Not using this  Not using this  Not using this 
         * Peripheral <------> Memory
         * evtOvr = 0 mcuOvr = 0 dspOvr = 1
          Not using this 
         * DSP <-----------> Memory
         * evtOvr = 1 mcuOvr = 0 dspOvr = 0
          Not using this  evtOvr = 1 mcuOvr = 0 dspOvr = 1  Not using this  evtOvr = 0 mcuOvr = 1 dspOvr = 0  Fill the buffer descriptor with the values given in parameter.
 * Expects physical addresses.  C0_* command or transfer size  BD_* flags  Size of buffer to transfer  Buffer to transfer  Configure channel ownership  DSP side  Not using this  Event  MCU side  Obtain script start address for perihperal and transfer type  Failed to find a script  Set peripheral DMA request mask for this channel  ATA has two  Send channel context to SDMA core  Clear channel-wide error flag  No more to do  Obtain channel ownership configuration  Set who owns it and thus can activate it  Set event ID to channel activation bitmapping  ATA has two * Public routines * Reset the controller  No channel enabled, all priorities 0  Ensure no ints pending  Nobody owns any channel (yet)  32-word channel contexts, use default bootscript address  SDMA core must run at the proper frequency based upon the AHB/IPG
     * ratio  No dsp, no debug
     * Static context switching - TLSbo86520L SW Workaround for SDMA Chnl0
     * access issue  Tell SDMA where the host channel table is  No channel descriptor  Command channel owned by AP  Load SDMA script code  No dsp, no debug, dynamic context switching  Busy wait for a channel to complete  Set a new channel priority  Resets a channel to start of script next time it runs.  Resume or start execution on a channel  Pause a running channel - can be resumed  Stop a channel from executing - cannot be resumed  Lock callback  Stop execution  Unlock callback if it was set  If initialized already, should close first then init.  Initialize channel control block.  Finish any channel descriptor inits.  Do an initial setup now.  Enable interrupt if a callback is specified.  Minimum schedulable = 1  Block callbacks (if not initialized, it won't be set).  Stop the channel if running  No ownership  Cannot schedule it again  Reset channel control block entry  Check channel-wide error flag  Write 32-bit words to SDMA core memory. Host endian->SDMA endian.  Setup buffer descriptor with channel 0 command  Read 32-bit words from SDMA core memory. SDMA endian->host endian.  Setup buffer descriptor with channel 0 command 