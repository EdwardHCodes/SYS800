**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Dave Chapman
 *     Text rendering
 * Copyright (C) 2006 Shachar Liberman
 *     Offset text, scrolling
 * Copyright (C) 2007 Nicolas Pennequin, Tom Ross, Ken Fazzone, Akio Idehara
 *     Color gradient background
 * Copyright (C) 2009 Andrew Mahone
 *     Merged common LCD bitmap code
 *
 * Rockbox common bitmap LCD functions
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Not compiling for remote - define macros for main LCD. 
 * draws the borders of the current viewport
 *
 * fills the rectangle formed by current_vp
 *** Viewports ** Force the viewport to be within bounds.  If this happens it should
     *  be considered an error - the viewport will not draw as it might be
     *  expected.
      put a string at a given pixel position, skipping first ofs pixel columns  center takes precedence  Mark diacritic and rtl flags for each character  Get proportional width and glyph bits  Calculate base width  Forward-seek the next non-diacritic character for base width  Jump to next non-diacritic char, and calc its width  Mark  XXX: Suggested by amiconn:
             * This will produce completely wrong results if the original
             * drawmode is DRMODE_COMPLEMENT. We need to pre-render the current
             * character with all its diacritics at least (in mono) and then
             * finally draw that. And we'll need an extra buffer that can hold
             * one char's bitmap. Basically we can't just change the draw mode
             * to something else irrespective of the original mode and expect
             * the result to look as intended and with DRMODE_COMPLEMENT (which
             * means XORing pixels), overdrawing this way will cause odd results
             * if the diacritics and the base char both have common pixels set.
             * So we need to combine the char and its diacritics in a temp
             * buffer using OR, and then draw the final bitmap instead of the
             * chars, without touching the drawmode
             * Increment if:
             *  LTR: Next char is not diacritic,
             *  RTL: Current char is non-diacritic and next char is diacritic ** pixel oriented text output ** put a string at a given pixel position  Formatting version of LCDFN(putsxy) ** Line oriented text output ** Formatting version of LCDFN(puts) ** scrolling ** with line == NULL when scrolling stops. This scroller
     * maintains no userdata so there is nothing left to do  Fill with background/backdrop to clear area.
     * cannot use clear_viewport_rect() since would stop scrolling as well  prepare rectangle for scrolling. x and y must be calculated early
     * for find_scrolling_line() to work  get width (pixeks) of the string  Remove any previously scrolling line at the same location. If
     * the string width is too small to scroll the scrolling line is
     * cleared as well  nothing to scroll, or out of scrolling lines. Either way, get out  else restarting: prepare scroll line  copy contents to the line buffer  scroll bidirectional or forward only depending on the string width  assign the rectangle. not necessary if continuing an earlier line  not restarting, however we are about to assign new userdata;
         * therefore tell the scroller that it can release the previous userdata  if only the text was updated render immediately  see lcd-16bit-common.c for others  if the bitmap dimensions are not multiples of 3 bytes reduce the
     * inner segments accordingly. A 8x8 image becomes 3x3 for each
     * corner, and 2x2 for the inner segments  top & bottom in a single loop cap the last segment to the remaining width  left & right in a single loop  cap the last segment to the remaining height  center, need not be drawn if the desired rectangle is smaller than
     * the sides. in that case the rect is completely filled already  cap the last segment to the remaining height  cap the last segment to the remaining width  4 corners **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Dave Chapman
 *     Text rendering
 * Copyright (C) 2006 Shachar Liberman
 *     Offset text, scrolling
 * Copyright (C) 2007 Nicolas Pennequin, Tom Ross, Ken Fazzone, Akio Idehara
 *     Color gradient background
 * Copyright (C) 2009 Andrew Mahone
 *     Merged common LCD bitmap code
 *
 * Rockbox common bitmap LCD functions
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Not compiling for remote - define macros for main LCD. 
 * draws the borders of the current viewport
 *
 * fills the rectangle formed by current_vp
 *** Viewports ** Force the viewport to be within bounds.  If this happens it should
     *  be considered an error - the viewport will not draw as it might be
     *  expected.
      put a string at a given pixel position, skipping first ofs pixel columns  center takes precedence  Mark diacritic and rtl flags for each character  Get proportional width and glyph bits  Calculate base width  Forward-seek the next non-diacritic character for base width  Jump to next non-diacritic char, and calc its width  Mark  XXX: Suggested by amiconn:
             * This will produce completely wrong results if the original
             * drawmode is DRMODE_COMPLEMENT. We need to pre-render the current
             * character with all its diacritics at least (in mono) and then
             * finally draw that. And we'll need an extra buffer that can hold
             * one char's bitmap. Basically we can't just change the draw mode
             * to something else irrespective of the original mode and expect
             * the result to look as intended and with DRMODE_COMPLEMENT (which
             * means XORing pixels), overdrawing this way will cause odd results
             * if the diacritics and the base char both have common pixels set.
             * So we need to combine the char and its diacritics in a temp
             * buffer using OR, and then draw the final bitmap instead of the
             * chars, without touching the drawmode
             * Increment if:
             *  LTR: Next char is not diacritic,
             *  RTL: Current char is non-diacritic and next char is diacritic ** pixel oriented text output ** put a string at a given pixel position  Formatting version of LCDFN(putsxy) ** Line oriented text output ** Formatting version of LCDFN(puts) ** scrolling ** with line == NULL when scrolling stops. This scroller
     * maintains no userdata so there is nothing left to do  Fill with background/backdrop to clear area.
     * cannot use clear_viewport_rect() since would stop scrolling as well  prepare rectangle for scrolling. x and y must be calculated early
     * for find_scrolling_line() to work  get width (pixeks) of the string  Remove any previously scrolling line at the same location. If
     * the string width is too small to scroll the scrolling line is
     * cleared as well  nothing to scroll, or out of scrolling lines. Either way, get out  else restarting: prepare scroll line  copy contents to the line buffer  scroll bidirectional or forward only depending on the string width  assign the rectangle. not necessary if continuing an earlier line  not restarting, however we are about to assign new userdata;
         * therefore tell the scroller that it can release the previous userdata  if only the text was updated render immediately  see lcd-16bit-common.c for others  if the bitmap dimensions are not multiples of 3 bytes reduce the
     * inner segments accordingly. A 8x8 image becomes 3x3 for each
     * corner, and 2x2 for the inner segments  top & bottom in a single loop cap the last segment to the remaining width  left & right in a single loop  cap the last segment to the remaining height  center, need not be drawn if the desired rectangle is smaller than
     * the sides. in that case the rect is completely filled already  cap the last segment to the remaining height  cap the last segment to the remaining width  4 corners **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Dave Chapman
 *     Text rendering
 * Copyright (C) 2006 Shachar Liberman
 *     Offset text, scrolling
 * Copyright (C) 2007 Nicolas Pennequin, Tom Ross, Ken Fazzone, Akio Idehara
 *     Color gradient background
 * Copyright (C) 2009 Andrew Mahone
 *     Merged common LCD bitmap code
 *
 * Rockbox common bitmap LCD functions
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Not compiling for remote - define macros for main LCD. 
 * draws the borders of the current viewport
 *
 * fills the rectangle formed by current_vp
 *** Viewports ** Force the viewport to be within bounds.  If this happens it should
     *  be considered an error - the viewport will not draw as it might be
     *  expected.
      put a string at a given pixel position, skipping first ofs pixel columns  center takes precedence  Mark diacritic and rtl flags for each character  Get proportional width and glyph bits  Calculate base width  Forward-seek the next non-diacritic character for base width  Jump to next non-diacritic char, and calc its width  Mark  XXX: Suggested by amiconn:
             * This will produce completely wrong results if the original
             * drawmode is DRMODE_COMPLEMENT. We need to pre-render the current
             * character with all its diacritics at least (in mono) and then
             * finally draw that. And we'll need an extra buffer that can hold
             * one char's bitmap. Basically we can't just change the draw mode
             * to something else irrespective of the original mode and expect
             * the result to look as intended and with DRMODE_COMPLEMENT (which
             * means XORing pixels), overdrawing this way will cause odd results
             * if the diacritics and the base char both have common pixels set.
             * So we need to combine the char and its diacritics in a temp
             * buffer using OR, and then draw the final bitmap instead of the
             * chars, without touching the drawmode
             * Increment if:
             *  LTR: Next char is not diacritic,
             *  RTL: Current char is non-diacritic and next char is diacritic ** pixel oriented text output ** put a string at a given pixel position  Formatting version of LCDFN(putsxy) ** Line oriented text output ** Formatting version of LCDFN(puts) ** scrolling ** with line == NULL when scrolling stops. This scroller
     * maintains no userdata so there is nothing left to do  Fill with background/backdrop to clear area.
     * cannot use clear_viewport_rect() since would stop scrolling as well  prepare rectangle for scrolling. x and y must be calculated early
     * for find_scrolling_line() to work  get width (pixeks) of the string  Remove any previously scrolling line at the same location. If
     * the string width is too small to scroll the scrolling line is
     * cleared as well  nothing to scroll, or out of scrolling lines. Either way, get out  else restarting: prepare scroll line  copy contents to the line buffer  scroll bidirectional or forward only depending on the string width  assign the rectangle. not necessary if continuing an earlier line  not restarting, however we are about to assign new userdata;
         * therefore tell the scroller that it can release the previous userdata  if only the text was updated render immediately  see lcd-16bit-common.c for others  if the bitmap dimensions are not multiples of 3 bytes reduce the
     * inner segments accordingly. A 8x8 image becomes 3x3 for each
     * corner, and 2x2 for the inner segments  top & bottom in a single loop cap the last segment to the remaining width  left & right in a single loop  cap the last segment to the remaining height  center, need not be drawn if the desired rectangle is smaller than
     * the sides. in that case the rect is completely filled already  cap the last segment to the remaining height  cap the last segment to the remaining width  4 corners 