**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Mark Arigo
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define LOGF_ENABLE Driver for the Synaptics Touchpad based on the "Synaptics Modular Embedded
   Protocol: 3-Wire Interface Specification" documentation  for EABI (touchpad doesn't work without it)  Flush receiving (flushee) state:
       handshake until DATA goes high during P3 stage  P1 -> P2  P2 -> P3  P3 -> P0  P0 -> P1  P1 -> P2  P2 -> P3  Continue handshaking until back to P0  P3 -> P0  Flusher holds DATA low for at least 36 handshake cycles  P0 -> P1  P1 -> P2  P2 -> P3  P3 -> P0  Raise DATA in P1 stage  P0 -> P1  After a flush, the flushing device enters a flush-receiving (flushee)
       state  1. Lower DATA line to issue a request-to-send to guest  2. Wait for guest to lower CLK  3. Lower ACK (with DATA still low)  4. Wait for guest to raise CLK  5. Send data  5a. Drive data low if bit is 0, or high if bit is 1  5b. Invert ACK to indicate that the data bit is ready  5c. Wait for guest to invert CLK  Repeat for next bit  7. Transmission termination sequence:  7a. Host may put parity bit on DATA. Hosts that do not generate
           parity should set DATA high. Parity is 1 if there's an odd
           number of '1' bits, or 0 if there's an even number of '1' bits.  7b. Raise ACK to indicate that the optional parity bit is ready  7c. Guest lowers CLK  7d. Pull DATA high (if parity bit was 0)  7e. Lower ACK to indicate that the stop bit is ready  7f. Guest raises CLK  7g. If DATA is low, guest is flushing this transfer. Host should
           enter the flushee state.  7h. Host raises ACK and the link enters the idle state  1. Guest drives CLK low  1a. If the host is willing to receive a packet it lowers ACK  2. Guest may issue a request-to-send by lowering DATA. If the
          guest decides not to transmit a packet, it may abort the
          transmission by not lowering DATA.  3. The guest raises CLK  4. If the guest is still driving DATA low, the transfer is commited
          to occur. Otherwise, the transfer is aborted. In either case, 
          the host raises ACK.  5. Read the incoming data packet  5b. Guset inverts CLK to indicate that data is ready  5d. Read the data bit from DATA  5e. Invert ACK to indicate that data has been read  Repeat for next bit  First byte is the packet header  Format control (bit 3) should be 1  Packet length is bits 0:2  7. Transmission termination cycle  7a. The guest generates a parity bit on DATA  7b. The host waits for guest to lower CLK  7c. The host verifies the parity bit is correct  TODO: parity error handling  7d. The host lowers ACK  7e. The host waits for the guest to raise CLK indicating 
           that the stop bit is ready  7f. The host reads DATA and verifies that it is 1  module is sending data  module is idle  reset module 0  packet header  packet id  reset interrupts  disable interrupt while we read the touchpad  packet header  packet id  an absolute packet should follow which we ignore  for HDD6330 an absolute packet will follow for sensor nr 0 which we ignore  relay tap gesture packet finger is NOT on touch strip  re-enable interrupts  header - addr=mod_nr,global:0,ctrl:0,len:3  parameter number  param_hi  param_lo  try to get the simple ACK = 0x18  modules > 0 sometimes don't give ACK immediately but other packets like  absolute from the scroll strip, so it has to be ignored until we receive ACK  Not used normally, but useful for pulling settings or determining
   which parameters are supported  'Get MEP Parameter' command packet  header - addr=mod_nr,global:0,ctrl:0,len:1  parameter number  Must not be an error packet; check size  ACK: param_hi[15:8], param_lo[7:0]  turn on all touchpad leds  HDD6330: second module  device responds with a single-byte ACK packet  module base info  module product info  module serialization  1-D sensor info **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Mark Arigo
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define LOGF_ENABLE Driver for the Synaptics Touchpad based on the "Synaptics Modular Embedded
   Protocol: 3-Wire Interface Specification" documentation  for EABI (touchpad doesn't work without it)  Flush receiving (flushee) state:
       handshake until DATA goes high during P3 stage  P1 -> P2  P2 -> P3  P3 -> P0  P0 -> P1  P1 -> P2  P2 -> P3  Continue handshaking until back to P0  P3 -> P0  Flusher holds DATA low for at least 36 handshake cycles  P0 -> P1  P1 -> P2  P2 -> P3  P3 -> P0  Raise DATA in P1 stage  P0 -> P1  After a flush, the flushing device enters a flush-receiving (flushee)
       state  1. Lower DATA line to issue a request-to-send to guest  2. Wait for guest to lower CLK  3. Lower ACK (with DATA still low)  4. Wait for guest to raise CLK  5. Send data  5a. Drive data low if bit is 0, or high if bit is 1  5b. Invert ACK to indicate that the data bit is ready  5c. Wait for guest to invert CLK  Repeat for next bit  7. Transmission termination sequence:  7a. Host may put parity bit on DATA. Hosts that do not generate
           parity should set DATA high. Parity is 1 if there's an odd
           number of '1' bits, or 0 if there's an even number of '1' bits.  7b. Raise ACK to indicate that the optional parity bit is ready  7c. Guest lowers CLK  7d. Pull DATA high (if parity bit was 0)  7e. Lower ACK to indicate that the stop bit is ready  7f. Guest raises CLK  7g. If DATA is low, guest is flushing this transfer. Host should
           enter the flushee state.  7h. Host raises ACK and the link enters the idle state  1. Guest drives CLK low  1a. If the host is willing to receive a packet it lowers ACK  2. Guest may issue a request-to-send by lowering DATA. If the
          guest decides not to transmit a packet, it may abort the
          transmission by not lowering DATA.  3. The guest raises CLK  4. If the guest is still driving DATA low, the transfer is commited
          to occur. Otherwise, the transfer is aborted. In either case, 
          the host raises ACK.  5. Read the incoming data packet  5b. Guset inverts CLK to indicate that data is ready  5d. Read the data bit from DATA  5e. Invert ACK to indicate that data has been read  Repeat for next bit  First byte is the packet header  Format control (bit 3) should be 1  Packet length is bits 0:2  7. Transmission termination cycle  7a. The guest generates a parity bit on DATA  7b. The host waits for guest to lower CLK  7c. The host verifies the parity bit is correct  TODO: parity error handling  7d. The host lowers ACK  7e. The host waits for the guest to raise CLK indicating 
           that the stop bit is ready  7f. The host reads DATA and verifies that it is 1  module is sending data  module is idle  reset module 0  packet header  packet id  reset interrupts  disable interrupt while we read the touchpad  packet header  packet id  an absolute packet should follow which we ignore  for HDD6330 an absolute packet will follow for sensor nr 0 which we ignore  relay tap gesture packet finger is NOT on touch strip  re-enable interrupts  header - addr=mod_nr,global:0,ctrl:0,len:3  parameter number  param_hi  param_lo  try to get the simple ACK = 0x18  modules > 0 sometimes don't give ACK immediately but other packets like  absolute from the scroll strip, so it has to be ignored until we receive ACK  Not used normally, but useful for pulling settings or determining
   which parameters are supported  'Get MEP Parameter' command packet  header - addr=mod_nr,global:0,ctrl:0,len:1  parameter number  Must not be an error packet; check size  ACK: param_hi[15:8], param_lo[7:0]  turn on all touchpad leds  HDD6330: second module  device responds with a single-byte ACK packet  module base info  module product info  module serialization  1-D sensor info **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Mark Arigo
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define LOGF_ENABLE Driver for the Synaptics Touchpad based on the "Synaptics Modular Embedded
   Protocol: 3-Wire Interface Specification" documentation  for EABI (touchpad doesn't work without it)  Flush receiving (flushee) state:
       handshake until DATA goes high during P3 stage  P1 -> P2  P2 -> P3  P3 -> P0  P0 -> P1  P1 -> P2  P2 -> P3  Continue handshaking until back to P0  P3 -> P0  Flusher holds DATA low for at least 36 handshake cycles  P0 -> P1  P1 -> P2  P2 -> P3  P3 -> P0  Raise DATA in P1 stage  P0 -> P1  After a flush, the flushing device enters a flush-receiving (flushee)
       state  1. Lower DATA line to issue a request-to-send to guest  2. Wait for guest to lower CLK  3. Lower ACK (with DATA still low)  4. Wait for guest to raise CLK  5. Send data  5a. Drive data low if bit is 0, or high if bit is 1  5b. Invert ACK to indicate that the data bit is ready  5c. Wait for guest to invert CLK  Repeat for next bit  7. Transmission termination sequence:  7a. Host may put parity bit on DATA. Hosts that do not generate
           parity should set DATA high. Parity is 1 if there's an odd
           number of '1' bits, or 0 if there's an even number of '1' bits.  7b. Raise ACK to indicate that the optional parity bit is ready  7c. Guest lowers CLK  7d. Pull DATA high (if parity bit was 0)  7e. Lower ACK to indicate that the stop bit is ready  7f. Guest raises CLK  7g. If DATA is low, guest is flushing this transfer. Host should
           enter the flushee state.  7h. Host raises ACK and the link enters the idle state  1. Guest drives CLK low  1a. If the host is willing to receive a packet it lowers ACK  2. Guest may issue a request-to-send by lowering DATA. If the
          guest decides not to transmit a packet, it may abort the
          transmission by not lowering DATA.  3. The guest raises CLK  4. If the guest is still driving DATA low, the transfer is commited
          to occur. Otherwise, the transfer is aborted. In either case, 
          the host raises ACK.  5. Read the incoming data packet  5b. Guset inverts CLK to indicate that data is ready  5d. Read the data bit from DATA  5e. Invert ACK to indicate that data has been read  Repeat for next bit  First byte is the packet header  Format control (bit 3) should be 1  Packet length is bits 0:2  7. Transmission termination cycle  7a. The guest generates a parity bit on DATA  7b. The host waits for guest to lower CLK  7c. The host verifies the parity bit is correct  TODO: parity error handling  7d. The host lowers ACK  7e. The host waits for the guest to raise CLK indicating 
           that the stop bit is ready  7f. The host reads DATA and verifies that it is 1  module is sending data  module is idle  reset module 0  packet header  packet id  reset interrupts  disable interrupt while we read the touchpad  packet header  packet id  an absolute packet should follow which we ignore  for HDD6330 an absolute packet will follow for sensor nr 0 which we ignore  relay tap gesture packet finger is NOT on touch strip  re-enable interrupts  header - addr=mod_nr,global:0,ctrl:0,len:3  parameter number  param_hi  param_lo  try to get the simple ACK = 0x18  modules > 0 sometimes don't give ACK immediately but other packets like  absolute from the scroll strip, so it has to be ignored until we receive ACK  Not used normally, but useful for pulling settings or determining
   which parameters are supported  'Get MEP Parameter' command packet  header - addr=mod_nr,global:0,ctrl:0,len:1  parameter number  Must not be an error packet; check size  ACK: param_hi[15:8], param_lo[7:0]  turn on all touchpad leds  HDD6330: second module  device responds with a single-byte ACK packet  module base info  module product info  module serialization  1-D sensor info 