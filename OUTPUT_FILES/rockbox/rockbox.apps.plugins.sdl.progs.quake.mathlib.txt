
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 mathlib.c -- math primitives-----------------------------------------------------------------
** assumes "src" is normalized

	** find the smallest magnitude axially aligned vector
	
	** project the point onto the plane defined by src
	
	** normalize the result
	-----------------------------------------------------------------
==================
BOPS_Error

Split out like this for ASM to call.
==================

==================
BoxOnPlaneSide

Returns 1, 2, or 1 + 2
==================
 this is done by the BOX_ON_PLANE_SIDE macro before calling this function fast axial cases general case shut up compiler FIXME
================
R_ConcatRotations
================

================
R_ConcatTransforms
================

===================
FloorDivMod

Returns mathematically correct (floor-based) quotient and remainder for
numer and denom, both of which should contain no fractional part. The
quotient must fit in 32 bits.
====================
	if ((floor(numer) != numer) || (floor(denom) != denom))		Sys_Error ("FloorDivMod: non-integer numer or denom %f %f\n",				numer, denom); perform operations with positive values, and fix mod to make floor-based
===================
GreatestCommonDivisor
====================
 TODO: move to nonintel.c
===================
Invert24To16

Inverts an 8.24 value to a 16.16 value
====================

Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 mathlib.c -- math primitives-----------------------------------------------------------------
** assumes "src" is normalized

	** find the smallest magnitude axially aligned vector
	
	** project the point onto the plane defined by src
	
	** normalize the result
	-----------------------------------------------------------------
==================
BOPS_Error

Split out like this for ASM to call.
==================

==================
BoxOnPlaneSide

Returns 1, 2, or 1 + 2
==================
 this is done by the BOX_ON_PLANE_SIDE macro before calling this function fast axial cases general case shut up compiler FIXME
================
R_ConcatRotations
================

================
R_ConcatTransforms
================

===================
FloorDivMod

Returns mathematically correct (floor-based) quotient and remainder for
numer and denom, both of which should contain no fractional part. The
quotient must fit in 32 bits.
====================
	if ((floor(numer) != numer) || (floor(denom) != denom))		Sys_Error ("FloorDivMod: non-integer numer or denom %f %f\n",				numer, denom); perform operations with positive values, and fix mod to make floor-based
===================
GreatestCommonDivisor
====================
 TODO: move to nonintel.c
===================
Invert24To16

Inverts an 8.24 value to a 16.16 value
====================

Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 mathlib.c -- math primitives-----------------------------------------------------------------
** assumes "src" is normalized

	** find the smallest magnitude axially aligned vector
	
	** project the point onto the plane defined by src
	
	** normalize the result
	-----------------------------------------------------------------
==================
BOPS_Error

Split out like this for ASM to call.
==================

==================
BoxOnPlaneSide

Returns 1, 2, or 1 + 2
==================
 this is done by the BOX_ON_PLANE_SIDE macro before calling this function fast axial cases general case shut up compiler FIXME
================
R_ConcatRotations
================

================
R_ConcatTransforms
================

===================
FloorDivMod

Returns mathematically correct (floor-based) quotient and remainder for
numer and denom, both of which should contain no fractional part. The
quotient must fit in 32 bits.
====================
	if ((floor(numer) != numer) || (floor(denom) != denom))		Sys_Error ("FloorDivMod: non-integer numer or denom %f %f\n",				numer, denom); perform operations with positive values, and fix mod to make floor-based
===================
GreatestCommonDivisor
====================
 TODO: move to nonintel.c
===================
Invert24To16

Inverts an 8.24 value to a 16.16 value
====================
