
 * Copyright (c) 2002, 2003 Bob Deblier
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 !\file mp.c
 * \brief Multi-precision integer routines.
 * \author Bob Deblier <bob.deblier@pandora.be>
 * \ingroup MP_m
  preferred passing of parameters is x the larger of the two numbers  first do the shifting, then do the moving  first do the shifting, then do the moving  counter for 'all zero bit' words  counter for 'least significant zero' bits  count 'all zero' words and move src pointer  test if we have a non-zero word  count 'least signification zero bits and set zbits counter  prepare right-shifting of data  shift data  store the final carry  store the return value in size  zero the (zwords) most significant words  try an alternate version here, with descending sizes  also integrate lszcnt and rshift properly into one function 
 * mpgcd_w
 *  need workspace of (size) words
  get the smallest returned values, and set shift to that  slide past zero words in both operands by increasing pointers and decreasing size  figure out if we need to slide the result pointer back  needs workspace of (6*size+6) words  used to compute the modular inverse 
	 * For computing a modular inverse, pass the modulus as xdata and the number
	 * to be inverted as ydata.
	 *
	 * Fact: if a element of Zn, then a is invertible if and only if gcd(a,n) = 1
	 * Hence: if n is even, then a must be odd, otherwise the gcd(a,n) >= 2
	 *
	 * The calling routine must guarantee this condition.
	  keep adding the modulus until we get a carry  in some computations, d ends up > x, hence:
						 * keep subtracting n from d until d < x
						  result size xsize, workspace size 2*ysize+1  de-normalization steps  result must be xsize+1 in length  workspace must be ysize+1 in length  expect ydata to be normalized  verify that ossize is large enough to contain the significant bytes  looking good; check if we have more space than significant bytes  fill most significant bytes with zero  fill remaining bytes with endian-adjusted data  fill right-to-left; much easier than left-to-right  just copy data past zero bytes  skip non-significant leading zero bytes  yes, we have enough space and can proceed  adjust counter so that the loop will start by skipping the proper
		 * amount of leading bytes in the first significant word
		  fill initials words with zero  fill initial words with zero 
 * Copyright (c) 2002, 2003 Bob Deblier
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 !\file mp.c
 * \brief Multi-precision integer routines.
 * \author Bob Deblier <bob.deblier@pandora.be>
 * \ingroup MP_m
  preferred passing of parameters is x the larger of the two numbers  first do the shifting, then do the moving  first do the shifting, then do the moving  counter for 'all zero bit' words  counter for 'least significant zero' bits  count 'all zero' words and move src pointer  test if we have a non-zero word  count 'least signification zero bits and set zbits counter  prepare right-shifting of data  shift data  store the final carry  store the return value in size  zero the (zwords) most significant words  try an alternate version here, with descending sizes  also integrate lszcnt and rshift properly into one function 
 * mpgcd_w
 *  need workspace of (size) words
  get the smallest returned values, and set shift to that  slide past zero words in both operands by increasing pointers and decreasing size  figure out if we need to slide the result pointer back  needs workspace of (6*size+6) words  used to compute the modular inverse 
	 * For computing a modular inverse, pass the modulus as xdata and the number
	 * to be inverted as ydata.
	 *
	 * Fact: if a element of Zn, then a is invertible if and only if gcd(a,n) = 1
	 * Hence: if n is even, then a must be odd, otherwise the gcd(a,n) >= 2
	 *
	 * The calling routine must guarantee this condition.
	  keep adding the modulus until we get a carry  in some computations, d ends up > x, hence:
						 * keep subtracting n from d until d < x
						  result size xsize, workspace size 2*ysize+1  de-normalization steps  result must be xsize+1 in length  workspace must be ysize+1 in length  expect ydata to be normalized  verify that ossize is large enough to contain the significant bytes  looking good; check if we have more space than significant bytes  fill most significant bytes with zero  fill remaining bytes with endian-adjusted data  fill right-to-left; much easier than left-to-right  just copy data past zero bytes  skip non-significant leading zero bytes  yes, we have enough space and can proceed  adjust counter so that the loop will start by skipping the proper
		 * amount of leading bytes in the first significant word
		  fill initials words with zero  fill initial words with zero 
 * Copyright (c) 2002, 2003 Bob Deblier
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 !\file mp.c
 * \brief Multi-precision integer routines.
 * \author Bob Deblier <bob.deblier@pandora.be>
 * \ingroup MP_m
  preferred passing of parameters is x the larger of the two numbers  first do the shifting, then do the moving  first do the shifting, then do the moving  counter for 'all zero bit' words  counter for 'least significant zero' bits  count 'all zero' words and move src pointer  test if we have a non-zero word  count 'least signification zero bits and set zbits counter  prepare right-shifting of data  shift data  store the final carry  store the return value in size  zero the (zwords) most significant words  try an alternate version here, with descending sizes  also integrate lszcnt and rshift properly into one function 
 * mpgcd_w
 *  need workspace of (size) words
  get the smallest returned values, and set shift to that  slide past zero words in both operands by increasing pointers and decreasing size  figure out if we need to slide the result pointer back  needs workspace of (6*size+6) words  used to compute the modular inverse 
	 * For computing a modular inverse, pass the modulus as xdata and the number
	 * to be inverted as ydata.
	 *
	 * Fact: if a element of Zn, then a is invertible if and only if gcd(a,n) = 1
	 * Hence: if n is even, then a must be odd, otherwise the gcd(a,n) >= 2
	 *
	 * The calling routine must guarantee this condition.
	  keep adding the modulus until we get a carry  in some computations, d ends up > x, hence:
						 * keep subtracting n from d until d < x
						  result size xsize, workspace size 2*ysize+1  de-normalization steps  result must be xsize+1 in length  workspace must be ysize+1 in length  expect ydata to be normalized  verify that ossize is large enough to contain the significant bytes  looking good; check if we have more space than significant bytes  fill most significant bytes with zero  fill remaining bytes with endian-adjusted data  fill right-to-left; much easier than left-to-right  just copy data past zero bytes  skip non-significant leading zero bytes  yes, we have enough space and can proceed  adjust counter so that the loop will start by skipping the proper
		 * amount of leading bytes in the first significant word
		  fill initials words with zero  fill initial words with zero 