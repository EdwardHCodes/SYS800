
 * cramfsck - check a cramfs file system
 *
 * Copyright (C) 2000-2002 Transmeta Corporation
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * 1999/12/03: Linus Torvalds (cramfs tester and unarchive program)
 * 2000/06/03: Daniel Quinlan (CRC and length checking program)
 * 2000/06/04: Daniel Quinlan (merged programs, added options, support
 *                            for special files, preserve permissions and
 *                            ownership, cramfs superblock v2, bogus mode
 *                            test, pathname length test, etc.)
 * 2000/06/06: Daniel Quinlan (support for holes, pretty-printing,
 *                            symlink size test)
 * 2000/07/11: Daniel Quinlan (file length tests, start at offset 0 or 512,
 *                            fsck-compatible exit codes)
 * 2000/07/15: Daniel Quinlan (initial support for block devices)
 * 2002/01/10: Daniel Quinlan (additional checks, test more return codes,
 *                            use read if mmap fails, standardize messages)
  compile-time options  include cramfs checking and extraction  Exit codes used by fsck-type programs  No errors  File system errors corrected  System should be rebooted  File system errors left uncorrected  Operational error  Usage or syntax error  Shared library error  ROM image file descriptor  ROM image filename  just find the cramfs superblock once  1 = verbose (-v), 2+ = very verbose (-vv)  extract cramfs (-x)  extraction directory (-x)  effective UID  (cramfs_super + start) <= start_dir < end_dir <= start_data <= end_data  start of first non-root inode  end of the directory structure  start of the data (256 MB = max)  end of the data  Guarantee access to at least 8kB at a time  Uncompressing data structures...  Prototypes  INCLUDE_FS_TESTS  Input status of 0 to print help and exit without an error.  find the physical size of the file or block device  find superblock  superblock tests  not INCLUDE_FS_TESTS  not INCLUDE_FS_TESTS  major/minor numbers can be as high as 2^12 or 4096  size be as high as 2^24 or 16777216 
 * Create a fake "blocked" access
 
 * Return the offset of the root directory
  TODO: Do we need to check end_dir for empty case?  free(child)  no need to shift offset  not reached  free(root)  INCLUDE_FS_TESTS  for getopt  command line options  not INCLUDE_FS_TESTS  not INCLUDE_FS_TESTS  INCLUDE_FS_TESTS 
 * Local variables:
 * c-file-style: "linux"
 * End:
 
 * cramfsck - check a cramfs file system
 *
 * Copyright (C) 2000-2002 Transmeta Corporation
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * 1999/12/03: Linus Torvalds (cramfs tester and unarchive program)
 * 2000/06/03: Daniel Quinlan (CRC and length checking program)
 * 2000/06/04: Daniel Quinlan (merged programs, added options, support
 *                            for special files, preserve permissions and
 *                            ownership, cramfs superblock v2, bogus mode
 *                            test, pathname length test, etc.)
 * 2000/06/06: Daniel Quinlan (support for holes, pretty-printing,
 *                            symlink size test)
 * 2000/07/11: Daniel Quinlan (file length tests, start at offset 0 or 512,
 *                            fsck-compatible exit codes)
 * 2000/07/15: Daniel Quinlan (initial support for block devices)
 * 2002/01/10: Daniel Quinlan (additional checks, test more return codes,
 *                            use read if mmap fails, standardize messages)
  compile-time options  include cramfs checking and extraction  Exit codes used by fsck-type programs  No errors  File system errors corrected  System should be rebooted  File system errors left uncorrected  Operational error  Usage or syntax error  Shared library error  ROM image file descriptor  ROM image filename  just find the cramfs superblock once  1 = verbose (-v), 2+ = very verbose (-vv)  extract cramfs (-x)  extraction directory (-x)  effective UID  (cramfs_super + start) <= start_dir < end_dir <= start_data <= end_data  start of first non-root inode  end of the directory structure  start of the data (256 MB = max)  end of the data  Guarantee access to at least 8kB at a time  Uncompressing data structures...  Prototypes  INCLUDE_FS_TESTS  Input status of 0 to print help and exit without an error.  find the physical size of the file or block device  find superblock  superblock tests  not INCLUDE_FS_TESTS  not INCLUDE_FS_TESTS  major/minor numbers can be as high as 2^12 or 4096  size be as high as 2^24 or 16777216 
 * Create a fake "blocked" access
 
 * Return the offset of the root directory
  TODO: Do we need to check end_dir for empty case?  free(child)  no need to shift offset  not reached  free(root)  INCLUDE_FS_TESTS  for getopt  command line options  not INCLUDE_FS_TESTS  not INCLUDE_FS_TESTS  INCLUDE_FS_TESTS 
 * Local variables:
 * c-file-style: "linux"
 * End:
 
 * cramfsck - check a cramfs file system
 *
 * Copyright (C) 2000-2002 Transmeta Corporation
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * 1999/12/03: Linus Torvalds (cramfs tester and unarchive program)
 * 2000/06/03: Daniel Quinlan (CRC and length checking program)
 * 2000/06/04: Daniel Quinlan (merged programs, added options, support
 *                            for special files, preserve permissions and
 *                            ownership, cramfs superblock v2, bogus mode
 *                            test, pathname length test, etc.)
 * 2000/06/06: Daniel Quinlan (support for holes, pretty-printing,
 *                            symlink size test)
 * 2000/07/11: Daniel Quinlan (file length tests, start at offset 0 or 512,
 *                            fsck-compatible exit codes)
 * 2000/07/15: Daniel Quinlan (initial support for block devices)
 * 2002/01/10: Daniel Quinlan (additional checks, test more return codes,
 *                            use read if mmap fails, standardize messages)
  compile-time options  include cramfs checking and extraction  Exit codes used by fsck-type programs  No errors  File system errors corrected  System should be rebooted  File system errors left uncorrected  Operational error  Usage or syntax error  Shared library error  ROM image file descriptor  ROM image filename  just find the cramfs superblock once  1 = verbose (-v), 2+ = very verbose (-vv)  extract cramfs (-x)  extraction directory (-x)  effective UID  (cramfs_super + start) <= start_dir < end_dir <= start_data <= end_data  start of first non-root inode  end of the directory structure  start of the data (256 MB = max)  end of the data  Guarantee access to at least 8kB at a time  Uncompressing data structures...  Prototypes  INCLUDE_FS_TESTS  Input status of 0 to print help and exit without an error.  find the physical size of the file or block device  find superblock  superblock tests  not INCLUDE_FS_TESTS  not INCLUDE_FS_TESTS  major/minor numbers can be as high as 2^12 or 4096  size be as high as 2^24 or 16777216 
 * Create a fake "blocked" access
 
 * Return the offset of the root directory
  TODO: Do we need to check end_dir for empty case?  free(child)  no need to shift offset  not reached  free(root)  INCLUDE_FS_TESTS  for getopt  command line options  not INCLUDE_FS_TESTS  not INCLUDE_FS_TESTS  INCLUDE_FS_TESTS 
 * Local variables:
 * c-file-style: "linux"
 * End:
 