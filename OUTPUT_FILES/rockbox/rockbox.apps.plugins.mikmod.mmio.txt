	MikMod sound library
	(c) 1998, 1999, 2000 Miodrag Vallat and others - see file AUTHORS for
	complete list.

	This library is free software; you can redistribute it and/or modify
	it under the terms of the GNU Library General Public License as
	published by the Free Software Foundation; either version 2 of
	the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Library General Public License for more details.

	You should have received a copy of the GNU Library General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
	02111-1307, USA.
==============================================================================

  Portable file I/O routines

==============================================================================

	The way this module works:

	- _mm_fopen will call the errorhandler [see mmerror.c] in addition to
	  setting _mm_errno on exit.
	- _mm_iobase is for internal use.  It is used by Player_LoadFP to
	  ensure that it works properly with wad files.
	- _mm_read_I_* and _mm_read_M_* differ : the first is for reading data
	  written by a little endian (intel) machine, and the second is for reading
	  big endian (Mac, RISC, Alpha) machine data.
	- _mm_write functions work the same as the _mm_read functions.
	- _mm_read_string is for reading binary strings.  It is basically the same
	  as an fread of bytes.

 some prototypes if(!(fp=fopen(fname,attrib))) {      _mm_errno = MMERR_OPENING_FILE;      if(_mm_errorhandler) _mm_errorhandler();}if(!(fp=fopen(fname,"r"))) return 0;fclose(fp);return fclose(fp); Sets the current file-position as the new iobase  store old value in case of revert  Reverts to the last known iobase value. ========== File Reader return feof(((MFILEREADER*)reader)->file);return !!fread(ptr,size,1,((MFILEREADER*)reader)->file);return fgetc(((MFILEREADER*)reader)->file);return fseek(((MFILEREADER*)reader)->file,                       (whence==SEEK_SET)?offset+reader->iobase:offset,whence);return ftell(((MFILEREADER*)reader)->file)-reader->iobase;========== File Writer return fseek(((MFILEWRITER*)writer)->file,offset,whence);return ftell(((MFILEWRITER*)writer)->file);return (fwrite(ptr,size,1,((MFILEWRITER*)writer)->file)==size);return fputc(value,((MFILEWRITER*)writer)->file); TODO========== Memory Reader  @ eof  not enough remaining bytes  invalid ========== Write functions ========== Read functions  ex:set ts=4: 	MikMod sound library
	(c) 1998, 1999, 2000 Miodrag Vallat and others - see file AUTHORS for
	complete list.

	This library is free software; you can redistribute it and/or modify
	it under the terms of the GNU Library General Public License as
	published by the Free Software Foundation; either version 2 of
	the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Library General Public License for more details.

	You should have received a copy of the GNU Library General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
	02111-1307, USA.
==============================================================================

  Portable file I/O routines

==============================================================================

	The way this module works:

	- _mm_fopen will call the errorhandler [see mmerror.c] in addition to
	  setting _mm_errno on exit.
	- _mm_iobase is for internal use.  It is used by Player_LoadFP to
	  ensure that it works properly with wad files.
	- _mm_read_I_* and _mm_read_M_* differ : the first is for reading data
	  written by a little endian (intel) machine, and the second is for reading
	  big endian (Mac, RISC, Alpha) machine data.
	- _mm_write functions work the same as the _mm_read functions.
	- _mm_read_string is for reading binary strings.  It is basically the same
	  as an fread of bytes.

 some prototypes if(!(fp=fopen(fname,attrib))) {      _mm_errno = MMERR_OPENING_FILE;      if(_mm_errorhandler) _mm_errorhandler();}if(!(fp=fopen(fname,"r"))) return 0;fclose(fp);return fclose(fp); Sets the current file-position as the new iobase  store old value in case of revert  Reverts to the last known iobase value. ========== File Reader return feof(((MFILEREADER*)reader)->file);return !!fread(ptr,size,1,((MFILEREADER*)reader)->file);return fgetc(((MFILEREADER*)reader)->file);return fseek(((MFILEREADER*)reader)->file,                       (whence==SEEK_SET)?offset+reader->iobase:offset,whence);return ftell(((MFILEREADER*)reader)->file)-reader->iobase;========== File Writer return fseek(((MFILEWRITER*)writer)->file,offset,whence);return ftell(((MFILEWRITER*)writer)->file);return (fwrite(ptr,size,1,((MFILEWRITER*)writer)->file)==size);return fputc(value,((MFILEWRITER*)writer)->file); TODO========== Memory Reader  @ eof  not enough remaining bytes  invalid ========== Write functions ========== Read functions  ex:set ts=4: 	MikMod sound library
	(c) 1998, 1999, 2000 Miodrag Vallat and others - see file AUTHORS for
	complete list.

	This library is free software; you can redistribute it and/or modify
	it under the terms of the GNU Library General Public License as
	published by the Free Software Foundation; either version 2 of
	the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Library General Public License for more details.

	You should have received a copy of the GNU Library General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
	02111-1307, USA.
==============================================================================

  Portable file I/O routines

==============================================================================

	The way this module works:

	- _mm_fopen will call the errorhandler [see mmerror.c] in addition to
	  setting _mm_errno on exit.
	- _mm_iobase is for internal use.  It is used by Player_LoadFP to
	  ensure that it works properly with wad files.
	- _mm_read_I_* and _mm_read_M_* differ : the first is for reading data
	  written by a little endian (intel) machine, and the second is for reading
	  big endian (Mac, RISC, Alpha) machine data.
	- _mm_write functions work the same as the _mm_read functions.
	- _mm_read_string is for reading binary strings.  It is basically the same
	  as an fread of bytes.

 some prototypes if(!(fp=fopen(fname,attrib))) {      _mm_errno = MMERR_OPENING_FILE;      if(_mm_errorhandler) _mm_errorhandler();}if(!(fp=fopen(fname,"r"))) return 0;fclose(fp);return fclose(fp); Sets the current file-position as the new iobase  store old value in case of revert  Reverts to the last known iobase value. ========== File Reader return feof(((MFILEREADER*)reader)->file);return !!fread(ptr,size,1,((MFILEREADER*)reader)->file);return fgetc(((MFILEREADER*)reader)->file);return fseek(((MFILEREADER*)reader)->file,                       (whence==SEEK_SET)?offset+reader->iobase:offset,whence);return ftell(((MFILEREADER*)reader)->file)-reader->iobase;========== File Writer return fseek(((MFILEWRITER*)writer)->file,offset,whence);return ftell(((MFILEWRITER*)writer)->file);return (fwrite(ptr,size,1,((MFILEWRITER*)writer)->file)==size);return fputc(value,((MFILEWRITER*)writer)->file); TODO========== Memory Reader  @ eof  not enough remaining bytes  invalid ========== Write functions ========== Read functions  ex:set ts=4: 