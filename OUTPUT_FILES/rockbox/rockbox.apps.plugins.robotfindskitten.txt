**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * robotfindskitten: A Zen simulation
 *
 * Copyright (C) 1997,2000 Leonard Richardson 
 *                         leonardr@segfault.org
 *                         http://www.crummy.com/devel/
 *
 *   This program is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU General Public License as
 *   published by the Free Software Foundation; either version 2 of
 *   the License, or (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or EXISTANCE OF KITTEN.  See the GNU General
 *   Public License for more details.
 *
 *   http://www.gnu.org/copyleft/gpl.html
 *
 * Ported to Rockbox 2007 by Jonas Häggqvist
  This macros must always be included. Should be placed at the top by
   convention, although the actual position doesn't matter Be sure to change MESSAGES when you change the array, or bad things
  will happen.Also, take note that robotfindskitten.c and configure.in 
  currently have the version number hardcoded into them, and they 
  should reflect MESSAGES.  Watch out for fenceposts.Constants for our internal representation of the screen. if SYSFONT_WIDTH is 0 (which it is during dependency generation) gcc
   will abort (div by 0) and this plugin won't get any dependencies
Screen dimensions. Colours used  Yellow  Cyan  Purple  Blue  Red  Green  HAVE_LCD_COLOR Macros for generating numbers in different rangesI'm feeling randy()!Row constants for the animationThis struct contains all the information we need to display an object
  on the screen
 *Function definitions
 Initialization and setup functionsGame functionsHelper functionsGlobal variables. Bite me, it's fun. This array contains our internal representation of the screen. The
 array is bigger than it needs to be, as we don't need to keep track
 of the first few rows of the screen. But that requires making an
 offset function and using that everywhere. So not right now. *****************************************************************************
 *
 * Begin meaty routines that do the dirty work.
 *
 ****************************************************************************
 *play_game waits in a loop getting input and sending it to process_input
 Redraw robot, where applicable. We're your station, robot.Get rid of the old robotMeet the new robot, same as the old robot.
 *Given the keyboard input, process_input interprets it in terms of moving,
 *touching objects, etc.
 Check for going off the edge of the screen.Do nothing.
   * Clear textline
   * disabled because it breaks the scrolling for some reason
    rb->lcd_puts_scroll(0, ADV_ROW, " "); Check for collisionWe didn't move, or we're stuck in a
                time warp or something.Found it! Wait for the user to click something We hit a bogus object; print its message.Otherwise, move the robot.finish is called upon signal or progam exit*****************************************************************************
 *
 * Begin helper routines
 *
 **************************************************************************** Clear the message line The grand cinema scene. Clear the previous position (empty the first time) *****************************************************************************
 *
 * Begin initialization routines (called before play begins).
 *
 **************************************************************************** Not sure if we want to include this? Initialize the empty object.Initialize the other arrays.initialize_robot initializes robot.Assign a position to the player.initialize kitten, well, initializes kitten.Assign the kitten a unique position.Assign the kitten a character and a color.initialize_bogus initializes all non-kitten objects to be used in this run.Give it a color.Give it a character.Give it a position.Find a message for this object.initialize_screen paints the screen.
   *Print the status portion of the screen.
   Draw a line across the screen.
   *Draw all the objects on the playing field.
    this is the plugin entry point 
   * Now we initialize the various game objects.
   
   * Set up white-on-black screen on color targets
   
   * Run the game
   **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * robotfindskitten: A Zen simulation
 *
 * Copyright (C) 1997,2000 Leonard Richardson 
 *                         leonardr@segfault.org
 *                         http://www.crummy.com/devel/
 *
 *   This program is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU General Public License as
 *   published by the Free Software Foundation; either version 2 of
 *   the License, or (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or EXISTANCE OF KITTEN.  See the GNU General
 *   Public License for more details.
 *
 *   http://www.gnu.org/copyleft/gpl.html
 *
 * Ported to Rockbox 2007 by Jonas Häggqvist
  This macros must always be included. Should be placed at the top by
   convention, although the actual position doesn't matter Be sure to change MESSAGES when you change the array, or bad things
  will happen.Also, take note that robotfindskitten.c and configure.in 
  currently have the version number hardcoded into them, and they 
  should reflect MESSAGES.  Watch out for fenceposts.Constants for our internal representation of the screen. if SYSFONT_WIDTH is 0 (which it is during dependency generation) gcc
   will abort (div by 0) and this plugin won't get any dependencies
Screen dimensions. Colours used  Yellow  Cyan  Purple  Blue  Red  Green  HAVE_LCD_COLOR Macros for generating numbers in different rangesI'm feeling randy()!Row constants for the animationThis struct contains all the information we need to display an object
  on the screen
 *Function definitions
 Initialization and setup functionsGame functionsHelper functionsGlobal variables. Bite me, it's fun. This array contains our internal representation of the screen. The
 array is bigger than it needs to be, as we don't need to keep track
 of the first few rows of the screen. But that requires making an
 offset function and using that everywhere. So not right now. *****************************************************************************
 *
 * Begin meaty routines that do the dirty work.
 *
 ****************************************************************************
 *play_game waits in a loop getting input and sending it to process_input
 Redraw robot, where applicable. We're your station, robot.Get rid of the old robotMeet the new robot, same as the old robot.
 *Given the keyboard input, process_input interprets it in terms of moving,
 *touching objects, etc.
 Check for going off the edge of the screen.Do nothing.
   * Clear textline
   * disabled because it breaks the scrolling for some reason
    rb->lcd_puts_scroll(0, ADV_ROW, " "); Check for collisionWe didn't move, or we're stuck in a
                time warp or something.Found it! Wait for the user to click something We hit a bogus object; print its message.Otherwise, move the robot.finish is called upon signal or progam exit*****************************************************************************
 *
 * Begin helper routines
 *
 **************************************************************************** Clear the message line The grand cinema scene. Clear the previous position (empty the first time) *****************************************************************************
 *
 * Begin initialization routines (called before play begins).
 *
 **************************************************************************** Not sure if we want to include this? Initialize the empty object.Initialize the other arrays.initialize_robot initializes robot.Assign a position to the player.initialize kitten, well, initializes kitten.Assign the kitten a unique position.Assign the kitten a character and a color.initialize_bogus initializes all non-kitten objects to be used in this run.Give it a color.Give it a character.Give it a position.Find a message for this object.initialize_screen paints the screen.
   *Print the status portion of the screen.
   Draw a line across the screen.
   *Draw all the objects on the playing field.
    this is the plugin entry point 
   * Now we initialize the various game objects.
   
   * Set up white-on-black screen on color targets
   
   * Run the game
   **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * robotfindskitten: A Zen simulation
 *
 * Copyright (C) 1997,2000 Leonard Richardson 
 *                         leonardr@segfault.org
 *                         http://www.crummy.com/devel/
 *
 *   This program is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU General Public License as
 *   published by the Free Software Foundation; either version 2 of
 *   the License, or (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or EXISTANCE OF KITTEN.  See the GNU General
 *   Public License for more details.
 *
 *   http://www.gnu.org/copyleft/gpl.html
 *
 * Ported to Rockbox 2007 by Jonas Häggqvist
  This macros must always be included. Should be placed at the top by
   convention, although the actual position doesn't matter Be sure to change MESSAGES when you change the array, or bad things
  will happen.Also, take note that robotfindskitten.c and configure.in 
  currently have the version number hardcoded into them, and they 
  should reflect MESSAGES.  Watch out for fenceposts.Constants for our internal representation of the screen. if SYSFONT_WIDTH is 0 (which it is during dependency generation) gcc
   will abort (div by 0) and this plugin won't get any dependencies
Screen dimensions. Colours used  Yellow  Cyan  Purple  Blue  Red  Green  HAVE_LCD_COLOR Macros for generating numbers in different rangesI'm feeling randy()!Row constants for the animationThis struct contains all the information we need to display an object
  on the screen
 *Function definitions
 Initialization and setup functionsGame functionsHelper functionsGlobal variables. Bite me, it's fun. This array contains our internal representation of the screen. The
 array is bigger than it needs to be, as we don't need to keep track
 of the first few rows of the screen. But that requires making an
 offset function and using that everywhere. So not right now. *****************************************************************************
 *
 * Begin meaty routines that do the dirty work.
 *
 ****************************************************************************
 *play_game waits in a loop getting input and sending it to process_input
 Redraw robot, where applicable. We're your station, robot.Get rid of the old robotMeet the new robot, same as the old robot.
 *Given the keyboard input, process_input interprets it in terms of moving,
 *touching objects, etc.
 Check for going off the edge of the screen.Do nothing.
   * Clear textline
   * disabled because it breaks the scrolling for some reason
    rb->lcd_puts_scroll(0, ADV_ROW, " "); Check for collisionWe didn't move, or we're stuck in a
                time warp or something.Found it! Wait for the user to click something We hit a bogus object; print its message.Otherwise, move the robot.finish is called upon signal or progam exit*****************************************************************************
 *
 * Begin helper routines
 *
 **************************************************************************** Clear the message line The grand cinema scene. Clear the previous position (empty the first time) *****************************************************************************
 *
 * Begin initialization routines (called before play begins).
 *
 **************************************************************************** Not sure if we want to include this? Initialize the empty object.Initialize the other arrays.initialize_robot initializes robot.Assign a position to the player.initialize kitten, well, initializes kitten.Assign the kitten a unique position.Assign the kitten a character and a color.initialize_bogus initializes all non-kitten objects to be used in this run.Give it a color.Give it a character.Give it a position.Find a message for this object.initialize_screen paints the screen.
   *Print the status portion of the screen.
   Draw a line across the screen.
   *Draw all the objects on the playing field.
    this is the plugin entry point 
   * Now we initialize the various game objects.
   
   * Set up white-on-black screen on color targets
   
   * Run the game
   