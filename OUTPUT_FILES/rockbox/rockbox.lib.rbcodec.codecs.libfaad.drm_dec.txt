
** FAAD2 - Freeware Advanced Audio (AAC) Decoder including SBR and PS decoding
** Copyright (C) 2003-2004 M. Bakker, Ahead Software AG, http://www.nero.com
**
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
**
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** Any non-GPL usage of this software or parts of this software is strictly
** forbidden.
**
** Commercial non-GPL licensing of this software is possible.
** For more info contact Ahead Software through Mpeg4AAClicense@nero.com.
**
** $Id$
* constants  type definitions  binary search huffman tables 0 index 0: 1 bits:  x  index 1: 2 bits:  1x 7 index 2: 3 bits:  10x  index 3: 3 bits:  11x 1-1 index 4: 4 bits:  101x -2 index 5: 4 bits:  110x  index 6: 4 bits:  111x 2-3 index 7: 5 bits:  1101x 3 index 8: 5 bits:  1110x  index 9: 5 bits:  1111x 45 index 10: 6 bits: 11101x -4-5 index 11: 6 bits: 11110x 6 index 12: 6 bits: 11111x -7-6 index 13: 7 bits: 111111x 0 index 0: 1 bits: x  index 1: 2 bits: 1x -11 index 2: 3 bits: 10x  index 3: 3 bits: 11x -22 index 4: 4 bits: 110x  index 5: 4 bits: 111x -33 index 6: 5 bits: 1110x  index 7: 5 bits: 1111x -44 index 8: 6 bits: 11110x  index 9: 6 bits: 11111x -55 index 10: 7 bits: 111110x -6 index 11: 7 bits: 111111x -7 index 12: 8 bits: 1111111x 67 index 13: 9 bits: 11111111x 0 index 0: 1 bits: x -1 index 1: 2 bits: 1x 1 index 2: 3 bits: 11x  index 3: 4 bits: 111x -22 index 4: 5 bits: 1110x  index 5: 5 bits: 1111x -33 index 6: 6 bits: 11110x  index 7: 6 bits: 11111x -44 index 8: 7 bits: 111110x  index 9: 7 bits: 111111x -55 index 10: 8 bits: 1111110x  index 11: 8 bits: 1111111x -66 index 12: 9 bits: 11111110x -7 index 13: 9 bits: 11111111x 7 index 14: 10 bits: 111111111x  index 15: 11 bits: 1111111111x -88 index 16: 12 bits: 11111111110x  index 17: 12 bits: 11111111111x -10 index 18: 13 bits: 111111111110x  index 19: 13 bits: 111111111111x -99 index 20: 14 bits: 1111111111101x 10 index 21: 14 bits: 1111111111110x  index 22: 14 bits: 1111111111111x -13-11 index 23: 15 bits: 11111111111101x 1113 index 24: 15 bits: 11111111111110x  index 25: 15 bits: 11111111111111x -14-12 index 26: 16 bits: 111111111111110x 1214 index 27: 16 bits: 111111111111111x 0 index 0: 1 bits: x -1 index 1: 2 bits: 1x 1 index 2: 3 bits: 11x -2 index 3: 4 bits: 111x 2 index 4: 5 bits: 1111x -3 index 5: 6 bits: 11111x 3 index 6: 7 bits: 111111x -4 index 7: 8 bits: 1111111x 4 index 8: 9 bits: 11111111x  index 9: 10 bits: 111111111x -55 index 10: 11 bits: 1111111110x  index 11: 11 bits: 1111111111x -66 index 12: 12 bits: 11111111110x  index 13: 12 bits: 11111111111x -77 index 14: 13 bits: 111111111110x  index 15: 13 bits: 111111111111x -88 index 16: 14 bits: 1111111111110x  index 17: 14 bits: 1111111111111x -1010 index 18: 15 bits: 11111111111110x  index 19: 15 bits: 11111111111111x -99 index 20: 16 bits: 111111111111110x  index 21: 16 bits: 111111111111111x  index 22: 17 bits: 1111111111111110x  index 23: 17 bits: 1111111111111111x -14-13 index 24: 18 bits: 11111111111111100x -12-11 index 25: 18 bits: 11111111111111101x 1112 index 26: 18 bits: 11111111111111110x 1314 index 27: 18 bits: 11111111111111111x  There are 3 classes in the standard but the last 2 are identical  We don't need the actual quantizer values  2^(pan_quant[x][y]  2^(-pan_quant[x][y]  2^(pan_quant[x][y]/30)  2^(-pan_quant[x][y]/30)  Inverse mapping lookup  Please note that these are the same tables as in plain PS  static variables  static function declarations  binary search huffman decoding   printf(" SAminclip %d", i);    printf(" SAmaxclip %d", i);  printf(" PANminclip %d", i);  printf(" PANmaxclip %d", i);   An error during SA decoding implies PAN data will be undecodable, too  Also, we don't like on/off switching in PS, so we force to last settings  The DRM PS spec doesn't say anything about this case. (deltacoded in time without a previous frame)
   AAC PS spec you must tread previous frame as 0, so that's what we try. 
 set delay indices  NOTE: all input is scaled by 2^(-5) because of fixed point QMF
            * meaning that P will be scaled by 2^(-10) compared to floating point version
             Instead of dequantization and mapping, we use an inverse mapping
           to look up all the values we need  Instead of dequantization, 20->64 mapping and 2^G(x,y) we do an
               inverse mapping 64->20 and look up the 2^G(x,y) values directly  2^((a-b)/30) = 2^(a/30) * 1/(2^(b/30))  a en b can be negative so we may need to inverse parts  PAN always uses all 64 channels  2^(a+k*b) = 2^a * 2^b * ... * 2^b                    ^^^^^^^^^^^^^^^ k times  main DRM PS decoding function  if SBR CRC doesn't match out, we can assume decode errors to start with,
       and we'll guess what the parameters should be  don't even bother decoding 
** FAAD2 - Freeware Advanced Audio (AAC) Decoder including SBR and PS decoding
** Copyright (C) 2003-2004 M. Bakker, Ahead Software AG, http://www.nero.com
**
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
**
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** Any non-GPL usage of this software or parts of this software is strictly
** forbidden.
**
** Commercial non-GPL licensing of this software is possible.
** For more info contact Ahead Software through Mpeg4AAClicense@nero.com.
**
** $Id$
* constants  type definitions  binary search huffman tables 0 index 0: 1 bits:  x  index 1: 2 bits:  1x 7 index 2: 3 bits:  10x  index 3: 3 bits:  11x 1-1 index 4: 4 bits:  101x -2 index 5: 4 bits:  110x  index 6: 4 bits:  111x 2-3 index 7: 5 bits:  1101x 3 index 8: 5 bits:  1110x  index 9: 5 bits:  1111x 45 index 10: 6 bits: 11101x -4-5 index 11: 6 bits: 11110x 6 index 12: 6 bits: 11111x -7-6 index 13: 7 bits: 111111x 0 index 0: 1 bits: x  index 1: 2 bits: 1x -11 index 2: 3 bits: 10x  index 3: 3 bits: 11x -22 index 4: 4 bits: 110x  index 5: 4 bits: 111x -33 index 6: 5 bits: 1110x  index 7: 5 bits: 1111x -44 index 8: 6 bits: 11110x  index 9: 6 bits: 11111x -55 index 10: 7 bits: 111110x -6 index 11: 7 bits: 111111x -7 index 12: 8 bits: 1111111x 67 index 13: 9 bits: 11111111x 0 index 0: 1 bits: x -1 index 1: 2 bits: 1x 1 index 2: 3 bits: 11x  index 3: 4 bits: 111x -22 index 4: 5 bits: 1110x  index 5: 5 bits: 1111x -33 index 6: 6 bits: 11110x  index 7: 6 bits: 11111x -44 index 8: 7 bits: 111110x  index 9: 7 bits: 111111x -55 index 10: 8 bits: 1111110x  index 11: 8 bits: 1111111x -66 index 12: 9 bits: 11111110x -7 index 13: 9 bits: 11111111x 7 index 14: 10 bits: 111111111x  index 15: 11 bits: 1111111111x -88 index 16: 12 bits: 11111111110x  index 17: 12 bits: 11111111111x -10 index 18: 13 bits: 111111111110x  index 19: 13 bits: 111111111111x -99 index 20: 14 bits: 1111111111101x 10 index 21: 14 bits: 1111111111110x  index 22: 14 bits: 1111111111111x -13-11 index 23: 15 bits: 11111111111101x 1113 index 24: 15 bits: 11111111111110x  index 25: 15 bits: 11111111111111x -14-12 index 26: 16 bits: 111111111111110x 1214 index 27: 16 bits: 111111111111111x 0 index 0: 1 bits: x -1 index 1: 2 bits: 1x 1 index 2: 3 bits: 11x -2 index 3: 4 bits: 111x 2 index 4: 5 bits: 1111x -3 index 5: 6 bits: 11111x 3 index 6: 7 bits: 111111x -4 index 7: 8 bits: 1111111x 4 index 8: 9 bits: 11111111x  index 9: 10 bits: 111111111x -55 index 10: 11 bits: 1111111110x  index 11: 11 bits: 1111111111x -66 index 12: 12 bits: 11111111110x  index 13: 12 bits: 11111111111x -77 index 14: 13 bits: 111111111110x  index 15: 13 bits: 111111111111x -88 index 16: 14 bits: 1111111111110x  index 17: 14 bits: 1111111111111x -1010 index 18: 15 bits: 11111111111110x  index 19: 15 bits: 11111111111111x -99 index 20: 16 bits: 111111111111110x  index 21: 16 bits: 111111111111111x  index 22: 17 bits: 1111111111111110x  index 23: 17 bits: 1111111111111111x -14-13 index 24: 18 bits: 11111111111111100x -12-11 index 25: 18 bits: 11111111111111101x 1112 index 26: 18 bits: 11111111111111110x 1314 index 27: 18 bits: 11111111111111111x  There are 3 classes in the standard but the last 2 are identical  We don't need the actual quantizer values  2^(pan_quant[x][y]  2^(-pan_quant[x][y]  2^(pan_quant[x][y]/30)  2^(-pan_quant[x][y]/30)  Inverse mapping lookup  Please note that these are the same tables as in plain PS  static variables  static function declarations  binary search huffman decoding   printf(" SAminclip %d", i);    printf(" SAmaxclip %d", i);  printf(" PANminclip %d", i);  printf(" PANmaxclip %d", i);   An error during SA decoding implies PAN data will be undecodable, too  Also, we don't like on/off switching in PS, so we force to last settings  The DRM PS spec doesn't say anything about this case. (deltacoded in time without a previous frame)
   AAC PS spec you must tread previous frame as 0, so that's what we try. 
 set delay indices  NOTE: all input is scaled by 2^(-5) because of fixed point QMF
            * meaning that P will be scaled by 2^(-10) compared to floating point version
             Instead of dequantization and mapping, we use an inverse mapping
           to look up all the values we need  Instead of dequantization, 20->64 mapping and 2^G(x,y) we do an
               inverse mapping 64->20 and look up the 2^G(x,y) values directly  2^((a-b)/30) = 2^(a/30) * 1/(2^(b/30))  a en b can be negative so we may need to inverse parts  PAN always uses all 64 channels  2^(a+k*b) = 2^a * 2^b * ... * 2^b                    ^^^^^^^^^^^^^^^ k times  main DRM PS decoding function  if SBR CRC doesn't match out, we can assume decode errors to start with,
       and we'll guess what the parameters should be  don't even bother decoding 
** FAAD2 - Freeware Advanced Audio (AAC) Decoder including SBR and PS decoding
** Copyright (C) 2003-2004 M. Bakker, Ahead Software AG, http://www.nero.com
**
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
**
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** Any non-GPL usage of this software or parts of this software is strictly
** forbidden.
**
** Commercial non-GPL licensing of this software is possible.
** For more info contact Ahead Software through Mpeg4AAClicense@nero.com.
**
** $Id$
* constants  type definitions  binary search huffman tables 0 index 0: 1 bits:  x  index 1: 2 bits:  1x 7 index 2: 3 bits:  10x  index 3: 3 bits:  11x 1-1 index 4: 4 bits:  101x -2 index 5: 4 bits:  110x  index 6: 4 bits:  111x 2-3 index 7: 5 bits:  1101x 3 index 8: 5 bits:  1110x  index 9: 5 bits:  1111x 45 index 10: 6 bits: 11101x -4-5 index 11: 6 bits: 11110x 6 index 12: 6 bits: 11111x -7-6 index 13: 7 bits: 111111x 0 index 0: 1 bits: x  index 1: 2 bits: 1x -11 index 2: 3 bits: 10x  index 3: 3 bits: 11x -22 index 4: 4 bits: 110x  index 5: 4 bits: 111x -33 index 6: 5 bits: 1110x  index 7: 5 bits: 1111x -44 index 8: 6 bits: 11110x  index 9: 6 bits: 11111x -55 index 10: 7 bits: 111110x -6 index 11: 7 bits: 111111x -7 index 12: 8 bits: 1111111x 67 index 13: 9 bits: 11111111x 0 index 0: 1 bits: x -1 index 1: 2 bits: 1x 1 index 2: 3 bits: 11x  index 3: 4 bits: 111x -22 index 4: 5 bits: 1110x  index 5: 5 bits: 1111x -33 index 6: 6 bits: 11110x  index 7: 6 bits: 11111x -44 index 8: 7 bits: 111110x  index 9: 7 bits: 111111x -55 index 10: 8 bits: 1111110x  index 11: 8 bits: 1111111x -66 index 12: 9 bits: 11111110x -7 index 13: 9 bits: 11111111x 7 index 14: 10 bits: 111111111x  index 15: 11 bits: 1111111111x -88 index 16: 12 bits: 11111111110x  index 17: 12 bits: 11111111111x -10 index 18: 13 bits: 111111111110x  index 19: 13 bits: 111111111111x -99 index 20: 14 bits: 1111111111101x 10 index 21: 14 bits: 1111111111110x  index 22: 14 bits: 1111111111111x -13-11 index 23: 15 bits: 11111111111101x 1113 index 24: 15 bits: 11111111111110x  index 25: 15 bits: 11111111111111x -14-12 index 26: 16 bits: 111111111111110x 1214 index 27: 16 bits: 111111111111111x 0 index 0: 1 bits: x -1 index 1: 2 bits: 1x 1 index 2: 3 bits: 11x -2 index 3: 4 bits: 111x 2 index 4: 5 bits: 1111x -3 index 5: 6 bits: 11111x 3 index 6: 7 bits: 111111x -4 index 7: 8 bits: 1111111x 4 index 8: 9 bits: 11111111x  index 9: 10 bits: 111111111x -55 index 10: 11 bits: 1111111110x  index 11: 11 bits: 1111111111x -66 index 12: 12 bits: 11111111110x  index 13: 12 bits: 11111111111x -77 index 14: 13 bits: 111111111110x  index 15: 13 bits: 111111111111x -88 index 16: 14 bits: 1111111111110x  index 17: 14 bits: 1111111111111x -1010 index 18: 15 bits: 11111111111110x  index 19: 15 bits: 11111111111111x -99 index 20: 16 bits: 111111111111110x  index 21: 16 bits: 111111111111111x  index 22: 17 bits: 1111111111111110x  index 23: 17 bits: 1111111111111111x -14-13 index 24: 18 bits: 11111111111111100x -12-11 index 25: 18 bits: 11111111111111101x 1112 index 26: 18 bits: 11111111111111110x 1314 index 27: 18 bits: 11111111111111111x  There are 3 classes in the standard but the last 2 are identical  We don't need the actual quantizer values  2^(pan_quant[x][y]  2^(-pan_quant[x][y]  2^(pan_quant[x][y]/30)  2^(-pan_quant[x][y]/30)  Inverse mapping lookup  Please note that these are the same tables as in plain PS  static variables  static function declarations  binary search huffman decoding   printf(" SAminclip %d", i);    printf(" SAmaxclip %d", i);  printf(" PANminclip %d", i);  printf(" PANmaxclip %d", i);   An error during SA decoding implies PAN data will be undecodable, too  Also, we don't like on/off switching in PS, so we force to last settings  The DRM PS spec doesn't say anything about this case. (deltacoded in time without a previous frame)
   AAC PS spec you must tread previous frame as 0, so that's what we try. 
 set delay indices  NOTE: all input is scaled by 2^(-5) because of fixed point QMF
            * meaning that P will be scaled by 2^(-10) compared to floating point version
             Instead of dequantization and mapping, we use an inverse mapping
           to look up all the values we need  Instead of dequantization, 20->64 mapping and 2^G(x,y) we do an
               inverse mapping 64->20 and look up the 2^G(x,y) values directly  2^((a-b)/30) = 2^(a/30) * 1/(2^(b/30))  a en b can be negative so we may need to inverse parts  PAN always uses all 64 channels  2^(a+k*b) = 2^a * 2^b * ... * 2^b                    ^^^^^^^^^^^^^^^ k times  main DRM PS decoding function  if SBR CRC doesn't match out, we can assume decode errors to start with,
       and we'll guess what the parameters should be  don't even bother decoding 