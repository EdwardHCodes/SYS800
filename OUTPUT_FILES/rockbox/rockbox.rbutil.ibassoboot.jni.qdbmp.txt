 Bitmap header  Magic identifier: "BM"  Size of the BMP file in bytes  Reserved  Reserved  Offset of image data relative to the file's start  Size of the header in bytes  Bitmap's width  Bitmap's height  Number of color planes in the bitmap  Number of bits per pixel  Compression type  Size of uncompressed image's data  Horizontal resolution (pixels per meter)  Vertical resolution (pixels per meter)  Number of color indexes in the color table that are actually used by the bitmap  Number of color indexes that are required for displaying the bitmap  Private data structure  Holds the last error code  Error description strings  Size of the palette data for 8 BPP bitmaps ********************************** Forward declarations ******************************************************************* Public methods **********************************************************************************************
	Creates a blank BMP image with the specified dimensions
	and bit depth.
************************************************************* Allocate the bitmap data structure  Set header' default values  Calculate the number of bytes used to store a single image row. This is always
	rounded up to the next multiple of 4.  Set header's image specific values  Allocate palette  Allocate pixels *************************************************************
	Frees all the memory used by the specified BMP image.
**************************************************************************************************************************
	Reads the specified BMP image file.
************************************************************* Allocate  Open file  Read header  Verify that the bitmap variant is supported  Allocate and read palette  Not an indexed image  Allocate memory for image data  Read image data *************************************************************
	Writes the BMP image to the specified file.
************************************************************* Open file  Write header  Write palette  Write data *************************************************************
	Returns the image's width.
**************************************************************************************************************************
	Returns the image's height.
**************************************************************************************************************************
	Returns the image's color depth (bits per pixel).
**************************************************************************************************************************
	Populates the arguments with the specified pixel's RGB
	values.
************************************************************* Row's size is rounded up to the next multiple of 4 bytes  Calculate the location of the relevant pixel (rows are flipped)  In indexed color mode the pixel's value is an index within the palette  Note: colors are stored in BGR order *************************************************************
	Sets the specified pixel's RGB values.
************************************************************* Row's size is rounded up to the next multiple of 4 bytes  Calculate the location of the relevant pixel (rows are flipped)  Note: colors are stored in BGR order *************************************************************
	Gets the specified pixel's color index.
************************************************************* Row's size is rounded up to the next multiple of 4 bytes  Calculate the location of the relevant pixel *************************************************************
	Sets the specified pixel's color index.
************************************************************* Row's size is rounded up to the next multiple of 4 bytes  Calculate the location of the relevant pixel *************************************************************
	Gets the color value for the specified palette index.
**************************************************************************************************************************
	Sets the color value for the specified palette index.
**************************************************************************************************************************
	Returns the last error code.
**************************************************************************************************************************
	Returns a description of the last error code.
*********************************************************************************************** Private methods **********************************************************************************************
	Reads the BMP file's header into the data structure.
	Returns BMP_OK on success.
************************************************************* The header's fields are read one by one, and converted from the format's
	little endian to the system's native representation. *************************************************************
	Writes the BMP file's header into the data structure.
	Returns BMP_OK on success.
************************************************************* The header's fields are written one by one, and converted to the format's
	little endian representation. *************************************************************
	Reads a little-endian unsigned int from the file.
	Returns non-zero on success.
************************************************************* BMPs use 32 bit ints *************************************************************
	Reads a little-endian unsigned short int from the file.
	Returns non-zero on success.
************************************************************* BMPs use 16 bit shorts *************************************************************
	Writes a little-endian unsigned int to the file.
	Returns non-zero on success.
************************************************************* BMPs use 32 bit ints *************************************************************
	Writes a little-endian unsigned short int to the file.
	Returns non-zero on success.
************************************************************* BMPs use 16 bit shorts  Bitmap header  Magic identifier: "BM"  Size of the BMP file in bytes  Reserved  Reserved  Offset of image data relative to the file's start  Size of the header in bytes  Bitmap's width  Bitmap's height  Number of color planes in the bitmap  Number of bits per pixel  Compression type  Size of uncompressed image's data  Horizontal resolution (pixels per meter)  Vertical resolution (pixels per meter)  Number of color indexes in the color table that are actually used by the bitmap  Number of color indexes that are required for displaying the bitmap  Private data structure  Holds the last error code  Error description strings  Size of the palette data for 8 BPP bitmaps ********************************** Forward declarations ******************************************************************* Public methods **********************************************************************************************
	Creates a blank BMP image with the specified dimensions
	and bit depth.
************************************************************* Allocate the bitmap data structure  Set header' default values  Calculate the number of bytes used to store a single image row. This is always
	rounded up to the next multiple of 4.  Set header's image specific values  Allocate palette  Allocate pixels *************************************************************
	Frees all the memory used by the specified BMP image.
**************************************************************************************************************************
	Reads the specified BMP image file.
************************************************************* Allocate  Open file  Read header  Verify that the bitmap variant is supported  Allocate and read palette  Not an indexed image  Allocate memory for image data  Read image data *************************************************************
	Writes the BMP image to the specified file.
************************************************************* Open file  Write header  Write palette  Write data *************************************************************
	Returns the image's width.
**************************************************************************************************************************
	Returns the image's height.
**************************************************************************************************************************
	Returns the image's color depth (bits per pixel).
**************************************************************************************************************************
	Populates the arguments with the specified pixel's RGB
	values.
************************************************************* Row's size is rounded up to the next multiple of 4 bytes  Calculate the location of the relevant pixel (rows are flipped)  In indexed color mode the pixel's value is an index within the palette  Note: colors are stored in BGR order *************************************************************
	Sets the specified pixel's RGB values.
************************************************************* Row's size is rounded up to the next multiple of 4 bytes  Calculate the location of the relevant pixel (rows are flipped)  Note: colors are stored in BGR order *************************************************************
	Gets the specified pixel's color index.
************************************************************* Row's size is rounded up to the next multiple of 4 bytes  Calculate the location of the relevant pixel *************************************************************
	Sets the specified pixel's color index.
************************************************************* Row's size is rounded up to the next multiple of 4 bytes  Calculate the location of the relevant pixel *************************************************************
	Gets the color value for the specified palette index.
**************************************************************************************************************************
	Sets the color value for the specified palette index.
**************************************************************************************************************************
	Returns the last error code.
**************************************************************************************************************************
	Returns a description of the last error code.
*********************************************************************************************** Private methods **********************************************************************************************
	Reads the BMP file's header into the data structure.
	Returns BMP_OK on success.
************************************************************* The header's fields are read one by one, and converted from the format's
	little endian to the system's native representation. *************************************************************
	Writes the BMP file's header into the data structure.
	Returns BMP_OK on success.
************************************************************* The header's fields are written one by one, and converted to the format's
	little endian representation. *************************************************************
	Reads a little-endian unsigned int from the file.
	Returns non-zero on success.
************************************************************* BMPs use 32 bit ints *************************************************************
	Reads a little-endian unsigned short int from the file.
	Returns non-zero on success.
************************************************************* BMPs use 16 bit shorts *************************************************************
	Writes a little-endian unsigned int to the file.
	Returns non-zero on success.
************************************************************* BMPs use 32 bit ints *************************************************************
	Writes a little-endian unsigned short int to the file.
	Returns non-zero on success.
************************************************************* BMPs use 16 bit shorts  Bitmap header  Magic identifier: "BM"  Size of the BMP file in bytes  Reserved  Reserved  Offset of image data relative to the file's start  Size of the header in bytes  Bitmap's width  Bitmap's height  Number of color planes in the bitmap  Number of bits per pixel  Compression type  Size of uncompressed image's data  Horizontal resolution (pixels per meter)  Vertical resolution (pixels per meter)  Number of color indexes in the color table that are actually used by the bitmap  Number of color indexes that are required for displaying the bitmap  Private data structure  Holds the last error code  Error description strings  Size of the palette data for 8 BPP bitmaps ********************************** Forward declarations ******************************************************************* Public methods **********************************************************************************************
	Creates a blank BMP image with the specified dimensions
	and bit depth.
************************************************************* Allocate the bitmap data structure  Set header' default values  Calculate the number of bytes used to store a single image row. This is always
	rounded up to the next multiple of 4.  Set header's image specific values  Allocate palette  Allocate pixels *************************************************************
	Frees all the memory used by the specified BMP image.
**************************************************************************************************************************
	Reads the specified BMP image file.
************************************************************* Allocate  Open file  Read header  Verify that the bitmap variant is supported  Allocate and read palette  Not an indexed image  Allocate memory for image data  Read image data *************************************************************
	Writes the BMP image to the specified file.
************************************************************* Open file  Write header  Write palette  Write data *************************************************************
	Returns the image's width.
**************************************************************************************************************************
	Returns the image's height.
**************************************************************************************************************************
	Returns the image's color depth (bits per pixel).
**************************************************************************************************************************
	Populates the arguments with the specified pixel's RGB
	values.
************************************************************* Row's size is rounded up to the next multiple of 4 bytes  Calculate the location of the relevant pixel (rows are flipped)  In indexed color mode the pixel's value is an index within the palette  Note: colors are stored in BGR order *************************************************************
	Sets the specified pixel's RGB values.
************************************************************* Row's size is rounded up to the next multiple of 4 bytes  Calculate the location of the relevant pixel (rows are flipped)  Note: colors are stored in BGR order *************************************************************
	Gets the specified pixel's color index.
************************************************************* Row's size is rounded up to the next multiple of 4 bytes  Calculate the location of the relevant pixel *************************************************************
	Sets the specified pixel's color index.
************************************************************* Row's size is rounded up to the next multiple of 4 bytes  Calculate the location of the relevant pixel *************************************************************
	Gets the color value for the specified palette index.
**************************************************************************************************************************
	Sets the color value for the specified palette index.
**************************************************************************************************************************
	Returns the last error code.
**************************************************************************************************************************
	Returns a description of the last error code.
*********************************************************************************************** Private methods **********************************************************************************************
	Reads the BMP file's header into the data structure.
	Returns BMP_OK on success.
************************************************************* The header's fields are read one by one, and converted from the format's
	little endian to the system's native representation. *************************************************************
	Writes the BMP file's header into the data structure.
	Returns BMP_OK on success.
************************************************************* The header's fields are written one by one, and converted to the format's
	little endian representation. *************************************************************
	Reads a little-endian unsigned int from the file.
	Returns non-zero on success.
************************************************************* BMPs use 32 bit ints *************************************************************
	Reads a little-endian unsigned short int from the file.
	Returns non-zero on success.
************************************************************* BMPs use 16 bit shorts *************************************************************
	Writes a little-endian unsigned int to the file.
	Returns non-zero on success.
************************************************************* BMPs use 32 bit ints *************************************************************
	Writes a little-endian unsigned short int to the file.
	Returns non-zero on success.
************************************************************* BMPs use 16 bit shorts 