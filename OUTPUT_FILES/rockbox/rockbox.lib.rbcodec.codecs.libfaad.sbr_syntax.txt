
** FAAD2 - Freeware Advanced Audio (AAC) Decoder including SBR decoding
** Copyright (C) 2003-2004 M. Bakker, Ahead Software AG, http://www.nero.com
**  
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
** 
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
** 
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software 
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** Any non-GPL usage of this software or parts of this software is strictly
** forbidden.
**
** Commercial non-GPL licensing of this software is possible.
** For more info contact Ahead Software through Mpeg4AAClicense@nero.com.
**
** $Id$
* static function declarations  if these are different from the previous frame: Reset = 1  calculate the Master Frequency Table  check k0 and k2  (sbr->sample_rate == 44100)  table 2  save old header values, in case the new ones are corrupted  Reset?  first frame should have a header if (!(sbr->frame == 0 && sbr->bs_header_flag == 0)) if an error occured with the new header values revert to the old ones  sbr_data() returning an error means that there was an error in
               envelope_time_border_vector().
               In this case the old time border vector is saved and all the previous
               data normally read after sbr_grid() is saved.
             to be on the safe side, calculate old sbr tables in case of error  we should be able to safely set result to 0 now  check if we read more bits then were available for sbr  -4 does not apply, bs_extension_type is re-read in this function - 4 table 3  bs_start_freq and bs_stop_freq must define a fequency band that does
       not exceed 48 channels  Default values  Default values  print the header to screen  table 4  table 5  bs_coupling, from sbr_channel_pair_base_element(bs_amp_res)  allow only 1 PS extension element per extension data  to be safe make it 3, will switch to "default"
                     * in sbr_extension()  check if the data read is bigger than the number of available bits  Corrigendum  table 6  need to copy some data from left to right  more copying  restore first channel data as well  check if the data read is bigger than the number of available bits  Corrigendum  integer log[2](x): input range [0,10)  table 7  TODO: this code can probably be integrated into the code above!  table 8  table 9  enable PS if and only if: a header has been decoded  table 12  SBR_DEC 
** FAAD2 - Freeware Advanced Audio (AAC) Decoder including SBR decoding
** Copyright (C) 2003-2004 M. Bakker, Ahead Software AG, http://www.nero.com
**  
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
** 
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
** 
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software 
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** Any non-GPL usage of this software or parts of this software is strictly
** forbidden.
**
** Commercial non-GPL licensing of this software is possible.
** For more info contact Ahead Software through Mpeg4AAClicense@nero.com.
**
** $Id$
* static function declarations  if these are different from the previous frame: Reset = 1  calculate the Master Frequency Table  check k0 and k2  (sbr->sample_rate == 44100)  table 2  save old header values, in case the new ones are corrupted  Reset?  first frame should have a header if (!(sbr->frame == 0 && sbr->bs_header_flag == 0)) if an error occured with the new header values revert to the old ones  sbr_data() returning an error means that there was an error in
               envelope_time_border_vector().
               In this case the old time border vector is saved and all the previous
               data normally read after sbr_grid() is saved.
             to be on the safe side, calculate old sbr tables in case of error  we should be able to safely set result to 0 now  check if we read more bits then were available for sbr  -4 does not apply, bs_extension_type is re-read in this function - 4 table 3  bs_start_freq and bs_stop_freq must define a fequency band that does
       not exceed 48 channels  Default values  Default values  print the header to screen  table 4  table 5  bs_coupling, from sbr_channel_pair_base_element(bs_amp_res)  allow only 1 PS extension element per extension data  to be safe make it 3, will switch to "default"
                     * in sbr_extension()  check if the data read is bigger than the number of available bits  Corrigendum  table 6  need to copy some data from left to right  more copying  restore first channel data as well  check if the data read is bigger than the number of available bits  Corrigendum  integer log[2](x): input range [0,10)  table 7  TODO: this code can probably be integrated into the code above!  table 8  table 9  enable PS if and only if: a header has been decoded  table 12  SBR_DEC 
** FAAD2 - Freeware Advanced Audio (AAC) Decoder including SBR decoding
** Copyright (C) 2003-2004 M. Bakker, Ahead Software AG, http://www.nero.com
**  
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
** 
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
** 
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software 
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** Any non-GPL usage of this software or parts of this software is strictly
** forbidden.
**
** Commercial non-GPL licensing of this software is possible.
** For more info contact Ahead Software through Mpeg4AAClicense@nero.com.
**
** $Id$
* static function declarations  if these are different from the previous frame: Reset = 1  calculate the Master Frequency Table  check k0 and k2  (sbr->sample_rate == 44100)  table 2  save old header values, in case the new ones are corrupted  Reset?  first frame should have a header if (!(sbr->frame == 0 && sbr->bs_header_flag == 0)) if an error occured with the new header values revert to the old ones  sbr_data() returning an error means that there was an error in
               envelope_time_border_vector().
               In this case the old time border vector is saved and all the previous
               data normally read after sbr_grid() is saved.
             to be on the safe side, calculate old sbr tables in case of error  we should be able to safely set result to 0 now  check if we read more bits then were available for sbr  -4 does not apply, bs_extension_type is re-read in this function - 4 table 3  bs_start_freq and bs_stop_freq must define a fequency band that does
       not exceed 48 channels  Default values  Default values  print the header to screen  table 4  table 5  bs_coupling, from sbr_channel_pair_base_element(bs_amp_res)  allow only 1 PS extension element per extension data  to be safe make it 3, will switch to "default"
                     * in sbr_extension()  check if the data read is bigger than the number of available bits  Corrigendum  table 6  need to copy some data from left to right  more copying  restore first channel data as well  check if the data read is bigger than the number of available bits  Corrigendum  integer log[2](x): input range [0,10)  table 7  TODO: this code can probably be integrated into the code above!  table 8  table 9  enable PS if and only if: a header has been decoded  table 12  SBR_DEC 