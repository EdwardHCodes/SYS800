***************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2007 Michael Giacomelli
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
    Not performance senstitive code here

 0.607252929  Table of values of atan(2^-i) in 0.32 format fractions of pi where pi = 0xffffffff / 2  +0.785398163 (or pi/4)  +0.463647609  +0.244978663  +0.124354995  +0.062418810  +0.031239833  +0.015623729  +0.007812341  +0.003906230  +0.001953123  +0.000976562  +0.000488281  +0.000244141  +0.000122070  +0.000061035  +0.000030518  +0.000015259  +0.000007629  +0.000003815  +0.000001907  +0.000000954  +0.000000477  +0.000000238  +0.000000119  +0.000000060  +0.000000030  +0.000000015  +0.000000007  +0.000000004  +0.000000002  +0.000000001  +0.000000000 *     
  * Implements sin and cos using CORDIC rotation.    
  *  
  * @param phase has range from 0 to 0xffffffff, representing 0 and  
  *        2*pi respectively.    
  * @param cos return address for cos    
  * @return sin of phase, value is a signed value from LONG_MIN to LONG_MAX,     
  *         representing -1 and 1 respectively.  
  *  
  *        Gives at least 24 bits precision (last 2-8 bits or so are probably off)   
   Setup initial vector  The phase has to be somewhere between 0..pi for this to work right  z in first quadrant, z += pi/2 to correct  z in third quadrant, z -= pi/2 to correct  z in fourth quadrant, z -= 3pi/2 to correct  Each iteration adds roughly 1-bit of extra precision  Decided which direction to rotate vector. Pivot point is pi/2 ***************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2007 Michael Giacomelli
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
    Not performance senstitive code here

 0.607252929  Table of values of atan(2^-i) in 0.32 format fractions of pi where pi = 0xffffffff / 2  +0.785398163 (or pi/4)  +0.463647609  +0.244978663  +0.124354995  +0.062418810  +0.031239833  +0.015623729  +0.007812341  +0.003906230  +0.001953123  +0.000976562  +0.000488281  +0.000244141  +0.000122070  +0.000061035  +0.000030518  +0.000015259  +0.000007629  +0.000003815  +0.000001907  +0.000000954  +0.000000477  +0.000000238  +0.000000119  +0.000000060  +0.000000030  +0.000000015  +0.000000007  +0.000000004  +0.000000002  +0.000000001  +0.000000000 *     
  * Implements sin and cos using CORDIC rotation.    
  *  
  * @param phase has range from 0 to 0xffffffff, representing 0 and  
  *        2*pi respectively.    
  * @param cos return address for cos    
  * @return sin of phase, value is a signed value from LONG_MIN to LONG_MAX,     
  *         representing -1 and 1 respectively.  
  *  
  *        Gives at least 24 bits precision (last 2-8 bits or so are probably off)   
   Setup initial vector  The phase has to be somewhere between 0..pi for this to work right  z in first quadrant, z += pi/2 to correct  z in third quadrant, z -= pi/2 to correct  z in fourth quadrant, z -= 3pi/2 to correct  Each iteration adds roughly 1-bit of extra precision  Decided which direction to rotate vector. Pivot point is pi/2 ***************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2007 Michael Giacomelli
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
    Not performance senstitive code here

 0.607252929  Table of values of atan(2^-i) in 0.32 format fractions of pi where pi = 0xffffffff / 2  +0.785398163 (or pi/4)  +0.463647609  +0.244978663  +0.124354995  +0.062418810  +0.031239833  +0.015623729  +0.007812341  +0.003906230  +0.001953123  +0.000976562  +0.000488281  +0.000244141  +0.000122070  +0.000061035  +0.000030518  +0.000015259  +0.000007629  +0.000003815  +0.000001907  +0.000000954  +0.000000477  +0.000000238  +0.000000119  +0.000000060  +0.000000030  +0.000000015  +0.000000007  +0.000000004  +0.000000002  +0.000000001  +0.000000000 *     
  * Implements sin and cos using CORDIC rotation.    
  *  
  * @param phase has range from 0 to 0xffffffff, representing 0 and  
  *        2*pi respectively.    
  * @param cos return address for cos    
  * @return sin of phase, value is a signed value from LONG_MIN to LONG_MAX,     
  *         representing -1 and 1 respectively.  
  *  
  *        Gives at least 24 bits precision (last 2-8 bits or so are probably off)   
   Setup initial vector  The phase has to be somewhere between 0..pi for this to work right  z in first quadrant, z += pi/2 to correct  z in third quadrant, z -= pi/2 to correct  z in fourth quadrant, z -= 3pi/2 to correct  Each iteration adds roughly 1-bit of extra precision  Decided which direction to rotate vector. Pivot point is pi/2 