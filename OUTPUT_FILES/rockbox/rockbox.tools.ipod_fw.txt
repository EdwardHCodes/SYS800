
 * make_fw.c - iPodLinux loader installer
 * 
 * Copyright (C) 2003 Daniel Palffy
 *
 * based on Bernard Leach's patch_fw.c
 * Copyright (C) 2002 Bernard Leach
 * big endian support added 2003 Steven Lucy
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
  Some firmwares have padding becore the actual image.   ''   0000 0000  byte offset of start of image code  length in bytes of image  load address  execution start within image  checksum for image  image version  load address for image  read len bytes from the beginning of s, 
 * calculate checksum, and 
 * if (d) copy to current offset in d  load the boot entry from 
 * boot table at offset, 
 * entry number entry
 * file fw  If we find an "osos" image with devOffset 0x4800, we have 2048-byte
       sectors.  This isn't 100% future-proof, but works as of December 2006.
       We display this information so users can spot any false-positives that
       may occur in the future (although this is unlikely).  store the boot entry to
 * boot table at offset, 
 * entry number entry
 * file fw  extract a single image from the fw 
 * the first 40 bytes contain a boot table entry, 
 * padded to one block (512 bytes  We need to detect sector size, so always load image 0 directory
       entry first  Now read the real image (if it isn't 0)  list all images  return the size of f  magic id pad devOffset len addr entry chksum vers loadAddr parse options  just list all available entries magic  magic  magic  magic 
 * make_fw.c - iPodLinux loader installer
 * 
 * Copyright (C) 2003 Daniel Palffy
 *
 * based on Bernard Leach's patch_fw.c
 * Copyright (C) 2002 Bernard Leach
 * big endian support added 2003 Steven Lucy
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
  Some firmwares have padding becore the actual image.   ''   0000 0000  byte offset of start of image code  length in bytes of image  load address  execution start within image  checksum for image  image version  load address for image  read len bytes from the beginning of s, 
 * calculate checksum, and 
 * if (d) copy to current offset in d  load the boot entry from 
 * boot table at offset, 
 * entry number entry
 * file fw  If we find an "osos" image with devOffset 0x4800, we have 2048-byte
       sectors.  This isn't 100% future-proof, but works as of December 2006.
       We display this information so users can spot any false-positives that
       may occur in the future (although this is unlikely).  store the boot entry to
 * boot table at offset, 
 * entry number entry
 * file fw  extract a single image from the fw 
 * the first 40 bytes contain a boot table entry, 
 * padded to one block (512 bytes  We need to detect sector size, so always load image 0 directory
       entry first  Now read the real image (if it isn't 0)  list all images  return the size of f  magic id pad devOffset len addr entry chksum vers loadAddr parse options  just list all available entries magic  magic  magic  magic 
 * make_fw.c - iPodLinux loader installer
 * 
 * Copyright (C) 2003 Daniel Palffy
 *
 * based on Bernard Leach's patch_fw.c
 * Copyright (C) 2002 Bernard Leach
 * big endian support added 2003 Steven Lucy
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
  Some firmwares have padding becore the actual image.   ''   0000 0000  byte offset of start of image code  length in bytes of image  load address  execution start within image  checksum for image  image version  load address for image  read len bytes from the beginning of s, 
 * calculate checksum, and 
 * if (d) copy to current offset in d  load the boot entry from 
 * boot table at offset, 
 * entry number entry
 * file fw  If we find an "osos" image with devOffset 0x4800, we have 2048-byte
       sectors.  This isn't 100% future-proof, but works as of December 2006.
       We display this information so users can spot any false-positives that
       may occur in the future (although this is unlikely).  store the boot entry to
 * boot table at offset, 
 * entry number entry
 * file fw  extract a single image from the fw 
 * the first 40 bytes contain a boot table entry, 
 * padded to one block (512 bytes  We need to detect sector size, so always load image 0 directory
       entry first  Now read the real image (if it isn't 0)  list all images  return the size of f  magic id pad devOffset len addr entry chksum vers loadAddr parse options  just list all available entries magic  magic  magic  magic 