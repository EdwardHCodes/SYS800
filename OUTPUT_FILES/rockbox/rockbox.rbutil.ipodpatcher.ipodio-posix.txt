**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006-2007 Dave Chapman
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** all non-Windows platforms are considered POSIX.  never use geometry.cylinders - it is truncated  Linux SCSI Inquiry code based on the documentation and example code from
   http://www.ibm.com/developerworks/linux/library/l-scsi-api/index.html
 this is the only choice we have!  this would put the LUN to 2nd byte of cdb Set xfer data  Set sense data  Set the cdb format  Enable Vital Product Data (EVPD)  For control filed, just use 0  TODO: Implement this function for BSD  Are these universal for all ipods?  TODO: Implement for BSD  OS X IOKit includes don't like VERSION being defined!  TODO: Implement this function for Mac OS X  Are these universal for all ipods?  OS X doesn't allow to simply send out a SCSI inquiry request but
     * requires registering an interface handler first.
     * Currently this is done on each inquiry request which is somewhat
     * inefficient but the current ipodpatcher API doesn't really fit here.
     * Based on the documentation in Apple's document
     * "SCSI Architecture Model Device Interface Guide".
     *
     * WARNING: this code currently doesn't take the selected device into
     *          account. It simply looks for an Ipod on the system and uses
     *          the first match.
      first, create a dictionary to match the device. This is needed to get the
     * service.  set value to match. In case of the Ipod this is "iPodUserClientDevice".  get an iterator for searching for the service.  get matching services from IO registry. Consumes one reference to
     * the dictionary, so no need to release that.  get interface and obtain exclusive access  query the plugin interface for task interface  do the inquiry  allocate virtual range for buffer.  set up range. address is buffer address, length is request size.  setup CDB  inquiry  set cdb in task  set timeout  request data  cleanup  release task interface  cleanup interface  Read information about the disk **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006-2007 Dave Chapman
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** all non-Windows platforms are considered POSIX.  never use geometry.cylinders - it is truncated  Linux SCSI Inquiry code based on the documentation and example code from
   http://www.ibm.com/developerworks/linux/library/l-scsi-api/index.html
 this is the only choice we have!  this would put the LUN to 2nd byte of cdb Set xfer data  Set sense data  Set the cdb format  Enable Vital Product Data (EVPD)  For control filed, just use 0  TODO: Implement this function for BSD  Are these universal for all ipods?  TODO: Implement for BSD  OS X IOKit includes don't like VERSION being defined!  TODO: Implement this function for Mac OS X  Are these universal for all ipods?  OS X doesn't allow to simply send out a SCSI inquiry request but
     * requires registering an interface handler first.
     * Currently this is done on each inquiry request which is somewhat
     * inefficient but the current ipodpatcher API doesn't really fit here.
     * Based on the documentation in Apple's document
     * "SCSI Architecture Model Device Interface Guide".
     *
     * WARNING: this code currently doesn't take the selected device into
     *          account. It simply looks for an Ipod on the system and uses
     *          the first match.
      first, create a dictionary to match the device. This is needed to get the
     * service.  set value to match. In case of the Ipod this is "iPodUserClientDevice".  get an iterator for searching for the service.  get matching services from IO registry. Consumes one reference to
     * the dictionary, so no need to release that.  get interface and obtain exclusive access  query the plugin interface for task interface  do the inquiry  allocate virtual range for buffer.  set up range. address is buffer address, length is request size.  setup CDB  inquiry  set cdb in task  set timeout  request data  cleanup  release task interface  cleanup interface  Read information about the disk **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006-2007 Dave Chapman
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** all non-Windows platforms are considered POSIX.  never use geometry.cylinders - it is truncated  Linux SCSI Inquiry code based on the documentation and example code from
   http://www.ibm.com/developerworks/linux/library/l-scsi-api/index.html
 this is the only choice we have!  this would put the LUN to 2nd byte of cdb Set xfer data  Set sense data  Set the cdb format  Enable Vital Product Data (EVPD)  For control filed, just use 0  TODO: Implement this function for BSD  Are these universal for all ipods?  TODO: Implement for BSD  OS X IOKit includes don't like VERSION being defined!  TODO: Implement this function for Mac OS X  Are these universal for all ipods?  OS X doesn't allow to simply send out a SCSI inquiry request but
     * requires registering an interface handler first.
     * Currently this is done on each inquiry request which is somewhat
     * inefficient but the current ipodpatcher API doesn't really fit here.
     * Based on the documentation in Apple's document
     * "SCSI Architecture Model Device Interface Guide".
     *
     * WARNING: this code currently doesn't take the selected device into
     *          account. It simply looks for an Ipod on the system and uses
     *          the first match.
      first, create a dictionary to match the device. This is needed to get the
     * service.  set value to match. In case of the Ipod this is "iPodUserClientDevice".  get an iterator for searching for the service.  get matching services from IO registry. Consumes one reference to
     * the dictionary, so no need to release that.  get interface and obtain exclusive access  query the plugin interface for task interface  do the inquiry  allocate virtual range for buffer.  set up range. address is buffer address, length is request size.  setup CDB  inquiry  set cdb in task  set timeout  request data  cleanup  release task interface  cleanup interface  Read information about the disk 