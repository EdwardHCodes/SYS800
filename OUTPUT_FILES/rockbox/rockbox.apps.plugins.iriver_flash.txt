**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * !!! DON'T MESS WITH THIS CODE UNLESS YOU'RE ABSOLUTELY SURE WHAT YOU DO !!!
 * 
 * Copyright (C) 2006 by Miika Pekkarinen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** All CFI flash routines are copied and ported from firmware_flash.c  Flash base address  read the manufacturer and device ID  read values before switching to ID mode  read values when in ID mode  down to 512k align  read the normal content  should be 'A' (0x41) and 'R' (0x52)   from the "ARCH" marker  enter command mode  ID command  Atmel wants 20ms pause here  reset flash (back to normal read mode)  Atmel wants 20ms pause here  I assume success if the obtained values are different from
    the normal flash content. This is not perfectly bulletproof, they 
    could theoretically be the same by chance, causing us to fail.  a value has changed  return the results  success  fail  erase the sector which contains the given address  the timeout loop should be no less than 25ms  enter command mode  erase command  enter command mode  erase the sector  I counted 7 instructions for this loop -> min. 0.58 us per round  Plus memory waitstates it will be much more, gives margin  poll for erased  address must be in an erased location  the timeout loop should be no less than 20us  just a safety feature, not really necessary  can't set any bit from 0 to 1  enter command mode  byte program command  I counted 7 instructions for this loop -> min. 0.58 us per round  Plus memory waitstates it will be much more, gives margin  poll for programmed  this returns true if supported and fills the info struct  SST  256k  512k  2 MiB **************** User Interface Functions **************** helper for DoUserDialog()  no valid chip  exit  Verify the checksum  Size-8   CRC32  Iriver H120/H140 checksums  7-pre3, improved failsafe functions  7-pre4. Fixed audio thump & remote bootup  7-pre4  Try to scan through all valid bootloaders.  Check if image relocation seems to be sane.  Erase the program flash.  Additional safety check.  Write the magic and size.  rb->strncpy(hdr.version, rb->rbversion , sizeof(hdr.version)-1); Verify  Erase the magic sector so bootloader does not try to load
         * rockbox from flash and crash.  Verify the crc32 checksum also.  Backup the bootloader sector first.  Erase the boot sector and write a proper reset vector.  And restore original content for original FW to function.  Erase the bootloader flash section.  Verify  Erase the boot sector and write back the reset vector.  Erase the program flash.  Verify reset vectors.  Verify  Kind of our main function, defines the application flow.  this can only work if Rockbox runs in DRAM, not flash ROM  4 MB max  we're running from flash  exit  refuse to work if the power may fail meanwhile  exit **************** Plugin Entry Point **************** now go ahead and have fun! disable memory guard  re-enable memory guard **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * !!! DON'T MESS WITH THIS CODE UNLESS YOU'RE ABSOLUTELY SURE WHAT YOU DO !!!
 * 
 * Copyright (C) 2006 by Miika Pekkarinen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** All CFI flash routines are copied and ported from firmware_flash.c  Flash base address  read the manufacturer and device ID  read values before switching to ID mode  read values when in ID mode  down to 512k align  read the normal content  should be 'A' (0x41) and 'R' (0x52)   from the "ARCH" marker  enter command mode  ID command  Atmel wants 20ms pause here  reset flash (back to normal read mode)  Atmel wants 20ms pause here  I assume success if the obtained values are different from
    the normal flash content. This is not perfectly bulletproof, they 
    could theoretically be the same by chance, causing us to fail.  a value has changed  return the results  success  fail  erase the sector which contains the given address  the timeout loop should be no less than 25ms  enter command mode  erase command  enter command mode  erase the sector  I counted 7 instructions for this loop -> min. 0.58 us per round  Plus memory waitstates it will be much more, gives margin  poll for erased  address must be in an erased location  the timeout loop should be no less than 20us  just a safety feature, not really necessary  can't set any bit from 0 to 1  enter command mode  byte program command  I counted 7 instructions for this loop -> min. 0.58 us per round  Plus memory waitstates it will be much more, gives margin  poll for programmed  this returns true if supported and fills the info struct  SST  256k  512k  2 MiB **************** User Interface Functions **************** helper for DoUserDialog()  no valid chip  exit  Verify the checksum  Size-8   CRC32  Iriver H120/H140 checksums  7-pre3, improved failsafe functions  7-pre4. Fixed audio thump & remote bootup  7-pre4  Try to scan through all valid bootloaders.  Check if image relocation seems to be sane.  Erase the program flash.  Additional safety check.  Write the magic and size.  rb->strncpy(hdr.version, rb->rbversion , sizeof(hdr.version)-1); Verify  Erase the magic sector so bootloader does not try to load
         * rockbox from flash and crash.  Verify the crc32 checksum also.  Backup the bootloader sector first.  Erase the boot sector and write a proper reset vector.  And restore original content for original FW to function.  Erase the bootloader flash section.  Verify  Erase the boot sector and write back the reset vector.  Erase the program flash.  Verify reset vectors.  Verify  Kind of our main function, defines the application flow.  this can only work if Rockbox runs in DRAM, not flash ROM  4 MB max  we're running from flash  exit  refuse to work if the power may fail meanwhile  exit **************** Plugin Entry Point **************** now go ahead and have fun! disable memory guard  re-enable memory guard **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * !!! DON'T MESS WITH THIS CODE UNLESS YOU'RE ABSOLUTELY SURE WHAT YOU DO !!!
 * 
 * Copyright (C) 2006 by Miika Pekkarinen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** All CFI flash routines are copied and ported from firmware_flash.c  Flash base address  read the manufacturer and device ID  read values before switching to ID mode  read values when in ID mode  down to 512k align  read the normal content  should be 'A' (0x41) and 'R' (0x52)   from the "ARCH" marker  enter command mode  ID command  Atmel wants 20ms pause here  reset flash (back to normal read mode)  Atmel wants 20ms pause here  I assume success if the obtained values are different from
    the normal flash content. This is not perfectly bulletproof, they 
    could theoretically be the same by chance, causing us to fail.  a value has changed  return the results  success  fail  erase the sector which contains the given address  the timeout loop should be no less than 25ms  enter command mode  erase command  enter command mode  erase the sector  I counted 7 instructions for this loop -> min. 0.58 us per round  Plus memory waitstates it will be much more, gives margin  poll for erased  address must be in an erased location  the timeout loop should be no less than 20us  just a safety feature, not really necessary  can't set any bit from 0 to 1  enter command mode  byte program command  I counted 7 instructions for this loop -> min. 0.58 us per round  Plus memory waitstates it will be much more, gives margin  poll for programmed  this returns true if supported and fills the info struct  SST  256k  512k  2 MiB **************** User Interface Functions **************** helper for DoUserDialog()  no valid chip  exit  Verify the checksum  Size-8   CRC32  Iriver H120/H140 checksums  7-pre3, improved failsafe functions  7-pre4. Fixed audio thump & remote bootup  7-pre4  Try to scan through all valid bootloaders.  Check if image relocation seems to be sane.  Erase the program flash.  Additional safety check.  Write the magic and size.  rb->strncpy(hdr.version, rb->rbversion , sizeof(hdr.version)-1); Verify  Erase the magic sector so bootloader does not try to load
         * rockbox from flash and crash.  Verify the crc32 checksum also.  Backup the bootloader sector first.  Erase the boot sector and write a proper reset vector.  And restore original content for original FW to function.  Erase the bootloader flash section.  Verify  Erase the boot sector and write back the reset vector.  Erase the program flash.  Verify reset vectors.  Verify  Kind of our main function, defines the application flow.  this can only work if Rockbox runs in DRAM, not flash ROM  4 MB max  we're running from flash  exit  refuse to work if the power may fail meanwhile  exit **************** Plugin Entry Point **************** now go ahead and have fun! disable memory guard  re-enable memory guard 