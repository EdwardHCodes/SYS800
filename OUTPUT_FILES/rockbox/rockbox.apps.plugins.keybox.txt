**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 Nils Wallménius
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** keep this a multiple of BLOCK_SIZE  should be enough for anyone ;)  The header begins with the unencrypted salt (4 bytes) padded with 4 bytes of
   zeroes. After that comes the encrypted hash of the master password (16 bytes)  always points to the first element in the list  use this to access hashes in different ways, not byte order
   independent but does it matter?  bytes read into the buffer  the following two functions are the reference TEA implementation by
   David Wheeler and Roger Needham taken from 
   http://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm  set up  a key schedule constant  cache key  basic cycle start  end cycle  set up  a key schedule constant  cache key  basic cycle start  end cycle  find the entry before the one to delete  byte swap one block  byte swap one block  find eol  find eol  find eol  reserve space for salt + hash  mark the end of the list  round up to a number divisible by BLOCK_SIZE  Read the existing file **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 Nils Wallménius
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** keep this a multiple of BLOCK_SIZE  should be enough for anyone ;)  The header begins with the unencrypted salt (4 bytes) padded with 4 bytes of
   zeroes. After that comes the encrypted hash of the master password (16 bytes)  always points to the first element in the list  use this to access hashes in different ways, not byte order
   independent but does it matter?  bytes read into the buffer  the following two functions are the reference TEA implementation by
   David Wheeler and Roger Needham taken from 
   http://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm  set up  a key schedule constant  cache key  basic cycle start  end cycle  set up  a key schedule constant  cache key  basic cycle start  end cycle  find the entry before the one to delete  byte swap one block  byte swap one block  find eol  find eol  find eol  reserve space for salt + hash  mark the end of the list  round up to a number divisible by BLOCK_SIZE  Read the existing file **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 Nils Wallménius
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** keep this a multiple of BLOCK_SIZE  should be enough for anyone ;)  The header begins with the unencrypted salt (4 bytes) padded with 4 bytes of
   zeroes. After that comes the encrypted hash of the master password (16 bytes)  always points to the first element in the list  use this to access hashes in different ways, not byte order
   independent but does it matter?  bytes read into the buffer  the following two functions are the reference TEA implementation by
   David Wheeler and Roger Needham taken from 
   http://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm  set up  a key schedule constant  cache key  basic cycle start  end cycle  set up  a key schedule constant  cache key  basic cycle start  end cycle  find the entry before the one to delete  byte swap one block  byte swap one block  find eol  find eol  find eol  reserve space for salt + hash  mark the end of the list  round up to a number divisible by BLOCK_SIZE  Read the existing file 