
 * Copyright (C) 2004  Manuel Novoa III  <mjn3@codepoet.org>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
  July 29, 2004
 *
 * This is a hacked replacement for the 'trx' utility used to create
 * wrt54g .trx firmware files.  It isn't pretty, but it does the job
 * for me.
 *
 * As an extension, you can specify a larger maximum length for the
 * .trx file using '-m'.  It will be rounded up to be a multiple of 4K.
 * NOTE: This space will be malloc()'d.
 *
 * August 16, 2004
 *
 * Sigh... Make it endian-neutral.
 *
 * TODO: Support '-b' option to specify offsets for each file.
 *
 * February 19, 2005 - mbm
 *
 * Add -a (align offset) and -b (absolute offset)
 *
 * March 24, 2010 - markus
 *
 * extend trx header struct for new version
 * assume v1 for as default
 * Add option -2 to allow v2 header
 ******************************************************************** from trxhdr.h  "HDR0"  Do not write TRX header  "HDR0"  Length of file including header  32-bit CRC from flag_version to end of file  0:15 flags, 16:31 version  Offsets of partitions from start of header ******************************************************************** assume v1 header  take care that nothing was written to buf so far  fall through  for TRXv2 set bin-header Flags to 0xFF for CRC calculation like CFE does  save header  set stable and try1-3 to 0xFF  restore TRXv2 bin-header ******************************************************************** The following was grabbed and tweaked from the old snippets collection
 * of public domain C code. *********************************************************************\
|* Demonstration program to compute the 32-bit CRC used as the frame  *|
|* check sequence in ADCCP (ANSI X3.66, also known as FIPS PUB 71     *|
|* and FED-STD-1003, the U.S. versions of CCITT's X.25 link-level     *|
|* protocol).  The 32-bit FCS was added via the Federal Register,     *|
|* 1 June 1982, p.23798.  I presume but don't know for certain that   *|
|* this polynomial is or will be included in CCITT V.41, which        *|
|* defines the 16-bit CRC (often called CRC-CCITT) polynomial.  FIPS  *|
|* PUB 78 says that the 32-bit FCS reduces otherwise undetected       *|
|* errors by a factor of 10^-5 over 16-bit FCS.                       *|
\********************************************************************* Copyright (C) 1986 Gary S. Brown.  You may use this program, or
   code or tables extracted from it, as desired without restriction. First, the polynomial itself and its table of feedback terms.  The   polynomial is                                                        X^32+X^26+X^23+X^22+X^16+X^12+X^11+X^10+X^8+X^7+X^5+X^4+X^2+X^1+X^0  Note that we take it "backwards" and put the highest-order term in   the lowest-order bit.  The X^32 term is "implied"; the LSB is the    X^31 term, etc.  The X^0 term (usually shown as "+1") results in     the MSB being 1.                                                     Note that the usual hardware shift register implementation, which    is what we're using (we're merely optimizing it by doing eight-bit   chunks at a time) shifts bits into the lowest-order term.  In our    implementation, that means shifting towards the right.  Why do we    do it this way?  Because the calculated CRC must be transmitted in   order from highest-order term to lowest-order term.  UARTs transmit  characters in order from LSB to MSB.  By storing the CRC this way,   we hand it to the UART in the order low-byte to high-byte; the UART  sends each low-bit to hight-bit; and the result is transmission bit  by bit from highest- to lowest-order term without requiring any bit  shuffling on our part.  Reception works similarly.                   The feedback terms table consists of 256, 32-bit entries.  Notes:                                                                          1. The table can be generated at runtime if desired; code to do so      is shown later.  It might not be obvious, but the feedback           terms simply represent the results of eight shift/xor opera-         tions for all combinations of data and CRC register values.                                                                            2. The CRC accumulation logic is the same for all CRC polynomials,      be they sixteen or thirty-two bits wide.  You simply choose the      appropriate table.  Alternatively, because the table can be          generated at runtime, you can start by generating the table for      the polynomial in question and use exactly the same "updcrc",        if your application needn't simultaneously handle two CRC            polynomials.  (Note, however, that XMODEM is strange.)                                                                                 3. For 16-bit CRCs, the table entries need be only 16 bits wide;        of course, 32-bit entries work OK if the high 16 bits are zero.                                                                        4. The values must be right-shifted by eight bits by the "updcrc"       logic; the shift must be unsigned (bring in zeroes).  On some        hardware you could probably optimize the shift in assembler by       using byte-swap instructions.                                    CRC polynomial 0xedb88320 
 * Copyright (C) 2004  Manuel Novoa III  <mjn3@codepoet.org>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
  July 29, 2004
 *
 * This is a hacked replacement for the 'trx' utility used to create
 * wrt54g .trx firmware files.  It isn't pretty, but it does the job
 * for me.
 *
 * As an extension, you can specify a larger maximum length for the
 * .trx file using '-m'.  It will be rounded up to be a multiple of 4K.
 * NOTE: This space will be malloc()'d.
 *
 * August 16, 2004
 *
 * Sigh... Make it endian-neutral.
 *
 * TODO: Support '-b' option to specify offsets for each file.
 *
 * February 19, 2005 - mbm
 *
 * Add -a (align offset) and -b (absolute offset)
 *
 * March 24, 2010 - markus
 *
 * extend trx header struct for new version
 * assume v1 for as default
 * Add option -2 to allow v2 header
 ******************************************************************** from trxhdr.h  "HDR0"  Do not write TRX header  "HDR0"  Length of file including header  32-bit CRC from flag_version to end of file  0:15 flags, 16:31 version  Offsets of partitions from start of header ******************************************************************** assume v1 header  take care that nothing was written to buf so far  fall through  for TRXv2 set bin-header Flags to 0xFF for CRC calculation like CFE does  save header  set stable and try1-3 to 0xFF  restore TRXv2 bin-header ******************************************************************** The following was grabbed and tweaked from the old snippets collection
 * of public domain C code. *********************************************************************\
|* Demonstration program to compute the 32-bit CRC used as the frame  *|
|* check sequence in ADCCP (ANSI X3.66, also known as FIPS PUB 71     *|
|* and FED-STD-1003, the U.S. versions of CCITT's X.25 link-level     *|
|* protocol).  The 32-bit FCS was added via the Federal Register,     *|
|* 1 June 1982, p.23798.  I presume but don't know for certain that   *|
|* this polynomial is or will be included in CCITT V.41, which        *|
|* defines the 16-bit CRC (often called CRC-CCITT) polynomial.  FIPS  *|
|* PUB 78 says that the 32-bit FCS reduces otherwise undetected       *|
|* errors by a factor of 10^-5 over 16-bit FCS.                       *|
\********************************************************************* Copyright (C) 1986 Gary S. Brown.  You may use this program, or
   code or tables extracted from it, as desired without restriction. First, the polynomial itself and its table of feedback terms.  The   polynomial is                                                        X^32+X^26+X^23+X^22+X^16+X^12+X^11+X^10+X^8+X^7+X^5+X^4+X^2+X^1+X^0  Note that we take it "backwards" and put the highest-order term in   the lowest-order bit.  The X^32 term is "implied"; the LSB is the    X^31 term, etc.  The X^0 term (usually shown as "+1") results in     the MSB being 1.                                                     Note that the usual hardware shift register implementation, which    is what we're using (we're merely optimizing it by doing eight-bit   chunks at a time) shifts bits into the lowest-order term.  In our    implementation, that means shifting towards the right.  Why do we    do it this way?  Because the calculated CRC must be transmitted in   order from highest-order term to lowest-order term.  UARTs transmit  characters in order from LSB to MSB.  By storing the CRC this way,   we hand it to the UART in the order low-byte to high-byte; the UART  sends each low-bit to hight-bit; and the result is transmission bit  by bit from highest- to lowest-order term without requiring any bit  shuffling on our part.  Reception works similarly.                   The feedback terms table consists of 256, 32-bit entries.  Notes:                                                                          1. The table can be generated at runtime if desired; code to do so      is shown later.  It might not be obvious, but the feedback           terms simply represent the results of eight shift/xor opera-         tions for all combinations of data and CRC register values.                                                                            2. The CRC accumulation logic is the same for all CRC polynomials,      be they sixteen or thirty-two bits wide.  You simply choose the      appropriate table.  Alternatively, because the table can be          generated at runtime, you can start by generating the table for      the polynomial in question and use exactly the same "updcrc",        if your application needn't simultaneously handle two CRC            polynomials.  (Note, however, that XMODEM is strange.)                                                                                 3. For 16-bit CRCs, the table entries need be only 16 bits wide;        of course, 32-bit entries work OK if the high 16 bits are zero.                                                                        4. The values must be right-shifted by eight bits by the "updcrc"       logic; the shift must be unsigned (bring in zeroes).  On some        hardware you could probably optimize the shift in assembler by       using byte-swap instructions.                                    CRC polynomial 0xedb88320 
 * Copyright (C) 2004  Manuel Novoa III  <mjn3@codepoet.org>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
  July 29, 2004
 *
 * This is a hacked replacement for the 'trx' utility used to create
 * wrt54g .trx firmware files.  It isn't pretty, but it does the job
 * for me.
 *
 * As an extension, you can specify a larger maximum length for the
 * .trx file using '-m'.  It will be rounded up to be a multiple of 4K.
 * NOTE: This space will be malloc()'d.
 *
 * August 16, 2004
 *
 * Sigh... Make it endian-neutral.
 *
 * TODO: Support '-b' option to specify offsets for each file.
 *
 * February 19, 2005 - mbm
 *
 * Add -a (align offset) and -b (absolute offset)
 *
 * March 24, 2010 - markus
 *
 * extend trx header struct for new version
 * assume v1 for as default
 * Add option -2 to allow v2 header
 ******************************************************************** from trxhdr.h  "HDR0"  Do not write TRX header  "HDR0"  Length of file including header  32-bit CRC from flag_version to end of file  0:15 flags, 16:31 version  Offsets of partitions from start of header ******************************************************************** assume v1 header  take care that nothing was written to buf so far  fall through  for TRXv2 set bin-header Flags to 0xFF for CRC calculation like CFE does  save header  set stable and try1-3 to 0xFF  restore TRXv2 bin-header ******************************************************************** The following was grabbed and tweaked from the old snippets collection
 * of public domain C code. *********************************************************************\
|* Demonstration program to compute the 32-bit CRC used as the frame  *|
|* check sequence in ADCCP (ANSI X3.66, also known as FIPS PUB 71     *|
|* and FED-STD-1003, the U.S. versions of CCITT's X.25 link-level     *|
|* protocol).  The 32-bit FCS was added via the Federal Register,     *|
|* 1 June 1982, p.23798.  I presume but don't know for certain that   *|
|* this polynomial is or will be included in CCITT V.41, which        *|
|* defines the 16-bit CRC (often called CRC-CCITT) polynomial.  FIPS  *|
|* PUB 78 says that the 32-bit FCS reduces otherwise undetected       *|
|* errors by a factor of 10^-5 over 16-bit FCS.                       *|
\********************************************************************* Copyright (C) 1986 Gary S. Brown.  You may use this program, or
   code or tables extracted from it, as desired without restriction. First, the polynomial itself and its table of feedback terms.  The   polynomial is                                                        X^32+X^26+X^23+X^22+X^16+X^12+X^11+X^10+X^8+X^7+X^5+X^4+X^2+X^1+X^0  Note that we take it "backwards" and put the highest-order term in   the lowest-order bit.  The X^32 term is "implied"; the LSB is the    X^31 term, etc.  The X^0 term (usually shown as "+1") results in     the MSB being 1.                                                     Note that the usual hardware shift register implementation, which    is what we're using (we're merely optimizing it by doing eight-bit   chunks at a time) shifts bits into the lowest-order term.  In our    implementation, that means shifting towards the right.  Why do we    do it this way?  Because the calculated CRC must be transmitted in   order from highest-order term to lowest-order term.  UARTs transmit  characters in order from LSB to MSB.  By storing the CRC this way,   we hand it to the UART in the order low-byte to high-byte; the UART  sends each low-bit to hight-bit; and the result is transmission bit  by bit from highest- to lowest-order term without requiring any bit  shuffling on our part.  Reception works similarly.                   The feedback terms table consists of 256, 32-bit entries.  Notes:                                                                          1. The table can be generated at runtime if desired; code to do so      is shown later.  It might not be obvious, but the feedback           terms simply represent the results of eight shift/xor opera-         tions for all combinations of data and CRC register values.                                                                            2. The CRC accumulation logic is the same for all CRC polynomials,      be they sixteen or thirty-two bits wide.  You simply choose the      appropriate table.  Alternatively, because the table can be          generated at runtime, you can start by generating the table for      the polynomial in question and use exactly the same "updcrc",        if your application needn't simultaneously handle two CRC            polynomials.  (Note, however, that XMODEM is strange.)                                                                                 3. For 16-bit CRCs, the table entries need be only 16 bits wide;        of course, 32-bit entries work OK if the high 16 bits are zero.                                                                        4. The values must be right-shifted by eight bits by the "updcrc"       logic; the shift must be unsigned (bring in zeroes).  On some        hardware you could probably optimize the shift in assembler by       using byte-swap instructions.                                    CRC polynomial 0xedb88320 