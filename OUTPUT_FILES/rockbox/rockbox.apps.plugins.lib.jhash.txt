**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Bob Jenkins
 * http://burtleburtle.net/bob/c/lookup3.c
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
lookup3.c, by Bob Jenkins, May 2006, Public Domain.

These are functions for producing 32-bit hashes for hash table lookup.
hashword(), hashlittle(), hashlittle2(), hashbig(), mix(), and final() 
are externally useful functions.  Routines to test the hash are included 
if SELF_TEST is defined.  You can use this free for any purpose.  It's in
the public domain.  It has no warranty.

You probably want to use hashlittle().  hashlittle() and hashbig()
hash byte arrays.  hashlittle() is is faster than hashbig() on
little-endian machines.  Intel and AMD are little-endian machines.
On second thought, you probably want hashlittle2(), which is identical to
hashlittle() except it returns two 32-bit hashes for the price of one.  
You could implement hashbig2() if you wanted but I haven't bothered here.

If you want to find a hash of, say, exactly 7 integers, do
a = i1;  b = i2;  c = i3;
mix(a,b,c);
a += i4; b += i5; c += i6;
mix(a,b,c);
a += i7;
final(a,b,c);
then use c as the hash value.  If you have a variable length array of
4-byte integers to hash, use hashword().  If you have a byte array (like
a character string), use hashlittle().  If you have several byte arrays, or
a mix of things, see the comments above hashlittle().  

Why is this so big?  I read 12 bytes at a time into 3 4-byte integers, 
then mix those integers.  This is fast (you can do a lot more thorough
mixing with 12*3 instructions on 3 integers than you can with 3 instructions
on 1 byte), but shoehorning those bytes into integers efficiently is messy.

* My best guess at if you are big-endian or little-endian.  This may
* need adjustment.


mix -- mix 3 32-bit values reversibly.

This is reversible, so any information in (a,b,c) before mix() is
still in (a,b,c) after mix().

If four pairs of (a,b,c) inputs are run through mix(), or through
mix() in reverse, there are at least 32 bits of the output that
are sometimes the same for one pair and different for another pair.
This was tested for:
* pairs that differed by one bit, by two bits, in any combination
  of top bits of (a,b,c), or in any combination of bottom bits of
  (a,b,c).
* "differ" is defined as +, -, ^, or ~^.  For + and -, I transformed
  the output delta to a Gray code (a^(a>>1)) so a string of 1's (as
  is commonly produced by subtraction) look like a single 1-bit
  difference.
* the base values were pseudorandom, all zero but one bit set, or 
  all zero plus a counter that starts at zero.

Some k values for my "a-=c; a^=rot(c,k); c+=b;" arrangement that
satisfy this are
  4  6  8 16 19  4
  9 15  3 18 27 15
 14  9  3  7 17  3
Well, "9 15 3 18 27 15" didn't quite get 32 bits diffing
for "differ" defined as + with a one-bit base and a two-bit delta.  I
used http://burtleburtle.net/bob/hash/avalanche.html to choose 
the operations, constants, and arrangements of the variables.

This does not achieve avalanche.  There are input bits of (a,b,c)
that fail to affect some output bits of (a,b,c), especially of a.  The
most thoroughly mixed value is c, but it doesn't really even achieve
avalanche in c.

This allows some parallelism.  Read-after-writes are good at doubling
the number of bits affected, so the goal of mixing pulls in the opposite
direction as the goal of parallelism.  I did what I could.  Rotates
seem to cost as much as shifts on every machine I could lay my hands
on, and rotates are much kinder to the top and bottom bits, so I used
rotates.

final -- final mixing of 3 32-bit values (a,b,c) into c

Pairs of (a,b,c) values differing in only a few bits will usually
produce values of c that look totally different.  This was tested for
* pairs that differed by one bit, by two bits, in any combination
  of top bits of (a,b,c), or in any combination of bottom bits of
(a,b,c).
* "differ" is defined as +, -, ^, or ~^.  For + and -, I transformed
  the output delta to a Gray code (a^(a>>1)) so a string of 1's (as
  is commonly produced by subtraction) look like a single 1-bit
  difference.
* the base values were pseudorandom, all zero but one bit set, or 
  all zero plus a counter that starts at zero.

These constants passed:
 14 11 25 16  4 14 24
 12 14 25 16  4 14 24
and these came close:
  4  8 15 26  3 22 24
 10  8 15 26  3 22 24
 11  8 15 26  3 22 24

  k:       pointer to the key, an array of uint32_t
  length:  number of elements in the key
  initval: an initialization value
  returns the 32-bit hash
 Set up the internal state  handle most of the key  handle the last 3 uint32_t's  all the case statements fall through  case 0: nothing left to add  report the result 
hashw2() -- same as hashw(), but take two seeds and return two
32-bit values.  pc and pb must both be nonnull, and *pc and *pb must
both be initialized with seeds.  If you pass in (*pb)==0, the output 
(*pc) will be the same as the return value from hashword().
  k:      pointer to the key, an array of uint32_t
  length: number of elements in the key
  pc, pb: pointers to primary and secondary initial values, also used to store
          the hash results.
 Set up the internal state  handle most of the key  handle the last 3 uint32_t's  all the case statements fall through  case 0: nothing left to add  report the result 
hashs() -- hash a variable-length key into a 32-bit value
  k:       pointer to the key, an array of bytes
  length:  number of elements in the key
  initval: an initialization value
  returns the 32-bit hash
Returns a 32-bit value.  Every bit of the key affects every bit of
the return value.  Two keys differing by one or two bits will have
totally different hash values.

The best hash table sizes are powers of 2.  There is no need to do
mod a prime (mod is sooo slow!).  If you need less than 32 bits,
use a bitmask.  For example, if you need only 10 bits, do
h = (h & hashmask(10));
In which case, the hash table should have hashsize(10) elements.

If you are hashing n strings (uint8_t **)k, do it like this:
for (i=0, h=0; i<n; ++i) h = hashlittle( k[i], len[i], h);

By Bob Jenkins, 2006.  bob_jenkins@burtleburtle.net.  You may use this
code any way you wish, private, educational, or commercial.  It's free.

Use for hash table lookup, or anything where one collision in 2^^32 is
acceptable.  Do NOT use for cryptographic purposes.
 internal state  needed for Mac Powerbook G4  Set up the internal state  read 32-bit chunks  all but last block: aligned reads and affect 32 bits of (a,b,c)  handle the last (probably partial) block  zero length strings require no mixing  read 16-bit chunks  all but last block: aligned reads and different mixing  handle the last (probably partial) block  fall through  fall through  fall through  fall through  fall through  zero length requires no mixing  need to read the key one byte at a time  all but the last block: affect some 32 bits of (a,b,c)  last block: affect all 32 bits of (c)  all the case statements fall through 
hashs2: return 2 32-bit hash values
  k:       pointer to the key, an array of bytes
  length: number of elements in the key
  pc, pb: pointers to primary and secondary initial values, also used to store
          the hash results.
* This is identical to hashlittle(), except it returns two 32-bit hash
* values instead of just one.  This is good enough for hash table
* lookup with 2^^64 buckets, or if you want a second hash if you're not
* happy with the first, or if you want a probably-unique 64-bit ID for
* the key.  *pc is better mixed than *pb, so use *pc first.  If you want
* a 64-bit value do something like "*pc + (((uint64_t)*pb)<<32)".
 internal state  needed for Mac Powerbook G4  Set up the internal state  read 32-bit chunks  all but last block: aligned reads and affect 32 bits of (a,b,c)  handle the last (probably partial) block  zero length strings require no mixing  read 16-bit chunks  all but last block: aligned reads and different mixing  handle the last (probably partial) block  fall through  fall through  fall through  fall through  fall through  zero length strings require no mixing  need to read the key one byte at a time  all but the last block: affect some 32 bits of (a,b,c)  last block: affect all 32 bits of (c)  all the case statements fall through  zero length strings require no mixing **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Bob Jenkins
 * http://burtleburtle.net/bob/c/lookup3.c
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
lookup3.c, by Bob Jenkins, May 2006, Public Domain.

These are functions for producing 32-bit hashes for hash table lookup.
hashword(), hashlittle(), hashlittle2(), hashbig(), mix(), and final() 
are externally useful functions.  Routines to test the hash are included 
if SELF_TEST is defined.  You can use this free for any purpose.  It's in
the public domain.  It has no warranty.

You probably want to use hashlittle().  hashlittle() and hashbig()
hash byte arrays.  hashlittle() is is faster than hashbig() on
little-endian machines.  Intel and AMD are little-endian machines.
On second thought, you probably want hashlittle2(), which is identical to
hashlittle() except it returns two 32-bit hashes for the price of one.  
You could implement hashbig2() if you wanted but I haven't bothered here.

If you want to find a hash of, say, exactly 7 integers, do
a = i1;  b = i2;  c = i3;
mix(a,b,c);
a += i4; b += i5; c += i6;
mix(a,b,c);
a += i7;
final(a,b,c);
then use c as the hash value.  If you have a variable length array of
4-byte integers to hash, use hashword().  If you have a byte array (like
a character string), use hashlittle().  If you have several byte arrays, or
a mix of things, see the comments above hashlittle().  

Why is this so big?  I read 12 bytes at a time into 3 4-byte integers, 
then mix those integers.  This is fast (you can do a lot more thorough
mixing with 12*3 instructions on 3 integers than you can with 3 instructions
on 1 byte), but shoehorning those bytes into integers efficiently is messy.

* My best guess at if you are big-endian or little-endian.  This may
* need adjustment.


mix -- mix 3 32-bit values reversibly.

This is reversible, so any information in (a,b,c) before mix() is
still in (a,b,c) after mix().

If four pairs of (a,b,c) inputs are run through mix(), or through
mix() in reverse, there are at least 32 bits of the output that
are sometimes the same for one pair and different for another pair.
This was tested for:
* pairs that differed by one bit, by two bits, in any combination
  of top bits of (a,b,c), or in any combination of bottom bits of
  (a,b,c).
* "differ" is defined as +, -, ^, or ~^.  For + and -, I transformed
  the output delta to a Gray code (a^(a>>1)) so a string of 1's (as
  is commonly produced by subtraction) look like a single 1-bit
  difference.
* the base values were pseudorandom, all zero but one bit set, or 
  all zero plus a counter that starts at zero.

Some k values for my "a-=c; a^=rot(c,k); c+=b;" arrangement that
satisfy this are
  4  6  8 16 19  4
  9 15  3 18 27 15
 14  9  3  7 17  3
Well, "9 15 3 18 27 15" didn't quite get 32 bits diffing
for "differ" defined as + with a one-bit base and a two-bit delta.  I
used http://burtleburtle.net/bob/hash/avalanche.html to choose 
the operations, constants, and arrangements of the variables.

This does not achieve avalanche.  There are input bits of (a,b,c)
that fail to affect some output bits of (a,b,c), especially of a.  The
most thoroughly mixed value is c, but it doesn't really even achieve
avalanche in c.

This allows some parallelism.  Read-after-writes are good at doubling
the number of bits affected, so the goal of mixing pulls in the opposite
direction as the goal of parallelism.  I did what I could.  Rotates
seem to cost as much as shifts on every machine I could lay my hands
on, and rotates are much kinder to the top and bottom bits, so I used
rotates.

final -- final mixing of 3 32-bit values (a,b,c) into c

Pairs of (a,b,c) values differing in only a few bits will usually
produce values of c that look totally different.  This was tested for
* pairs that differed by one bit, by two bits, in any combination
  of top bits of (a,b,c), or in any combination of bottom bits of
(a,b,c).
* "differ" is defined as +, -, ^, or ~^.  For + and -, I transformed
  the output delta to a Gray code (a^(a>>1)) so a string of 1's (as
  is commonly produced by subtraction) look like a single 1-bit
  difference.
* the base values were pseudorandom, all zero but one bit set, or 
  all zero plus a counter that starts at zero.

These constants passed:
 14 11 25 16  4 14 24
 12 14 25 16  4 14 24
and these came close:
  4  8 15 26  3 22 24
 10  8 15 26  3 22 24
 11  8 15 26  3 22 24

  k:       pointer to the key, an array of uint32_t
  length:  number of elements in the key
  initval: an initialization value
  returns the 32-bit hash
 Set up the internal state  handle most of the key  handle the last 3 uint32_t's  all the case statements fall through  case 0: nothing left to add  report the result 
hashw2() -- same as hashw(), but take two seeds and return two
32-bit values.  pc and pb must both be nonnull, and *pc and *pb must
both be initialized with seeds.  If you pass in (*pb)==0, the output 
(*pc) will be the same as the return value from hashword().
  k:      pointer to the key, an array of uint32_t
  length: number of elements in the key
  pc, pb: pointers to primary and secondary initial values, also used to store
          the hash results.
 Set up the internal state  handle most of the key  handle the last 3 uint32_t's  all the case statements fall through  case 0: nothing left to add  report the result 
hashs() -- hash a variable-length key into a 32-bit value
  k:       pointer to the key, an array of bytes
  length:  number of elements in the key
  initval: an initialization value
  returns the 32-bit hash
Returns a 32-bit value.  Every bit of the key affects every bit of
the return value.  Two keys differing by one or two bits will have
totally different hash values.

The best hash table sizes are powers of 2.  There is no need to do
mod a prime (mod is sooo slow!).  If you need less than 32 bits,
use a bitmask.  For example, if you need only 10 bits, do
h = (h & hashmask(10));
In which case, the hash table should have hashsize(10) elements.

If you are hashing n strings (uint8_t **)k, do it like this:
for (i=0, h=0; i<n; ++i) h = hashlittle( k[i], len[i], h);

By Bob Jenkins, 2006.  bob_jenkins@burtleburtle.net.  You may use this
code any way you wish, private, educational, or commercial.  It's free.

Use for hash table lookup, or anything where one collision in 2^^32 is
acceptable.  Do NOT use for cryptographic purposes.
 internal state  needed for Mac Powerbook G4  Set up the internal state  read 32-bit chunks  all but last block: aligned reads and affect 32 bits of (a,b,c)  handle the last (probably partial) block  zero length strings require no mixing  read 16-bit chunks  all but last block: aligned reads and different mixing  handle the last (probably partial) block  fall through  fall through  fall through  fall through  fall through  zero length requires no mixing  need to read the key one byte at a time  all but the last block: affect some 32 bits of (a,b,c)  last block: affect all 32 bits of (c)  all the case statements fall through 
hashs2: return 2 32-bit hash values
  k:       pointer to the key, an array of bytes
  length: number of elements in the key
  pc, pb: pointers to primary and secondary initial values, also used to store
          the hash results.
* This is identical to hashlittle(), except it returns two 32-bit hash
* values instead of just one.  This is good enough for hash table
* lookup with 2^^64 buckets, or if you want a second hash if you're not
* happy with the first, or if you want a probably-unique 64-bit ID for
* the key.  *pc is better mixed than *pb, so use *pc first.  If you want
* a 64-bit value do something like "*pc + (((uint64_t)*pb)<<32)".
 internal state  needed for Mac Powerbook G4  Set up the internal state  read 32-bit chunks  all but last block: aligned reads and affect 32 bits of (a,b,c)  handle the last (probably partial) block  zero length strings require no mixing  read 16-bit chunks  all but last block: aligned reads and different mixing  handle the last (probably partial) block  fall through  fall through  fall through  fall through  fall through  zero length strings require no mixing  need to read the key one byte at a time  all but the last block: affect some 32 bits of (a,b,c)  last block: affect all 32 bits of (c)  all the case statements fall through  zero length strings require no mixing **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Bob Jenkins
 * http://burtleburtle.net/bob/c/lookup3.c
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************
lookup3.c, by Bob Jenkins, May 2006, Public Domain.

These are functions for producing 32-bit hashes for hash table lookup.
hashword(), hashlittle(), hashlittle2(), hashbig(), mix(), and final() 
are externally useful functions.  Routines to test the hash are included 
if SELF_TEST is defined.  You can use this free for any purpose.  It's in
the public domain.  It has no warranty.

You probably want to use hashlittle().  hashlittle() and hashbig()
hash byte arrays.  hashlittle() is is faster than hashbig() on
little-endian machines.  Intel and AMD are little-endian machines.
On second thought, you probably want hashlittle2(), which is identical to
hashlittle() except it returns two 32-bit hashes for the price of one.  
You could implement hashbig2() if you wanted but I haven't bothered here.

If you want to find a hash of, say, exactly 7 integers, do
a = i1;  b = i2;  c = i3;
mix(a,b,c);
a += i4; b += i5; c += i6;
mix(a,b,c);
a += i7;
final(a,b,c);
then use c as the hash value.  If you have a variable length array of
4-byte integers to hash, use hashword().  If you have a byte array (like
a character string), use hashlittle().  If you have several byte arrays, or
a mix of things, see the comments above hashlittle().  

Why is this so big?  I read 12 bytes at a time into 3 4-byte integers, 
then mix those integers.  This is fast (you can do a lot more thorough
mixing with 12*3 instructions on 3 integers than you can with 3 instructions
on 1 byte), but shoehorning those bytes into integers efficiently is messy.

* My best guess at if you are big-endian or little-endian.  This may
* need adjustment.


mix -- mix 3 32-bit values reversibly.

This is reversible, so any information in (a,b,c) before mix() is
still in (a,b,c) after mix().

If four pairs of (a,b,c) inputs are run through mix(), or through
mix() in reverse, there are at least 32 bits of the output that
are sometimes the same for one pair and different for another pair.
This was tested for:
* pairs that differed by one bit, by two bits, in any combination
  of top bits of (a,b,c), or in any combination of bottom bits of
  (a,b,c).
* "differ" is defined as +, -, ^, or ~^.  For + and -, I transformed
  the output delta to a Gray code (a^(a>>1)) so a string of 1's (as
  is commonly produced by subtraction) look like a single 1-bit
  difference.
* the base values were pseudorandom, all zero but one bit set, or 
  all zero plus a counter that starts at zero.

Some k values for my "a-=c; a^=rot(c,k); c+=b;" arrangement that
satisfy this are
  4  6  8 16 19  4
  9 15  3 18 27 15
 14  9  3  7 17  3
Well, "9 15 3 18 27 15" didn't quite get 32 bits diffing
for "differ" defined as + with a one-bit base and a two-bit delta.  I
used http://burtleburtle.net/bob/hash/avalanche.html to choose 
the operations, constants, and arrangements of the variables.

This does not achieve avalanche.  There are input bits of (a,b,c)
that fail to affect some output bits of (a,b,c), especially of a.  The
most thoroughly mixed value is c, but it doesn't really even achieve
avalanche in c.

This allows some parallelism.  Read-after-writes are good at doubling
the number of bits affected, so the goal of mixing pulls in the opposite
direction as the goal of parallelism.  I did what I could.  Rotates
seem to cost as much as shifts on every machine I could lay my hands
on, and rotates are much kinder to the top and bottom bits, so I used
rotates.

final -- final mixing of 3 32-bit values (a,b,c) into c

Pairs of (a,b,c) values differing in only a few bits will usually
produce values of c that look totally different.  This was tested for
* pairs that differed by one bit, by two bits, in any combination
  of top bits of (a,b,c), or in any combination of bottom bits of
(a,b,c).
* "differ" is defined as +, -, ^, or ~^.  For + and -, I transformed
  the output delta to a Gray code (a^(a>>1)) so a string of 1's (as
  is commonly produced by subtraction) look like a single 1-bit
  difference.
* the base values were pseudorandom, all zero but one bit set, or 
  all zero plus a counter that starts at zero.

These constants passed:
 14 11 25 16  4 14 24
 12 14 25 16  4 14 24
and these came close:
  4  8 15 26  3 22 24
 10  8 15 26  3 22 24
 11  8 15 26  3 22 24

  k:       pointer to the key, an array of uint32_t
  length:  number of elements in the key
  initval: an initialization value
  returns the 32-bit hash
 Set up the internal state  handle most of the key  handle the last 3 uint32_t's  all the case statements fall through  case 0: nothing left to add  report the result 
hashw2() -- same as hashw(), but take two seeds and return two
32-bit values.  pc and pb must both be nonnull, and *pc and *pb must
both be initialized with seeds.  If you pass in (*pb)==0, the output 
(*pc) will be the same as the return value from hashword().
  k:      pointer to the key, an array of uint32_t
  length: number of elements in the key
  pc, pb: pointers to primary and secondary initial values, also used to store
          the hash results.
 Set up the internal state  handle most of the key  handle the last 3 uint32_t's  all the case statements fall through  case 0: nothing left to add  report the result 
hashs() -- hash a variable-length key into a 32-bit value
  k:       pointer to the key, an array of bytes
  length:  number of elements in the key
  initval: an initialization value
  returns the 32-bit hash
Returns a 32-bit value.  Every bit of the key affects every bit of
the return value.  Two keys differing by one or two bits will have
totally different hash values.

The best hash table sizes are powers of 2.  There is no need to do
mod a prime (mod is sooo slow!).  If you need less than 32 bits,
use a bitmask.  For example, if you need only 10 bits, do
h = (h & hashmask(10));
In which case, the hash table should have hashsize(10) elements.

If you are hashing n strings (uint8_t **)k, do it like this:
for (i=0, h=0; i<n; ++i) h = hashlittle( k[i], len[i], h);

By Bob Jenkins, 2006.  bob_jenkins@burtleburtle.net.  You may use this
code any way you wish, private, educational, or commercial.  It's free.

Use for hash table lookup, or anything where one collision in 2^^32 is
acceptable.  Do NOT use for cryptographic purposes.
 internal state  needed for Mac Powerbook G4  Set up the internal state  read 32-bit chunks  all but last block: aligned reads and affect 32 bits of (a,b,c)  handle the last (probably partial) block  zero length strings require no mixing  read 16-bit chunks  all but last block: aligned reads and different mixing  handle the last (probably partial) block  fall through  fall through  fall through  fall through  fall through  zero length requires no mixing  need to read the key one byte at a time  all but the last block: affect some 32 bits of (a,b,c)  last block: affect all 32 bits of (c)  all the case statements fall through 
hashs2: return 2 32-bit hash values
  k:       pointer to the key, an array of bytes
  length: number of elements in the key
  pc, pb: pointers to primary and secondary initial values, also used to store
          the hash results.
* This is identical to hashlittle(), except it returns two 32-bit hash
* values instead of just one.  This is good enough for hash table
* lookup with 2^^64 buckets, or if you want a second hash if you're not
* happy with the first, or if you want a probably-unique 64-bit ID for
* the key.  *pc is better mixed than *pb, so use *pc first.  If you want
* a 64-bit value do something like "*pc + (((uint64_t)*pb)<<32)".
 internal state  needed for Mac Powerbook G4  Set up the internal state  read 32-bit chunks  all but last block: aligned reads and affect 32 bits of (a,b,c)  handle the last (probably partial) block  zero length strings require no mixing  read 16-bit chunks  all but last block: aligned reads and different mixing  handle the last (probably partial) block  fall through  fall through  fall through  fall through  fall through  zero length strings require no mixing  need to read the key one byte at a time  all but the last block: affect some 32 bits of (a,b,c)  last block: affect all 32 bits of (c)  all the case statements fall through  zero length strings require no mixing 