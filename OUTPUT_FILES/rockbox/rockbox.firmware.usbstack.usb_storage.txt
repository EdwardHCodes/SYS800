**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Björn Stenberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define LOGF_ENABLE Needed to get at the audio buffer  These defaults allow the operation  the ARC driver currently supports up to 64k USB transfers. This is
 * enough for efficient mass storage support, as commonly host OSes
 * don't do larger SCSI transfers anyway, so larger USB transfers
 * wouldn't buy us anything.
 * Due to being the double-buffering system used, using a smaller write buffer
 * ends up being more efficient. Measurements have shown that 24k to 28k is
 * optimal, except for sd devices that apparently don't gain anything from
 * double-buffering
  We'd need to implement multidescriptor dma for sizes >65535  CONFIG_CPU == AS3525  USB_READ_BUFFER_SIZE  We don't use sizeof() here, because we *need* a multiple of 32  We'd need to implement multidescriptor dma for sizes >65535  CONFIG_CPU == AS3525  (CONFIG_STORAGE & STORAGE_SD)  USB_WRITE_BUFFER_SIZE  bulk-only class specific requests  disks  storage interface  Transparent  bulk only  CONFIG_RTC  If this happens while the device is locked, weird things may happen.
           At least try to keep our state consistent  called by usb_core_init()  prime rx endpoint. We only need room for commands  dummy ops with no callbacks, needed because by
     * default buflib buffers can be moved around which must be avoided  Add 31 to handle worst-case misalignment called by usb_core_transfer_complete()  Ask the host to send more, to the other buffer  Now write the data that just came in, while the host is
                   sending the next bit  Switch buffers for the next one  TODO fill in cur_sense_data  This was the CSW  This was the command  We now have the CBW, but we won't execute it yet to avoid
                 * issues with the still-pending CSW logf("data sent, now send csw"); TODO fill in cur_sense_data logf("data sent, now send csw"); The last read failed.  TODO fill in cur_sense_data  CONFIG_RTC  called by usb_core_control_request()  ack  UMS BOT 3.1 says The device shall preserve the value of its bulk
               data toggle bits and endpoint STALL conditions despite
               the Bulk-Only Mass Storage Reset.  ack  Switch buffers for the next one  already read the next bit, so we can send it out immediately when the
         * current transfer completes.  ************************************************************************** USB Mass Storage assumes LBA capability.
       TODO: support 48-bit LBA  Clear the signature to prevent possible bugs elsewhere
     * to trigger a second execution of the same command with
     * bogus data current errorunsigned char pc = (cbw->command_block[2] & 0xc0) >>6;unsigned char pc = (cbw->command_block[2] & 0xc0) >>6; All supported pages. load/eject bit is valid Process start and eject bits  Don't start  eject  "block count" actually means "number of last block"  "block count" actually means "number of last block" logf("scsi read %d %d", cur_cmd.sector, cur_cmd.count); expect data  mode = vendor specific  buffer id = 0  offset (3 bytes)  Some versions of itunes set the parameter list length to 0.
             * Technically it should be 0x0c, which is what libgpod sends  parameter list (3 bytes)  CONFIG_RTC  CONFIG_RTC logf("CSW: %X",status); Already start waiting for the next command  The next completed transfer will be either the CSW one
     * or the new command  build SCSI INQUIRY  SPC-2  SPC-2/3 inquiry format **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Björn Stenberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define LOGF_ENABLE Needed to get at the audio buffer  These defaults allow the operation  the ARC driver currently supports up to 64k USB transfers. This is
 * enough for efficient mass storage support, as commonly host OSes
 * don't do larger SCSI transfers anyway, so larger USB transfers
 * wouldn't buy us anything.
 * Due to being the double-buffering system used, using a smaller write buffer
 * ends up being more efficient. Measurements have shown that 24k to 28k is
 * optimal, except for sd devices that apparently don't gain anything from
 * double-buffering
  We'd need to implement multidescriptor dma for sizes >65535  CONFIG_CPU == AS3525  USB_READ_BUFFER_SIZE  We don't use sizeof() here, because we *need* a multiple of 32  We'd need to implement multidescriptor dma for sizes >65535  CONFIG_CPU == AS3525  (CONFIG_STORAGE & STORAGE_SD)  USB_WRITE_BUFFER_SIZE  bulk-only class specific requests  disks  storage interface  Transparent  bulk only  CONFIG_RTC  If this happens while the device is locked, weird things may happen.
           At least try to keep our state consistent  called by usb_core_init()  prime rx endpoint. We only need room for commands  dummy ops with no callbacks, needed because by
     * default buflib buffers can be moved around which must be avoided  Add 31 to handle worst-case misalignment called by usb_core_transfer_complete()  Ask the host to send more, to the other buffer  Now write the data that just came in, while the host is
                   sending the next bit  Switch buffers for the next one  TODO fill in cur_sense_data  This was the CSW  This was the command  We now have the CBW, but we won't execute it yet to avoid
                 * issues with the still-pending CSW logf("data sent, now send csw"); TODO fill in cur_sense_data logf("data sent, now send csw"); The last read failed.  TODO fill in cur_sense_data  CONFIG_RTC  called by usb_core_control_request()  ack  UMS BOT 3.1 says The device shall preserve the value of its bulk
               data toggle bits and endpoint STALL conditions despite
               the Bulk-Only Mass Storage Reset.  ack  Switch buffers for the next one  already read the next bit, so we can send it out immediately when the
         * current transfer completes.  ************************************************************************** USB Mass Storage assumes LBA capability.
       TODO: support 48-bit LBA  Clear the signature to prevent possible bugs elsewhere
     * to trigger a second execution of the same command with
     * bogus data current errorunsigned char pc = (cbw->command_block[2] & 0xc0) >>6;unsigned char pc = (cbw->command_block[2] & 0xc0) >>6; All supported pages. load/eject bit is valid Process start and eject bits  Don't start  eject  "block count" actually means "number of last block"  "block count" actually means "number of last block" logf("scsi read %d %d", cur_cmd.sector, cur_cmd.count); expect data  mode = vendor specific  buffer id = 0  offset (3 bytes)  Some versions of itunes set the parameter list length to 0.
             * Technically it should be 0x0c, which is what libgpod sends  parameter list (3 bytes)  CONFIG_RTC  CONFIG_RTC logf("CSW: %X",status); Already start waiting for the next command  The next completed transfer will be either the CSW one
     * or the new command  build SCSI INQUIRY  SPC-2  SPC-2/3 inquiry format **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Björn Stenberg
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************#define LOGF_ENABLE Needed to get at the audio buffer  These defaults allow the operation  the ARC driver currently supports up to 64k USB transfers. This is
 * enough for efficient mass storage support, as commonly host OSes
 * don't do larger SCSI transfers anyway, so larger USB transfers
 * wouldn't buy us anything.
 * Due to being the double-buffering system used, using a smaller write buffer
 * ends up being more efficient. Measurements have shown that 24k to 28k is
 * optimal, except for sd devices that apparently don't gain anything from
 * double-buffering
  We'd need to implement multidescriptor dma for sizes >65535  CONFIG_CPU == AS3525  USB_READ_BUFFER_SIZE  We don't use sizeof() here, because we *need* a multiple of 32  We'd need to implement multidescriptor dma for sizes >65535  CONFIG_CPU == AS3525  (CONFIG_STORAGE & STORAGE_SD)  USB_WRITE_BUFFER_SIZE  bulk-only class specific requests  disks  storage interface  Transparent  bulk only  CONFIG_RTC  If this happens while the device is locked, weird things may happen.
           At least try to keep our state consistent  called by usb_core_init()  prime rx endpoint. We only need room for commands  dummy ops with no callbacks, needed because by
     * default buflib buffers can be moved around which must be avoided  Add 31 to handle worst-case misalignment called by usb_core_transfer_complete()  Ask the host to send more, to the other buffer  Now write the data that just came in, while the host is
                   sending the next bit  Switch buffers for the next one  TODO fill in cur_sense_data  This was the CSW  This was the command  We now have the CBW, but we won't execute it yet to avoid
                 * issues with the still-pending CSW logf("data sent, now send csw"); TODO fill in cur_sense_data logf("data sent, now send csw"); The last read failed.  TODO fill in cur_sense_data  CONFIG_RTC  called by usb_core_control_request()  ack  UMS BOT 3.1 says The device shall preserve the value of its bulk
               data toggle bits and endpoint STALL conditions despite
               the Bulk-Only Mass Storage Reset.  ack  Switch buffers for the next one  already read the next bit, so we can send it out immediately when the
         * current transfer completes.  ************************************************************************** USB Mass Storage assumes LBA capability.
       TODO: support 48-bit LBA  Clear the signature to prevent possible bugs elsewhere
     * to trigger a second execution of the same command with
     * bogus data current errorunsigned char pc = (cbw->command_block[2] & 0xc0) >>6;unsigned char pc = (cbw->command_block[2] & 0xc0) >>6; All supported pages. load/eject bit is valid Process start and eject bits  Don't start  eject  "block count" actually means "number of last block"  "block count" actually means "number of last block" logf("scsi read %d %d", cur_cmd.sector, cur_cmd.count); expect data  mode = vendor specific  buffer id = 0  offset (3 bytes)  Some versions of itunes set the parameter list length to 0.
             * Technically it should be 0x0c, which is what libgpod sends  parameter list (3 bytes)  CONFIG_RTC  CONFIG_RTC logf("CSW: %X",status); Already start waiting for the next command  The next completed transfer will be either the CSW one
     * or the new command  build SCSI INQUIRY  SPC-2  SPC-2/3 inquiry format 