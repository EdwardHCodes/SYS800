*************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2007 Thom Johansen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ************************************************************************** Read an unaligned 32-bit little endian long from buffer.  iterate over WAVE chunks until 'data' chunk  get chunk header  chunkSize  get rest of chunk  wBitsPerSample  dwSampleLength  get rest of chunk  seek to next chunk (even chunk sizes must be padded)  for PCM only  We'll eat an entire WAV file here, and encode it with Speex, packing the
 * bits as tightly as we can. Output is completely raw, with absolutely
 * nothing to identify the contents. Files are left open, so remember to close
 * them.
  Max frame size  Allocate an encoder of specified type, defaults to wideband  VBR  Quality, 0-10  Complexity, 0-10  Read input samples into a buffer  byteswap read bytes to host endianess.  There will be 'lookahead' samples of zero at the end of the array, to
     * make sure the Speex encoder is allowed to spit out all its data at clip
     * end  Check if we need to resample  Calculate how many input samples are needed for one full frame
             * out, and add some, just in case.  Limit this or resampler will try to allocate it all on stack  Pad out with zeros if we didn't fill all input  Copy the bits to an array of char that can be written  Write the compressed data  Squeeze out the last bits *************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2007 Thom Johansen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ************************************************************************** Read an unaligned 32-bit little endian long from buffer.  iterate over WAVE chunks until 'data' chunk  get chunk header  chunkSize  get rest of chunk  wBitsPerSample  dwSampleLength  get rest of chunk  seek to next chunk (even chunk sizes must be padded)  for PCM only  We'll eat an entire WAV file here, and encode it with Speex, packing the
 * bits as tightly as we can. Output is completely raw, with absolutely
 * nothing to identify the contents. Files are left open, so remember to close
 * them.
  Max frame size  Allocate an encoder of specified type, defaults to wideband  VBR  Quality, 0-10  Complexity, 0-10  Read input samples into a buffer  byteswap read bytes to host endianess.  There will be 'lookahead' samples of zero at the end of the array, to
     * make sure the Speex encoder is allowed to spit out all its data at clip
     * end  Check if we need to resample  Calculate how many input samples are needed for one full frame
             * out, and add some, just in case.  Limit this or resampler will try to allocate it all on stack  Pad out with zeros if we didn't fill all input  Copy the bits to an array of char that can be written  Write the compressed data  Squeeze out the last bits *************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 *
 * Copyright (C) 2007 Thom Johansen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ************************************************************************** Read an unaligned 32-bit little endian long from buffer.  iterate over WAVE chunks until 'data' chunk  get chunk header  chunkSize  get rest of chunk  wBitsPerSample  dwSampleLength  get rest of chunk  seek to next chunk (even chunk sizes must be padded)  for PCM only  We'll eat an entire WAV file here, and encode it with Speex, packing the
 * bits as tightly as we can. Output is completely raw, with absolutely
 * nothing to identify the contents. Files are left open, so remember to close
 * them.
  Max frame size  Allocate an encoder of specified type, defaults to wideband  VBR  Quality, 0-10  Complexity, 0-10  Read input samples into a buffer  byteswap read bytes to host endianess.  There will be 'lookahead' samples of zero at the end of the array, to
     * make sure the Speex encoder is allowed to spit out all its data at clip
     * end  Check if we need to resample  Calculate how many input samples are needed for one full frame
             * out, and add some, just in case.  Limit this or resampler will try to allocate it all on stack  Pad out with zeros if we didn't fill all input  Copy the bits to an array of char that can be written  Write the compressed data  Squeeze out the last bits 