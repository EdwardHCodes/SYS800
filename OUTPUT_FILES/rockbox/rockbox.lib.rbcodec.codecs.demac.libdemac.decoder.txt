

libdemac - A Monkey's Audio decoder

$Id$

Copyright (C) Dave Chapman 2007

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA

 Statically allocate the filter buffers  2432 or 4864 bytes  5120 or 10240 bytes  2432 or 4864 bytes  5120 or 10240 bytes  This is only needed for "insane" files, and no current Rockbox targets
   can hope to decode them in realtime, except the Gigabeat S (at 528MHz).  17408 or 34816 bytes printf("CRC=0x%08x\n",ape_ctx->CRC);printf("Flags=0x%08x\n",ape_ctx->frameflags); We are pure silence, so we're done.  Now apply the predictor decoding  Pseudo-stereo - copy left channel to right channel  Scale to output depth  Stereo  We are pure silence, so we're done.  Apply filters - compression type 1000 doesn't have any  Now apply the predictor decoding  Decorrelate and scale to output depth 

libdemac - A Monkey's Audio decoder

$Id$

Copyright (C) Dave Chapman 2007

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA

 Statically allocate the filter buffers  2432 or 4864 bytes  5120 or 10240 bytes  2432 or 4864 bytes  5120 or 10240 bytes  This is only needed for "insane" files, and no current Rockbox targets
   can hope to decode them in realtime, except the Gigabeat S (at 528MHz).  17408 or 34816 bytes printf("CRC=0x%08x\n",ape_ctx->CRC);printf("Flags=0x%08x\n",ape_ctx->frameflags); We are pure silence, so we're done.  Now apply the predictor decoding  Pseudo-stereo - copy left channel to right channel  Scale to output depth  Stereo  We are pure silence, so we're done.  Apply filters - compression type 1000 doesn't have any  Now apply the predictor decoding  Decorrelate and scale to output depth 

libdemac - A Monkey's Audio decoder

$Id$

Copyright (C) Dave Chapman 2007

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA

 Statically allocate the filter buffers  2432 or 4864 bytes  5120 or 10240 bytes  2432 or 4864 bytes  5120 or 10240 bytes  This is only needed for "insane" files, and no current Rockbox targets
   can hope to decode them in realtime, except the Gigabeat S (at 528MHz).  17408 or 34816 bytes printf("CRC=0x%08x\n",ape_ctx->CRC);printf("Flags=0x%08x\n",ape_ctx->frameflags); We are pure silence, so we're done.  Now apply the predictor decoding  Pseudo-stereo - copy left channel to right channel  Scale to output depth  Stereo  We are pure silence, so we're done.  Apply filters - compression type 1000 doesn't have any  Now apply the predictor decoding  Decorrelate and scale to output depth 