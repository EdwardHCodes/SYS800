
  Copyright (c) 2014, Matthias Schiffer <mschiffer@universe-factory.net>
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice,
       this list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright notice,
       this list of conditions and the following disclaimer in the documentation
       and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

   tplink-safeloader

   Image generation tool for the TP-LINK SafeLoader as seen on
   TP-LINK Pharos devices (CPE210/220/510/520)
* An image partition table entry * A flash partition table entry * Firmware layout description * The content of the soft-version structure *
   Salt for the MD5 hash

   Fortunately, TP-LINK seems to use the same salt for most devices which use
   the new image format.
* Firmware layout table * Firmware layout for the CPE210/220 V1 * Firmware layout for the CPE210 V2 * Firmware layout for the CPE210 V3 * Firmware layout for the CPE220 V2 * Firmware layout for the CPE220 V3 * Firmware layout for the CPE510/520 V1 * Firmware layout for the CPE510 V2 * Firmware layout for the CPE510 V3 * Firmware layout for the CPE610V1 * Firmware layout for the CPE610V2 * Firmware layout for the C2600 *
		    We use a bigger os-image partition than the stock images (and thus
		    smaller file-system), as our kernel doesn't fit in the stock firmware's
		    2 MB os-image since kernel 4.14.
		 Stock: base 0x1f0000 size 0x200000  Stock: base 0x3f0000 size 0x1b00000 * Firmware layout for the A7-V5  We're using a dynamic kernel/rootfs split here  Stock: name os-image base 0x40000 size 0x120000  Stock: name file-system base 0x160000 size 0xda0000 * Firmware layout for the C2v3 * We're using a dynamic kernel/rootfs split here * Firmware layout for the C25v1  We're using a dynamic kernel/rootfs split here  Stock: name os-image base 0x30000 size 0x100000  Stock: name file-system base 0x130000 size 0x6a0000 * Firmware layout for the C58v1 * Firmware layout for the C59v1  We're using a dynamic kernel/rootfs split here * Firmware layout for the C59v2 * We're using a dynamic kernel/rootfs split here * Firmware layout for the Archer C6 v2 (EU/RU/JP) * Firmware layout for the Archer C6 v2 (US) and A6 v2 (US/TW) * Firmware layout for the C60v1 * Firmware layout for the C60v2 * Firmware layout for the C60v3 * Firmware layout for the C5  JP version * Firmware layout for the C7  We're using a dynamic kernel/rootfs split here  Stock: name os-image base 0x40000 size 0x120000  Stock: name file-system base 0x160000 size 0xda0000 * Firmware layout for the C7 v5 We're using a dynamic kernel/rootfs split here  Stock: name os-image base 0xc0000  size 0x120000  Stock: name file-system base 0x1e0000 size 0xde0000 * Firmware layout for the C9 * Firmware layout for the EAP120 * Firmware layout for the EAP225-Wall v2 * Firmware layout for the EAP245 v3 * Firmware partition with dynamic kernel/rootfs split * Firmware layout for the TL-WA850RE v2 *
		   576KB were moved from file-system to os-image
		   in comparison to the stock image
		* Firmware layout for the TL-WA855RE v1 * Firmware layout for the TL-WPA8630P v2 (EU)* Firmware layout for the TL-WPA8630P v2 (INT)* Firmware layout for the TL-WR1043 v5 * Firmware layout for the TL-WR1043 v4  We're using a dynamic kernel/rootfs split here * Firmware layout for the TL-WR902AC v1 *
		   384KB were moved from file-system to os-image
		   in comparison to the stock image
		* Firmware layout for the TL-WR942N V1 * Firmware layout for the RE200 v2 * Firmware layout for the RE200 v3 * Firmware layout for the RE220 v2 * Firmware layout for the RE305 v1 * Firmware layout for the RE350 v1 * We're using a dynamic kernel/rootfs split here * Firmware layout for the RE350K v1 * We're using a dynamic kernel/rootfs split here * Firmware layout for the RE355  We're using a dynamic kernel/rootfs split here * Firmware layout for the RE450 * We're using a dynamic kernel/rootfs split here * Firmware layout for the RE450 v2  We're using a dynamic kernel/rootfs split here * Firmware layout for the RE450 v3  We're using a dynamic kernel/rootfs split here * Firmware layout for the RE500  We're using a dynamic kernel/rootfs split here * Firmware layout for the RE650  We're using a dynamic kernel/rootfs split here * Stores a uint32 as big endian * Allocates a new image partition * Frees an image partition * Generates the partition-table partition * Generates a binary-coded decimal representation of an integer in the range [0, 99] * Generates the soft-version partition  Partition contents size, minus 8 byte header and trailing byte * String length _including_ the terminating zero byte * Partition contains 64 bit header, the version string, and one additional null byte * Generates the support-list partition * Creates a new image partition with an arbitrary name from a file * Creates a new image partition from arbitrary data *
   Copies a list of image partitions into an image buffer and generates the image partition table while doing so

   Example image partition table:

     fwup-ptn partition-table base 0x00800 size 0x00800
     fwup-ptn os-image base 0x01000 size 0x113b45
     fwup-ptn file-system base 0x114b45 size 0x1d0004
     fwup-ptn support-list base 0x2e4b49 size 0x000d1

   Each line of the partition table is terminated with the bytes 09 0d 0a ("\t\r\n"),
   the end of the partition table is marked with a zero byte.

   The firmware image must contain at least the partition-table and support-list partitions
   to be accepted. There aren't any alignment constraints for the image partitions.

   The partition-table partition contains the actual flash layout; partitions
   from the image partition table are mapped to the corresponding flash partitions during
   the firmware upgrade. The support-list partition contains a list of devices supported by
   the firmware image.

   The base offsets in the firmware partition table are relative to the end
   of the vendor information block, so the partition-table partition will
   actually start at offset 0x1814 of the image.

   I think partition-table must be the first partition in the firmware image.
* Generates and writes the image MD5 checksum *
   Generates the firmware image in factory format

   Image format:

     Bytes (hex)  Usage
     -----------  -----
     0000-0003    Image size (4 bytes, big endian)
     0004-0013    MD5 hash (hash of a 16 byte salt and the image data starting with byte 0x14)
     0014-0017    Vendor information length (without padding) (4 bytes, big endian)
     0018-1013    Vendor information (4092 bytes, padded with 0xff; there seem to be older
                  (VxWorks-based) TP-LINK devices which use a smaller vendor information block)
     1014-1813    Image partition table (2048 bytes, padded with 0xff)
     1814-xxxx    Firmware partitions
*
   Generates the firmware image in sysupgrade format

   This makes some assumptions about the provided flash and image partition tables and
   should be generalized when TP-LINK starts building its safeloader into hardware with
   different flash layouts.
* Find first and last partitions * Find last partition from image to calculate needed size * Generates an image according to a given layout and writes it to a file  Align partition start to erase blocks for factory images only  Some devices need the extra-para partition to accept the firmware * Usage output  check if the list has a free entry * read the partition table into struct flash_partition_entry  TODO: search for the partition table  look for the partition header  in theory this should never happen, because a partition always ends with 0x09, 0x0D, 0x0A  partition header  name  string "base"  actual base  string "size"  actual size. The last element doesn't have a sepeartor  the part ends with 0x09, 0x0d, 0x0a  write last chunk smaller than buffer * extract all partitions from the firmware file  check input file  check if output directory exists  write last chunk smaller than buffer  check input file  the flash partition table has a 0x00000004 magic haeder  write os_image to 0x0  write file-system behind os_image 
  Copyright (c) 2014, Matthias Schiffer <mschiffer@universe-factory.net>
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice,
       this list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright notice,
       this list of conditions and the following disclaimer in the documentation
       and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

   tplink-safeloader

   Image generation tool for the TP-LINK SafeLoader as seen on
   TP-LINK Pharos devices (CPE210/220/510/520)
* An image partition table entry * A flash partition table entry * Firmware layout description * The content of the soft-version structure *
   Salt for the MD5 hash

   Fortunately, TP-LINK seems to use the same salt for most devices which use
   the new image format.
* Firmware layout table * Firmware layout for the CPE210/220 V1 * Firmware layout for the CPE210 V2 * Firmware layout for the CPE210 V3 * Firmware layout for the CPE220 V2 * Firmware layout for the CPE220 V3 * Firmware layout for the CPE510/520 V1 * Firmware layout for the CPE510 V2 * Firmware layout for the CPE510 V3 * Firmware layout for the CPE610V1 * Firmware layout for the CPE610V2 * Firmware layout for the C2600 *
		    We use a bigger os-image partition than the stock images (and thus
		    smaller file-system), as our kernel doesn't fit in the stock firmware's
		    2 MB os-image since kernel 4.14.
		 Stock: base 0x1f0000 size 0x200000  Stock: base 0x3f0000 size 0x1b00000 * Firmware layout for the A7-V5  We're using a dynamic kernel/rootfs split here  Stock: name os-image base 0x40000 size 0x120000  Stock: name file-system base 0x160000 size 0xda0000 * Firmware layout for the C2v3 * We're using a dynamic kernel/rootfs split here * Firmware layout for the C25v1  We're using a dynamic kernel/rootfs split here  Stock: name os-image base 0x30000 size 0x100000  Stock: name file-system base 0x130000 size 0x6a0000 * Firmware layout for the C58v1 * Firmware layout for the C59v1  We're using a dynamic kernel/rootfs split here * Firmware layout for the C59v2 * We're using a dynamic kernel/rootfs split here * Firmware layout for the Archer C6 v2 (EU/RU/JP) * Firmware layout for the Archer C6 v2 (US) and A6 v2 (US/TW) * Firmware layout for the C60v1 * Firmware layout for the C60v2 * Firmware layout for the C60v3 * Firmware layout for the C5  JP version * Firmware layout for the C7  We're using a dynamic kernel/rootfs split here  Stock: name os-image base 0x40000 size 0x120000  Stock: name file-system base 0x160000 size 0xda0000 * Firmware layout for the C7 v5 We're using a dynamic kernel/rootfs split here  Stock: name os-image base 0xc0000  size 0x120000  Stock: name file-system base 0x1e0000 size 0xde0000 * Firmware layout for the C9 * Firmware layout for the EAP120 * Firmware layout for the EAP225-Wall v2 * Firmware layout for the EAP245 v3 * Firmware partition with dynamic kernel/rootfs split * Firmware layout for the TL-WA850RE v2 *
		   576KB were moved from file-system to os-image
		   in comparison to the stock image
		* Firmware layout for the TL-WA855RE v1 * Firmware layout for the TL-WPA8630P v2 (EU)* Firmware layout for the TL-WPA8630P v2 (INT)* Firmware layout for the TL-WR1043 v5 * Firmware layout for the TL-WR1043 v4  We're using a dynamic kernel/rootfs split here * Firmware layout for the TL-WR902AC v1 *
		   384KB were moved from file-system to os-image
		   in comparison to the stock image
		* Firmware layout for the TL-WR942N V1 * Firmware layout for the RE200 v2 * Firmware layout for the RE200 v3 * Firmware layout for the RE220 v2 * Firmware layout for the RE305 v1 * Firmware layout for the RE350 v1 * We're using a dynamic kernel/rootfs split here * Firmware layout for the RE350K v1 * We're using a dynamic kernel/rootfs split here * Firmware layout for the RE355  We're using a dynamic kernel/rootfs split here * Firmware layout for the RE450 * We're using a dynamic kernel/rootfs split here * Firmware layout for the RE450 v2  We're using a dynamic kernel/rootfs split here * Firmware layout for the RE450 v3  We're using a dynamic kernel/rootfs split here * Firmware layout for the RE500  We're using a dynamic kernel/rootfs split here * Firmware layout for the RE650  We're using a dynamic kernel/rootfs split here * Stores a uint32 as big endian * Allocates a new image partition * Frees an image partition * Generates the partition-table partition * Generates a binary-coded decimal representation of an integer in the range [0, 99] * Generates the soft-version partition  Partition contents size, minus 8 byte header and trailing byte * String length _including_ the terminating zero byte * Partition contains 64 bit header, the version string, and one additional null byte * Generates the support-list partition * Creates a new image partition with an arbitrary name from a file * Creates a new image partition from arbitrary data *
   Copies a list of image partitions into an image buffer and generates the image partition table while doing so

   Example image partition table:

     fwup-ptn partition-table base 0x00800 size 0x00800
     fwup-ptn os-image base 0x01000 size 0x113b45
     fwup-ptn file-system base 0x114b45 size 0x1d0004
     fwup-ptn support-list base 0x2e4b49 size 0x000d1

   Each line of the partition table is terminated with the bytes 09 0d 0a ("\t\r\n"),
   the end of the partition table is marked with a zero byte.

   The firmware image must contain at least the partition-table and support-list partitions
   to be accepted. There aren't any alignment constraints for the image partitions.

   The partition-table partition contains the actual flash layout; partitions
   from the image partition table are mapped to the corresponding flash partitions during
   the firmware upgrade. The support-list partition contains a list of devices supported by
   the firmware image.

   The base offsets in the firmware partition table are relative to the end
   of the vendor information block, so the partition-table partition will
   actually start at offset 0x1814 of the image.

   I think partition-table must be the first partition in the firmware image.
* Generates and writes the image MD5 checksum *
   Generates the firmware image in factory format

   Image format:

     Bytes (hex)  Usage
     -----------  -----
     0000-0003    Image size (4 bytes, big endian)
     0004-0013    MD5 hash (hash of a 16 byte salt and the image data starting with byte 0x14)
     0014-0017    Vendor information length (without padding) (4 bytes, big endian)
     0018-1013    Vendor information (4092 bytes, padded with 0xff; there seem to be older
                  (VxWorks-based) TP-LINK devices which use a smaller vendor information block)
     1014-1813    Image partition table (2048 bytes, padded with 0xff)
     1814-xxxx    Firmware partitions
*
   Generates the firmware image in sysupgrade format

   This makes some assumptions about the provided flash and image partition tables and
   should be generalized when TP-LINK starts building its safeloader into hardware with
   different flash layouts.
* Find first and last partitions * Find last partition from image to calculate needed size * Generates an image according to a given layout and writes it to a file  Align partition start to erase blocks for factory images only  Some devices need the extra-para partition to accept the firmware * Usage output  check if the list has a free entry * read the partition table into struct flash_partition_entry  TODO: search for the partition table  look for the partition header  in theory this should never happen, because a partition always ends with 0x09, 0x0D, 0x0A  partition header  name  string "base"  actual base  string "size"  actual size. The last element doesn't have a sepeartor  the part ends with 0x09, 0x0d, 0x0a  write last chunk smaller than buffer * extract all partitions from the firmware file  check input file  check if output directory exists  write last chunk smaller than buffer  check input file  the flash partition table has a 0x00000004 magic haeder  write os_image to 0x0  write file-system behind os_image 
  Copyright (c) 2014, Matthias Schiffer <mschiffer@universe-factory.net>
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice,
       this list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright notice,
       this list of conditions and the following disclaimer in the documentation
       and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

   tplink-safeloader

   Image generation tool for the TP-LINK SafeLoader as seen on
   TP-LINK Pharos devices (CPE210/220/510/520)
* An image partition table entry * A flash partition table entry * Firmware layout description * The content of the soft-version structure *
   Salt for the MD5 hash

   Fortunately, TP-LINK seems to use the same salt for most devices which use
   the new image format.
* Firmware layout table * Firmware layout for the CPE210/220 V1 * Firmware layout for the CPE210 V2 * Firmware layout for the CPE210 V3 * Firmware layout for the CPE220 V2 * Firmware layout for the CPE220 V3 * Firmware layout for the CPE510/520 V1 * Firmware layout for the CPE510 V2 * Firmware layout for the CPE510 V3 * Firmware layout for the CPE610V1 * Firmware layout for the CPE610V2 * Firmware layout for the C2600 *
		    We use a bigger os-image partition than the stock images (and thus
		    smaller file-system), as our kernel doesn't fit in the stock firmware's
		    2 MB os-image since kernel 4.14.
		 Stock: base 0x1f0000 size 0x200000  Stock: base 0x3f0000 size 0x1b00000 * Firmware layout for the A7-V5  We're using a dynamic kernel/rootfs split here  Stock: name os-image base 0x40000 size 0x120000  Stock: name file-system base 0x160000 size 0xda0000 * Firmware layout for the C2v3 * We're using a dynamic kernel/rootfs split here * Firmware layout for the C25v1  We're using a dynamic kernel/rootfs split here  Stock: name os-image base 0x30000 size 0x100000  Stock: name file-system base 0x130000 size 0x6a0000 * Firmware layout for the C58v1 * Firmware layout for the C59v1  We're using a dynamic kernel/rootfs split here * Firmware layout for the C59v2 * We're using a dynamic kernel/rootfs split here * Firmware layout for the Archer C6 v2 (EU/RU/JP) * Firmware layout for the Archer C6 v2 (US) and A6 v2 (US/TW) * Firmware layout for the C60v1 * Firmware layout for the C60v2 * Firmware layout for the C60v3 * Firmware layout for the C5  JP version * Firmware layout for the C7  We're using a dynamic kernel/rootfs split here  Stock: name os-image base 0x40000 size 0x120000  Stock: name file-system base 0x160000 size 0xda0000 * Firmware layout for the C7 v5 We're using a dynamic kernel/rootfs split here  Stock: name os-image base 0xc0000  size 0x120000  Stock: name file-system base 0x1e0000 size 0xde0000 * Firmware layout for the C9 * Firmware layout for the EAP120 * Firmware layout for the EAP225-Wall v2 * Firmware layout for the EAP245 v3 * Firmware partition with dynamic kernel/rootfs split * Firmware layout for the TL-WA850RE v2 *
		   576KB were moved from file-system to os-image
		   in comparison to the stock image
		* Firmware layout for the TL-WA855RE v1 * Firmware layout for the TL-WPA8630P v2 (EU)* Firmware layout for the TL-WPA8630P v2 (INT)* Firmware layout for the TL-WR1043 v5 * Firmware layout for the TL-WR1043 v4  We're using a dynamic kernel/rootfs split here * Firmware layout for the TL-WR902AC v1 *
		   384KB were moved from file-system to os-image
		   in comparison to the stock image
		* Firmware layout for the TL-WR942N V1 * Firmware layout for the RE200 v2 * Firmware layout for the RE200 v3 * Firmware layout for the RE220 v2 * Firmware layout for the RE305 v1 * Firmware layout for the RE350 v1 * We're using a dynamic kernel/rootfs split here * Firmware layout for the RE350K v1 * We're using a dynamic kernel/rootfs split here * Firmware layout for the RE355  We're using a dynamic kernel/rootfs split here * Firmware layout for the RE450 * We're using a dynamic kernel/rootfs split here * Firmware layout for the RE450 v2  We're using a dynamic kernel/rootfs split here * Firmware layout for the RE450 v3  We're using a dynamic kernel/rootfs split here * Firmware layout for the RE500  We're using a dynamic kernel/rootfs split here * Firmware layout for the RE650  We're using a dynamic kernel/rootfs split here * Stores a uint32 as big endian * Allocates a new image partition * Frees an image partition * Generates the partition-table partition * Generates a binary-coded decimal representation of an integer in the range [0, 99] * Generates the soft-version partition  Partition contents size, minus 8 byte header and trailing byte * String length _including_ the terminating zero byte * Partition contains 64 bit header, the version string, and one additional null byte * Generates the support-list partition * Creates a new image partition with an arbitrary name from a file * Creates a new image partition from arbitrary data *
   Copies a list of image partitions into an image buffer and generates the image partition table while doing so

   Example image partition table:

     fwup-ptn partition-table base 0x00800 size 0x00800
     fwup-ptn os-image base 0x01000 size 0x113b45
     fwup-ptn file-system base 0x114b45 size 0x1d0004
     fwup-ptn support-list base 0x2e4b49 size 0x000d1

   Each line of the partition table is terminated with the bytes 09 0d 0a ("\t\r\n"),
   the end of the partition table is marked with a zero byte.

   The firmware image must contain at least the partition-table and support-list partitions
   to be accepted. There aren't any alignment constraints for the image partitions.

   The partition-table partition contains the actual flash layout; partitions
   from the image partition table are mapped to the corresponding flash partitions during
   the firmware upgrade. The support-list partition contains a list of devices supported by
   the firmware image.

   The base offsets in the firmware partition table are relative to the end
   of the vendor information block, so the partition-table partition will
   actually start at offset 0x1814 of the image.

   I think partition-table must be the first partition in the firmware image.
* Generates and writes the image MD5 checksum *
   Generates the firmware image in factory format

   Image format:

     Bytes (hex)  Usage
     -----------  -----
     0000-0003    Image size (4 bytes, big endian)
     0004-0013    MD5 hash (hash of a 16 byte salt and the image data starting with byte 0x14)
     0014-0017    Vendor information length (without padding) (4 bytes, big endian)
     0018-1013    Vendor information (4092 bytes, padded with 0xff; there seem to be older
                  (VxWorks-based) TP-LINK devices which use a smaller vendor information block)
     1014-1813    Image partition table (2048 bytes, padded with 0xff)
     1814-xxxx    Firmware partitions
*
   Generates the firmware image in sysupgrade format

   This makes some assumptions about the provided flash and image partition tables and
   should be generalized when TP-LINK starts building its safeloader into hardware with
   different flash layouts.
* Find first and last partitions * Find last partition from image to calculate needed size * Generates an image according to a given layout and writes it to a file  Align partition start to erase blocks for factory images only  Some devices need the extra-para partition to accept the firmware * Usage output  check if the list has a free entry * read the partition table into struct flash_partition_entry  TODO: search for the partition table  look for the partition header  in theory this should never happen, because a partition always ends with 0x09, 0x0D, 0x0A  partition header  name  string "base"  actual base  string "size"  actual size. The last element doesn't have a sepeartor  the part ends with 0x09, 0x0d, 0x0a  write last chunk smaller than buffer * extract all partitions from the firmware file  check input file  check if output directory exists  write last chunk smaller than buffer  check input file  the flash partition table has a 0x00000004 magic haeder  write os_image to 0x0  write file-system behind os_image 