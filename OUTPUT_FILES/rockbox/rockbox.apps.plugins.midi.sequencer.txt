**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Stepan Moskovchenko
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** From the old patch config.... each patch is scaled.
 * Should be moved into patchset.cfg
 * But everyone would need a new config file.
 *
 * While this really does need to go into the patch config,
 * I doubt anyone has made their own custom rockbox patchset
 * (if you have, please send a copy my way :) )
  Sets the volume scaling by channel volume and note volume  This way we can do the multiplication/indexing once per    MIDI event at the most, instead of once per sample.       ((signed short int)so->vol*(signed short int)chVol[ch])*patchScale[chPat[ch]]; If channel volume changes, we need to recalculate the volume scale  factor for all voices active on this channel                       
    This is the new pitch bend table. There are 512 entries.
    The middle entry is exactly 65536 - no bending.

    The range of the table is one semitone /in either direction/
    Ie, one semitone from the center.

    Bends beyond this can be achieved by first offsetting the index
    into the GUS frequency table by the appropriate number of semitones,
    and then using this table to bend the rest of the way.

    Generated using Matlab code:
    for i=0:512, fprintf('%d,', round(2^16*2^((i-256)/1536))); end
 Used to be unsigned int, but math had to be done in different order to avoid overflow 
    Old formula:
    delta = (((freqtable[note+chPBNoteOffset[ch]]<<FRACTSIZE) / (wf->rootFreq)) * wf->sampRate / (SAMPLE_RATE));

    Plus some pitch stuff. See old SVN for how it used to be
 anywhere from 8000 to 8000000  approx 20000 - 44000 but can vary with tuning  approx 60000 - 70000  44100 or 22050  anywhere from 8000 to 8000000  Pitch bend is encoded as a fractional of 16 bits, hence the 16  a shift of approx 4 bits  Silences all channels but one, for easy debugging, for me. 
    if(ch == 0) return;
    if(ch == 1) return;
    if(ch == 2) return;
    if(ch == 3) return;
    if(ch == 4) return;
    if(ch == 5) return;
    if(ch == 6) return;
    if(ch == 7) return;
    if(ch == 8) return;
    if(ch == 9) return;
    if(ch == 10) return;
    if(ch == 11) return;
    if(ch == 12) return;
    if(ch == 13) return;
    if(ch == 14) return;
    if(ch == 15) return;
        midi_debug("\nVoice kill");        midi_debug("\nToo many voices playing at once. No more left");        midi_debug("\nVOICE DUMP: ");        for(a=0; a<48; a++)            midi_debug("\n#%d  Ch=%d  Note=%d  curRate=%d   curOffset=%d   curPoint=%d   targetOffset=%d", a, voices[a].ch, voices[a].note, voices[a].curRate, voices[a].curOffset, voices[a].curPoint, voices[a].targetOffset);        return; /* None available */
     * OKAY. Gt = Gus Table value
     * rf = Root Frequency of wave
     * SR = sound sampling rate
     * sr = WAVE sampling rate
      Turn it on                 midi_debug("\nWoah, a drum patch has a loop. Stripping the loop..."); Turn it on             midi_debug("\nWarning: drum %d does not have a patch defined... Ignoring it", note);  TODO: Update all deltas. Is this really needed?                          midi_debug("Pitch bend depth set to %d\n", d2); Ignore nonregistered writes  Ignore nonregistered writes  Release by vol=0 BIG DEBUG STATEMENTmidi_debug("\nTrack %2d,  Event = %4d of %4d,   Delta = %5d,    Next = %4d", a, tr->pos, tr->numEvents, tr->delta, getEvent(tr, tr->pos)->delta);                        midi_debug("\nPatch Event, patch[%d] ==> %d", e->status&0xF, e->d1);                         midi_debug("\nMeta-Event: Tempo Set = %d", tempo);  Rewind 5 sec  Set controllers to default values  Set the tempo to defalt  Reset the tracks to start  Reset the time counter to 0  Quickly run through any initial things that occur before notes  Reset the time counter to 0  Tick until goal is reached **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Stepan Moskovchenko
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** From the old patch config.... each patch is scaled.
 * Should be moved into patchset.cfg
 * But everyone would need a new config file.
 *
 * While this really does need to go into the patch config,
 * I doubt anyone has made their own custom rockbox patchset
 * (if you have, please send a copy my way :) )
  Sets the volume scaling by channel volume and note volume  This way we can do the multiplication/indexing once per    MIDI event at the most, instead of once per sample.       ((signed short int)so->vol*(signed short int)chVol[ch])*patchScale[chPat[ch]]; If channel volume changes, we need to recalculate the volume scale  factor for all voices active on this channel                       
    This is the new pitch bend table. There are 512 entries.
    The middle entry is exactly 65536 - no bending.

    The range of the table is one semitone /in either direction/
    Ie, one semitone from the center.

    Bends beyond this can be achieved by first offsetting the index
    into the GUS frequency table by the appropriate number of semitones,
    and then using this table to bend the rest of the way.

    Generated using Matlab code:
    for i=0:512, fprintf('%d,', round(2^16*2^((i-256)/1536))); end
 Used to be unsigned int, but math had to be done in different order to avoid overflow 
    Old formula:
    delta = (((freqtable[note+chPBNoteOffset[ch]]<<FRACTSIZE) / (wf->rootFreq)) * wf->sampRate / (SAMPLE_RATE));

    Plus some pitch stuff. See old SVN for how it used to be
 anywhere from 8000 to 8000000  approx 20000 - 44000 but can vary with tuning  approx 60000 - 70000  44100 or 22050  anywhere from 8000 to 8000000  Pitch bend is encoded as a fractional of 16 bits, hence the 16  a shift of approx 4 bits  Silences all channels but one, for easy debugging, for me. 
    if(ch == 0) return;
    if(ch == 1) return;
    if(ch == 2) return;
    if(ch == 3) return;
    if(ch == 4) return;
    if(ch == 5) return;
    if(ch == 6) return;
    if(ch == 7) return;
    if(ch == 8) return;
    if(ch == 9) return;
    if(ch == 10) return;
    if(ch == 11) return;
    if(ch == 12) return;
    if(ch == 13) return;
    if(ch == 14) return;
    if(ch == 15) return;
        midi_debug("\nVoice kill");        midi_debug("\nToo many voices playing at once. No more left");        midi_debug("\nVOICE DUMP: ");        for(a=0; a<48; a++)            midi_debug("\n#%d  Ch=%d  Note=%d  curRate=%d   curOffset=%d   curPoint=%d   targetOffset=%d", a, voices[a].ch, voices[a].note, voices[a].curRate, voices[a].curOffset, voices[a].curPoint, voices[a].targetOffset);        return; /* None available */
     * OKAY. Gt = Gus Table value
     * rf = Root Frequency of wave
     * SR = sound sampling rate
     * sr = WAVE sampling rate
      Turn it on                 midi_debug("\nWoah, a drum patch has a loop. Stripping the loop..."); Turn it on             midi_debug("\nWarning: drum %d does not have a patch defined... Ignoring it", note);  TODO: Update all deltas. Is this really needed?                          midi_debug("Pitch bend depth set to %d\n", d2); Ignore nonregistered writes  Ignore nonregistered writes  Release by vol=0 BIG DEBUG STATEMENTmidi_debug("\nTrack %2d,  Event = %4d of %4d,   Delta = %5d,    Next = %4d", a, tr->pos, tr->numEvents, tr->delta, getEvent(tr, tr->pos)->delta);                        midi_debug("\nPatch Event, patch[%d] ==> %d", e->status&0xF, e->d1);                         midi_debug("\nMeta-Event: Tempo Set = %d", tempo);  Rewind 5 sec  Set controllers to default values  Set the tempo to defalt  Reset the tracks to start  Reset the time counter to 0  Quickly run through any initial things that occur before notes  Reset the time counter to 0  Tick until goal is reached **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2005 Stepan Moskovchenko
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** From the old patch config.... each patch is scaled.
 * Should be moved into patchset.cfg
 * But everyone would need a new config file.
 *
 * While this really does need to go into the patch config,
 * I doubt anyone has made their own custom rockbox patchset
 * (if you have, please send a copy my way :) )
  Sets the volume scaling by channel volume and note volume  This way we can do the multiplication/indexing once per    MIDI event at the most, instead of once per sample.       ((signed short int)so->vol*(signed short int)chVol[ch])*patchScale[chPat[ch]]; If channel volume changes, we need to recalculate the volume scale  factor for all voices active on this channel                       
    This is the new pitch bend table. There are 512 entries.
    The middle entry is exactly 65536 - no bending.

    The range of the table is one semitone /in either direction/
    Ie, one semitone from the center.

    Bends beyond this can be achieved by first offsetting the index
    into the GUS frequency table by the appropriate number of semitones,
    and then using this table to bend the rest of the way.

    Generated using Matlab code:
    for i=0:512, fprintf('%d,', round(2^16*2^((i-256)/1536))); end
 Used to be unsigned int, but math had to be done in different order to avoid overflow 
    Old formula:
    delta = (((freqtable[note+chPBNoteOffset[ch]]<<FRACTSIZE) / (wf->rootFreq)) * wf->sampRate / (SAMPLE_RATE));

    Plus some pitch stuff. See old SVN for how it used to be
 anywhere from 8000 to 8000000  approx 20000 - 44000 but can vary with tuning  approx 60000 - 70000  44100 or 22050  anywhere from 8000 to 8000000  Pitch bend is encoded as a fractional of 16 bits, hence the 16  a shift of approx 4 bits  Silences all channels but one, for easy debugging, for me. 
    if(ch == 0) return;
    if(ch == 1) return;
    if(ch == 2) return;
    if(ch == 3) return;
    if(ch == 4) return;
    if(ch == 5) return;
    if(ch == 6) return;
    if(ch == 7) return;
    if(ch == 8) return;
    if(ch == 9) return;
    if(ch == 10) return;
    if(ch == 11) return;
    if(ch == 12) return;
    if(ch == 13) return;
    if(ch == 14) return;
    if(ch == 15) return;
        midi_debug("\nVoice kill");        midi_debug("\nToo many voices playing at once. No more left");        midi_debug("\nVOICE DUMP: ");        for(a=0; a<48; a++)            midi_debug("\n#%d  Ch=%d  Note=%d  curRate=%d   curOffset=%d   curPoint=%d   targetOffset=%d", a, voices[a].ch, voices[a].note, voices[a].curRate, voices[a].curOffset, voices[a].curPoint, voices[a].targetOffset);        return; /* None available */
     * OKAY. Gt = Gus Table value
     * rf = Root Frequency of wave
     * SR = sound sampling rate
     * sr = WAVE sampling rate
      Turn it on                 midi_debug("\nWoah, a drum patch has a loop. Stripping the loop..."); Turn it on             midi_debug("\nWarning: drum %d does not have a patch defined... Ignoring it", note);  TODO: Update all deltas. Is this really needed?                          midi_debug("Pitch bend depth set to %d\n", d2); Ignore nonregistered writes  Ignore nonregistered writes  Release by vol=0 BIG DEBUG STATEMENTmidi_debug("\nTrack %2d,  Event = %4d of %4d,   Delta = %5d,    Next = %4d", a, tr->pos, tr->numEvents, tr->delta, getEvent(tr, tr->pos)->delta);                        midi_debug("\nPatch Event, patch[%d] ==> %d", e->status&0xF, e->d1);                         midi_debug("\nMeta-Event: Tempo Set = %d", tempo);  Rewind 5 sec  Set controllers to default values  Set the tempo to defalt  Reset the tracks to start  Reset the time counter to 0  Quickly run through any initial things that occur before notes  Reset the time counter to 0  Tick until goal is reached 