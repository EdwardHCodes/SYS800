**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Linus Nielsen Feltzing
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Most code in here is taken from the Linux BSP provided by Freescale
 * Copyright 2004-2006 Freescale Semiconductor, Inc. All Rights Reserved.  Buttons not on KPP  Scan the keypad port and return the pressed buttons  BUTTON_LEFT...BUTTON_SELECT  BUTTON_BACK...BUTTON_MENU    BUTTON_VOL_UP...BUTTON_NEXT  Col  2. Write 1s to KPDR[10:8] setting column data to 1s  3. Configure columns as totem pole outputs(for quick
         * discharging of keypad capacitance)  Give the columns time to discharge  4. Configure columns as open-drain  5. Write a single column to 0, others to 1.
         * 6. Sample row inputs and save data. Multiple key presses
         *    can be detected on a single column.
         * 7. Repeat steps 2 - 6 for remaining columns.  Col bit starts at 8th bit in KPDR  Delay added to avoid propagating the 0 from column to row
         * when scanning.  Read row input  8. Return all columns to 0 in preparation for standby mode.  9. Clear KPKD and KPKR status bit(s) by writing to a .1.,
     *    set the KPKR synchronizer chain by writing "1" to KRSS register,
     *    clear the KPKD synchronizer chain by writing "1" to KDSC register  Headphone driver pushes the data here  Simple poll of GPIO status  Backlight hold handling  Check status for key down flag and scan port if so indicated.  If hold, ignore any pressed button. Remote has its own hold
     * switch, so return state regardless.  If hold, ignore any pressed button.   Helper to update the power button status  Power button event - called from PMIC ISR  Can be called more than once in the bootloader  Enable keypad clock  1. Enable number of rows in keypad (KPCR[4:0])
     *
     * Configure the rows/cols in KPP
     * LSB nybble in KPP is for 5 rows
     * MSB nybble in KPP is for 3 cols  2. Write 0's to KPDR[10:8]  3. Configure the keypad columns as open-drain (KPCR[10:8]).  4. Configure columns as output, rows as input (KDDR[10:8,4:0])  5. Clear the KPKD Status Flag and Synchronizer chain.
     * 6. Set the KDIE control bit bit.  Assumes HP detection is not available  BUTTON_DRIVER_CLOSE **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Linus Nielsen Feltzing
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Most code in here is taken from the Linux BSP provided by Freescale
 * Copyright 2004-2006 Freescale Semiconductor, Inc. All Rights Reserved.  Buttons not on KPP  Scan the keypad port and return the pressed buttons  BUTTON_LEFT...BUTTON_SELECT  BUTTON_BACK...BUTTON_MENU    BUTTON_VOL_UP...BUTTON_NEXT  Col  2. Write 1s to KPDR[10:8] setting column data to 1s  3. Configure columns as totem pole outputs(for quick
         * discharging of keypad capacitance)  Give the columns time to discharge  4. Configure columns as open-drain  5. Write a single column to 0, others to 1.
         * 6. Sample row inputs and save data. Multiple key presses
         *    can be detected on a single column.
         * 7. Repeat steps 2 - 6 for remaining columns.  Col bit starts at 8th bit in KPDR  Delay added to avoid propagating the 0 from column to row
         * when scanning.  Read row input  8. Return all columns to 0 in preparation for standby mode.  9. Clear KPKD and KPKR status bit(s) by writing to a .1.,
     *    set the KPKR synchronizer chain by writing "1" to KRSS register,
     *    clear the KPKD synchronizer chain by writing "1" to KDSC register  Headphone driver pushes the data here  Simple poll of GPIO status  Backlight hold handling  Check status for key down flag and scan port if so indicated.  If hold, ignore any pressed button. Remote has its own hold
     * switch, so return state regardless.  If hold, ignore any pressed button.   Helper to update the power button status  Power button event - called from PMIC ISR  Can be called more than once in the bootloader  Enable keypad clock  1. Enable number of rows in keypad (KPCR[4:0])
     *
     * Configure the rows/cols in KPP
     * LSB nybble in KPP is for 5 rows
     * MSB nybble in KPP is for 3 cols  2. Write 0's to KPDR[10:8]  3. Configure the keypad columns as open-drain (KPCR[10:8]).  4. Configure columns as output, rows as input (KDDR[10:8,4:0])  5. Clear the KPKD Status Flag and Synchronizer chain.
     * 6. Set the KDIE control bit bit.  Assumes HP detection is not available  BUTTON_DRIVER_CLOSE **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Linus Nielsen Feltzing
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Most code in here is taken from the Linux BSP provided by Freescale
 * Copyright 2004-2006 Freescale Semiconductor, Inc. All Rights Reserved.  Buttons not on KPP  Scan the keypad port and return the pressed buttons  BUTTON_LEFT...BUTTON_SELECT  BUTTON_BACK...BUTTON_MENU    BUTTON_VOL_UP...BUTTON_NEXT  Col  2. Write 1s to KPDR[10:8] setting column data to 1s  3. Configure columns as totem pole outputs(for quick
         * discharging of keypad capacitance)  Give the columns time to discharge  4. Configure columns as open-drain  5. Write a single column to 0, others to 1.
         * 6. Sample row inputs and save data. Multiple key presses
         *    can be detected on a single column.
         * 7. Repeat steps 2 - 6 for remaining columns.  Col bit starts at 8th bit in KPDR  Delay added to avoid propagating the 0 from column to row
         * when scanning.  Read row input  8. Return all columns to 0 in preparation for standby mode.  9. Clear KPKD and KPKR status bit(s) by writing to a .1.,
     *    set the KPKR synchronizer chain by writing "1" to KRSS register,
     *    clear the KPKD synchronizer chain by writing "1" to KDSC register  Headphone driver pushes the data here  Simple poll of GPIO status  Backlight hold handling  Check status for key down flag and scan port if so indicated.  If hold, ignore any pressed button. Remote has its own hold
     * switch, so return state regardless.  If hold, ignore any pressed button.   Helper to update the power button status  Power button event - called from PMIC ISR  Can be called more than once in the bootloader  Enable keypad clock  1. Enable number of rows in keypad (KPCR[4:0])
     *
     * Configure the rows/cols in KPP
     * LSB nybble in KPP is for 5 rows
     * MSB nybble in KPP is for 3 cols  2. Write 0's to KPDR[10:8]  3. Configure the keypad columns as open-drain (KPCR[10:8]).  4. Configure columns as output, rows as input (KDDR[10:8,4:0])  5. Clear the KPKD Status Flag and Synchronizer chain.
     * 6. Set the KDIE control bit bit.  Assumes HP detection is not available  BUTTON_DRIVER_CLOSE 