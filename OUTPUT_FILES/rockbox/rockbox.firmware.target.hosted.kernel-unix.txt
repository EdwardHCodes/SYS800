**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2010 Thomas Martitz
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Forward-declaration 
 * call tick tasks and wake the scheduler up 
 * wait on the sem which the signal handler posts to save cpu time (aka sleep)
 *
 * other mechanisms could use them as well 
 * Wakeup the kernel, if sleeping (shall not be called from a signal handler) 
 * setup a hrtimer to send a signal to our process every tick
 *
 * WARNING for Android: JNI calls are not permitted from tick tasks, as the
 * underlying thread is not attached to the Java VM
 *
 * Can be possibly be attached if it really needs to be. but let's
 * keep this leightweight
  initializing in the declaration causes some weird warnings  add the timer  Grab the mutex already now and leave it to this thread. We don't
     * care about race conditions when signaling the condition (because
     * they are not critical), but a mutex is necessary due to the API  check for spurious callbacks [arg.sival_ptr]  timer has callback user needs to unreg  no callback -- delete timer  store cb to check later  add the timer **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2010 Thomas Martitz
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Forward-declaration 
 * call tick tasks and wake the scheduler up 
 * wait on the sem which the signal handler posts to save cpu time (aka sleep)
 *
 * other mechanisms could use them as well 
 * Wakeup the kernel, if sleeping (shall not be called from a signal handler) 
 * setup a hrtimer to send a signal to our process every tick
 *
 * WARNING for Android: JNI calls are not permitted from tick tasks, as the
 * underlying thread is not attached to the Java VM
 *
 * Can be possibly be attached if it really needs to be. but let's
 * keep this leightweight
  initializing in the declaration causes some weird warnings  add the timer  Grab the mutex already now and leave it to this thread. We don't
     * care about race conditions when signaling the condition (because
     * they are not critical), but a mutex is necessary due to the API  check for spurious callbacks [arg.sival_ptr]  timer has callback user needs to unreg  no callback -- delete timer  store cb to check later  add the timer **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2010 Thomas Martitz
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Forward-declaration 
 * call tick tasks and wake the scheduler up 
 * wait on the sem which the signal handler posts to save cpu time (aka sleep)
 *
 * other mechanisms could use them as well 
 * Wakeup the kernel, if sleeping (shall not be called from a signal handler) 
 * setup a hrtimer to send a signal to our process every tick
 *
 * WARNING for Android: JNI calls are not permitted from tick tasks, as the
 * underlying thread is not attached to the Java VM
 *
 * Can be possibly be attached if it really needs to be. but let's
 * keep this leightweight
  initializing in the declaration causes some weird warnings  add the timer  Grab the mutex already now and leave it to this thread. We don't
     * care about race conditions when signaling the condition (because
     * they are not critical), but a mutex is necessary due to the API  check for spurious callbacks [arg.sival_ptr]  timer has callback user needs to unreg  no callback -- delete timer  store cb to check later  add the timer 