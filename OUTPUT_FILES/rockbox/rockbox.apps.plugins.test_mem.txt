**************************************************************************
*             __________               __   ___.
*   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
*   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
*   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
*   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
*                     \/            \/     \/    \/            \/
* $Id$
*
* Copyright (C) 2010 Thomas Martitz, Andree Buschmann
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
* KIND, either express or implied.
*
*************************************************************************** 16 KB = (1<<12)*sizeof(int)  32 KB = (1<<13)*sizeof(int)  64 KB = (1<<14)*sizeof(int)  128 KB = (1<<15)*sizeof(int)  16 KB = (1<<12)*sizeof(int)  32 KB = (1<<13)*sizeof(int)  (Byte per loop * loops)>>20 * ticks per s * 10 / ticks = dMB per s  half-size memcpy since memory regions must not overlap  double loop count to compensate for half size memcpy  The loop_cnt will be increased for the next measurement set until 
         * each measurement at least takes 10 ticks. This is to ensure a
         * minimum accuracy. **************************************************************************
*             __________               __   ___.
*   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
*   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
*   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
*   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
*                     \/            \/     \/    \/            \/
* $Id$
*
* Copyright (C) 2010 Thomas Martitz, Andree Buschmann
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
* KIND, either express or implied.
*
*************************************************************************** 16 KB = (1<<12)*sizeof(int)  32 KB = (1<<13)*sizeof(int)  64 KB = (1<<14)*sizeof(int)  128 KB = (1<<15)*sizeof(int)  16 KB = (1<<12)*sizeof(int)  32 KB = (1<<13)*sizeof(int)  (Byte per loop * loops)>>20 * ticks per s * 10 / ticks = dMB per s  half-size memcpy since memory regions must not overlap  double loop count to compensate for half size memcpy  The loop_cnt will be increased for the next measurement set until 
         * each measurement at least takes 10 ticks. This is to ensure a
         * minimum accuracy. **************************************************************************
*             __________               __   ___.
*   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
*   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
*   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
*   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
*                     \/            \/     \/    \/            \/
* $Id$
*
* Copyright (C) 2010 Thomas Martitz, Andree Buschmann
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
* KIND, either express or implied.
*
*************************************************************************** 16 KB = (1<<12)*sizeof(int)  32 KB = (1<<13)*sizeof(int)  64 KB = (1<<14)*sizeof(int)  128 KB = (1<<15)*sizeof(int)  16 KB = (1<<12)*sizeof(int)  32 KB = (1<<13)*sizeof(int)  (Byte per loop * loops)>>20 * ticks per s * 10 / ticks = dMB per s  half-size memcpy since memory regions must not overlap  double loop count to compensate for half size memcpy  The loop_cnt will be increased for the next measurement set until 
         * each measurement at least takes 10 ticks. This is to ensure a
         * minimum accuracy. 