
 * WRT400n - Firmware Generation Creator
 *
 * Creates a firmware image for the Linksys WRT400n router,
 * that can be uploaded via the firmware upload page,
 * from a kernel image file and root fs file
 *
 *	Author: Sandeep Mistry
  https://dev.openwrt.org/browser/trunk/target/linux/rdc-2.6/files/drivers/mtd/maps/rdc3210.c global variables kernel - lzma - uImage root - squashfs buffer for image Header format:		GPL Tarball: http://downloads.linksysbycisco.com/downloads/WRT400N_1.0.01.19_US.tar,0.gz		File: WRT400N_1.0.01.19_US/FW_WRT400N_1.0.01.19_US_20081229/GTK/user/include/fw_upgrade.h		Struct:			typedef struct			{				UINT32		checksum;		/* CRC32 */				UINT8			magic[11];		/* The value of GTIMG_MAGIC */				UINT32		kernel_length;		/* The length of the kernel image */				//UINT32		kernel_entry_point;	/* Kernel's entry point for RedBoot's information */				UINT32		kernel_upgrade_flag;	/* Set to 1 if we need to upgrade the kernel parition of the Flash */				UINT32		rootfs_length;		/* The length of the rootfs image */				//UINT32		rootfs_entry_point;	/* Not in use */				UINT32		rootfs_upgrade_flag;	/* Set to 1 if we need to upgrade the rootfs parition of the Flash */				// Add 3 items by Vic Yu, 2006-05/10				UINT32		kernel_checksum;				UINT32		rootfs_checksum;				UINT32		fw_totalsize;				UINT32		reserved[4];			}imghdr_t , *pLinuxFWHeader_T;		Description			- checksum: 			CRC32 of kernel and root fs, back to back			- magic:				GMTKRT400N			- kernel_length:		kernel length in bytes			- kernel_upgrade_flag:	should we upgrade the kernel - set to 1			- rootfs_length:		root fs length in byte			- rootfs_upgrade_flag:	should we upgrade the root fs - set to 1			- kernel_checksum: 		Gary S. Brown's 32 bit CRC algorithm for kernel, with remaining bits									set to 0xFF upto 0x100000 bytes (total length)			- rootfs_checksum:		Gary S. Brown's 32 bit CRC algorithm for root fs, with remaining bits									set to 0xFF upto 0x2FFFC4 bytes	(total length)			- fw_totalsize:			total firmware image file length (header length + kernel length + root fs length)			- reserved[4]:			reserved ??? - set to all 0xFF file descriptors ... file sizes header flags checksums Fill the kernel, rootfs, main buffer open the kernel .. read in the kernel ... calculate the kernel checksum ... print out stats open the root fs .. read in the root fs .. calculate the root fs checksum ... print out stats now for the header ... copy over kernel copy over root fs calculate crc print some stats out copy crc into header copy over magic copy over kernel size copy over kernal flag copy over root fs size copy over root fs flag copy over kernel check sum copy over root fs checksum copy over total size undo the htonl (for write) write out the file from the buffer close open fd's
 * WRT400n - Firmware Generation Creator
 *
 * Creates a firmware image for the Linksys WRT400n router,
 * that can be uploaded via the firmware upload page,
 * from a kernel image file and root fs file
 *
 *	Author: Sandeep Mistry
  https://dev.openwrt.org/browser/trunk/target/linux/rdc-2.6/files/drivers/mtd/maps/rdc3210.c global variables kernel - lzma - uImage root - squashfs buffer for image Header format:		GPL Tarball: http://downloads.linksysbycisco.com/downloads/WRT400N_1.0.01.19_US.tar,0.gz		File: WRT400N_1.0.01.19_US/FW_WRT400N_1.0.01.19_US_20081229/GTK/user/include/fw_upgrade.h		Struct:			typedef struct			{				UINT32		checksum;		/* CRC32 */				UINT8			magic[11];		/* The value of GTIMG_MAGIC */				UINT32		kernel_length;		/* The length of the kernel image */				//UINT32		kernel_entry_point;	/* Kernel's entry point for RedBoot's information */				UINT32		kernel_upgrade_flag;	/* Set to 1 if we need to upgrade the kernel parition of the Flash */				UINT32		rootfs_length;		/* The length of the rootfs image */				//UINT32		rootfs_entry_point;	/* Not in use */				UINT32		rootfs_upgrade_flag;	/* Set to 1 if we need to upgrade the rootfs parition of the Flash */				// Add 3 items by Vic Yu, 2006-05/10				UINT32		kernel_checksum;				UINT32		rootfs_checksum;				UINT32		fw_totalsize;				UINT32		reserved[4];			}imghdr_t , *pLinuxFWHeader_T;		Description			- checksum: 			CRC32 of kernel and root fs, back to back			- magic:				GMTKRT400N			- kernel_length:		kernel length in bytes			- kernel_upgrade_flag:	should we upgrade the kernel - set to 1			- rootfs_length:		root fs length in byte			- rootfs_upgrade_flag:	should we upgrade the root fs - set to 1			- kernel_checksum: 		Gary S. Brown's 32 bit CRC algorithm for kernel, with remaining bits									set to 0xFF upto 0x100000 bytes (total length)			- rootfs_checksum:		Gary S. Brown's 32 bit CRC algorithm for root fs, with remaining bits									set to 0xFF upto 0x2FFFC4 bytes	(total length)			- fw_totalsize:			total firmware image file length (header length + kernel length + root fs length)			- reserved[4]:			reserved ??? - set to all 0xFF file descriptors ... file sizes header flags checksums Fill the kernel, rootfs, main buffer open the kernel .. read in the kernel ... calculate the kernel checksum ... print out stats open the root fs .. read in the root fs .. calculate the root fs checksum ... print out stats now for the header ... copy over kernel copy over root fs calculate crc print some stats out copy crc into header copy over magic copy over kernel size copy over kernal flag copy over root fs size copy over root fs flag copy over kernel check sum copy over root fs checksum copy over total size undo the htonl (for write) write out the file from the buffer close open fd's
 * WRT400n - Firmware Generation Creator
 *
 * Creates a firmware image for the Linksys WRT400n router,
 * that can be uploaded via the firmware upload page,
 * from a kernel image file and root fs file
 *
 *	Author: Sandeep Mistry
  https://dev.openwrt.org/browser/trunk/target/linux/rdc-2.6/files/drivers/mtd/maps/rdc3210.c global variables kernel - lzma - uImage root - squashfs buffer for image Header format:		GPL Tarball: http://downloads.linksysbycisco.com/downloads/WRT400N_1.0.01.19_US.tar,0.gz		File: WRT400N_1.0.01.19_US/FW_WRT400N_1.0.01.19_US_20081229/GTK/user/include/fw_upgrade.h		Struct:			typedef struct			{				UINT32		checksum;		/* CRC32 */				UINT8			magic[11];		/* The value of GTIMG_MAGIC */				UINT32		kernel_length;		/* The length of the kernel image */				//UINT32		kernel_entry_point;	/* Kernel's entry point for RedBoot's information */				UINT32		kernel_upgrade_flag;	/* Set to 1 if we need to upgrade the kernel parition of the Flash */				UINT32		rootfs_length;		/* The length of the rootfs image */				//UINT32		rootfs_entry_point;	/* Not in use */				UINT32		rootfs_upgrade_flag;	/* Set to 1 if we need to upgrade the rootfs parition of the Flash */				// Add 3 items by Vic Yu, 2006-05/10				UINT32		kernel_checksum;				UINT32		rootfs_checksum;				UINT32		fw_totalsize;				UINT32		reserved[4];			}imghdr_t , *pLinuxFWHeader_T;		Description			- checksum: 			CRC32 of kernel and root fs, back to back			- magic:				GMTKRT400N			- kernel_length:		kernel length in bytes			- kernel_upgrade_flag:	should we upgrade the kernel - set to 1			- rootfs_length:		root fs length in byte			- rootfs_upgrade_flag:	should we upgrade the root fs - set to 1			- kernel_checksum: 		Gary S. Brown's 32 bit CRC algorithm for kernel, with remaining bits									set to 0xFF upto 0x100000 bytes (total length)			- rootfs_checksum:		Gary S. Brown's 32 bit CRC algorithm for root fs, with remaining bits									set to 0xFF upto 0x2FFFC4 bytes	(total length)			- fw_totalsize:			total firmware image file length (header length + kernel length + root fs length)			- reserved[4]:			reserved ??? - set to all 0xFF file descriptors ... file sizes header flags checksums Fill the kernel, rootfs, main buffer open the kernel .. read in the kernel ... calculate the kernel checksum ... print out stats open the root fs .. read in the root fs .. calculate the root fs checksum ... print out stats now for the header ... copy over kernel copy over root fs calculate crc print some stats out copy crc into header copy over magic copy over kernel size copy over kernal flag copy over root fs size copy over root fs flag copy over kernel check sum copy over root fs checksum copy over total size undo the htonl (for write) write out the file from the buffer close open fd's