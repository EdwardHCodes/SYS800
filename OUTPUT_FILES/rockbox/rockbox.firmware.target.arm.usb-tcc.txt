**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Vitja Makarov
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** endpoint direction  hw ep buffer  Endpoint id  Endpoint bit mask  user buffer to store data  how match data will fit  actual data count  control  bulk  bulk  interrupt  control are always 8 bytes len  select control endpoint  RX  bad control?  simply read control packet  TX  TODO: remove me someday DEBUG(2,  TODO: don't pass some kinds of requests to upper level DEBUG(2, "USB_REQ_SET_ADDRESS, %d %d", req->wValue, TCC7xx_USB_FUNC); seems we don't have to set it manually
           TCC7xx_USB_FUNC = req->wValue;  read data  lwo  TODO: use INGLD?     if (tcc_ep->buf == NULL) {        panicf_my("%s:%d", __FILE__, __LINE__);    }    TCC7xx_USB_EP_STAT = 0x2; /* Clear TX stat */ tcc_ep->buf == NULL) {        usb_core_transfer_complete(tcc_ep->id, USB_DIR_IN, 0, tcc_ep->count); TODO: remove me?  control endpoint  ep1: bulk-in, to host  ep2: bulk-out, from host  ep3: interrupt in 
  Reset TCC7xx usb device
  IRQ handler     TCC7xx_USB_SYS_STAT = sys_stat; is that really needed, btw not a problem for rockbox  Clear TX stat         return true; TODO: use interrupts instead  TODO: check ep            usb_core_transfer_complete(tcc_endpoints[endpoint].id,
                                        tcc_endpoints[endpoint].dir, -1, 0);  Enable USB clock  switch USB to host and then reset  unmask irq  TODO: not correct for all targets, we should poll VBUS
       signal on USB bus.         usb_serial_send("Hello\r\n", 7); simply switch USB off for now  Always return false for now **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Vitja Makarov
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** endpoint direction  hw ep buffer  Endpoint id  Endpoint bit mask  user buffer to store data  how match data will fit  actual data count  control  bulk  bulk  interrupt  control are always 8 bytes len  select control endpoint  RX  bad control?  simply read control packet  TX  TODO: remove me someday DEBUG(2,  TODO: don't pass some kinds of requests to upper level DEBUG(2, "USB_REQ_SET_ADDRESS, %d %d", req->wValue, TCC7xx_USB_FUNC); seems we don't have to set it manually
           TCC7xx_USB_FUNC = req->wValue;  read data  lwo  TODO: use INGLD?     if (tcc_ep->buf == NULL) {        panicf_my("%s:%d", __FILE__, __LINE__);    }    TCC7xx_USB_EP_STAT = 0x2; /* Clear TX stat */ tcc_ep->buf == NULL) {        usb_core_transfer_complete(tcc_ep->id, USB_DIR_IN, 0, tcc_ep->count); TODO: remove me?  control endpoint  ep1: bulk-in, to host  ep2: bulk-out, from host  ep3: interrupt in 
  Reset TCC7xx usb device
  IRQ handler     TCC7xx_USB_SYS_STAT = sys_stat; is that really needed, btw not a problem for rockbox  Clear TX stat         return true; TODO: use interrupts instead  TODO: check ep            usb_core_transfer_complete(tcc_endpoints[endpoint].id,
                                        tcc_endpoints[endpoint].dir, -1, 0);  Enable USB clock  switch USB to host and then reset  unmask irq  TODO: not correct for all targets, we should poll VBUS
       signal on USB bus.         usb_serial_send("Hello\r\n", 7); simply switch USB off for now  Always return false for now **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2008 by Vitja Makarov
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** endpoint direction  hw ep buffer  Endpoint id  Endpoint bit mask  user buffer to store data  how match data will fit  actual data count  control  bulk  bulk  interrupt  control are always 8 bytes len  select control endpoint  RX  bad control?  simply read control packet  TX  TODO: remove me someday DEBUG(2,  TODO: don't pass some kinds of requests to upper level DEBUG(2, "USB_REQ_SET_ADDRESS, %d %d", req->wValue, TCC7xx_USB_FUNC); seems we don't have to set it manually
           TCC7xx_USB_FUNC = req->wValue;  read data  lwo  TODO: use INGLD?     if (tcc_ep->buf == NULL) {        panicf_my("%s:%d", __FILE__, __LINE__);    }    TCC7xx_USB_EP_STAT = 0x2; /* Clear TX stat */ tcc_ep->buf == NULL) {        usb_core_transfer_complete(tcc_ep->id, USB_DIR_IN, 0, tcc_ep->count); TODO: remove me?  control endpoint  ep1: bulk-in, to host  ep2: bulk-out, from host  ep3: interrupt in 
  Reset TCC7xx usb device
  IRQ handler     TCC7xx_USB_SYS_STAT = sys_stat; is that really needed, btw not a problem for rockbox  Clear TX stat         return true; TODO: use interrupts instead  TODO: check ep            usb_core_transfer_complete(tcc_endpoints[endpoint].id,
                                        tcc_endpoints[endpoint].dir, -1, 0);  Enable USB clock  switch USB to host and then reset  unmask irq  TODO: not correct for all targets, we should poll VBUS
       signal on USB bus.         usb_serial_send("Hello\r\n", 7); simply switch USB off for now  Always return false for now 