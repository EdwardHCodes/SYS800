
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org
 System independent thread management routines for SDL  The array of threads currently active in the application
   (except the main thread)
   The manipulation of an array here is safer than using a linked list.
 This should never be called...
   If this is called by SDL_Quit(), we don't know whether or not we should
   clean up threads here.  If any threads are still running after this call,
   they will no longer have access to any per-thread data.
  Routines for manipulating the thread list  WARNING:
	   If the very first threads are created simultaneously, then
	   there could be a race condition causing memory corruption.
	   In practice, this isn't a problem because by definition there
	   is only one thread running the first time this is called.
	 Expand the list of threads, if necessary  There could be memory corruption if another thread is starting  The default (non-thread-safe) global error variable  Routine to get the thread-specific error variable  Arguments and callback to setup and run the user thread function  Perform any system-dependent setup
	   - this function cannot fail, and cannot use SDL_SetError()
	  Get the thread id  Figure out what function to run  Wake up the parent thread  Run the function  Allocate memory for the thread info structure  Set up the arguments for the thread  Add the thread to the list of available threads  Create the thread and go!  Wait for the thread function to use arguments  Oops, failed.  Gotta free everything  Everything is running now 
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org
 System independent thread management routines for SDL  The array of threads currently active in the application
   (except the main thread)
   The manipulation of an array here is safer than using a linked list.
 This should never be called...
   If this is called by SDL_Quit(), we don't know whether or not we should
   clean up threads here.  If any threads are still running after this call,
   they will no longer have access to any per-thread data.
  Routines for manipulating the thread list  WARNING:
	   If the very first threads are created simultaneously, then
	   there could be a race condition causing memory corruption.
	   In practice, this isn't a problem because by definition there
	   is only one thread running the first time this is called.
	 Expand the list of threads, if necessary  There could be memory corruption if another thread is starting  The default (non-thread-safe) global error variable  Routine to get the thread-specific error variable  Arguments and callback to setup and run the user thread function  Perform any system-dependent setup
	   - this function cannot fail, and cannot use SDL_SetError()
	  Get the thread id  Figure out what function to run  Wake up the parent thread  Run the function  Allocate memory for the thread info structure  Set up the arguments for the thread  Add the thread to the list of available threads  Create the thread and go!  Wait for the thread function to use arguments  Oops, failed.  Gotta free everything  Everything is running now 
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org
 System independent thread management routines for SDL  The array of threads currently active in the application
   (except the main thread)
   The manipulation of an array here is safer than using a linked list.
 This should never be called...
   If this is called by SDL_Quit(), we don't know whether or not we should
   clean up threads here.  If any threads are still running after this call,
   they will no longer have access to any per-thread data.
  Routines for manipulating the thread list  WARNING:
	   If the very first threads are created simultaneously, then
	   there could be a race condition causing memory corruption.
	   In practice, this isn't a problem because by definition there
	   is only one thread running the first time this is called.
	 Expand the list of threads, if necessary  There could be memory corruption if another thread is starting  The default (non-thread-safe) global error variable  Routine to get the thread-specific error variable  Arguments and callback to setup and run the user thread function  Perform any system-dependent setup
	   - this function cannot fail, and cannot use SDL_SetError()
	  Get the thread id  Figure out what function to run  Wake up the parent thread  Run the function  Allocate memory for the thread info structure  Set up the arguments for the thread  Add the thread to the list of available threads  Create the thread and go!  Wait for the thread function to use arguments  Oops, failed.  Gotta free everything  Everything is running now 