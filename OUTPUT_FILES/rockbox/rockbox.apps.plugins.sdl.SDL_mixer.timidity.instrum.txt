
    TiMidity -- Experimental MIDI to WAVE converter
    Copyright (C) 1995 Tuukka Toivonen <toivonen@clinet.fi>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the Perl Artistic License, available in COPYING.
  Some functions get aggravated if not even the standard banks are 
   available.  This is a special instrument, used for all melodic programs  This is only used for tracks that don't specify a program  Not that this could ever happen, of course  6.9 fixed point  15.15 fixed point.  6.9 fixed point  15.15 fixed point.  This is not too good... Can anyone tell me what these values mean?
     Are they GUS-style "exponential" volumes? And what does that mean?  15.15 fixed point  this was overflowing with seashore.pat

      ((vib_control_ratio * SWEEP_TUNING) << SWEEP_SHIFT) /
      (play_mode->rate * sweep);  Return a suitable vibrato_control_ratio value  
   If panning or note_to_use != -1, it will be used for all samples,
   instead of the sample-specific values in the instrument file. 

   For note_to_use, any value <0 or >127 will be forced to 0.
 
   For other parameters, 1 means yes, 0 means no, other values are
   undefined.

   TODO: do reverse loops right  Open patch file  Try with various extensions ctl->cmsg(CMSG_INFO, VERB_NOISY, "Loading instrument %s", current_filename); Read some headers and do cursory sanity checks. There are loads
     of magic offsets. This could be rewritten...  don't know what the
						      differences are  patch layout:
 * bytes:  info:		starts at offset:
 * 22	id (see above)		0
 * 60	copyright		22
 *  1	instruments		82
 *  1	voices			83
 *  1	channels		84
 *  2	number of waveforms	85
 *  2	master volume		87
 *  4	datasize		89
 * 36   reserved, but now:	93
 * 	7 "SF2EXT\0" id			93
 * 	1 right samples		       100
 *     28 reserved		       101
 *  2	instrument number	129
 * 16	instrument name		131
 *  4	instrument size		147
 *  1	number of layers	151
 * 40	reserved		152
 *  1	layer duplicate		192
 *  1	layer number		193
 *  4	layer size		194
 *  1	number of samples	198
 * 40	reserved		199
 * 				239
 * THEN, for each sample, see below
  instruments. To some patch makers, 
				       0 means 1  layers. What's a layer? 
 *  7	sample name
 *  1	fractions
 *  4	length
 *  4	loop start
 *  4	loop end
 *  2	sample rate
 *  4	low frequency
 *  4	high frequency
 *  2	finetune
 *  1	panning
 *  6	envelope rates			|
 *  6	envelope offsets		|  18 bytes
 *  3	tremolo sweep, rate, depth	|
 *  3	vibrato sweep, rate, depth	|
 *  1	sample mode
 *  2	scale frequency
 *  2	scale factor
 *  2	sample volume (??)
 * 34	reserved
 * Now: 1	delay
 * 	33	reserved
  Skip the wave name  Why have a "root frequency" and then "tuning"??  envelope, tremolo, and vibrato  Mark this as a fixed-pitch instrument if such a deed is desired.  seashore.pat in the Midia patch set has no Sustain. I don't
         understand why, and fixing it by adding the Sustain flag to
         all looped patches probably breaks something else. We do it
         anyway.  Strip any loops and envelopes we're permitted to  Have to make a guess.  No loop? Then what's there to sustain? No envelope needed
		 either...  Envelope rates all maxed out? Envelope end at a high "offset"?
		 That's a weird envelope. Take it out.  No sustain? Then no envelope.  I don't know if this is
		 justified, but patches without sustain usually don't need the
		 envelope either... at least the Gravis ones. They're mostly
		 drums.  I think.  Then read the sample data  convert to 16-bit data  convert to machine byte order  convert to signed data  Reverse reverse loops and pass them off as normal loops  The GUS apparently plays reverse loops by reversing the
	     whole sample. We do the same because the GUS does not SUCK.  just in case  If necessary do some anti-aliasing filtering   Try to determine a volume scaling factor for the sample.
	     This is a very crude adjustment, but things sound more
	     balanced with it. Still, this should be a runtime option.  These are in bytes. Convert into samples.  Then fractional samples  trim off zero data at end  Adjust for fractional loop points. This is a guess. Does anyone
	 know what "fractions" really stands for?  If this instrument will always be played on the same note,
	 and it's not looped, we can resample it now.  Squash the 16-bit data into 8 bits.  Let's not really, just say we did.  end of sample loop  end of stereo layer loop  end of vlayer loop  Mark the corresponding instrument in the default
		     bank / drumset for loading (if it isn't already)  it's loaded now   if (!(lp=load_instrument(name, 0, -1, -1, -1, 0, 0, 0))) 
    TiMidity -- Experimental MIDI to WAVE converter
    Copyright (C) 1995 Tuukka Toivonen <toivonen@clinet.fi>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the Perl Artistic License, available in COPYING.
  Some functions get aggravated if not even the standard banks are 
   available.  This is a special instrument, used for all melodic programs  This is only used for tracks that don't specify a program  Not that this could ever happen, of course  6.9 fixed point  15.15 fixed point.  6.9 fixed point  15.15 fixed point.  This is not too good... Can anyone tell me what these values mean?
     Are they GUS-style "exponential" volumes? And what does that mean?  15.15 fixed point  this was overflowing with seashore.pat

      ((vib_control_ratio * SWEEP_TUNING) << SWEEP_SHIFT) /
      (play_mode->rate * sweep);  Return a suitable vibrato_control_ratio value  
   If panning or note_to_use != -1, it will be used for all samples,
   instead of the sample-specific values in the instrument file. 

   For note_to_use, any value <0 or >127 will be forced to 0.
 
   For other parameters, 1 means yes, 0 means no, other values are
   undefined.

   TODO: do reverse loops right  Open patch file  Try with various extensions ctl->cmsg(CMSG_INFO, VERB_NOISY, "Loading instrument %s", current_filename); Read some headers and do cursory sanity checks. There are loads
     of magic offsets. This could be rewritten...  don't know what the
						      differences are  patch layout:
 * bytes:  info:		starts at offset:
 * 22	id (see above)		0
 * 60	copyright		22
 *  1	instruments		82
 *  1	voices			83
 *  1	channels		84
 *  2	number of waveforms	85
 *  2	master volume		87
 *  4	datasize		89
 * 36   reserved, but now:	93
 * 	7 "SF2EXT\0" id			93
 * 	1 right samples		       100
 *     28 reserved		       101
 *  2	instrument number	129
 * 16	instrument name		131
 *  4	instrument size		147
 *  1	number of layers	151
 * 40	reserved		152
 *  1	layer duplicate		192
 *  1	layer number		193
 *  4	layer size		194
 *  1	number of samples	198
 * 40	reserved		199
 * 				239
 * THEN, for each sample, see below
  instruments. To some patch makers, 
				       0 means 1  layers. What's a layer? 
 *  7	sample name
 *  1	fractions
 *  4	length
 *  4	loop start
 *  4	loop end
 *  2	sample rate
 *  4	low frequency
 *  4	high frequency
 *  2	finetune
 *  1	panning
 *  6	envelope rates			|
 *  6	envelope offsets		|  18 bytes
 *  3	tremolo sweep, rate, depth	|
 *  3	vibrato sweep, rate, depth	|
 *  1	sample mode
 *  2	scale frequency
 *  2	scale factor
 *  2	sample volume (??)
 * 34	reserved
 * Now: 1	delay
 * 	33	reserved
  Skip the wave name  Why have a "root frequency" and then "tuning"??  envelope, tremolo, and vibrato  Mark this as a fixed-pitch instrument if such a deed is desired.  seashore.pat in the Midia patch set has no Sustain. I don't
         understand why, and fixing it by adding the Sustain flag to
         all looped patches probably breaks something else. We do it
         anyway.  Strip any loops and envelopes we're permitted to  Have to make a guess.  No loop? Then what's there to sustain? No envelope needed
		 either...  Envelope rates all maxed out? Envelope end at a high "offset"?
		 That's a weird envelope. Take it out.  No sustain? Then no envelope.  I don't know if this is
		 justified, but patches without sustain usually don't need the
		 envelope either... at least the Gravis ones. They're mostly
		 drums.  I think.  Then read the sample data  convert to 16-bit data  convert to machine byte order  convert to signed data  Reverse reverse loops and pass them off as normal loops  The GUS apparently plays reverse loops by reversing the
	     whole sample. We do the same because the GUS does not SUCK.  just in case  If necessary do some anti-aliasing filtering   Try to determine a volume scaling factor for the sample.
	     This is a very crude adjustment, but things sound more
	     balanced with it. Still, this should be a runtime option.  These are in bytes. Convert into samples.  Then fractional samples  trim off zero data at end  Adjust for fractional loop points. This is a guess. Does anyone
	 know what "fractions" really stands for?  If this instrument will always be played on the same note,
	 and it's not looped, we can resample it now.  Squash the 16-bit data into 8 bits.  Let's not really, just say we did.  end of sample loop  end of stereo layer loop  end of vlayer loop  Mark the corresponding instrument in the default
		     bank / drumset for loading (if it isn't already)  it's loaded now   if (!(lp=load_instrument(name, 0, -1, -1, -1, 0, 0, 0))) 
    TiMidity -- Experimental MIDI to WAVE converter
    Copyright (C) 1995 Tuukka Toivonen <toivonen@clinet.fi>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the Perl Artistic License, available in COPYING.
  Some functions get aggravated if not even the standard banks are 
   available.  This is a special instrument, used for all melodic programs  This is only used for tracks that don't specify a program  Not that this could ever happen, of course  6.9 fixed point  15.15 fixed point.  6.9 fixed point  15.15 fixed point.  This is not too good... Can anyone tell me what these values mean?
     Are they GUS-style "exponential" volumes? And what does that mean?  15.15 fixed point  this was overflowing with seashore.pat

      ((vib_control_ratio * SWEEP_TUNING) << SWEEP_SHIFT) /
      (play_mode->rate * sweep);  Return a suitable vibrato_control_ratio value  
   If panning or note_to_use != -1, it will be used for all samples,
   instead of the sample-specific values in the instrument file. 

   For note_to_use, any value <0 or >127 will be forced to 0.
 
   For other parameters, 1 means yes, 0 means no, other values are
   undefined.

   TODO: do reverse loops right  Open patch file  Try with various extensions ctl->cmsg(CMSG_INFO, VERB_NOISY, "Loading instrument %s", current_filename); Read some headers and do cursory sanity checks. There are loads
     of magic offsets. This could be rewritten...  don't know what the
						      differences are  patch layout:
 * bytes:  info:		starts at offset:
 * 22	id (see above)		0
 * 60	copyright		22
 *  1	instruments		82
 *  1	voices			83
 *  1	channels		84
 *  2	number of waveforms	85
 *  2	master volume		87
 *  4	datasize		89
 * 36   reserved, but now:	93
 * 	7 "SF2EXT\0" id			93
 * 	1 right samples		       100
 *     28 reserved		       101
 *  2	instrument number	129
 * 16	instrument name		131
 *  4	instrument size		147
 *  1	number of layers	151
 * 40	reserved		152
 *  1	layer duplicate		192
 *  1	layer number		193
 *  4	layer size		194
 *  1	number of samples	198
 * 40	reserved		199
 * 				239
 * THEN, for each sample, see below
  instruments. To some patch makers, 
				       0 means 1  layers. What's a layer? 
 *  7	sample name
 *  1	fractions
 *  4	length
 *  4	loop start
 *  4	loop end
 *  2	sample rate
 *  4	low frequency
 *  4	high frequency
 *  2	finetune
 *  1	panning
 *  6	envelope rates			|
 *  6	envelope offsets		|  18 bytes
 *  3	tremolo sweep, rate, depth	|
 *  3	vibrato sweep, rate, depth	|
 *  1	sample mode
 *  2	scale frequency
 *  2	scale factor
 *  2	sample volume (??)
 * 34	reserved
 * Now: 1	delay
 * 	33	reserved
  Skip the wave name  Why have a "root frequency" and then "tuning"??  envelope, tremolo, and vibrato  Mark this as a fixed-pitch instrument if such a deed is desired.  seashore.pat in the Midia patch set has no Sustain. I don't
         understand why, and fixing it by adding the Sustain flag to
         all looped patches probably breaks something else. We do it
         anyway.  Strip any loops and envelopes we're permitted to  Have to make a guess.  No loop? Then what's there to sustain? No envelope needed
		 either...  Envelope rates all maxed out? Envelope end at a high "offset"?
		 That's a weird envelope. Take it out.  No sustain? Then no envelope.  I don't know if this is
		 justified, but patches without sustain usually don't need the
		 envelope either... at least the Gravis ones. They're mostly
		 drums.  I think.  Then read the sample data  convert to 16-bit data  convert to machine byte order  convert to signed data  Reverse reverse loops and pass them off as normal loops  The GUS apparently plays reverse loops by reversing the
	     whole sample. We do the same because the GUS does not SUCK.  just in case  If necessary do some anti-aliasing filtering   Try to determine a volume scaling factor for the sample.
	     This is a very crude adjustment, but things sound more
	     balanced with it. Still, this should be a runtime option.  These are in bytes. Convert into samples.  Then fractional samples  trim off zero data at end  Adjust for fractional loop points. This is a guess. Does anyone
	 know what "fractions" really stands for?  If this instrument will always be played on the same note,
	 and it's not looped, we can resample it now.  Squash the 16-bit data into 8 bits.  Let's not really, just say we did.  end of sample loop  end of stereo layer loop  end of vlayer loop  Mark the corresponding instrument in the default
		     bank / drumset for loading (if it isn't already)  it's loaded now   if (!(lp=load_instrument(name, 0, -1, -1, -1, 0, 0, 0))) 