
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 models.c -- model loading and caching models are the only shared resource between a client and server running on the same machine. for hunk tags values for model_t's needload
===============
Mod_Init
===============

===============
Mod_Extradata

Caches the data if needed
===============

===============
Mod_PointInLeaf
===============
 never reached
===================
Mod_DecompressVis
===================
 no vis info, so make all visible
===================
Mod_ClearAll
===================
FIX FOR CACHE_ALLOC ERRORS:
==================
Mod_FindName

==================
 search the currently loaded models
==================
Mod_TouchModel

==================

==================
Mod_LoadModel

Loads a model into the cache
==================
 prevents crashesprintf("loadmodel 1"); avoid dirtying the cache heap because the world is so huge, load it one piece at a time load the fileprintf("loadmodel 2");printf("LoadModel0: %08x (%08x)", buf[0], buf); allocate a new modelprintf("LoadModel1: %08x (%08x)", buf[0], buf);printf("LoadModel2: %08x (%08x)", buf[0], buf);printf("loadmodel 3"); fill it in call the apropriate loaderprintf("unkn %08x (&=%08x), nat %08x def to brush", LittleLongUnaligned(buf[0]), &buf[0], buf[0]);
==================
Mod_ForName

Loads in a model for the given name
==================
printf("modfor1");printf("modfor2");
===============================================================================

					BRUSHMODEL LOADING

===============================================================================

=================
Mod_LoadTextures
=================
 the pixels immediately follow the structures sequence the animations allready sequenced find the number of frames in the animation link them all together
=================
Mod_LoadLighting
=================

=================
Mod_LoadVisibility
=================

=================
Mod_LoadEntities
=================

=================
Mod_LoadVertexes
=================
13.1913.1913.19
=================
Mod_LoadSubmodels
=================
 spread the mins / maxs by a pixel
=================
Mod_LoadEdges
=================

=================
Mod_LoadTexinfo
=================
 don't crash checkerboard texture texture not found
================
CalcSurfaceExtents

Fills in s->texturemins[] and s->extents[]
================

=================
Mod_LoadFaces
=================
 lighting info set the drawing flags flag sky turbulent
=================
Mod_SetParent
=================

=================
Mod_LoadNodes
=================
 sets nodes and leafs
=================
Mod_LoadLeafs
=================

=================
Mod_LoadClipnodes
=================

=================
Mod_MakeHull0

Deplicate the drawing hull structure as a clipping hull
=================

=================
Mod_LoadMarksurfaces
=================

=================
Mod_LoadSurfedges
=================

=================
Mod_LoadPlanes
=================

=================
RadiusFromBounds
=================

=================
Mod_LoadBrushModel
=================
 swap all the lumps sanity check of our *Unaligned routines load into heap regular and alternate animation set up the submodels (FIXME: this is confusing) duplicate the basic information
==============================================================================

ALIAS MODELS

==============================================================================

=================
Mod_LoadAliasFrame
=================
 these are byte values, so we don't have to worry about endianness these are all byte values, so no need to deal with endianness
=================
Mod_LoadAliasGroup
=================
 these are byte values, so we don't have to worry about endianness
=================
Mod_LoadAliasSkin
=================

=================
Mod_LoadAliasSkinGroup
=================

=================
Mod_LoadAliasModel
=================
 allocate space for a working header, plus all the data except the frames, skin and group info	mod->cache.data = pheader; endian-adjust and copy the data, starting with the alias model header load the skins set base s and t vertices put s and t in 16.16 format set up the triangles load the frames FIXME: do this right move the complete, relocatable alias model to the cache	=============================================================================
=================
Mod_LoadSpriteFrame
=================

=================
Mod_LoadSpriteGroup
=================

=================
Mod_LoadSpriteModel
=================
 load the frames=============================================================================
================
Mod_Print
================

Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 models.c -- model loading and caching models are the only shared resource between a client and server running on the same machine. for hunk tags values for model_t's needload
===============
Mod_Init
===============

===============
Mod_Extradata

Caches the data if needed
===============

===============
Mod_PointInLeaf
===============
 never reached
===================
Mod_DecompressVis
===================
 no vis info, so make all visible
===================
Mod_ClearAll
===================
FIX FOR CACHE_ALLOC ERRORS:
==================
Mod_FindName

==================
 search the currently loaded models
==================
Mod_TouchModel

==================

==================
Mod_LoadModel

Loads a model into the cache
==================
 prevents crashesprintf("loadmodel 1"); avoid dirtying the cache heap because the world is so huge, load it one piece at a time load the fileprintf("loadmodel 2");printf("LoadModel0: %08x (%08x)", buf[0], buf); allocate a new modelprintf("LoadModel1: %08x (%08x)", buf[0], buf);printf("LoadModel2: %08x (%08x)", buf[0], buf);printf("loadmodel 3"); fill it in call the apropriate loaderprintf("unkn %08x (&=%08x), nat %08x def to brush", LittleLongUnaligned(buf[0]), &buf[0], buf[0]);
==================
Mod_ForName

Loads in a model for the given name
==================
printf("modfor1");printf("modfor2");
===============================================================================

					BRUSHMODEL LOADING

===============================================================================

=================
Mod_LoadTextures
=================
 the pixels immediately follow the structures sequence the animations allready sequenced find the number of frames in the animation link them all together
=================
Mod_LoadLighting
=================

=================
Mod_LoadVisibility
=================

=================
Mod_LoadEntities
=================

=================
Mod_LoadVertexes
=================
13.1913.1913.19
=================
Mod_LoadSubmodels
=================
 spread the mins / maxs by a pixel
=================
Mod_LoadEdges
=================

=================
Mod_LoadTexinfo
=================
 don't crash checkerboard texture texture not found
================
CalcSurfaceExtents

Fills in s->texturemins[] and s->extents[]
================

=================
Mod_LoadFaces
=================
 lighting info set the drawing flags flag sky turbulent
=================
Mod_SetParent
=================

=================
Mod_LoadNodes
=================
 sets nodes and leafs
=================
Mod_LoadLeafs
=================

=================
Mod_LoadClipnodes
=================

=================
Mod_MakeHull0

Deplicate the drawing hull structure as a clipping hull
=================

=================
Mod_LoadMarksurfaces
=================

=================
Mod_LoadSurfedges
=================

=================
Mod_LoadPlanes
=================

=================
RadiusFromBounds
=================

=================
Mod_LoadBrushModel
=================
 swap all the lumps sanity check of our *Unaligned routines load into heap regular and alternate animation set up the submodels (FIXME: this is confusing) duplicate the basic information
==============================================================================

ALIAS MODELS

==============================================================================

=================
Mod_LoadAliasFrame
=================
 these are byte values, so we don't have to worry about endianness these are all byte values, so no need to deal with endianness
=================
Mod_LoadAliasGroup
=================
 these are byte values, so we don't have to worry about endianness
=================
Mod_LoadAliasSkin
=================

=================
Mod_LoadAliasSkinGroup
=================

=================
Mod_LoadAliasModel
=================
 allocate space for a working header, plus all the data except the frames, skin and group info	mod->cache.data = pheader; endian-adjust and copy the data, starting with the alias model header load the skins set base s and t vertices put s and t in 16.16 format set up the triangles load the frames FIXME: do this right move the complete, relocatable alias model to the cache	=============================================================================
=================
Mod_LoadSpriteFrame
=================

=================
Mod_LoadSpriteGroup
=================

=================
Mod_LoadSpriteModel
=================
 load the frames=============================================================================
================
Mod_Print
================

Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 models.c -- model loading and caching models are the only shared resource between a client and server running on the same machine. for hunk tags values for model_t's needload
===============
Mod_Init
===============

===============
Mod_Extradata

Caches the data if needed
===============

===============
Mod_PointInLeaf
===============
 never reached
===================
Mod_DecompressVis
===================
 no vis info, so make all visible
===================
Mod_ClearAll
===================
FIX FOR CACHE_ALLOC ERRORS:
==================
Mod_FindName

==================
 search the currently loaded models
==================
Mod_TouchModel

==================

==================
Mod_LoadModel

Loads a model into the cache
==================
 prevents crashesprintf("loadmodel 1"); avoid dirtying the cache heap because the world is so huge, load it one piece at a time load the fileprintf("loadmodel 2");printf("LoadModel0: %08x (%08x)", buf[0], buf); allocate a new modelprintf("LoadModel1: %08x (%08x)", buf[0], buf);printf("LoadModel2: %08x (%08x)", buf[0], buf);printf("loadmodel 3"); fill it in call the apropriate loaderprintf("unkn %08x (&=%08x), nat %08x def to brush", LittleLongUnaligned(buf[0]), &buf[0], buf[0]);
==================
Mod_ForName

Loads in a model for the given name
==================
printf("modfor1");printf("modfor2");
===============================================================================

					BRUSHMODEL LOADING

===============================================================================

=================
Mod_LoadTextures
=================
 the pixels immediately follow the structures sequence the animations allready sequenced find the number of frames in the animation link them all together
=================
Mod_LoadLighting
=================

=================
Mod_LoadVisibility
=================

=================
Mod_LoadEntities
=================

=================
Mod_LoadVertexes
=================
13.1913.1913.19
=================
Mod_LoadSubmodels
=================
 spread the mins / maxs by a pixel
=================
Mod_LoadEdges
=================

=================
Mod_LoadTexinfo
=================
 don't crash checkerboard texture texture not found
================
CalcSurfaceExtents

Fills in s->texturemins[] and s->extents[]
================

=================
Mod_LoadFaces
=================
 lighting info set the drawing flags flag sky turbulent
=================
Mod_SetParent
=================

=================
Mod_LoadNodes
=================
 sets nodes and leafs
=================
Mod_LoadLeafs
=================

=================
Mod_LoadClipnodes
=================

=================
Mod_MakeHull0

Deplicate the drawing hull structure as a clipping hull
=================

=================
Mod_LoadMarksurfaces
=================

=================
Mod_LoadSurfedges
=================

=================
Mod_LoadPlanes
=================

=================
RadiusFromBounds
=================

=================
Mod_LoadBrushModel
=================
 swap all the lumps sanity check of our *Unaligned routines load into heap regular and alternate animation set up the submodels (FIXME: this is confusing) duplicate the basic information
==============================================================================

ALIAS MODELS

==============================================================================

=================
Mod_LoadAliasFrame
=================
 these are byte values, so we don't have to worry about endianness these are all byte values, so no need to deal with endianness
=================
Mod_LoadAliasGroup
=================
 these are byte values, so we don't have to worry about endianness
=================
Mod_LoadAliasSkin
=================

=================
Mod_LoadAliasSkinGroup
=================

=================
Mod_LoadAliasModel
=================
 allocate space for a working header, plus all the data except the frames, skin and group info	mod->cache.data = pheader; endian-adjust and copy the data, starting with the alias model header load the skins set base s and t vertices put s and t in 16.16 format set up the triangles load the frames FIXME: do this right move the complete, relocatable alias model to the cache	=============================================================================
=================
Mod_LoadSpriteFrame
=================

=================
Mod_LoadSpriteGroup
=================

=================
Mod_LoadSpriteModel
=================
 load the frames=============================================================================
================
Mod_Print
================
