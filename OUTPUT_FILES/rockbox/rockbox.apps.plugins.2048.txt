**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 Franklin Wei
 *
 * Clone of 2048 by Gabriele Cirulli
 *
 * Thanks to [Saint], saratoga, and gevaerts for answering all my n00b
 * questions :)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ************************************************************************** TODO
 * Sounds!
 * Better animations!
  includes  some constants  must use macros for these  screen-specific configuration  tall screens  wide or square screens  LCD_WIDTH < LCD_HEIGHT  where to draw the background bitmap  key mappings  notice how "color" is spelled :P  colors  PLA data ** game data structures ** 0 = empty  sum of grid, XORed by score  has the player gotten 2048 yet? ** temporary data ** has a save been loaded?  the high score **************************** UTILITY FUNCTIONS **************************** prepares for exit  returns 2 or 4  1 in 10 chance of a four  displays the help text ** tile movement logic ** this function performs the tile movement  loop over the rows or columns, moving the tiles in the specified direction  merge these two tiles  Each merged tile cannot be merged again  Empty!  these functions move each tile 1 space in the direction specified via calls to slide_internal  Up
   0
   1 ^ ^ ^ ^
   2 ^ ^ ^ ^
   3 ^ ^ ^ ^
   0 1 2 3
 start values  stop values  delta values  lookahead values  Down
   0 v v v v
   1 v v v v
   2 v v v v
   3
   0 1 2 3
 Left
   0   < < <
   1   < < <
   2   < < <
   3   < < <
   0 1 2 3
 Right
   0 > > >
   1 > > >
   2 > > >
   3 > > >
   0 1 2 3
 start  stop  delta  lookahead  copies old_grid to ctx->grid  slightly modified base 2 logarithm, returns 1 when given zero, and log2(n) + 1 for anything else  low-depth displays resort to text drawing, see the #else case below  draws game screen + updates LCD  draw the background 
      grey_gray_bitmap(_2048_background, BACKGROUND_X, BACKGROUND_Y, BMPWIDTH__2048_background, BMPHEIGHT__2048_background);
     draw the grid  source  source upper left corner  stride  dest upper-left corner  size of the cut section  draw the title  check if the title will overlap the grid  if it goes into the grid, use the system font, which should be smaller  title can't fit, don't draw it  draw the score  try making the score fit  score overflows  first see if it fits with Score: and FONT_SYSFIXED  it fits, go and draw it  now try with S: and FONT_UI  now try with S: and FONT_SYSFIXED  then try without Score: and FONT_UI  as a last resort, don't use Score: and use the system font  draw the best score  score overflows  first see if it fits with Score: and FONT_SYSFIXED  it fits, go and draw it  now try with S: and FONT_UI  now try with S: and FONT_SYSFIXED  then try without Score: and FONT_UI  as a last resort, don't use Score: and use the system font  revert the font  LCD_DEPTH > 1  1-bit display :(  bitmaps are unreadable on these screens, so just resort to text-based drawing  Draw the grid  find the biggest tile  Now draw the score, and the game title  Check if there is enough space to display "Score: ", otherwise, only display the score  LCD_DEPTH > 1  place a 2 or 4 in a random empty space  get the indexes of empty spaces  no empty spaces  checks for a win or loss  first, check for a loss  no more legal moves  Shame the player  Let the user see the tile in its full glory...  loads highscores from disk  creates an empty structure if the file does not exist  initialize the data structures  initialize the game context  using the menu resets the font  set it again here  Now calculate font sizes  Now get the height of the font  save the current game state  calculate checksum  loads a saved game, returns true on success  verify checksum  update the highscores with ctx->score  first, find the biggest tile to show as the level  show the scores if there is a new high score  asks the user if they wish to quit  show the pause menu  quit w/o saving  back to idle  main game loop  Save battery when idling  Wait for a button press  doing work now...  resume  new game  quit without saving  save and quit  handle poweroff and USB events  Check if any tiles moved, then add random  back to idle  decide if this_item should be shown in the main menu  used to hide resume option when there is no save  show the main menu  Start new game or resume a game  Don't bother showing the high scores...  exit without menu  plugin entry point  now start the game menu **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 Franklin Wei
 *
 * Clone of 2048 by Gabriele Cirulli
 *
 * Thanks to [Saint], saratoga, and gevaerts for answering all my n00b
 * questions :)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ************************************************************************** TODO
 * Sounds!
 * Better animations!
  includes  some constants  must use macros for these  screen-specific configuration  tall screens  wide or square screens  LCD_WIDTH < LCD_HEIGHT  where to draw the background bitmap  key mappings  notice how "color" is spelled :P  colors  PLA data ** game data structures ** 0 = empty  sum of grid, XORed by score  has the player gotten 2048 yet? ** temporary data ** has a save been loaded?  the high score **************************** UTILITY FUNCTIONS **************************** prepares for exit  returns 2 or 4  1 in 10 chance of a four  displays the help text ** tile movement logic ** this function performs the tile movement  loop over the rows or columns, moving the tiles in the specified direction  merge these two tiles  Each merged tile cannot be merged again  Empty!  these functions move each tile 1 space in the direction specified via calls to slide_internal  Up
   0
   1 ^ ^ ^ ^
   2 ^ ^ ^ ^
   3 ^ ^ ^ ^
   0 1 2 3
 start values  stop values  delta values  lookahead values  Down
   0 v v v v
   1 v v v v
   2 v v v v
   3
   0 1 2 3
 Left
   0   < < <
   1   < < <
   2   < < <
   3   < < <
   0 1 2 3
 Right
   0 > > >
   1 > > >
   2 > > >
   3 > > >
   0 1 2 3
 start  stop  delta  lookahead  copies old_grid to ctx->grid  slightly modified base 2 logarithm, returns 1 when given zero, and log2(n) + 1 for anything else  low-depth displays resort to text drawing, see the #else case below  draws game screen + updates LCD  draw the background 
      grey_gray_bitmap(_2048_background, BACKGROUND_X, BACKGROUND_Y, BMPWIDTH__2048_background, BMPHEIGHT__2048_background);
     draw the grid  source  source upper left corner  stride  dest upper-left corner  size of the cut section  draw the title  check if the title will overlap the grid  if it goes into the grid, use the system font, which should be smaller  title can't fit, don't draw it  draw the score  try making the score fit  score overflows  first see if it fits with Score: and FONT_SYSFIXED  it fits, go and draw it  now try with S: and FONT_UI  now try with S: and FONT_SYSFIXED  then try without Score: and FONT_UI  as a last resort, don't use Score: and use the system font  draw the best score  score overflows  first see if it fits with Score: and FONT_SYSFIXED  it fits, go and draw it  now try with S: and FONT_UI  now try with S: and FONT_SYSFIXED  then try without Score: and FONT_UI  as a last resort, don't use Score: and use the system font  revert the font  LCD_DEPTH > 1  1-bit display :(  bitmaps are unreadable on these screens, so just resort to text-based drawing  Draw the grid  find the biggest tile  Now draw the score, and the game title  Check if there is enough space to display "Score: ", otherwise, only display the score  LCD_DEPTH > 1  place a 2 or 4 in a random empty space  get the indexes of empty spaces  no empty spaces  checks for a win or loss  first, check for a loss  no more legal moves  Shame the player  Let the user see the tile in its full glory...  loads highscores from disk  creates an empty structure if the file does not exist  initialize the data structures  initialize the game context  using the menu resets the font  set it again here  Now calculate font sizes  Now get the height of the font  save the current game state  calculate checksum  loads a saved game, returns true on success  verify checksum  update the highscores with ctx->score  first, find the biggest tile to show as the level  show the scores if there is a new high score  asks the user if they wish to quit  show the pause menu  quit w/o saving  back to idle  main game loop  Save battery when idling  Wait for a button press  doing work now...  resume  new game  quit without saving  save and quit  handle poweroff and USB events  Check if any tiles moved, then add random  back to idle  decide if this_item should be shown in the main menu  used to hide resume option when there is no save  show the main menu  Start new game or resume a game  Don't bother showing the high scores...  exit without menu  plugin entry point  now start the game menu **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 Franklin Wei
 *
 * Clone of 2048 by Gabriele Cirulli
 *
 * Thanks to [Saint], saratoga, and gevaerts for answering all my n00b
 * questions :)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ************************************************************************** TODO
 * Sounds!
 * Better animations!
  includes  some constants  must use macros for these  screen-specific configuration  tall screens  wide or square screens  LCD_WIDTH < LCD_HEIGHT  where to draw the background bitmap  key mappings  notice how "color" is spelled :P  colors  PLA data ** game data structures ** 0 = empty  sum of grid, XORed by score  has the player gotten 2048 yet? ** temporary data ** has a save been loaded?  the high score **************************** UTILITY FUNCTIONS **************************** prepares for exit  returns 2 or 4  1 in 10 chance of a four  displays the help text ** tile movement logic ** this function performs the tile movement  loop over the rows or columns, moving the tiles in the specified direction  merge these two tiles  Each merged tile cannot be merged again  Empty!  these functions move each tile 1 space in the direction specified via calls to slide_internal  Up
   0
   1 ^ ^ ^ ^
   2 ^ ^ ^ ^
   3 ^ ^ ^ ^
   0 1 2 3
 start values  stop values  delta values  lookahead values  Down
   0 v v v v
   1 v v v v
   2 v v v v
   3
   0 1 2 3
 Left
   0   < < <
   1   < < <
   2   < < <
   3   < < <
   0 1 2 3
 Right
   0 > > >
   1 > > >
   2 > > >
   3 > > >
   0 1 2 3
 start  stop  delta  lookahead  copies old_grid to ctx->grid  slightly modified base 2 logarithm, returns 1 when given zero, and log2(n) + 1 for anything else  low-depth displays resort to text drawing, see the #else case below  draws game screen + updates LCD  draw the background 
      grey_gray_bitmap(_2048_background, BACKGROUND_X, BACKGROUND_Y, BMPWIDTH__2048_background, BMPHEIGHT__2048_background);
     draw the grid  source  source upper left corner  stride  dest upper-left corner  size of the cut section  draw the title  check if the title will overlap the grid  if it goes into the grid, use the system font, which should be smaller  title can't fit, don't draw it  draw the score  try making the score fit  score overflows  first see if it fits with Score: and FONT_SYSFIXED  it fits, go and draw it  now try with S: and FONT_UI  now try with S: and FONT_SYSFIXED  then try without Score: and FONT_UI  as a last resort, don't use Score: and use the system font  draw the best score  score overflows  first see if it fits with Score: and FONT_SYSFIXED  it fits, go and draw it  now try with S: and FONT_UI  now try with S: and FONT_SYSFIXED  then try without Score: and FONT_UI  as a last resort, don't use Score: and use the system font  revert the font  LCD_DEPTH > 1  1-bit display :(  bitmaps are unreadable on these screens, so just resort to text-based drawing  Draw the grid  find the biggest tile  Now draw the score, and the game title  Check if there is enough space to display "Score: ", otherwise, only display the score  LCD_DEPTH > 1  place a 2 or 4 in a random empty space  get the indexes of empty spaces  no empty spaces  checks for a win or loss  first, check for a loss  no more legal moves  Shame the player  Let the user see the tile in its full glory...  loads highscores from disk  creates an empty structure if the file does not exist  initialize the data structures  initialize the game context  using the menu resets the font  set it again here  Now calculate font sizes  Now get the height of the font  save the current game state  calculate checksum  loads a saved game, returns true on success  verify checksum  update the highscores with ctx->score  first, find the biggest tile to show as the level  show the scores if there is a new high score  asks the user if they wish to quit  show the pause menu  quit w/o saving  back to idle  main game loop  Save battery when idling  Wait for a button press  doing work now...  resume  new game  quit without saving  save and quit  handle poweroff and USB events  Check if any tiles moved, then add random  back to idle  decide if this_item should be shown in the main menu  used to hide resume option when there is no save  show the main menu  Start new game or resume a game  Don't bother showing the high scores...  exit without menu  plugin entry point  now start the game menu 