**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Albert Veli
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Improvised creds goes to:
 *
 * - Anders Clausen for ingeniously inventing the name Invadrox.
 * - Linus Nielsen-Feltzing for patiently answering n00b questions.
  bitmaps  get dimensions for later use from the bitmaps  Original graphics is only 1bpp so it should be portable
 * to most targets. But for now, only support the simple ones.
  #define DEBUG  TODO: Figure out which buttons to use for Tatung Elio TPJ-1022  HAVE_TOUCHSCREEN  Defines common to all models  SCORE_Y = 0 for most targets. Gigabeat redefines it later.  m:robe 500 defines  Original arcade game size 224x240, 1bpp with
 * red overlay at top and green overlay at bottom.
 *
 * M:Robe 500: 640x480x16
 * ======================
  iPod Video defines  Original arcade game size 224x240, 1bpp with
 * red overlay at top and green overlay at bottom.
 *
 * iPod Video: 320x240x16
 * ======================
 * X: 48p padding at left/right gives 224p playfield in middle.
 *    10p "border" gives 204p actual playfield. UFO use full 224p.
 * Y: Use full 240p.
 *
 * MAX_X = (204 - 12) / 2 - 1 = 95
 *
 * Y: Score text 7       0
 *    Space      10      7
 *    Score      7       17
 *    Space      8       24
 * 3  Ufo        7       32
 * 2  Space      Aliens start at 32 + 3 * 8 = 56
 * 0  aliens     9*8     56  -
 *    space     ~7*8     128  | 18.75 aliens space between
 *    shield     2*8     182  | first alien and ship.
 *    space      8       198  | MAX_Y = 18
 *    ship       8       206 -
 *    space      2*8     214
 *    hline      1       230 - PLAYFIELD_Y
 *    bottom border 10   240
 *    Lives and Level goes inside bottom border
  Sandisk Sansa e200: 176x220x16
 * ==============================
 * X: No padding. 8p border -> 160p playfield.
 *
 * 8p Aliens with 3p spacing -> 88 + 30 = 118p aliens block.
 * (160 - 118) / 2 = 21 rounds for whole block (more than original)
 * MAX_X = (160 - 8) / 2 - 1 = 75 rounds for single alien (less than original)
 *
 *    LOGO       70       0
 *    Score text 5        70
 *    Space      5        75
 * Y  Score      5        80
 *    Space      10       85
 * 2  Ufo        5        95
 * 2  Space      10      100
 * 0  aliens     9*5     110 -
 *    space     ~7*5     155  | 18.6 aliens space between
 *    shield     2*5     188  | first alien and ship.
 *    space      5       198  | MAX_Y = 18
 *    ship       5       203 -
 *    space      5       208
 *    hline      1       213 PLAYFIELD_Y
 *    bottom border 6
 *    LCD_HEIGHT         220
 *    Lives and Level goes inside bottom border
  Redefine SCORE_Y  iPod Nano: 176x132x16
 * ======================
 * X: No padding. 8p border -> 160p playfield.
 *
 *    LIVES_X 8
 *    ALIEN_WIDTH 8
 *    ALIEN_HEIGHT 5
 *    ALIEN_SPACING 3
 *    SHIP_WIDTH 10
 *    SHIP_HEIGHT 5
 *    FONT_HEIGHT 5
 *    UFO_WIDTH 10
 *    UFO_HEIGHT 5
 *    SHIELD_WIDTH 15
 *    SHIELD_HEIGHT 10
 *    MAX_X 75
 *    MAX_Y = 18
 *    ALIEN_START_Y (UFO_Y + 12)
 *
 * 8p Aliens with 3p spacing -> 88 + 30 = 118p aliens block.
 * (160 - 118) / 2 = 21 rounds for whole block (more than original)
 * MAX_X = (160 - 8) / 2 - 1 = 75 rounds for single alien (less than original)
 *
 * Y: Scoreline  5         0 (combine scoretext and numbers on same line)
 *    Space      5         5
 * 1  Ufo        5        10
 * 3  Space      7        15
 * 2  aliens     9*5      22 -
 *    space     ~7*5      67  | Just above 18 aliens space between
 *    shield     2*5     100  | first alien and ship.
 *    space      5       110  | MAX_Y = 18
 *    ship       5       115 -
 *    space      5       120
 *    hline      1       125 PLAYFIELD_Y
 *    bottom border 6    126
 *    LCD_HEIGHT         131
 *    Lives and Level goes inside bottom border
  iAudio X5, iRiver H10 20Gb, iPod 3g/4g, H100, M5: 160x128
 * =========================================================
 * X: No padding. No border -> 160p playfield.
 *
 *    LIVES_X 0
 *    ALIEN_WIDTH 8
 *    ALIEN_HEIGHT 5
 *    ALIEN_SPACING 3
 *    SHIP_WIDTH 10
 *    SHIP_HEIGHT 5
 *    FONT_HEIGHT 5
 *    UFO_WIDTH 10
 *    UFO_HEIGHT 5
 *    SHIELD_WIDTH 15
 *    SHIELD_HEIGHT 10
 *    MAX_X 75
 *    MAX_Y = 18
 *    ALIEN_START_Y (UFO_Y + 10)
 *
 * 8p Aliens with 3p spacing -> 88 + 30 = 118p aliens block.
 * (160 - 118) / 2 = 21 rounds for whole block (more than original)
 * MAX_X = (160 - 8) / 2 - 1 = 75 rounds for single alien (less than original)
 *
 * Y: Scoreline  5         0 (combine scoretext and numbers on same line)
 *    Space      5         5
 * 1  Ufo        5        10
 * 2  Space      5        15
 * 8  aliens     9*5      20 -
 *    space     ~6*5      65  | Just above 18 aliens space between
 *    shield     2*5      96  | first alien and ship.
 *    space      5       106  | MAX_Y = 18
 *    ship       5       111 -
 *    space      5       116
 *    hline      1       121 PLAYFIELD_Y
 *    bottom border 6    122
 *    LCD_HEIGHT         128
 *    Lives and Level goes inside bottom border
  Gigabeat: 240x320x16
 * ======================
 * X: 8p padding at left/right gives 224p playfield in middle.
 *    10p "border" gives 204p actual playfield. UFO use full 224p.
 * Y: Use bottom 240p for playfield and top 80 pixels for logo.
 *
 * MAX_X = (204 - 12) / 2 - 1 = 95
 *
 * Y: Score text 7       0   + 80
 *    Space      10      7   + 80
 *    Score      7       17  + 80
 *    Space      8       24  + 80
 * 3  Ufo        7       32  + 80
 * 2  Space      Aliens start at 32 + 3 * 8 = 56
 * 0  aliens     9*8     56  -
 *    space     ~7*8     128  | 18.75 aliens space between
 *    shield     2*8     182  | first alien and ship.
 *    space      8       198  | MAX_Y = 18
 *    ship       8       206 -
 *    space      2*8     214
 *    hline      1       230 310  - PLAYFIELD_Y
 *    bottom border 10   240 320
 *    Lives and Level goes inside bottom border
  Redefine SCORE_Y  TPJ1022, H300, iPod Color: 220x176x16
 * ============================
 * X: 0p padding at left/right gives 220p playfield in middle.
 *    8p "border" gives 204p actual playfield. UFO use full 220p.
 * Y: Use full 176p for playfield.
 *
 * MAX_X = (204 - 12) / 2 - 1 = 95
 *
 * Y: Score text 7       0
 *    Space      8       7
 * 1  Ufo        7       15
 * 7  Space      Aliens start at 15 + 3 * 8 = 56
 * 6  aliens     9*8     25  -
 *    space     ~7*8     103  | 15.6 aliens space between
 *    shield     2*8     126  | first alien and ship.
 *    space      8       142  | MAX_Y = 15
 *    ship       8       150 -
 *    space      8       158
 *    hline      1       166 - PLAYFIELD_Y
 *    bottom border 10   176
 *    Lives and Level goes inside bottom border
  Defines common to each "graphic type"  Colors  Alien states  Fire/bomb/ufo states  Fire/bomb targets  The time (in ms) for one iteration through the game loop - decrease this
 * to speed up the game - note that current_tick is (currently) only accurate
 * to 10ms.
  Physical x is at PLAYFIELD_X + LIVES_X + x * ALIEN_SPEED
 * Physical y is at y * ALIEN_HEIGHT
  x-coordinate (0 - 95)  y-coordinate (0 - 18)  0 (Kang), 1 (Kodos), 2 (Serak)  Dead, alive or bomber  Aliens box 5 rows * ALIENS aliens in each row  Current animation frame  Number of frames in animation  Remember target during explosion frames  0 (IDLE) = inactive, 1 (FIRE) or negative, exploding  Increase max_bombs at higher levels  Raw framebuffer value of shield/ship green color  For optimization, precalculate startoffset of each scanline  No standard get_pixel function yet, use this hack instead  Horizontal packing  Vertical packing  Horizontal/Vertical packing  Draw "digits" least significant digits of num at (x,y)  Update lcd  Draw new hiscore (same as score)  Lives num  Ships  Erase ship to the right (if less than MAX_LIVES)  Update lives (and level) part of screen  Return false if there is no next alive alien (round is over)  End of this row. Move up one row.  No more aliens in this round.  No more alive aliens. Round finished.  Move down-left next round  Move down-right next round  Not left nor right. Set down to false.  All aliens have been moved.
 * Set curr_alien to first alive.
 * Return false if no-one is left alive.
  All aliens dead.  Move current alien (curr_alien is pointing to a living alien)  Alien is at bottom. Game Over.  Moving right  Now, after move, check if we hit the right border.  Moving left  Now, after move, check if we hit the left border.  Erase old position  Moved in y-dir. Erase whole alien.  Erase left edge  Erase right edge  Draw alien at new pos  Round finished. Set curr_alien to first alive from bottom.  Should never happen. Taken care of in move_fire().  TODO: Play next background sound  Erase old ship  Move right. Erase leftmost part of ship.  Move left. Erase rightmost part of ship.  Draw ship  Alternate between frame 1 and 2 during hit  Save ship_x for next time  Alien hit. Wait until explosion is finished.  Erase exploding_alien  Special case. We killed curr_alien.  Round finished. Set curr_alien to first alive from bottom.  Erase  Check top  TODO: Play explode sound  Move  Hit UFO?  Center explosion  Hit bomb? (check position, not pixel value)  Count as hit if within BOMB_WIDTH pixels  Erase bomb  Explode ship fire  Check for hit Hit shield  TODO: Play explode sound  Center explosion around hit pixel  Hit alien?  TODO: play alien hit sound  Set (possible) alien above to bomber  printf("New bomber (%d, %d)\n", j % ALIENS, j / ALIENS);  Update score part of screen  Paralyze aliens S_EXPLODE frames  Since alien is 1 pixel taller than explosion sprite, erase bottom line  Draw shot  Count up towards S_IDLE, then erase explosion  Erase explosion  Draw explosion with black pixels  Return a BOMBER alien  TODO: Weigh higher probability near ship  No BOMBER found in this col  No BOMBER found at all (error?)  Advance frame  x, y  Check for duplets in x and y direction  Skip this one, continue with next bomb  printf("Bomb %d duplet of %d\n", i, j);  Passed, set type  Bombs away  Erase old position  Move  Check if bottom hit  Check for green (ship or shield)  Move to hit pixel  Check if ship is hit  TODO: play ship hit sound  Shield hit  Center explosion around hit pixel in shield  Hit ship or shield, continue  If we get here state should be < 0, exploding  Erase explosion  Sleep 1s to give player time to examine lives left  Erase explosion (even if ship hit, might be another bomb)  Unidentified Flying Object  Uh-oh, it's time to launch a mystery UFO  TODO: Play UFO sound  UFO will be drawn next frame  Erase old pos  Move  Check bounds  Draw new pos  Erase mystery number  Exploding  Erase explosion  Draw mystery_score, sleep, increase score and continue  Give an extra life for each new level  Score  Init alien positions and states  Last row, bombers  Init bombs to inactive (S_IDLE)  Start aliens closer to earth from level 2  Max concurrent bombs  Increase speed  Increase speed more  4 shields  Bottom line  Restore foreground to black (for fast erase later).  Start moving the bottom row left to right  TODO: Change max_ship_speed to 3 at higher levels  Seed random number generator with a "random" number  Precalculate start of each scanline  Init hiscore to 0  Init alien types in aliens array  Kang  Kodos  Serak  Save screen white color  Save screen green color  Restore black foreground  Flash score at start  Don't allow ship movement during explosion  No button pressed. Stop ship.  return false;  Fire shot  TODO: play fire sound  Quit if USB is connected  Print dimensions (just for debugging)  Init  Convert CYCLETIME (in ms) to HZ  Animate  Check if level is finished (marked by move_fire)  TODO: Play level finished sound  Move aliens  Move alien bombs  Update "playfield" rect  Wait until next frame  end while  this is the plugin entry point  Turn off backlight timeout  now go ahead and have fun!  Game Over.  TODO: Play game over sound  Save new hiscore  Restore user's original backlight setting  Turn on backlight timeout (revert to settings) *
 * GNU Emacs settings: Kernighan & Richie coding style with
 *                     4 spaces indent and no tabs.
 * Local Variables:
 *  c-file-style: "k&r"
 *  c-basic-offset: 4
 *  indent-tabs-mode: nil
 * End:
 **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Albert Veli
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Improvised creds goes to:
 *
 * - Anders Clausen for ingeniously inventing the name Invadrox.
 * - Linus Nielsen-Feltzing for patiently answering n00b questions.
  bitmaps  get dimensions for later use from the bitmaps  Original graphics is only 1bpp so it should be portable
 * to most targets. But for now, only support the simple ones.
  #define DEBUG  TODO: Figure out which buttons to use for Tatung Elio TPJ-1022  HAVE_TOUCHSCREEN  Defines common to all models  SCORE_Y = 0 for most targets. Gigabeat redefines it later.  m:robe 500 defines  Original arcade game size 224x240, 1bpp with
 * red overlay at top and green overlay at bottom.
 *
 * M:Robe 500: 640x480x16
 * ======================
  iPod Video defines  Original arcade game size 224x240, 1bpp with
 * red overlay at top and green overlay at bottom.
 *
 * iPod Video: 320x240x16
 * ======================
 * X: 48p padding at left/right gives 224p playfield in middle.
 *    10p "border" gives 204p actual playfield. UFO use full 224p.
 * Y: Use full 240p.
 *
 * MAX_X = (204 - 12) / 2 - 1 = 95
 *
 * Y: Score text 7       0
 *    Space      10      7
 *    Score      7       17
 *    Space      8       24
 * 3  Ufo        7       32
 * 2  Space      Aliens start at 32 + 3 * 8 = 56
 * 0  aliens     9*8     56  -
 *    space     ~7*8     128  | 18.75 aliens space between
 *    shield     2*8     182  | first alien and ship.
 *    space      8       198  | MAX_Y = 18
 *    ship       8       206 -
 *    space      2*8     214
 *    hline      1       230 - PLAYFIELD_Y
 *    bottom border 10   240
 *    Lives and Level goes inside bottom border
  Sandisk Sansa e200: 176x220x16
 * ==============================
 * X: No padding. 8p border -> 160p playfield.
 *
 * 8p Aliens with 3p spacing -> 88 + 30 = 118p aliens block.
 * (160 - 118) / 2 = 21 rounds for whole block (more than original)
 * MAX_X = (160 - 8) / 2 - 1 = 75 rounds for single alien (less than original)
 *
 *    LOGO       70       0
 *    Score text 5        70
 *    Space      5        75
 * Y  Score      5        80
 *    Space      10       85
 * 2  Ufo        5        95
 * 2  Space      10      100
 * 0  aliens     9*5     110 -
 *    space     ~7*5     155  | 18.6 aliens space between
 *    shield     2*5     188  | first alien and ship.
 *    space      5       198  | MAX_Y = 18
 *    ship       5       203 -
 *    space      5       208
 *    hline      1       213 PLAYFIELD_Y
 *    bottom border 6
 *    LCD_HEIGHT         220
 *    Lives and Level goes inside bottom border
  Redefine SCORE_Y  iPod Nano: 176x132x16
 * ======================
 * X: No padding. 8p border -> 160p playfield.
 *
 *    LIVES_X 8
 *    ALIEN_WIDTH 8
 *    ALIEN_HEIGHT 5
 *    ALIEN_SPACING 3
 *    SHIP_WIDTH 10
 *    SHIP_HEIGHT 5
 *    FONT_HEIGHT 5
 *    UFO_WIDTH 10
 *    UFO_HEIGHT 5
 *    SHIELD_WIDTH 15
 *    SHIELD_HEIGHT 10
 *    MAX_X 75
 *    MAX_Y = 18
 *    ALIEN_START_Y (UFO_Y + 12)
 *
 * 8p Aliens with 3p spacing -> 88 + 30 = 118p aliens block.
 * (160 - 118) / 2 = 21 rounds for whole block (more than original)
 * MAX_X = (160 - 8) / 2 - 1 = 75 rounds for single alien (less than original)
 *
 * Y: Scoreline  5         0 (combine scoretext and numbers on same line)
 *    Space      5         5
 * 1  Ufo        5        10
 * 3  Space      7        15
 * 2  aliens     9*5      22 -
 *    space     ~7*5      67  | Just above 18 aliens space between
 *    shield     2*5     100  | first alien and ship.
 *    space      5       110  | MAX_Y = 18
 *    ship       5       115 -
 *    space      5       120
 *    hline      1       125 PLAYFIELD_Y
 *    bottom border 6    126
 *    LCD_HEIGHT         131
 *    Lives and Level goes inside bottom border
  iAudio X5, iRiver H10 20Gb, iPod 3g/4g, H100, M5: 160x128
 * =========================================================
 * X: No padding. No border -> 160p playfield.
 *
 *    LIVES_X 0
 *    ALIEN_WIDTH 8
 *    ALIEN_HEIGHT 5
 *    ALIEN_SPACING 3
 *    SHIP_WIDTH 10
 *    SHIP_HEIGHT 5
 *    FONT_HEIGHT 5
 *    UFO_WIDTH 10
 *    UFO_HEIGHT 5
 *    SHIELD_WIDTH 15
 *    SHIELD_HEIGHT 10
 *    MAX_X 75
 *    MAX_Y = 18
 *    ALIEN_START_Y (UFO_Y + 10)
 *
 * 8p Aliens with 3p spacing -> 88 + 30 = 118p aliens block.
 * (160 - 118) / 2 = 21 rounds for whole block (more than original)
 * MAX_X = (160 - 8) / 2 - 1 = 75 rounds for single alien (less than original)
 *
 * Y: Scoreline  5         0 (combine scoretext and numbers on same line)
 *    Space      5         5
 * 1  Ufo        5        10
 * 2  Space      5        15
 * 8  aliens     9*5      20 -
 *    space     ~6*5      65  | Just above 18 aliens space between
 *    shield     2*5      96  | first alien and ship.
 *    space      5       106  | MAX_Y = 18
 *    ship       5       111 -
 *    space      5       116
 *    hline      1       121 PLAYFIELD_Y
 *    bottom border 6    122
 *    LCD_HEIGHT         128
 *    Lives and Level goes inside bottom border
  Gigabeat: 240x320x16
 * ======================
 * X: 8p padding at left/right gives 224p playfield in middle.
 *    10p "border" gives 204p actual playfield. UFO use full 224p.
 * Y: Use bottom 240p for playfield and top 80 pixels for logo.
 *
 * MAX_X = (204 - 12) / 2 - 1 = 95
 *
 * Y: Score text 7       0   + 80
 *    Space      10      7   + 80
 *    Score      7       17  + 80
 *    Space      8       24  + 80
 * 3  Ufo        7       32  + 80
 * 2  Space      Aliens start at 32 + 3 * 8 = 56
 * 0  aliens     9*8     56  -
 *    space     ~7*8     128  | 18.75 aliens space between
 *    shield     2*8     182  | first alien and ship.
 *    space      8       198  | MAX_Y = 18
 *    ship       8       206 -
 *    space      2*8     214
 *    hline      1       230 310  - PLAYFIELD_Y
 *    bottom border 10   240 320
 *    Lives and Level goes inside bottom border
  Redefine SCORE_Y  TPJ1022, H300, iPod Color: 220x176x16
 * ============================
 * X: 0p padding at left/right gives 220p playfield in middle.
 *    8p "border" gives 204p actual playfield. UFO use full 220p.
 * Y: Use full 176p for playfield.
 *
 * MAX_X = (204 - 12) / 2 - 1 = 95
 *
 * Y: Score text 7       0
 *    Space      8       7
 * 1  Ufo        7       15
 * 7  Space      Aliens start at 15 + 3 * 8 = 56
 * 6  aliens     9*8     25  -
 *    space     ~7*8     103  | 15.6 aliens space between
 *    shield     2*8     126  | first alien and ship.
 *    space      8       142  | MAX_Y = 15
 *    ship       8       150 -
 *    space      8       158
 *    hline      1       166 - PLAYFIELD_Y
 *    bottom border 10   176
 *    Lives and Level goes inside bottom border
  Defines common to each "graphic type"  Colors  Alien states  Fire/bomb/ufo states  Fire/bomb targets  The time (in ms) for one iteration through the game loop - decrease this
 * to speed up the game - note that current_tick is (currently) only accurate
 * to 10ms.
  Physical x is at PLAYFIELD_X + LIVES_X + x * ALIEN_SPEED
 * Physical y is at y * ALIEN_HEIGHT
  x-coordinate (0 - 95)  y-coordinate (0 - 18)  0 (Kang), 1 (Kodos), 2 (Serak)  Dead, alive or bomber  Aliens box 5 rows * ALIENS aliens in each row  Current animation frame  Number of frames in animation  Remember target during explosion frames  0 (IDLE) = inactive, 1 (FIRE) or negative, exploding  Increase max_bombs at higher levels  Raw framebuffer value of shield/ship green color  For optimization, precalculate startoffset of each scanline  No standard get_pixel function yet, use this hack instead  Horizontal packing  Vertical packing  Horizontal/Vertical packing  Draw "digits" least significant digits of num at (x,y)  Update lcd  Draw new hiscore (same as score)  Lives num  Ships  Erase ship to the right (if less than MAX_LIVES)  Update lives (and level) part of screen  Return false if there is no next alive alien (round is over)  End of this row. Move up one row.  No more aliens in this round.  No more alive aliens. Round finished.  Move down-left next round  Move down-right next round  Not left nor right. Set down to false.  All aliens have been moved.
 * Set curr_alien to first alive.
 * Return false if no-one is left alive.
  All aliens dead.  Move current alien (curr_alien is pointing to a living alien)  Alien is at bottom. Game Over.  Moving right  Now, after move, check if we hit the right border.  Moving left  Now, after move, check if we hit the left border.  Erase old position  Moved in y-dir. Erase whole alien.  Erase left edge  Erase right edge  Draw alien at new pos  Round finished. Set curr_alien to first alive from bottom.  Should never happen. Taken care of in move_fire().  TODO: Play next background sound  Erase old ship  Move right. Erase leftmost part of ship.  Move left. Erase rightmost part of ship.  Draw ship  Alternate between frame 1 and 2 during hit  Save ship_x for next time  Alien hit. Wait until explosion is finished.  Erase exploding_alien  Special case. We killed curr_alien.  Round finished. Set curr_alien to first alive from bottom.  Erase  Check top  TODO: Play explode sound  Move  Hit UFO?  Center explosion  Hit bomb? (check position, not pixel value)  Count as hit if within BOMB_WIDTH pixels  Erase bomb  Explode ship fire  Check for hit Hit shield  TODO: Play explode sound  Center explosion around hit pixel  Hit alien?  TODO: play alien hit sound  Set (possible) alien above to bomber  printf("New bomber (%d, %d)\n", j % ALIENS, j / ALIENS);  Update score part of screen  Paralyze aliens S_EXPLODE frames  Since alien is 1 pixel taller than explosion sprite, erase bottom line  Draw shot  Count up towards S_IDLE, then erase explosion  Erase explosion  Draw explosion with black pixels  Return a BOMBER alien  TODO: Weigh higher probability near ship  No BOMBER found in this col  No BOMBER found at all (error?)  Advance frame  x, y  Check for duplets in x and y direction  Skip this one, continue with next bomb  printf("Bomb %d duplet of %d\n", i, j);  Passed, set type  Bombs away  Erase old position  Move  Check if bottom hit  Check for green (ship or shield)  Move to hit pixel  Check if ship is hit  TODO: play ship hit sound  Shield hit  Center explosion around hit pixel in shield  Hit ship or shield, continue  If we get here state should be < 0, exploding  Erase explosion  Sleep 1s to give player time to examine lives left  Erase explosion (even if ship hit, might be another bomb)  Unidentified Flying Object  Uh-oh, it's time to launch a mystery UFO  TODO: Play UFO sound  UFO will be drawn next frame  Erase old pos  Move  Check bounds  Draw new pos  Erase mystery number  Exploding  Erase explosion  Draw mystery_score, sleep, increase score and continue  Give an extra life for each new level  Score  Init alien positions and states  Last row, bombers  Init bombs to inactive (S_IDLE)  Start aliens closer to earth from level 2  Max concurrent bombs  Increase speed  Increase speed more  4 shields  Bottom line  Restore foreground to black (for fast erase later).  Start moving the bottom row left to right  TODO: Change max_ship_speed to 3 at higher levels  Seed random number generator with a "random" number  Precalculate start of each scanline  Init hiscore to 0  Init alien types in aliens array  Kang  Kodos  Serak  Save screen white color  Save screen green color  Restore black foreground  Flash score at start  Don't allow ship movement during explosion  No button pressed. Stop ship.  return false;  Fire shot  TODO: play fire sound  Quit if USB is connected  Print dimensions (just for debugging)  Init  Convert CYCLETIME (in ms) to HZ  Animate  Check if level is finished (marked by move_fire)  TODO: Play level finished sound  Move aliens  Move alien bombs  Update "playfield" rect  Wait until next frame  end while  this is the plugin entry point  Turn off backlight timeout  now go ahead and have fun!  Game Over.  TODO: Play game over sound  Save new hiscore  Restore user's original backlight setting  Turn on backlight timeout (revert to settings) *
 * GNU Emacs settings: Kernighan & Richie coding style with
 *                     4 spaces indent and no tabs.
 * Local Variables:
 *  c-file-style: "k&r"
 *  c-basic-offset: 4
 *  indent-tabs-mode: nil
 * End:
 **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 Albert Veli
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Improvised creds goes to:
 *
 * - Anders Clausen for ingeniously inventing the name Invadrox.
 * - Linus Nielsen-Feltzing for patiently answering n00b questions.
  bitmaps  get dimensions for later use from the bitmaps  Original graphics is only 1bpp so it should be portable
 * to most targets. But for now, only support the simple ones.
  #define DEBUG  TODO: Figure out which buttons to use for Tatung Elio TPJ-1022  HAVE_TOUCHSCREEN  Defines common to all models  SCORE_Y = 0 for most targets. Gigabeat redefines it later.  m:robe 500 defines  Original arcade game size 224x240, 1bpp with
 * red overlay at top and green overlay at bottom.
 *
 * M:Robe 500: 640x480x16
 * ======================
  iPod Video defines  Original arcade game size 224x240, 1bpp with
 * red overlay at top and green overlay at bottom.
 *
 * iPod Video: 320x240x16
 * ======================
 * X: 48p padding at left/right gives 224p playfield in middle.
 *    10p "border" gives 204p actual playfield. UFO use full 224p.
 * Y: Use full 240p.
 *
 * MAX_X = (204 - 12) / 2 - 1 = 95
 *
 * Y: Score text 7       0
 *    Space      10      7
 *    Score      7       17
 *    Space      8       24
 * 3  Ufo        7       32
 * 2  Space      Aliens start at 32 + 3 * 8 = 56
 * 0  aliens     9*8     56  -
 *    space     ~7*8     128  | 18.75 aliens space between
 *    shield     2*8     182  | first alien and ship.
 *    space      8       198  | MAX_Y = 18
 *    ship       8       206 -
 *    space      2*8     214
 *    hline      1       230 - PLAYFIELD_Y
 *    bottom border 10   240
 *    Lives and Level goes inside bottom border
  Sandisk Sansa e200: 176x220x16
 * ==============================
 * X: No padding. 8p border -> 160p playfield.
 *
 * 8p Aliens with 3p spacing -> 88 + 30 = 118p aliens block.
 * (160 - 118) / 2 = 21 rounds for whole block (more than original)
 * MAX_X = (160 - 8) / 2 - 1 = 75 rounds for single alien (less than original)
 *
 *    LOGO       70       0
 *    Score text 5        70
 *    Space      5        75
 * Y  Score      5        80
 *    Space      10       85
 * 2  Ufo        5        95
 * 2  Space      10      100
 * 0  aliens     9*5     110 -
 *    space     ~7*5     155  | 18.6 aliens space between
 *    shield     2*5     188  | first alien and ship.
 *    space      5       198  | MAX_Y = 18
 *    ship       5       203 -
 *    space      5       208
 *    hline      1       213 PLAYFIELD_Y
 *    bottom border 6
 *    LCD_HEIGHT         220
 *    Lives and Level goes inside bottom border
  Redefine SCORE_Y  iPod Nano: 176x132x16
 * ======================
 * X: No padding. 8p border -> 160p playfield.
 *
 *    LIVES_X 8
 *    ALIEN_WIDTH 8
 *    ALIEN_HEIGHT 5
 *    ALIEN_SPACING 3
 *    SHIP_WIDTH 10
 *    SHIP_HEIGHT 5
 *    FONT_HEIGHT 5
 *    UFO_WIDTH 10
 *    UFO_HEIGHT 5
 *    SHIELD_WIDTH 15
 *    SHIELD_HEIGHT 10
 *    MAX_X 75
 *    MAX_Y = 18
 *    ALIEN_START_Y (UFO_Y + 12)
 *
 * 8p Aliens with 3p spacing -> 88 + 30 = 118p aliens block.
 * (160 - 118) / 2 = 21 rounds for whole block (more than original)
 * MAX_X = (160 - 8) / 2 - 1 = 75 rounds for single alien (less than original)
 *
 * Y: Scoreline  5         0 (combine scoretext and numbers on same line)
 *    Space      5         5
 * 1  Ufo        5        10
 * 3  Space      7        15
 * 2  aliens     9*5      22 -
 *    space     ~7*5      67  | Just above 18 aliens space between
 *    shield     2*5     100  | first alien and ship.
 *    space      5       110  | MAX_Y = 18
 *    ship       5       115 -
 *    space      5       120
 *    hline      1       125 PLAYFIELD_Y
 *    bottom border 6    126
 *    LCD_HEIGHT         131
 *    Lives and Level goes inside bottom border
  iAudio X5, iRiver H10 20Gb, iPod 3g/4g, H100, M5: 160x128
 * =========================================================
 * X: No padding. No border -> 160p playfield.
 *
 *    LIVES_X 0
 *    ALIEN_WIDTH 8
 *    ALIEN_HEIGHT 5
 *    ALIEN_SPACING 3
 *    SHIP_WIDTH 10
 *    SHIP_HEIGHT 5
 *    FONT_HEIGHT 5
 *    UFO_WIDTH 10
 *    UFO_HEIGHT 5
 *    SHIELD_WIDTH 15
 *    SHIELD_HEIGHT 10
 *    MAX_X 75
 *    MAX_Y = 18
 *    ALIEN_START_Y (UFO_Y + 10)
 *
 * 8p Aliens with 3p spacing -> 88 + 30 = 118p aliens block.
 * (160 - 118) / 2 = 21 rounds for whole block (more than original)
 * MAX_X = (160 - 8) / 2 - 1 = 75 rounds for single alien (less than original)
 *
 * Y: Scoreline  5         0 (combine scoretext and numbers on same line)
 *    Space      5         5
 * 1  Ufo        5        10
 * 2  Space      5        15
 * 8  aliens     9*5      20 -
 *    space     ~6*5      65  | Just above 18 aliens space between
 *    shield     2*5      96  | first alien and ship.
 *    space      5       106  | MAX_Y = 18
 *    ship       5       111 -
 *    space      5       116
 *    hline      1       121 PLAYFIELD_Y
 *    bottom border 6    122
 *    LCD_HEIGHT         128
 *    Lives and Level goes inside bottom border
  Gigabeat: 240x320x16
 * ======================
 * X: 8p padding at left/right gives 224p playfield in middle.
 *    10p "border" gives 204p actual playfield. UFO use full 224p.
 * Y: Use bottom 240p for playfield and top 80 pixels for logo.
 *
 * MAX_X = (204 - 12) / 2 - 1 = 95
 *
 * Y: Score text 7       0   + 80
 *    Space      10      7   + 80
 *    Score      7       17  + 80
 *    Space      8       24  + 80
 * 3  Ufo        7       32  + 80
 * 2  Space      Aliens start at 32 + 3 * 8 = 56
 * 0  aliens     9*8     56  -
 *    space     ~7*8     128  | 18.75 aliens space between
 *    shield     2*8     182  | first alien and ship.
 *    space      8       198  | MAX_Y = 18
 *    ship       8       206 -
 *    space      2*8     214
 *    hline      1       230 310  - PLAYFIELD_Y
 *    bottom border 10   240 320
 *    Lives and Level goes inside bottom border
  Redefine SCORE_Y  TPJ1022, H300, iPod Color: 220x176x16
 * ============================
 * X: 0p padding at left/right gives 220p playfield in middle.
 *    8p "border" gives 204p actual playfield. UFO use full 220p.
 * Y: Use full 176p for playfield.
 *
 * MAX_X = (204 - 12) / 2 - 1 = 95
 *
 * Y: Score text 7       0
 *    Space      8       7
 * 1  Ufo        7       15
 * 7  Space      Aliens start at 15 + 3 * 8 = 56
 * 6  aliens     9*8     25  -
 *    space     ~7*8     103  | 15.6 aliens space between
 *    shield     2*8     126  | first alien and ship.
 *    space      8       142  | MAX_Y = 15
 *    ship       8       150 -
 *    space      8       158
 *    hline      1       166 - PLAYFIELD_Y
 *    bottom border 10   176
 *    Lives and Level goes inside bottom border
  Defines common to each "graphic type"  Colors  Alien states  Fire/bomb/ufo states  Fire/bomb targets  The time (in ms) for one iteration through the game loop - decrease this
 * to speed up the game - note that current_tick is (currently) only accurate
 * to 10ms.
  Physical x is at PLAYFIELD_X + LIVES_X + x * ALIEN_SPEED
 * Physical y is at y * ALIEN_HEIGHT
  x-coordinate (0 - 95)  y-coordinate (0 - 18)  0 (Kang), 1 (Kodos), 2 (Serak)  Dead, alive or bomber  Aliens box 5 rows * ALIENS aliens in each row  Current animation frame  Number of frames in animation  Remember target during explosion frames  0 (IDLE) = inactive, 1 (FIRE) or negative, exploding  Increase max_bombs at higher levels  Raw framebuffer value of shield/ship green color  For optimization, precalculate startoffset of each scanline  No standard get_pixel function yet, use this hack instead  Horizontal packing  Vertical packing  Horizontal/Vertical packing  Draw "digits" least significant digits of num at (x,y)  Update lcd  Draw new hiscore (same as score)  Lives num  Ships  Erase ship to the right (if less than MAX_LIVES)  Update lives (and level) part of screen  Return false if there is no next alive alien (round is over)  End of this row. Move up one row.  No more aliens in this round.  No more alive aliens. Round finished.  Move down-left next round  Move down-right next round  Not left nor right. Set down to false.  All aliens have been moved.
 * Set curr_alien to first alive.
 * Return false if no-one is left alive.
  All aliens dead.  Move current alien (curr_alien is pointing to a living alien)  Alien is at bottom. Game Over.  Moving right  Now, after move, check if we hit the right border.  Moving left  Now, after move, check if we hit the left border.  Erase old position  Moved in y-dir. Erase whole alien.  Erase left edge  Erase right edge  Draw alien at new pos  Round finished. Set curr_alien to first alive from bottom.  Should never happen. Taken care of in move_fire().  TODO: Play next background sound  Erase old ship  Move right. Erase leftmost part of ship.  Move left. Erase rightmost part of ship.  Draw ship  Alternate between frame 1 and 2 during hit  Save ship_x for next time  Alien hit. Wait until explosion is finished.  Erase exploding_alien  Special case. We killed curr_alien.  Round finished. Set curr_alien to first alive from bottom.  Erase  Check top  TODO: Play explode sound  Move  Hit UFO?  Center explosion  Hit bomb? (check position, not pixel value)  Count as hit if within BOMB_WIDTH pixels  Erase bomb  Explode ship fire  Check for hit Hit shield  TODO: Play explode sound  Center explosion around hit pixel  Hit alien?  TODO: play alien hit sound  Set (possible) alien above to bomber  printf("New bomber (%d, %d)\n", j % ALIENS, j / ALIENS);  Update score part of screen  Paralyze aliens S_EXPLODE frames  Since alien is 1 pixel taller than explosion sprite, erase bottom line  Draw shot  Count up towards S_IDLE, then erase explosion  Erase explosion  Draw explosion with black pixels  Return a BOMBER alien  TODO: Weigh higher probability near ship  No BOMBER found in this col  No BOMBER found at all (error?)  Advance frame  x, y  Check for duplets in x and y direction  Skip this one, continue with next bomb  printf("Bomb %d duplet of %d\n", i, j);  Passed, set type  Bombs away  Erase old position  Move  Check if bottom hit  Check for green (ship or shield)  Move to hit pixel  Check if ship is hit  TODO: play ship hit sound  Shield hit  Center explosion around hit pixel in shield  Hit ship or shield, continue  If we get here state should be < 0, exploding  Erase explosion  Sleep 1s to give player time to examine lives left  Erase explosion (even if ship hit, might be another bomb)  Unidentified Flying Object  Uh-oh, it's time to launch a mystery UFO  TODO: Play UFO sound  UFO will be drawn next frame  Erase old pos  Move  Check bounds  Draw new pos  Erase mystery number  Exploding  Erase explosion  Draw mystery_score, sleep, increase score and continue  Give an extra life for each new level  Score  Init alien positions and states  Last row, bombers  Init bombs to inactive (S_IDLE)  Start aliens closer to earth from level 2  Max concurrent bombs  Increase speed  Increase speed more  4 shields  Bottom line  Restore foreground to black (for fast erase later).  Start moving the bottom row left to right  TODO: Change max_ship_speed to 3 at higher levels  Seed random number generator with a "random" number  Precalculate start of each scanline  Init hiscore to 0  Init alien types in aliens array  Kang  Kodos  Serak  Save screen white color  Save screen green color  Restore black foreground  Flash score at start  Don't allow ship movement during explosion  No button pressed. Stop ship.  return false;  Fire shot  TODO: play fire sound  Quit if USB is connected  Print dimensions (just for debugging)  Init  Convert CYCLETIME (in ms) to HZ  Animate  Check if level is finished (marked by move_fire)  TODO: Play level finished sound  Move aliens  Move alien bombs  Update "playfield" rect  Wait until next frame  end while  this is the plugin entry point  Turn off backlight timeout  now go ahead and have fun!  Game Over.  TODO: Play game over sound  Save new hiscore  Restore user's original backlight setting  Turn on backlight timeout (revert to settings) *
 * GNU Emacs settings: Kernighan & Richie coding style with
 *                     4 spaces indent and no tabs.
 * Local Variables:
 *  c-file-style: "k&r"
 *  c-basic-offset: 4
 *  indent-tabs-mode: nil
 * End:
 