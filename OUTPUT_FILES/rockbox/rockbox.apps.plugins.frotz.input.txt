 input.c - High level input functions
 *	Copyright (c) 1995-1997 Stefan Jokisch
 *
 * Changes for Rockbox copyright 2009 Torne Wuff
 *
 * This file is part of Frotz.
 *
 * Frotz is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Frotz is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 
 * is_terminator
 *
 * Check if the given key is an input terminator.
 *
  is_terminator 
 * z_make_menu, add or remove a menu and branch if successful.
 *
 * 	zargs[0] = number of menu
 *	zargs[1] = table of menu entries or 0 to remove menu
 *
  This opcode was only used for the Macintosh version of Journey.
       It controls menus with numbers greater than 2 (menus 0, 1 and 2
       are system menus). Frotz doesn't implement menus yet.  z_make_menu 
 * read_string
 *
 * Read a string from the current input stream.
 *
  read_string 
 * read_number
 *
 * Ask the user to type in a number and return it.
 *
  read_number 
 * z_read, read a line of input and (in V5+) store the terminating key.
 *
 *	zargs[0] = address of text buffer
 *	zargs[1] = address of token buffer
 *	zargs[2] = timeout in tenths of a second (optional)
 *	zargs[3] = packed address of routine to be called on timeout
 *
  Supply default arguments  Get maximum input size  Get initial input size  Copy initial input to local buffer  Draw status line for V1 to V3 games  Read input from current input stream  buffer and size  timeout value    timeout routine  enable hot keys  no script in V6  Perform save_undo for V1 to V4 games  Copy local buffer back to dynamic memory  Add null character (V1-V4) or write input length into 2nd byte  Tokenise line if a token buffer is present  Store key  z_read 
 * z_read_char, read and store a key.
 *
 *	zargs[0] = input device (must be 1)
 *	zargs[1] = timeout in tenths of a second (optional)
 *	zargs[2] = packed address of routine to be called on timeout
 *
  Supply default arguments  Read input from the current input stream  timeout value    timeout routine  enable hot keys  Store key  z_read_char 
 * z_read_mouse, write the current mouse status into a table.
 *
 *	zargs[0] = address of table
 *
  Read the mouse position and which buttons are down  mouse button bits  menu selection  z_read_mouse  input.c - High level input functions
 *	Copyright (c) 1995-1997 Stefan Jokisch
 *
 * Changes for Rockbox copyright 2009 Torne Wuff
 *
 * This file is part of Frotz.
 *
 * Frotz is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Frotz is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 
 * is_terminator
 *
 * Check if the given key is an input terminator.
 *
  is_terminator 
 * z_make_menu, add or remove a menu and branch if successful.
 *
 * 	zargs[0] = number of menu
 *	zargs[1] = table of menu entries or 0 to remove menu
 *
  This opcode was only used for the Macintosh version of Journey.
       It controls menus with numbers greater than 2 (menus 0, 1 and 2
       are system menus). Frotz doesn't implement menus yet.  z_make_menu 
 * read_string
 *
 * Read a string from the current input stream.
 *
  read_string 
 * read_number
 *
 * Ask the user to type in a number and return it.
 *
  read_number 
 * z_read, read a line of input and (in V5+) store the terminating key.
 *
 *	zargs[0] = address of text buffer
 *	zargs[1] = address of token buffer
 *	zargs[2] = timeout in tenths of a second (optional)
 *	zargs[3] = packed address of routine to be called on timeout
 *
  Supply default arguments  Get maximum input size  Get initial input size  Copy initial input to local buffer  Draw status line for V1 to V3 games  Read input from current input stream  buffer and size  timeout value    timeout routine  enable hot keys  no script in V6  Perform save_undo for V1 to V4 games  Copy local buffer back to dynamic memory  Add null character (V1-V4) or write input length into 2nd byte  Tokenise line if a token buffer is present  Store key  z_read 
 * z_read_char, read and store a key.
 *
 *	zargs[0] = input device (must be 1)
 *	zargs[1] = timeout in tenths of a second (optional)
 *	zargs[2] = packed address of routine to be called on timeout
 *
  Supply default arguments  Read input from the current input stream  timeout value    timeout routine  enable hot keys  Store key  z_read_char 
 * z_read_mouse, write the current mouse status into a table.
 *
 *	zargs[0] = address of table
 *
  Read the mouse position and which buttons are down  mouse button bits  menu selection  z_read_mouse  input.c - High level input functions
 *	Copyright (c) 1995-1997 Stefan Jokisch
 *
 * Changes for Rockbox copyright 2009 Torne Wuff
 *
 * This file is part of Frotz.
 *
 * Frotz is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Frotz is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 
 * is_terminator
 *
 * Check if the given key is an input terminator.
 *
  is_terminator 
 * z_make_menu, add or remove a menu and branch if successful.
 *
 * 	zargs[0] = number of menu
 *	zargs[1] = table of menu entries or 0 to remove menu
 *
  This opcode was only used for the Macintosh version of Journey.
       It controls menus with numbers greater than 2 (menus 0, 1 and 2
       are system menus). Frotz doesn't implement menus yet.  z_make_menu 
 * read_string
 *
 * Read a string from the current input stream.
 *
  read_string 
 * read_number
 *
 * Ask the user to type in a number and return it.
 *
  read_number 
 * z_read, read a line of input and (in V5+) store the terminating key.
 *
 *	zargs[0] = address of text buffer
 *	zargs[1] = address of token buffer
 *	zargs[2] = timeout in tenths of a second (optional)
 *	zargs[3] = packed address of routine to be called on timeout
 *
  Supply default arguments  Get maximum input size  Get initial input size  Copy initial input to local buffer  Draw status line for V1 to V3 games  Read input from current input stream  buffer and size  timeout value    timeout routine  enable hot keys  no script in V6  Perform save_undo for V1 to V4 games  Copy local buffer back to dynamic memory  Add null character (V1-V4) or write input length into 2nd byte  Tokenise line if a token buffer is present  Store key  z_read 
 * z_read_char, read and store a key.
 *
 *	zargs[0] = input device (must be 1)
 *	zargs[1] = timeout in tenths of a second (optional)
 *	zargs[2] = packed address of routine to be called on timeout
 *
  Supply default arguments  Read input from the current input stream  timeout value    timeout routine  enable hot keys  Store key  z_read_char 
 * z_read_mouse, write the current mouse status into a table.
 *
 *	zargs[0] = address of table
 *
  Read the mouse position and which buttons are down  mouse button bits  menu selection  z_read_mouse 