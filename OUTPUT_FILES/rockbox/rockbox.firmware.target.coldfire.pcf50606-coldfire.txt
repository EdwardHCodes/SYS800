**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Linus Nielsen Feltzing
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Define the approprate bits for SDA and SCL being the only difference in
   config between each player.  LRCK3/GPIO45      SWE/GPIO12        SDA1/RXD1/GPIO44  SCL1/TXD1/GPIO10  Data  MBAR2 + 0x0b0     MBAR2 + 0x0b4     MBAR2 + 0x0b8     MBAR2 + 0x0bc     Clock  MBAR2 + 0x000     MBAR2 + 0x004     MBAR2 + 0x008     MBAR2 + 0x00c     Bit banged I2C  SDA_HI_IN  SCL_HI_IN  DELAY  SDA_LO_OUT  DELAY  SCL_LO_OUT  outputs  inputs  clobbers  SDA_LO_OUT  DELAY  SCL_HI_IN  DELAY  SDA_HI_IN  outputs  inputs  clobbers  if (!ack)    SDA_HI_IN  trapf.l : else    SDA_LO_OUT  DELAY  SCL_HI_IN  DELAY  SCL_LO_OUT  outputs  inputs  clobbers  SDA_HI_IN  DELAY  SCL_HI_IN  DELAY  ret = !SDA  SCL_LO_OUT  outputs  inputs  clobbers  byte <<= 24  i = 8  do  if ((byte <<= 1) carry)    SDA_HI_IN  trapf.l; else    SDA_LO_OUT  DELAY  SCL_HI_IN  DELAY  SCL_LO_OUT  i--  while (i != 0)  outputs  inputs  clobbers  clock out each bit, MSB first  SDA_HI_IN  i = 8  byte = 0  do  DELAY  SCL_HI_IN  DELAY  byte <<= 1  if (SDA)    byte++  SCL_LO_OUT  i--  while (i != 0)  outputs  inputs  clobbers  clock in each bit, MSB first  send read command  send write command **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Linus Nielsen Feltzing
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Define the approprate bits for SDA and SCL being the only difference in
   config between each player.  LRCK3/GPIO45      SWE/GPIO12        SDA1/RXD1/GPIO44  SCL1/TXD1/GPIO10  Data  MBAR2 + 0x0b0     MBAR2 + 0x0b4     MBAR2 + 0x0b8     MBAR2 + 0x0bc     Clock  MBAR2 + 0x000     MBAR2 + 0x004     MBAR2 + 0x008     MBAR2 + 0x00c     Bit banged I2C  SDA_HI_IN  SCL_HI_IN  DELAY  SDA_LO_OUT  DELAY  SCL_LO_OUT  outputs  inputs  clobbers  SDA_LO_OUT  DELAY  SCL_HI_IN  DELAY  SDA_HI_IN  outputs  inputs  clobbers  if (!ack)    SDA_HI_IN  trapf.l : else    SDA_LO_OUT  DELAY  SCL_HI_IN  DELAY  SCL_LO_OUT  outputs  inputs  clobbers  SDA_HI_IN  DELAY  SCL_HI_IN  DELAY  ret = !SDA  SCL_LO_OUT  outputs  inputs  clobbers  byte <<= 24  i = 8  do  if ((byte <<= 1) carry)    SDA_HI_IN  trapf.l; else    SDA_LO_OUT  DELAY  SCL_HI_IN  DELAY  SCL_LO_OUT  i--  while (i != 0)  outputs  inputs  clobbers  clock out each bit, MSB first  SDA_HI_IN  i = 8  byte = 0  do  DELAY  SCL_HI_IN  DELAY  byte <<= 1  if (SDA)    byte++  SCL_LO_OUT  i--  while (i != 0)  outputs  inputs  clobbers  clock in each bit, MSB first  send read command  send write command **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2006 by Linus Nielsen Feltzing
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Define the approprate bits for SDA and SCL being the only difference in
   config between each player.  LRCK3/GPIO45      SWE/GPIO12        SDA1/RXD1/GPIO44  SCL1/TXD1/GPIO10  Data  MBAR2 + 0x0b0     MBAR2 + 0x0b4     MBAR2 + 0x0b8     MBAR2 + 0x0bc     Clock  MBAR2 + 0x000     MBAR2 + 0x004     MBAR2 + 0x008     MBAR2 + 0x00c     Bit banged I2C  SDA_HI_IN  SCL_HI_IN  DELAY  SDA_LO_OUT  DELAY  SCL_LO_OUT  outputs  inputs  clobbers  SDA_LO_OUT  DELAY  SCL_HI_IN  DELAY  SDA_HI_IN  outputs  inputs  clobbers  if (!ack)    SDA_HI_IN  trapf.l : else    SDA_LO_OUT  DELAY  SCL_HI_IN  DELAY  SCL_LO_OUT  outputs  inputs  clobbers  SDA_HI_IN  DELAY  SCL_HI_IN  DELAY  ret = !SDA  SCL_LO_OUT  outputs  inputs  clobbers  byte <<= 24  i = 8  do  if ((byte <<= 1) carry)    SDA_HI_IN  trapf.l; else    SDA_LO_OUT  DELAY  SCL_HI_IN  DELAY  SCL_LO_OUT  i--  while (i != 0)  outputs  inputs  clobbers  clock out each bit, MSB first  SDA_HI_IN  i = 8  byte = 0  do  DELAY  SCL_HI_IN  DELAY  byte <<= 1  if (SDA)    byte++  SCL_LO_OUT  i--  while (i != 0)  outputs  inputs  clobbers  clock in each bit, MSB first  send read command  send write command 