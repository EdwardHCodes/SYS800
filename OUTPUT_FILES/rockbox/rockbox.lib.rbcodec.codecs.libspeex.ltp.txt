 Copyright (C) 2002-2006 Jean-Marc Valin 
   File: ltp.c
   Long-Term Prediction functions

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:
   
   - Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
   
   - Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
   
   - Neither the name of the Xiph.org Foundation nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.
   
   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 HINT: If you had a 40-bit accumulator, you could shift only at the end  HINT: Enable this for machines with enough registers (i.e. not x86)  Compute correlationcorr[nb_pitch-1-i]=inner_prod(x, _y+i, len);y0=y[0];y1=y[1];y2=y[2];y3=y[3]; Compute correlation In fixed-point, we need only one (temporary) array of 32-bit values and two (corr16, ener16) 
      arrays for (normalized) 16-bit values  In floating-point, we need to float arrays and no normalized copies  If the weighted input is close to saturation, then we scale it down  Update energy for next pitch In fixed-point, this actually overrites the energy array (aliased to corr)  Normalize to 180 so we can square it and it still fits in 16 bits  If we scaled weighted input down, we need to scale it up again (OK, so we've just lost the LSB, who cares?)  Search for the best pitch prediction gain  Instead of dividing the tmp by the energy, we multiply on the other side  We can safely put it last and then check  Check if it comes in front of others  Compute open-loop gain if necessary  FIXME: g = max(g,corr/energy) * Finds the best quantized 3-tap pitch predictor by analysis by synthesis  Target vector  LPCs for this subframe  Weighted LPCs #1 for this subframe  Weighted LPCs #2 for this subframe  Excitation  Pitch value  Number of LPC coeffs  Number of samples in subframe  Scale target and excitation down if needed (avoiding overflow)  Scale excitation down if needed (avoiding overflow) plc_tuning *= 2;printf ("%d %d %d %d\n",gain[0],gain[1],gain[2], best_cdbk);* Finds the best quantized 3-tap pitch predictor by analysis by synthesis  Target vector  LPCs for this subframe  Weighted LPCs #1 for this subframe  Weighted LPCs #2 for this subframe  Excitation  Smallest pitch value allowed  Largest pitch value allowed  Voicing (pitch) coefficient  Number of LPC coeffs  Number of samples in subframe  Check if we need to scale everything down in the pitch search to avoid overflows printf ("pitch: %d %d\n", best_pitch, best_gain_index);printf ("%f\n", cumul_gain);printf ("encode pitch: %d %d\n", best_pitch, best_gain_index); Scale target back up if needed  SPEEX_DISABLE_ENCODER  Input excitation  Output excitation  Smallest pitch value allowed  Largest pitch value allowed  Voicing (pitch) coefficient  Number of samples in subframe printf ("decode pitch: %d %d\n", pitch, gain_index);for (i=0;i<nsf;i++)
   exc[i]=PSHR32(exc32[i],13);* Forced pitch delay and gain  Target vector  LPCs for this subframe  Weighted LPCs #1 for this subframe  Weighted LPCs #2 for this subframe  Excitation  Smallest pitch value allowed  Largest pitch value allowed  Voicing (pitch) coefficient  Number of LPC coeffs  Number of samples in subframe  SPEEX_DISABLE_ENCODER * Unquantize forced pitch delay and gain  Input excitation  Output excitation  Smallest pitch value allowed  Largest pitch value allowed  Voicing (pitch) coefficient  Number of samples in subframe  Copyright (C) 2002-2006 Jean-Marc Valin 
   File: ltp.c
   Long-Term Prediction functions

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:
   
   - Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
   
   - Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
   
   - Neither the name of the Xiph.org Foundation nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.
   
   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 HINT: If you had a 40-bit accumulator, you could shift only at the end  HINT: Enable this for machines with enough registers (i.e. not x86)  Compute correlationcorr[nb_pitch-1-i]=inner_prod(x, _y+i, len);y0=y[0];y1=y[1];y2=y[2];y3=y[3]; Compute correlation In fixed-point, we need only one (temporary) array of 32-bit values and two (corr16, ener16) 
      arrays for (normalized) 16-bit values  In floating-point, we need to float arrays and no normalized copies  If the weighted input is close to saturation, then we scale it down  Update energy for next pitch In fixed-point, this actually overrites the energy array (aliased to corr)  Normalize to 180 so we can square it and it still fits in 16 bits  If we scaled weighted input down, we need to scale it up again (OK, so we've just lost the LSB, who cares?)  Search for the best pitch prediction gain  Instead of dividing the tmp by the energy, we multiply on the other side  We can safely put it last and then check  Check if it comes in front of others  Compute open-loop gain if necessary  FIXME: g = max(g,corr/energy) * Finds the best quantized 3-tap pitch predictor by analysis by synthesis  Target vector  LPCs for this subframe  Weighted LPCs #1 for this subframe  Weighted LPCs #2 for this subframe  Excitation  Pitch value  Number of LPC coeffs  Number of samples in subframe  Scale target and excitation down if needed (avoiding overflow)  Scale excitation down if needed (avoiding overflow) plc_tuning *= 2;printf ("%d %d %d %d\n",gain[0],gain[1],gain[2], best_cdbk);* Finds the best quantized 3-tap pitch predictor by analysis by synthesis  Target vector  LPCs for this subframe  Weighted LPCs #1 for this subframe  Weighted LPCs #2 for this subframe  Excitation  Smallest pitch value allowed  Largest pitch value allowed  Voicing (pitch) coefficient  Number of LPC coeffs  Number of samples in subframe  Check if we need to scale everything down in the pitch search to avoid overflows printf ("pitch: %d %d\n", best_pitch, best_gain_index);printf ("%f\n", cumul_gain);printf ("encode pitch: %d %d\n", best_pitch, best_gain_index); Scale target back up if needed  SPEEX_DISABLE_ENCODER  Input excitation  Output excitation  Smallest pitch value allowed  Largest pitch value allowed  Voicing (pitch) coefficient  Number of samples in subframe printf ("decode pitch: %d %d\n", pitch, gain_index);for (i=0;i<nsf;i++)
   exc[i]=PSHR32(exc32[i],13);* Forced pitch delay and gain  Target vector  LPCs for this subframe  Weighted LPCs #1 for this subframe  Weighted LPCs #2 for this subframe  Excitation  Smallest pitch value allowed  Largest pitch value allowed  Voicing (pitch) coefficient  Number of LPC coeffs  Number of samples in subframe  SPEEX_DISABLE_ENCODER * Unquantize forced pitch delay and gain  Input excitation  Output excitation  Smallest pitch value allowed  Largest pitch value allowed  Voicing (pitch) coefficient  Number of samples in subframe  Copyright (C) 2002-2006 Jean-Marc Valin 
   File: ltp.c
   Long-Term Prediction functions

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:
   
   - Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
   
   - Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
   
   - Neither the name of the Xiph.org Foundation nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.
   
   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 HINT: If you had a 40-bit accumulator, you could shift only at the end  HINT: Enable this for machines with enough registers (i.e. not x86)  Compute correlationcorr[nb_pitch-1-i]=inner_prod(x, _y+i, len);y0=y[0];y1=y[1];y2=y[2];y3=y[3]; Compute correlation In fixed-point, we need only one (temporary) array of 32-bit values and two (corr16, ener16) 
      arrays for (normalized) 16-bit values  In floating-point, we need to float arrays and no normalized copies  If the weighted input is close to saturation, then we scale it down  Update energy for next pitch In fixed-point, this actually overrites the energy array (aliased to corr)  Normalize to 180 so we can square it and it still fits in 16 bits  If we scaled weighted input down, we need to scale it up again (OK, so we've just lost the LSB, who cares?)  Search for the best pitch prediction gain  Instead of dividing the tmp by the energy, we multiply on the other side  We can safely put it last and then check  Check if it comes in front of others  Compute open-loop gain if necessary  FIXME: g = max(g,corr/energy) * Finds the best quantized 3-tap pitch predictor by analysis by synthesis  Target vector  LPCs for this subframe  Weighted LPCs #1 for this subframe  Weighted LPCs #2 for this subframe  Excitation  Pitch value  Number of LPC coeffs  Number of samples in subframe  Scale target and excitation down if needed (avoiding overflow)  Scale excitation down if needed (avoiding overflow) plc_tuning *= 2;printf ("%d %d %d %d\n",gain[0],gain[1],gain[2], best_cdbk);* Finds the best quantized 3-tap pitch predictor by analysis by synthesis  Target vector  LPCs for this subframe  Weighted LPCs #1 for this subframe  Weighted LPCs #2 for this subframe  Excitation  Smallest pitch value allowed  Largest pitch value allowed  Voicing (pitch) coefficient  Number of LPC coeffs  Number of samples in subframe  Check if we need to scale everything down in the pitch search to avoid overflows printf ("pitch: %d %d\n", best_pitch, best_gain_index);printf ("%f\n", cumul_gain);printf ("encode pitch: %d %d\n", best_pitch, best_gain_index); Scale target back up if needed  SPEEX_DISABLE_ENCODER  Input excitation  Output excitation  Smallest pitch value allowed  Largest pitch value allowed  Voicing (pitch) coefficient  Number of samples in subframe printf ("decode pitch: %d %d\n", pitch, gain_index);for (i=0;i<nsf;i++)
   exc[i]=PSHR32(exc32[i],13);* Forced pitch delay and gain  Target vector  LPCs for this subframe  Weighted LPCs #1 for this subframe  Weighted LPCs #2 for this subframe  Excitation  Smallest pitch value allowed  Largest pitch value allowed  Voicing (pitch) coefficient  Number of LPC coeffs  Number of samples in subframe  SPEEX_DISABLE_ENCODER * Unquantize forced pitch delay and gain  Input excitation  Output excitation  Smallest pitch value allowed  Largest pitch value allowed  Voicing (pitch) coefficient  Number of samples in subframe 