 Copyright (c) 2003, Miller Puckette and others.
* For information on usage and redistribution, and for a DISCLAIMER OF ALL
* WARRANTIES, see the file, "LICENSE.txt," in this distribution.    machine-independent (well, mostly!) audio layer.  Stores and recalls
    audio settings from argparse routine and from dialog window. 
 ROCKBOX  ROCKBOX  these are set in this file when opening audio, but then may be reduced,
    even to zero, in the system dependent open_audio routines.  scheduler advance in samples  audio I/O block size in sample frames  true if we're metering  max input amplitude  max output amplitude  exported variables  scheduler advance in microseconds  the "state" is normally one if we're open and zero otherwise; 
    but if the state is one, we still haven't necessarily opened the
    audio hardware; see audio_isopen() below.  last requested parameters  init routines for any API which needs to set stuff up before
    any other API gets used.  This is only true of OSS so far.  set channels and sample rate.   ----------------------- public routines -----------------------  open audio devices (after cleaning up the specified device and channel
    vectors).  The audio devices are "zero based" (i.e. "0" means the first
    one.)  We also save the cleaned-up device specification so that we
    can later re-open audio and/or show the settings on a dialog window.  Since the channel vector might be longer than the
	audio device vector, or vice versa, we fill the shorter one
	in to match the longer one.  Also, if both are empty, we fill in
	one device (the default) and two channels.  no input audio devices specified  not set  count total number of input and output channels  if no input or output devices seem to have been specified,
	this really means just disable audio, which we now do.  Meanwhile,
	we can set audio input and output devices to their defaults.  for alsa, only one device is supported; it may
	    be open for both input and output.  open audio using whatever parameters were last used  set the size, in milliseconds, of the audio FIFO  ROCKBOX  Rockbox devices are known in advance. (?)  this shouldn't happen once all the above get filled in.  microsoft device list starts at 0 (the "mapper").  (see also MSW ifdef in sys_parsedevlist(), s_main.c)   To agree with command line flags, normally start at 1  start an audio settings dialog window  these are the devices you're using:  these are all the devices on your system:  post("naudioindev %d naudiooutdev %d longform %f",
	    naudioindev, naudiooutdev, flongform);  new values from dialog window  the new values the dialog came back with:  post("in %d %d %d", nindev,
	    	newaudioindev[nindev] , newaudioinchan[nindev]);  post("out %d %d %d", noutdev,
	    	newaudiooutdev[noutdev] , newaudioinchan[noutdev]);  Nothing to list, IMO.  bash device params back to default  start or stop the audio hardware  start  then again, if only one API (or none) we don't offer any choice.  debugging  Copyright (c) 2003, Miller Puckette and others.
* For information on usage and redistribution, and for a DISCLAIMER OF ALL
* WARRANTIES, see the file, "LICENSE.txt," in this distribution.    machine-independent (well, mostly!) audio layer.  Stores and recalls
    audio settings from argparse routine and from dialog window. 
 ROCKBOX  ROCKBOX  these are set in this file when opening audio, but then may be reduced,
    even to zero, in the system dependent open_audio routines.  scheduler advance in samples  audio I/O block size in sample frames  true if we're metering  max input amplitude  max output amplitude  exported variables  scheduler advance in microseconds  the "state" is normally one if we're open and zero otherwise; 
    but if the state is one, we still haven't necessarily opened the
    audio hardware; see audio_isopen() below.  last requested parameters  init routines for any API which needs to set stuff up before
    any other API gets used.  This is only true of OSS so far.  set channels and sample rate.   ----------------------- public routines -----------------------  open audio devices (after cleaning up the specified device and channel
    vectors).  The audio devices are "zero based" (i.e. "0" means the first
    one.)  We also save the cleaned-up device specification so that we
    can later re-open audio and/or show the settings on a dialog window.  Since the channel vector might be longer than the
	audio device vector, or vice versa, we fill the shorter one
	in to match the longer one.  Also, if both are empty, we fill in
	one device (the default) and two channels.  no input audio devices specified  not set  count total number of input and output channels  if no input or output devices seem to have been specified,
	this really means just disable audio, which we now do.  Meanwhile,
	we can set audio input and output devices to their defaults.  for alsa, only one device is supported; it may
	    be open for both input and output.  open audio using whatever parameters were last used  set the size, in milliseconds, of the audio FIFO  ROCKBOX  Rockbox devices are known in advance. (?)  this shouldn't happen once all the above get filled in.  microsoft device list starts at 0 (the "mapper").  (see also MSW ifdef in sys_parsedevlist(), s_main.c)   To agree with command line flags, normally start at 1  start an audio settings dialog window  these are the devices you're using:  these are all the devices on your system:  post("naudioindev %d naudiooutdev %d longform %f",
	    naudioindev, naudiooutdev, flongform);  new values from dialog window  the new values the dialog came back with:  post("in %d %d %d", nindev,
	    	newaudioindev[nindev] , newaudioinchan[nindev]);  post("out %d %d %d", noutdev,
	    	newaudiooutdev[noutdev] , newaudioinchan[noutdev]);  Nothing to list, IMO.  bash device params back to default  start or stop the audio hardware  start  then again, if only one API (or none) we don't offer any choice.  debugging  Copyright (c) 2003, Miller Puckette and others.
* For information on usage and redistribution, and for a DISCLAIMER OF ALL
* WARRANTIES, see the file, "LICENSE.txt," in this distribution.    machine-independent (well, mostly!) audio layer.  Stores and recalls
    audio settings from argparse routine and from dialog window. 
 ROCKBOX  ROCKBOX  these are set in this file when opening audio, but then may be reduced,
    even to zero, in the system dependent open_audio routines.  scheduler advance in samples  audio I/O block size in sample frames  true if we're metering  max input amplitude  max output amplitude  exported variables  scheduler advance in microseconds  the "state" is normally one if we're open and zero otherwise; 
    but if the state is one, we still haven't necessarily opened the
    audio hardware; see audio_isopen() below.  last requested parameters  init routines for any API which needs to set stuff up before
    any other API gets used.  This is only true of OSS so far.  set channels and sample rate.   ----------------------- public routines -----------------------  open audio devices (after cleaning up the specified device and channel
    vectors).  The audio devices are "zero based" (i.e. "0" means the first
    one.)  We also save the cleaned-up device specification so that we
    can later re-open audio and/or show the settings on a dialog window.  Since the channel vector might be longer than the
	audio device vector, or vice versa, we fill the shorter one
	in to match the longer one.  Also, if both are empty, we fill in
	one device (the default) and two channels.  no input audio devices specified  not set  count total number of input and output channels  if no input or output devices seem to have been specified,
	this really means just disable audio, which we now do.  Meanwhile,
	we can set audio input and output devices to their defaults.  for alsa, only one device is supported; it may
	    be open for both input and output.  open audio using whatever parameters were last used  set the size, in milliseconds, of the audio FIFO  ROCKBOX  Rockbox devices are known in advance. (?)  this shouldn't happen once all the above get filled in.  microsoft device list starts at 0 (the "mapper").  (see also MSW ifdef in sys_parsedevlist(), s_main.c)   To agree with command line flags, normally start at 1  start an audio settings dialog window  these are the devices you're using:  these are all the devices on your system:  post("naudioindev %d naudiooutdev %d longform %f",
	    naudioindev, naudiooutdev, flongform);  new values from dialog window  the new values the dialog came back with:  post("in %d %d %d", nindev,
	    	newaudioindev[nindev] , newaudioinchan[nindev]);  post("out %d %d %d", noutdev,
	    	newaudiooutdev[noutdev] , newaudioinchan[noutdev]);  Nothing to list, IMO.  bash device params back to default  start or stop the audio hardware  start  then again, if only one API (or none) we don't offer any choice.  debugging 