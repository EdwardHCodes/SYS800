
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 r_edge.c FIXME surfaces are generated in back to front order by the bsp, so if a surf pointer is greater than another one, it should be drawn in front surfaces[1] is the background, and is used as the active surface stack made staticvoid R_LeadingEdge (edge_t *edge);void R_LeadingEdgeBackwards (edge_t *edge);void R_TrailingEdge (surf_t *surf, edge_t *edge);=============================================================================
==============
R_DrawCulledPolys
==============

==============
R_BeginEdgeFrame
==============
 background is surface 1,  surface 0 is a dummy no background spans yet put the background behind everything in the world FIXME: set with memset
==============
R_InsertNewEdges

Adds the edges in the linked list edgestoadd, adding them to the edges in the
linked list edgelist.  edgestoadd is assumed to be sorted on u, and non-empty (this is actually newedges[v]).  edgelist is assumed to be sorted on u, with a
sentinel at the end (actually, this is the active edge table starting at
edge_head.next).
==============
 insert edgestoadd before edgelist !id386
==============
R_RemoveEdges
==============
 !id386
==============
R_StepActiveU
==============
 push it back to keep it sorted		 pull the edge out of the edge list find out where the edge goes in the edge list BUG??? - FW 7/29/19 put the edge back into the edge list !id386
==============
R_CleanupSpan
==============
 now that we've reached the right edge of the screen, we're done with any unfinished surfaces, so emit a span for whatever's on top reset spanstate for all surfaces in the surface stack
==============
R_LeadingEdgeBackwards
==============
 it's adding a new surface in, so find the correct place don't start a span if this is an inverted span, with the end edge preceding the start edge (that is, we've already seen the end edge) if it's two surfaces on the same plane, the one that's already active is in front, so keep going unless it's a bmodel must be two bmodels in the same leaf; don't care, because they'll never be farthest anyway if it's two surfaces on the same plane, the one that's already active is in front, so keep going unless it's a bmodel must be two bmodels in the same leaf; don't care which is really in front, because they'll never be farthest anyway emit a span (obscures current top) set last_u on the new span insert before surf2
==============
R_TrailingEdge
==============
 don't generate a span if this is an inverted span, with the end edge preceding the start edge (that is, we haven't seen the start edge yet) emit a span (current top going away) set last_u on the surface below
==============
R_LeadingEdge
==============
 it's adding a new surface in, so find the correct place don't start a span if this is an inverted span, with the end edge preceding the start edge (that is, we've already seen the end edge) if it's two surfaces on the same plane, the one that's already active is in front, so keep going unless it's a bmodel must be two bmodels in the same leaf; sort on 1/z if it's two surfaces on the same plane, the one that's already active is in front, so keep going unless it's a bmodel must be two bmodels in the same leaf; sort on 1/z emit a span (obscures current top) set last_u on the new span insert before surf2
==============
R_GenerateSpans
==============
 clear active surfaces to just the background surface generate spans it has a left surface, so a surface is going away for this span !id386
==============
R_GenerateSpansBackward
==============
 clear active surfaces to just the background surface generate spans
==============
R_ScanEdges

Input: 
newedges[] array
	this has links to edges, which have links to surfaces

Output:
Each surface has a linked list of its visible spans
==============
 clear active edges to just the background edges around the whole screen FIXME: most of this only needs to be set up once force a move FIXME: do we need this now that we clamp x in r_draw.c? make sure nothing sorts past this	 process all scan lines mark that the head (background start) span is pre-included flush the span list if we can't be sure we have enough spans left for the next scan don't let sound get messed up if going slow clear the surface span pointers do the last scan (no need to step or sort or remove on the last scan) mark that the head (background start) span is pre-included draw whatever's left in the span list
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 r_edge.c FIXME surfaces are generated in back to front order by the bsp, so if a surf pointer is greater than another one, it should be drawn in front surfaces[1] is the background, and is used as the active surface stack made staticvoid R_LeadingEdge (edge_t *edge);void R_LeadingEdgeBackwards (edge_t *edge);void R_TrailingEdge (surf_t *surf, edge_t *edge);=============================================================================
==============
R_DrawCulledPolys
==============

==============
R_BeginEdgeFrame
==============
 background is surface 1,  surface 0 is a dummy no background spans yet put the background behind everything in the world FIXME: set with memset
==============
R_InsertNewEdges

Adds the edges in the linked list edgestoadd, adding them to the edges in the
linked list edgelist.  edgestoadd is assumed to be sorted on u, and non-empty (this is actually newedges[v]).  edgelist is assumed to be sorted on u, with a
sentinel at the end (actually, this is the active edge table starting at
edge_head.next).
==============
 insert edgestoadd before edgelist !id386
==============
R_RemoveEdges
==============
 !id386
==============
R_StepActiveU
==============
 push it back to keep it sorted		 pull the edge out of the edge list find out where the edge goes in the edge list BUG??? - FW 7/29/19 put the edge back into the edge list !id386
==============
R_CleanupSpan
==============
 now that we've reached the right edge of the screen, we're done with any unfinished surfaces, so emit a span for whatever's on top reset spanstate for all surfaces in the surface stack
==============
R_LeadingEdgeBackwards
==============
 it's adding a new surface in, so find the correct place don't start a span if this is an inverted span, with the end edge preceding the start edge (that is, we've already seen the end edge) if it's two surfaces on the same plane, the one that's already active is in front, so keep going unless it's a bmodel must be two bmodels in the same leaf; don't care, because they'll never be farthest anyway if it's two surfaces on the same plane, the one that's already active is in front, so keep going unless it's a bmodel must be two bmodels in the same leaf; don't care which is really in front, because they'll never be farthest anyway emit a span (obscures current top) set last_u on the new span insert before surf2
==============
R_TrailingEdge
==============
 don't generate a span if this is an inverted span, with the end edge preceding the start edge (that is, we haven't seen the start edge yet) emit a span (current top going away) set last_u on the surface below
==============
R_LeadingEdge
==============
 it's adding a new surface in, so find the correct place don't start a span if this is an inverted span, with the end edge preceding the start edge (that is, we've already seen the end edge) if it's two surfaces on the same plane, the one that's already active is in front, so keep going unless it's a bmodel must be two bmodels in the same leaf; sort on 1/z if it's two surfaces on the same plane, the one that's already active is in front, so keep going unless it's a bmodel must be two bmodels in the same leaf; sort on 1/z emit a span (obscures current top) set last_u on the new span insert before surf2
==============
R_GenerateSpans
==============
 clear active surfaces to just the background surface generate spans it has a left surface, so a surface is going away for this span !id386
==============
R_GenerateSpansBackward
==============
 clear active surfaces to just the background surface generate spans
==============
R_ScanEdges

Input: 
newedges[] array
	this has links to edges, which have links to surfaces

Output:
Each surface has a linked list of its visible spans
==============
 clear active edges to just the background edges around the whole screen FIXME: most of this only needs to be set up once force a move FIXME: do we need this now that we clamp x in r_draw.c? make sure nothing sorts past this	 process all scan lines mark that the head (background start) span is pre-included flush the span list if we can't be sure we have enough spans left for the next scan don't let sound get messed up if going slow clear the surface span pointers do the last scan (no need to step or sort or remove on the last scan) mark that the head (background start) span is pre-included draw whatever's left in the span list
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 r_edge.c FIXME surfaces are generated in back to front order by the bsp, so if a surf pointer is greater than another one, it should be drawn in front surfaces[1] is the background, and is used as the active surface stack made staticvoid R_LeadingEdge (edge_t *edge);void R_LeadingEdgeBackwards (edge_t *edge);void R_TrailingEdge (surf_t *surf, edge_t *edge);=============================================================================
==============
R_DrawCulledPolys
==============

==============
R_BeginEdgeFrame
==============
 background is surface 1,  surface 0 is a dummy no background spans yet put the background behind everything in the world FIXME: set with memset
==============
R_InsertNewEdges

Adds the edges in the linked list edgestoadd, adding them to the edges in the
linked list edgelist.  edgestoadd is assumed to be sorted on u, and non-empty (this is actually newedges[v]).  edgelist is assumed to be sorted on u, with a
sentinel at the end (actually, this is the active edge table starting at
edge_head.next).
==============
 insert edgestoadd before edgelist !id386
==============
R_RemoveEdges
==============
 !id386
==============
R_StepActiveU
==============
 push it back to keep it sorted		 pull the edge out of the edge list find out where the edge goes in the edge list BUG??? - FW 7/29/19 put the edge back into the edge list !id386
==============
R_CleanupSpan
==============
 now that we've reached the right edge of the screen, we're done with any unfinished surfaces, so emit a span for whatever's on top reset spanstate for all surfaces in the surface stack
==============
R_LeadingEdgeBackwards
==============
 it's adding a new surface in, so find the correct place don't start a span if this is an inverted span, with the end edge preceding the start edge (that is, we've already seen the end edge) if it's two surfaces on the same plane, the one that's already active is in front, so keep going unless it's a bmodel must be two bmodels in the same leaf; don't care, because they'll never be farthest anyway if it's two surfaces on the same plane, the one that's already active is in front, so keep going unless it's a bmodel must be two bmodels in the same leaf; don't care which is really in front, because they'll never be farthest anyway emit a span (obscures current top) set last_u on the new span insert before surf2
==============
R_TrailingEdge
==============
 don't generate a span if this is an inverted span, with the end edge preceding the start edge (that is, we haven't seen the start edge yet) emit a span (current top going away) set last_u on the surface below
==============
R_LeadingEdge
==============
 it's adding a new surface in, so find the correct place don't start a span if this is an inverted span, with the end edge preceding the start edge (that is, we've already seen the end edge) if it's two surfaces on the same plane, the one that's already active is in front, so keep going unless it's a bmodel must be two bmodels in the same leaf; sort on 1/z if it's two surfaces on the same plane, the one that's already active is in front, so keep going unless it's a bmodel must be two bmodels in the same leaf; sort on 1/z emit a span (obscures current top) set last_u on the new span insert before surf2
==============
R_GenerateSpans
==============
 clear active surfaces to just the background surface generate spans it has a left surface, so a surface is going away for this span !id386
==============
R_GenerateSpansBackward
==============
 clear active surfaces to just the background surface generate spans
==============
R_ScanEdges

Input: 
newedges[] array
	this has links to edges, which have links to surfaces

Output:
Each surface has a linked list of its visible spans
==============
 clear active edges to just the background edges around the whole screen FIXME: most of this only needs to be set up once force a move FIXME: do we need this now that we clamp x in r_draw.c? make sure nothing sorts past this	 process all scan lines mark that the head (background start) span is pre-included flush the span list if we can't be sure we have enough spans left for the next scan don't let sound get messed up if going slow clear the surface span pointers do the last scan (no need to step or sort or remove on the last scan) mark that the head (background start) span is pre-included draw whatever's left in the span list