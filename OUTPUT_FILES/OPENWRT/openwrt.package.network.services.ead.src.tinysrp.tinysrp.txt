 This bit implements a simple API for using the SRP library over sockets.  somehow not defined on my box  This is called by the client with a connected socket, username, and
passphrase.  pass can be NULL in which case the user is queried.  @@@ should go away  Send the username.  Get the prime index and salt.  @@@ t_clientopen() needs a variant that takes the index  Calculate A and send it to the server.  len is max 256  Ask the user for the passphrase.  Get B from the server.  Compute the session key.  Send the response.  Get the server's response.  All done.  Now copy the key and clean up.  This is called by the server with a connected socket.  Get the username.  Send the prime index and the salt.  max 256 primes...  Calculate B while we're waiting.  Get A from the client.  Now send B.  Calculate the session key while we're waiting.  Get the response from the client.  Client authenticated.  Now authenticate ourselves to the client.  Copy the key and clean up.  This bit implements a simple API for using the SRP library over sockets.  somehow not defined on my box  This is called by the client with a connected socket, username, and
passphrase.  pass can be NULL in which case the user is queried.  @@@ should go away  Send the username.  Get the prime index and salt.  @@@ t_clientopen() needs a variant that takes the index  Calculate A and send it to the server.  len is max 256  Ask the user for the passphrase.  Get B from the server.  Compute the session key.  Send the response.  Get the server's response.  All done.  Now copy the key and clean up.  This is called by the server with a connected socket.  Get the username.  Send the prime index and the salt.  max 256 primes...  Calculate B while we're waiting.  Get A from the client.  Now send B.  Calculate the session key while we're waiting.  Get the response from the client.  Client authenticated.  Now authenticate ourselves to the client.  Copy the key and clean up.  This bit implements a simple API for using the SRP library over sockets.  somehow not defined on my box  This is called by the client with a connected socket, username, and
passphrase.  pass can be NULL in which case the user is queried.  @@@ should go away  Send the username.  Get the prime index and salt.  @@@ t_clientopen() needs a variant that takes the index  Calculate A and send it to the server.  len is max 256  Ask the user for the passphrase.  Get B from the server.  Compute the session key.  Send the response.  Get the server's response.  All done.  Now copy the key and clean up.  This is called by the server with a connected socket.  Get the username.  Send the prime index and the salt.  max 256 primes...  Calculate B while we're waiting.  Get A from the client.  Now send B.  Calculate the session key while we're waiting.  Get the response from the client.  Client authenticated.  Now authenticate ourselves to the client.  Copy the key and clean up.  This bit implements a simple API for using the SRP library over sockets.  somehow not defined on my box  This is called by the client with a connected socket, username, and
passphrase.  pass can be NULL in which case the user is queried.  @@@ should go away  Send the username.  Get the prime index and salt.  @@@ t_clientopen() needs a variant that takes the index  Calculate A and send it to the server.  len is max 256  Ask the user for the passphrase.  Get B from the server.  Compute the session key.  Send the response.  Get the server's response.  All done.  Now copy the key and clean up.  This is called by the server with a connected socket.  Get the username.  Send the prime index and the salt.  max 256 primes...  Calculate B while we're waiting.  Get A from the client.  Now send B.  Calculate the session key while we're waiting.  Get the response from the client.  Client authenticated.  Now authenticate ourselves to the client.  Copy the key and clean up.  This bit implements a simple API for using the SRP library over sockets.  somehow not defined on my box  This is called by the client with a connected socket, username, and
passphrase.  pass can be NULL in which case the user is queried.  @@@ should go away  Send the username.  Get the prime index and salt.  @@@ t_clientopen() needs a variant that takes the index  Calculate A and send it to the server.  len is max 256  Ask the user for the passphrase.  Get B from the server.  Compute the session key.  Send the response.  Get the server's response.  All done.  Now copy the key and clean up.  This is called by the server with a connected socket.  Get the username.  Send the prime index and the salt.  max 256 primes...  Calculate B while we're waiting.  Get A from the client.  Now send B.  Calculate the session key while we're waiting.  Get the response from the client.  Client authenticated.  Now authenticate ourselves to the client.  Copy the key and clean up.  This bit implements a simple API for using the SRP library over sockets.  somehow not defined on my box  This is called by the client with a connected socket, username, and
passphrase.  pass can be NULL in which case the user is queried.  @@@ should go away  Send the username.  Get the prime index and salt.  @@@ t_clientopen() needs a variant that takes the index  Calculate A and send it to the server.  len is max 256  Ask the user for the passphrase.  Get B from the server.  Compute the session key.  Send the response.  Get the server's response.  All done.  Now copy the key and clean up.  This is called by the server with a connected socket.  Get the username.  Send the prime index and the salt.  max 256 primes...  Calculate B while we're waiting.  Get A from the client.  Now send B.  Calculate the session key while we're waiting.  Get the response from the client.  Client authenticated.  Now authenticate ourselves to the client.  Copy the key and clean up.  This bit implements a simple API for using the SRP library over sockets.  somehow not defined on my box  This is called by the client with a connected socket, username, and
passphrase.  pass can be NULL in which case the user is queried.  @@@ should go away  Send the username.  Get the prime index and salt.  @@@ t_clientopen() needs a variant that takes the index  Calculate A and send it to the server.  len is max 256  Ask the user for the passphrase.  Get B from the server.  Compute the session key.  Send the response.  Get the server's response.  All done.  Now copy the key and clean up.  This is called by the server with a connected socket.  Get the username.  Send the prime index and the salt.  max 256 primes...  Calculate B while we're waiting.  Get A from the client.  Now send B.  Calculate the session key while we're waiting.  Get the response from the client.  Client authenticated.  Now authenticate ourselves to the client.  Copy the key and clean up.  This bit implements a simple API for using the SRP library over sockets.  somehow not defined on my box  This is called by the client with a connected socket, username, and
passphrase.  pass can be NULL in which case the user is queried.  @@@ should go away  Send the username.  Get the prime index and salt.  @@@ t_clientopen() needs a variant that takes the index  Calculate A and send it to the server.  len is max 256  Ask the user for the passphrase.  Get B from the server.  Compute the session key.  Send the response.  Get the server's response.  All done.  Now copy the key and clean up.  This is called by the server with a connected socket.  Get the username.  Send the prime index and the salt.  max 256 primes...  Calculate B while we're waiting.  Get A from the client.  Now send B.  Calculate the session key while we're waiting.  Get the response from the client.  Client authenticated.  Now authenticate ourselves to the client.  Copy the key and clean up. 