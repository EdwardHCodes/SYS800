**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Miika Pekkarinen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************
 * Convert the struct endianess with the instructions provided.
 *
 * For example:
 * struct test {
 *     long par1;
 *     short par2;
 *     short par3;
 * };
 *
 * structec_convert(instance_of_test, "lss", sizeof(struct test), true);
 *
 * Structures to be converted must be properly padded.
 *
 * @param structure Pointer to the struct being converted.
 * @param ecinst Instructions how to do the endianess conversion.
 * @param count Number of structures to write
 * @param enable Conversion is not made unless this is true.
  Swap nothing.  Swap 2 bytes.  Swap 4 bytes.  Skip N bytes, idea taken from metadata.c *
 * Determines the size of a struct in bytes by using endianess correction
 * string format.
 *
 * @param ecinst endianess correction string.
 * @return length of the struct in bytes.
 *
 * Reads endianess corrected structure members from the given file.
 *
 * @param fd file descriptor of the file being read.
 * @param buf endianess corrected data is placed here.
 * @param scount the number of struct members to read.
 * @param ecinst endianess correction string.
 * @param ec if true, endianess correction is enabled.
 *
 * Writes endianess corrected structure members to the given file.
 *
 * @param fd file descriptor of the file being written to.
 * @param buf endianess corrected data is read here.
 * @param scount the number of struct members to write.
 * @param ecinst endianess correction string.
 * @param ec if true, endianess correction is enabled.
 **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Miika Pekkarinen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************
 * Convert the struct endianess with the instructions provided.
 *
 * For example:
 * struct test {
 *     long par1;
 *     short par2;
 *     short par3;
 * };
 *
 * structec_convert(instance_of_test, "lss", sizeof(struct test), true);
 *
 * Structures to be converted must be properly padded.
 *
 * @param structure Pointer to the struct being converted.
 * @param ecinst Instructions how to do the endianess conversion.
 * @param count Number of structures to write
 * @param enable Conversion is not made unless this is true.
  Swap nothing.  Swap 2 bytes.  Swap 4 bytes.  Skip N bytes, idea taken from metadata.c *
 * Determines the size of a struct in bytes by using endianess correction
 * string format.
 *
 * @param ecinst endianess correction string.
 * @return length of the struct in bytes.
 *
 * Reads endianess corrected structure members from the given file.
 *
 * @param fd file descriptor of the file being read.
 * @param buf endianess corrected data is placed here.
 * @param scount the number of struct members to read.
 * @param ecinst endianess correction string.
 * @param ec if true, endianess correction is enabled.
 *
 * Writes endianess corrected structure members to the given file.
 *
 * @param fd file descriptor of the file being written to.
 * @param buf endianess corrected data is read here.
 * @param scount the number of struct members to write.
 * @param ecinst endianess correction string.
 * @param ec if true, endianess correction is enabled.
 **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Miika Pekkarinen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************
 * Convert the struct endianess with the instructions provided.
 *
 * For example:
 * struct test {
 *     long par1;
 *     short par2;
 *     short par3;
 * };
 *
 * structec_convert(instance_of_test, "lss", sizeof(struct test), true);
 *
 * Structures to be converted must be properly padded.
 *
 * @param structure Pointer to the struct being converted.
 * @param ecinst Instructions how to do the endianess conversion.
 * @param count Number of structures to write
 * @param enable Conversion is not made unless this is true.
  Swap nothing.  Swap 2 bytes.  Swap 4 bytes.  Skip N bytes, idea taken from metadata.c *
 * Determines the size of a struct in bytes by using endianess correction
 * string format.
 *
 * @param ecinst endianess correction string.
 * @return length of the struct in bytes.
 *
 * Reads endianess corrected structure members from the given file.
 *
 * @param fd file descriptor of the file being read.
 * @param buf endianess corrected data is placed here.
 * @param scount the number of struct members to read.
 * @param ecinst endianess correction string.
 * @param ec if true, endianess correction is enabled.
 *
 * Writes endianess corrected structure members to the given file.
 *
 * @param fd file descriptor of the file being written to.
 * @param buf endianess corrected data is read here.
 * @param scount the number of struct members to write.
 * @param ecinst endianess correction string.
 * @param ec if true, endianess correction is enabled.
 