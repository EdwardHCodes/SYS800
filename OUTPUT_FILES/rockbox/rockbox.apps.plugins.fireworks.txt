**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 Zakk Roberts
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** this set the context to use with PLA **
 * FIREWORKS.C by ZAKK ROBERTS
 * Rockbox plugin simulating a fireworks display.
 * Supports all bitmap LCDs, fully scalable.
 * Currently disabled for Archos Recorder - runs too slow.
 ** We use PLA  The lowdown on source terminology:
 * a ROCKET is launched from the LCD bottom.
 * FIREWORKs are ejected from the rocket when it explodes.  position, speed, "phase" (age), color of all fireworks  position, speed, "phase" (age) of all rockets  settings values. these should eventually be saved to
 * disk. maybe a preset loading/saving system?  firework colors:
 * firework_colors = brightest firework color, used most of the time.
 * DARK colors = fireworks are nearly burnt out.
 * DARKER colors = fireworks are several frames away from burning out.
 * DARKEST colors = fireworks are a couple frames from burning out.  called on startup. initializes all variables, etc  called when a rocket hits its destination height.
 * prepares all associated fireworks to be expelled.  called when a rocket is launched.
 * prepares said rocket to start moving towards its destination.  startup/configuration menu.  this is the plugin entry point  set everything up.. no BL timeout, no backdrop,
       white-text-on-black-background.  loop through every possible rocket  if the current rocket is actually moving/"alive" then go on and
             * move/update/explode it  draw trail, if requested  move rocket  if(rocket isn't "there" yet) keep moving
                 * if(rocket IS there) explode it.  and now onto the fireworks for this particular rocket...  WIP - currently ugly explosion effect
#ifdef HAVE_LCD_COLOR
                    if(firework_phase[j] < 10)
                    {
                        rb->lcd_set_foreground(EXPLOSION_COLOR);
                        rb->lcd_fillrect(rocket_xpos[j]-firework_phase[j],
                                         rocket_ypos[j]-firework_phase[j],
                                         firework_phase[j]*2, firework_phase[j]*2);
                    }
#endif  firework at its destination age?
                 * no = keep aging; yes = delete it.  is autofire on?  exit directly  back to config menu  fire off rockets manually  Turn on backlight timeout (revert to settings) **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 Zakk Roberts
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** this set the context to use with PLA **
 * FIREWORKS.C by ZAKK ROBERTS
 * Rockbox plugin simulating a fireworks display.
 * Supports all bitmap LCDs, fully scalable.
 * Currently disabled for Archos Recorder - runs too slow.
 ** We use PLA  The lowdown on source terminology:
 * a ROCKET is launched from the LCD bottom.
 * FIREWORKs are ejected from the rocket when it explodes.  position, speed, "phase" (age), color of all fireworks  position, speed, "phase" (age) of all rockets  settings values. these should eventually be saved to
 * disk. maybe a preset loading/saving system?  firework colors:
 * firework_colors = brightest firework color, used most of the time.
 * DARK colors = fireworks are nearly burnt out.
 * DARKER colors = fireworks are several frames away from burning out.
 * DARKEST colors = fireworks are a couple frames from burning out.  called on startup. initializes all variables, etc  called when a rocket hits its destination height.
 * prepares all associated fireworks to be expelled.  called when a rocket is launched.
 * prepares said rocket to start moving towards its destination.  startup/configuration menu.  this is the plugin entry point  set everything up.. no BL timeout, no backdrop,
       white-text-on-black-background.  loop through every possible rocket  if the current rocket is actually moving/"alive" then go on and
             * move/update/explode it  draw trail, if requested  move rocket  if(rocket isn't "there" yet) keep moving
                 * if(rocket IS there) explode it.  and now onto the fireworks for this particular rocket...  WIP - currently ugly explosion effect
#ifdef HAVE_LCD_COLOR
                    if(firework_phase[j] < 10)
                    {
                        rb->lcd_set_foreground(EXPLOSION_COLOR);
                        rb->lcd_fillrect(rocket_xpos[j]-firework_phase[j],
                                         rocket_ypos[j]-firework_phase[j],
                                         firework_phase[j]*2, firework_phase[j]*2);
                    }
#endif  firework at its destination age?
                 * no = keep aging; yes = delete it.  is autofire on?  exit directly  back to config menu  fire off rockets manually  Turn on backlight timeout (revert to settings) **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 Zakk Roberts
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** this set the context to use with PLA **
 * FIREWORKS.C by ZAKK ROBERTS
 * Rockbox plugin simulating a fireworks display.
 * Supports all bitmap LCDs, fully scalable.
 * Currently disabled for Archos Recorder - runs too slow.
 ** We use PLA  The lowdown on source terminology:
 * a ROCKET is launched from the LCD bottom.
 * FIREWORKs are ejected from the rocket when it explodes.  position, speed, "phase" (age), color of all fireworks  position, speed, "phase" (age) of all rockets  settings values. these should eventually be saved to
 * disk. maybe a preset loading/saving system?  firework colors:
 * firework_colors = brightest firework color, used most of the time.
 * DARK colors = fireworks are nearly burnt out.
 * DARKER colors = fireworks are several frames away from burning out.
 * DARKEST colors = fireworks are a couple frames from burning out.  called on startup. initializes all variables, etc  called when a rocket hits its destination height.
 * prepares all associated fireworks to be expelled.  called when a rocket is launched.
 * prepares said rocket to start moving towards its destination.  startup/configuration menu.  this is the plugin entry point  set everything up.. no BL timeout, no backdrop,
       white-text-on-black-background.  loop through every possible rocket  if the current rocket is actually moving/"alive" then go on and
             * move/update/explode it  draw trail, if requested  move rocket  if(rocket isn't "there" yet) keep moving
                 * if(rocket IS there) explode it.  and now onto the fireworks for this particular rocket...  WIP - currently ugly explosion effect
#ifdef HAVE_LCD_COLOR
                    if(firework_phase[j] < 10)
                    {
                        rb->lcd_set_foreground(EXPLOSION_COLOR);
                        rb->lcd_fillrect(rocket_xpos[j]-firework_phase[j],
                                         rocket_ypos[j]-firework_phase[j],
                                         firework_phase[j]*2, firework_phase[j]*2);
                    }
#endif  firework at its destination age?
                 * no = keep aging; yes = delete it.  is autofire on?  exit directly  back to config menu  fire off rockets manually  Turn on backlight timeout (revert to settings) 