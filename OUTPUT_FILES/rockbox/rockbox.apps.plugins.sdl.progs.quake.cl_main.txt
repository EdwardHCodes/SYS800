
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 cl_main.c  -- client main loop we need to declare some mouse variables here, because the menu system references them even when on a unix system. these two are not intended to be set directly can be 0, 1, or 2 FIXME: put these on hunk?
=====================
CL_ClearState

=====================
 wipe the entire cl structure clear other arrays	 allocate the efrags and chain together into a free list
=====================
CL_Disconnect

Sends a disconnect message to the server
This is also called on Host_Error, so it shouldn't cause any errors
=====================
 stop sounds (especially looping!) bring the console down and fade the colors back to normal	SCR_BringDownConsole (); if running a local server, shut it down
=====================
CL_EstablishConnection

Host should be either "local" or a net address to be passed on
=====================
 not in the demo loop now need all the signon messages before playing
=====================
CL_SignonReply

An svc_signonnum has been received, perform a client side setup
=====================
 print remaining memory allow normal screen updates
=====================
CL_NextDemo

Called to play the next demo in the demo loop
=====================
 don't play demos
==============
CL_PrintEntities_f
==============

===============
SetPal

Debugging tool, just flashes the screen
===============

===============
CL_AllocDlight

===============
 first look for an exact key match then look for anything else
===============
CL_DecayLights

===============

===============
CL_LerpPoint

Determines the fraction between the last two messages that the objects
should be put at.
===============
 dropped packet, or start of demoCon_Printf ("frac: %f\n",frac);				Con_Printf ("low frac\n");				Con_Printf ("high frac\n");
===============
CL_RelinkEntities
===============
 determine partial update time	 interpolate player info interpolate the angles	 start on the entity after the world empty slot just became empty if the object wasn't included in the last packet, remove it the entity was not updated in the last message so move to the final spot if the delta is large, assume a teleport and don't lerp assume a teleportation, not a motion interpolate the origin and angles rotate binary objects locally
===============
CL_ReadFromServer

Read all incoming data from the server
===============
 bring the links up to date
=================
CL_SendCmd
=================
 get basic movement from keyboard allow mice or other external controllers to add to the move send the unreliable message send the reliable message no message at all
=================
CL_Init
=================
 register our commands	Cvar_RegisterVariable (&cl_autofire);
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 cl_main.c  -- client main loop we need to declare some mouse variables here, because the menu system references them even when on a unix system. these two are not intended to be set directly can be 0, 1, or 2 FIXME: put these on hunk?
=====================
CL_ClearState

=====================
 wipe the entire cl structure clear other arrays	 allocate the efrags and chain together into a free list
=====================
CL_Disconnect

Sends a disconnect message to the server
This is also called on Host_Error, so it shouldn't cause any errors
=====================
 stop sounds (especially looping!) bring the console down and fade the colors back to normal	SCR_BringDownConsole (); if running a local server, shut it down
=====================
CL_EstablishConnection

Host should be either "local" or a net address to be passed on
=====================
 not in the demo loop now need all the signon messages before playing
=====================
CL_SignonReply

An svc_signonnum has been received, perform a client side setup
=====================
 print remaining memory allow normal screen updates
=====================
CL_NextDemo

Called to play the next demo in the demo loop
=====================
 don't play demos
==============
CL_PrintEntities_f
==============

===============
SetPal

Debugging tool, just flashes the screen
===============

===============
CL_AllocDlight

===============
 first look for an exact key match then look for anything else
===============
CL_DecayLights

===============

===============
CL_LerpPoint

Determines the fraction between the last two messages that the objects
should be put at.
===============
 dropped packet, or start of demoCon_Printf ("frac: %f\n",frac);				Con_Printf ("low frac\n");				Con_Printf ("high frac\n");
===============
CL_RelinkEntities
===============
 determine partial update time	 interpolate player info interpolate the angles	 start on the entity after the world empty slot just became empty if the object wasn't included in the last packet, remove it the entity was not updated in the last message so move to the final spot if the delta is large, assume a teleport and don't lerp assume a teleportation, not a motion interpolate the origin and angles rotate binary objects locally
===============
CL_ReadFromServer

Read all incoming data from the server
===============
 bring the links up to date
=================
CL_SendCmd
=================
 get basic movement from keyboard allow mice or other external controllers to add to the move send the unreliable message send the reliable message no message at all
=================
CL_Init
=================
 register our commands	Cvar_RegisterVariable (&cl_autofire);
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 cl_main.c  -- client main loop we need to declare some mouse variables here, because the menu system references them even when on a unix system. these two are not intended to be set directly can be 0, 1, or 2 FIXME: put these on hunk?
=====================
CL_ClearState

=====================
 wipe the entire cl structure clear other arrays	 allocate the efrags and chain together into a free list
=====================
CL_Disconnect

Sends a disconnect message to the server
This is also called on Host_Error, so it shouldn't cause any errors
=====================
 stop sounds (especially looping!) bring the console down and fade the colors back to normal	SCR_BringDownConsole (); if running a local server, shut it down
=====================
CL_EstablishConnection

Host should be either "local" or a net address to be passed on
=====================
 not in the demo loop now need all the signon messages before playing
=====================
CL_SignonReply

An svc_signonnum has been received, perform a client side setup
=====================
 print remaining memory allow normal screen updates
=====================
CL_NextDemo

Called to play the next demo in the demo loop
=====================
 don't play demos
==============
CL_PrintEntities_f
==============

===============
SetPal

Debugging tool, just flashes the screen
===============

===============
CL_AllocDlight

===============
 first look for an exact key match then look for anything else
===============
CL_DecayLights

===============

===============
CL_LerpPoint

Determines the fraction between the last two messages that the objects
should be put at.
===============
 dropped packet, or start of demoCon_Printf ("frac: %f\n",frac);				Con_Printf ("low frac\n");				Con_Printf ("high frac\n");
===============
CL_RelinkEntities
===============
 determine partial update time	 interpolate player info interpolate the angles	 start on the entity after the world empty slot just became empty if the object wasn't included in the last packet, remove it the entity was not updated in the last message so move to the final spot if the delta is large, assume a teleport and don't lerp assume a teleportation, not a motion interpolate the origin and angles rotate binary objects locally
===============
CL_ReadFromServer

Read all incoming data from the server
===============
 bring the links up to date
=================
CL_SendCmd
=================
 get basic movement from keyboard allow mice or other external controllers to add to the move send the unreliable message send the reliable message no message at all
=================
CL_Init
=================
 register our commands	Cvar_RegisterVariable (&cl_autofire);