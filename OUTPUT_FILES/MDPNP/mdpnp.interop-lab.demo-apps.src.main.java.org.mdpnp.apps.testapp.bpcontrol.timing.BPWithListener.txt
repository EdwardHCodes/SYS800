@FXML CheckBox selected; 
	class NumericValueChangeListener implements ChangeListener<Number> {

		@Override
		public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {
			// TODO Auto-generated method stub
			System.err.println("pumpSpeedListener newValue is "+newValue.floatValue());
			currentSpeedLabel.setText(Float.toString(newValue.floatValue()));
		}
		
	}
	NumericValueChangeListener pumpSpeedListener=new NumericValueChangeListener();		list.forEach( n -> {			log.info("handleDeviceChange numeric dev ident is "+n.getUnique_device_identifier()+" "+n.getMetric_id());			if( ! n.getUnique_device_identifier().equals(monitor.getUDI())) return;	//Some other device			//When we get here, we are looking at a property for the currently selected device			if(n.getMetric_id().equals(FLOW_RATE)) {				currentSpeedLabel.setText(Integer.toString((int)n.getValue()));				n.valueProperty().addListener(pumpSpeedListener);				System.err.println("Added pump speed listener to "+monitor.getComPort());			}		});ice.FlowRateObjective objective=new ice.FlowRateObjective();		try {			if(controlStatement==null && dbconn!=null) {				controlStatement=dbconn.prepareStatement("INSERT INTO flowrequest(t_millis, target_udi, requestedRate) VALUES (?,?,?)");			}			if(controlStatement!=null) {				controlStatement.setLong(1, System.currentTimeMillis()/1000);				controlStatement.setString(2, objective.unique_device_identifier);				controlStatement.setFloat(3, objective.newFlowRate);				controlStatement.execute();			}		} catch (SQLException sqle) {			log.error("Could not record request in database", sqle);		}*
	 * It barely seems worth a class, but it is one...
	 * @author Simon
	 *
	 *
		 * How long to sleep before asking for the given rate
		 *
		 * The change to ask for.
		 Now we have a full ArrayList of times and rates.We need to make this a separate runnable, becauseotherwise the sleeps cause the GUI to hang.Now we've slept that long, set the rate...@FXML CheckBox selected; 
	class NumericValueChangeListener implements ChangeListener<Number> {

		@Override
		public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {
			// TODO Auto-generated method stub
			System.err.println("pumpSpeedListener newValue is "+newValue.floatValue());
			currentSpeedLabel.setText(Float.toString(newValue.floatValue()));
		}
		
	}
	NumericValueChangeListener pumpSpeedListener=new NumericValueChangeListener();		list.forEach( n -> {			log.info("handleDeviceChange numeric dev ident is "+n.getUnique_device_identifier()+" "+n.getMetric_id());			if( ! n.getUnique_device_identifier().equals(monitor.getUDI())) return;	//Some other device			//When we get here, we are looking at a property for the currently selected device			if(n.getMetric_id().equals(FLOW_RATE)) {				currentSpeedLabel.setText(Integer.toString((int)n.getValue()));				n.valueProperty().addListener(pumpSpeedListener);				System.err.println("Added pump speed listener to "+monitor.getComPort());			}		});ice.FlowRateObjective objective=new ice.FlowRateObjective();		try {			if(controlStatement==null && dbconn!=null) {				controlStatement=dbconn.prepareStatement("INSERT INTO flowrequest(t_millis, target_udi, requestedRate) VALUES (?,?,?)");			}			if(controlStatement!=null) {				controlStatement.setLong(1, System.currentTimeMillis()/1000);				controlStatement.setString(2, objective.unique_device_identifier);				controlStatement.setFloat(3, objective.newFlowRate);				controlStatement.execute();			}		} catch (SQLException sqle) {			log.error("Could not record request in database", sqle);		}*
	 * It barely seems worth a class, but it is one...
	 * @author Simon
	 *
	 *
		 * How long to sleep before asking for the given rate
		 *
		 * The change to ask for.
		 Now we have a full ArrayList of times and rates.We need to make this a separate runnable, becauseotherwise the sleeps cause the GUI to hang.Now we've slept that long, set the rate...@FXML CheckBox selected; 
	class NumericValueChangeListener implements ChangeListener<Number> {

		@Override
		public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {
			// TODO Auto-generated method stub
			System.err.println("pumpSpeedListener newValue is "+newValue.floatValue());
			currentSpeedLabel.setText(Float.toString(newValue.floatValue()));
		}
		
	}
	NumericValueChangeListener pumpSpeedListener=new NumericValueChangeListener();		list.forEach( n -> {			log.info("handleDeviceChange numeric dev ident is "+n.getUnique_device_identifier()+" "+n.getMetric_id());			if( ! n.getUnique_device_identifier().equals(monitor.getUDI())) return;	//Some other device			//When we get here, we are looking at a property for the currently selected device			if(n.getMetric_id().equals(FLOW_RATE)) {				currentSpeedLabel.setText(Integer.toString((int)n.getValue()));				n.valueProperty().addListener(pumpSpeedListener);				System.err.println("Added pump speed listener to "+monitor.getComPort());			}		});ice.FlowRateObjective objective=new ice.FlowRateObjective();		try {			if(controlStatement==null && dbconn!=null) {				controlStatement=dbconn.prepareStatement("INSERT INTO flowrequest(t_millis, target_udi, requestedRate) VALUES (?,?,?)");			}			if(controlStatement!=null) {				controlStatement.setLong(1, System.currentTimeMillis()/1000);				controlStatement.setString(2, objective.unique_device_identifier);				controlStatement.setFloat(3, objective.newFlowRate);				controlStatement.execute();			}		} catch (SQLException sqle) {			log.error("Could not record request in database", sqle);		}*
	 * It barely seems worth a class, but it is one...
	 * @author Simon
	 *
	 *
		 * How long to sleep before asking for the given rate
		 *
		 * The change to ask for.
		 Now we have a full ArrayList of times and rates.We need to make this a separate runnable, becauseotherwise the sleeps cause the GUI to hang.Now we've slept that long, set the rate...@FXML CheckBox selected; 
	class NumericValueChangeListener implements ChangeListener<Number> {

		@Override
		public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {
			// TODO Auto-generated method stub
			System.err.println("pumpSpeedListener newValue is "+newValue.floatValue());
			currentSpeedLabel.setText(Float.toString(newValue.floatValue()));
		}
		
	}
	NumericValueChangeListener pumpSpeedListener=new NumericValueChangeListener();		list.forEach( n -> {			log.info("handleDeviceChange numeric dev ident is "+n.getUnique_device_identifier()+" "+n.getMetric_id());			if( ! n.getUnique_device_identifier().equals(monitor.getUDI())) return;	//Some other device			//When we get here, we are looking at a property for the currently selected device			if(n.getMetric_id().equals(FLOW_RATE)) {				currentSpeedLabel.setText(Integer.toString((int)n.getValue()));				n.valueProperty().addListener(pumpSpeedListener);				System.err.println("Added pump speed listener to "+monitor.getComPort());			}		});ice.FlowRateObjective objective=new ice.FlowRateObjective();		try {			if(controlStatement==null && dbconn!=null) {				controlStatement=dbconn.prepareStatement("INSERT INTO flowrequest(t_millis, target_udi, requestedRate) VALUES (?,?,?)");			}			if(controlStatement!=null) {				controlStatement.setLong(1, System.currentTimeMillis()/1000);				controlStatement.setString(2, objective.unique_device_identifier);				controlStatement.setFloat(3, objective.newFlowRate);				controlStatement.execute();			}		} catch (SQLException sqle) {			log.error("Could not record request in database", sqle);		}*
	 * It barely seems worth a class, but it is one...
	 * @author Simon
	 *
	 *
		 * How long to sleep before asking for the given rate
		 *
		 * The change to ask for.
		 Now we have a full ArrayList of times and rates.We need to make this a separate runnable, becauseotherwise the sleeps cause the GUI to hang.Now we've slept that long, set the rate...