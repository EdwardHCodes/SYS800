
 * The MIT License (MIT)
 *
 * Copyright (c) 2013, Christian Schudt
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * An axis that displays date and time values.
 * <p/>
 * Tick labels are usually automatically set and calculated depending on the range unless you explicitly {@linkplain #setTickLabelFormatter(javafx.util.StringConverter) set an formatter}.
 * <p/>
 * You also have the chance to specify fix lower and upper bounds, otherwise they are calculated by your data.
 * <p/>
 * <p/>
 * <h3>Screenshots</h3>
 * <p>
 * Displaying date values, ranging over several months:</p>
 * <img src="doc-files/DateAxisMonths.png" alt="DateAxisMonths" />
 * <p>
 * Displaying date values, ranging only over a few hours:</p>
 * <img src="doc-files/DateAxisHours.png" alt="DateAxisHours" />
 * <p/>
 * <p/>
 * <h3>Sample Usage</h3>
 * <pre>
 * {@code
 * ObservableList<XYChart.Series<Date, Number>> series = FXCollections.observableArrayList();
 *
 * ObservableList<XYChart.Data<Date, Number>> series1Data = FXCollections.observableArrayList();
 * series1Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2012, 11, 15).getTime(), 2));
 * series1Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2014, 5, 3).getTime(), 4));
 *
 * ObservableList<XYChart.Data<Date, Number>> series2Data = FXCollections.observableArrayList();
 * series2Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2014, 0, 13).getTime(), 8));
 * series2Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2014, 7, 27).getTime(), 4));
 *
 * series.add(new XYChart.Series<>("Series1", series1Data));
 * series.add(new XYChart.Series<>("Series2", series2Data));
 *
 * NumberAxis numberAxis = new NumberAxis();
 * DateAxis dateAxis = new DateAxis();
 * LineChart<Date, Number> lineChart = new LineChart<>(dateAxis, numberAxis, series);
 * }
 * </pre>
 *
 * @author Christian Schudt
 * @author Diego Cirujano
 *
     * These property are used for animation.
     *
     * Stores the min and max date of the list of dates which is used.
     * If {@link #autoRanging} is true, these values are used as lower and upper bounds.
     *
     * Default constructor. By default the lower and upper bound are calculated by the data.
     *
     * Constructs a date axis with fix lower and upper bounds.
     *
     * @param lowerBound The lower bound.
     * @param upperBound The upper bound.
     *
     * Constructs a date axis with a label and fix lower and upper bounds.
     *
     * @param axisLabel  The label for the axis.
     * @param lowerBound The lower bound.
     * @param upperBound The upper bound.
                 final Timeline timeline = new Timeline();            timeline.setAutoReverse(false);            timeline.setCycleCount(1);            final AnimationTimer timer = new AnimationTimer() {                @Override                public void handle(long l) {                    requestAxisLayout();                }            };            timer.start();            timeline.setOnFinished(new EventHandler<ActionEvent>() {                @Override                public void handle(ActionEvent actionEvent) {                    timer.stop();                    requestAxisLayout();                }            });            KeyValue keyValue = new KeyValue(currentLowerBound, lower.getTime());            KeyValue keyValue2 = new KeyValue(currentUpperBound, upper.getTime());            timeline.getKeyFrames().addAll(new KeyFrame(Duration.ZERO,                    new KeyValue(currentLowerBound, oldLowerBound.getTime()),                    new KeyValue(currentUpperBound, oldUpperBound.getTime())),                    new KeyFrame(Duration.millis(3000), keyValue, keyValue2));            timeline.play(); Get the difference between the max and min date. Get the actual range of the visible area. The minimal date should start at the zero position, that's why we subtract it. Then get the difference from the actual date to the min date and divide it by the total difference. We get a value between 0 and 1, if the date is within the min and max date. Multiply this percent value with the range and add the zero offset. Get the difference between the max and min date. Get the actual range of the visible area. The minimal date should start at the zero position, that's why we subtract it. displayPosition = getHeight() - ((date - lowerBound) / diff) * range + getZero date = displayPosition - getZero - getHeight())/range * diff + lowerBound displayPosition = ((date - lowerBound) / diff) * range + getZero date = displayPosition - getZero)/range * diff + lowerBound The preferred gap which should be between two tick marks. Starting with the greatest interval, add one of each calendar unit. Reset the calendar. Clear the list. Loop as long we exceeded the upper bound. Then check the size of the list. If it is greater than the amount of ticks, take that list. Recheck if the previous interval is better suited. At last add the upper bound. If there are at least three dates, check if the gap between the lower date and the second date is at least half the gap of the second and third date. Do the same for the upper bound. If gaps between dates are to small, remove one of them. This can occur, e.g. if the lower bound is 25.12.2013 and years are shown. Then the next year shown would be 2014 (01.01.2014) which would be too narrow to 25.12.2013. If the second date is too near by the lower bound, remove it. If difference from the upper bound to the last date is less than the half of the difference of the previous two dates, we better remove the last date, as it comes to close to the upper bound.*
     * Makes dates even, in the sense of that years always begin in January, months always begin on the 1st and days always at midnight.
     *
     * @param dates The list of dates.
     * @return The new list of dates.
      If the dates contain more dates than just the lower and upper bounds, make the dates in between even. For each interval, modify the date slightly by a few millis, to make sure they are different days. This is because Axis stores each value and won't update the tick labels, if the value is already known. This happens if you display days and then add a date many years in the future the tick label will still be displayed as day. If its not the first or last date (lower and upper bound), make the year begin with first month and let the months begin with first day. If its not the first or last date (lower and upper bound), make the months begin with first day. Make weeks begin with first day of week?*
     * Gets the lower bound of the axis.
     *
     * @return The property.
     * @see #getLowerBound()
     * @see #setLowerBound(java.util.Date)
     *
     * Gets the lower bound of the axis.
     *
     * @return The lower bound.
     * @see #lowerBoundProperty()
     *
     * Sets the lower bound of the axis.
     *
     * @param date The lower bound date.
     * @see #lowerBoundProperty()
     *
     * Gets the upper bound of the axis.
     *
     * @return The property.
     * @see #getUpperBound() ()
     * @see #setUpperBound(java.util.Date)
     *
     * Gets the upper bound of the axis.
     *
     * @return The upper bound.
     * @see #upperBoundProperty()
     *
     * Sets the upper bound of the axis.
     *
     * @param date The upper bound date.
     * @see #upperBoundProperty() ()
     *
     * Gets the tick label formatter for the ticks.
     *
     * @return The converter.
     *
     * Sets the tick label formatter for the ticks.
     *
     * @param value The converter.
     *
     * Gets the tick label formatter for the ticks.
     *
     * @return The property.
     *
     * The intervals, which are used for the tick labels. Beginning with the largest interval, the axis tries to calculate the tick values for this interval.
     * If a smaller interval is better suited for, that one is taken.
     
 * The MIT License (MIT)
 *
 * Copyright (c) 2013, Christian Schudt
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * An axis that displays date and time values.
 * <p/>
 * Tick labels are usually automatically set and calculated depending on the range unless you explicitly {@linkplain #setTickLabelFormatter(javafx.util.StringConverter) set an formatter}.
 * <p/>
 * You also have the chance to specify fix lower and upper bounds, otherwise they are calculated by your data.
 * <p/>
 * <p/>
 * <h3>Screenshots</h3>
 * <p>
 * Displaying date values, ranging over several months:</p>
 * <img src="doc-files/DateAxisMonths.png" alt="DateAxisMonths" />
 * <p>
 * Displaying date values, ranging only over a few hours:</p>
 * <img src="doc-files/DateAxisHours.png" alt="DateAxisHours" />
 * <p/>
 * <p/>
 * <h3>Sample Usage</h3>
 * <pre>
 * {@code
 * ObservableList<XYChart.Series<Date, Number>> series = FXCollections.observableArrayList();
 *
 * ObservableList<XYChart.Data<Date, Number>> series1Data = FXCollections.observableArrayList();
 * series1Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2012, 11, 15).getTime(), 2));
 * series1Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2014, 5, 3).getTime(), 4));
 *
 * ObservableList<XYChart.Data<Date, Number>> series2Data = FXCollections.observableArrayList();
 * series2Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2014, 0, 13).getTime(), 8));
 * series2Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2014, 7, 27).getTime(), 4));
 *
 * series.add(new XYChart.Series<>("Series1", series1Data));
 * series.add(new XYChart.Series<>("Series2", series2Data));
 *
 * NumberAxis numberAxis = new NumberAxis();
 * DateAxis dateAxis = new DateAxis();
 * LineChart<Date, Number> lineChart = new LineChart<>(dateAxis, numberAxis, series);
 * }
 * </pre>
 *
 * @author Christian Schudt
 * @author Diego Cirujano
 *
     * These property are used for animation.
     *
     * Stores the min and max date of the list of dates which is used.
     * If {@link #autoRanging} is true, these values are used as lower and upper bounds.
     *
     * Default constructor. By default the lower and upper bound are calculated by the data.
     *
     * Constructs a date axis with fix lower and upper bounds.
     *
     * @param lowerBound The lower bound.
     * @param upperBound The upper bound.
     *
     * Constructs a date axis with a label and fix lower and upper bounds.
     *
     * @param axisLabel  The label for the axis.
     * @param lowerBound The lower bound.
     * @param upperBound The upper bound.
                 final Timeline timeline = new Timeline();            timeline.setAutoReverse(false);            timeline.setCycleCount(1);            final AnimationTimer timer = new AnimationTimer() {                @Override                public void handle(long l) {                    requestAxisLayout();                }            };            timer.start();            timeline.setOnFinished(new EventHandler<ActionEvent>() {                @Override                public void handle(ActionEvent actionEvent) {                    timer.stop();                    requestAxisLayout();                }            });            KeyValue keyValue = new KeyValue(currentLowerBound, lower.getTime());            KeyValue keyValue2 = new KeyValue(currentUpperBound, upper.getTime());            timeline.getKeyFrames().addAll(new KeyFrame(Duration.ZERO,                    new KeyValue(currentLowerBound, oldLowerBound.getTime()),                    new KeyValue(currentUpperBound, oldUpperBound.getTime())),                    new KeyFrame(Duration.millis(3000), keyValue, keyValue2));            timeline.play(); Get the difference between the max and min date. Get the actual range of the visible area. The minimal date should start at the zero position, that's why we subtract it. Then get the difference from the actual date to the min date and divide it by the total difference. We get a value between 0 and 1, if the date is within the min and max date. Multiply this percent value with the range and add the zero offset. Get the difference between the max and min date. Get the actual range of the visible area. The minimal date should start at the zero position, that's why we subtract it. displayPosition = getHeight() - ((date - lowerBound) / diff) * range + getZero date = displayPosition - getZero - getHeight())/range * diff + lowerBound displayPosition = ((date - lowerBound) / diff) * range + getZero date = displayPosition - getZero)/range * diff + lowerBound The preferred gap which should be between two tick marks. Starting with the greatest interval, add one of each calendar unit. Reset the calendar. Clear the list. Loop as long we exceeded the upper bound. Then check the size of the list. If it is greater than the amount of ticks, take that list. Recheck if the previous interval is better suited. At last add the upper bound. If there are at least three dates, check if the gap between the lower date and the second date is at least half the gap of the second and third date. Do the same for the upper bound. If gaps between dates are to small, remove one of them. This can occur, e.g. if the lower bound is 25.12.2013 and years are shown. Then the next year shown would be 2014 (01.01.2014) which would be too narrow to 25.12.2013. If the second date is too near by the lower bound, remove it. If difference from the upper bound to the last date is less than the half of the difference of the previous two dates, we better remove the last date, as it comes to close to the upper bound.*
     * Makes dates even, in the sense of that years always begin in January, months always begin on the 1st and days always at midnight.
     *
     * @param dates The list of dates.
     * @return The new list of dates.
      If the dates contain more dates than just the lower and upper bounds, make the dates in between even. For each interval, modify the date slightly by a few millis, to make sure they are different days. This is because Axis stores each value and won't update the tick labels, if the value is already known. This happens if you display days and then add a date many years in the future the tick label will still be displayed as day. If its not the first or last date (lower and upper bound), make the year begin with first month and let the months begin with first day. If its not the first or last date (lower and upper bound), make the months begin with first day. Make weeks begin with first day of week?*
     * Gets the lower bound of the axis.
     *
     * @return The property.
     * @see #getLowerBound()
     * @see #setLowerBound(java.util.Date)
     *
     * Gets the lower bound of the axis.
     *
     * @return The lower bound.
     * @see #lowerBoundProperty()
     *
     * Sets the lower bound of the axis.
     *
     * @param date The lower bound date.
     * @see #lowerBoundProperty()
     *
     * Gets the upper bound of the axis.
     *
     * @return The property.
     * @see #getUpperBound() ()
     * @see #setUpperBound(java.util.Date)
     *
     * Gets the upper bound of the axis.
     *
     * @return The upper bound.
     * @see #upperBoundProperty()
     *
     * Sets the upper bound of the axis.
     *
     * @param date The upper bound date.
     * @see #upperBoundProperty() ()
     *
     * Gets the tick label formatter for the ticks.
     *
     * @return The converter.
     *
     * Sets the tick label formatter for the ticks.
     *
     * @param value The converter.
     *
     * Gets the tick label formatter for the ticks.
     *
     * @return The property.
     *
     * The intervals, which are used for the tick labels. Beginning with the largest interval, the axis tries to calculate the tick values for this interval.
     * If a smaller interval is better suited for, that one is taken.
     
 * The MIT License (MIT)
 *
 * Copyright (c) 2013, Christian Schudt
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * An axis that displays date and time values.
 * <p/>
 * Tick labels are usually automatically set and calculated depending on the range unless you explicitly {@linkplain #setTickLabelFormatter(javafx.util.StringConverter) set an formatter}.
 * <p/>
 * You also have the chance to specify fix lower and upper bounds, otherwise they are calculated by your data.
 * <p/>
 * <p/>
 * <h3>Screenshots</h3>
 * <p>
 * Displaying date values, ranging over several months:</p>
 * <img src="doc-files/DateAxisMonths.png" alt="DateAxisMonths" />
 * <p>
 * Displaying date values, ranging only over a few hours:</p>
 * <img src="doc-files/DateAxisHours.png" alt="DateAxisHours" />
 * <p/>
 * <p/>
 * <h3>Sample Usage</h3>
 * <pre>
 * {@code
 * ObservableList<XYChart.Series<Date, Number>> series = FXCollections.observableArrayList();
 *
 * ObservableList<XYChart.Data<Date, Number>> series1Data = FXCollections.observableArrayList();
 * series1Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2012, 11, 15).getTime(), 2));
 * series1Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2014, 5, 3).getTime(), 4));
 *
 * ObservableList<XYChart.Data<Date, Number>> series2Data = FXCollections.observableArrayList();
 * series2Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2014, 0, 13).getTime(), 8));
 * series2Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2014, 7, 27).getTime(), 4));
 *
 * series.add(new XYChart.Series<>("Series1", series1Data));
 * series.add(new XYChart.Series<>("Series2", series2Data));
 *
 * NumberAxis numberAxis = new NumberAxis();
 * DateAxis dateAxis = new DateAxis();
 * LineChart<Date, Number> lineChart = new LineChart<>(dateAxis, numberAxis, series);
 * }
 * </pre>
 *
 * @author Christian Schudt
 * @author Diego Cirujano
 *
     * These property are used for animation.
     *
     * Stores the min and max date of the list of dates which is used.
     * If {@link #autoRanging} is true, these values are used as lower and upper bounds.
     *
     * Default constructor. By default the lower and upper bound are calculated by the data.
     *
     * Constructs a date axis with fix lower and upper bounds.
     *
     * @param lowerBound The lower bound.
     * @param upperBound The upper bound.
     *
     * Constructs a date axis with a label and fix lower and upper bounds.
     *
     * @param axisLabel  The label for the axis.
     * @param lowerBound The lower bound.
     * @param upperBound The upper bound.
                 final Timeline timeline = new Timeline();            timeline.setAutoReverse(false);            timeline.setCycleCount(1);            final AnimationTimer timer = new AnimationTimer() {                @Override                public void handle(long l) {                    requestAxisLayout();                }            };            timer.start();            timeline.setOnFinished(new EventHandler<ActionEvent>() {                @Override                public void handle(ActionEvent actionEvent) {                    timer.stop();                    requestAxisLayout();                }            });            KeyValue keyValue = new KeyValue(currentLowerBound, lower.getTime());            KeyValue keyValue2 = new KeyValue(currentUpperBound, upper.getTime());            timeline.getKeyFrames().addAll(new KeyFrame(Duration.ZERO,                    new KeyValue(currentLowerBound, oldLowerBound.getTime()),                    new KeyValue(currentUpperBound, oldUpperBound.getTime())),                    new KeyFrame(Duration.millis(3000), keyValue, keyValue2));            timeline.play(); Get the difference between the max and min date. Get the actual range of the visible area. The minimal date should start at the zero position, that's why we subtract it. Then get the difference from the actual date to the min date and divide it by the total difference. We get a value between 0 and 1, if the date is within the min and max date. Multiply this percent value with the range and add the zero offset. Get the difference between the max and min date. Get the actual range of the visible area. The minimal date should start at the zero position, that's why we subtract it. displayPosition = getHeight() - ((date - lowerBound) / diff) * range + getZero date = displayPosition - getZero - getHeight())/range * diff + lowerBound displayPosition = ((date - lowerBound) / diff) * range + getZero date = displayPosition - getZero)/range * diff + lowerBound The preferred gap which should be between two tick marks. Starting with the greatest interval, add one of each calendar unit. Reset the calendar. Clear the list. Loop as long we exceeded the upper bound. Then check the size of the list. If it is greater than the amount of ticks, take that list. Recheck if the previous interval is better suited. At last add the upper bound. If there are at least three dates, check if the gap between the lower date and the second date is at least half the gap of the second and third date. Do the same for the upper bound. If gaps between dates are to small, remove one of them. This can occur, e.g. if the lower bound is 25.12.2013 and years are shown. Then the next year shown would be 2014 (01.01.2014) which would be too narrow to 25.12.2013. If the second date is too near by the lower bound, remove it. If difference from the upper bound to the last date is less than the half of the difference of the previous two dates, we better remove the last date, as it comes to close to the upper bound.*
     * Makes dates even, in the sense of that years always begin in January, months always begin on the 1st and days always at midnight.
     *
     * @param dates The list of dates.
     * @return The new list of dates.
      If the dates contain more dates than just the lower and upper bounds, make the dates in between even. For each interval, modify the date slightly by a few millis, to make sure they are different days. This is because Axis stores each value and won't update the tick labels, if the value is already known. This happens if you display days and then add a date many years in the future the tick label will still be displayed as day. If its not the first or last date (lower and upper bound), make the year begin with first month and let the months begin with first day. If its not the first or last date (lower and upper bound), make the months begin with first day. Make weeks begin with first day of week?*
     * Gets the lower bound of the axis.
     *
     * @return The property.
     * @see #getLowerBound()
     * @see #setLowerBound(java.util.Date)
     *
     * Gets the lower bound of the axis.
     *
     * @return The lower bound.
     * @see #lowerBoundProperty()
     *
     * Sets the lower bound of the axis.
     *
     * @param date The lower bound date.
     * @see #lowerBoundProperty()
     *
     * Gets the upper bound of the axis.
     *
     * @return The property.
     * @see #getUpperBound() ()
     * @see #setUpperBound(java.util.Date)
     *
     * Gets the upper bound of the axis.
     *
     * @return The upper bound.
     * @see #upperBoundProperty()
     *
     * Sets the upper bound of the axis.
     *
     * @param date The upper bound date.
     * @see #upperBoundProperty() ()
     *
     * Gets the tick label formatter for the ticks.
     *
     * @return The converter.
     *
     * Sets the tick label formatter for the ticks.
     *
     * @param value The converter.
     *
     * Gets the tick label formatter for the ticks.
     *
     * @return The property.
     *
     * The intervals, which are used for the tick labels. Beginning with the largest interval, the axis tries to calculate the tick values for this interval.
     * If a smaller interval is better suited for, that one is taken.
     
 * The MIT License (MIT)
 *
 * Copyright (c) 2013, Christian Schudt
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * An axis that displays date and time values.
 * <p/>
 * Tick labels are usually automatically set and calculated depending on the range unless you explicitly {@linkplain #setTickLabelFormatter(javafx.util.StringConverter) set an formatter}.
 * <p/>
 * You also have the chance to specify fix lower and upper bounds, otherwise they are calculated by your data.
 * <p/>
 * <p/>
 * <h3>Screenshots</h3>
 * <p>
 * Displaying date values, ranging over several months:</p>
 * <img src="doc-files/DateAxisMonths.png" alt="DateAxisMonths" />
 * <p>
 * Displaying date values, ranging only over a few hours:</p>
 * <img src="doc-files/DateAxisHours.png" alt="DateAxisHours" />
 * <p/>
 * <p/>
 * <h3>Sample Usage</h3>
 * <pre>
 * {@code
 * ObservableList<XYChart.Series<Date, Number>> series = FXCollections.observableArrayList();
 *
 * ObservableList<XYChart.Data<Date, Number>> series1Data = FXCollections.observableArrayList();
 * series1Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2012, 11, 15).getTime(), 2));
 * series1Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2014, 5, 3).getTime(), 4));
 *
 * ObservableList<XYChart.Data<Date, Number>> series2Data = FXCollections.observableArrayList();
 * series2Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2014, 0, 13).getTime(), 8));
 * series2Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2014, 7, 27).getTime(), 4));
 *
 * series.add(new XYChart.Series<>("Series1", series1Data));
 * series.add(new XYChart.Series<>("Series2", series2Data));
 *
 * NumberAxis numberAxis = new NumberAxis();
 * DateAxis dateAxis = new DateAxis();
 * LineChart<Date, Number> lineChart = new LineChart<>(dateAxis, numberAxis, series);
 * }
 * </pre>
 *
 * @author Christian Schudt
 * @author Diego Cirujano
 *
     * These property are used for animation.
     *
     * Stores the min and max date of the list of dates which is used.
     * If {@link #autoRanging} is true, these values are used as lower and upper bounds.
     *
     * Default constructor. By default the lower and upper bound are calculated by the data.
     *
     * Constructs a date axis with fix lower and upper bounds.
     *
     * @param lowerBound The lower bound.
     * @param upperBound The upper bound.
     *
     * Constructs a date axis with a label and fix lower and upper bounds.
     *
     * @param axisLabel  The label for the axis.
     * @param lowerBound The lower bound.
     * @param upperBound The upper bound.
                 final Timeline timeline = new Timeline();            timeline.setAutoReverse(false);            timeline.setCycleCount(1);            final AnimationTimer timer = new AnimationTimer() {                @Override                public void handle(long l) {                    requestAxisLayout();                }            };            timer.start();            timeline.setOnFinished(new EventHandler<ActionEvent>() {                @Override                public void handle(ActionEvent actionEvent) {                    timer.stop();                    requestAxisLayout();                }            });            KeyValue keyValue = new KeyValue(currentLowerBound, lower.getTime());            KeyValue keyValue2 = new KeyValue(currentUpperBound, upper.getTime());            timeline.getKeyFrames().addAll(new KeyFrame(Duration.ZERO,                    new KeyValue(currentLowerBound, oldLowerBound.getTime()),                    new KeyValue(currentUpperBound, oldUpperBound.getTime())),                    new KeyFrame(Duration.millis(3000), keyValue, keyValue2));            timeline.play(); Get the difference between the max and min date. Get the actual range of the visible area. The minimal date should start at the zero position, that's why we subtract it. Then get the difference from the actual date to the min date and divide it by the total difference. We get a value between 0 and 1, if the date is within the min and max date. Multiply this percent value with the range and add the zero offset. Get the difference between the max and min date. Get the actual range of the visible area. The minimal date should start at the zero position, that's why we subtract it. displayPosition = getHeight() - ((date - lowerBound) / diff) * range + getZero date = displayPosition - getZero - getHeight())/range * diff + lowerBound displayPosition = ((date - lowerBound) / diff) * range + getZero date = displayPosition - getZero)/range * diff + lowerBound The preferred gap which should be between two tick marks. Starting with the greatest interval, add one of each calendar unit. Reset the calendar. Clear the list. Loop as long we exceeded the upper bound. Then check the size of the list. If it is greater than the amount of ticks, take that list. Recheck if the previous interval is better suited. At last add the upper bound. If there are at least three dates, check if the gap between the lower date and the second date is at least half the gap of the second and third date. Do the same for the upper bound. If gaps between dates are to small, remove one of them. This can occur, e.g. if the lower bound is 25.12.2013 and years are shown. Then the next year shown would be 2014 (01.01.2014) which would be too narrow to 25.12.2013. If the second date is too near by the lower bound, remove it. If difference from the upper bound to the last date is less than the half of the difference of the previous two dates, we better remove the last date, as it comes to close to the upper bound.*
     * Makes dates even, in the sense of that years always begin in January, months always begin on the 1st and days always at midnight.
     *
     * @param dates The list of dates.
     * @return The new list of dates.
      If the dates contain more dates than just the lower and upper bounds, make the dates in between even. For each interval, modify the date slightly by a few millis, to make sure they are different days. This is because Axis stores each value and won't update the tick labels, if the value is already known. This happens if you display days and then add a date many years in the future the tick label will still be displayed as day. If its not the first or last date (lower and upper bound), make the year begin with first month and let the months begin with first day. If its not the first or last date (lower and upper bound), make the months begin with first day. Make weeks begin with first day of week?*
     * Gets the lower bound of the axis.
     *
     * @return The property.
     * @see #getLowerBound()
     * @see #setLowerBound(java.util.Date)
     *
     * Gets the lower bound of the axis.
     *
     * @return The lower bound.
     * @see #lowerBoundProperty()
     *
     * Sets the lower bound of the axis.
     *
     * @param date The lower bound date.
     * @see #lowerBoundProperty()
     *
     * Gets the upper bound of the axis.
     *
     * @return The property.
     * @see #getUpperBound() ()
     * @see #setUpperBound(java.util.Date)
     *
     * Gets the upper bound of the axis.
     *
     * @return The upper bound.
     * @see #upperBoundProperty()
     *
     * Sets the upper bound of the axis.
     *
     * @param date The upper bound date.
     * @see #upperBoundProperty() ()
     *
     * Gets the tick label formatter for the ticks.
     *
     * @return The converter.
     *
     * Sets the tick label formatter for the ticks.
     *
     * @param value The converter.
     *
     * Gets the tick label formatter for the ticks.
     *
     * @return The property.
     *
     * The intervals, which are used for the tick labels. Beginning with the largest interval, the axis tries to calculate the tick values for this interval.
     * If a smaller interval is better suited for, that one is taken.
     
 * The MIT License (MIT)
 *
 * Copyright (c) 2013, Christian Schudt
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * An axis that displays date and time values.
 * <p/>
 * Tick labels are usually automatically set and calculated depending on the range unless you explicitly {@linkplain #setTickLabelFormatter(javafx.util.StringConverter) set an formatter}.
 * <p/>
 * You also have the chance to specify fix lower and upper bounds, otherwise they are calculated by your data.
 * <p/>
 * <p/>
 * <h3>Screenshots</h3>
 * <p>
 * Displaying date values, ranging over several months:</p>
 * <img src="doc-files/DateAxisMonths.png" alt="DateAxisMonths" />
 * <p>
 * Displaying date values, ranging only over a few hours:</p>
 * <img src="doc-files/DateAxisHours.png" alt="DateAxisHours" />
 * <p/>
 * <p/>
 * <h3>Sample Usage</h3>
 * <pre>
 * {@code
 * ObservableList<XYChart.Series<Date, Number>> series = FXCollections.observableArrayList();
 *
 * ObservableList<XYChart.Data<Date, Number>> series1Data = FXCollections.observableArrayList();
 * series1Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2012, 11, 15).getTime(), 2));
 * series1Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2014, 5, 3).getTime(), 4));
 *
 * ObservableList<XYChart.Data<Date, Number>> series2Data = FXCollections.observableArrayList();
 * series2Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2014, 0, 13).getTime(), 8));
 * series2Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2014, 7, 27).getTime(), 4));
 *
 * series.add(new XYChart.Series<>("Series1", series1Data));
 * series.add(new XYChart.Series<>("Series2", series2Data));
 *
 * NumberAxis numberAxis = new NumberAxis();
 * DateAxis dateAxis = new DateAxis();
 * LineChart<Date, Number> lineChart = new LineChart<>(dateAxis, numberAxis, series);
 * }
 * </pre>
 *
 * @author Christian Schudt
 * @author Diego Cirujano
 *
     * These property are used for animation.
     *
     * Stores the min and max date of the list of dates which is used.
     * If {@link #autoRanging} is true, these values are used as lower and upper bounds.
     *
     * Default constructor. By default the lower and upper bound are calculated by the data.
     *
     * Constructs a date axis with fix lower and upper bounds.
     *
     * @param lowerBound The lower bound.
     * @param upperBound The upper bound.
     *
     * Constructs a date axis with a label and fix lower and upper bounds.
     *
     * @param axisLabel  The label for the axis.
     * @param lowerBound The lower bound.
     * @param upperBound The upper bound.
                 final Timeline timeline = new Timeline();            timeline.setAutoReverse(false);            timeline.setCycleCount(1);            final AnimationTimer timer = new AnimationTimer() {                @Override                public void handle(long l) {                    requestAxisLayout();                }            };            timer.start();            timeline.setOnFinished(new EventHandler<ActionEvent>() {                @Override                public void handle(ActionEvent actionEvent) {                    timer.stop();                    requestAxisLayout();                }            });            KeyValue keyValue = new KeyValue(currentLowerBound, lower.getTime());            KeyValue keyValue2 = new KeyValue(currentUpperBound, upper.getTime());            timeline.getKeyFrames().addAll(new KeyFrame(Duration.ZERO,                    new KeyValue(currentLowerBound, oldLowerBound.getTime()),                    new KeyValue(currentUpperBound, oldUpperBound.getTime())),                    new KeyFrame(Duration.millis(3000), keyValue, keyValue2));            timeline.play(); Get the difference between the max and min date. Get the actual range of the visible area. The minimal date should start at the zero position, that's why we subtract it. Then get the difference from the actual date to the min date and divide it by the total difference. We get a value between 0 and 1, if the date is within the min and max date. Multiply this percent value with the range and add the zero offset. Get the difference between the max and min date. Get the actual range of the visible area. The minimal date should start at the zero position, that's why we subtract it. displayPosition = getHeight() - ((date - lowerBound) / diff) * range + getZero date = displayPosition - getZero - getHeight())/range * diff + lowerBound displayPosition = ((date - lowerBound) / diff) * range + getZero date = displayPosition - getZero)/range * diff + lowerBound The preferred gap which should be between two tick marks. Starting with the greatest interval, add one of each calendar unit. Reset the calendar. Clear the list. Loop as long we exceeded the upper bound. Then check the size of the list. If it is greater than the amount of ticks, take that list. Recheck if the previous interval is better suited. At last add the upper bound. If there are at least three dates, check if the gap between the lower date and the second date is at least half the gap of the second and third date. Do the same for the upper bound. If gaps between dates are to small, remove one of them. This can occur, e.g. if the lower bound is 25.12.2013 and years are shown. Then the next year shown would be 2014 (01.01.2014) which would be too narrow to 25.12.2013. If the second date is too near by the lower bound, remove it. If difference from the upper bound to the last date is less than the half of the difference of the previous two dates, we better remove the last date, as it comes to close to the upper bound.*
     * Makes dates even, in the sense of that years always begin in January, months always begin on the 1st and days always at midnight.
     *
     * @param dates The list of dates.
     * @return The new list of dates.
      If the dates contain more dates than just the lower and upper bounds, make the dates in between even. For each interval, modify the date slightly by a few millis, to make sure they are different days. This is because Axis stores each value and won't update the tick labels, if the value is already known. This happens if you display days and then add a date many years in the future the tick label will still be displayed as day. If its not the first or last date (lower and upper bound), make the year begin with first month and let the months begin with first day. If its not the first or last date (lower and upper bound), make the months begin with first day. Make weeks begin with first day of week?*
     * Gets the lower bound of the axis.
     *
     * @return The property.
     * @see #getLowerBound()
     * @see #setLowerBound(java.util.Date)
     *
     * Gets the lower bound of the axis.
     *
     * @return The lower bound.
     * @see #lowerBoundProperty()
     *
     * Sets the lower bound of the axis.
     *
     * @param date The lower bound date.
     * @see #lowerBoundProperty()
     *
     * Gets the upper bound of the axis.
     *
     * @return The property.
     * @see #getUpperBound() ()
     * @see #setUpperBound(java.util.Date)
     *
     * Gets the upper bound of the axis.
     *
     * @return The upper bound.
     * @see #upperBoundProperty()
     *
     * Sets the upper bound of the axis.
     *
     * @param date The upper bound date.
     * @see #upperBoundProperty() ()
     *
     * Gets the tick label formatter for the ticks.
     *
     * @return The converter.
     *
     * Sets the tick label formatter for the ticks.
     *
     * @param value The converter.
     *
     * Gets the tick label formatter for the ticks.
     *
     * @return The property.
     *
     * The intervals, which are used for the tick labels. Beginning with the largest interval, the axis tries to calculate the tick values for this interval.
     * If a smaller interval is better suited for, that one is taken.
     
 * The MIT License (MIT)
 *
 * Copyright (c) 2013, Christian Schudt
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * An axis that displays date and time values.
 * <p/>
 * Tick labels are usually automatically set and calculated depending on the range unless you explicitly {@linkplain #setTickLabelFormatter(javafx.util.StringConverter) set an formatter}.
 * <p/>
 * You also have the chance to specify fix lower and upper bounds, otherwise they are calculated by your data.
 * <p/>
 * <p/>
 * <h3>Screenshots</h3>
 * <p>
 * Displaying date values, ranging over several months:</p>
 * <img src="doc-files/DateAxisMonths.png" alt="DateAxisMonths" />
 * <p>
 * Displaying date values, ranging only over a few hours:</p>
 * <img src="doc-files/DateAxisHours.png" alt="DateAxisHours" />
 * <p/>
 * <p/>
 * <h3>Sample Usage</h3>
 * <pre>
 * {@code
 * ObservableList<XYChart.Series<Date, Number>> series = FXCollections.observableArrayList();
 *
 * ObservableList<XYChart.Data<Date, Number>> series1Data = FXCollections.observableArrayList();
 * series1Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2012, 11, 15).getTime(), 2));
 * series1Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2014, 5, 3).getTime(), 4));
 *
 * ObservableList<XYChart.Data<Date, Number>> series2Data = FXCollections.observableArrayList();
 * series2Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2014, 0, 13).getTime(), 8));
 * series2Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2014, 7, 27).getTime(), 4));
 *
 * series.add(new XYChart.Series<>("Series1", series1Data));
 * series.add(new XYChart.Series<>("Series2", series2Data));
 *
 * NumberAxis numberAxis = new NumberAxis();
 * DateAxis dateAxis = new DateAxis();
 * LineChart<Date, Number> lineChart = new LineChart<>(dateAxis, numberAxis, series);
 * }
 * </pre>
 *
 * @author Christian Schudt
 * @author Diego Cirujano
 *
     * These property are used for animation.
     *
     * Stores the min and max date of the list of dates which is used.
     * If {@link #autoRanging} is true, these values are used as lower and upper bounds.
     *
     * Default constructor. By default the lower and upper bound are calculated by the data.
     *
     * Constructs a date axis with fix lower and upper bounds.
     *
     * @param lowerBound The lower bound.
     * @param upperBound The upper bound.
     *
     * Constructs a date axis with a label and fix lower and upper bounds.
     *
     * @param axisLabel  The label for the axis.
     * @param lowerBound The lower bound.
     * @param upperBound The upper bound.
                 final Timeline timeline = new Timeline();            timeline.setAutoReverse(false);            timeline.setCycleCount(1);            final AnimationTimer timer = new AnimationTimer() {                @Override                public void handle(long l) {                    requestAxisLayout();                }            };            timer.start();            timeline.setOnFinished(new EventHandler<ActionEvent>() {                @Override                public void handle(ActionEvent actionEvent) {                    timer.stop();                    requestAxisLayout();                }            });            KeyValue keyValue = new KeyValue(currentLowerBound, lower.getTime());            KeyValue keyValue2 = new KeyValue(currentUpperBound, upper.getTime());            timeline.getKeyFrames().addAll(new KeyFrame(Duration.ZERO,                    new KeyValue(currentLowerBound, oldLowerBound.getTime()),                    new KeyValue(currentUpperBound, oldUpperBound.getTime())),                    new KeyFrame(Duration.millis(3000), keyValue, keyValue2));            timeline.play(); Get the difference between the max and min date. Get the actual range of the visible area. The minimal date should start at the zero position, that's why we subtract it. Then get the difference from the actual date to the min date and divide it by the total difference. We get a value between 0 and 1, if the date is within the min and max date. Multiply this percent value with the range and add the zero offset. Get the difference between the max and min date. Get the actual range of the visible area. The minimal date should start at the zero position, that's why we subtract it. displayPosition = getHeight() - ((date - lowerBound) / diff) * range + getZero date = displayPosition - getZero - getHeight())/range * diff + lowerBound displayPosition = ((date - lowerBound) / diff) * range + getZero date = displayPosition - getZero)/range * diff + lowerBound The preferred gap which should be between two tick marks. Starting with the greatest interval, add one of each calendar unit. Reset the calendar. Clear the list. Loop as long we exceeded the upper bound. Then check the size of the list. If it is greater than the amount of ticks, take that list. Recheck if the previous interval is better suited. At last add the upper bound. If there are at least three dates, check if the gap between the lower date and the second date is at least half the gap of the second and third date. Do the same for the upper bound. If gaps between dates are to small, remove one of them. This can occur, e.g. if the lower bound is 25.12.2013 and years are shown. Then the next year shown would be 2014 (01.01.2014) which would be too narrow to 25.12.2013. If the second date is too near by the lower bound, remove it. If difference from the upper bound to the last date is less than the half of the difference of the previous two dates, we better remove the last date, as it comes to close to the upper bound.*
     * Makes dates even, in the sense of that years always begin in January, months always begin on the 1st and days always at midnight.
     *
     * @param dates The list of dates.
     * @return The new list of dates.
      If the dates contain more dates than just the lower and upper bounds, make the dates in between even. For each interval, modify the date slightly by a few millis, to make sure they are different days. This is because Axis stores each value and won't update the tick labels, if the value is already known. This happens if you display days and then add a date many years in the future the tick label will still be displayed as day. If its not the first or last date (lower and upper bound), make the year begin with first month and let the months begin with first day. If its not the first or last date (lower and upper bound), make the months begin with first day. Make weeks begin with first day of week?*
     * Gets the lower bound of the axis.
     *
     * @return The property.
     * @see #getLowerBound()
     * @see #setLowerBound(java.util.Date)
     *
     * Gets the lower bound of the axis.
     *
     * @return The lower bound.
     * @see #lowerBoundProperty()
     *
     * Sets the lower bound of the axis.
     *
     * @param date The lower bound date.
     * @see #lowerBoundProperty()
     *
     * Gets the upper bound of the axis.
     *
     * @return The property.
     * @see #getUpperBound() ()
     * @see #setUpperBound(java.util.Date)
     *
     * Gets the upper bound of the axis.
     *
     * @return The upper bound.
     * @see #upperBoundProperty()
     *
     * Sets the upper bound of the axis.
     *
     * @param date The upper bound date.
     * @see #upperBoundProperty() ()
     *
     * Gets the tick label formatter for the ticks.
     *
     * @return The converter.
     *
     * Sets the tick label formatter for the ticks.
     *
     * @param value The converter.
     *
     * Gets the tick label formatter for the ticks.
     *
     * @return The property.
     *
     * The intervals, which are used for the tick labels. Beginning with the largest interval, the axis tries to calculate the tick values for this interval.
     * If a smaller interval is better suited for, that one is taken.
     
 * The MIT License (MIT)
 *
 * Copyright (c) 2013, Christian Schudt
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * An axis that displays date and time values.
 * <p/>
 * Tick labels are usually automatically set and calculated depending on the range unless you explicitly {@linkplain #setTickLabelFormatter(javafx.util.StringConverter) set an formatter}.
 * <p/>
 * You also have the chance to specify fix lower and upper bounds, otherwise they are calculated by your data.
 * <p/>
 * <p/>
 * <h3>Screenshots</h3>
 * <p>
 * Displaying date values, ranging over several months:</p>
 * <img src="doc-files/DateAxisMonths.png" alt="DateAxisMonths" />
 * <p>
 * Displaying date values, ranging only over a few hours:</p>
 * <img src="doc-files/DateAxisHours.png" alt="DateAxisHours" />
 * <p/>
 * <p/>
 * <h3>Sample Usage</h3>
 * <pre>
 * {@code
 * ObservableList<XYChart.Series<Date, Number>> series = FXCollections.observableArrayList();
 *
 * ObservableList<XYChart.Data<Date, Number>> series1Data = FXCollections.observableArrayList();
 * series1Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2012, 11, 15).getTime(), 2));
 * series1Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2014, 5, 3).getTime(), 4));
 *
 * ObservableList<XYChart.Data<Date, Number>> series2Data = FXCollections.observableArrayList();
 * series2Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2014, 0, 13).getTime(), 8));
 * series2Data.add(new XYChart.Data<Date, Number>(new GregorianCalendar(2014, 7, 27).getTime(), 4));
 *
 * series.add(new XYChart.Series<>("Series1", series1Data));
 * series.add(new XYChart.Series<>("Series2", series2Data));
 *
 * NumberAxis numberAxis = new NumberAxis();
 * DateAxis dateAxis = new DateAxis();
 * LineChart<Date, Number> lineChart = new LineChart<>(dateAxis, numberAxis, series);
 * }
 * </pre>
 *
 * @author Christian Schudt
 * @author Diego Cirujano
 *
     * These property are used for animation.
     *
     * Stores the min and max date of the list of dates which is used.
     * If {@link #autoRanging} is true, these values are used as lower and upper bounds.
     *
     * Default constructor. By default the lower and upper bound are calculated by the data.
     *
     * Constructs a date axis with fix lower and upper bounds.
     *
     * @param lowerBound The lower bound.
     * @param upperBound The upper bound.
     *
     * Constructs a date axis with a label and fix lower and upper bounds.
     *
     * @param axisLabel  The label for the axis.
     * @param lowerBound The lower bound.
     * @param upperBound The upper bound.
                 final Timeline timeline = new Timeline();            timeline.setAutoReverse(false);            timeline.setCycleCount(1);            final AnimationTimer timer = new AnimationTimer() {                @Override                public void handle(long l) {                    requestAxisLayout();                }            };            timer.start();            timeline.setOnFinished(new EventHandler<ActionEvent>() {                @Override                public void handle(ActionEvent actionEvent) {                    timer.stop();                    requestAxisLayout();                }            });            KeyValue keyValue = new KeyValue(currentLowerBound, lower.getTime());            KeyValue keyValue2 = new KeyValue(currentUpperBound, upper.getTime());            timeline.getKeyFrames().addAll(new KeyFrame(Duration.ZERO,                    new KeyValue(currentLowerBound, oldLowerBound.getTime()),                    new KeyValue(currentUpperBound, oldUpperBound.getTime())),                    new KeyFrame(Duration.millis(3000), keyValue, keyValue2));            timeline.play(); Get the difference between the max and min date. Get the actual range of the visible area. The minimal date should start at the zero position, that's why we subtract it. Then get the difference from the actual date to the min date and divide it by the total difference. We get a value between 0 and 1, if the date is within the min and max date. Multiply this percent value with the range and add the zero offset. Get the difference between the max and min date. Get the actual range of the visible area. The minimal date should start at the zero position, that's why we subtract it. displayPosition = getHeight() - ((date - lowerBound) / diff) * range + getZero date = displayPosition - getZero - getHeight())/range * diff + lowerBound displayPosition = ((date - lowerBound) / diff) * range + getZero date = displayPosition - getZero)/range * diff + lowerBound The preferred gap which should be between two tick marks. Starting with the greatest interval, add one of each calendar unit. Reset the calendar. Clear the list. Loop as long we exceeded the upper bound. Then check the size of the list. If it is greater than the amount of ticks, take that list. Recheck if the previous interval is better suited. At last add the upper bound. If there are at least three dates, check if the gap between the lower date and the second date is at least half the gap of the second and third date. Do the same for the upper bound. If gaps between dates are to small, remove one of them. This can occur, e.g. if the lower bound is 25.12.2013 and years are shown. Then the next year shown would be 2014 (01.01.2014) which would be too narrow to 25.12.2013. If the second date is too near by the lower bound, remove it. If difference from the upper bound to the last date is less than the half of the difference of the previous two dates, we better remove the last date, as it comes to close to the upper bound.*
     * Makes dates even, in the sense of that years always begin in January, months always begin on the 1st and days always at midnight.
     *
     * @param dates The list of dates.
     * @return The new list of dates.
      If the dates contain more dates than just the lower and upper bounds, make the dates in between even. For each interval, modify the date slightly by a few millis, to make sure they are different days. This is because Axis stores each value and won't update the tick labels, if the value is already known. This happens if you display days and then add a date many years in the future the tick label will still be displayed as day. If its not the first or last date (lower and upper bound), make the year begin with first month and let the months begin with first day. If its not the first or last date (lower and upper bound), make the months begin with first day. Make weeks begin with first day of week?*
     * Gets the lower bound of the axis.
     *
     * @return The property.
     * @see #getLowerBound()
     * @see #setLowerBound(java.util.Date)
     *
     * Gets the lower bound of the axis.
     *
     * @return The lower bound.
     * @see #lowerBoundProperty()
     *
     * Sets the lower bound of the axis.
     *
     * @param date The lower bound date.
     * @see #lowerBoundProperty()
     *
     * Gets the upper bound of the axis.
     *
     * @return The property.
     * @see #getUpperBound() ()
     * @see #setUpperBound(java.util.Date)
     *
     * Gets the upper bound of the axis.
     *
     * @return The upper bound.
     * @see #upperBoundProperty()
     *
     * Sets the upper bound of the axis.
     *
     * @param date The upper bound date.
     * @see #upperBoundProperty() ()
     *
     * Gets the tick label formatter for the ticks.
     *
     * @return The converter.
     *
     * Sets the tick label formatter for the ticks.
     *
     * @param value The converter.
     *
     * Gets the tick label formatter for the ticks.
     *
     * @return The property.
     *
     * The intervals, which are used for the tick labels. Beginning with the largest interval, the axis tries to calculate the tick values for this interval.
     * If a smaller interval is better suited for, that one is taken.
     