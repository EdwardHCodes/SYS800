*****************************************************************************
**
** FILE NAME    : ifxmips_arc4.c
** PROJECT      : IFX UEIP
** MODULES      : DEU Module
**
** DATE         : September 8, 2009
** AUTHOR       : Mohammad Firdaus
** DESCRIPTION  : Data Encryption Unit Driver for ARC4 Algorithm
** COPYRIGHT    :       Copyright (c) 2009
**                      Infineon Technologies AG
**                      Am Campeon 1-12, 85579 Neubiberg, Germany
**
**    This program is free software; you can redistribute it and/or modify
**    it under the terms of the GNU General Public License as published by
**    the Free Software Foundation; either version 2 of the License, or
**    (at your option) any later version.
**
** HISTORY
** $Date        $Author             $Comment
** 08 Sept 2009 Mohammad Firdaus    Initial UEIP release
******************************************************************************!
  \defgroup IFX_DEU IFX_DEU_DRIVERS
  \ingroup API
  \brief ifx deu driver module
!
  \file		ifxmips_arc4.c
  \ingroup 	IFX_DEU
  \brief 	ARC4 encryption DEU driver file
! 
  \defgroup IFX_ARC4_FUNCTIONS IFX_ARC4_FUNCTIONS
  \ingroup IFX_DEU
  \brief IFX deu driver functions
 Project header  Board specific header files  Preprocessor declerations #define ARC4_MAX_KEY_SIZE     256 
 * \brief arc4 private structure
! \fn static void _deu_arc4 (void *ctx_arg, u8 *out_arg, const u8 *in_arg, u8 *iv_arg, u32 nbytes, int encdec, int mode)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief main interface to ARC4 hardware   
    \param ctx_arg crypto algo context  
    \param out_arg output bytestream  
    \param in_arg input bytestream   
    \param iv_arg initialization vector  
    \param nbytes length of bytestream  
    \param encdec 1 for encrypt; 0 for decrypt  
    \param mode operation mode such as ebc, cbc, ctr  
 need to handle nbytes not multiple of 16        this will not take long need to handle nbytes not multiple of 16  dma dma! \fn arc4_chip_init (void)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief initialize arc4 hardware   
do nothing! \fn static int arc4_set_key(struct crypto_tfm *tfm, const u8 *in_key, unsigned int key_len)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief sets ARC4 key    
    \param tfm linux crypto algo transform  
    \param in_key input key  
    \param key_len key lengths less than or equal to 16 bytes supported  
struct arc4_ctx *ctx = crypto_tfm_ctx(tfm); must program all bits at one go?!!!#if 1NDC=1,ENDI=1,GO=0,KSAE=1,SM=0 arc4 is a ugly state machine, KSAE can only be set once per session  ! \fn static void _deu_arc4_ecb(void *ctx, uint8_t *dst, const uint8_t *src, uint8_t *iv, size_t nbytes, int encdec, int inplace)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief sets ARC4 hardware to ECB mode   
    \param ctx crypto algo context  
    \param dst output bytestream  
    \param src input bytestream  
    \param iv initialization vector   
    \param nbytes length of bytestream  
    \param encdec 1 for encrypt; 0 for decrypt  
    \param inplace not used  
! \fn static void arc4_crypt(struct crypto_tfm *tfm, u8 *out, const u8 *in)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief encrypt/decrypt ARC4_BLOCK_SIZE of data   
    \param tfm linux crypto algo transform  
    \param out output bytestream  
    \param in input bytestream  

 * \brief ARC4 function mappings
! \fn static int ecb_arc4_encrypt(struct blkcipher_desc *desc, struct scatterlist *dst, struct scatterlist *src, unsigned int nbytes)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief ECB ARC4 encrypt using linux crypto blkcipher    
    \param desc blkcipher descriptor  
    \param dst output scatterlist  
    \param src input scatterlist  
    \param nbytes data size in bytes  
! \fn static int ecb_arc4_decrypt(struct blkcipher_desc *desc, struct scatterlist *dst, struct scatterlist *src, unsigned int nbytes)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief ECB ARC4 decrypt using linux crypto blkcipher    
    \param desc blkcipher descriptor  
    \param dst output scatterlist  
    \param src input scatterlist  
    \param nbytes data size in bytes  

 * \brief ARC4 function mappings
! \fn int ifxdeu_init_arc4(void)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief initialize arc4 driver    
! \fn void ifxdeu_fini_arc4(void)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief unregister arc4 driver   
*****************************************************************************
**
** FILE NAME    : ifxmips_arc4.c
** PROJECT      : IFX UEIP
** MODULES      : DEU Module
**
** DATE         : September 8, 2009
** AUTHOR       : Mohammad Firdaus
** DESCRIPTION  : Data Encryption Unit Driver for ARC4 Algorithm
** COPYRIGHT    :       Copyright (c) 2009
**                      Infineon Technologies AG
**                      Am Campeon 1-12, 85579 Neubiberg, Germany
**
**    This program is free software; you can redistribute it and/or modify
**    it under the terms of the GNU General Public License as published by
**    the Free Software Foundation; either version 2 of the License, or
**    (at your option) any later version.
**
** HISTORY
** $Date        $Author             $Comment
** 08 Sept 2009 Mohammad Firdaus    Initial UEIP release
******************************************************************************!
  \defgroup IFX_DEU IFX_DEU_DRIVERS
  \ingroup API
  \brief ifx deu driver module
!
  \file		ifxmips_arc4.c
  \ingroup 	IFX_DEU
  \brief 	ARC4 encryption DEU driver file
! 
  \defgroup IFX_ARC4_FUNCTIONS IFX_ARC4_FUNCTIONS
  \ingroup IFX_DEU
  \brief IFX deu driver functions
 Project header  Board specific header files  Preprocessor declerations #define ARC4_MAX_KEY_SIZE     256 
 * \brief arc4 private structure
! \fn static void _deu_arc4 (void *ctx_arg, u8 *out_arg, const u8 *in_arg, u8 *iv_arg, u32 nbytes, int encdec, int mode)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief main interface to ARC4 hardware   
    \param ctx_arg crypto algo context  
    \param out_arg output bytestream  
    \param in_arg input bytestream   
    \param iv_arg initialization vector  
    \param nbytes length of bytestream  
    \param encdec 1 for encrypt; 0 for decrypt  
    \param mode operation mode such as ebc, cbc, ctr  
 need to handle nbytes not multiple of 16        this will not take long need to handle nbytes not multiple of 16  dma dma! \fn arc4_chip_init (void)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief initialize arc4 hardware   
do nothing! \fn static int arc4_set_key(struct crypto_tfm *tfm, const u8 *in_key, unsigned int key_len)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief sets ARC4 key    
    \param tfm linux crypto algo transform  
    \param in_key input key  
    \param key_len key lengths less than or equal to 16 bytes supported  
struct arc4_ctx *ctx = crypto_tfm_ctx(tfm); must program all bits at one go?!!!#if 1NDC=1,ENDI=1,GO=0,KSAE=1,SM=0 arc4 is a ugly state machine, KSAE can only be set once per session  ! \fn static void _deu_arc4_ecb(void *ctx, uint8_t *dst, const uint8_t *src, uint8_t *iv, size_t nbytes, int encdec, int inplace)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief sets ARC4 hardware to ECB mode   
    \param ctx crypto algo context  
    \param dst output bytestream  
    \param src input bytestream  
    \param iv initialization vector   
    \param nbytes length of bytestream  
    \param encdec 1 for encrypt; 0 for decrypt  
    \param inplace not used  
! \fn static void arc4_crypt(struct crypto_tfm *tfm, u8 *out, const u8 *in)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief encrypt/decrypt ARC4_BLOCK_SIZE of data   
    \param tfm linux crypto algo transform  
    \param out output bytestream  
    \param in input bytestream  

 * \brief ARC4 function mappings
! \fn static int ecb_arc4_encrypt(struct blkcipher_desc *desc, struct scatterlist *dst, struct scatterlist *src, unsigned int nbytes)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief ECB ARC4 encrypt using linux crypto blkcipher    
    \param desc blkcipher descriptor  
    \param dst output scatterlist  
    \param src input scatterlist  
    \param nbytes data size in bytes  
! \fn static int ecb_arc4_decrypt(struct blkcipher_desc *desc, struct scatterlist *dst, struct scatterlist *src, unsigned int nbytes)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief ECB ARC4 decrypt using linux crypto blkcipher    
    \param desc blkcipher descriptor  
    \param dst output scatterlist  
    \param src input scatterlist  
    \param nbytes data size in bytes  

 * \brief ARC4 function mappings
! \fn int ifxdeu_init_arc4(void)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief initialize arc4 driver    
! \fn void ifxdeu_fini_arc4(void)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief unregister arc4 driver   
*****************************************************************************
**
** FILE NAME    : ifxmips_arc4.c
** PROJECT      : IFX UEIP
** MODULES      : DEU Module
**
** DATE         : September 8, 2009
** AUTHOR       : Mohammad Firdaus
** DESCRIPTION  : Data Encryption Unit Driver for ARC4 Algorithm
** COPYRIGHT    :       Copyright (c) 2009
**                      Infineon Technologies AG
**                      Am Campeon 1-12, 85579 Neubiberg, Germany
**
**    This program is free software; you can redistribute it and/or modify
**    it under the terms of the GNU General Public License as published by
**    the Free Software Foundation; either version 2 of the License, or
**    (at your option) any later version.
**
** HISTORY
** $Date        $Author             $Comment
** 08 Sept 2009 Mohammad Firdaus    Initial UEIP release
******************************************************************************!
  \defgroup IFX_DEU IFX_DEU_DRIVERS
  \ingroup API
  \brief ifx deu driver module
!
  \file		ifxmips_arc4.c
  \ingroup 	IFX_DEU
  \brief 	ARC4 encryption DEU driver file
! 
  \defgroup IFX_ARC4_FUNCTIONS IFX_ARC4_FUNCTIONS
  \ingroup IFX_DEU
  \brief IFX deu driver functions
 Project header  Board specific header files  Preprocessor declerations #define ARC4_MAX_KEY_SIZE     256 
 * \brief arc4 private structure
! \fn static void _deu_arc4 (void *ctx_arg, u8 *out_arg, const u8 *in_arg, u8 *iv_arg, u32 nbytes, int encdec, int mode)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief main interface to ARC4 hardware   
    \param ctx_arg crypto algo context  
    \param out_arg output bytestream  
    \param in_arg input bytestream   
    \param iv_arg initialization vector  
    \param nbytes length of bytestream  
    \param encdec 1 for encrypt; 0 for decrypt  
    \param mode operation mode such as ebc, cbc, ctr  
 need to handle nbytes not multiple of 16        this will not take long need to handle nbytes not multiple of 16  dma dma! \fn arc4_chip_init (void)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief initialize arc4 hardware   
do nothing! \fn static int arc4_set_key(struct crypto_tfm *tfm, const u8 *in_key, unsigned int key_len)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief sets ARC4 key    
    \param tfm linux crypto algo transform  
    \param in_key input key  
    \param key_len key lengths less than or equal to 16 bytes supported  
struct arc4_ctx *ctx = crypto_tfm_ctx(tfm); must program all bits at one go?!!!#if 1NDC=1,ENDI=1,GO=0,KSAE=1,SM=0 arc4 is a ugly state machine, KSAE can only be set once per session  ! \fn static void _deu_arc4_ecb(void *ctx, uint8_t *dst, const uint8_t *src, uint8_t *iv, size_t nbytes, int encdec, int inplace)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief sets ARC4 hardware to ECB mode   
    \param ctx crypto algo context  
    \param dst output bytestream  
    \param src input bytestream  
    \param iv initialization vector   
    \param nbytes length of bytestream  
    \param encdec 1 for encrypt; 0 for decrypt  
    \param inplace not used  
! \fn static void arc4_crypt(struct crypto_tfm *tfm, u8 *out, const u8 *in)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief encrypt/decrypt ARC4_BLOCK_SIZE of data   
    \param tfm linux crypto algo transform  
    \param out output bytestream  
    \param in input bytestream  

 * \brief ARC4 function mappings
! \fn static int ecb_arc4_encrypt(struct blkcipher_desc *desc, struct scatterlist *dst, struct scatterlist *src, unsigned int nbytes)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief ECB ARC4 encrypt using linux crypto blkcipher    
    \param desc blkcipher descriptor  
    \param dst output scatterlist  
    \param src input scatterlist  
    \param nbytes data size in bytes  
! \fn static int ecb_arc4_decrypt(struct blkcipher_desc *desc, struct scatterlist *dst, struct scatterlist *src, unsigned int nbytes)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief ECB ARC4 decrypt using linux crypto blkcipher    
    \param desc blkcipher descriptor  
    \param dst output scatterlist  
    \param src input scatterlist  
    \param nbytes data size in bytes  

 * \brief ARC4 function mappings
! \fn int ifxdeu_init_arc4(void)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief initialize arc4 driver    
! \fn void ifxdeu_fini_arc4(void)
    \ingroup IFX_ARC4_FUNCTIONS
    \brief unregister arc4 driver   
