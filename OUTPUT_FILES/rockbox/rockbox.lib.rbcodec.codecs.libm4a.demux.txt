
 * ALAC (Apple Lossless Audio Codec) decoder
 * Copyright (c) 2005 David Hammerton
 * All rights reserved.
 *
 * This is the quicktime container demuxer.
 *
 * http://crazney.net/programs/itunes/alac.html
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
  chunk handlers  minor_ver =  compatible brands  unused fourcc_t cbrand = The following function is based on mp4ff  version and flags  get and verify ES_DescrTag  read length  skip 3 bytes  skip 2 bytes  get and verify DecoderConfigDescrTab  read length  audioType =  temp = 0x15000414 ???? maxBitrate =  avgBitrate =  get and verify DecSpecificInfoTag  read length  will skip the remainder of the atom  version  flags  if (numentries != 1)
    {
        DEBUGF("only expecting one entry in sample description atom!\n");
        return false;
    }  sound info:  reserved + data reference index + sound version + reserved  packet size  reserved size  remaining is codec data  12 = audio format atom, 8 = padding  audio format atom  The ALAC decoder skips these bytes, so there is no need to store them,
             and this code isn't endian/alignment safe  Skip "filler" atom  version  flags  version  flags  default sample size  version + flags  version + flags  read first offset  Build up lookup table. The lookup table contains the sample index and
     * byte position in the file for each chunk. This table is used to seek
     * and resume (see m4a_seek() and m4a_seek_raw() in libm4a/m4a.c) and 
     * to skip empty chunks (see m4a_check_sample_offset() in codecs/aac.c and
     * libm4a/m4a.c).
     * The seek/resume precision is lower than using sample_byte_size[] and 
     * depends on numentries. Typically the resolution is ~1/10 of all frames
     * which equals about 1/4-1/2 seconds. The loss of seek precision is 
     * accepted to be able to avoid allocation of the large sample_byte_size[] 
     * table. This reduces the memory consumption by a factor of 2 or even 
     * more.  Only access sample_to_chunk[] if new data is required.  zero-terminate the lookup table DEBUGF("(stbl) unknown chunk id: %c%c%c%c\n",
                   SPLITFOURCC(sub_chunk_id)); Check for smhd, only kind of minf we care about  now skip the rest of the atom DEBUGF("(minf) unknown chunk id: %c%c%c%c\n",
                   SPLITFOURCC(sub_chunk_id));DEBUGF("(mdia) unknown chunk id: %c%c%c%c\n",
                   SPLITFOURCC(sub_chunk_id)); 'trak' - a movie track - contains other atoms DEBUGF("(trak) unknown chunk id: %c%c%c%c\n",
                    SPLITFOURCC(sub_chunk_id)); 'moov' movie atom - contains other atoms DEBUGF("(moov) unknown chunk id: %c%c%c%c\n",
                    SPLITFOURCC(sub_chunk_id)); construct the stream  read the chunks DEBUGF("need 64bit support\n");DEBUGF("Found a chunk %c%c%c%c, length=%d\n",SPLITFOURCC(chunk_id),chunk_len); There can be empty mdats before the real one. If so, skip them  If we've already seen the format, assume there's nothing
               interesting after the mdat chunk (the file is "streamable").
               This avoids having to seek, which might cause rebuffering.   these following atoms can be skipped !!!! DEBUGF("(top) unknown chunk id: %c%c%c%c\n",SPLITFOURCC(chunk_id));
 * ALAC (Apple Lossless Audio Codec) decoder
 * Copyright (c) 2005 David Hammerton
 * All rights reserved.
 *
 * This is the quicktime container demuxer.
 *
 * http://crazney.net/programs/itunes/alac.html
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
  chunk handlers  minor_ver =  compatible brands  unused fourcc_t cbrand = The following function is based on mp4ff  version and flags  get and verify ES_DescrTag  read length  skip 3 bytes  skip 2 bytes  get and verify DecoderConfigDescrTab  read length  audioType =  temp = 0x15000414 ???? maxBitrate =  avgBitrate =  get and verify DecSpecificInfoTag  read length  will skip the remainder of the atom  version  flags  if (numentries != 1)
    {
        DEBUGF("only expecting one entry in sample description atom!\n");
        return false;
    }  sound info:  reserved + data reference index + sound version + reserved  packet size  reserved size  remaining is codec data  12 = audio format atom, 8 = padding  audio format atom  The ALAC decoder skips these bytes, so there is no need to store them,
             and this code isn't endian/alignment safe  Skip "filler" atom  version  flags  version  flags  default sample size  version + flags  version + flags  read first offset  Build up lookup table. The lookup table contains the sample index and
     * byte position in the file for each chunk. This table is used to seek
     * and resume (see m4a_seek() and m4a_seek_raw() in libm4a/m4a.c) and 
     * to skip empty chunks (see m4a_check_sample_offset() in codecs/aac.c and
     * libm4a/m4a.c).
     * The seek/resume precision is lower than using sample_byte_size[] and 
     * depends on numentries. Typically the resolution is ~1/10 of all frames
     * which equals about 1/4-1/2 seconds. The loss of seek precision is 
     * accepted to be able to avoid allocation of the large sample_byte_size[] 
     * table. This reduces the memory consumption by a factor of 2 or even 
     * more.  Only access sample_to_chunk[] if new data is required.  zero-terminate the lookup table DEBUGF("(stbl) unknown chunk id: %c%c%c%c\n",
                   SPLITFOURCC(sub_chunk_id)); Check for smhd, only kind of minf we care about  now skip the rest of the atom DEBUGF("(minf) unknown chunk id: %c%c%c%c\n",
                   SPLITFOURCC(sub_chunk_id));DEBUGF("(mdia) unknown chunk id: %c%c%c%c\n",
                   SPLITFOURCC(sub_chunk_id)); 'trak' - a movie track - contains other atoms DEBUGF("(trak) unknown chunk id: %c%c%c%c\n",
                    SPLITFOURCC(sub_chunk_id)); 'moov' movie atom - contains other atoms DEBUGF("(moov) unknown chunk id: %c%c%c%c\n",
                    SPLITFOURCC(sub_chunk_id)); construct the stream  read the chunks DEBUGF("need 64bit support\n");DEBUGF("Found a chunk %c%c%c%c, length=%d\n",SPLITFOURCC(chunk_id),chunk_len); There can be empty mdats before the real one. If so, skip them  If we've already seen the format, assume there's nothing
               interesting after the mdat chunk (the file is "streamable").
               This avoids having to seek, which might cause rebuffering.   these following atoms can be skipped !!!! DEBUGF("(top) unknown chunk id: %c%c%c%c\n",SPLITFOURCC(chunk_id));
 * ALAC (Apple Lossless Audio Codec) decoder
 * Copyright (c) 2005 David Hammerton
 * All rights reserved.
 *
 * This is the quicktime container demuxer.
 *
 * http://crazney.net/programs/itunes/alac.html
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
  chunk handlers  minor_ver =  compatible brands  unused fourcc_t cbrand = The following function is based on mp4ff  version and flags  get and verify ES_DescrTag  read length  skip 3 bytes  skip 2 bytes  get and verify DecoderConfigDescrTab  read length  audioType =  temp = 0x15000414 ???? maxBitrate =  avgBitrate =  get and verify DecSpecificInfoTag  read length  will skip the remainder of the atom  version  flags  if (numentries != 1)
    {
        DEBUGF("only expecting one entry in sample description atom!\n");
        return false;
    }  sound info:  reserved + data reference index + sound version + reserved  packet size  reserved size  remaining is codec data  12 = audio format atom, 8 = padding  audio format atom  The ALAC decoder skips these bytes, so there is no need to store them,
             and this code isn't endian/alignment safe  Skip "filler" atom  version  flags  version  flags  default sample size  version + flags  version + flags  read first offset  Build up lookup table. The lookup table contains the sample index and
     * byte position in the file for each chunk. This table is used to seek
     * and resume (see m4a_seek() and m4a_seek_raw() in libm4a/m4a.c) and 
     * to skip empty chunks (see m4a_check_sample_offset() in codecs/aac.c and
     * libm4a/m4a.c).
     * The seek/resume precision is lower than using sample_byte_size[] and 
     * depends on numentries. Typically the resolution is ~1/10 of all frames
     * which equals about 1/4-1/2 seconds. The loss of seek precision is 
     * accepted to be able to avoid allocation of the large sample_byte_size[] 
     * table. This reduces the memory consumption by a factor of 2 or even 
     * more.  Only access sample_to_chunk[] if new data is required.  zero-terminate the lookup table DEBUGF("(stbl) unknown chunk id: %c%c%c%c\n",
                   SPLITFOURCC(sub_chunk_id)); Check for smhd, only kind of minf we care about  now skip the rest of the atom DEBUGF("(minf) unknown chunk id: %c%c%c%c\n",
                   SPLITFOURCC(sub_chunk_id));DEBUGF("(mdia) unknown chunk id: %c%c%c%c\n",
                   SPLITFOURCC(sub_chunk_id)); 'trak' - a movie track - contains other atoms DEBUGF("(trak) unknown chunk id: %c%c%c%c\n",
                    SPLITFOURCC(sub_chunk_id)); 'moov' movie atom - contains other atoms DEBUGF("(moov) unknown chunk id: %c%c%c%c\n",
                    SPLITFOURCC(sub_chunk_id)); construct the stream  read the chunks DEBUGF("need 64bit support\n");DEBUGF("Found a chunk %c%c%c%c, length=%d\n",SPLITFOURCC(chunk_id),chunk_len); There can be empty mdats before the real one. If so, skip them  If we've already seen the format, assume there's nothing
               interesting after the mdat chunk (the file is "streamable").
               This avoids having to seek, which might cause rebuffering.   these following atoms can be skipped !!!! DEBUGF("(top) unknown chunk id: %c%c%c%c\n",SPLITFOURCC(chunk_id));