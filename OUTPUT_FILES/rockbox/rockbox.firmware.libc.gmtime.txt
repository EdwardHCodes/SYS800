**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2017 by Michael Sevakis
 *
 * Copyright (C) 2012 by Bertrik Sikken
 *
 * Based on code from: rtc_as3514.c
 * Copyright (C) 2007 by Barry Wardell
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Constants that mark Thursday, 1 January 1970  Last day number it can do  d is days since epoch start, Monday, 1 January 1601 (d = 0)
 *
 * That date is the beginning of a full 400 year cycle and so simplifies the
 * calculations a bit, not requiring offsets before divisions to shift the
 * leap year cycle.
 *
 * It can handle dates up through Sunday, 31 December 3111 (d = 551879).
 *
 * time_t can't get near the limits anyway for now but algorithm can be
 * altered slightly to increase range if even needed.
  year day of 1st of month (non-leap)
      +31  +28  +31  +30  +31  +30  +31  +31  +30  +31  +30  +31  +31  scratch variables  calculate year from day number  year - 1900  calculate year day from year number and day number  0..364/365  check if leap year; adjust February->March transition if so rather
       than keeping a leap year version of mon_yday[]  retard month lookup to make year day 59 into 29 Feb, both to make
           year day 60 into 01 March, lagging one day for remainder of year  stab approximately at current month based on year day; advance if
       it fell short (never initially more than 1 short).  0..11  1..31  0..6  day number (-24856..24855)  second # of day (0..86399)  round towards 0 -> floored division  0..23  0..59  0..59  not implemented right now **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2017 by Michael Sevakis
 *
 * Copyright (C) 2012 by Bertrik Sikken
 *
 * Based on code from: rtc_as3514.c
 * Copyright (C) 2007 by Barry Wardell
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Constants that mark Thursday, 1 January 1970  Last day number it can do  d is days since epoch start, Monday, 1 January 1601 (d = 0)
 *
 * That date is the beginning of a full 400 year cycle and so simplifies the
 * calculations a bit, not requiring offsets before divisions to shift the
 * leap year cycle.
 *
 * It can handle dates up through Sunday, 31 December 3111 (d = 551879).
 *
 * time_t can't get near the limits anyway for now but algorithm can be
 * altered slightly to increase range if even needed.
  year day of 1st of month (non-leap)
      +31  +28  +31  +30  +31  +30  +31  +31  +30  +31  +30  +31  +31  scratch variables  calculate year from day number  year - 1900  calculate year day from year number and day number  0..364/365  check if leap year; adjust February->March transition if so rather
       than keeping a leap year version of mon_yday[]  retard month lookup to make year day 59 into 29 Feb, both to make
           year day 60 into 01 March, lagging one day for remainder of year  stab approximately at current month based on year day; advance if
       it fell short (never initially more than 1 short).  0..11  1..31  0..6  day number (-24856..24855)  second # of day (0..86399)  round towards 0 -> floored division  0..23  0..59  0..59  not implemented right now **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2017 by Michael Sevakis
 *
 * Copyright (C) 2012 by Bertrik Sikken
 *
 * Based on code from: rtc_as3514.c
 * Copyright (C) 2007 by Barry Wardell
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Constants that mark Thursday, 1 January 1970  Last day number it can do  d is days since epoch start, Monday, 1 January 1601 (d = 0)
 *
 * That date is the beginning of a full 400 year cycle and so simplifies the
 * calculations a bit, not requiring offsets before divisions to shift the
 * leap year cycle.
 *
 * It can handle dates up through Sunday, 31 December 3111 (d = 551879).
 *
 * time_t can't get near the limits anyway for now but algorithm can be
 * altered slightly to increase range if even needed.
  year day of 1st of month (non-leap)
      +31  +28  +31  +30  +31  +30  +31  +31  +30  +31  +30  +31  +31  scratch variables  calculate year from day number  year - 1900  calculate year day from year number and day number  0..364/365  check if leap year; adjust February->March transition if so rather
       than keeping a leap year version of mon_yday[]  retard month lookup to make year day 59 into 29 Feb, both to make
           year day 60 into 01 March, lagging one day for remainder of year  stab approximately at current month based on year day; advance if
       it fell short (never initially more than 1 short).  0..11  1..31  0..6  day number (-24856..24855)  second # of day (0..86399)  round towards 0 -> floored division  0..23  0..59  0..59  not implemented right now 