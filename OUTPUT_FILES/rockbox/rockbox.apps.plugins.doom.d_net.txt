 Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *    Network client. Passes information to/from server, staying
 *    synchronised.
 *    Contains the main wait loop, waiting for network input or
 *    time before doing the next tic.
 *    Rewritten for LxDoom, but based around bits of the old code.
 *
 *-----------------------------------------------------------------------------
  kill game Tic expected from the remote Tic expected by the remote NETWORKING gametic is the tic about to (or currently being) run maketic is the tick that hasn't had control made for it yet nettics[] has the maketics for all players a gametic cannot be run until nettics[] > gametic for all players TryRunTics Wait for tics to run         if (server) I_WaitForPacket(ms_to_next_tick);         else I_uSleep(ms_to_next_tick*1000);         rb->sleep(ms_to_next_tick);            {               char buf[sizeof(packet_header_t)+1];               packet_set((packet_header_t *)buf, PKT_RETRANS, remotetic);               buf[sizeof(buf)-1] = consoleplayer;               I_SendPacket((packet_header_t *)buf, sizeof buf);            } Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *    Network client. Passes information to/from server, staying
 *    synchronised.
 *    Contains the main wait loop, waiting for network input or
 *    time before doing the next tic.
 *    Rewritten for LxDoom, but based around bits of the old code.
 *
 *-----------------------------------------------------------------------------
  kill game Tic expected from the remote Tic expected by the remote NETWORKING gametic is the tic about to (or currently being) run maketic is the tick that hasn't had control made for it yet nettics[] has the maketics for all players a gametic cannot be run until nettics[] > gametic for all players TryRunTics Wait for tics to run         if (server) I_WaitForPacket(ms_to_next_tick);         else I_uSleep(ms_to_next_tick*1000);         rb->sleep(ms_to_next_tick);            {               char buf[sizeof(packet_header_t)+1];               packet_set((packet_header_t *)buf, PKT_RETRANS, remotetic);               buf[sizeof(buf)-1] = consoleplayer;               I_SendPacket((packet_header_t *)buf, sizeof buf);            } Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *    Network client. Passes information to/from server, staying
 *    synchronised.
 *    Contains the main wait loop, waiting for network input or
 *    time before doing the next tic.
 *    Rewritten for LxDoom, but based around bits of the old code.
 *
 *-----------------------------------------------------------------------------
  kill game Tic expected from the remote Tic expected by the remote NETWORKING gametic is the tic about to (or currently being) run maketic is the tick that hasn't had control made for it yet nettics[] has the maketics for all players a gametic cannot be run until nettics[] > gametic for all players TryRunTics Wait for tics to run         if (server) I_WaitForPacket(ms_to_next_tick);         else I_uSleep(ms_to_next_tick*1000);         rb->sleep(ms_to_next_tick);            {               char buf[sizeof(packet_header_t)+1];               packet_set((packet_header_t *)buf, PKT_RETRANS, remotetic);               buf[sizeof(buf)-1] = consoleplayer;               I_SendPacket((packet_header_t *)buf, sizeof buf);            }