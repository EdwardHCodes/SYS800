**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Cache: LRU cache with separately-chained hashtable
 *
 * Each entry of the map is the mapped location of the hashed sector value
 * where each bit in each map entry indicates which corresponding cache
 * entries are occupied by sector values that collide in that map entry.
 *
 * Each volume is given its own bit map.
 *
 * To probe for a specific key, each bit in the map entry must be examined,
 * its position used as an index into the cache_entry array and the actual
 * sector information compared for that cache entry. If the search exhausts
 * all bits, the sector is not cached.
 *
 * To avoid long chains, the map entry count should be much greater than the
 * number of cache entries. Since the cache is an LRU design, no buffer entry
 * in the array is intrinsically associated with any particular sector number
 * or volume.
 *
 * Example 6-sector cache with 8-entry map:
 * cache entry 543210
 * cache map   100000 <- sector number hashes into map
 *             000000
 *             000100
 *             000000
 *             010000
 *             000000
 *             001001 <- collision
 *             000000
 * volume map  111101 <- entry usage by the volume (OR of all map entries)
  flags for each cache entry  entry in use and valid  entry is dirty in need of writeback  entry is being used as a general buffer  LRU list links  entry flags  volume of sector  cached disk sector number  keep sector hash simple for now  LRU cache list (head = LRU item)  get the cache index from a pointer to a buffer  set the in-use bit in the map  clear the in-use bit in the map  make entry MRU by moving it to the list tail  already MRU  is the LRU? just rotate list  somewhere else; move it  remove LRU entry from the cache list to use as a buffer  at least one is reserved for client  remove it; next-LRU becomes the LRU  return entry to the cache list and set it LRU  discard the entry's data and mark it unused  search the cache for the specified sector, returning a buffer, either
   to the specified sector, if it exists, or a new/evicted entry that must
   be filled  sector not found so the LRU is the victim  mark in-use cache entry as dirty by buffer  dirt remains, sticky until flushed  discard in-use cache entry by buffer  commit all dirty cache entries to storage for a specified volume  discard all cache entries from the specified volume  expropriate a buffer from the cache  must first commit this sector if dirty  cache is out of buffers  return buffer to the cache by buffer  one-time init at startup **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Cache: LRU cache with separately-chained hashtable
 *
 * Each entry of the map is the mapped location of the hashed sector value
 * where each bit in each map entry indicates which corresponding cache
 * entries are occupied by sector values that collide in that map entry.
 *
 * Each volume is given its own bit map.
 *
 * To probe for a specific key, each bit in the map entry must be examined,
 * its position used as an index into the cache_entry array and the actual
 * sector information compared for that cache entry. If the search exhausts
 * all bits, the sector is not cached.
 *
 * To avoid long chains, the map entry count should be much greater than the
 * number of cache entries. Since the cache is an LRU design, no buffer entry
 * in the array is intrinsically associated with any particular sector number
 * or volume.
 *
 * Example 6-sector cache with 8-entry map:
 * cache entry 543210
 * cache map   100000 <- sector number hashes into map
 *             000000
 *             000100
 *             000000
 *             010000
 *             000000
 *             001001 <- collision
 *             000000
 * volume map  111101 <- entry usage by the volume (OR of all map entries)
  flags for each cache entry  entry in use and valid  entry is dirty in need of writeback  entry is being used as a general buffer  LRU list links  entry flags  volume of sector  cached disk sector number  keep sector hash simple for now  LRU cache list (head = LRU item)  get the cache index from a pointer to a buffer  set the in-use bit in the map  clear the in-use bit in the map  make entry MRU by moving it to the list tail  already MRU  is the LRU? just rotate list  somewhere else; move it  remove LRU entry from the cache list to use as a buffer  at least one is reserved for client  remove it; next-LRU becomes the LRU  return entry to the cache list and set it LRU  discard the entry's data and mark it unused  search the cache for the specified sector, returning a buffer, either
   to the specified sector, if it exists, or a new/evicted entry that must
   be filled  sector not found so the LRU is the victim  mark in-use cache entry as dirty by buffer  dirt remains, sticky until flushed  discard in-use cache entry by buffer  commit all dirty cache entries to storage for a specified volume  discard all cache entries from the specified volume  expropriate a buffer from the cache  must first commit this sector if dirty  cache is out of buffers  return buffer to the cache by buffer  one-time init at startup **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2014 by Michael Sevakis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** Cache: LRU cache with separately-chained hashtable
 *
 * Each entry of the map is the mapped location of the hashed sector value
 * where each bit in each map entry indicates which corresponding cache
 * entries are occupied by sector values that collide in that map entry.
 *
 * Each volume is given its own bit map.
 *
 * To probe for a specific key, each bit in the map entry must be examined,
 * its position used as an index into the cache_entry array and the actual
 * sector information compared for that cache entry. If the search exhausts
 * all bits, the sector is not cached.
 *
 * To avoid long chains, the map entry count should be much greater than the
 * number of cache entries. Since the cache is an LRU design, no buffer entry
 * in the array is intrinsically associated with any particular sector number
 * or volume.
 *
 * Example 6-sector cache with 8-entry map:
 * cache entry 543210
 * cache map   100000 <- sector number hashes into map
 *             000000
 *             000100
 *             000000
 *             010000
 *             000000
 *             001001 <- collision
 *             000000
 * volume map  111101 <- entry usage by the volume (OR of all map entries)
  flags for each cache entry  entry in use and valid  entry is dirty in need of writeback  entry is being used as a general buffer  LRU list links  entry flags  volume of sector  cached disk sector number  keep sector hash simple for now  LRU cache list (head = LRU item)  get the cache index from a pointer to a buffer  set the in-use bit in the map  clear the in-use bit in the map  make entry MRU by moving it to the list tail  already MRU  is the LRU? just rotate list  somewhere else; move it  remove LRU entry from the cache list to use as a buffer  at least one is reserved for client  remove it; next-LRU becomes the LRU  return entry to the cache list and set it LRU  discard the entry's data and mark it unused  search the cache for the specified sector, returning a buffer, either
   to the specified sector, if it exists, or a new/evicted entry that must
   be filled  sector not found so the LRU is the victim  mark in-use cache entry as dirty by buffer  dirt remains, sticky until flushed  discard in-use cache entry by buffer  commit all dirty cache entries to storage for a specified volume  discard all cache entries from the specified volume  expropriate a buffer from the cache  must first commit this sector if dirty  cache is out of buffers  return buffer to the cache by buffer  one-time init at startup 