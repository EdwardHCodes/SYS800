
 * unequal.c
 *
 * Implementation of 'Futoshiki', a puzzle featured in the Guardian.
 *
 * TTD:
   * add multiple-links-on-same-col/row solver nous
   * Optimise set solver to use bit operations instead
 *
 * Guardian puzzles of note:
   * #1: 5:0,0L,0L,0,0,0R,0,0L,0D,0L,0R,0,2,0D,0,0,0,0,0,0,0U,0,0,0,0U,
   * #2: 5:0,0,0,4L,0L,0,2LU,0L,0U,0,0,0U,0,0,0,0,0D,0,3LRUD,0,0R,3,0L,0,0,
   * #3: (reprint of #2)
   * #4: 
   * #5: 5:0,0,0,0,0,0,2,0U,3U,0U,0,0,3,0,0,0,3,0D,4,0,0,0L,0R,0,0,
   * #6: 5:0D,0L,0,0R,0,0,0D,0,3,0D,0,0R,0,0R,0D,0U,0L,0,1,2,0,0,0U,0,0L,
  contains typedef for digit  ----------------------------------------------------------
 * Constant and structure definitions
  Puzzle indicators are 'greater-than'.  Puzzle indicators are 'adjacent number'.  Size of latin square  Difficulty  passed in as game description  actual numbers (size order^2)  remaining possiblities (size order^3)  flags (size order^2)  ----------------------------------------------------------
 * Game parameters and presets
  Steal the method from map.c for difficulty levels.  structure copy  structure copy  ...which is invalid  ----------------------------------------------------------
 * Various utility functions
  Returns false if it finds an error, true if ok.  Returns false if it finds an error, true if ok.  check for dups in same column.  check for dups in same row.  Returns:     -1 for 'wrong'
 *               0 for 'incomplete'
 *               1 for 'complete and correct'
  should be 'digit', but includes -1 for 'not a digit'.
 * Includes keypresses (0 especially) for interpret_move.  ----------------------------------------------------------
 * Solver.
 debug(("resizing ctx->links, new size %d", ctx->alinks));debug(("Adding new link: len %d (%d,%d) < (%d,%d), nlinks now %d",
           len, lx, ly, gx, gy, ctx->nlinks)); adjacent mode doesn't use links.  For the 'greater' end of the link, discount all numbers
             * too small to satisfy the inequality.  For the 'lesser' end of the link, discount all numbers
             * too large to satisfy inequality.  Update possible values based on known values and adjacency clues.  We have a definite number here. Make sure that any
             * adjacent possibles reflect the adjacent/non-adjacent clue.  Continue past numbers the adjacent square _could_ be,
                     * given the clue we have.  already discounted this possibility.  Update possible values based on other possible values
     * of adjacent squares, and adjacency clues.  We know the current possibles for the square (x,y)
                 * and also the adjacency clue from (x,y) to (nx,ny).
                 * Construct a maximum set of possibles for (nx,ny)
                 * in scratch, based on these constraints...  ...and remove any possibilities for (nx,ny) that are
                 * currently set but are not indicated in scratch.  ----------------------------------------------------------
 * Game generation.
  returns true if it placed (or could have placed) clue.  add number  add flag  never add flag clues in adjacent mode
                             (they're always all present)  already has flag.  flag compares to off grid  flag would be incorrect  returns true if it removed (or could have removed) the clue.  remove number.  remove flag  never remove clues in adjacent mode.  if we didn't solve, we must have 1 clue to place!  We mustn't use any solver that might guess answers;
         * if it guesses wrongly but solves, gg_place_clue will
         * get mighty confused. We will always trim clues down
         * (making it more difficult) in game_strip, which doesn't
         * have this problem.  For each symbol (if it exists in new), try and remove it and
     * solve again; if we couldn't solve without it put it back.  put clue back, we can't solve without it.  All clues in adjacent mode are always present (the only variables are
     * the numbers). This adds all the flags to state based on the supplied
     * latin square.  structure copy  Generate a list of 'things to strip' (randomised later)  Put the numbers (4 mod 5) before the inequalities (0-3 mod 5)  Separately shuffle the numeric and inequality clues  All adjacency flags are always present.  skip number  === number set by game description  a flag must not point us off the grid.  if one cell is adjacent to another, the other must
                         * also be adjacent to the first.  if one cell is GT another, the other must _not_ also
                         * be GT the first.  always use full solver  ----------------------------------------------------------
 * Game UI input processing.
  as for solo.c, highlight pos  show state, type, and ?cursor.  See solo.c; if we were pencil-mode highlighting and
     * somehow a square has just been properly filled, cancel
     * pencil mode.  copy of nums, o^2  copy of hints, o^3  o^2  as for game_ui.  normal highlighting for non-immutable squares  pencil highlighting for non-filled squares  invalid direction, i.e. out of
                                   * the board  no clue to toggle  can't edit immutable square (!)  can't change hints on filled square (!)  real change to grid; check for completion  ----------------------------------------------------------------------
 * Drawing/printing routines.
  Ick: fake up `ds->tilesize' for macro expansion purposes  Lots of these were taken from solo.c.  Draw all the greater-than signs emanating from this tile.  Draw all the adjacency bars relevant to this tile; we only have
     * to worry about F_ADJ_RIGHT and F_ADJ_DOWN.
     *
     * If we _only_ have the error flag set (i.e. it's not supposed to be
     * adjacent, but adjacent numbers were entered) draw an outline red bar.
      Clear square.  Draw the highlight (pencil or full), if we're the highlight  Draw the square outline (which is the cursor, if we're the cursor).  Draw the adjacent clue signs.  (can assume square has just been cleared)  Draw number, choosing appropriate colour  (can assume square has just been cleared)  Draw hints; steal ingenious algorithm (basically)
     * from solo.c:draw_number()  We're not a number square (therefore we might
                 * display hints); do we need to update?  10mm squares by default, roughly the same as Grauniad.  Ick: fake up `ds->tilesize' for macro expansion purposes  Squares, numbers, gt signs  ----------------------------------------------------------------------
 * Housekeeping.
  wants_statusbar  flags  ----------------------------------------------------------------------
 * Standalone solver.
  currently unused  vim: set shiftwidth=4 tabstop=8: 
 * unequal.c
 *
 * Implementation of 'Futoshiki', a puzzle featured in the Guardian.
 *
 * TTD:
   * add multiple-links-on-same-col/row solver nous
   * Optimise set solver to use bit operations instead
 *
 * Guardian puzzles of note:
   * #1: 5:0,0L,0L,0,0,0R,0,0L,0D,0L,0R,0,2,0D,0,0,0,0,0,0,0U,0,0,0,0U,
   * #2: 5:0,0,0,4L,0L,0,2LU,0L,0U,0,0,0U,0,0,0,0,0D,0,3LRUD,0,0R,3,0L,0,0,
   * #3: (reprint of #2)
   * #4: 
   * #5: 5:0,0,0,0,0,0,2,0U,3U,0U,0,0,3,0,0,0,3,0D,4,0,0,0L,0R,0,0,
   * #6: 5:0D,0L,0,0R,0,0,0D,0,3,0D,0,0R,0,0R,0D,0U,0L,0,1,2,0,0,0U,0,0L,
  contains typedef for digit  ----------------------------------------------------------
 * Constant and structure definitions
  Puzzle indicators are 'greater-than'.  Puzzle indicators are 'adjacent number'.  Size of latin square  Difficulty  passed in as game description  actual numbers (size order^2)  remaining possiblities (size order^3)  flags (size order^2)  ----------------------------------------------------------
 * Game parameters and presets
  Steal the method from map.c for difficulty levels.  structure copy  structure copy  ...which is invalid  ----------------------------------------------------------
 * Various utility functions
  Returns false if it finds an error, true if ok.  Returns false if it finds an error, true if ok.  check for dups in same column.  check for dups in same row.  Returns:     -1 for 'wrong'
 *               0 for 'incomplete'
 *               1 for 'complete and correct'
  should be 'digit', but includes -1 for 'not a digit'.
 * Includes keypresses (0 especially) for interpret_move.  ----------------------------------------------------------
 * Solver.
 debug(("resizing ctx->links, new size %d", ctx->alinks));debug(("Adding new link: len %d (%d,%d) < (%d,%d), nlinks now %d",
           len, lx, ly, gx, gy, ctx->nlinks)); adjacent mode doesn't use links.  For the 'greater' end of the link, discount all numbers
             * too small to satisfy the inequality.  For the 'lesser' end of the link, discount all numbers
             * too large to satisfy inequality.  Update possible values based on known values and adjacency clues.  We have a definite number here. Make sure that any
             * adjacent possibles reflect the adjacent/non-adjacent clue.  Continue past numbers the adjacent square _could_ be,
                     * given the clue we have.  already discounted this possibility.  Update possible values based on other possible values
     * of adjacent squares, and adjacency clues.  We know the current possibles for the square (x,y)
                 * and also the adjacency clue from (x,y) to (nx,ny).
                 * Construct a maximum set of possibles for (nx,ny)
                 * in scratch, based on these constraints...  ...and remove any possibilities for (nx,ny) that are
                 * currently set but are not indicated in scratch.  ----------------------------------------------------------
 * Game generation.
  returns true if it placed (or could have placed) clue.  add number  add flag  never add flag clues in adjacent mode
                             (they're always all present)  already has flag.  flag compares to off grid  flag would be incorrect  returns true if it removed (or could have removed) the clue.  remove number.  remove flag  never remove clues in adjacent mode.  if we didn't solve, we must have 1 clue to place!  We mustn't use any solver that might guess answers;
         * if it guesses wrongly but solves, gg_place_clue will
         * get mighty confused. We will always trim clues down
         * (making it more difficult) in game_strip, which doesn't
         * have this problem.  For each symbol (if it exists in new), try and remove it and
     * solve again; if we couldn't solve without it put it back.  put clue back, we can't solve without it.  All clues in adjacent mode are always present (the only variables are
     * the numbers). This adds all the flags to state based on the supplied
     * latin square.  structure copy  Generate a list of 'things to strip' (randomised later)  Put the numbers (4 mod 5) before the inequalities (0-3 mod 5)  Separately shuffle the numeric and inequality clues  All adjacency flags are always present.  skip number  === number set by game description  a flag must not point us off the grid.  if one cell is adjacent to another, the other must
                         * also be adjacent to the first.  if one cell is GT another, the other must _not_ also
                         * be GT the first.  always use full solver  ----------------------------------------------------------
 * Game UI input processing.
  as for solo.c, highlight pos  show state, type, and ?cursor.  See solo.c; if we were pencil-mode highlighting and
     * somehow a square has just been properly filled, cancel
     * pencil mode.  copy of nums, o^2  copy of hints, o^3  o^2  as for game_ui.  normal highlighting for non-immutable squares  pencil highlighting for non-filled squares  invalid direction, i.e. out of
                                   * the board  no clue to toggle  can't edit immutable square (!)  can't change hints on filled square (!)  real change to grid; check for completion  ----------------------------------------------------------------------
 * Drawing/printing routines.
  Ick: fake up `ds->tilesize' for macro expansion purposes  Lots of these were taken from solo.c.  Draw all the greater-than signs emanating from this tile.  Draw all the adjacency bars relevant to this tile; we only have
     * to worry about F_ADJ_RIGHT and F_ADJ_DOWN.
     *
     * If we _only_ have the error flag set (i.e. it's not supposed to be
     * adjacent, but adjacent numbers were entered) draw an outline red bar.
      Clear square.  Draw the highlight (pencil or full), if we're the highlight  Draw the square outline (which is the cursor, if we're the cursor).  Draw the adjacent clue signs.  (can assume square has just been cleared)  Draw number, choosing appropriate colour  (can assume square has just been cleared)  Draw hints; steal ingenious algorithm (basically)
     * from solo.c:draw_number()  We're not a number square (therefore we might
                 * display hints); do we need to update?  10mm squares by default, roughly the same as Grauniad.  Ick: fake up `ds->tilesize' for macro expansion purposes  Squares, numbers, gt signs  ----------------------------------------------------------------------
 * Housekeeping.
  wants_statusbar  flags  ----------------------------------------------------------------------
 * Standalone solver.
  currently unused  vim: set shiftwidth=4 tabstop=8: 
 * unequal.c
 *
 * Implementation of 'Futoshiki', a puzzle featured in the Guardian.
 *
 * TTD:
   * add multiple-links-on-same-col/row solver nous
   * Optimise set solver to use bit operations instead
 *
 * Guardian puzzles of note:
   * #1: 5:0,0L,0L,0,0,0R,0,0L,0D,0L,0R,0,2,0D,0,0,0,0,0,0,0U,0,0,0,0U,
   * #2: 5:0,0,0,4L,0L,0,2LU,0L,0U,0,0,0U,0,0,0,0,0D,0,3LRUD,0,0R,3,0L,0,0,
   * #3: (reprint of #2)
   * #4: 
   * #5: 5:0,0,0,0,0,0,2,0U,3U,0U,0,0,3,0,0,0,3,0D,4,0,0,0L,0R,0,0,
   * #6: 5:0D,0L,0,0R,0,0,0D,0,3,0D,0,0R,0,0R,0D,0U,0L,0,1,2,0,0,0U,0,0L,
  contains typedef for digit  ----------------------------------------------------------
 * Constant and structure definitions
  Puzzle indicators are 'greater-than'.  Puzzle indicators are 'adjacent number'.  Size of latin square  Difficulty  passed in as game description  actual numbers (size order^2)  remaining possiblities (size order^3)  flags (size order^2)  ----------------------------------------------------------
 * Game parameters and presets
  Steal the method from map.c for difficulty levels.  structure copy  structure copy  ...which is invalid  ----------------------------------------------------------
 * Various utility functions
  Returns false if it finds an error, true if ok.  Returns false if it finds an error, true if ok.  check for dups in same column.  check for dups in same row.  Returns:     -1 for 'wrong'
 *               0 for 'incomplete'
 *               1 for 'complete and correct'
  should be 'digit', but includes -1 for 'not a digit'.
 * Includes keypresses (0 especially) for interpret_move.  ----------------------------------------------------------
 * Solver.
 debug(("resizing ctx->links, new size %d", ctx->alinks));debug(("Adding new link: len %d (%d,%d) < (%d,%d), nlinks now %d",
           len, lx, ly, gx, gy, ctx->nlinks)); adjacent mode doesn't use links.  For the 'greater' end of the link, discount all numbers
             * too small to satisfy the inequality.  For the 'lesser' end of the link, discount all numbers
             * too large to satisfy inequality.  Update possible values based on known values and adjacency clues.  We have a definite number here. Make sure that any
             * adjacent possibles reflect the adjacent/non-adjacent clue.  Continue past numbers the adjacent square _could_ be,
                     * given the clue we have.  already discounted this possibility.  Update possible values based on other possible values
     * of adjacent squares, and adjacency clues.  We know the current possibles for the square (x,y)
                 * and also the adjacency clue from (x,y) to (nx,ny).
                 * Construct a maximum set of possibles for (nx,ny)
                 * in scratch, based on these constraints...  ...and remove any possibilities for (nx,ny) that are
                 * currently set but are not indicated in scratch.  ----------------------------------------------------------
 * Game generation.
  returns true if it placed (or could have placed) clue.  add number  add flag  never add flag clues in adjacent mode
                             (they're always all present)  already has flag.  flag compares to off grid  flag would be incorrect  returns true if it removed (or could have removed) the clue.  remove number.  remove flag  never remove clues in adjacent mode.  if we didn't solve, we must have 1 clue to place!  We mustn't use any solver that might guess answers;
         * if it guesses wrongly but solves, gg_place_clue will
         * get mighty confused. We will always trim clues down
         * (making it more difficult) in game_strip, which doesn't
         * have this problem.  For each symbol (if it exists in new), try and remove it and
     * solve again; if we couldn't solve without it put it back.  put clue back, we can't solve without it.  All clues in adjacent mode are always present (the only variables are
     * the numbers). This adds all the flags to state based on the supplied
     * latin square.  structure copy  Generate a list of 'things to strip' (randomised later)  Put the numbers (4 mod 5) before the inequalities (0-3 mod 5)  Separately shuffle the numeric and inequality clues  All adjacency flags are always present.  skip number  === number set by game description  a flag must not point us off the grid.  if one cell is adjacent to another, the other must
                         * also be adjacent to the first.  if one cell is GT another, the other must _not_ also
                         * be GT the first.  always use full solver  ----------------------------------------------------------
 * Game UI input processing.
  as for solo.c, highlight pos  show state, type, and ?cursor.  See solo.c; if we were pencil-mode highlighting and
     * somehow a square has just been properly filled, cancel
     * pencil mode.  copy of nums, o^2  copy of hints, o^3  o^2  as for game_ui.  normal highlighting for non-immutable squares  pencil highlighting for non-filled squares  invalid direction, i.e. out of
                                   * the board  no clue to toggle  can't edit immutable square (!)  can't change hints on filled square (!)  real change to grid; check for completion  ----------------------------------------------------------------------
 * Drawing/printing routines.
  Ick: fake up `ds->tilesize' for macro expansion purposes  Lots of these were taken from solo.c.  Draw all the greater-than signs emanating from this tile.  Draw all the adjacency bars relevant to this tile; we only have
     * to worry about F_ADJ_RIGHT and F_ADJ_DOWN.
     *
     * If we _only_ have the error flag set (i.e. it's not supposed to be
     * adjacent, but adjacent numbers were entered) draw an outline red bar.
      Clear square.  Draw the highlight (pencil or full), if we're the highlight  Draw the square outline (which is the cursor, if we're the cursor).  Draw the adjacent clue signs.  (can assume square has just been cleared)  Draw number, choosing appropriate colour  (can assume square has just been cleared)  Draw hints; steal ingenious algorithm (basically)
     * from solo.c:draw_number()  We're not a number square (therefore we might
                 * display hints); do we need to update?  10mm squares by default, roughly the same as Grauniad.  Ick: fake up `ds->tilesize' for macro expansion purposes  Squares, numbers, gt signs  ----------------------------------------------------------------------
 * Housekeeping.
  wants_statusbar  flags  ----------------------------------------------------------------------
 * Standalone solver.
  currently unused  vim: set shiftwidth=4 tabstop=8: 