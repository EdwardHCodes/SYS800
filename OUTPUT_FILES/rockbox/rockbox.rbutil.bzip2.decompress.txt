---------------------------------------------------------------- Decompression machinery                               ------                                          decompress.c ---------------------------------------------------------------- ------------------------------------------------------------------
   This file is part of bzip2/libbzip2, a program and library for
   lossless, block-sorting data compression.

   bzip2/libbzip2 version 1.0.6 of 6 September 2010
   Copyright (C) 1996-2010 Julian Seward <jseward@bzip.org>

   Please read the WARNING, DISCLAIMER and PATENTS sections in the 
   README file.

   This program is released under the terms of the license contained
   in the file LICENSE.
   ------------------------------------------------------------------ --------------------------------------------------------------------------------------------------------------------------------------------------------- the longest code --------------------------------------------------- stuff that needs to be saved/restored initialise the save arearestore from the save area--- Receive the mapping table ------ Now the selectors ------ Undo the MTF values for the selectors. ------ Now the coding tables ------ Create the Huffman decoding tables ------ Now the MTF values ----- MTF init ---- end MTF init -- Check that N doesn't get too big, so that es doesn't
                  go negative.  The maximum value that can be
                  RUNA/RUNB encoded is equal to the block size (post
                  the initial RLE), viz, 900k, so bounding N at 2
                  million should guard against overflow without
                  rejecting any legitimate inputs. -- uc = MTF ( nextSym-1 ) -- avoid general-case expense  general case -- end uc = MTF ( nextSym-1 ) -- Now we know what nblock is, we can do a better sanity
         check on s->origPtr.
      -- Set up cftab to facilitate generation of T^(-1) -- Check: unzftab entries in range.  Actually generate cftab.  Check: cftab entries in range.  s->cftab[i] can legitimately be == nblock  Check: cftab entries non-descending. -- Make a copy of cftab, used in generation of T ---- compute the T vector ---- Compute T^(-1) by pointer reversal on T ---- compute the T^(-1) vector ------------------------------------------------------------------ end                                      decompress.c -------------------------------------------------------------------------------------------------------------------------------- Decompression machinery                               ------                                          decompress.c ---------------------------------------------------------------- ------------------------------------------------------------------
   This file is part of bzip2/libbzip2, a program and library for
   lossless, block-sorting data compression.

   bzip2/libbzip2 version 1.0.6 of 6 September 2010
   Copyright (C) 1996-2010 Julian Seward <jseward@bzip.org>

   Please read the WARNING, DISCLAIMER and PATENTS sections in the 
   README file.

   This program is released under the terms of the license contained
   in the file LICENSE.
   ------------------------------------------------------------------ --------------------------------------------------------------------------------------------------------------------------------------------------------- the longest code --------------------------------------------------- stuff that needs to be saved/restored initialise the save arearestore from the save area--- Receive the mapping table ------ Now the selectors ------ Undo the MTF values for the selectors. ------ Now the coding tables ------ Create the Huffman decoding tables ------ Now the MTF values ----- MTF init ---- end MTF init -- Check that N doesn't get too big, so that es doesn't
                  go negative.  The maximum value that can be
                  RUNA/RUNB encoded is equal to the block size (post
                  the initial RLE), viz, 900k, so bounding N at 2
                  million should guard against overflow without
                  rejecting any legitimate inputs. -- uc = MTF ( nextSym-1 ) -- avoid general-case expense  general case -- end uc = MTF ( nextSym-1 ) -- Now we know what nblock is, we can do a better sanity
         check on s->origPtr.
      -- Set up cftab to facilitate generation of T^(-1) -- Check: unzftab entries in range.  Actually generate cftab.  Check: cftab entries in range.  s->cftab[i] can legitimately be == nblock  Check: cftab entries non-descending. -- Make a copy of cftab, used in generation of T ---- compute the T vector ---- Compute T^(-1) by pointer reversal on T ---- compute the T^(-1) vector ------------------------------------------------------------------ end                                      decompress.c -------------------------------------------------------------------------------------------------------------------------------- Decompression machinery                               ------                                          decompress.c ---------------------------------------------------------------- ------------------------------------------------------------------
   This file is part of bzip2/libbzip2, a program and library for
   lossless, block-sorting data compression.

   bzip2/libbzip2 version 1.0.6 of 6 September 2010
   Copyright (C) 1996-2010 Julian Seward <jseward@bzip.org>

   Please read the WARNING, DISCLAIMER and PATENTS sections in the 
   README file.

   This program is released under the terms of the license contained
   in the file LICENSE.
   ------------------------------------------------------------------ --------------------------------------------------------------------------------------------------------------------------------------------------------- the longest code --------------------------------------------------- stuff that needs to be saved/restored initialise the save arearestore from the save area--- Receive the mapping table ------ Now the selectors ------ Undo the MTF values for the selectors. ------ Now the coding tables ------ Create the Huffman decoding tables ------ Now the MTF values ----- MTF init ---- end MTF init -- Check that N doesn't get too big, so that es doesn't
                  go negative.  The maximum value that can be
                  RUNA/RUNB encoded is equal to the block size (post
                  the initial RLE), viz, 900k, so bounding N at 2
                  million should guard against overflow without
                  rejecting any legitimate inputs. -- uc = MTF ( nextSym-1 ) -- avoid general-case expense  general case -- end uc = MTF ( nextSym-1 ) -- Now we know what nblock is, we can do a better sanity
         check on s->origPtr.
      -- Set up cftab to facilitate generation of T^(-1) -- Check: unzftab entries in range.  Actually generate cftab.  Check: cftab entries in range.  s->cftab[i] can legitimately be == nblock  Check: cftab entries non-descending. -- Make a copy of cftab, used in generation of T ---- compute the T vector ---- Compute T^(-1) by pointer reversal on T ---- compute the T^(-1) vector ------------------------------------------------------------------ end                                      decompress.c ----------------------------------------------------------------