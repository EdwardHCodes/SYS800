******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * Container responsible for discovery and hosting of ICE applications. Its main
 * purpose is enforcement of standard life-cycle of the participating
 * components.
 *
 * Any application that implements IceApplicationProvider interface and complies
 * with java's <a href=
 * "http://docs.oracle.com/javase/7/docs/api/java/util/ServiceLoader.html"
 * >ServiceLoader</a> pattern will be discovered by this container. The
 * application could be either JavaFX UI or headless background thread (but not
 * a console-based green-screen). For the UI apps, it could be either standalone
 * frames or embeddable panels.
 *
 * Regardless of the implementation details, all apps will be started the same
 * way via {@link IceApplicationProvider.IceApp#activate} API, and shut down via
 * call to {@link IceApplicationProvider.IceApp#stop}. It is assumed that the
 * apps could be stateful - i.e when created at the activate of the container
 * they could span thread, keep references to resources as long as they dispose
 * of them properly in the implementation of
 * {@link IceApplicationProvider.IceApp#destroy} API.
 *
 * @see IceApplicationProvider
 *
 *
     * SK - to keep and use for child popup windows
     
    	 * BASICALLY, WE NEED TO STICK SOMETHING ELSE HERE TO HOLD app.getUI()
    	 * AND DISPLAY THAT INSTEAD OF REFERRING TO panelController
    	 System.err.println("appName is "+appName+" with class "+app.getClass().getName());System.err.println("Device app checking appStageMap for "+da.getUID());System.err.println("That does NOT have a stage already");Extra handling required.System.err.println("Consuming the onCloseRequest...");Do not stop DeviceAppsx position, y position, width, heightSystem.err.println("That does have a stage already");
        	 * Seemed to get an NPE here without this !=null, check, but why?
        	 * How is xy null and therefore coordinates.put not been called,
        	 * is stage already exists? 
        	         panelController.content.setCenter(app.getUI());*
     * Utility class to be installed as an action handler on the 'back' button
     * of the main panel to stop the current app and bring the pre-defined
     * 'main' screen back forward.
      TODO make this more elegant*
     * Utility class to wrap the driver object and preset it as a full-fledged
     * participating application. The main purpose is to enable a formal
     * life-cycle for startup and shutdown of the container.
     *
         * A unique identifier to use for separating devices in the "multi device display" era
          continue as there is nothing mich that can be done, but print the error out to the log. Locate all available ice application via the service loader. For documentation refer to http://docs.oracle.com/javase/7/docs/api/java/util/ServiceLoader.html continue as there is nothing mich that can be done, but print the error out to the log. Now that we have a list of all active components, build up a menu and add it to the app Add a wrapper for the driver adapter display. This is so that the stop logic could shut it down properly. this will block until the frame is killed kill the spring context that is owned by this component.******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * Container responsible for discovery and hosting of ICE applications. Its main
 * purpose is enforcement of standard life-cycle of the participating
 * components.
 *
 * Any application that implements IceApplicationProvider interface and complies
 * with java's <a href=
 * "http://docs.oracle.com/javase/7/docs/api/java/util/ServiceLoader.html"
 * >ServiceLoader</a> pattern will be discovered by this container. The
 * application could be either JavaFX UI or headless background thread (but not
 * a console-based green-screen). For the UI apps, it could be either standalone
 * frames or embeddable panels.
 *
 * Regardless of the implementation details, all apps will be started the same
 * way via {@link IceApplicationProvider.IceApp#activate} API, and shut down via
 * call to {@link IceApplicationProvider.IceApp#stop}. It is assumed that the
 * apps could be stateful - i.e when created at the activate of the container
 * they could span thread, keep references to resources as long as they dispose
 * of them properly in the implementation of
 * {@link IceApplicationProvider.IceApp#destroy} API.
 *
 * @see IceApplicationProvider
 *
 *
     * SK - to keep and use for child popup windows
     
    	 * BASICALLY, WE NEED TO STICK SOMETHING ELSE HERE TO HOLD app.getUI()
    	 * AND DISPLAY THAT INSTEAD OF REFERRING TO panelController
    	 System.err.println("appName is "+appName+" with class "+app.getClass().getName());System.err.println("Device app checking appStageMap for "+da.getUID());System.err.println("That does NOT have a stage already");Extra handling required.System.err.println("Consuming the onCloseRequest...");Do not stop DeviceAppsx position, y position, width, heightSystem.err.println("That does have a stage already");
        	 * Seemed to get an NPE here without this !=null, check, but why?
        	 * How is xy null and therefore coordinates.put not been called,
        	 * is stage already exists? 
        	         panelController.content.setCenter(app.getUI());*
     * Utility class to be installed as an action handler on the 'back' button
     * of the main panel to stop the current app and bring the pre-defined
     * 'main' screen back forward.
      TODO make this more elegant*
     * Utility class to wrap the driver object and preset it as a full-fledged
     * participating application. The main purpose is to enable a formal
     * life-cycle for startup and shutdown of the container.
     *
         * A unique identifier to use for separating devices in the "multi device display" era
          continue as there is nothing mich that can be done, but print the error out to the log. Locate all available ice application via the service loader. For documentation refer to http://docs.oracle.com/javase/7/docs/api/java/util/ServiceLoader.html continue as there is nothing mich that can be done, but print the error out to the log. Now that we have a list of all active components, build up a menu and add it to the app Add a wrapper for the driver adapter display. This is so that the stop logic could shut it down properly. this will block until the frame is killed kill the spring context that is owned by this component.******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * Container responsible for discovery and hosting of ICE applications. Its main
 * purpose is enforcement of standard life-cycle of the participating
 * components.
 *
 * Any application that implements IceApplicationProvider interface and complies
 * with java's <a href=
 * "http://docs.oracle.com/javase/7/docs/api/java/util/ServiceLoader.html"
 * >ServiceLoader</a> pattern will be discovered by this container. The
 * application could be either JavaFX UI or headless background thread (but not
 * a console-based green-screen). For the UI apps, it could be either standalone
 * frames or embeddable panels.
 *
 * Regardless of the implementation details, all apps will be started the same
 * way via {@link IceApplicationProvider.IceApp#activate} API, and shut down via
 * call to {@link IceApplicationProvider.IceApp#stop}. It is assumed that the
 * apps could be stateful - i.e when created at the activate of the container
 * they could span thread, keep references to resources as long as they dispose
 * of them properly in the implementation of
 * {@link IceApplicationProvider.IceApp#destroy} API.
 *
 * @see IceApplicationProvider
 *
 *
     * SK - to keep and use for child popup windows
     
    	 * BASICALLY, WE NEED TO STICK SOMETHING ELSE HERE TO HOLD app.getUI()
    	 * AND DISPLAY THAT INSTEAD OF REFERRING TO panelController
    	 System.err.println("appName is "+appName+" with class "+app.getClass().getName());System.err.println("Device app checking appStageMap for "+da.getUID());System.err.println("That does NOT have a stage already");Extra handling required.System.err.println("Consuming the onCloseRequest...");Do not stop DeviceAppsx position, y position, width, heightSystem.err.println("That does have a stage already");
        	 * Seemed to get an NPE here without this !=null, check, but why?
        	 * How is xy null and therefore coordinates.put not been called,
        	 * is stage already exists? 
        	         panelController.content.setCenter(app.getUI());*
     * Utility class to be installed as an action handler on the 'back' button
     * of the main panel to stop the current app and bring the pre-defined
     * 'main' screen back forward.
      TODO make this more elegant*
     * Utility class to wrap the driver object and preset it as a full-fledged
     * participating application. The main purpose is to enable a formal
     * life-cycle for startup and shutdown of the container.
     *
         * A unique identifier to use for separating devices in the "multi device display" era
          continue as there is nothing mich that can be done, but print the error out to the log. Locate all available ice application via the service loader. For documentation refer to http://docs.oracle.com/javase/7/docs/api/java/util/ServiceLoader.html continue as there is nothing mich that can be done, but print the error out to the log. Now that we have a list of all active components, build up a menu and add it to the app Add a wrapper for the driver adapter display. This is so that the stop logic could shut it down properly. this will block until the frame is killed kill the spring context that is owned by this component.******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * Container responsible for discovery and hosting of ICE applications. Its main
 * purpose is enforcement of standard life-cycle of the participating
 * components.
 *
 * Any application that implements IceApplicationProvider interface and complies
 * with java's <a href=
 * "http://docs.oracle.com/javase/7/docs/api/java/util/ServiceLoader.html"
 * >ServiceLoader</a> pattern will be discovered by this container. The
 * application could be either JavaFX UI or headless background thread (but not
 * a console-based green-screen). For the UI apps, it could be either standalone
 * frames or embeddable panels.
 *
 * Regardless of the implementation details, all apps will be started the same
 * way via {@link IceApplicationProvider.IceApp#activate} API, and shut down via
 * call to {@link IceApplicationProvider.IceApp#stop}. It is assumed that the
 * apps could be stateful - i.e when created at the activate of the container
 * they could span thread, keep references to resources as long as they dispose
 * of them properly in the implementation of
 * {@link IceApplicationProvider.IceApp#destroy} API.
 *
 * @see IceApplicationProvider
 *
 *
     * SK - to keep and use for child popup windows
     
    	 * BASICALLY, WE NEED TO STICK SOMETHING ELSE HERE TO HOLD app.getUI()
    	 * AND DISPLAY THAT INSTEAD OF REFERRING TO panelController
    	 System.err.println("appName is "+appName+" with class "+app.getClass().getName());System.err.println("Device app checking appStageMap for "+da.getUID());System.err.println("That does NOT have a stage already");Extra handling required.System.err.println("Consuming the onCloseRequest...");Do not stop DeviceAppsx position, y position, width, heightSystem.err.println("That does have a stage already");
        	 * Seemed to get an NPE here without this !=null, check, but why?
        	 * How is xy null and therefore coordinates.put not been called,
        	 * is stage already exists? 
        	         panelController.content.setCenter(app.getUI());*
     * Utility class to be installed as an action handler on the 'back' button
     * of the main panel to stop the current app and bring the pre-defined
     * 'main' screen back forward.
      TODO make this more elegant*
     * Utility class to wrap the driver object and preset it as a full-fledged
     * participating application. The main purpose is to enable a formal
     * life-cycle for startup and shutdown of the container.
     *
         * A unique identifier to use for separating devices in the "multi device display" era
          continue as there is nothing mich that can be done, but print the error out to the log. Locate all available ice application via the service loader. For documentation refer to http://docs.oracle.com/javase/7/docs/api/java/util/ServiceLoader.html continue as there is nothing mich that can be done, but print the error out to the log. Now that we have a list of all active components, build up a menu and add it to the app Add a wrapper for the driver adapter display. This is so that the stop logic could shut it down properly. this will block until the frame is killed kill the spring context that is owned by this component.******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * Container responsible for discovery and hosting of ICE applications. Its main
 * purpose is enforcement of standard life-cycle of the participating
 * components.
 *
 * Any application that implements IceApplicationProvider interface and complies
 * with java's <a href=
 * "http://docs.oracle.com/javase/7/docs/api/java/util/ServiceLoader.html"
 * >ServiceLoader</a> pattern will be discovered by this container. The
 * application could be either JavaFX UI or headless background thread (but not
 * a console-based green-screen). For the UI apps, it could be either standalone
 * frames or embeddable panels.
 *
 * Regardless of the implementation details, all apps will be started the same
 * way via {@link IceApplicationProvider.IceApp#activate} API, and shut down via
 * call to {@link IceApplicationProvider.IceApp#stop}. It is assumed that the
 * apps could be stateful - i.e when created at the activate of the container
 * they could span thread, keep references to resources as long as they dispose
 * of them properly in the implementation of
 * {@link IceApplicationProvider.IceApp#destroy} API.
 *
 * @see IceApplicationProvider
 *
 *
     * SK - to keep and use for child popup windows
     
    	 * BASICALLY, WE NEED TO STICK SOMETHING ELSE HERE TO HOLD app.getUI()
    	 * AND DISPLAY THAT INSTEAD OF REFERRING TO panelController
    	 System.err.println("appName is "+appName+" with class "+app.getClass().getName());System.err.println("Device app checking appStageMap for "+da.getUID());System.err.println("That does NOT have a stage already");Extra handling required.System.err.println("Consuming the onCloseRequest...");Do not stop DeviceAppsx position, y position, width, heightSystem.err.println("That does have a stage already");
        	 * Seemed to get an NPE here without this !=null, check, but why?
        	 * How is xy null and therefore coordinates.put not been called,
        	 * is stage already exists? 
        	         panelController.content.setCenter(app.getUI());*
     * Utility class to be installed as an action handler on the 'back' button
     * of the main panel to stop the current app and bring the pre-defined
     * 'main' screen back forward.
      TODO make this more elegant*
     * Utility class to wrap the driver object and preset it as a full-fledged
     * participating application. The main purpose is to enable a formal
     * life-cycle for startup and shutdown of the container.
     *
         * A unique identifier to use for separating devices in the "multi device display" era
          continue as there is nothing mich that can be done, but print the error out to the log. Locate all available ice application via the service loader. For documentation refer to http://docs.oracle.com/javase/7/docs/api/java/util/ServiceLoader.html continue as there is nothing mich that can be done, but print the error out to the log. Now that we have a list of all active components, build up a menu and add it to the app Add a wrapper for the driver adapter display. This is so that the stop logic could shut it down properly. this will block until the frame is killed kill the spring context that is owned by this component.******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * Container responsible for discovery and hosting of ICE applications. Its main
 * purpose is enforcement of standard life-cycle of the participating
 * components.
 *
 * Any application that implements IceApplicationProvider interface and complies
 * with java's <a href=
 * "http://docs.oracle.com/javase/7/docs/api/java/util/ServiceLoader.html"
 * >ServiceLoader</a> pattern will be discovered by this container. The
 * application could be either JavaFX UI or headless background thread (but not
 * a console-based green-screen). For the UI apps, it could be either standalone
 * frames or embeddable panels.
 *
 * Regardless of the implementation details, all apps will be started the same
 * way via {@link IceApplicationProvider.IceApp#activate} API, and shut down via
 * call to {@link IceApplicationProvider.IceApp#stop}. It is assumed that the
 * apps could be stateful - i.e when created at the activate of the container
 * they could span thread, keep references to resources as long as they dispose
 * of them properly in the implementation of
 * {@link IceApplicationProvider.IceApp#destroy} API.
 *
 * @see IceApplicationProvider
 *
 *
     * SK - to keep and use for child popup windows
     
    	 * BASICALLY, WE NEED TO STICK SOMETHING ELSE HERE TO HOLD app.getUI()
    	 * AND DISPLAY THAT INSTEAD OF REFERRING TO panelController
    	 System.err.println("appName is "+appName+" with class "+app.getClass().getName());System.err.println("Device app checking appStageMap for "+da.getUID());System.err.println("That does NOT have a stage already");Extra handling required.System.err.println("Consuming the onCloseRequest...");Do not stop DeviceAppsx position, y position, width, heightSystem.err.println("That does have a stage already");
        	 * Seemed to get an NPE here without this !=null, check, but why?
        	 * How is xy null and therefore coordinates.put not been called,
        	 * is stage already exists? 
        	         panelController.content.setCenter(app.getUI());*
     * Utility class to be installed as an action handler on the 'back' button
     * of the main panel to stop the current app and bring the pre-defined
     * 'main' screen back forward.
      TODO make this more elegant*
     * Utility class to wrap the driver object and preset it as a full-fledged
     * participating application. The main purpose is to enable a formal
     * life-cycle for startup and shutdown of the container.
     *
         * A unique identifier to use for separating devices in the "multi device display" era
          continue as there is nothing mich that can be done, but print the error out to the log. Locate all available ice application via the service loader. For documentation refer to http://docs.oracle.com/javase/7/docs/api/java/util/ServiceLoader.html continue as there is nothing mich that can be done, but print the error out to the log. Now that we have a list of all active components, build up a menu and add it to the app Add a wrapper for the driver adapter display. This is so that the stop logic could shut it down properly. this will block until the frame is killed kill the spring context that is owned by this component.******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * Container responsible for discovery and hosting of ICE applications. Its main
 * purpose is enforcement of standard life-cycle of the participating
 * components.
 *
 * Any application that implements IceApplicationProvider interface and complies
 * with java's <a href=
 * "http://docs.oracle.com/javase/7/docs/api/java/util/ServiceLoader.html"
 * >ServiceLoader</a> pattern will be discovered by this container. The
 * application could be either JavaFX UI or headless background thread (but not
 * a console-based green-screen). For the UI apps, it could be either standalone
 * frames or embeddable panels.
 *
 * Regardless of the implementation details, all apps will be started the same
 * way via {@link IceApplicationProvider.IceApp#activate} API, and shut down via
 * call to {@link IceApplicationProvider.IceApp#stop}. It is assumed that the
 * apps could be stateful - i.e when created at the activate of the container
 * they could span thread, keep references to resources as long as they dispose
 * of them properly in the implementation of
 * {@link IceApplicationProvider.IceApp#destroy} API.
 *
 * @see IceApplicationProvider
 *
 *
     * SK - to keep and use for child popup windows
     
    	 * BASICALLY, WE NEED TO STICK SOMETHING ELSE HERE TO HOLD app.getUI()
    	 * AND DISPLAY THAT INSTEAD OF REFERRING TO panelController
    	 System.err.println("appName is "+appName+" with class "+app.getClass().getName());System.err.println("Device app checking appStageMap for "+da.getUID());System.err.println("That does NOT have a stage already");Extra handling required.System.err.println("Consuming the onCloseRequest...");Do not stop DeviceAppsx position, y position, width, heightSystem.err.println("That does have a stage already");
        	 * Seemed to get an NPE here without this !=null, check, but why?
        	 * How is xy null and therefore coordinates.put not been called,
        	 * is stage already exists? 
        	         panelController.content.setCenter(app.getUI());*
     * Utility class to be installed as an action handler on the 'back' button
     * of the main panel to stop the current app and bring the pre-defined
     * 'main' screen back forward.
      TODO make this more elegant*
     * Utility class to wrap the driver object and preset it as a full-fledged
     * participating application. The main purpose is to enable a formal
     * life-cycle for startup and shutdown of the container.
     *
         * A unique identifier to use for separating devices in the "multi device display" era
          continue as there is nothing mich that can be done, but print the error out to the log. Locate all available ice application via the service loader. For documentation refer to http://docs.oracle.com/javase/7/docs/api/java/util/ServiceLoader.html continue as there is nothing mich that can be done, but print the error out to the log. Now that we have a list of all active components, build up a menu and add it to the app Add a wrapper for the driver adapter display. This is so that the stop logic could shut it down properly. this will block until the frame is killed kill the spring context that is owned by this component.