**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** for strdup *
 * Definitions
 *   taken from elf.h linux header
 *   based on ELF specification
 *   based on ARM ELF specification
  Magic number and other info  Object file type  Architecture  Object file version  Entry point virtual address  Program header table file offset  Section header table file offset  Processor-specific flags  ELF header size in bytes  Program header table entry size  Program header table entry count  Section header table entry size  Section header table entry count  Section header string table index  File identification byte 0 index  Magic number byte 0  File identification byte 1 index  Magic number byte 1  File identification byte 2 index  Magic number byte 2  File identification byte 3 index  Magic number byte 3  File class byte index  32-bit objects  Data encoding byte index  2's complement, little endian  File version byte index, Value must be EV_CURRENT  OS ABI identification  UNIX System V ABI  ARM EABI  ARM  ABI version  Byte index of padding bytes  Executable file  ARM  Current version  Undefined section  Associated symbol is absolute  Section name (string tbl index)  Section type  Section flags  Section virtual addr at execution  Section file offset  Section size in bytes  Link to another section  Additional section information  Section alignment  Entry size if section holds table  Section header table entry unused  Program data  Symbol table  String table  Relocation entries with addends  Symbol hash table  Dynamic linking information  Notes  Program space with no data (bss)  Relocation entries, no addends  Reserved  Dynamic linker symbol table  Array of constructors  Array of destructors  Array of pre-constructors  Section group  Extended section indeces  Number of defined types.   Writable  Occupies memory during execution  Executable  Might be merged  Contains nul-terminated strings  Segment type  Segment file offset  Segment virtual address  Segment physical address  Segment size in file  Segment size in memory  Segment flags  Segment alignment  Loadable program segment  Segment is executable  Segment is writable  Segment is readable  Symbol name (string tbl index)  Symbol value  Symbol size  Symbol type and binding  Symbol visibility  Section index  Local symbol  Global symbol  Weak symbol  Number of defined types.   Start of OS-specific  Unique symbol.   End of OS-specific  Start of processor-specific  End of processor-specific  Symbol type is unspecified  Symbol is a data object  Symbol is a code object  Symbol associated with a section  Symbol's name is file name  Symbol is a common data object  Symbol is thread-local data object Number of defined types.   Start of OS-specific  Symbol is indirect code object  End of OS-specific  Start of processor-specific  End of processor-specific  sort by increasing type and then increasing address * find all sections of the same types which are contiguous and merge them  count sections  put all sections in an array and free list  sort them by type and increasing addresses  merge them !  different type => no  (for fill) different pattern => no  not contiguous => no  merge !!  will be ignored by rebuilding (see below) merge data also will be ignored by rebuilding (see below) update current section to consider  put back on a list and free array  skip empty sections produced by simplification  sort by increasing address * sort sections by address  count sections  put all sections in an array and free list  sort them by type and increasing addresses  put back on a list and free array  skip empty sections produced by simplification  one for section 0 and one for string table  allocate enough size for the string table:
     * - one empty name ("\0")
     * - one name ".shstrtab\0"
     * - all section names with zeroes  assume identity map ?  read header  basic checks  read header  basic checks  run through sections  load string table load symbol table data load symbols (only global ones) run through segments **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** for strdup *
 * Definitions
 *   taken from elf.h linux header
 *   based on ELF specification
 *   based on ARM ELF specification
  Magic number and other info  Object file type  Architecture  Object file version  Entry point virtual address  Program header table file offset  Section header table file offset  Processor-specific flags  ELF header size in bytes  Program header table entry size  Program header table entry count  Section header table entry size  Section header table entry count  Section header string table index  File identification byte 0 index  Magic number byte 0  File identification byte 1 index  Magic number byte 1  File identification byte 2 index  Magic number byte 2  File identification byte 3 index  Magic number byte 3  File class byte index  32-bit objects  Data encoding byte index  2's complement, little endian  File version byte index, Value must be EV_CURRENT  OS ABI identification  UNIX System V ABI  ARM EABI  ARM  ABI version  Byte index of padding bytes  Executable file  ARM  Current version  Undefined section  Associated symbol is absolute  Section name (string tbl index)  Section type  Section flags  Section virtual addr at execution  Section file offset  Section size in bytes  Link to another section  Additional section information  Section alignment  Entry size if section holds table  Section header table entry unused  Program data  Symbol table  String table  Relocation entries with addends  Symbol hash table  Dynamic linking information  Notes  Program space with no data (bss)  Relocation entries, no addends  Reserved  Dynamic linker symbol table  Array of constructors  Array of destructors  Array of pre-constructors  Section group  Extended section indeces  Number of defined types.   Writable  Occupies memory during execution  Executable  Might be merged  Contains nul-terminated strings  Segment type  Segment file offset  Segment virtual address  Segment physical address  Segment size in file  Segment size in memory  Segment flags  Segment alignment  Loadable program segment  Segment is executable  Segment is writable  Segment is readable  Symbol name (string tbl index)  Symbol value  Symbol size  Symbol type and binding  Symbol visibility  Section index  Local symbol  Global symbol  Weak symbol  Number of defined types.   Start of OS-specific  Unique symbol.   End of OS-specific  Start of processor-specific  End of processor-specific  Symbol type is unspecified  Symbol is a data object  Symbol is a code object  Symbol associated with a section  Symbol's name is file name  Symbol is a common data object  Symbol is thread-local data object Number of defined types.   Start of OS-specific  Symbol is indirect code object  End of OS-specific  Start of processor-specific  End of processor-specific  sort by increasing type and then increasing address * find all sections of the same types which are contiguous and merge them  count sections  put all sections in an array and free list  sort them by type and increasing addresses  merge them !  different type => no  (for fill) different pattern => no  not contiguous => no  merge !!  will be ignored by rebuilding (see below) merge data also will be ignored by rebuilding (see below) update current section to consider  put back on a list and free array  skip empty sections produced by simplification  sort by increasing address * sort sections by address  count sections  put all sections in an array and free list  sort them by type and increasing addresses  put back on a list and free array  skip empty sections produced by simplification  one for section 0 and one for string table  allocate enough size for the string table:
     * - one empty name ("\0")
     * - one name ".shstrtab\0"
     * - all section names with zeroes  assume identity map ?  read header  basic checks  read header  basic checks  run through sections  load string table load symbol table data load symbols (only global ones) run through segments **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2011 Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** for strdup *
 * Definitions
 *   taken from elf.h linux header
 *   based on ELF specification
 *   based on ARM ELF specification
  Magic number and other info  Object file type  Architecture  Object file version  Entry point virtual address  Program header table file offset  Section header table file offset  Processor-specific flags  ELF header size in bytes  Program header table entry size  Program header table entry count  Section header table entry size  Section header table entry count  Section header string table index  File identification byte 0 index  Magic number byte 0  File identification byte 1 index  Magic number byte 1  File identification byte 2 index  Magic number byte 2  File identification byte 3 index  Magic number byte 3  File class byte index  32-bit objects  Data encoding byte index  2's complement, little endian  File version byte index, Value must be EV_CURRENT  OS ABI identification  UNIX System V ABI  ARM EABI  ARM  ABI version  Byte index of padding bytes  Executable file  ARM  Current version  Undefined section  Associated symbol is absolute  Section name (string tbl index)  Section type  Section flags  Section virtual addr at execution  Section file offset  Section size in bytes  Link to another section  Additional section information  Section alignment  Entry size if section holds table  Section header table entry unused  Program data  Symbol table  String table  Relocation entries with addends  Symbol hash table  Dynamic linking information  Notes  Program space with no data (bss)  Relocation entries, no addends  Reserved  Dynamic linker symbol table  Array of constructors  Array of destructors  Array of pre-constructors  Section group  Extended section indeces  Number of defined types.   Writable  Occupies memory during execution  Executable  Might be merged  Contains nul-terminated strings  Segment type  Segment file offset  Segment virtual address  Segment physical address  Segment size in file  Segment size in memory  Segment flags  Segment alignment  Loadable program segment  Segment is executable  Segment is writable  Segment is readable  Symbol name (string tbl index)  Symbol value  Symbol size  Symbol type and binding  Symbol visibility  Section index  Local symbol  Global symbol  Weak symbol  Number of defined types.   Start of OS-specific  Unique symbol.   End of OS-specific  Start of processor-specific  End of processor-specific  Symbol type is unspecified  Symbol is a data object  Symbol is a code object  Symbol associated with a section  Symbol's name is file name  Symbol is a common data object  Symbol is thread-local data object Number of defined types.   Start of OS-specific  Symbol is indirect code object  End of OS-specific  Start of processor-specific  End of processor-specific  sort by increasing type and then increasing address * find all sections of the same types which are contiguous and merge them  count sections  put all sections in an array and free list  sort them by type and increasing addresses  merge them !  different type => no  (for fill) different pattern => no  not contiguous => no  merge !!  will be ignored by rebuilding (see below) merge data also will be ignored by rebuilding (see below) update current section to consider  put back on a list and free array  skip empty sections produced by simplification  sort by increasing address * sort sections by address  count sections  put all sections in an array and free list  sort them by type and increasing addresses  put back on a list and free array  skip empty sections produced by simplification  one for section 0 and one for string table  allocate enough size for the string table:
     * - one empty name ("\0")
     * - one name ".shstrtab\0"
     * - all section names with zeroes  assume identity map ?  read header  basic checks  read header  basic checks  run through sections  load string table load symbol table data load symbols (only global ones) run through segments 