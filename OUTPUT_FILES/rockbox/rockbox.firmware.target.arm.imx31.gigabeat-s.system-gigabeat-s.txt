**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by James Espinoza
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** IC revision info routines * Initialize the IC revision info (required by SDMA) * Watchdog timer routines * Initialize the watchdog timer  WDOG output enabled  WDOG assertion - no effect  System reset - no effect  Generate a WDOG signal  Enable timer - hardware does
                                      not allow a disable now  Service the watchdog timer * uevent APIs * uevent callback  Is busy  Didn't miss it * GPT timer routines - basis for udelay/uevent * Start the general-purpose timer (1MHz)  Disable counter  Reset module  No output
     * No capture
     * Enable in wait and run mode
     * Freerun mode (count to 0xFFFFFFFF and roll-over to 0x00000000)
      Stop the general-purpose timer  Multi-context so no SPI available (WDT?)   Called in many contexts so button reading may be a chore  CGR0  CGR1  CGR2  Initialize frequency with current  MCR WFI enables wait mode (CCM_CCMR_LPM_WAIT_MODE = 0)  Some housekeeping tasks must be performed for a safe changeover  Copying routine where new image is run  BOOTLOADER dprintf("CPSR=0x%x\t\n",regs.cpsr);DEBUGF("CPSR=0x%x\t\n",regs.cpsr);**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by James Espinoza
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** IC revision info routines * Initialize the IC revision info (required by SDMA) * Watchdog timer routines * Initialize the watchdog timer  WDOG output enabled  WDOG assertion - no effect  System reset - no effect  Generate a WDOG signal  Enable timer - hardware does
                                      not allow a disable now  Service the watchdog timer * uevent APIs * uevent callback  Is busy  Didn't miss it * GPT timer routines - basis for udelay/uevent * Start the general-purpose timer (1MHz)  Disable counter  Reset module  No output
     * No capture
     * Enable in wait and run mode
     * Freerun mode (count to 0xFFFFFFFF and roll-over to 0x00000000)
      Stop the general-purpose timer  Multi-context so no SPI available (WDT?)   Called in many contexts so button reading may be a chore  CGR0  CGR1  CGR2  Initialize frequency with current  MCR WFI enables wait mode (CCM_CCMR_LPM_WAIT_MODE = 0)  Some housekeeping tasks must be performed for a safe changeover  Copying routine where new image is run  BOOTLOADER dprintf("CPSR=0x%x\t\n",regs.cpsr);DEBUGF("CPSR=0x%x\t\n",regs.cpsr);**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by James Espinoza
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 **************************************************************************** IC revision info routines * Initialize the IC revision info (required by SDMA) * Watchdog timer routines * Initialize the watchdog timer  WDOG output enabled  WDOG assertion - no effect  System reset - no effect  Generate a WDOG signal  Enable timer - hardware does
                                      not allow a disable now  Service the watchdog timer * uevent APIs * uevent callback  Is busy  Didn't miss it * GPT timer routines - basis for udelay/uevent * Start the general-purpose timer (1MHz)  Disable counter  Reset module  No output
     * No capture
     * Enable in wait and run mode
     * Freerun mode (count to 0xFFFFFFFF and roll-over to 0x00000000)
      Stop the general-purpose timer  Multi-context so no SPI available (WDT?)   Called in many contexts so button reading may be a chore  CGR0  CGR1  CGR2  Initialize frequency with current  MCR WFI enables wait mode (CCM_CCMR_LPM_WAIT_MODE = 0)  Some housekeeping tasks must be performed for a safe changeover  Copying routine where new image is run  BOOTLOADER dprintf("CPSR=0x%x\t\n",regs.cpsr);DEBUGF("CPSR=0x%x\t\n",regs.cpsr);