
 * Copyright (c) 2014 - 2016, The Linux Foundation. All rights reserved.
 *
 * Permission to use, copy, modify, and/or distribute this software for
 * any purpose with or without fee is hereby granted, provided that the
 * above copyright notice and this permission notice appear in all copies.
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  Weight round robin and virtual QID mask  Weight round robin and virtual QID shift  Enable only port 5 <--> port 0
	 * bits 0:6 bitmap of ports it can fwd to  forward multicast and broadcast frames to CPU  reset the speed bits [0:1]  set the new speed  check full/half duplex  edma_change_tx_coalesce()
 *	change tx interrupt moderation timer
  Here, we right shift the value from the user by 1, this is
	 * done because IMT resolution timer is 2usecs. 1 count
	 * of this register corresponds to 2 usecs.
	  edma_change_rx_coalesce()
 *	change rx interrupt moderation timer
  Here, we right shift the value from the user by 1, this is
	 * done because IMT resolution timer is 2usecs. 1 count
	 * of this register corresponds to 2 usecs.
	  edma_get_tx_rx_coalesce()
 *	Get tx/rx interrupt moderation value
  edma_axi_netdev_ops
 *	Describe the operations supported by registered netdevices
 *
 * static const struct net_device_ops edma_axi_netdev_ops = {
 *	.ndo_open               = edma_open,
 *	.ndo_stop               = edma_close,
 *	.ndo_start_xmit         = edma_xmit_frame,
 *	.ndo_set_mac_address    = edma_set_mac_addr,
 * }
  edma_axi_probe()
 *	Initialise an adapter identified by a platform_device structure.
 *
 * The OS initialization, configuring of the adapter private structure,
 * and a hardware reset occur in the probe.
  Initialize the netdev array before allocation
	 * to avoid double free
	  Fill ring details  Update num rx queues based on module parameter  Fill HW defaults  configure RSS type to the different protocol that can be
	 * supported
	  Parse tx queue interrupt number from device tree  Parse rx queue interrupt number from device tree
	 * Here we are setting j to point to the point where we
	 * left tx interrupt parsing(i.e 16) and run run the loop
	 * from 0 to 7 to parse rx interrupt number.
	  Initialize netdev and netdev bitmap for transmit descriptor rings  this check is needed if parent and daughter dts have
		 * different number of gmac nodes
		  Populate the adapter structure register the netdevice  Share the queues with available net-devices.
			 * For instance , with 5 net-devices
			 * eth0/eth2/eth4 will share q0,q1,q4,q5,q8,q9,q12,q13
			 * and eth1/eth3 will get the remaining.
			  This just fill in some default MAC address
		  carrier off reporting is important to
		 * ethtool even BEFORE open
		  Allocate reverse irq cpu mapping structure for
		* receive queues
		 this check is needed if parent and daughter dts have
		 * different number of gmac nodes
		  Populate port-id to netdev lookup table  We ignore CPU Port bit 0  create a phyid using MDIO bus id
				 * and MDIO bus address
				  Disable all 16 Tx and 8 rx irqs  populate per_core_info, do a napi_Add, request 16 TX irqs,
	 * 8 RX irqs, do a napi enable
	  Request irq per core  Used to clear interrupt status, allocate rx buffer,
	 * configure edma descriptors registers
	  Configure RSS indirection table.
	 * 128 hash will be configured in the following
	 * pattern: hash{0,1,2,3} = {Q0,Q2,Q4,Q6} respectively
	 * and so on
	  Configure load balance mapping table.
	 * 4 table entry will be configured according to the
	 * following pattern: load_balance{0,1,2,3} = {Q0,Q1,Q3,Q4}
	 * respectively.
	  Configure Virtual queue for Tx rings
	 * User can also change this value runtime through
	 * a sysctl
	  Configure Max AXI Burst write size to 128 bytes Enable All 16 tx and 8 rx irq mask  edma_axi_remove()
 *	Device Removal Routine
 *
 * edma_axi_remove is called by the platform subsystem to alert the driver
 * that it should release a platform device.
 
 * Copyright (c) 2014 - 2016, The Linux Foundation. All rights reserved.
 *
 * Permission to use, copy, modify, and/or distribute this software for
 * any purpose with or without fee is hereby granted, provided that the
 * above copyright notice and this permission notice appear in all copies.
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  Weight round robin and virtual QID mask  Weight round robin and virtual QID shift  Enable only port 5 <--> port 0
	 * bits 0:6 bitmap of ports it can fwd to  forward multicast and broadcast frames to CPU  reset the speed bits [0:1]  set the new speed  check full/half duplex  edma_change_tx_coalesce()
 *	change tx interrupt moderation timer
  Here, we right shift the value from the user by 1, this is
	 * done because IMT resolution timer is 2usecs. 1 count
	 * of this register corresponds to 2 usecs.
	  edma_change_rx_coalesce()
 *	change rx interrupt moderation timer
  Here, we right shift the value from the user by 1, this is
	 * done because IMT resolution timer is 2usecs. 1 count
	 * of this register corresponds to 2 usecs.
	  edma_get_tx_rx_coalesce()
 *	Get tx/rx interrupt moderation value
  edma_axi_netdev_ops
 *	Describe the operations supported by registered netdevices
 *
 * static const struct net_device_ops edma_axi_netdev_ops = {
 *	.ndo_open               = edma_open,
 *	.ndo_stop               = edma_close,
 *	.ndo_start_xmit         = edma_xmit_frame,
 *	.ndo_set_mac_address    = edma_set_mac_addr,
 * }
  edma_axi_probe()
 *	Initialise an adapter identified by a platform_device structure.
 *
 * The OS initialization, configuring of the adapter private structure,
 * and a hardware reset occur in the probe.
  Initialize the netdev array before allocation
	 * to avoid double free
	  Fill ring details  Update num rx queues based on module parameter  Fill HW defaults  configure RSS type to the different protocol that can be
	 * supported
	  Parse tx queue interrupt number from device tree  Parse rx queue interrupt number from device tree
	 * Here we are setting j to point to the point where we
	 * left tx interrupt parsing(i.e 16) and run run the loop
	 * from 0 to 7 to parse rx interrupt number.
	  Initialize netdev and netdev bitmap for transmit descriptor rings  this check is needed if parent and daughter dts have
		 * different number of gmac nodes
		  Populate the adapter structure register the netdevice  Share the queues with available net-devices.
			 * For instance , with 5 net-devices
			 * eth0/eth2/eth4 will share q0,q1,q4,q5,q8,q9,q12,q13
			 * and eth1/eth3 will get the remaining.
			  This just fill in some default MAC address
		  carrier off reporting is important to
		 * ethtool even BEFORE open
		  Allocate reverse irq cpu mapping structure for
		* receive queues
		 this check is needed if parent and daughter dts have
		 * different number of gmac nodes
		  Populate port-id to netdev lookup table  We ignore CPU Port bit 0  create a phyid using MDIO bus id
				 * and MDIO bus address
				  Disable all 16 Tx and 8 rx irqs  populate per_core_info, do a napi_Add, request 16 TX irqs,
	 * 8 RX irqs, do a napi enable
	  Request irq per core  Used to clear interrupt status, allocate rx buffer,
	 * configure edma descriptors registers
	  Configure RSS indirection table.
	 * 128 hash will be configured in the following
	 * pattern: hash{0,1,2,3} = {Q0,Q2,Q4,Q6} respectively
	 * and so on
	  Configure load balance mapping table.
	 * 4 table entry will be configured according to the
	 * following pattern: load_balance{0,1,2,3} = {Q0,Q1,Q3,Q4}
	 * respectively.
	  Configure Virtual queue for Tx rings
	 * User can also change this value runtime through
	 * a sysctl
	  Configure Max AXI Burst write size to 128 bytes Enable All 16 tx and 8 rx irq mask  edma_axi_remove()
 *	Device Removal Routine
 *
 * edma_axi_remove is called by the platform subsystem to alert the driver
 * that it should release a platform device.
 
 * Copyright (c) 2014 - 2016, The Linux Foundation. All rights reserved.
 *
 * Permission to use, copy, modify, and/or distribute this software for
 * any purpose with or without fee is hereby granted, provided that the
 * above copyright notice and this permission notice appear in all copies.
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  Weight round robin and virtual QID mask  Weight round robin and virtual QID shift  Enable only port 5 <--> port 0
	 * bits 0:6 bitmap of ports it can fwd to  forward multicast and broadcast frames to CPU  reset the speed bits [0:1]  set the new speed  check full/half duplex  edma_change_tx_coalesce()
 *	change tx interrupt moderation timer
  Here, we right shift the value from the user by 1, this is
	 * done because IMT resolution timer is 2usecs. 1 count
	 * of this register corresponds to 2 usecs.
	  edma_change_rx_coalesce()
 *	change rx interrupt moderation timer
  Here, we right shift the value from the user by 1, this is
	 * done because IMT resolution timer is 2usecs. 1 count
	 * of this register corresponds to 2 usecs.
	  edma_get_tx_rx_coalesce()
 *	Get tx/rx interrupt moderation value
  edma_axi_netdev_ops
 *	Describe the operations supported by registered netdevices
 *
 * static const struct net_device_ops edma_axi_netdev_ops = {
 *	.ndo_open               = edma_open,
 *	.ndo_stop               = edma_close,
 *	.ndo_start_xmit         = edma_xmit_frame,
 *	.ndo_set_mac_address    = edma_set_mac_addr,
 * }
  edma_axi_probe()
 *	Initialise an adapter identified by a platform_device structure.
 *
 * The OS initialization, configuring of the adapter private structure,
 * and a hardware reset occur in the probe.
  Initialize the netdev array before allocation
	 * to avoid double free
	  Fill ring details  Update num rx queues based on module parameter  Fill HW defaults  configure RSS type to the different protocol that can be
	 * supported
	  Parse tx queue interrupt number from device tree  Parse rx queue interrupt number from device tree
	 * Here we are setting j to point to the point where we
	 * left tx interrupt parsing(i.e 16) and run run the loop
	 * from 0 to 7 to parse rx interrupt number.
	  Initialize netdev and netdev bitmap for transmit descriptor rings  this check is needed if parent and daughter dts have
		 * different number of gmac nodes
		  Populate the adapter structure register the netdevice  Share the queues with available net-devices.
			 * For instance , with 5 net-devices
			 * eth0/eth2/eth4 will share q0,q1,q4,q5,q8,q9,q12,q13
			 * and eth1/eth3 will get the remaining.
			  This just fill in some default MAC address
		  carrier off reporting is important to
		 * ethtool even BEFORE open
		  Allocate reverse irq cpu mapping structure for
		* receive queues
		 this check is needed if parent and daughter dts have
		 * different number of gmac nodes
		  Populate port-id to netdev lookup table  We ignore CPU Port bit 0  create a phyid using MDIO bus id
				 * and MDIO bus address
				  Disable all 16 Tx and 8 rx irqs  populate per_core_info, do a napi_Add, request 16 TX irqs,
	 * 8 RX irqs, do a napi enable
	  Request irq per core  Used to clear interrupt status, allocate rx buffer,
	 * configure edma descriptors registers
	  Configure RSS indirection table.
	 * 128 hash will be configured in the following
	 * pattern: hash{0,1,2,3} = {Q0,Q2,Q4,Q6} respectively
	 * and so on
	  Configure load balance mapping table.
	 * 4 table entry will be configured according to the
	 * following pattern: load_balance{0,1,2,3} = {Q0,Q1,Q3,Q4}
	 * respectively.
	  Configure Virtual queue for Tx rings
	 * User can also change this value runtime through
	 * a sysctl
	  Configure Max AXI Burst write size to 128 bytes Enable All 16 tx and 8 rx irq mask  edma_axi_remove()
 *	Device Removal Routine
 *
 * edma_axi_remove is called by the platform subsystem to alert the driver
 * that it should release a platform device.
 