**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Michael Sevakis
 *
 * LCD scroll control functions (API to apps).
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** This file is meant to be #included by scroll_engine.c (twice if a remote
 * is present)  Not compiling for remote - define macros for main LCD.  inform scroller about end of scrolling  Clears scrolling lines that intersect with the area  check if the specified area crosses the viewport in some way  inform scroller about end of scrolling  If i is not the last active line in the array, then move
               the last item to position i. This compacts
               the scroll array at the same time of removing the line  Stop all scrolling lines in the specified viewport  This renders the scrolling line described by s immediatly.
 * This can be called to update a scrolling line if the text has changed
 * without waiting for the next scroll tick
 *
 * Returns true if the text scrolled to the end  assume s->scroll_func() don't yield; otherwise this buffer might need
     * to be mutex'd (the worst case would be minor glitches though)  scroll bidirectional  at beginning of line  at end of line  scroll forward the whole time  Stash and restore these three, so that the scroll_func
     * can do whatever it likes without destroying the state  check pause  this runs out of the ui thread, thus we need to
         * save and restore the current viewport since the ui thread
         * is unaware of the swapped viewports. the vp must
         * be switched early so that lcd_getstringsize() picks the
         * correct font  put the line onto the display now !BOOTLOADER**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Michael Sevakis
 *
 * LCD scroll control functions (API to apps).
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** This file is meant to be #included by scroll_engine.c (twice if a remote
 * is present)  Not compiling for remote - define macros for main LCD.  inform scroller about end of scrolling  Clears scrolling lines that intersect with the area  check if the specified area crosses the viewport in some way  inform scroller about end of scrolling  If i is not the last active line in the array, then move
               the last item to position i. This compacts
               the scroll array at the same time of removing the line  Stop all scrolling lines in the specified viewport  This renders the scrolling line described by s immediatly.
 * This can be called to update a scrolling line if the text has changed
 * without waiting for the next scroll tick
 *
 * Returns true if the text scrolled to the end  assume s->scroll_func() don't yield; otherwise this buffer might need
     * to be mutex'd (the worst case would be minor glitches though)  scroll bidirectional  at beginning of line  at end of line  scroll forward the whole time  Stash and restore these three, so that the scroll_func
     * can do whatever it likes without destroying the state  check pause  this runs out of the ui thread, thus we need to
         * save and restore the current viewport since the ui thread
         * is unaware of the swapped viewports. the vp must
         * be switched early so that lcd_getstringsize() picks the
         * correct font  put the line onto the display now !BOOTLOADER**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (C) 2007 by Michael Sevakis
 *
 * LCD scroll control functions (API to apps).
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** This file is meant to be #included by scroll_engine.c (twice if a remote
 * is present)  Not compiling for remote - define macros for main LCD.  inform scroller about end of scrolling  Clears scrolling lines that intersect with the area  check if the specified area crosses the viewport in some way  inform scroller about end of scrolling  If i is not the last active line in the array, then move
               the last item to position i. This compacts
               the scroll array at the same time of removing the line  Stop all scrolling lines in the specified viewport  This renders the scrolling line described by s immediatly.
 * This can be called to update a scrolling line if the text has changed
 * without waiting for the next scroll tick
 *
 * Returns true if the text scrolled to the end  assume s->scroll_func() don't yield; otherwise this buffer might need
     * to be mutex'd (the worst case would be minor glitches though)  scroll bidirectional  at beginning of line  at end of line  scroll forward the whole time  Stash and restore these three, so that the scroll_func
     * can do whatever it likes without destroying the state  check pause  this runs out of the ui thread, thus we need to
         * save and restore the current viewport since the ui thread
         * is unaware of the swapped viewports. the vp must
         * be switched early so that lcd_getstringsize() picks the
         * correct font  put the line onto the display now !BOOTLOADER