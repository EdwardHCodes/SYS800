
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 d_sprite.c: software top-level rasterization driver module for drawing sprites
=====================
D_SpriteDrawSpans
=====================
 keep compiler happy ditto we count on FP exceptions being turned off to avoid range problems calculate the initial s/z, t/z, 1/z, s, and t and clamp prescale to 16.16 fixed-point we count on FP exceptions being turned off to avoid range problems calculate s and t at the far end of the span calculate s/z, t/z, zi->fixed s and t at far end of span, calculate s and t steps across span by shifting prescale to 16.16 fixed-point prevent round-off error on <0 steps from  from causing overstepping & running off the  edge of the texture guard against round-off error on <0 steps calculate s/z, t/z, zi->fixed s and t at last pixel in span (so can't step off polygon), clamp, calculate s and t steps across span by division, biasing steps low so we don't run off the texture prescale to 16.16 fixed-point prevent round-off error on <0 steps from  from causing overstepping & running off the  edge of the texture guard against round-off error on <0 steps
=====================
D_SpriteScanLeftEdge
=====================
 adjust u to ceil the integer portion
=====================
D_SpriteScanRightEdge
=====================
 adjust u to ceil the integer portion mark the end of the span list 
=====================
D_SpriteCalculateGradients
=====================
 -1 (-epsilon) so we never wander off the edge of the texture
=====================
D_DrawSprite
=====================
 find the top and bottom vertices, and make sure there's at least one scan to draw doesn't cross any scans at all copy the first vertex to the last vertex, so we don't have to deal with wrapping
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 d_sprite.c: software top-level rasterization driver module for drawing sprites
=====================
D_SpriteDrawSpans
=====================
 keep compiler happy ditto we count on FP exceptions being turned off to avoid range problems calculate the initial s/z, t/z, 1/z, s, and t and clamp prescale to 16.16 fixed-point we count on FP exceptions being turned off to avoid range problems calculate s and t at the far end of the span calculate s/z, t/z, zi->fixed s and t at far end of span, calculate s and t steps across span by shifting prescale to 16.16 fixed-point prevent round-off error on <0 steps from  from causing overstepping & running off the  edge of the texture guard against round-off error on <0 steps calculate s/z, t/z, zi->fixed s and t at last pixel in span (so can't step off polygon), clamp, calculate s and t steps across span by division, biasing steps low so we don't run off the texture prescale to 16.16 fixed-point prevent round-off error on <0 steps from  from causing overstepping & running off the  edge of the texture guard against round-off error on <0 steps
=====================
D_SpriteScanLeftEdge
=====================
 adjust u to ceil the integer portion
=====================
D_SpriteScanRightEdge
=====================
 adjust u to ceil the integer portion mark the end of the span list 
=====================
D_SpriteCalculateGradients
=====================
 -1 (-epsilon) so we never wander off the edge of the texture
=====================
D_DrawSprite
=====================
 find the top and bottom vertices, and make sure there's at least one scan to draw doesn't cross any scans at all copy the first vertex to the last vertex, so we don't have to deal with wrapping
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

 d_sprite.c: software top-level rasterization driver module for drawing sprites
=====================
D_SpriteDrawSpans
=====================
 keep compiler happy ditto we count on FP exceptions being turned off to avoid range problems calculate the initial s/z, t/z, 1/z, s, and t and clamp prescale to 16.16 fixed-point we count on FP exceptions being turned off to avoid range problems calculate s and t at the far end of the span calculate s/z, t/z, zi->fixed s and t at far end of span, calculate s and t steps across span by shifting prescale to 16.16 fixed-point prevent round-off error on <0 steps from  from causing overstepping & running off the  edge of the texture guard against round-off error on <0 steps calculate s/z, t/z, zi->fixed s and t at last pixel in span (so can't step off polygon), clamp, calculate s and t steps across span by division, biasing steps low so we don't run off the texture prescale to 16.16 fixed-point prevent round-off error on <0 steps from  from causing overstepping & running off the  edge of the texture guard against round-off error on <0 steps
=====================
D_SpriteScanLeftEdge
=====================
 adjust u to ceil the integer portion
=====================
D_SpriteScanRightEdge
=====================
 adjust u to ceil the integer portion mark the end of the span list 
=====================
D_SpriteCalculateGradients
=====================
 -1 (-epsilon) so we never wander off the edge of the texture
=====================
D_DrawSprite
=====================
 find the top and bottom vertices, and make sure there's at least one scan to draw doesn't cross any scans at all copy the first vertex to the last vertex, so we don't have to deal with wrapping