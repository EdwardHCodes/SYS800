**************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2005 Jvo Studer
 * Copyright (c) 2009 Yoshihisa Uchida
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** This codec supports the following AIFC compressionType formats  AIFC PCM Format (big endian)  AIFC ALaw compressed  AIFC uLaw compressed  AIFC IEEE float 32 bit  AIFC IEEE float 64 bit  AIFC QuickTime IMA ADPCM  this is the codec entry point  Generic codec initialisation  this is called for each file to process  rockbox: comment 'set but unused' variables
    uint32_t num_sample_frames = 0;
     position of the first block in file  Need to save offset for later use (cleared indirectly by advance_buffer)  assume the AIFF header is less than 1024 bytes  read until 'SSND' chunk, which typically is last  chunkSize  num_channels  num_sample_frames 
            num_sample_frames = ((buf[10]<<24)|(buf[11]<<16)|(buf[12]<<8)
                                |buf[13]);
             sample_size  sample_rate (don't use last 4 bytes, only integer fs)  compressionType (AIFC only) 
                 * aiff's sample_size is uncompressed sound data size.
                 * But format.bitspersample is compressed sound data size.
                  calc average bytes per second  offset2snd  block_size  advance to the beginning of data  Format Version Chunk (AIFC only chunk)  skip this chunk  Text chunks containing only metadata  skip this chunk  odd chunk sizes must be padded  while 'SSND'  check chunksize  make sure we're at the correct offset  Round down to previous block  already where we need to be  The main decoder loop  3rd args(read_buffer) is unnecessary in the format which AIFF supports.  End of stream **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2005 Jvo Studer
 * Copyright (c) 2009 Yoshihisa Uchida
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** This codec supports the following AIFC compressionType formats  AIFC PCM Format (big endian)  AIFC ALaw compressed  AIFC uLaw compressed  AIFC IEEE float 32 bit  AIFC IEEE float 64 bit  AIFC QuickTime IMA ADPCM  this is the codec entry point  Generic codec initialisation  this is called for each file to process  rockbox: comment 'set but unused' variables
    uint32_t num_sample_frames = 0;
     position of the first block in file  Need to save offset for later use (cleared indirectly by advance_buffer)  assume the AIFF header is less than 1024 bytes  read until 'SSND' chunk, which typically is last  chunkSize  num_channels  num_sample_frames 
            num_sample_frames = ((buf[10]<<24)|(buf[11]<<16)|(buf[12]<<8)
                                |buf[13]);
             sample_size  sample_rate (don't use last 4 bytes, only integer fs)  compressionType (AIFC only) 
                 * aiff's sample_size is uncompressed sound data size.
                 * But format.bitspersample is compressed sound data size.
                  calc average bytes per second  offset2snd  block_size  advance to the beginning of data  Format Version Chunk (AIFC only chunk)  skip this chunk  Text chunks containing only metadata  skip this chunk  odd chunk sizes must be padded  while 'SSND'  check chunksize  make sure we're at the correct offset  Round down to previous block  already where we need to be  The main decoder loop  3rd args(read_buffer) is unnecessary in the format which AIFF supports.  End of stream **************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * $Id$
 *
 * Copyright (c) 2005 Jvo Studer
 * Copyright (c) 2009 Yoshihisa Uchida
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 *************************************************************************** This codec supports the following AIFC compressionType formats  AIFC PCM Format (big endian)  AIFC ALaw compressed  AIFC uLaw compressed  AIFC IEEE float 32 bit  AIFC IEEE float 64 bit  AIFC QuickTime IMA ADPCM  this is the codec entry point  Generic codec initialisation  this is called for each file to process  rockbox: comment 'set but unused' variables
    uint32_t num_sample_frames = 0;
     position of the first block in file  Need to save offset for later use (cleared indirectly by advance_buffer)  assume the AIFF header is less than 1024 bytes  read until 'SSND' chunk, which typically is last  chunkSize  num_channels  num_sample_frames 
            num_sample_frames = ((buf[10]<<24)|(buf[11]<<16)|(buf[12]<<8)
                                |buf[13]);
             sample_size  sample_rate (don't use last 4 bytes, only integer fs)  compressionType (AIFC only) 
                 * aiff's sample_size is uncompressed sound data size.
                 * But format.bitspersample is compressed sound data size.
                  calc average bytes per second  offset2snd  block_size  advance to the beginning of data  Format Version Chunk (AIFC only chunk)  skip this chunk  Text chunks containing only metadata  skip this chunk  odd chunk sizes must be padded  while 'SSND'  check chunksize  make sure we're at the correct offset  Round down to previous block  already where we need to be  The main decoder loop  3rd args(read_buffer) is unnecessary in the format which AIFF supports.  End of stream 