
 * Common bit i/o utils
 * Copyright (c) 2000, 2001 Fabrice Bellard
 * Copyright (c) 2002-2004 Michael Niedermayer <michaelni@gmx.at>
 * Copyright (c) 2010 Loren Merritt
 *
 * alternative bitstream reader & writer by Michael Niedermayer <michaelni@gmx.at>
 *
 * This file is part of FFmpeg.
 *
 * FFmpeg is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * FFmpeg is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with FFmpeg; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 *
 * @file
 * bitstream api.
 #include "avcodec.h" unused in rockbox VLC decoding #define DEBUG_VLC            abort(); //cant do anything, init_vlc() is used with too little memory        vlc->table_allocated += (1 << vlc->bits);        vlc->table = av_realloc(vlc->table,                                sizeof(VLC_TYPE) * 2 * vlc->table_allocated); 
static av_always_inline uint32_t bitswap_32(uint32_t x) {
    return av_reverse[x&0xFF]<<24
         | av_reverse[(x>>8)&0xFF]<<16
         | av_reverse[(x>>16)&0xFF]<<8
         | av_reverse[x>>24];
}
* codeword, with the first bit-to-be-read in the msb
     * (even if intended for a little-endian bitstream reader)  packed to save space *
 * Build VLC decoding tables suitable for use with get_vlc().
 *
 * @param vlc            the context to be initted
 *
 * @param table_nb_bits  max length of vlc codes to store directly in this table
 *                       (Longer codes are delegated to subtables.)
 *
 * @param nb_codes       number of elements in codes[]
 *
 * @param codes          descriptions of the vlc codes
 *                       These must be ordered such that codes going into the same subtable are contiguous.
 *                       Sorting by VLCcode.code is sufficient, though not necessary.
 bitscodes first pass: map codes and compute auxillary table sizes  no need to add another table             if (flags & INIT_VLC_LE) {
                j = bitswap_32(code);
                inc = 1 << n;
            } bitsbits fill auxiliary table recursively (flags & INIT_VLC_LE) ? bitswap_32(code_prefix) >> (32 - table_nb_bits) : note: realloc has been done, so reload tables code Build VLC decoding tables suitable for use with get_vlc().

   'nb_bits' set thee decoding table size (2^nb_bits) entries. The
   bigger it is, the faster is the decoding. But it should not be too
   big to save memory and L1 cache. '9' is a good compromise.

   'nb_codes' : number of vlcs codes

   'bits' : table which gives the size (in bits) of each vlc code.

   'codes' : table which gives the bit pattern of of each vlc code.

   'symbols' : table which gives the values to be returned from get_vlc().

   'xxx_wrap' : give the number of bytes between each entry of the
   'bits' or 'codes' tables.

   'xxx_size' : gives the number of bytes of each entry of the 'bits'
   or 'codes' tables.

   'wrap' and 'size' allows to use any memory configuration and types
   (byte/word/long) to store the 'bits', 'codes', and 'symbols' tables.

   'use_static' should be set to 1 for tables, which should be freed
   with av_free_static(), 0 if free_vlc() will be used.
 Rockbox: support for INIT_VLC_LE is currently disabled since none of our
   codecs use it, there's a LUT based bit reverse function for this commented
   out above (bitswap_32) and an inline asm version in libtremor/codebook.c
   if we ever want this  worst case is wma, which has one table with 1336 entries             abort(); // fatal error, we are called on a partially initialized table    buf = av_malloc((nb_codes+1)*sizeof(VLCcode));    assert(symbols_size <= 2 || !symbols);        if (flags & INIT_VLC_LE)            buf[j].code = bitswap_32(buf[j].code);        else qsort is the slowest part of init_vlc, and could probably be improved or avoided    av_free(buf);        av_freep(&vlc->table); not used in rockbox
void free_vlc(VLC *vlc)
{
    av_freep(&vlc->table);
}

 * Common bit i/o utils
 * Copyright (c) 2000, 2001 Fabrice Bellard
 * Copyright (c) 2002-2004 Michael Niedermayer <michaelni@gmx.at>
 * Copyright (c) 2010 Loren Merritt
 *
 * alternative bitstream reader & writer by Michael Niedermayer <michaelni@gmx.at>
 *
 * This file is part of FFmpeg.
 *
 * FFmpeg is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * FFmpeg is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with FFmpeg; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 *
 * @file
 * bitstream api.
 #include "avcodec.h" unused in rockbox VLC decoding #define DEBUG_VLC            abort(); //cant do anything, init_vlc() is used with too little memory        vlc->table_allocated += (1 << vlc->bits);        vlc->table = av_realloc(vlc->table,                                sizeof(VLC_TYPE) * 2 * vlc->table_allocated); 
static av_always_inline uint32_t bitswap_32(uint32_t x) {
    return av_reverse[x&0xFF]<<24
         | av_reverse[(x>>8)&0xFF]<<16
         | av_reverse[(x>>16)&0xFF]<<8
         | av_reverse[x>>24];
}
* codeword, with the first bit-to-be-read in the msb
     * (even if intended for a little-endian bitstream reader)  packed to save space *
 * Build VLC decoding tables suitable for use with get_vlc().
 *
 * @param vlc            the context to be initted
 *
 * @param table_nb_bits  max length of vlc codes to store directly in this table
 *                       (Longer codes are delegated to subtables.)
 *
 * @param nb_codes       number of elements in codes[]
 *
 * @param codes          descriptions of the vlc codes
 *                       These must be ordered such that codes going into the same subtable are contiguous.
 *                       Sorting by VLCcode.code is sufficient, though not necessary.
 bitscodes first pass: map codes and compute auxillary table sizes  no need to add another table             if (flags & INIT_VLC_LE) {
                j = bitswap_32(code);
                inc = 1 << n;
            } bitsbits fill auxiliary table recursively (flags & INIT_VLC_LE) ? bitswap_32(code_prefix) >> (32 - table_nb_bits) : note: realloc has been done, so reload tables code Build VLC decoding tables suitable for use with get_vlc().

   'nb_bits' set thee decoding table size (2^nb_bits) entries. The
   bigger it is, the faster is the decoding. But it should not be too
   big to save memory and L1 cache. '9' is a good compromise.

   'nb_codes' : number of vlcs codes

   'bits' : table which gives the size (in bits) of each vlc code.

   'codes' : table which gives the bit pattern of of each vlc code.

   'symbols' : table which gives the values to be returned from get_vlc().

   'xxx_wrap' : give the number of bytes between each entry of the
   'bits' or 'codes' tables.

   'xxx_size' : gives the number of bytes of each entry of the 'bits'
   or 'codes' tables.

   'wrap' and 'size' allows to use any memory configuration and types
   (byte/word/long) to store the 'bits', 'codes', and 'symbols' tables.

   'use_static' should be set to 1 for tables, which should be freed
   with av_free_static(), 0 if free_vlc() will be used.
 Rockbox: support for INIT_VLC_LE is currently disabled since none of our
   codecs use it, there's a LUT based bit reverse function for this commented
   out above (bitswap_32) and an inline asm version in libtremor/codebook.c
   if we ever want this  worst case is wma, which has one table with 1336 entries             abort(); // fatal error, we are called on a partially initialized table    buf = av_malloc((nb_codes+1)*sizeof(VLCcode));    assert(symbols_size <= 2 || !symbols);        if (flags & INIT_VLC_LE)            buf[j].code = bitswap_32(buf[j].code);        else qsort is the slowest part of init_vlc, and could probably be improved or avoided    av_free(buf);        av_freep(&vlc->table); not used in rockbox
void free_vlc(VLC *vlc)
{
    av_freep(&vlc->table);
}

 * Common bit i/o utils
 * Copyright (c) 2000, 2001 Fabrice Bellard
 * Copyright (c) 2002-2004 Michael Niedermayer <michaelni@gmx.at>
 * Copyright (c) 2010 Loren Merritt
 *
 * alternative bitstream reader & writer by Michael Niedermayer <michaelni@gmx.at>
 *
 * This file is part of FFmpeg.
 *
 * FFmpeg is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * FFmpeg is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with FFmpeg; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 *
 * @file
 * bitstream api.
 #include "avcodec.h" unused in rockbox VLC decoding #define DEBUG_VLC            abort(); //cant do anything, init_vlc() is used with too little memory        vlc->table_allocated += (1 << vlc->bits);        vlc->table = av_realloc(vlc->table,                                sizeof(VLC_TYPE) * 2 * vlc->table_allocated); 
static av_always_inline uint32_t bitswap_32(uint32_t x) {
    return av_reverse[x&0xFF]<<24
         | av_reverse[(x>>8)&0xFF]<<16
         | av_reverse[(x>>16)&0xFF]<<8
         | av_reverse[x>>24];
}
* codeword, with the first bit-to-be-read in the msb
     * (even if intended for a little-endian bitstream reader)  packed to save space *
 * Build VLC decoding tables suitable for use with get_vlc().
 *
 * @param vlc            the context to be initted
 *
 * @param table_nb_bits  max length of vlc codes to store directly in this table
 *                       (Longer codes are delegated to subtables.)
 *
 * @param nb_codes       number of elements in codes[]
 *
 * @param codes          descriptions of the vlc codes
 *                       These must be ordered such that codes going into the same subtable are contiguous.
 *                       Sorting by VLCcode.code is sufficient, though not necessary.
 bitscodes first pass: map codes and compute auxillary table sizes  no need to add another table             if (flags & INIT_VLC_LE) {
                j = bitswap_32(code);
                inc = 1 << n;
            } bitsbits fill auxiliary table recursively (flags & INIT_VLC_LE) ? bitswap_32(code_prefix) >> (32 - table_nb_bits) : note: realloc has been done, so reload tables code Build VLC decoding tables suitable for use with get_vlc().

   'nb_bits' set thee decoding table size (2^nb_bits) entries. The
   bigger it is, the faster is the decoding. But it should not be too
   big to save memory and L1 cache. '9' is a good compromise.

   'nb_codes' : number of vlcs codes

   'bits' : table which gives the size (in bits) of each vlc code.

   'codes' : table which gives the bit pattern of of each vlc code.

   'symbols' : table which gives the values to be returned from get_vlc().

   'xxx_wrap' : give the number of bytes between each entry of the
   'bits' or 'codes' tables.

   'xxx_size' : gives the number of bytes of each entry of the 'bits'
   or 'codes' tables.

   'wrap' and 'size' allows to use any memory configuration and types
   (byte/word/long) to store the 'bits', 'codes', and 'symbols' tables.

   'use_static' should be set to 1 for tables, which should be freed
   with av_free_static(), 0 if free_vlc() will be used.
 Rockbox: support for INIT_VLC_LE is currently disabled since none of our
   codecs use it, there's a LUT based bit reverse function for this commented
   out above (bitswap_32) and an inline asm version in libtremor/codebook.c
   if we ever want this  worst case is wma, which has one table with 1336 entries             abort(); // fatal error, we are called on a partially initialized table    buf = av_malloc((nb_codes+1)*sizeof(VLCcode));    assert(symbols_size <= 2 || !symbols);        if (flags & INIT_VLC_LE)            buf[j].code = bitswap_32(buf[j].code);        else qsort is the slowest part of init_vlc, and could probably be improved or avoided    av_free(buf);        av_freep(&vlc->table); not used in rockbox
void free_vlc(VLC *vlc)
{
    av_freep(&vlc->table);
}
