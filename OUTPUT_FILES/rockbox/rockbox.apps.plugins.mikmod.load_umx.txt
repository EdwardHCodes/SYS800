 MikMod sound library
 * (c) 2003-2004 Raphael Assenat and others - see file
 * AUTHORS for complete list.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Library General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
  Epic Games Unreal UMX container loading for libmikmod
 * Written by O. Sezer <sezero@users.sourceforge.net>
 *
 * Records data type/offset info in its Test() function, then acts
 * as a middle-man, forwarding calls to the real loader units. It
 * requires that the MREADER implementation in use always respects
 * its iobase fields. Like all other libmikmod loaders, this code
 * is not reentrant yet.
 *
 * UPKG parsing partially based on Unreal Media Ripper (UMR) v0.3
 * by Andy Ward <wardwh@swbell.net>, with additional updates
 * by O. Sezer - see git repo at https://github.com/sezero/umr/
 *
 * The cheaper way, i.e. linear search of music object like libxmp
 * and libmodplug does, is possible. With this however we're using
 * the embedded offset, size and object type directly from the umx
 * file, and I feel safer with it.
 ========== upkg defs  FCompactIndex  for upkg versions >= 68  UPKG_HDR_TAG  number of names in name table (>= 0)  offset to name table  (>= 0)  num. exports in export table  (>= 0)  offset to export table (>= 0)  num. imports in export table  (>= 0)  offset to import table (>= 0)  number of GUIDs in heritage table (>= 1) and table's offset:
	 * only with versions < 68.  with versions >= 68:  a GUID, a dword for generation count
	 * and export_count and name_count dwords for each generation:  64 bytes up until here struct _genhist *gen; compile time assert for upkg_hdr size typedef int _check_hdrsize[2 * (offsetof(struct upkg_hdr, gen) == UPKG_HDR_SIZE) - 1];========== Supported content types ========== UPKG parsing  decode an FCompactIndex.
 * original documentation by Tim Sweeney was at
 * http://unreal.epicgames.com/Packages.htm
 * also see Unreal Wiki:
 * http://wiki.beyondunreal.com/Legacy:Package_File_Format/Data_Details
 return -1; SpaceMarines.umx and Starseek.umx from Return to NaPali
		 * report as "s3m" whereas the actual music format is "it"  00 00 00 00 00 00 00 00  81 00 00 00 00 00 FF FF FF FF FF FF FF FF 00 00  skip junk  type_name  skip export size  offset for real data  return type_name index  numchars *including* terminator  1 for buf[0], 4 for int32_t name_flags  1 for terminator, 4 for int32_t name_flags  Find the offset and size of the first IT, S3M or XM
	 * by parsing the exports table. The umx files should
	 * have only one export. Kran32.umx from Unreal has two,
	 * but both pointing to the same music.  skip class_index  skip super_index  skip int32 package_index  skip object_name  skip int32 object_flags  get serial_size  get serial_offset  byte swap the header - all members are 32 bit LE values  Unreal beta -  1998  Unreal  Unreal Tournament  Return to NaPali  Unreal Tournament  Unreal Tournament  Unreal Tournament  Tactical Ops  Mobile Forces ========== Loader vars ========== Loader code  Without Test() being called first, Load[Title] is never called.
 * A Test() is always followed by either a Load() or a LoadTitle().
 * A Load() is always followed by Cleanup() regardless of success.
 *
 * Therefore, in between Test() and LoadTitle() or Load()/Cleanup(),
 * we must remember the type and the offset of the umx music data,
 * and always clear it when returning from LoadTitle() or Cleanup().
  set reader iobase to the umx object offset  set reader iobase to the umx object offset ========== Loader information  ex:set ts=8:  MikMod sound library
 * (c) 2003-2004 Raphael Assenat and others - see file
 * AUTHORS for complete list.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Library General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
  Epic Games Unreal UMX container loading for libmikmod
 * Written by O. Sezer <sezero@users.sourceforge.net>
 *
 * Records data type/offset info in its Test() function, then acts
 * as a middle-man, forwarding calls to the real loader units. It
 * requires that the MREADER implementation in use always respects
 * its iobase fields. Like all other libmikmod loaders, this code
 * is not reentrant yet.
 *
 * UPKG parsing partially based on Unreal Media Ripper (UMR) v0.3
 * by Andy Ward <wardwh@swbell.net>, with additional updates
 * by O. Sezer - see git repo at https://github.com/sezero/umr/
 *
 * The cheaper way, i.e. linear search of music object like libxmp
 * and libmodplug does, is possible. With this however we're using
 * the embedded offset, size and object type directly from the umx
 * file, and I feel safer with it.
 ========== upkg defs  FCompactIndex  for upkg versions >= 68  UPKG_HDR_TAG  number of names in name table (>= 0)  offset to name table  (>= 0)  num. exports in export table  (>= 0)  offset to export table (>= 0)  num. imports in export table  (>= 0)  offset to import table (>= 0)  number of GUIDs in heritage table (>= 1) and table's offset:
	 * only with versions < 68.  with versions >= 68:  a GUID, a dword for generation count
	 * and export_count and name_count dwords for each generation:  64 bytes up until here struct _genhist *gen; compile time assert for upkg_hdr size typedef int _check_hdrsize[2 * (offsetof(struct upkg_hdr, gen) == UPKG_HDR_SIZE) - 1];========== Supported content types ========== UPKG parsing  decode an FCompactIndex.
 * original documentation by Tim Sweeney was at
 * http://unreal.epicgames.com/Packages.htm
 * also see Unreal Wiki:
 * http://wiki.beyondunreal.com/Legacy:Package_File_Format/Data_Details
 return -1; SpaceMarines.umx and Starseek.umx from Return to NaPali
		 * report as "s3m" whereas the actual music format is "it"  00 00 00 00 00 00 00 00  81 00 00 00 00 00 FF FF FF FF FF FF FF FF 00 00  skip junk  type_name  skip export size  offset for real data  return type_name index  numchars *including* terminator  1 for buf[0], 4 for int32_t name_flags  1 for terminator, 4 for int32_t name_flags  Find the offset and size of the first IT, S3M or XM
	 * by parsing the exports table. The umx files should
	 * have only one export. Kran32.umx from Unreal has two,
	 * but both pointing to the same music.  skip class_index  skip super_index  skip int32 package_index  skip object_name  skip int32 object_flags  get serial_size  get serial_offset  byte swap the header - all members are 32 bit LE values  Unreal beta -  1998  Unreal  Unreal Tournament  Return to NaPali  Unreal Tournament  Unreal Tournament  Unreal Tournament  Tactical Ops  Mobile Forces ========== Loader vars ========== Loader code  Without Test() being called first, Load[Title] is never called.
 * A Test() is always followed by either a Load() or a LoadTitle().
 * A Load() is always followed by Cleanup() regardless of success.
 *
 * Therefore, in between Test() and LoadTitle() or Load()/Cleanup(),
 * we must remember the type and the offset of the umx music data,
 * and always clear it when returning from LoadTitle() or Cleanup().
  set reader iobase to the umx object offset  set reader iobase to the umx object offset ========== Loader information  ex:set ts=8:  MikMod sound library
 * (c) 2003-2004 Raphael Assenat and others - see file
 * AUTHORS for complete list.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Library General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
  Epic Games Unreal UMX container loading for libmikmod
 * Written by O. Sezer <sezero@users.sourceforge.net>
 *
 * Records data type/offset info in its Test() function, then acts
 * as a middle-man, forwarding calls to the real loader units. It
 * requires that the MREADER implementation in use always respects
 * its iobase fields. Like all other libmikmod loaders, this code
 * is not reentrant yet.
 *
 * UPKG parsing partially based on Unreal Media Ripper (UMR) v0.3
 * by Andy Ward <wardwh@swbell.net>, with additional updates
 * by O. Sezer - see git repo at https://github.com/sezero/umr/
 *
 * The cheaper way, i.e. linear search of music object like libxmp
 * and libmodplug does, is possible. With this however we're using
 * the embedded offset, size and object type directly from the umx
 * file, and I feel safer with it.
 ========== upkg defs  FCompactIndex  for upkg versions >= 68  UPKG_HDR_TAG  number of names in name table (>= 0)  offset to name table  (>= 0)  num. exports in export table  (>= 0)  offset to export table (>= 0)  num. imports in export table  (>= 0)  offset to import table (>= 0)  number of GUIDs in heritage table (>= 1) and table's offset:
	 * only with versions < 68.  with versions >= 68:  a GUID, a dword for generation count
	 * and export_count and name_count dwords for each generation:  64 bytes up until here struct _genhist *gen; compile time assert for upkg_hdr size typedef int _check_hdrsize[2 * (offsetof(struct upkg_hdr, gen) == UPKG_HDR_SIZE) - 1];========== Supported content types ========== UPKG parsing  decode an FCompactIndex.
 * original documentation by Tim Sweeney was at
 * http://unreal.epicgames.com/Packages.htm
 * also see Unreal Wiki:
 * http://wiki.beyondunreal.com/Legacy:Package_File_Format/Data_Details
 return -1; SpaceMarines.umx and Starseek.umx from Return to NaPali
		 * report as "s3m" whereas the actual music format is "it"  00 00 00 00 00 00 00 00  81 00 00 00 00 00 FF FF FF FF FF FF FF FF 00 00  skip junk  type_name  skip export size  offset for real data  return type_name index  numchars *including* terminator  1 for buf[0], 4 for int32_t name_flags  1 for terminator, 4 for int32_t name_flags  Find the offset and size of the first IT, S3M or XM
	 * by parsing the exports table. The umx files should
	 * have only one export. Kran32.umx from Unreal has two,
	 * but both pointing to the same music.  skip class_index  skip super_index  skip int32 package_index  skip object_name  skip int32 object_flags  get serial_size  get serial_offset  byte swap the header - all members are 32 bit LE values  Unreal beta -  1998  Unreal  Unreal Tournament  Return to NaPali  Unreal Tournament  Unreal Tournament  Unreal Tournament  Tactical Ops  Mobile Forces ========== Loader vars ========== Loader code  Without Test() being called first, Load[Title] is never called.
 * A Test() is always followed by either a Load() or a LoadTitle().
 * A Load() is always followed by Cleanup() regardless of success.
 *
 * Therefore, in between Test() and LoadTitle() or Load()/Cleanup(),
 * we must remember the type and the offset of the umx music data,
 * and always clear it when returning from LoadTitle() or Cleanup().
  set reader iobase to the umx object offset  set reader iobase to the umx object offset ========== Loader information  ex:set ts=8: 