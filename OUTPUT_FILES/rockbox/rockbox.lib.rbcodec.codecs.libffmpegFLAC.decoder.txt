
 * FLAC (Free Lossless Audio Codec) decoder
 * Copyright (c) 2003 Alex Beregszaszi
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * @file flac.c
 * FLAC (Free Lossless Audio Codec) decoder
 * @author Alex Beregszaszi
 *
 * For more information on the FLAC format, visit:
 *  http://flac.sourceforge.net/
 *
 * This decoder can be used in 1 of 2 ways: Either raw FLAC data can be fed
 * through, starting from the initial 'fLaC' signature; or by passing the
 * 34-byte streaminfo structure through avctx->extradata[_size] followed
 * by data starting with the 0xFFF8 marker.
 fprintf(stderr,"illegal residual coding method %d\n", method_type);fprintf(stderr,"fixed len partition\n"); warm up samples  warm up samples fprintf(stderr,"invalid coeff precision\n");fprintf(stderr,"qlevel %d not supported, maybe buggy stream\n", qlevel);fprintf(stderr,"invalid subframe padding\n");    wasted = get_bits1(&s->gb);    if (wasted)    {        while (!get_bits1(&s->gb))            wasted++;        if (wasted)            wasted++;        s->curr_bps -= wasted;    }fprintf(stderr,"%d wasted bits\n", wasted);FIXME use av_log2 for typesfprintf(stderr,"coding type: constant\n");fprintf(stderr,"coding type: verbatim\n");fprintf(stderr,"coding type: fixed\n");fprintf(stderr,"coding type: lpc\n");fprintf(stderr,"Unknown coding type: %d\n",type); channel assignment  Get the samplenumber of the first sample in this block  samplenumber actually contains the frame number for streams
       with a constant block size - so we multiply by blocksize to
       get the actual sample number ((blocksize_code == 6) || (blocksize_code == 7)) && frame footer  data crc  3.0 channel order: FL FR FC  LF = 0.66 LF + 0.33 FC
               LR = 0.66 LR + 0.33 FC  1/3 ~= 5>>4  1/3 ~= 5>>4  4.0 channel order: FL FR RL RR  LF = 0.50 LF + 0.50 RL + 0.00 RR
               LR = 0.50 LR + 0.00 RL + 0.50 RR  5.0 channel order: FL FR FC RL RR  LF = 0.40 LF + 0.20 FC + 0.40 RL + 0.00 RR
               LR = 0.40 LR + 0.20 FC + 0.00 RL + 0.40 RR  3>>4 ~= 1/5  3>>4 ~= 1/5  5.1 channel order: FL FR FC SUB RL RR  LF = 0.33 LF + 0.16 SUB + 0.16 FC + 0.33 RL + 0.00 RR
               LR = 0.33 LR + 0.16 SUB + 0.16 FC + 0.00 RL + 0.33 RR  5>>5 ~= 1/6  5>>5 ~= 1/6  1.0 and 2.0 do not need downmix, other formats unknown.  Always decorrelate exactly the two supported channels. 
 * FLAC (Free Lossless Audio Codec) decoder
 * Copyright (c) 2003 Alex Beregszaszi
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * @file flac.c
 * FLAC (Free Lossless Audio Codec) decoder
 * @author Alex Beregszaszi
 *
 * For more information on the FLAC format, visit:
 *  http://flac.sourceforge.net/
 *
 * This decoder can be used in 1 of 2 ways: Either raw FLAC data can be fed
 * through, starting from the initial 'fLaC' signature; or by passing the
 * 34-byte streaminfo structure through avctx->extradata[_size] followed
 * by data starting with the 0xFFF8 marker.
 fprintf(stderr,"illegal residual coding method %d\n", method_type);fprintf(stderr,"fixed len partition\n"); warm up samples  warm up samples fprintf(stderr,"invalid coeff precision\n");fprintf(stderr,"qlevel %d not supported, maybe buggy stream\n", qlevel);fprintf(stderr,"invalid subframe padding\n");    wasted = get_bits1(&s->gb);    if (wasted)    {        while (!get_bits1(&s->gb))            wasted++;        if (wasted)            wasted++;        s->curr_bps -= wasted;    }fprintf(stderr,"%d wasted bits\n", wasted);FIXME use av_log2 for typesfprintf(stderr,"coding type: constant\n");fprintf(stderr,"coding type: verbatim\n");fprintf(stderr,"coding type: fixed\n");fprintf(stderr,"coding type: lpc\n");fprintf(stderr,"Unknown coding type: %d\n",type); channel assignment  Get the samplenumber of the first sample in this block  samplenumber actually contains the frame number for streams
       with a constant block size - so we multiply by blocksize to
       get the actual sample number ((blocksize_code == 6) || (blocksize_code == 7)) && frame footer  data crc  3.0 channel order: FL FR FC  LF = 0.66 LF + 0.33 FC
               LR = 0.66 LR + 0.33 FC  1/3 ~= 5>>4  1/3 ~= 5>>4  4.0 channel order: FL FR RL RR  LF = 0.50 LF + 0.50 RL + 0.00 RR
               LR = 0.50 LR + 0.00 RL + 0.50 RR  5.0 channel order: FL FR FC RL RR  LF = 0.40 LF + 0.20 FC + 0.40 RL + 0.00 RR
               LR = 0.40 LR + 0.20 FC + 0.00 RL + 0.40 RR  3>>4 ~= 1/5  3>>4 ~= 1/5  5.1 channel order: FL FR FC SUB RL RR  LF = 0.33 LF + 0.16 SUB + 0.16 FC + 0.33 RL + 0.00 RR
               LR = 0.33 LR + 0.16 SUB + 0.16 FC + 0.00 RL + 0.33 RR  5>>5 ~= 1/6  5>>5 ~= 1/6  1.0 and 2.0 do not need downmix, other formats unknown.  Always decorrelate exactly the two supported channels. 
 * FLAC (Free Lossless Audio Codec) decoder
 * Copyright (c) 2003 Alex Beregszaszi
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * @file flac.c
 * FLAC (Free Lossless Audio Codec) decoder
 * @author Alex Beregszaszi
 *
 * For more information on the FLAC format, visit:
 *  http://flac.sourceforge.net/
 *
 * This decoder can be used in 1 of 2 ways: Either raw FLAC data can be fed
 * through, starting from the initial 'fLaC' signature; or by passing the
 * 34-byte streaminfo structure through avctx->extradata[_size] followed
 * by data starting with the 0xFFF8 marker.
 fprintf(stderr,"illegal residual coding method %d\n", method_type);fprintf(stderr,"fixed len partition\n"); warm up samples  warm up samples fprintf(stderr,"invalid coeff precision\n");fprintf(stderr,"qlevel %d not supported, maybe buggy stream\n", qlevel);fprintf(stderr,"invalid subframe padding\n");    wasted = get_bits1(&s->gb);    if (wasted)    {        while (!get_bits1(&s->gb))            wasted++;        if (wasted)            wasted++;        s->curr_bps -= wasted;    }fprintf(stderr,"%d wasted bits\n", wasted);FIXME use av_log2 for typesfprintf(stderr,"coding type: constant\n");fprintf(stderr,"coding type: verbatim\n");fprintf(stderr,"coding type: fixed\n");fprintf(stderr,"coding type: lpc\n");fprintf(stderr,"Unknown coding type: %d\n",type); channel assignment  Get the samplenumber of the first sample in this block  samplenumber actually contains the frame number for streams
       with a constant block size - so we multiply by blocksize to
       get the actual sample number ((blocksize_code == 6) || (blocksize_code == 7)) && frame footer  data crc  3.0 channel order: FL FR FC  LF = 0.66 LF + 0.33 FC
               LR = 0.66 LR + 0.33 FC  1/3 ~= 5>>4  1/3 ~= 5>>4  4.0 channel order: FL FR RL RR  LF = 0.50 LF + 0.50 RL + 0.00 RR
               LR = 0.50 LR + 0.00 RL + 0.50 RR  5.0 channel order: FL FR FC RL RR  LF = 0.40 LF + 0.20 FC + 0.40 RL + 0.00 RR
               LR = 0.40 LR + 0.20 FC + 0.00 RL + 0.40 RR  3>>4 ~= 1/5  3>>4 ~= 1/5  5.1 channel order: FL FR FC SUB RL RR  LF = 0.33 LF + 0.16 SUB + 0.16 FC + 0.33 RL + 0.00 RR
               LR = 0.33 LR + 0.16 SUB + 0.16 FC + 0.00 RL + 0.33 RR  5>>5 ~= 1/6  5>>5 ~= 1/6  1.0 and 2.0 do not need downmix, other formats unknown.  Always decorrelate exactly the two supported channels. 