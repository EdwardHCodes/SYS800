******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************
 * @author Jeff Plourde
 *
  private final MutableEnumerationUpdate cLock = new MutableEnumerationUpdateImpl(PulseOximeter.C_LOCK); if("SPO2_C_LOCK".equals(name)) { if("ON".equals(value)) { cLock.setValue(PulseOximeter.CLock.On); gateway.update(DemoBernoulli.this, cLock); } else if("OFF".equals(value)) { cLock.setValue(PulseOximeter.CLock.Off); gateway.update(DemoBernoulli.this, cLock); } else { log.warn("Unknown SPO2_C_LOCK value:"+value); } return; } MutableTextUpdate text = texts.get(name); log.trace(numeric.toString()); } else if(null != text) { text.setValue(value); gateway.update(DemoBernoulli.this, text); log.trace(text.toString()); return; In DDS world continually republishing the same sample is JUST NOISE If it's not a class then maybe it's a static member Random UDI is for the device module this allows the module to exist within the ICE in a disconnected state and allows other components to request a connection to the attached device Staying in the Connecting state while awaiting another time interval This thread will drive the next state transition close should cause the processing thread to end... which will spawn a connect on its exit } catch (JAXBException e) { log.error(e.getMessage(), e); private final Runnable nibpRequest = new Runnable() { public void run() { int port = 2050; try { String host = DemoBernoulli.this.host; String bid = guidUpdate.getValue(); if(null != host && bid != null && !"".equals(bid)) { if(Bernoulli.sendCommand(DemoBernoulli.this.host, port, guidUpdate.getValue(), Bernoulli.CMD_REQUEST_NIBP)) { log.debug("Successfully requested NIBP"); } else { log.error("Failed to request NIBP"); } } else { log.warn("Insufficient info to request NIBP host="+host+" bid="+bid); } } catch (IOException e) { log.error("Error requesting NIBP", e); } } }; @Override public void update(IdentifiableUpdate<?> command) { if(NoninvasiveBloodPressure.REQUEST_NIBP.equals(command.getIdentifier())) { executor.schedule(nibpRequest, 0L, TimeUnit.MILLISECONDS); } super.update(command); }