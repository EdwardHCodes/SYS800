 Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *  Do all the WAD I/O, get map description,
 *  set up initial state and misc. LUTs.
 *
 *----------------------------------------------------------------------------- MAP related Lookup tables. Store VERTEXES, LINEDEFS, SIDEDEFS, etc.////////////////////////////////////////////////////////////////////////////////////////// figgi 08/21/00 -- constants and globals for glBsp support figgi -- suppport for new GL_VERT format v2.0 A separator name, GL_ExMx or GL_MAPxx Extra Vertices Segs, from linedefs & minisegs SubSectors, list of segs GL BSP nodes////////////////////////////////////////////////////////////////////////////////////////// BLOCKMAP Created from axis aligned bounding box of the map, a rectangular array of blocks of size ... Used to speed up collision detection by spatial subdivision in 2D. Blockmap size. size in mapblocks killough 3/1/98: remove blockmap limit internally: was short -- killough offsets in blockmap are from here was short -- killough origin of block map for thing chains REJECT For fast sight rejection. Speeds up enemy AI by skipping detailed  LineOf Sight calculation. Without the special effect, this could be used as a PVS lookup as well. cph - store reject lump num if cached cph - const* Maintain single and multi player starting spots. 1/11/98 killough: Remove limit on deathmatch starts killough killough P_LoadVertexes killough 5/3/98: reformatted, cleaned up cph - const Determine number of lumps:  total lump length / vertex record length. Allocate zone memory for buffer. Load data into cache. cph - wad handling updated Copy and convert vertex coordinates, internal representation as fixed. Free buffer memory. P_LoadSegs killough 5/3/98: reformatted, cleaned up cph - const cph - wad lump handling updated figgi -- there are no minisegs in classic BSP nodes killough 5/3/98: ignore 2s flag if second sidedef missing: cph - release the data P_LoadSubsectors killough 5/3/98: reformatted, cleaned up cph - const* cph - wad lump handling updated cph - release the data P_LoadSectors killough 5/3/98: reformatted, cleaned up cph - const* cph - wad lump handling updated phares 3/14/98jff 2/26/98 add fields to support locking out stair retriggering until build completes killough 3/7/98: floor and ceiling flats offsets sector used to get floor and ceiling height sector used to get floor lighting killough 3/7/98: end changes killough 4/11/98 sector used to get ceiling lighting: killough 4/4/98: colormaps: killough 10/98: sky textures coming from sidedefs: cph - release the data P_LoadNodes killough 5/3/98: reformatted, cleaned up cph - const* cph - wad lump handling updated cph - release the data P_LoadThings killough 5/3/98: reformatted, cleaned up this needed to be added as the SHORT calls were overwriting eachother on reload cph - wad lump handling updated, const* Do not spawn cool, new monsters if !commercial Arachnotron Archvile Boss Brain Boss Shooter Hell Knight Mancubus Pain Elemental Former Human Commando Revenant Wolf SS Do spawn all other stuff. cph - release the data P_LoadLineDefs Also counts secret lines for intermissions.        ^^^ ??? killough ??? Does this mean secrets used to be linedef-based, rather than sector-based? killough 4/4/98: split into two functions, to allow sidedef overloading killough 5/3/98: reformatted, cleaned up cph - const* cph - wad lump handling updated killough 4/11/98: no translucency by default killough 4/4/98: support special sidedef interpretation below cph - release the lump killough 4/4/98: delay using sidedefs until they are loaded killough 5/3/98: reformatted, cleaned up cph 2002/07/20 - these errors are fatal if not fixed, so apply them in compatibility mode - a desync is better than a crash! killough 11/98: fix common wad errors (missing sidedefs): Substitute dummy sidedef for missing right side cph - print a warning about the bug Clear 2s flag for missing left side cph - print a warning about the bug killough 4/11/98: handle special types killough 4/11/98: translucent 2s textures translucency from sidedef if tag==0, affect this linedef only if tag!=0, affect all matching linedefs P_LoadSideDefs killough 4/4/98: split into two functions killough 4/4/98: delay using texture names until after linedefs are loaded, to allow overloading. killough 5/3/98: reformatted, cleaned up cph - const*, wad lump handling updated killough 4/4/98: allow sidedef texture names to be overloaded killough 4/11/98: refined to allow colormaps to work as wall textures if invalid as colormaps but valid as textures. variable colormap via 242 linedef killough 4/11/98: apply translucency to 2s normal texture normal cases cph - release the lump jff 10/6/98 New code added to speed up calculation of internal blockmap Algorithm is order of nlines*(ncols+nrows) not nlines*ncols*nrows places to shift rel position for cell num  mask for rel position within cell  size guardband around map used  jff 10/8/98 use guardband>0 jff 10/12/98 0 ok with + 1 in rows,cols type used to list lines in each block Subroutine to add a line number to a block list It simply returns if the line is already in the block Actually construct the blockmap lump from the level data This finds the intersection of each linedef with the column and row lines at the left and bottom of each blockmap cell. It then adds the line to all block lists touching the intersection. blockmap origin (lower left) blockmap dimensions array of pointers to lists of lines array of counters of line lists array keeping track of blocks/line number of cells = nrows*ncols total length of all blocklists init for map limits search scan for map limits, which the blockmap must enclose work in map coords, not fixed_t set up blockmap area to enclose level plus marginjff 10/12/98+1 needed formap exactly 1 cell create the array of pointers on NBlocks to blocklists also create an array of linelist counts on NBlocks finally make an array in which we can mark blocks done per line CPhipps - calloc's initialize each blocklist, and enter the trailing -1 in all blocklists note the linked list of lines grows backwards For each linedef in the wad, determine all blockmap blocks it touches, and add the linedef number to the blocklists for those blocks lines[i] map coords lines[i] slopetype block cell coords extremal lines[i] coords no blocks done for this linedef yet The line always belongs to the blocks containing its endpoints For each column, see where the line along its left edge, which it contains, intersects the Linedef i. Add i to each corresponding blocklist. don't interesect vertical lines with columns intersection of Linedef with x=xorg+(j<<blkshift) (y-y1)*dx = dy*(x-x1) y = dy*(x-x1)+y1*dx; (x,y) is intersection block row number y position within block outside blockmap, continue line doesn't touch column The cell that contains the intersection point is always added if the intersection is at a corner it depends on the slope (and whether the line extends past the intersection) which blocks are hit intersection at a corner   \ - blocks x,y-, x-,y   / - block x-,y-   - - block x-,y else not at corner: x-,y For each row, see where the line along its bottom edge, which it contains, intersects the Linedef i. Add i to all the corresponding blocklists. intersection of Linedef with y=yorg+(j<<blkshift) (x,y) on Linedef i satisfies: (y-y1)*dx = dy*(x-x1) x = dx*(y-y1)/dy+x1; (x,y) is intersection block column number x position within block outside blockmap, continue line doesn't touch row The cell that contains the intersection point is always added if the intersection is at a corner it depends on the slope (and whether the line extends past the intersection) which blocks are hit intersection at a corner   \ - blocks x,y-, x-,y   | - block x,y-   / - block x-,y- else not on a corner: x,y- Add initial 0 to all blocklists count the total number of lines (and 0's and -1's) Create the blockmap lump blockmap header offsets to lists and block lists set offset to block's list add the lines in each block's list to the blockmaplump delete each list node as we go free all temporary storage jff 10/6/98 End new code added to speed up calculation of internal blockmap P_LoadBlockMap killough 3/1/98: substantially modified to work towards removing blockmap limit (a wad limitation) killough 3/30/98: Rewritten to remove blockmap limit, though current algorithm is brute-force and unoptimal. cph - const*, wad lump handling updated killough 3/1/98: Expand wad blockmap into larger internal one, by treating all offsets except -1 as unsigned and zero-extending them. This potentially doubles the size of blockmaps allowed, because Doom originally considered the offsets as always signed. killough 3/1/98 cph - unlock the lump clear out mobj chains - CPhipps - use calloc P_GroupLines Builds sector line lists and subsector sector numbers. Finds block bounding boxes for sectors. killough 5/3/98: reformatted, cleaned up cph 18/8/99: rewritten to avoid O(numlines * numsectors) section It makes things more complicated, but saves seconds on big levels figgi 09/18/00 -- adapted for gl-nodes cph - convenient sub-function figgi count number of lines in each sector allocate line tables for each sector Enter those lines cph - For convenience, so I can sue the old code unchanged set the degenmobj_t to the middle of the bounding box adjust bounding box to map blocks killough 10/98 Remove slime trails. Slime trails are inherent to Doom's coordinate system -- i.e. there is nothing that a node builder can do to prevent slime trails ALL of the time, because it's a product of the integer coodinate system, and just because two lines pass through exact integer coordinates, doesn't necessarily mean that they will intersect at integer coordinates. Thus we must allow for fractional coordinates if we are to be able to split segs with node lines, as a node builder must do when creating a BSP tree. A wad file does not allow fractional coordinates, so node builders are out of luck except that they can try to limit the number of splits (they might also be able to detect the degree of roundoff error and try to avoid splits with a high degree of roundoff error). But we can use fractional coordinates here, inside the engine. It's like the difference between square inches and square miles, in terms of granularity. For each vertex of every seg, check to see whether it's also a vertex of the linedef associated with the seg (i.e, it's an endpoint). If it's not an endpoint, and it wasn't already moved, move the vertex towards the linedef by projecting it using the law of cosines. Formula:      2        2                         2        2    dx  x0 + dy  x1 + dx dy (y0 - y1)  dy  y0 + dx  y1 + dx dy (x0 - x1)   {---------------------------------, ---------------------------------}                  2     2                            2     2                dx  + dy                           dx  + dy (x0,y0) is the vertex being moved, and (x1,y1)-(x1+dx,y1+dy) is the reference linedef. Segs corresponding to orthogonal linedefs (exactly vertical or horizontal linedefs), which comprise at least half of all linedefs in most wads, don't need to be considered, because they almost never contribute to slime trails (because then any roundoff error is parallel to the linedef, which doesn't cause slime). Skipping simple orthogonal lines lets the code finish quicker. Please note: This section of code is not interchangable with TeamTNT's code which attempts to fix the same problem. Firelines (TM) is a Rezistered Trademark of MBF Productions killough 10/98 Hitlist for vertices Go through each segfiggi -- skip minisegs The parent linedef We can ignore orthogonal lines If we haven't processed vertex Mark this vertex as processed Exclude endpoints of linedefs Project the vertex back onto the parent linedef Obsfucated C contest entry:   :) P_SetupLevel killough 5/3/98: reformatted, cleaned up Initial height of PointOfView will be set by player think. Make sure all sounds are stopped before Z_FreeTags. cph - unlock the reject table if working with a devlopment map, reload it    W_Reload ();     killough 1/31/98: W_Reload obsolete find map name killough 1/24/98: simplify note: most of this ordering is important killough 3/1/98: P_LoadBlockMap call moved down to below killough 4/4/98: split load of sidedefs into two parts, to allow texture names to be used in special linedefs killough 10/98: remove slime trails from wad Note: you don't need to clear player queue slots -- a much simpler fix is in g_game.c -- killough 10/98 if deathmatch, randomly spawn the active players killough 3/26/98: Spawn icon landings: clear special respawning que set up world state preload graphics P_Init Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *  Do all the WAD I/O, get map description,
 *  set up initial state and misc. LUTs.
 *
 *----------------------------------------------------------------------------- MAP related Lookup tables. Store VERTEXES, LINEDEFS, SIDEDEFS, etc.////////////////////////////////////////////////////////////////////////////////////////// figgi 08/21/00 -- constants and globals for glBsp support figgi -- suppport for new GL_VERT format v2.0 A separator name, GL_ExMx or GL_MAPxx Extra Vertices Segs, from linedefs & minisegs SubSectors, list of segs GL BSP nodes////////////////////////////////////////////////////////////////////////////////////////// BLOCKMAP Created from axis aligned bounding box of the map, a rectangular array of blocks of size ... Used to speed up collision detection by spatial subdivision in 2D. Blockmap size. size in mapblocks killough 3/1/98: remove blockmap limit internally: was short -- killough offsets in blockmap are from here was short -- killough origin of block map for thing chains REJECT For fast sight rejection. Speeds up enemy AI by skipping detailed  LineOf Sight calculation. Without the special effect, this could be used as a PVS lookup as well. cph - store reject lump num if cached cph - const* Maintain single and multi player starting spots. 1/11/98 killough: Remove limit on deathmatch starts killough killough P_LoadVertexes killough 5/3/98: reformatted, cleaned up cph - const Determine number of lumps:  total lump length / vertex record length. Allocate zone memory for buffer. Load data into cache. cph - wad handling updated Copy and convert vertex coordinates, internal representation as fixed. Free buffer memory. P_LoadSegs killough 5/3/98: reformatted, cleaned up cph - const cph - wad lump handling updated figgi -- there are no minisegs in classic BSP nodes killough 5/3/98: ignore 2s flag if second sidedef missing: cph - release the data P_LoadSubsectors killough 5/3/98: reformatted, cleaned up cph - const* cph - wad lump handling updated cph - release the data P_LoadSectors killough 5/3/98: reformatted, cleaned up cph - const* cph - wad lump handling updated phares 3/14/98jff 2/26/98 add fields to support locking out stair retriggering until build completes killough 3/7/98: floor and ceiling flats offsets sector used to get floor and ceiling height sector used to get floor lighting killough 3/7/98: end changes killough 4/11/98 sector used to get ceiling lighting: killough 4/4/98: colormaps: killough 10/98: sky textures coming from sidedefs: cph - release the data P_LoadNodes killough 5/3/98: reformatted, cleaned up cph - const* cph - wad lump handling updated cph - release the data P_LoadThings killough 5/3/98: reformatted, cleaned up this needed to be added as the SHORT calls were overwriting eachother on reload cph - wad lump handling updated, const* Do not spawn cool, new monsters if !commercial Arachnotron Archvile Boss Brain Boss Shooter Hell Knight Mancubus Pain Elemental Former Human Commando Revenant Wolf SS Do spawn all other stuff. cph - release the data P_LoadLineDefs Also counts secret lines for intermissions.        ^^^ ??? killough ??? Does this mean secrets used to be linedef-based, rather than sector-based? killough 4/4/98: split into two functions, to allow sidedef overloading killough 5/3/98: reformatted, cleaned up cph - const* cph - wad lump handling updated killough 4/11/98: no translucency by default killough 4/4/98: support special sidedef interpretation below cph - release the lump killough 4/4/98: delay using sidedefs until they are loaded killough 5/3/98: reformatted, cleaned up cph 2002/07/20 - these errors are fatal if not fixed, so apply them in compatibility mode - a desync is better than a crash! killough 11/98: fix common wad errors (missing sidedefs): Substitute dummy sidedef for missing right side cph - print a warning about the bug Clear 2s flag for missing left side cph - print a warning about the bug killough 4/11/98: handle special types killough 4/11/98: translucent 2s textures translucency from sidedef if tag==0, affect this linedef only if tag!=0, affect all matching linedefs P_LoadSideDefs killough 4/4/98: split into two functions killough 4/4/98: delay using texture names until after linedefs are loaded, to allow overloading. killough 5/3/98: reformatted, cleaned up cph - const*, wad lump handling updated killough 4/4/98: allow sidedef texture names to be overloaded killough 4/11/98: refined to allow colormaps to work as wall textures if invalid as colormaps but valid as textures. variable colormap via 242 linedef killough 4/11/98: apply translucency to 2s normal texture normal cases cph - release the lump jff 10/6/98 New code added to speed up calculation of internal blockmap Algorithm is order of nlines*(ncols+nrows) not nlines*ncols*nrows places to shift rel position for cell num  mask for rel position within cell  size guardband around map used  jff 10/8/98 use guardband>0 jff 10/12/98 0 ok with + 1 in rows,cols type used to list lines in each block Subroutine to add a line number to a block list It simply returns if the line is already in the block Actually construct the blockmap lump from the level data This finds the intersection of each linedef with the column and row lines at the left and bottom of each blockmap cell. It then adds the line to all block lists touching the intersection. blockmap origin (lower left) blockmap dimensions array of pointers to lists of lines array of counters of line lists array keeping track of blocks/line number of cells = nrows*ncols total length of all blocklists init for map limits search scan for map limits, which the blockmap must enclose work in map coords, not fixed_t set up blockmap area to enclose level plus marginjff 10/12/98+1 needed formap exactly 1 cell create the array of pointers on NBlocks to blocklists also create an array of linelist counts on NBlocks finally make an array in which we can mark blocks done per line CPhipps - calloc's initialize each blocklist, and enter the trailing -1 in all blocklists note the linked list of lines grows backwards For each linedef in the wad, determine all blockmap blocks it touches, and add the linedef number to the blocklists for those blocks lines[i] map coords lines[i] slopetype block cell coords extremal lines[i] coords no blocks done for this linedef yet The line always belongs to the blocks containing its endpoints For each column, see where the line along its left edge, which it contains, intersects the Linedef i. Add i to each corresponding blocklist. don't interesect vertical lines with columns intersection of Linedef with x=xorg+(j<<blkshift) (y-y1)*dx = dy*(x-x1) y = dy*(x-x1)+y1*dx; (x,y) is intersection block row number y position within block outside blockmap, continue line doesn't touch column The cell that contains the intersection point is always added if the intersection is at a corner it depends on the slope (and whether the line extends past the intersection) which blocks are hit intersection at a corner   \ - blocks x,y-, x-,y   / - block x-,y-   - - block x-,y else not at corner: x-,y For each row, see where the line along its bottom edge, which it contains, intersects the Linedef i. Add i to all the corresponding blocklists. intersection of Linedef with y=yorg+(j<<blkshift) (x,y) on Linedef i satisfies: (y-y1)*dx = dy*(x-x1) x = dx*(y-y1)/dy+x1; (x,y) is intersection block column number x position within block outside blockmap, continue line doesn't touch row The cell that contains the intersection point is always added if the intersection is at a corner it depends on the slope (and whether the line extends past the intersection) which blocks are hit intersection at a corner   \ - blocks x,y-, x-,y   | - block x,y-   / - block x-,y- else not on a corner: x,y- Add initial 0 to all blocklists count the total number of lines (and 0's and -1's) Create the blockmap lump blockmap header offsets to lists and block lists set offset to block's list add the lines in each block's list to the blockmaplump delete each list node as we go free all temporary storage jff 10/6/98 End new code added to speed up calculation of internal blockmap P_LoadBlockMap killough 3/1/98: substantially modified to work towards removing blockmap limit (a wad limitation) killough 3/30/98: Rewritten to remove blockmap limit, though current algorithm is brute-force and unoptimal. cph - const*, wad lump handling updated killough 3/1/98: Expand wad blockmap into larger internal one, by treating all offsets except -1 as unsigned and zero-extending them. This potentially doubles the size of blockmaps allowed, because Doom originally considered the offsets as always signed. killough 3/1/98 cph - unlock the lump clear out mobj chains - CPhipps - use calloc P_GroupLines Builds sector line lists and subsector sector numbers. Finds block bounding boxes for sectors. killough 5/3/98: reformatted, cleaned up cph 18/8/99: rewritten to avoid O(numlines * numsectors) section It makes things more complicated, but saves seconds on big levels figgi 09/18/00 -- adapted for gl-nodes cph - convenient sub-function figgi count number of lines in each sector allocate line tables for each sector Enter those lines cph - For convenience, so I can sue the old code unchanged set the degenmobj_t to the middle of the bounding box adjust bounding box to map blocks killough 10/98 Remove slime trails. Slime trails are inherent to Doom's coordinate system -- i.e. there is nothing that a node builder can do to prevent slime trails ALL of the time, because it's a product of the integer coodinate system, and just because two lines pass through exact integer coordinates, doesn't necessarily mean that they will intersect at integer coordinates. Thus we must allow for fractional coordinates if we are to be able to split segs with node lines, as a node builder must do when creating a BSP tree. A wad file does not allow fractional coordinates, so node builders are out of luck except that they can try to limit the number of splits (they might also be able to detect the degree of roundoff error and try to avoid splits with a high degree of roundoff error). But we can use fractional coordinates here, inside the engine. It's like the difference between square inches and square miles, in terms of granularity. For each vertex of every seg, check to see whether it's also a vertex of the linedef associated with the seg (i.e, it's an endpoint). If it's not an endpoint, and it wasn't already moved, move the vertex towards the linedef by projecting it using the law of cosines. Formula:      2        2                         2        2    dx  x0 + dy  x1 + dx dy (y0 - y1)  dy  y0 + dx  y1 + dx dy (x0 - x1)   {---------------------------------, ---------------------------------}                  2     2                            2     2                dx  + dy                           dx  + dy (x0,y0) is the vertex being moved, and (x1,y1)-(x1+dx,y1+dy) is the reference linedef. Segs corresponding to orthogonal linedefs (exactly vertical or horizontal linedefs), which comprise at least half of all linedefs in most wads, don't need to be considered, because they almost never contribute to slime trails (because then any roundoff error is parallel to the linedef, which doesn't cause slime). Skipping simple orthogonal lines lets the code finish quicker. Please note: This section of code is not interchangable with TeamTNT's code which attempts to fix the same problem. Firelines (TM) is a Rezistered Trademark of MBF Productions killough 10/98 Hitlist for vertices Go through each segfiggi -- skip minisegs The parent linedef We can ignore orthogonal lines If we haven't processed vertex Mark this vertex as processed Exclude endpoints of linedefs Project the vertex back onto the parent linedef Obsfucated C contest entry:   :) P_SetupLevel killough 5/3/98: reformatted, cleaned up Initial height of PointOfView will be set by player think. Make sure all sounds are stopped before Z_FreeTags. cph - unlock the reject table if working with a devlopment map, reload it    W_Reload ();     killough 1/31/98: W_Reload obsolete find map name killough 1/24/98: simplify note: most of this ordering is important killough 3/1/98: P_LoadBlockMap call moved down to below killough 4/4/98: split load of sidedefs into two parts, to allow texture names to be used in special linedefs killough 10/98: remove slime trails from wad Note: you don't need to clear player queue slots -- a much simpler fix is in g_game.c -- killough 10/98 if deathmatch, randomly spawn the active players killough 3/26/98: Spawn icon landings: clear special respawning que set up world state preload graphics P_Init Emacs style mode select   -*- C++ -*-
 *-----------------------------------------------------------------------------
 *
 *
 *  PrBoom a Doom port merged with LxDoom and LSDLDoom
 *  based on BOOM, a modified and improved DOOM engine
 *  Copyright (C) 1999 by
 *  id Software, Chi Hoang, Lee Killough, Jim Flynn, Rand Phares, Ty Halderman
 *  Copyright (C) 1999-2000 by
 *  Jess Haas, Nicolas Kalkhof, Colin Phipps, Florian Schulze
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
 *
 * DESCRIPTION:
 *  Do all the WAD I/O, get map description,
 *  set up initial state and misc. LUTs.
 *
 *----------------------------------------------------------------------------- MAP related Lookup tables. Store VERTEXES, LINEDEFS, SIDEDEFS, etc.////////////////////////////////////////////////////////////////////////////////////////// figgi 08/21/00 -- constants and globals for glBsp support figgi -- suppport for new GL_VERT format v2.0 A separator name, GL_ExMx or GL_MAPxx Extra Vertices Segs, from linedefs & minisegs SubSectors, list of segs GL BSP nodes////////////////////////////////////////////////////////////////////////////////////////// BLOCKMAP Created from axis aligned bounding box of the map, a rectangular array of blocks of size ... Used to speed up collision detection by spatial subdivision in 2D. Blockmap size. size in mapblocks killough 3/1/98: remove blockmap limit internally: was short -- killough offsets in blockmap are from here was short -- killough origin of block map for thing chains REJECT For fast sight rejection. Speeds up enemy AI by skipping detailed  LineOf Sight calculation. Without the special effect, this could be used as a PVS lookup as well. cph - store reject lump num if cached cph - const* Maintain single and multi player starting spots. 1/11/98 killough: Remove limit on deathmatch starts killough killough P_LoadVertexes killough 5/3/98: reformatted, cleaned up cph - const Determine number of lumps:  total lump length / vertex record length. Allocate zone memory for buffer. Load data into cache. cph - wad handling updated Copy and convert vertex coordinates, internal representation as fixed. Free buffer memory. P_LoadSegs killough 5/3/98: reformatted, cleaned up cph - const cph - wad lump handling updated figgi -- there are no minisegs in classic BSP nodes killough 5/3/98: ignore 2s flag if second sidedef missing: cph - release the data P_LoadSubsectors killough 5/3/98: reformatted, cleaned up cph - const* cph - wad lump handling updated cph - release the data P_LoadSectors killough 5/3/98: reformatted, cleaned up cph - const* cph - wad lump handling updated phares 3/14/98jff 2/26/98 add fields to support locking out stair retriggering until build completes killough 3/7/98: floor and ceiling flats offsets sector used to get floor and ceiling height sector used to get floor lighting killough 3/7/98: end changes killough 4/11/98 sector used to get ceiling lighting: killough 4/4/98: colormaps: killough 10/98: sky textures coming from sidedefs: cph - release the data P_LoadNodes killough 5/3/98: reformatted, cleaned up cph - const* cph - wad lump handling updated cph - release the data P_LoadThings killough 5/3/98: reformatted, cleaned up this needed to be added as the SHORT calls were overwriting eachother on reload cph - wad lump handling updated, const* Do not spawn cool, new monsters if !commercial Arachnotron Archvile Boss Brain Boss Shooter Hell Knight Mancubus Pain Elemental Former Human Commando Revenant Wolf SS Do spawn all other stuff. cph - release the data P_LoadLineDefs Also counts secret lines for intermissions.        ^^^ ??? killough ??? Does this mean secrets used to be linedef-based, rather than sector-based? killough 4/4/98: split into two functions, to allow sidedef overloading killough 5/3/98: reformatted, cleaned up cph - const* cph - wad lump handling updated killough 4/11/98: no translucency by default killough 4/4/98: support special sidedef interpretation below cph - release the lump killough 4/4/98: delay using sidedefs until they are loaded killough 5/3/98: reformatted, cleaned up cph 2002/07/20 - these errors are fatal if not fixed, so apply them in compatibility mode - a desync is better than a crash! killough 11/98: fix common wad errors (missing sidedefs): Substitute dummy sidedef for missing right side cph - print a warning about the bug Clear 2s flag for missing left side cph - print a warning about the bug killough 4/11/98: handle special types killough 4/11/98: translucent 2s textures translucency from sidedef if tag==0, affect this linedef only if tag!=0, affect all matching linedefs P_LoadSideDefs killough 4/4/98: split into two functions killough 4/4/98: delay using texture names until after linedefs are loaded, to allow overloading. killough 5/3/98: reformatted, cleaned up cph - const*, wad lump handling updated killough 4/4/98: allow sidedef texture names to be overloaded killough 4/11/98: refined to allow colormaps to work as wall textures if invalid as colormaps but valid as textures. variable colormap via 242 linedef killough 4/11/98: apply translucency to 2s normal texture normal cases cph - release the lump jff 10/6/98 New code added to speed up calculation of internal blockmap Algorithm is order of nlines*(ncols+nrows) not nlines*ncols*nrows places to shift rel position for cell num  mask for rel position within cell  size guardband around map used  jff 10/8/98 use guardband>0 jff 10/12/98 0 ok with + 1 in rows,cols type used to list lines in each block Subroutine to add a line number to a block list It simply returns if the line is already in the block Actually construct the blockmap lump from the level data This finds the intersection of each linedef with the column and row lines at the left and bottom of each blockmap cell. It then adds the line to all block lists touching the intersection. blockmap origin (lower left) blockmap dimensions array of pointers to lists of lines array of counters of line lists array keeping track of blocks/line number of cells = nrows*ncols total length of all blocklists init for map limits search scan for map limits, which the blockmap must enclose work in map coords, not fixed_t set up blockmap area to enclose level plus marginjff 10/12/98+1 needed formap exactly 1 cell create the array of pointers on NBlocks to blocklists also create an array of linelist counts on NBlocks finally make an array in which we can mark blocks done per line CPhipps - calloc's initialize each blocklist, and enter the trailing -1 in all blocklists note the linked list of lines grows backwards For each linedef in the wad, determine all blockmap blocks it touches, and add the linedef number to the blocklists for those blocks lines[i] map coords lines[i] slopetype block cell coords extremal lines[i] coords no blocks done for this linedef yet The line always belongs to the blocks containing its endpoints For each column, see where the line along its left edge, which it contains, intersects the Linedef i. Add i to each corresponding blocklist. don't interesect vertical lines with columns intersection of Linedef with x=xorg+(j<<blkshift) (y-y1)*dx = dy*(x-x1) y = dy*(x-x1)+y1*dx; (x,y) is intersection block row number y position within block outside blockmap, continue line doesn't touch column The cell that contains the intersection point is always added if the intersection is at a corner it depends on the slope (and whether the line extends past the intersection) which blocks are hit intersection at a corner   \ - blocks x,y-, x-,y   / - block x-,y-   - - block x-,y else not at corner: x-,y For each row, see where the line along its bottom edge, which it contains, intersects the Linedef i. Add i to all the corresponding blocklists. intersection of Linedef with y=yorg+(j<<blkshift) (x,y) on Linedef i satisfies: (y-y1)*dx = dy*(x-x1) x = dx*(y-y1)/dy+x1; (x,y) is intersection block column number x position within block outside blockmap, continue line doesn't touch row The cell that contains the intersection point is always added if the intersection is at a corner it depends on the slope (and whether the line extends past the intersection) which blocks are hit intersection at a corner   \ - blocks x,y-, x-,y   | - block x,y-   / - block x-,y- else not on a corner: x,y- Add initial 0 to all blocklists count the total number of lines (and 0's and -1's) Create the blockmap lump blockmap header offsets to lists and block lists set offset to block's list add the lines in each block's list to the blockmaplump delete each list node as we go free all temporary storage jff 10/6/98 End new code added to speed up calculation of internal blockmap P_LoadBlockMap killough 3/1/98: substantially modified to work towards removing blockmap limit (a wad limitation) killough 3/30/98: Rewritten to remove blockmap limit, though current algorithm is brute-force and unoptimal. cph - const*, wad lump handling updated killough 3/1/98: Expand wad blockmap into larger internal one, by treating all offsets except -1 as unsigned and zero-extending them. This potentially doubles the size of blockmaps allowed, because Doom originally considered the offsets as always signed. killough 3/1/98 cph - unlock the lump clear out mobj chains - CPhipps - use calloc P_GroupLines Builds sector line lists and subsector sector numbers. Finds block bounding boxes for sectors. killough 5/3/98: reformatted, cleaned up cph 18/8/99: rewritten to avoid O(numlines * numsectors) section It makes things more complicated, but saves seconds on big levels figgi 09/18/00 -- adapted for gl-nodes cph - convenient sub-function figgi count number of lines in each sector allocate line tables for each sector Enter those lines cph - For convenience, so I can sue the old code unchanged set the degenmobj_t to the middle of the bounding box adjust bounding box to map blocks killough 10/98 Remove slime trails. Slime trails are inherent to Doom's coordinate system -- i.e. there is nothing that a node builder can do to prevent slime trails ALL of the time, because it's a product of the integer coodinate system, and just because two lines pass through exact integer coordinates, doesn't necessarily mean that they will intersect at integer coordinates. Thus we must allow for fractional coordinates if we are to be able to split segs with node lines, as a node builder must do when creating a BSP tree. A wad file does not allow fractional coordinates, so node builders are out of luck except that they can try to limit the number of splits (they might also be able to detect the degree of roundoff error and try to avoid splits with a high degree of roundoff error). But we can use fractional coordinates here, inside the engine. It's like the difference between square inches and square miles, in terms of granularity. For each vertex of every seg, check to see whether it's also a vertex of the linedef associated with the seg (i.e, it's an endpoint). If it's not an endpoint, and it wasn't already moved, move the vertex towards the linedef by projecting it using the law of cosines. Formula:      2        2                         2        2    dx  x0 + dy  x1 + dx dy (y0 - y1)  dy  y0 + dx  y1 + dx dy (x0 - x1)   {---------------------------------, ---------------------------------}                  2     2                            2     2                dx  + dy                           dx  + dy (x0,y0) is the vertex being moved, and (x1,y1)-(x1+dx,y1+dy) is the reference linedef. Segs corresponding to orthogonal linedefs (exactly vertical or horizontal linedefs), which comprise at least half of all linedefs in most wads, don't need to be considered, because they almost never contribute to slime trails (because then any roundoff error is parallel to the linedef, which doesn't cause slime). Skipping simple orthogonal lines lets the code finish quicker. Please note: This section of code is not interchangable with TeamTNT's code which attempts to fix the same problem. Firelines (TM) is a Rezistered Trademark of MBF Productions killough 10/98 Hitlist for vertices Go through each segfiggi -- skip minisegs The parent linedef We can ignore orthogonal lines If we haven't processed vertex Mark this vertex as processed Exclude endpoints of linedefs Project the vertex back onto the parent linedef Obsfucated C contest entry:   :) P_SetupLevel killough 5/3/98: reformatted, cleaned up Initial height of PointOfView will be set by player think. Make sure all sounds are stopped before Z_FreeTags. cph - unlock the reject table if working with a devlopment map, reload it    W_Reload ();     killough 1/31/98: W_Reload obsolete find map name killough 1/24/98: simplify note: most of this ordering is important killough 3/1/98: P_LoadBlockMap call moved down to below killough 4/4/98: split load of sidedefs into two parts, to allow texture names to be used in special linedefs killough 10/98: remove slime trails from wad Note: you don't need to clear player queue slots -- a much simpler fix is in g_game.c -- killough 10/98 if deathmatch, randomly spawn the active players killough 3/26/98: Spawn icon landings: clear special respawning que set up world state preload graphics P_Init