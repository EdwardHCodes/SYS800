
 * Convert BDF files to C source and/or Rockbox .fnt file format
 *
 * Copyright (c) 2002 by Greg Haerr <greg@censoft.com>
 *
 * What fun it is converting font data...
 *
 * 09/17/02    Version 1.0
  define this for the new, rotated format  BEGIN font.h  loadable font magic and version number  newer version 
 * bitmap_t helper macros
  bitmap image unit size  Number of words to hold a pixel line of width x pixels  builtin C-based proportional/fixed font structure  based on The Microwindows Project http://microwindows.org  max width in pixels  height in pixels  ascent (baseline) height  first character in bitmap  font size in glyphs ('holes' included)  depth of the font, 0=1bit 1=4bit  16-bit right-padded bitmap data  offsets into bitmap data  character widths or NULL if fixed  default char (not glyph index)  # words of bitmap_t bits  unused by runtime system, read in by convbdf  number of different glyphs  number of glyphs as declared in the header  ascent as declared in the header  descent as declared in the header  max. char ascent (before adjusting)  max. char descent (before adjusting)  offsets into rotated bitmap data  font name  facename of font  copyright info for loadable fonts  Max 'overflow' of a char's ascent (descent) over the font's one  The number of clipped ascents/descents/total  default width in pixels (can be overwritten at char level)  END font.h  Description of how the ascent/descent is allowed to grow  The delta value (in pixels or percents)  Is the value in percents (true) or pixels (false)?  MUST the value be set (true) or is it just a max (false)  Depending on the verbosity level some warnings are printed or not  Prints a warning of the specified verbosity level. It will only be
   really printed if the level is >= the level set in the settings  Verbosity level for clip related warnings at font level  Verbosity level for clip related warnings at char level  Verbosity level for other warnings  Don't allow ascent to grow by default  Don't allow descent to grow by default 
   Counts the glyphs and determines the max dimensions of glyphs
   (fills the fields nchars, maxwidth, max_over_ascent, max_over_descent).
   Returns 0 on failure or not-0 on success.
 Corrects bbx and width if bbx<0  Corrects the ascent and returns the new value (value to use)  We use string array because some C compilers issue warnings about too long strings  Must be the last element in the array  parse command line options  multiple -args on av[]  next option must have dash  proceed to next option  generate .c output  generate .h output  generate .fnt output  don't gen bitmap comments  set output file  set encoding limit  set encoding start  ascent growth  descent growth  verbosity  tracing  remove directory prefix and file suffix from full path  remove prepended path and extension  skip av[0]  read command line options  free font structure  build incore structure from .bdf file  Correct ascent/descent if necessary  Alocate memory  read bdf font header information, return 0 on error  set certain values to errors for later error checking  not required  not required  not required  For now  For now  for BDF version 2.2 
         * Reading ENCODING is necessary to get firstchar/lastchar
         * which is needed to pre-calculate our offset and widths
         * array sizes.
          calc font height  calc default char  calc font size (offset/width entries) 
 * TODO: rework the code to avoid logics duplication in
 *       bdf_read_bitmaps and bdf_analyze_font
  read bdf font bitmaps, return 0 on error  reset file pointer  initially mark offsets as not used  use font boundingbox width if DWIDTH <= 0  set bits offset in encode map  calc char width  clear bitmap  Clipped -> decrease the height  Clipped -> decrease the height  0-based y within the char  read bitmaps  We're beyond the area that Rockbox can render -> clip  This line doesn't count  handle overflow into next image word  change unused width values to default char values  determine whether font doesn't require encode table  determine whether font is fixed-width  reallocate bits array to actual bits used  always update, rotated is smaller  read the next non-comment line, returns buf or NULL if EOF  Rockbox can't render overlapping glyphs  reset file pointer  use font boundingbox width if DWIDTH <= 0  return hex value of portion of buffer 
 * Take an bitmap_t bitmap and convert to Rockbox format.
 * Used for converting font glyphs for the time being.
 * Can use for standard X11 and Win32 images as well.
 * See format description in lcd-recorder.c
 *
 * Doing it this way keeps fonts in standard formats,
 * as well as keeping Rockbox hw bitmap format.
 *
 * Returns the size of the rotated glyph (in bytes) or a
 * negative value if the glyph could not be rotated.
  output buffer  buffer size  # words of input image  bit mask for destination  bit mask for source  How large the buffer should be to hold the rotated bitmap
       of a glyph of size (width x height)  calc words of input image  clear background  calc src input bit  for each input column...  input word done?  next input word  if set in input, set in rotated output  next input bit  next output bit (row)  output bit > 7?  next output byte row  return result size in bytes  ROTATE  generate C source from in-core font  generate bitmaps  Skip missing glyphs  pre-rotated into Rockbox bitmap format  column rows  update offrot since bits are now in sorted order  output offset table  output width table for proportional fonts  output struct font struct  generate C header from in-core font  generate .fnt format file from in-core font  write magic and version number  internal font name  copyright  font info  depth = 0 for bdffonts  variable font data sizes  # words of bitmap_t  # ints of offset  # bytes of width  variable font data  Skip missing glyphs  update offrot since bits are now in sorted order  bitmap offset is small enough, use unsigned short for offset  pad to 16-bit boundary  bitmap offset is large then 64K, use unsigned int for offset  pad to 32-bit boundary  pad to 32-bit boundary 
 * Convert BDF files to C source and/or Rockbox .fnt file format
 *
 * Copyright (c) 2002 by Greg Haerr <greg@censoft.com>
 *
 * What fun it is converting font data...
 *
 * 09/17/02    Version 1.0
  define this for the new, rotated format  BEGIN font.h  loadable font magic and version number  newer version 
 * bitmap_t helper macros
  bitmap image unit size  Number of words to hold a pixel line of width x pixels  builtin C-based proportional/fixed font structure  based on The Microwindows Project http://microwindows.org  max width in pixels  height in pixels  ascent (baseline) height  first character in bitmap  font size in glyphs ('holes' included)  depth of the font, 0=1bit 1=4bit  16-bit right-padded bitmap data  offsets into bitmap data  character widths or NULL if fixed  default char (not glyph index)  # words of bitmap_t bits  unused by runtime system, read in by convbdf  number of different glyphs  number of glyphs as declared in the header  ascent as declared in the header  descent as declared in the header  max. char ascent (before adjusting)  max. char descent (before adjusting)  offsets into rotated bitmap data  font name  facename of font  copyright info for loadable fonts  Max 'overflow' of a char's ascent (descent) over the font's one  The number of clipped ascents/descents/total  default width in pixels (can be overwritten at char level)  END font.h  Description of how the ascent/descent is allowed to grow  The delta value (in pixels or percents)  Is the value in percents (true) or pixels (false)?  MUST the value be set (true) or is it just a max (false)  Depending on the verbosity level some warnings are printed or not  Prints a warning of the specified verbosity level. It will only be
   really printed if the level is >= the level set in the settings  Verbosity level for clip related warnings at font level  Verbosity level for clip related warnings at char level  Verbosity level for other warnings  Don't allow ascent to grow by default  Don't allow descent to grow by default 
   Counts the glyphs and determines the max dimensions of glyphs
   (fills the fields nchars, maxwidth, max_over_ascent, max_over_descent).
   Returns 0 on failure or not-0 on success.
 Corrects bbx and width if bbx<0  Corrects the ascent and returns the new value (value to use)  We use string array because some C compilers issue warnings about too long strings  Must be the last element in the array  parse command line options  multiple -args on av[]  next option must have dash  proceed to next option  generate .c output  generate .h output  generate .fnt output  don't gen bitmap comments  set output file  set encoding limit  set encoding start  ascent growth  descent growth  verbosity  tracing  remove directory prefix and file suffix from full path  remove prepended path and extension  skip av[0]  read command line options  free font structure  build incore structure from .bdf file  Correct ascent/descent if necessary  Alocate memory  read bdf font header information, return 0 on error  set certain values to errors for later error checking  not required  not required  not required  For now  For now  for BDF version 2.2 
         * Reading ENCODING is necessary to get firstchar/lastchar
         * which is needed to pre-calculate our offset and widths
         * array sizes.
          calc font height  calc default char  calc font size (offset/width entries) 
 * TODO: rework the code to avoid logics duplication in
 *       bdf_read_bitmaps and bdf_analyze_font
  read bdf font bitmaps, return 0 on error  reset file pointer  initially mark offsets as not used  use font boundingbox width if DWIDTH <= 0  set bits offset in encode map  calc char width  clear bitmap  Clipped -> decrease the height  Clipped -> decrease the height  0-based y within the char  read bitmaps  We're beyond the area that Rockbox can render -> clip  This line doesn't count  handle overflow into next image word  change unused width values to default char values  determine whether font doesn't require encode table  determine whether font is fixed-width  reallocate bits array to actual bits used  always update, rotated is smaller  read the next non-comment line, returns buf or NULL if EOF  Rockbox can't render overlapping glyphs  reset file pointer  use font boundingbox width if DWIDTH <= 0  return hex value of portion of buffer 
 * Take an bitmap_t bitmap and convert to Rockbox format.
 * Used for converting font glyphs for the time being.
 * Can use for standard X11 and Win32 images as well.
 * See format description in lcd-recorder.c
 *
 * Doing it this way keeps fonts in standard formats,
 * as well as keeping Rockbox hw bitmap format.
 *
 * Returns the size of the rotated glyph (in bytes) or a
 * negative value if the glyph could not be rotated.
  output buffer  buffer size  # words of input image  bit mask for destination  bit mask for source  How large the buffer should be to hold the rotated bitmap
       of a glyph of size (width x height)  calc words of input image  clear background  calc src input bit  for each input column...  input word done?  next input word  if set in input, set in rotated output  next input bit  next output bit (row)  output bit > 7?  next output byte row  return result size in bytes  ROTATE  generate C source from in-core font  generate bitmaps  Skip missing glyphs  pre-rotated into Rockbox bitmap format  column rows  update offrot since bits are now in sorted order  output offset table  output width table for proportional fonts  output struct font struct  generate C header from in-core font  generate .fnt format file from in-core font  write magic and version number  internal font name  copyright  font info  depth = 0 for bdffonts  variable font data sizes  # words of bitmap_t  # ints of offset  # bytes of width  variable font data  Skip missing glyphs  update offrot since bits are now in sorted order  bitmap offset is small enough, use unsigned short for offset  pad to 16-bit boundary  bitmap offset is large then 64K, use unsigned int for offset  pad to 32-bit boundary  pad to 32-bit boundary 
 * Convert BDF files to C source and/or Rockbox .fnt file format
 *
 * Copyright (c) 2002 by Greg Haerr <greg@censoft.com>
 *
 * What fun it is converting font data...
 *
 * 09/17/02    Version 1.0
  define this for the new, rotated format  BEGIN font.h  loadable font magic and version number  newer version 
 * bitmap_t helper macros
  bitmap image unit size  Number of words to hold a pixel line of width x pixels  builtin C-based proportional/fixed font structure  based on The Microwindows Project http://microwindows.org  max width in pixels  height in pixels  ascent (baseline) height  first character in bitmap  font size in glyphs ('holes' included)  depth of the font, 0=1bit 1=4bit  16-bit right-padded bitmap data  offsets into bitmap data  character widths or NULL if fixed  default char (not glyph index)  # words of bitmap_t bits  unused by runtime system, read in by convbdf  number of different glyphs  number of glyphs as declared in the header  ascent as declared in the header  descent as declared in the header  max. char ascent (before adjusting)  max. char descent (before adjusting)  offsets into rotated bitmap data  font name  facename of font  copyright info for loadable fonts  Max 'overflow' of a char's ascent (descent) over the font's one  The number of clipped ascents/descents/total  default width in pixels (can be overwritten at char level)  END font.h  Description of how the ascent/descent is allowed to grow  The delta value (in pixels or percents)  Is the value in percents (true) or pixels (false)?  MUST the value be set (true) or is it just a max (false)  Depending on the verbosity level some warnings are printed or not  Prints a warning of the specified verbosity level. It will only be
   really printed if the level is >= the level set in the settings  Verbosity level for clip related warnings at font level  Verbosity level for clip related warnings at char level  Verbosity level for other warnings  Don't allow ascent to grow by default  Don't allow descent to grow by default 
   Counts the glyphs and determines the max dimensions of glyphs
   (fills the fields nchars, maxwidth, max_over_ascent, max_over_descent).
   Returns 0 on failure or not-0 on success.
 Corrects bbx and width if bbx<0  Corrects the ascent and returns the new value (value to use)  We use string array because some C compilers issue warnings about too long strings  Must be the last element in the array  parse command line options  multiple -args on av[]  next option must have dash  proceed to next option  generate .c output  generate .h output  generate .fnt output  don't gen bitmap comments  set output file  set encoding limit  set encoding start  ascent growth  descent growth  verbosity  tracing  remove directory prefix and file suffix from full path  remove prepended path and extension  skip av[0]  read command line options  free font structure  build incore structure from .bdf file  Correct ascent/descent if necessary  Alocate memory  read bdf font header information, return 0 on error  set certain values to errors for later error checking  not required  not required  not required  For now  For now  for BDF version 2.2 
         * Reading ENCODING is necessary to get firstchar/lastchar
         * which is needed to pre-calculate our offset and widths
         * array sizes.
          calc font height  calc default char  calc font size (offset/width entries) 
 * TODO: rework the code to avoid logics duplication in
 *       bdf_read_bitmaps and bdf_analyze_font
  read bdf font bitmaps, return 0 on error  reset file pointer  initially mark offsets as not used  use font boundingbox width if DWIDTH <= 0  set bits offset in encode map  calc char width  clear bitmap  Clipped -> decrease the height  Clipped -> decrease the height  0-based y within the char  read bitmaps  We're beyond the area that Rockbox can render -> clip  This line doesn't count  handle overflow into next image word  change unused width values to default char values  determine whether font doesn't require encode table  determine whether font is fixed-width  reallocate bits array to actual bits used  always update, rotated is smaller  read the next non-comment line, returns buf or NULL if EOF  Rockbox can't render overlapping glyphs  reset file pointer  use font boundingbox width if DWIDTH <= 0  return hex value of portion of buffer 
 * Take an bitmap_t bitmap and convert to Rockbox format.
 * Used for converting font glyphs for the time being.
 * Can use for standard X11 and Win32 images as well.
 * See format description in lcd-recorder.c
 *
 * Doing it this way keeps fonts in standard formats,
 * as well as keeping Rockbox hw bitmap format.
 *
 * Returns the size of the rotated glyph (in bytes) or a
 * negative value if the glyph could not be rotated.
  output buffer  buffer size  # words of input image  bit mask for destination  bit mask for source  How large the buffer should be to hold the rotated bitmap
       of a glyph of size (width x height)  calc words of input image  clear background  calc src input bit  for each input column...  input word done?  next input word  if set in input, set in rotated output  next input bit  next output bit (row)  output bit > 7?  next output byte row  return result size in bytes  ROTATE  generate C source from in-core font  generate bitmaps  Skip missing glyphs  pre-rotated into Rockbox bitmap format  column rows  update offrot since bits are now in sorted order  output offset table  output width table for proportional fonts  output struct font struct  generate C header from in-core font  generate .fnt format file from in-core font  write magic and version number  internal font name  copyright  font info  depth = 0 for bdffonts  variable font data sizes  # words of bitmap_t  # ints of offset  # bytes of width  variable font data  Skip missing glyphs  update offrot since bits are now in sorted order  bitmap offset is small enough, use unsigned short for offset  pad to 16-bit boundary  bitmap offset is large then 64K, use unsigned int for offset  pad to 32-bit boundary  pad to 32-bit boundary 