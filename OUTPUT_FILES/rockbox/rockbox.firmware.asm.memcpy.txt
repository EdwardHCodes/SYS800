
FUNCTION
        <<memcpy>>---copy memory regions

ANSI_SYNOPSIS
        #include <string.h>
        void* memcpy(void *<[out]>, const void *<[in]>, size_t <[n]>);

TRAD_SYNOPSIS
        void *memcpy(<[out]>, <[in]>, <[n]>
        void *<[out]>;
        void *<[in]>;
        size_t <[n]>;

DESCRIPTION
        This function copies <[n]> bytes from the memory region
        pointed to by <[in]> to the memory region pointed to by
        <[out]>.

        If the regions overlap, the behavior is undefined.

RETURNS
        <<memcpy>> returns a pointer to the first byte of the <[out]>
        region.

PORTABILITY
<<memcpy>> is ANSI C.

<<memcpy>> requires no supporting OS subroutines.

QUICKREF
        memcpy ansi pure
         for _DEFUN  Nonzero if either X or Y is not aligned on a "long" boundary.   How many bytes are copied each iteration of the 4X unrolled loop.   How many bytes are copied each iteration of the word copy loop.   Threshold for punting to the byte copier.   If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.   Copy 4X long words at a time if possible.   Copy one long word at a time if possible.   Pick up any residual with a byte copier.   not PREFER_SIZE_OVER_SPEED 
FUNCTION
        <<memcpy>>---copy memory regions

ANSI_SYNOPSIS
        #include <string.h>
        void* memcpy(void *<[out]>, const void *<[in]>, size_t <[n]>);

TRAD_SYNOPSIS
        void *memcpy(<[out]>, <[in]>, <[n]>
        void *<[out]>;
        void *<[in]>;
        size_t <[n]>;

DESCRIPTION
        This function copies <[n]> bytes from the memory region
        pointed to by <[in]> to the memory region pointed to by
        <[out]>.

        If the regions overlap, the behavior is undefined.

RETURNS
        <<memcpy>> returns a pointer to the first byte of the <[out]>
        region.

PORTABILITY
<<memcpy>> is ANSI C.

<<memcpy>> requires no supporting OS subroutines.

QUICKREF
        memcpy ansi pure
         for _DEFUN  Nonzero if either X or Y is not aligned on a "long" boundary.   How many bytes are copied each iteration of the 4X unrolled loop.   How many bytes are copied each iteration of the word copy loop.   Threshold for punting to the byte copier.   If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.   Copy 4X long words at a time if possible.   Copy one long word at a time if possible.   Pick up any residual with a byte copier.   not PREFER_SIZE_OVER_SPEED 
FUNCTION
        <<memcpy>>---copy memory regions

ANSI_SYNOPSIS
        #include <string.h>
        void* memcpy(void *<[out]>, const void *<[in]>, size_t <[n]>);

TRAD_SYNOPSIS
        void *memcpy(<[out]>, <[in]>, <[n]>
        void *<[out]>;
        void *<[in]>;
        size_t <[n]>;

DESCRIPTION
        This function copies <[n]> bytes from the memory region
        pointed to by <[in]> to the memory region pointed to by
        <[out]>.

        If the regions overlap, the behavior is undefined.

RETURNS
        <<memcpy>> returns a pointer to the first byte of the <[out]>
        region.

PORTABILITY
<<memcpy>> is ANSI C.

<<memcpy>> requires no supporting OS subroutines.

QUICKREF
        memcpy ansi pure
         for _DEFUN  Nonzero if either X or Y is not aligned on a "long" boundary.   How many bytes are copied each iteration of the 4X unrolled loop.   How many bytes are copied each iteration of the word copy loop.   Threshold for punting to the byte copier.   If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.   Copy 4X long words at a time if possible.   Copy one long word at a time if possible.   Pick up any residual with a byte copier.   not PREFER_SIZE_OVER_SPEED 